/*
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AssociateRepositoryRequestKMSKeyDetails;
import org.openapitools.client.model.ProviderType;
import org.openapitools.client.model.RepositoryAssociationState;
import org.openapitools.client.model.S3RepositoryDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociateRepositoryResponseRepositoryAssociation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:00.218645-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociateRepositoryResponseRepositoryAssociation {
  public static final String SERIALIZED_NAME_ASSOCIATION_ID = "AssociationId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ID)
  private String associationId;

  public static final String SERIALIZED_NAME_ASSOCIATION_ARN = "AssociationArn";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ARN)
  private String associationArn;

  public static final String SERIALIZED_NAME_CONNECTION_ARN = "ConnectionArn";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ARN)
  private String connectionArn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER = "Owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "ProviderType";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  private ProviderType providerType;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private RepositoryAssociationState state;

  public static final String SERIALIZED_NAME_STATE_REASON = "StateReason";
  @SerializedName(SERIALIZED_NAME_STATE_REASON)
  private String stateReason;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME_STAMP = "LastUpdatedTimeStamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME_STAMP)
  private OffsetDateTime lastUpdatedTimeStamp;

  public static final String SERIALIZED_NAME_CREATED_TIME_STAMP = "CreatedTimeStamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME_STAMP)
  private OffsetDateTime createdTimeStamp;

  public static final String SERIALIZED_NAME_KM_S_KEY_DETAILS = "KMSKeyDetails";
  @SerializedName(SERIALIZED_NAME_KM_S_KEY_DETAILS)
  private AssociateRepositoryRequestKMSKeyDetails kmSKeyDetails;

  public static final String SERIALIZED_NAME_S3_REPOSITORY_DETAILS = "S3RepositoryDetails";
  @SerializedName(SERIALIZED_NAME_S3_REPOSITORY_DETAILS)
  private S3RepositoryDetails s3RepositoryDetails;

  public AssociateRepositoryResponseRepositoryAssociation() {
  }

  public AssociateRepositoryResponseRepositoryAssociation associationId(String associationId) {
    this.associationId = associationId;
    return this;
  }

  /**
   * Get associationId
   * @return associationId
   */
  @javax.annotation.Nullable
  public String getAssociationId() {
    return associationId;
  }

  public void setAssociationId(String associationId) {
    this.associationId = associationId;
  }


  public AssociateRepositoryResponseRepositoryAssociation associationArn(String associationArn) {
    this.associationArn = associationArn;
    return this;
  }

  /**
   * Get associationArn
   * @return associationArn
   */
  @javax.annotation.Nullable
  public String getAssociationArn() {
    return associationArn;
  }

  public void setAssociationArn(String associationArn) {
    this.associationArn = associationArn;
  }


  public AssociateRepositoryResponseRepositoryAssociation connectionArn(String connectionArn) {
    this.connectionArn = connectionArn;
    return this;
  }

  /**
   * Get connectionArn
   * @return connectionArn
   */
  @javax.annotation.Nullable
  public String getConnectionArn() {
    return connectionArn;
  }

  public void setConnectionArn(String connectionArn) {
    this.connectionArn = connectionArn;
  }


  public AssociateRepositoryResponseRepositoryAssociation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AssociateRepositoryResponseRepositoryAssociation owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public AssociateRepositoryResponseRepositoryAssociation providerType(ProviderType providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * Get providerType
   * @return providerType
   */
  @javax.annotation.Nullable
  public ProviderType getProviderType() {
    return providerType;
  }

  public void setProviderType(ProviderType providerType) {
    this.providerType = providerType;
  }


  public AssociateRepositoryResponseRepositoryAssociation state(RepositoryAssociationState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public RepositoryAssociationState getState() {
    return state;
  }

  public void setState(RepositoryAssociationState state) {
    this.state = state;
  }


  public AssociateRepositoryResponseRepositoryAssociation stateReason(String stateReason) {
    this.stateReason = stateReason;
    return this;
  }

  /**
   * Get stateReason
   * @return stateReason
   */
  @javax.annotation.Nullable
  public String getStateReason() {
    return stateReason;
  }

  public void setStateReason(String stateReason) {
    this.stateReason = stateReason;
  }


  public AssociateRepositoryResponseRepositoryAssociation lastUpdatedTimeStamp(OffsetDateTime lastUpdatedTimeStamp) {
    this.lastUpdatedTimeStamp = lastUpdatedTimeStamp;
    return this;
  }

  /**
   * Get lastUpdatedTimeStamp
   * @return lastUpdatedTimeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTimeStamp() {
    return lastUpdatedTimeStamp;
  }

  public void setLastUpdatedTimeStamp(OffsetDateTime lastUpdatedTimeStamp) {
    this.lastUpdatedTimeStamp = lastUpdatedTimeStamp;
  }


  public AssociateRepositoryResponseRepositoryAssociation createdTimeStamp(OffsetDateTime createdTimeStamp) {
    this.createdTimeStamp = createdTimeStamp;
    return this;
  }

  /**
   * Get createdTimeStamp
   * @return createdTimeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimeStamp() {
    return createdTimeStamp;
  }

  public void setCreatedTimeStamp(OffsetDateTime createdTimeStamp) {
    this.createdTimeStamp = createdTimeStamp;
  }


  public AssociateRepositoryResponseRepositoryAssociation kmSKeyDetails(AssociateRepositoryRequestKMSKeyDetails kmSKeyDetails) {
    this.kmSKeyDetails = kmSKeyDetails;
    return this;
  }

  /**
   * Get kmSKeyDetails
   * @return kmSKeyDetails
   */
  @javax.annotation.Nullable
  public AssociateRepositoryRequestKMSKeyDetails getKmSKeyDetails() {
    return kmSKeyDetails;
  }

  public void setKmSKeyDetails(AssociateRepositoryRequestKMSKeyDetails kmSKeyDetails) {
    this.kmSKeyDetails = kmSKeyDetails;
  }


  public AssociateRepositoryResponseRepositoryAssociation s3RepositoryDetails(S3RepositoryDetails s3RepositoryDetails) {
    this.s3RepositoryDetails = s3RepositoryDetails;
    return this;
  }

  /**
   * Get s3RepositoryDetails
   * @return s3RepositoryDetails
   */
  @javax.annotation.Nullable
  public S3RepositoryDetails getS3RepositoryDetails() {
    return s3RepositoryDetails;
  }

  public void setS3RepositoryDetails(S3RepositoryDetails s3RepositoryDetails) {
    this.s3RepositoryDetails = s3RepositoryDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociateRepositoryResponseRepositoryAssociation associateRepositoryResponseRepositoryAssociation = (AssociateRepositoryResponseRepositoryAssociation) o;
    return Objects.equals(this.associationId, associateRepositoryResponseRepositoryAssociation.associationId) &&
        Objects.equals(this.associationArn, associateRepositoryResponseRepositoryAssociation.associationArn) &&
        Objects.equals(this.connectionArn, associateRepositoryResponseRepositoryAssociation.connectionArn) &&
        Objects.equals(this.name, associateRepositoryResponseRepositoryAssociation.name) &&
        Objects.equals(this.owner, associateRepositoryResponseRepositoryAssociation.owner) &&
        Objects.equals(this.providerType, associateRepositoryResponseRepositoryAssociation.providerType) &&
        Objects.equals(this.state, associateRepositoryResponseRepositoryAssociation.state) &&
        Objects.equals(this.stateReason, associateRepositoryResponseRepositoryAssociation.stateReason) &&
        Objects.equals(this.lastUpdatedTimeStamp, associateRepositoryResponseRepositoryAssociation.lastUpdatedTimeStamp) &&
        Objects.equals(this.createdTimeStamp, associateRepositoryResponseRepositoryAssociation.createdTimeStamp) &&
        Objects.equals(this.kmSKeyDetails, associateRepositoryResponseRepositoryAssociation.kmSKeyDetails) &&
        Objects.equals(this.s3RepositoryDetails, associateRepositoryResponseRepositoryAssociation.s3RepositoryDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associationId, associationArn, connectionArn, name, owner, providerType, state, stateReason, lastUpdatedTimeStamp, createdTimeStamp, kmSKeyDetails, s3RepositoryDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociateRepositoryResponseRepositoryAssociation {\n");
    sb.append("    associationId: ").append(toIndentedString(associationId)).append("\n");
    sb.append("    associationArn: ").append(toIndentedString(associationArn)).append("\n");
    sb.append("    connectionArn: ").append(toIndentedString(connectionArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateReason: ").append(toIndentedString(stateReason)).append("\n");
    sb.append("    lastUpdatedTimeStamp: ").append(toIndentedString(lastUpdatedTimeStamp)).append("\n");
    sb.append("    createdTimeStamp: ").append(toIndentedString(createdTimeStamp)).append("\n");
    sb.append("    kmSKeyDetails: ").append(toIndentedString(kmSKeyDetails)).append("\n");
    sb.append("    s3RepositoryDetails: ").append(toIndentedString(s3RepositoryDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssociationId");
    openapiFields.add("AssociationArn");
    openapiFields.add("ConnectionArn");
    openapiFields.add("Name");
    openapiFields.add("Owner");
    openapiFields.add("ProviderType");
    openapiFields.add("State");
    openapiFields.add("StateReason");
    openapiFields.add("LastUpdatedTimeStamp");
    openapiFields.add("CreatedTimeStamp");
    openapiFields.add("KMSKeyDetails");
    openapiFields.add("S3RepositoryDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociateRepositoryResponseRepositoryAssociation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociateRepositoryResponseRepositoryAssociation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociateRepositoryResponseRepositoryAssociation is not found in the empty JSON string", AssociateRepositoryResponseRepositoryAssociation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociateRepositoryResponseRepositoryAssociation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociateRepositoryResponseRepositoryAssociation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AssociationId`
      if (jsonObj.get("AssociationId") != null && !jsonObj.get("AssociationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssociationId"));
      }
      // validate the optional field `AssociationArn`
      if (jsonObj.get("AssociationArn") != null && !jsonObj.get("AssociationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssociationArn"));
      }
      // validate the optional field `ConnectionArn`
      if (jsonObj.get("ConnectionArn") != null && !jsonObj.get("ConnectionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConnectionArn"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Owner`
      if (jsonObj.get("Owner") != null && !jsonObj.get("Owner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Owner"));
      }
      // validate the optional field `ProviderType`
      if (jsonObj.get("ProviderType") != null && !jsonObj.get("ProviderType").isJsonNull()) {
        ProviderType.validateJsonElement(jsonObj.get("ProviderType"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        RepositoryAssociationState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `StateReason`
      if (jsonObj.get("StateReason") != null && !jsonObj.get("StateReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StateReason"));
      }
      // validate the optional field `LastUpdatedTimeStamp`
      if (jsonObj.get("LastUpdatedTimeStamp") != null && !jsonObj.get("LastUpdatedTimeStamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTimeStamp"));
      }
      // validate the optional field `CreatedTimeStamp`
      if (jsonObj.get("CreatedTimeStamp") != null && !jsonObj.get("CreatedTimeStamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimeStamp"));
      }
      // validate the optional field `KMSKeyDetails`
      if (jsonObj.get("KMSKeyDetails") != null && !jsonObj.get("KMSKeyDetails").isJsonNull()) {
        AssociateRepositoryRequestKMSKeyDetails.validateJsonElement(jsonObj.get("KMSKeyDetails"));
      }
      // validate the optional field `S3RepositoryDetails`
      if (jsonObj.get("S3RepositoryDetails") != null && !jsonObj.get("S3RepositoryDetails").isJsonNull()) {
        S3RepositoryDetails.validateJsonElement(jsonObj.get("S3RepositoryDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociateRepositoryResponseRepositoryAssociation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociateRepositoryResponseRepositoryAssociation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociateRepositoryResponseRepositoryAssociation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociateRepositoryResponseRepositoryAssociation.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociateRepositoryResponseRepositoryAssociation>() {
           @Override
           public void write(JsonWriter out, AssociateRepositoryResponseRepositoryAssociation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociateRepositoryResponseRepositoryAssociation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociateRepositoryResponseRepositoryAssociation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociateRepositoryResponseRepositoryAssociation
   * @throws IOException if the JSON string is invalid with respect to AssociateRepositoryResponseRepositoryAssociation
   */
  public static AssociateRepositoryResponseRepositoryAssociation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociateRepositoryResponseRepositoryAssociation.class);
  }

  /**
   * Convert an instance of AssociateRepositoryResponseRepositoryAssociation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

