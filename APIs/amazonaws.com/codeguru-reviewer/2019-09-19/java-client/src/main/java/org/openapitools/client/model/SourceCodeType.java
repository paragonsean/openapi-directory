/*
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RepositoryHeadSourceCodeType;
import org.openapitools.client.model.SourceCodeTypeBranchDiff;
import org.openapitools.client.model.SourceCodeTypeCommitDiff;
import org.openapitools.client.model.SourceCodeTypeRequestMetadata;
import org.openapitools.client.model.SourceCodeTypeS3BucketRepository;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the source code that is analyzed in a code review.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:00.218645-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceCodeType {
  public static final String SERIALIZED_NAME_COMMIT_DIFF = "CommitDiff";
  @SerializedName(SERIALIZED_NAME_COMMIT_DIFF)
  private SourceCodeTypeCommitDiff commitDiff;

  public static final String SERIALIZED_NAME_REPOSITORY_HEAD = "RepositoryHead";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_HEAD)
  private RepositoryHeadSourceCodeType repositoryHead;

  public static final String SERIALIZED_NAME_BRANCH_DIFF = "BranchDiff";
  @SerializedName(SERIALIZED_NAME_BRANCH_DIFF)
  private SourceCodeTypeBranchDiff branchDiff;

  public static final String SERIALIZED_NAME_S3_BUCKET_REPOSITORY = "S3BucketRepository";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_REPOSITORY)
  private SourceCodeTypeS3BucketRepository s3BucketRepository;

  public static final String SERIALIZED_NAME_REQUEST_METADATA = "RequestMetadata";
  @SerializedName(SERIALIZED_NAME_REQUEST_METADATA)
  private SourceCodeTypeRequestMetadata requestMetadata;

  public SourceCodeType() {
  }

  public SourceCodeType commitDiff(SourceCodeTypeCommitDiff commitDiff) {
    this.commitDiff = commitDiff;
    return this;
  }

  /**
   * Get commitDiff
   * @return commitDiff
   */
  @javax.annotation.Nullable
  public SourceCodeTypeCommitDiff getCommitDiff() {
    return commitDiff;
  }

  public void setCommitDiff(SourceCodeTypeCommitDiff commitDiff) {
    this.commitDiff = commitDiff;
  }


  public SourceCodeType repositoryHead(RepositoryHeadSourceCodeType repositoryHead) {
    this.repositoryHead = repositoryHead;
    return this;
  }

  /**
   * Get repositoryHead
   * @return repositoryHead
   */
  @javax.annotation.Nullable
  public RepositoryHeadSourceCodeType getRepositoryHead() {
    return repositoryHead;
  }

  public void setRepositoryHead(RepositoryHeadSourceCodeType repositoryHead) {
    this.repositoryHead = repositoryHead;
  }


  public SourceCodeType branchDiff(SourceCodeTypeBranchDiff branchDiff) {
    this.branchDiff = branchDiff;
    return this;
  }

  /**
   * Get branchDiff
   * @return branchDiff
   */
  @javax.annotation.Nullable
  public SourceCodeTypeBranchDiff getBranchDiff() {
    return branchDiff;
  }

  public void setBranchDiff(SourceCodeTypeBranchDiff branchDiff) {
    this.branchDiff = branchDiff;
  }


  public SourceCodeType s3BucketRepository(SourceCodeTypeS3BucketRepository s3BucketRepository) {
    this.s3BucketRepository = s3BucketRepository;
    return this;
  }

  /**
   * Get s3BucketRepository
   * @return s3BucketRepository
   */
  @javax.annotation.Nullable
  public SourceCodeTypeS3BucketRepository getS3BucketRepository() {
    return s3BucketRepository;
  }

  public void setS3BucketRepository(SourceCodeTypeS3BucketRepository s3BucketRepository) {
    this.s3BucketRepository = s3BucketRepository;
  }


  public SourceCodeType requestMetadata(SourceCodeTypeRequestMetadata requestMetadata) {
    this.requestMetadata = requestMetadata;
    return this;
  }

  /**
   * Get requestMetadata
   * @return requestMetadata
   */
  @javax.annotation.Nullable
  public SourceCodeTypeRequestMetadata getRequestMetadata() {
    return requestMetadata;
  }

  public void setRequestMetadata(SourceCodeTypeRequestMetadata requestMetadata) {
    this.requestMetadata = requestMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceCodeType sourceCodeType = (SourceCodeType) o;
    return Objects.equals(this.commitDiff, sourceCodeType.commitDiff) &&
        Objects.equals(this.repositoryHead, sourceCodeType.repositoryHead) &&
        Objects.equals(this.branchDiff, sourceCodeType.branchDiff) &&
        Objects.equals(this.s3BucketRepository, sourceCodeType.s3BucketRepository) &&
        Objects.equals(this.requestMetadata, sourceCodeType.requestMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitDiff, repositoryHead, branchDiff, s3BucketRepository, requestMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceCodeType {\n");
    sb.append("    commitDiff: ").append(toIndentedString(commitDiff)).append("\n");
    sb.append("    repositoryHead: ").append(toIndentedString(repositoryHead)).append("\n");
    sb.append("    branchDiff: ").append(toIndentedString(branchDiff)).append("\n");
    sb.append("    s3BucketRepository: ").append(toIndentedString(s3BucketRepository)).append("\n");
    sb.append("    requestMetadata: ").append(toIndentedString(requestMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CommitDiff");
    openapiFields.add("RepositoryHead");
    openapiFields.add("BranchDiff");
    openapiFields.add("S3BucketRepository");
    openapiFields.add("RequestMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceCodeType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceCodeType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceCodeType is not found in the empty JSON string", SourceCodeType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceCodeType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceCodeType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CommitDiff`
      if (jsonObj.get("CommitDiff") != null && !jsonObj.get("CommitDiff").isJsonNull()) {
        SourceCodeTypeCommitDiff.validateJsonElement(jsonObj.get("CommitDiff"));
      }
      // validate the optional field `RepositoryHead`
      if (jsonObj.get("RepositoryHead") != null && !jsonObj.get("RepositoryHead").isJsonNull()) {
        RepositoryHeadSourceCodeType.validateJsonElement(jsonObj.get("RepositoryHead"));
      }
      // validate the optional field `BranchDiff`
      if (jsonObj.get("BranchDiff") != null && !jsonObj.get("BranchDiff").isJsonNull()) {
        SourceCodeTypeBranchDiff.validateJsonElement(jsonObj.get("BranchDiff"));
      }
      // validate the optional field `S3BucketRepository`
      if (jsonObj.get("S3BucketRepository") != null && !jsonObj.get("S3BucketRepository").isJsonNull()) {
        SourceCodeTypeS3BucketRepository.validateJsonElement(jsonObj.get("S3BucketRepository"));
      }
      // validate the optional field `RequestMetadata`
      if (jsonObj.get("RequestMetadata") != null && !jsonObj.get("RequestMetadata").isJsonNull()) {
        SourceCodeTypeRequestMetadata.validateJsonElement(jsonObj.get("RequestMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceCodeType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceCodeType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceCodeType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceCodeType.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceCodeType>() {
           @Override
           public void write(JsonWriter out, SourceCodeType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceCodeType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceCodeType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceCodeType
   * @throws IOException if the JSON string is invalid with respect to SourceCodeType
   */
  public static SourceCodeType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceCodeType.class);
  }

  /**
   * Convert an instance of SourceCodeType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

