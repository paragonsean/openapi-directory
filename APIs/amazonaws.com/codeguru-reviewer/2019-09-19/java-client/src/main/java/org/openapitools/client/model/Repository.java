/*
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AssociateRepositoryRequestRepositoryBitbucket;
import org.openapitools.client.model.AssociateRepositoryRequestRepositoryCodeCommit;
import org.openapitools.client.model.AssociateRepositoryRequestRepositoryGitHubEnterpriseServer;
import org.openapitools.client.model.S3Repository;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an associated Amazon Web Services CodeCommit repository or an associated repository that is managed by Amazon Web Services CodeStar Connections (for example, Bitbucket). This &lt;code&gt;Repository&lt;/code&gt; object is not used if your source code is in an associated GitHub repository.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:00.218645-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Repository {
  public static final String SERIALIZED_NAME_CODE_COMMIT = "CodeCommit";
  @SerializedName(SERIALIZED_NAME_CODE_COMMIT)
  private AssociateRepositoryRequestRepositoryCodeCommit codeCommit;

  public static final String SERIALIZED_NAME_BITBUCKET = "Bitbucket";
  @SerializedName(SERIALIZED_NAME_BITBUCKET)
  private AssociateRepositoryRequestRepositoryBitbucket bitbucket;

  public static final String SERIALIZED_NAME_GIT_HUB_ENTERPRISE_SERVER = "GitHubEnterpriseServer";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_ENTERPRISE_SERVER)
  private AssociateRepositoryRequestRepositoryGitHubEnterpriseServer gitHubEnterpriseServer;

  public static final String SERIALIZED_NAME_S3_BUCKET = "S3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  private S3Repository s3Bucket;

  public Repository() {
  }

  public Repository codeCommit(AssociateRepositoryRequestRepositoryCodeCommit codeCommit) {
    this.codeCommit = codeCommit;
    return this;
  }

  /**
   * Get codeCommit
   * @return codeCommit
   */
  @javax.annotation.Nullable
  public AssociateRepositoryRequestRepositoryCodeCommit getCodeCommit() {
    return codeCommit;
  }

  public void setCodeCommit(AssociateRepositoryRequestRepositoryCodeCommit codeCommit) {
    this.codeCommit = codeCommit;
  }


  public Repository bitbucket(AssociateRepositoryRequestRepositoryBitbucket bitbucket) {
    this.bitbucket = bitbucket;
    return this;
  }

  /**
   * Get bitbucket
   * @return bitbucket
   */
  @javax.annotation.Nullable
  public AssociateRepositoryRequestRepositoryBitbucket getBitbucket() {
    return bitbucket;
  }

  public void setBitbucket(AssociateRepositoryRequestRepositoryBitbucket bitbucket) {
    this.bitbucket = bitbucket;
  }


  public Repository gitHubEnterpriseServer(AssociateRepositoryRequestRepositoryGitHubEnterpriseServer gitHubEnterpriseServer) {
    this.gitHubEnterpriseServer = gitHubEnterpriseServer;
    return this;
  }

  /**
   * Get gitHubEnterpriseServer
   * @return gitHubEnterpriseServer
   */
  @javax.annotation.Nullable
  public AssociateRepositoryRequestRepositoryGitHubEnterpriseServer getGitHubEnterpriseServer() {
    return gitHubEnterpriseServer;
  }

  public void setGitHubEnterpriseServer(AssociateRepositoryRequestRepositoryGitHubEnterpriseServer gitHubEnterpriseServer) {
    this.gitHubEnterpriseServer = gitHubEnterpriseServer;
  }


  public Repository s3Bucket(S3Repository s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * Get s3Bucket
   * @return s3Bucket
   */
  @javax.annotation.Nullable
  public S3Repository getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(S3Repository s3Bucket) {
    this.s3Bucket = s3Bucket;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Repository repository = (Repository) o;
    return Objects.equals(this.codeCommit, repository.codeCommit) &&
        Objects.equals(this.bitbucket, repository.bitbucket) &&
        Objects.equals(this.gitHubEnterpriseServer, repository.gitHubEnterpriseServer) &&
        Objects.equals(this.s3Bucket, repository.s3Bucket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeCommit, bitbucket, gitHubEnterpriseServer, s3Bucket);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Repository {\n");
    sb.append("    codeCommit: ").append(toIndentedString(codeCommit)).append("\n");
    sb.append("    bitbucket: ").append(toIndentedString(bitbucket)).append("\n");
    sb.append("    gitHubEnterpriseServer: ").append(toIndentedString(gitHubEnterpriseServer)).append("\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CodeCommit");
    openapiFields.add("Bitbucket");
    openapiFields.add("GitHubEnterpriseServer");
    openapiFields.add("S3Bucket");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Repository
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Repository.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Repository is not found in the empty JSON string", Repository.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Repository.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Repository` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CodeCommit`
      if (jsonObj.get("CodeCommit") != null && !jsonObj.get("CodeCommit").isJsonNull()) {
        AssociateRepositoryRequestRepositoryCodeCommit.validateJsonElement(jsonObj.get("CodeCommit"));
      }
      // validate the optional field `Bitbucket`
      if (jsonObj.get("Bitbucket") != null && !jsonObj.get("Bitbucket").isJsonNull()) {
        AssociateRepositoryRequestRepositoryBitbucket.validateJsonElement(jsonObj.get("Bitbucket"));
      }
      // validate the optional field `GitHubEnterpriseServer`
      if (jsonObj.get("GitHubEnterpriseServer") != null && !jsonObj.get("GitHubEnterpriseServer").isJsonNull()) {
        AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.validateJsonElement(jsonObj.get("GitHubEnterpriseServer"));
      }
      // validate the optional field `S3Bucket`
      if (jsonObj.get("S3Bucket") != null && !jsonObj.get("S3Bucket").isJsonNull()) {
        S3Repository.validateJsonElement(jsonObj.get("S3Bucket"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Repository.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Repository' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Repository> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Repository.class));

       return (TypeAdapter<T>) new TypeAdapter<Repository>() {
           @Override
           public void write(JsonWriter out, Repository value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Repository read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Repository given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Repository
   * @throws IOException if the JSON string is invalid with respect to Repository
   */
  public static Repository fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Repository.class);
  }

  /**
   * Convert an instance of Repository to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

