/*
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Code artifacts are source code artifacts and build artifacts used in a repository analysis or a pull request review.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Source code artifacts are source code files in a Git repository that are compressed into a .zip file.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Build artifacts are .jar or .class files that are compressed in a .zip file.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:00.218645-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeArtifacts {
  public static final String SERIALIZED_NAME_SOURCE_CODE_ARTIFACTS_OBJECT_KEY = "SourceCodeArtifactsObjectKey";
  @SerializedName(SERIALIZED_NAME_SOURCE_CODE_ARTIFACTS_OBJECT_KEY)
  private String sourceCodeArtifactsObjectKey;

  public static final String SERIALIZED_NAME_BUILD_ARTIFACTS_OBJECT_KEY = "BuildArtifactsObjectKey";
  @SerializedName(SERIALIZED_NAME_BUILD_ARTIFACTS_OBJECT_KEY)
  private String buildArtifactsObjectKey;

  public CodeArtifacts() {
  }

  public CodeArtifacts sourceCodeArtifactsObjectKey(String sourceCodeArtifactsObjectKey) {
    this.sourceCodeArtifactsObjectKey = sourceCodeArtifactsObjectKey;
    return this;
  }

  /**
   * Get sourceCodeArtifactsObjectKey
   * @return sourceCodeArtifactsObjectKey
   */
  @javax.annotation.Nonnull
  public String getSourceCodeArtifactsObjectKey() {
    return sourceCodeArtifactsObjectKey;
  }

  public void setSourceCodeArtifactsObjectKey(String sourceCodeArtifactsObjectKey) {
    this.sourceCodeArtifactsObjectKey = sourceCodeArtifactsObjectKey;
  }


  public CodeArtifacts buildArtifactsObjectKey(String buildArtifactsObjectKey) {
    this.buildArtifactsObjectKey = buildArtifactsObjectKey;
    return this;
  }

  /**
   * Get buildArtifactsObjectKey
   * @return buildArtifactsObjectKey
   */
  @javax.annotation.Nullable
  public String getBuildArtifactsObjectKey() {
    return buildArtifactsObjectKey;
  }

  public void setBuildArtifactsObjectKey(String buildArtifactsObjectKey) {
    this.buildArtifactsObjectKey = buildArtifactsObjectKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeArtifacts codeArtifacts = (CodeArtifacts) o;
    return Objects.equals(this.sourceCodeArtifactsObjectKey, codeArtifacts.sourceCodeArtifactsObjectKey) &&
        Objects.equals(this.buildArtifactsObjectKey, codeArtifacts.buildArtifactsObjectKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceCodeArtifactsObjectKey, buildArtifactsObjectKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeArtifacts {\n");
    sb.append("    sourceCodeArtifactsObjectKey: ").append(toIndentedString(sourceCodeArtifactsObjectKey)).append("\n");
    sb.append("    buildArtifactsObjectKey: ").append(toIndentedString(buildArtifactsObjectKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceCodeArtifactsObjectKey");
    openapiFields.add("BuildArtifactsObjectKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SourceCodeArtifactsObjectKey");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeArtifacts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeArtifacts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeArtifacts is not found in the empty JSON string", CodeArtifacts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeArtifacts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeArtifacts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CodeArtifacts.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SourceCodeArtifactsObjectKey`
      String.validateJsonElement(jsonObj.get("SourceCodeArtifactsObjectKey"));
      // validate the optional field `BuildArtifactsObjectKey`
      if (jsonObj.get("BuildArtifactsObjectKey") != null && !jsonObj.get("BuildArtifactsObjectKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BuildArtifactsObjectKey"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeArtifacts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeArtifacts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeArtifacts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeArtifacts.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeArtifacts>() {
           @Override
           public void write(JsonWriter out, CodeArtifacts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeArtifacts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeArtifacts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeArtifacts
   * @throws IOException if the JSON string is invalid with respect to CodeArtifacts
   */
  public static CodeArtifacts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeArtifacts.class);
  }

  /**
   * Convert an instance of CodeArtifacts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

