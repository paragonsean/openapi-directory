/*
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RecommendationCategory;
import org.openapitools.client.model.RecommendationSummaryRuleMetadata;
import org.openapitools.client.model.Severity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about recommendations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:00.218645-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationSummary {
  public static final String SERIALIZED_NAME_FILE_PATH = "FilePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_RECOMMENDATION_ID = "RecommendationId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_ID)
  private String recommendationId;

  public static final String SERIALIZED_NAME_START_LINE = "StartLine";
  @SerializedName(SERIALIZED_NAME_START_LINE)
  private Integer startLine;

  public static final String SERIALIZED_NAME_END_LINE = "EndLine";
  @SerializedName(SERIALIZED_NAME_END_LINE)
  private Integer endLine;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_RECOMMENDATION_CATEGORY = "RecommendationCategory";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_CATEGORY)
  private RecommendationCategory recommendationCategory;

  public static final String SERIALIZED_NAME_RULE_METADATA = "RuleMetadata";
  @SerializedName(SERIALIZED_NAME_RULE_METADATA)
  private RecommendationSummaryRuleMetadata ruleMetadata;

  public static final String SERIALIZED_NAME_SEVERITY = "Severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private Severity severity;

  public RecommendationSummary() {
  }

  public RecommendationSummary filePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  /**
   * Get filePath
   * @return filePath
   */
  @javax.annotation.Nullable
  public String getFilePath() {
    return filePath;
  }

  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }


  public RecommendationSummary recommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
    return this;
  }

  /**
   * Get recommendationId
   * @return recommendationId
   */
  @javax.annotation.Nullable
  public String getRecommendationId() {
    return recommendationId;
  }

  public void setRecommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
  }


  public RecommendationSummary startLine(Integer startLine) {
    this.startLine = startLine;
    return this;
  }

  /**
   * Get startLine
   * @return startLine
   */
  @javax.annotation.Nullable
  public Integer getStartLine() {
    return startLine;
  }

  public void setStartLine(Integer startLine) {
    this.startLine = startLine;
  }


  public RecommendationSummary endLine(Integer endLine) {
    this.endLine = endLine;
    return this;
  }

  /**
   * Get endLine
   * @return endLine
   */
  @javax.annotation.Nullable
  public Integer getEndLine() {
    return endLine;
  }

  public void setEndLine(Integer endLine) {
    this.endLine = endLine;
  }


  public RecommendationSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RecommendationSummary recommendationCategory(RecommendationCategory recommendationCategory) {
    this.recommendationCategory = recommendationCategory;
    return this;
  }

  /**
   * Get recommendationCategory
   * @return recommendationCategory
   */
  @javax.annotation.Nullable
  public RecommendationCategory getRecommendationCategory() {
    return recommendationCategory;
  }

  public void setRecommendationCategory(RecommendationCategory recommendationCategory) {
    this.recommendationCategory = recommendationCategory;
  }


  public RecommendationSummary ruleMetadata(RecommendationSummaryRuleMetadata ruleMetadata) {
    this.ruleMetadata = ruleMetadata;
    return this;
  }

  /**
   * Get ruleMetadata
   * @return ruleMetadata
   */
  @javax.annotation.Nullable
  public RecommendationSummaryRuleMetadata getRuleMetadata() {
    return ruleMetadata;
  }

  public void setRuleMetadata(RecommendationSummaryRuleMetadata ruleMetadata) {
    this.ruleMetadata = ruleMetadata;
  }


  public RecommendationSummary severity(Severity severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public Severity getSeverity() {
    return severity;
  }

  public void setSeverity(Severity severity) {
    this.severity = severity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationSummary recommendationSummary = (RecommendationSummary) o;
    return Objects.equals(this.filePath, recommendationSummary.filePath) &&
        Objects.equals(this.recommendationId, recommendationSummary.recommendationId) &&
        Objects.equals(this.startLine, recommendationSummary.startLine) &&
        Objects.equals(this.endLine, recommendationSummary.endLine) &&
        Objects.equals(this.description, recommendationSummary.description) &&
        Objects.equals(this.recommendationCategory, recommendationSummary.recommendationCategory) &&
        Objects.equals(this.ruleMetadata, recommendationSummary.ruleMetadata) &&
        Objects.equals(this.severity, recommendationSummary.severity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filePath, recommendationId, startLine, endLine, description, recommendationCategory, ruleMetadata, severity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationSummary {\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    recommendationId: ").append(toIndentedString(recommendationId)).append("\n");
    sb.append("    startLine: ").append(toIndentedString(startLine)).append("\n");
    sb.append("    endLine: ").append(toIndentedString(endLine)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    recommendationCategory: ").append(toIndentedString(recommendationCategory)).append("\n");
    sb.append("    ruleMetadata: ").append(toIndentedString(ruleMetadata)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FilePath");
    openapiFields.add("RecommendationId");
    openapiFields.add("StartLine");
    openapiFields.add("EndLine");
    openapiFields.add("Description");
    openapiFields.add("RecommendationCategory");
    openapiFields.add("RuleMetadata");
    openapiFields.add("Severity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationSummary is not found in the empty JSON string", RecommendationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FilePath`
      if (jsonObj.get("FilePath") != null && !jsonObj.get("FilePath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FilePath"));
      }
      // validate the optional field `RecommendationId`
      if (jsonObj.get("RecommendationId") != null && !jsonObj.get("RecommendationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecommendationId"));
      }
      // validate the optional field `StartLine`
      if (jsonObj.get("StartLine") != null && !jsonObj.get("StartLine").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("StartLine"));
      }
      // validate the optional field `EndLine`
      if (jsonObj.get("EndLine") != null && !jsonObj.get("EndLine").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EndLine"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `RecommendationCategory`
      if (jsonObj.get("RecommendationCategory") != null && !jsonObj.get("RecommendationCategory").isJsonNull()) {
        RecommendationCategory.validateJsonElement(jsonObj.get("RecommendationCategory"));
      }
      // validate the optional field `RuleMetadata`
      if (jsonObj.get("RuleMetadata") != null && !jsonObj.get("RuleMetadata").isJsonNull()) {
        RecommendationSummaryRuleMetadata.validateJsonElement(jsonObj.get("RuleMetadata"));
      }
      // validate the optional field `Severity`
      if (jsonObj.get("Severity") != null && !jsonObj.get("Severity").isJsonNull()) {
        Severity.validateJsonElement(jsonObj.get("Severity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationSummary>() {
           @Override
           public void write(JsonWriter out, RecommendationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationSummary
   * @throws IOException if the JSON string is invalid with respect to RecommendationSummary
   */
  public static RecommendationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationSummary.class);
  }

  /**
   * Convert an instance of RecommendationSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

