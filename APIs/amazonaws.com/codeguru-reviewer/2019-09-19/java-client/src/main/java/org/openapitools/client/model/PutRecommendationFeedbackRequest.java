/*
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Reaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutRecommendationFeedbackRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:00.218645-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutRecommendationFeedbackRequest {
  public static final String SERIALIZED_NAME_CODE_REVIEW_ARN = "CodeReviewArn";
  @SerializedName(SERIALIZED_NAME_CODE_REVIEW_ARN)
  private String codeReviewArn;

  public static final String SERIALIZED_NAME_RECOMMENDATION_ID = "RecommendationId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_ID)
  private String recommendationId;

  public static final String SERIALIZED_NAME_REACTIONS = "Reactions";
  @SerializedName(SERIALIZED_NAME_REACTIONS)
  private List<Reaction> reactions = new ArrayList<>();

  public PutRecommendationFeedbackRequest() {
  }

  public PutRecommendationFeedbackRequest codeReviewArn(String codeReviewArn) {
    this.codeReviewArn = codeReviewArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html\&quot;&gt;CodeReview&lt;/a&gt; object. 
   * @return codeReviewArn
   */
  @javax.annotation.Nonnull
  public String getCodeReviewArn() {
    return codeReviewArn;
  }

  public void setCodeReviewArn(String codeReviewArn) {
    this.codeReviewArn = codeReviewArn;
  }


  public PutRecommendationFeedbackRequest recommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
    return this;
  }

  /**
   * The recommendation ID that can be used to track the provided recommendations and then to collect the feedback.
   * @return recommendationId
   */
  @javax.annotation.Nonnull
  public String getRecommendationId() {
    return recommendationId;
  }

  public void setRecommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
  }


  public PutRecommendationFeedbackRequest reactions(List<Reaction> reactions) {
    this.reactions = reactions;
    return this;
  }

  public PutRecommendationFeedbackRequest addReactionsItem(Reaction reactionsItem) {
    if (this.reactions == null) {
      this.reactions = new ArrayList<>();
    }
    this.reactions.add(reactionsItem);
    return this;
  }

  /**
   * List for storing reactions. Reactions are utf-8 text code for emojis. If you send an empty list it clears all your feedback.
   * @return reactions
   */
  @javax.annotation.Nonnull
  public List<Reaction> getReactions() {
    return reactions;
  }

  public void setReactions(List<Reaction> reactions) {
    this.reactions = reactions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutRecommendationFeedbackRequest putRecommendationFeedbackRequest = (PutRecommendationFeedbackRequest) o;
    return Objects.equals(this.codeReviewArn, putRecommendationFeedbackRequest.codeReviewArn) &&
        Objects.equals(this.recommendationId, putRecommendationFeedbackRequest.recommendationId) &&
        Objects.equals(this.reactions, putRecommendationFeedbackRequest.reactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeReviewArn, recommendationId, reactions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutRecommendationFeedbackRequest {\n");
    sb.append("    codeReviewArn: ").append(toIndentedString(codeReviewArn)).append("\n");
    sb.append("    recommendationId: ").append(toIndentedString(recommendationId)).append("\n");
    sb.append("    reactions: ").append(toIndentedString(reactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CodeReviewArn");
    openapiFields.add("RecommendationId");
    openapiFields.add("Reactions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CodeReviewArn");
    openapiRequiredFields.add("RecommendationId");
    openapiRequiredFields.add("Reactions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutRecommendationFeedbackRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutRecommendationFeedbackRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutRecommendationFeedbackRequest is not found in the empty JSON string", PutRecommendationFeedbackRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutRecommendationFeedbackRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutRecommendationFeedbackRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutRecommendationFeedbackRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CodeReviewArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodeReviewArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodeReviewArn").toString()));
      }
      if (!jsonObj.get("RecommendationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RecommendationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RecommendationId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Reactions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Reactions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Reactions` to be an array in the JSON string but got `%s`", jsonObj.get("Reactions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutRecommendationFeedbackRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutRecommendationFeedbackRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutRecommendationFeedbackRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutRecommendationFeedbackRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutRecommendationFeedbackRequest>() {
           @Override
           public void write(JsonWriter out, PutRecommendationFeedbackRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutRecommendationFeedbackRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutRecommendationFeedbackRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutRecommendationFeedbackRequest
   * @throws IOException if the JSON string is invalid with respect to PutRecommendationFeedbackRequest
   */
  public static PutRecommendationFeedbackRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutRecommendationFeedbackRequest.class);
  }

  /**
   * Convert an instance of PutRecommendationFeedbackRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

