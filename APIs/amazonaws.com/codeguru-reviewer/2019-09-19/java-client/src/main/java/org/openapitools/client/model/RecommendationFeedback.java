/*
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the recommendation feedback.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:00.218645-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationFeedback {
  public static final String SERIALIZED_NAME_CODE_REVIEW_ARN = "CodeReviewArn";
  @SerializedName(SERIALIZED_NAME_CODE_REVIEW_ARN)
  private String codeReviewArn;

  public static final String SERIALIZED_NAME_RECOMMENDATION_ID = "RecommendationId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_ID)
  private String recommendationId;

  public static final String SERIALIZED_NAME_REACTIONS = "Reactions";
  @SerializedName(SERIALIZED_NAME_REACTIONS)
  private List reactions;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_CREATED_TIME_STAMP = "CreatedTimeStamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME_STAMP)
  private OffsetDateTime createdTimeStamp;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME_STAMP = "LastUpdatedTimeStamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME_STAMP)
  private OffsetDateTime lastUpdatedTimeStamp;

  public RecommendationFeedback() {
  }

  public RecommendationFeedback codeReviewArn(String codeReviewArn) {
    this.codeReviewArn = codeReviewArn;
    return this;
  }

  /**
   * Get codeReviewArn
   * @return codeReviewArn
   */
  @javax.annotation.Nullable
  public String getCodeReviewArn() {
    return codeReviewArn;
  }

  public void setCodeReviewArn(String codeReviewArn) {
    this.codeReviewArn = codeReviewArn;
  }


  public RecommendationFeedback recommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
    return this;
  }

  /**
   * Get recommendationId
   * @return recommendationId
   */
  @javax.annotation.Nullable
  public String getRecommendationId() {
    return recommendationId;
  }

  public void setRecommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
  }


  public RecommendationFeedback reactions(List reactions) {
    this.reactions = reactions;
    return this;
  }

  /**
   * Get reactions
   * @return reactions
   */
  @javax.annotation.Nullable
  public List getReactions() {
    return reactions;
  }

  public void setReactions(List reactions) {
    this.reactions = reactions;
  }


  public RecommendationFeedback userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public RecommendationFeedback createdTimeStamp(OffsetDateTime createdTimeStamp) {
    this.createdTimeStamp = createdTimeStamp;
    return this;
  }

  /**
   * Get createdTimeStamp
   * @return createdTimeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimeStamp() {
    return createdTimeStamp;
  }

  public void setCreatedTimeStamp(OffsetDateTime createdTimeStamp) {
    this.createdTimeStamp = createdTimeStamp;
  }


  public RecommendationFeedback lastUpdatedTimeStamp(OffsetDateTime lastUpdatedTimeStamp) {
    this.lastUpdatedTimeStamp = lastUpdatedTimeStamp;
    return this;
  }

  /**
   * Get lastUpdatedTimeStamp
   * @return lastUpdatedTimeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTimeStamp() {
    return lastUpdatedTimeStamp;
  }

  public void setLastUpdatedTimeStamp(OffsetDateTime lastUpdatedTimeStamp) {
    this.lastUpdatedTimeStamp = lastUpdatedTimeStamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationFeedback recommendationFeedback = (RecommendationFeedback) o;
    return Objects.equals(this.codeReviewArn, recommendationFeedback.codeReviewArn) &&
        Objects.equals(this.recommendationId, recommendationFeedback.recommendationId) &&
        Objects.equals(this.reactions, recommendationFeedback.reactions) &&
        Objects.equals(this.userId, recommendationFeedback.userId) &&
        Objects.equals(this.createdTimeStamp, recommendationFeedback.createdTimeStamp) &&
        Objects.equals(this.lastUpdatedTimeStamp, recommendationFeedback.lastUpdatedTimeStamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeReviewArn, recommendationId, reactions, userId, createdTimeStamp, lastUpdatedTimeStamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationFeedback {\n");
    sb.append("    codeReviewArn: ").append(toIndentedString(codeReviewArn)).append("\n");
    sb.append("    recommendationId: ").append(toIndentedString(recommendationId)).append("\n");
    sb.append("    reactions: ").append(toIndentedString(reactions)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    createdTimeStamp: ").append(toIndentedString(createdTimeStamp)).append("\n");
    sb.append("    lastUpdatedTimeStamp: ").append(toIndentedString(lastUpdatedTimeStamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CodeReviewArn");
    openapiFields.add("RecommendationId");
    openapiFields.add("Reactions");
    openapiFields.add("UserId");
    openapiFields.add("CreatedTimeStamp");
    openapiFields.add("LastUpdatedTimeStamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationFeedback
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationFeedback.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationFeedback is not found in the empty JSON string", RecommendationFeedback.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationFeedback.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationFeedback` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CodeReviewArn`
      if (jsonObj.get("CodeReviewArn") != null && !jsonObj.get("CodeReviewArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CodeReviewArn"));
      }
      // validate the optional field `RecommendationId`
      if (jsonObj.get("RecommendationId") != null && !jsonObj.get("RecommendationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecommendationId"));
      }
      // validate the optional field `Reactions`
      if (jsonObj.get("Reactions") != null && !jsonObj.get("Reactions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Reactions"));
      }
      // validate the optional field `UserId`
      if (jsonObj.get("UserId") != null && !jsonObj.get("UserId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UserId"));
      }
      // validate the optional field `CreatedTimeStamp`
      if (jsonObj.get("CreatedTimeStamp") != null && !jsonObj.get("CreatedTimeStamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimeStamp"));
      }
      // validate the optional field `LastUpdatedTimeStamp`
      if (jsonObj.get("LastUpdatedTimeStamp") != null && !jsonObj.get("LastUpdatedTimeStamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTimeStamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationFeedback.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationFeedback' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationFeedback> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationFeedback.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationFeedback>() {
           @Override
           public void write(JsonWriter out, RecommendationFeedback value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationFeedback read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationFeedback given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationFeedback
   * @throws IOException if the JSON string is invalid with respect to RecommendationFeedback
   */
  public static RecommendationFeedback fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationFeedback.class);
  }

  /**
   * Convert an instance of RecommendationFeedback to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

