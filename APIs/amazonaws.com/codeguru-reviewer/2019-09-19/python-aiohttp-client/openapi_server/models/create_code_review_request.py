# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_code_review_request_type import CreateCodeReviewRequestType
import re
from openapi_server import util


class CreateCodeReviewRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, repository_association_arn: str=None, type: CreateCodeReviewRequestType=None, client_request_token: str=None):
        """CreateCodeReviewRequest - a model defined in OpenAPI

        :param name: The name of this CreateCodeReviewRequest.
        :param repository_association_arn: The repository_association_arn of this CreateCodeReviewRequest.
        :param type: The type of this CreateCodeReviewRequest.
        :param client_request_token: The client_request_token of this CreateCodeReviewRequest.
        """
        self.openapi_types = {
            'name': str,
            'repository_association_arn': str,
            'type': CreateCodeReviewRequestType,
            'client_request_token': str
        }

        self.attribute_map = {
            'name': 'Name',
            'repository_association_arn': 'RepositoryAssociationArn',
            'type': 'Type',
            'client_request_token': 'ClientRequestToken'
        }

        self._name = name
        self._repository_association_arn = repository_association_arn
        self._type = type
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCodeReviewRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCodeReview_request of this CreateCodeReviewRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateCodeReviewRequest.

        The name of the code review. The name of each code review in your Amazon Web Services account must be unique.

        :return: The name of this CreateCodeReviewRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCodeReviewRequest.

        The name of the code review. The name of each code review in your Amazon Web Services account must be unique.

        :param name: The name of this CreateCodeReviewRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[a-zA-Z0-9-_]*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z0-9-_]*/`")

        self._name = name

    @property
    def repository_association_arn(self):
        """Gets the repository_association_arn of this CreateCodeReviewRequest.

        <p>The Amazon Resource Name (ARN) of the <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html\">RepositoryAssociation</a> object. You can retrieve this ARN by calling <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html\">ListRepositoryAssociations</a>.</p> <p>A code review can only be created on an associated repository. This is the ARN of the associated repository.</p>

        :return: The repository_association_arn of this CreateCodeReviewRequest.
        :rtype: str
        """
        return self._repository_association_arn

    @repository_association_arn.setter
    def repository_association_arn(self, repository_association_arn):
        """Sets the repository_association_arn of this CreateCodeReviewRequest.

        <p>The Amazon Resource Name (ARN) of the <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html\">RepositoryAssociation</a> object. You can retrieve this ARN by calling <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html\">ListRepositoryAssociations</a>.</p> <p>A code review can only be created on an associated repository. This is the ARN of the associated repository.</p>

        :param repository_association_arn: The repository_association_arn of this CreateCodeReviewRequest.
        :type repository_association_arn: str
        """
        if repository_association_arn is None:
            raise ValueError("Invalid value for `repository_association_arn`, must not be `None`")
        if repository_association_arn is not None and len(repository_association_arn) > 1600:
            raise ValueError("Invalid value for `repository_association_arn`, length must be less than or equal to `1600`")
        if repository_association_arn is not None and len(repository_association_arn) < 1:
            raise ValueError("Invalid value for `repository_association_arn`, length must be greater than or equal to `1`")
        if repository_association_arn is not None and not re.search(r'^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:association:[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$', repository_association_arn):
            raise ValueError("Invalid value for `repository_association_arn`, must be a follow pattern or equal to `/^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:association:[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/`")

        self._repository_association_arn = repository_association_arn

    @property
    def type(self):
        """Gets the type of this CreateCodeReviewRequest.


        :return: The type of this CreateCodeReviewRequest.
        :rtype: CreateCodeReviewRequestType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateCodeReviewRequest.


        :param type: The type of this CreateCodeReviewRequest.
        :type type: CreateCodeReviewRequestType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateCodeReviewRequest.

        Amazon CodeGuru Reviewer uses this value to prevent the accidental creation of duplicate code reviews if there are failures and retries.

        :return: The client_request_token of this CreateCodeReviewRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateCodeReviewRequest.

        Amazon CodeGuru Reviewer uses this value to prevent the accidental creation of duplicate code reviews if there are failures and retries.

        :param client_request_token: The client_request_token of this CreateCodeReviewRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'^[\w-]+$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/^[\w-]+$/`")

        self._client_request_token = client_request_token
