# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceCodeTypeCommitDiff(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_commit: str=None, destination_commit: str=None, merge_base_commit: str=None):
        """SourceCodeTypeCommitDiff - a model defined in OpenAPI

        :param source_commit: The source_commit of this SourceCodeTypeCommitDiff.
        :param destination_commit: The destination_commit of this SourceCodeTypeCommitDiff.
        :param merge_base_commit: The merge_base_commit of this SourceCodeTypeCommitDiff.
        """
        self.openapi_types = {
            'source_commit': str,
            'destination_commit': str,
            'merge_base_commit': str
        }

        self.attribute_map = {
            'source_commit': 'SourceCommit',
            'destination_commit': 'DestinationCommit',
            'merge_base_commit': 'MergeBaseCommit'
        }

        self._source_commit = source_commit
        self._destination_commit = destination_commit
        self._merge_base_commit = merge_base_commit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceCodeTypeCommitDiff':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceCodeType_CommitDiff of this SourceCodeTypeCommitDiff.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_commit(self):
        """Gets the source_commit of this SourceCodeTypeCommitDiff.


        :return: The source_commit of this SourceCodeTypeCommitDiff.
        :rtype: str
        """
        return self._source_commit

    @source_commit.setter
    def source_commit(self, source_commit):
        """Sets the source_commit of this SourceCodeTypeCommitDiff.


        :param source_commit: The source_commit of this SourceCodeTypeCommitDiff.
        :type source_commit: str
        """

        self._source_commit = source_commit

    @property
    def destination_commit(self):
        """Gets the destination_commit of this SourceCodeTypeCommitDiff.


        :return: The destination_commit of this SourceCodeTypeCommitDiff.
        :rtype: str
        """
        return self._destination_commit

    @destination_commit.setter
    def destination_commit(self, destination_commit):
        """Sets the destination_commit of this SourceCodeTypeCommitDiff.


        :param destination_commit: The destination_commit of this SourceCodeTypeCommitDiff.
        :type destination_commit: str
        """

        self._destination_commit = destination_commit

    @property
    def merge_base_commit(self):
        """Gets the merge_base_commit of this SourceCodeTypeCommitDiff.


        :return: The merge_base_commit of this SourceCodeTypeCommitDiff.
        :rtype: str
        """
        return self._merge_base_commit

    @merge_base_commit.setter
    def merge_base_commit(self, merge_base_commit):
        """Sets the merge_base_commit of this SourceCodeTypeCommitDiff.


        :param merge_base_commit: The merge_base_commit of this SourceCodeTypeCommitDiff.
        :type merge_base_commit: str
        """

        self._merge_base_commit = merge_base_commit
