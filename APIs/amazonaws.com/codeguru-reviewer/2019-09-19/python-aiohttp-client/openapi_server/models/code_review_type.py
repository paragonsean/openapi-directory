# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_code_review_request_type_repository_analysis import CreateCodeReviewRequestTypeRepositoryAnalysis
from openapi_server import util


class CodeReviewType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_analysis: CreateCodeReviewRequestTypeRepositoryAnalysis=None, analysis_types: List=None):
        """CodeReviewType - a model defined in OpenAPI

        :param repository_analysis: The repository_analysis of this CodeReviewType.
        :param analysis_types: The analysis_types of this CodeReviewType.
        """
        self.openapi_types = {
            'repository_analysis': CreateCodeReviewRequestTypeRepositoryAnalysis,
            'analysis_types': List
        }

        self.attribute_map = {
            'repository_analysis': 'RepositoryAnalysis',
            'analysis_types': 'AnalysisTypes'
        }

        self._repository_analysis = repository_analysis
        self._analysis_types = analysis_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeReviewType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeReviewType of this CodeReviewType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_analysis(self):
        """Gets the repository_analysis of this CodeReviewType.


        :return: The repository_analysis of this CodeReviewType.
        :rtype: CreateCodeReviewRequestTypeRepositoryAnalysis
        """
        return self._repository_analysis

    @repository_analysis.setter
    def repository_analysis(self, repository_analysis):
        """Sets the repository_analysis of this CodeReviewType.


        :param repository_analysis: The repository_analysis of this CodeReviewType.
        :type repository_analysis: CreateCodeReviewRequestTypeRepositoryAnalysis
        """
        if repository_analysis is None:
            raise ValueError("Invalid value for `repository_analysis`, must not be `None`")

        self._repository_analysis = repository_analysis

    @property
    def analysis_types(self):
        """Gets the analysis_types of this CodeReviewType.


        :return: The analysis_types of this CodeReviewType.
        :rtype: List
        """
        return self._analysis_types

    @analysis_types.setter
    def analysis_types(self, analysis_types):
        """Sets the analysis_types of this CodeReviewType.


        :param analysis_types: The analysis_types of this CodeReviewType.
        :type analysis_types: List
        """

        self._analysis_types = analysis_types
