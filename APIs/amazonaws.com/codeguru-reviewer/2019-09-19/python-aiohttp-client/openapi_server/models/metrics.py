# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Metrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metered_lines_of_code_count: int=None, suppressed_lines_of_code_count: int=None, findings_count: int=None):
        """Metrics - a model defined in OpenAPI

        :param metered_lines_of_code_count: The metered_lines_of_code_count of this Metrics.
        :param suppressed_lines_of_code_count: The suppressed_lines_of_code_count of this Metrics.
        :param findings_count: The findings_count of this Metrics.
        """
        self.openapi_types = {
            'metered_lines_of_code_count': int,
            'suppressed_lines_of_code_count': int,
            'findings_count': int
        }

        self.attribute_map = {
            'metered_lines_of_code_count': 'MeteredLinesOfCodeCount',
            'suppressed_lines_of_code_count': 'SuppressedLinesOfCodeCount',
            'findings_count': 'FindingsCount'
        }

        self._metered_lines_of_code_count = metered_lines_of_code_count
        self._suppressed_lines_of_code_count = suppressed_lines_of_code_count
        self._findings_count = findings_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metrics of this Metrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metered_lines_of_code_count(self):
        """Gets the metered_lines_of_code_count of this Metrics.


        :return: The metered_lines_of_code_count of this Metrics.
        :rtype: int
        """
        return self._metered_lines_of_code_count

    @metered_lines_of_code_count.setter
    def metered_lines_of_code_count(self, metered_lines_of_code_count):
        """Sets the metered_lines_of_code_count of this Metrics.


        :param metered_lines_of_code_count: The metered_lines_of_code_count of this Metrics.
        :type metered_lines_of_code_count: int
        """

        self._metered_lines_of_code_count = metered_lines_of_code_count

    @property
    def suppressed_lines_of_code_count(self):
        """Gets the suppressed_lines_of_code_count of this Metrics.


        :return: The suppressed_lines_of_code_count of this Metrics.
        :rtype: int
        """
        return self._suppressed_lines_of_code_count

    @suppressed_lines_of_code_count.setter
    def suppressed_lines_of_code_count(self, suppressed_lines_of_code_count):
        """Sets the suppressed_lines_of_code_count of this Metrics.


        :param suppressed_lines_of_code_count: The suppressed_lines_of_code_count of this Metrics.
        :type suppressed_lines_of_code_count: int
        """

        self._suppressed_lines_of_code_count = suppressed_lines_of_code_count

    @property
    def findings_count(self):
        """Gets the findings_count of this Metrics.


        :return: The findings_count of this Metrics.
        :rtype: int
        """
        return self._findings_count

    @findings_count.setter
    def findings_count(self, findings_count):
        """Sets the findings_count of this Metrics.


        :param findings_count: The findings_count of this Metrics.
        :type findings_count: int
        """

        self._findings_count = findings_count
