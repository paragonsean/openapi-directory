# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associate_repository_request_kms_key_details import AssociateRepositoryRequestKMSKeyDetails
from openapi_server.models.associate_repository_request_repository import AssociateRepositoryRequestRepository
import re
from openapi_server import util


class AssociateRepositoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository: AssociateRepositoryRequestRepository=None, client_request_token: str=None, tags: Dict[str, str]=None, kms_key_details: AssociateRepositoryRequestKMSKeyDetails=None):
        """AssociateRepositoryRequest - a model defined in OpenAPI

        :param repository: The repository of this AssociateRepositoryRequest.
        :param client_request_token: The client_request_token of this AssociateRepositoryRequest.
        :param tags: The tags of this AssociateRepositoryRequest.
        :param kms_key_details: The kms_key_details of this AssociateRepositoryRequest.
        """
        self.openapi_types = {
            'repository': AssociateRepositoryRequestRepository,
            'client_request_token': str,
            'tags': Dict[str, str],
            'kms_key_details': AssociateRepositoryRequestKMSKeyDetails
        }

        self.attribute_map = {
            'repository': 'Repository',
            'client_request_token': 'ClientRequestToken',
            'tags': 'Tags',
            'kms_key_details': 'KMSKeyDetails'
        }

        self._repository = repository
        self._client_request_token = client_request_token
        self._tags = tags
        self._kms_key_details = kms_key_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateRepositoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateRepository_request of this AssociateRepositoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository(self):
        """Gets the repository of this AssociateRepositoryRequest.


        :return: The repository of this AssociateRepositoryRequest.
        :rtype: AssociateRepositoryRequestRepository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this AssociateRepositoryRequest.


        :param repository: The repository of this AssociateRepositoryRequest.
        :type repository: AssociateRepositoryRequestRepository
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def client_request_token(self):
        """Gets the client_request_token of this AssociateRepositoryRequest.

        Amazon CodeGuru Reviewer uses this value to prevent the accidental creation of duplicate repository associations if there are failures and retries.

        :return: The client_request_token of this AssociateRepositoryRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this AssociateRepositoryRequest.

        Amazon CodeGuru Reviewer uses this value to prevent the accidental creation of duplicate repository associations if there are failures and retries.

        :param client_request_token: The client_request_token of this AssociateRepositoryRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'^[\w-]+$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/^[\w-]+$/`")

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this AssociateRepositoryRequest.

        <p>An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:</p> <ul> <li> <p>A <i>tag key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag keys are case sensitive.</p> </li> <li> <p>An optional field known as a <i>tag value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.</p> </li> </ul>

        :return: The tags of this AssociateRepositoryRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AssociateRepositoryRequest.

        <p>An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:</p> <ul> <li> <p>A <i>tag key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag keys are case sensitive.</p> </li> <li> <p>An optional field known as a <i>tag value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.</p> </li> </ul>

        :param tags: The tags of this AssociateRepositoryRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def kms_key_details(self):
        """Gets the kms_key_details of this AssociateRepositoryRequest.


        :return: The kms_key_details of this AssociateRepositoryRequest.
        :rtype: AssociateRepositoryRequestKMSKeyDetails
        """
        return self._kms_key_details

    @kms_key_details.setter
    def kms_key_details(self, kms_key_details):
        """Sets the kms_key_details of this AssociateRepositoryRequest.


        :param kms_key_details: The kms_key_details of this AssociateRepositoryRequest.
        :type kms_key_details: AssociateRepositoryRequestKMSKeyDetails
        """

        self._kms_key_details = kms_key_details
