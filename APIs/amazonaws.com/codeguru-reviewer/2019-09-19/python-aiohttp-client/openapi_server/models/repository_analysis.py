# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repository_analysis_repository_head import RepositoryAnalysisRepositoryHead
from openapi_server.models.source_code_type import SourceCodeType
from openapi_server import util


class RepositoryAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_head: RepositoryAnalysisRepositoryHead=None, source_code_type: SourceCodeType=None):
        """RepositoryAnalysis - a model defined in OpenAPI

        :param repository_head: The repository_head of this RepositoryAnalysis.
        :param source_code_type: The source_code_type of this RepositoryAnalysis.
        """
        self.openapi_types = {
            'repository_head': RepositoryAnalysisRepositoryHead,
            'source_code_type': SourceCodeType
        }

        self.attribute_map = {
            'repository_head': 'RepositoryHead',
            'source_code_type': 'SourceCodeType'
        }

        self._repository_head = repository_head
        self._source_code_type = source_code_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepositoryAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepositoryAnalysis of this RepositoryAnalysis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_head(self):
        """Gets the repository_head of this RepositoryAnalysis.


        :return: The repository_head of this RepositoryAnalysis.
        :rtype: RepositoryAnalysisRepositoryHead
        """
        return self._repository_head

    @repository_head.setter
    def repository_head(self, repository_head):
        """Sets the repository_head of this RepositoryAnalysis.


        :param repository_head: The repository_head of this RepositoryAnalysis.
        :type repository_head: RepositoryAnalysisRepositoryHead
        """

        self._repository_head = repository_head

    @property
    def source_code_type(self):
        """Gets the source_code_type of this RepositoryAnalysis.


        :return: The source_code_type of this RepositoryAnalysis.
        :rtype: SourceCodeType
        """
        return self._source_code_type

    @source_code_type.setter
    def source_code_type(self, source_code_type):
        """Sets the source_code_type of this RepositoryAnalysis.


        :param source_code_type: The source_code_type of this RepositoryAnalysis.
        :type source_code_type: SourceCodeType
        """

        self._source_code_type = source_code_type
