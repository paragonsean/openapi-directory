# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reaction import Reaction
import re
from openapi_server import util


class PutRecommendationFeedbackRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_review_arn: str=None, recommendation_id: str=None, reactions: List[Reaction]=None):
        """PutRecommendationFeedbackRequest - a model defined in OpenAPI

        :param code_review_arn: The code_review_arn of this PutRecommendationFeedbackRequest.
        :param recommendation_id: The recommendation_id of this PutRecommendationFeedbackRequest.
        :param reactions: The reactions of this PutRecommendationFeedbackRequest.
        """
        self.openapi_types = {
            'code_review_arn': str,
            'recommendation_id': str,
            'reactions': List[Reaction]
        }

        self.attribute_map = {
            'code_review_arn': 'CodeReviewArn',
            'recommendation_id': 'RecommendationId',
            'reactions': 'Reactions'
        }

        self._code_review_arn = code_review_arn
        self._recommendation_id = recommendation_id
        self._reactions = reactions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutRecommendationFeedbackRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutRecommendationFeedback_request of this PutRecommendationFeedbackRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_review_arn(self):
        """Gets the code_review_arn of this PutRecommendationFeedbackRequest.

        The Amazon Resource Name (ARN) of the <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html\">CodeReview</a> object. 

        :return: The code_review_arn of this PutRecommendationFeedbackRequest.
        :rtype: str
        """
        return self._code_review_arn

    @code_review_arn.setter
    def code_review_arn(self, code_review_arn):
        """Sets the code_review_arn of this PutRecommendationFeedbackRequest.

        The Amazon Resource Name (ARN) of the <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html\">CodeReview</a> object. 

        :param code_review_arn: The code_review_arn of this PutRecommendationFeedbackRequest.
        :type code_review_arn: str
        """
        if code_review_arn is None:
            raise ValueError("Invalid value for `code_review_arn`, must not be `None`")
        if code_review_arn is not None and len(code_review_arn) > 1600:
            raise ValueError("Invalid value for `code_review_arn`, length must be less than or equal to `1600`")
        if code_review_arn is not None and len(code_review_arn) < 1:
            raise ValueError("Invalid value for `code_review_arn`, length must be greater than or equal to `1`")
        if code_review_arn is not None and not re.search(r'^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:[a-z-]+:[\w-]+$', code_review_arn):
            raise ValueError("Invalid value for `code_review_arn`, must be a follow pattern or equal to `/^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:[a-z-]+:[\w-]+$/`")

        self._code_review_arn = code_review_arn

    @property
    def recommendation_id(self):
        """Gets the recommendation_id of this PutRecommendationFeedbackRequest.

        The recommendation ID that can be used to track the provided recommendations and then to collect the feedback.

        :return: The recommendation_id of this PutRecommendationFeedbackRequest.
        :rtype: str
        """
        return self._recommendation_id

    @recommendation_id.setter
    def recommendation_id(self, recommendation_id):
        """Sets the recommendation_id of this PutRecommendationFeedbackRequest.

        The recommendation ID that can be used to track the provided recommendations and then to collect the feedback.

        :param recommendation_id: The recommendation_id of this PutRecommendationFeedbackRequest.
        :type recommendation_id: str
        """
        if recommendation_id is None:
            raise ValueError("Invalid value for `recommendation_id`, must not be `None`")
        if recommendation_id is not None and len(recommendation_id) > 64:
            raise ValueError("Invalid value for `recommendation_id`, length must be less than or equal to `64`")
        if recommendation_id is not None and len(recommendation_id) < 1:
            raise ValueError("Invalid value for `recommendation_id`, length must be greater than or equal to `1`")

        self._recommendation_id = recommendation_id

    @property
    def reactions(self):
        """Gets the reactions of this PutRecommendationFeedbackRequest.

        List for storing reactions. Reactions are utf-8 text code for emojis. If you send an empty list it clears all your feedback.

        :return: The reactions of this PutRecommendationFeedbackRequest.
        :rtype: List[Reaction]
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this PutRecommendationFeedbackRequest.

        List for storing reactions. Reactions are utf-8 text code for emojis. If you send an empty list it clears all your feedback.

        :param reactions: The reactions of this PutRecommendationFeedbackRequest.
        :type reactions: List[Reaction]
        """
        if reactions is None:
            raise ValueError("Invalid value for `reactions`, must not be `None`")
        if reactions is not None and len(reactions) > 1:
            raise ValueError("Invalid value for `reactions`, number of items must be less than or equal to `1`")
        if reactions is not None and len(reactions) < 0:
            raise ValueError("Invalid value for `reactions`, number of items must be greater than or equal to `0`")

        self._reactions = reactions
