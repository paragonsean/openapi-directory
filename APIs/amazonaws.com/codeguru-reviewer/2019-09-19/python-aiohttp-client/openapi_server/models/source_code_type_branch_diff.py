# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceCodeTypeBranchDiff(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_branch_name: str=None, destination_branch_name: str=None):
        """SourceCodeTypeBranchDiff - a model defined in OpenAPI

        :param source_branch_name: The source_branch_name of this SourceCodeTypeBranchDiff.
        :param destination_branch_name: The destination_branch_name of this SourceCodeTypeBranchDiff.
        """
        self.openapi_types = {
            'source_branch_name': str,
            'destination_branch_name': str
        }

        self.attribute_map = {
            'source_branch_name': 'SourceBranchName',
            'destination_branch_name': 'DestinationBranchName'
        }

        self._source_branch_name = source_branch_name
        self._destination_branch_name = destination_branch_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceCodeTypeBranchDiff':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceCodeType_BranchDiff of this SourceCodeTypeBranchDiff.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_branch_name(self):
        """Gets the source_branch_name of this SourceCodeTypeBranchDiff.


        :return: The source_branch_name of this SourceCodeTypeBranchDiff.
        :rtype: str
        """
        return self._source_branch_name

    @source_branch_name.setter
    def source_branch_name(self, source_branch_name):
        """Sets the source_branch_name of this SourceCodeTypeBranchDiff.


        :param source_branch_name: The source_branch_name of this SourceCodeTypeBranchDiff.
        :type source_branch_name: str
        """
        if source_branch_name is None:
            raise ValueError("Invalid value for `source_branch_name`, must not be `None`")

        self._source_branch_name = source_branch_name

    @property
    def destination_branch_name(self):
        """Gets the destination_branch_name of this SourceCodeTypeBranchDiff.


        :return: The destination_branch_name of this SourceCodeTypeBranchDiff.
        :rtype: str
        """
        return self._destination_branch_name

    @destination_branch_name.setter
    def destination_branch_name(self, destination_branch_name):
        """Sets the destination_branch_name of this SourceCodeTypeBranchDiff.


        :param destination_branch_name: The destination_branch_name of this SourceCodeTypeBranchDiff.
        :type destination_branch_name: str
        """
        if destination_branch_name is None:
            raise ValueError("Invalid value for `destination_branch_name`, must not be `None`")

        self._destination_branch_name = destination_branch_name
