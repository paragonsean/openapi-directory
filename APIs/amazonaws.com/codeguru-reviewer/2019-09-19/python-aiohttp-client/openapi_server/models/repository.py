# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associate_repository_request_repository_bitbucket import AssociateRepositoryRequestRepositoryBitbucket
from openapi_server.models.associate_repository_request_repository_code_commit import AssociateRepositoryRequestRepositoryCodeCommit
from openapi_server.models.associate_repository_request_repository_git_hub_enterprise_server import AssociateRepositoryRequestRepositoryGitHubEnterpriseServer
from openapi_server.models.s3_repository import S3Repository
from openapi_server import util


class Repository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_commit: AssociateRepositoryRequestRepositoryCodeCommit=None, bitbucket: AssociateRepositoryRequestRepositoryBitbucket=None, git_hub_enterprise_server: AssociateRepositoryRequestRepositoryGitHubEnterpriseServer=None, s3_bucket: S3Repository=None):
        """Repository - a model defined in OpenAPI

        :param code_commit: The code_commit of this Repository.
        :param bitbucket: The bitbucket of this Repository.
        :param git_hub_enterprise_server: The git_hub_enterprise_server of this Repository.
        :param s3_bucket: The s3_bucket of this Repository.
        """
        self.openapi_types = {
            'code_commit': AssociateRepositoryRequestRepositoryCodeCommit,
            'bitbucket': AssociateRepositoryRequestRepositoryBitbucket,
            'git_hub_enterprise_server': AssociateRepositoryRequestRepositoryGitHubEnterpriseServer,
            's3_bucket': S3Repository
        }

        self.attribute_map = {
            'code_commit': 'CodeCommit',
            'bitbucket': 'Bitbucket',
            'git_hub_enterprise_server': 'GitHubEnterpriseServer',
            's3_bucket': 'S3Bucket'
        }

        self._code_commit = code_commit
        self._bitbucket = bitbucket
        self._git_hub_enterprise_server = git_hub_enterprise_server
        self._s3_bucket = s3_bucket

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Repository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Repository of this Repository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_commit(self):
        """Gets the code_commit of this Repository.


        :return: The code_commit of this Repository.
        :rtype: AssociateRepositoryRequestRepositoryCodeCommit
        """
        return self._code_commit

    @code_commit.setter
    def code_commit(self, code_commit):
        """Sets the code_commit of this Repository.


        :param code_commit: The code_commit of this Repository.
        :type code_commit: AssociateRepositoryRequestRepositoryCodeCommit
        """

        self._code_commit = code_commit

    @property
    def bitbucket(self):
        """Gets the bitbucket of this Repository.


        :return: The bitbucket of this Repository.
        :rtype: AssociateRepositoryRequestRepositoryBitbucket
        """
        return self._bitbucket

    @bitbucket.setter
    def bitbucket(self, bitbucket):
        """Sets the bitbucket of this Repository.


        :param bitbucket: The bitbucket of this Repository.
        :type bitbucket: AssociateRepositoryRequestRepositoryBitbucket
        """

        self._bitbucket = bitbucket

    @property
    def git_hub_enterprise_server(self):
        """Gets the git_hub_enterprise_server of this Repository.


        :return: The git_hub_enterprise_server of this Repository.
        :rtype: AssociateRepositoryRequestRepositoryGitHubEnterpriseServer
        """
        return self._git_hub_enterprise_server

    @git_hub_enterprise_server.setter
    def git_hub_enterprise_server(self, git_hub_enterprise_server):
        """Sets the git_hub_enterprise_server of this Repository.


        :param git_hub_enterprise_server: The git_hub_enterprise_server of this Repository.
        :type git_hub_enterprise_server: AssociateRepositoryRequestRepositoryGitHubEnterpriseServer
        """

        self._git_hub_enterprise_server = git_hub_enterprise_server

    @property
    def s3_bucket(self):
        """Gets the s3_bucket of this Repository.


        :return: The s3_bucket of this Repository.
        :rtype: S3Repository
        """
        return self._s3_bucket

    @s3_bucket.setter
    def s3_bucket(self, s3_bucket):
        """Sets the s3_bucket of this Repository.


        :param s3_bucket: The s3_bucket of this Repository.
        :type s3_bucket: S3Repository
        """

        self._s3_bucket = s3_bucket
