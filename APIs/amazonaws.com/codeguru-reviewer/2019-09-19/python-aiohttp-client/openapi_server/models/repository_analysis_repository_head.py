# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepositoryAnalysisRepositoryHead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch_name: str=None):
        """RepositoryAnalysisRepositoryHead - a model defined in OpenAPI

        :param branch_name: The branch_name of this RepositoryAnalysisRepositoryHead.
        """
        self.openapi_types = {
            'branch_name': str
        }

        self.attribute_map = {
            'branch_name': 'BranchName'
        }

        self._branch_name = branch_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepositoryAnalysisRepositoryHead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepositoryAnalysis_RepositoryHead of this RepositoryAnalysisRepositoryHead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch_name(self):
        """Gets the branch_name of this RepositoryAnalysisRepositoryHead.


        :return: The branch_name of this RepositoryAnalysisRepositoryHead.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this RepositoryAnalysisRepositoryHead.


        :param branch_name: The branch_name of this RepositoryAnalysisRepositoryHead.
        :type branch_name: str
        """
        if branch_name is None:
            raise ValueError("Invalid value for `branch_name`, must not be `None`")

        self._branch_name = branch_name
