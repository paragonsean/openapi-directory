# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodeArtifacts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_code_artifacts_object_key: str=None, build_artifacts_object_key: str=None):
        """CodeArtifacts - a model defined in OpenAPI

        :param source_code_artifacts_object_key: The source_code_artifacts_object_key of this CodeArtifacts.
        :param build_artifacts_object_key: The build_artifacts_object_key of this CodeArtifacts.
        """
        self.openapi_types = {
            'source_code_artifacts_object_key': str,
            'build_artifacts_object_key': str
        }

        self.attribute_map = {
            'source_code_artifacts_object_key': 'SourceCodeArtifactsObjectKey',
            'build_artifacts_object_key': 'BuildArtifactsObjectKey'
        }

        self._source_code_artifacts_object_key = source_code_artifacts_object_key
        self._build_artifacts_object_key = build_artifacts_object_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeArtifacts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeArtifacts of this CodeArtifacts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_code_artifacts_object_key(self):
        """Gets the source_code_artifacts_object_key of this CodeArtifacts.


        :return: The source_code_artifacts_object_key of this CodeArtifacts.
        :rtype: str
        """
        return self._source_code_artifacts_object_key

    @source_code_artifacts_object_key.setter
    def source_code_artifacts_object_key(self, source_code_artifacts_object_key):
        """Sets the source_code_artifacts_object_key of this CodeArtifacts.


        :param source_code_artifacts_object_key: The source_code_artifacts_object_key of this CodeArtifacts.
        :type source_code_artifacts_object_key: str
        """
        if source_code_artifacts_object_key is None:
            raise ValueError("Invalid value for `source_code_artifacts_object_key`, must not be `None`")

        self._source_code_artifacts_object_key = source_code_artifacts_object_key

    @property
    def build_artifacts_object_key(self):
        """Gets the build_artifacts_object_key of this CodeArtifacts.


        :return: The build_artifacts_object_key of this CodeArtifacts.
        :rtype: str
        """
        return self._build_artifacts_object_key

    @build_artifacts_object_key.setter
    def build_artifacts_object_key(self, build_artifacts_object_key):
        """Sets the build_artifacts_object_key of this CodeArtifacts.


        :param build_artifacts_object_key: The build_artifacts_object_key of this CodeArtifacts.
        :type build_artifacts_object_key: str
        """

        self._build_artifacts_object_key = build_artifacts_object_key
