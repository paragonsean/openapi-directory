# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateRepositoryRequestRepositoryGitHubEnterpriseServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, connection_arn: str=None, owner: str=None):
        """AssociateRepositoryRequestRepositoryGitHubEnterpriseServer - a model defined in OpenAPI

        :param name: The name of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.
        :param connection_arn: The connection_arn of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.
        :param owner: The owner of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.
        """
        self.openapi_types = {
            'name': str,
            'connection_arn': str,
            'owner': str
        }

        self.attribute_map = {
            'name': 'Name',
            'connection_arn': 'ConnectionArn',
            'owner': 'Owner'
        }

        self._name = name
        self._connection_arn = connection_arn
        self._owner = owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateRepositoryRequestRepositoryGitHubEnterpriseServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateRepository_request_Repository_GitHubEnterpriseServer of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.


        :return: The name of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.


        :param name: The name of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def connection_arn(self):
        """Gets the connection_arn of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.


        :return: The connection_arn of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.
        :rtype: str
        """
        return self._connection_arn

    @connection_arn.setter
    def connection_arn(self, connection_arn):
        """Sets the connection_arn of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.


        :param connection_arn: The connection_arn of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.
        :type connection_arn: str
        """
        if connection_arn is None:
            raise ValueError("Invalid value for `connection_arn`, must not be `None`")

        self._connection_arn = connection_arn

    @property
    def owner(self):
        """Gets the owner of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.


        :return: The owner of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.


        :param owner: The owner of this AssociateRepositoryRequestRepositoryGitHubEnterpriseServer.
        :type owner: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner
