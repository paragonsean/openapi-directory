# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repository_head_source_code_type import RepositoryHeadSourceCodeType
from openapi_server.models.source_code_type_branch_diff import SourceCodeTypeBranchDiff
from openapi_server.models.source_code_type_commit_diff import SourceCodeTypeCommitDiff
from openapi_server.models.source_code_type_request_metadata import SourceCodeTypeRequestMetadata
from openapi_server.models.source_code_type_s3_bucket_repository import SourceCodeTypeS3BucketRepository
from openapi_server import util


class CodeReviewSourceCodeType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit_diff: SourceCodeTypeCommitDiff=None, repository_head: RepositoryHeadSourceCodeType=None, branch_diff: SourceCodeTypeBranchDiff=None, s3_bucket_repository: SourceCodeTypeS3BucketRepository=None, request_metadata: SourceCodeTypeRequestMetadata=None):
        """CodeReviewSourceCodeType - a model defined in OpenAPI

        :param commit_diff: The commit_diff of this CodeReviewSourceCodeType.
        :param repository_head: The repository_head of this CodeReviewSourceCodeType.
        :param branch_diff: The branch_diff of this CodeReviewSourceCodeType.
        :param s3_bucket_repository: The s3_bucket_repository of this CodeReviewSourceCodeType.
        :param request_metadata: The request_metadata of this CodeReviewSourceCodeType.
        """
        self.openapi_types = {
            'commit_diff': SourceCodeTypeCommitDiff,
            'repository_head': RepositoryHeadSourceCodeType,
            'branch_diff': SourceCodeTypeBranchDiff,
            's3_bucket_repository': SourceCodeTypeS3BucketRepository,
            'request_metadata': SourceCodeTypeRequestMetadata
        }

        self.attribute_map = {
            'commit_diff': 'CommitDiff',
            'repository_head': 'RepositoryHead',
            'branch_diff': 'BranchDiff',
            's3_bucket_repository': 'S3BucketRepository',
            'request_metadata': 'RequestMetadata'
        }

        self._commit_diff = commit_diff
        self._repository_head = repository_head
        self._branch_diff = branch_diff
        self._s3_bucket_repository = s3_bucket_repository
        self._request_metadata = request_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeReviewSourceCodeType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeReview_SourceCodeType of this CodeReviewSourceCodeType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit_diff(self):
        """Gets the commit_diff of this CodeReviewSourceCodeType.


        :return: The commit_diff of this CodeReviewSourceCodeType.
        :rtype: SourceCodeTypeCommitDiff
        """
        return self._commit_diff

    @commit_diff.setter
    def commit_diff(self, commit_diff):
        """Sets the commit_diff of this CodeReviewSourceCodeType.


        :param commit_diff: The commit_diff of this CodeReviewSourceCodeType.
        :type commit_diff: SourceCodeTypeCommitDiff
        """

        self._commit_diff = commit_diff

    @property
    def repository_head(self):
        """Gets the repository_head of this CodeReviewSourceCodeType.


        :return: The repository_head of this CodeReviewSourceCodeType.
        :rtype: RepositoryHeadSourceCodeType
        """
        return self._repository_head

    @repository_head.setter
    def repository_head(self, repository_head):
        """Sets the repository_head of this CodeReviewSourceCodeType.


        :param repository_head: The repository_head of this CodeReviewSourceCodeType.
        :type repository_head: RepositoryHeadSourceCodeType
        """

        self._repository_head = repository_head

    @property
    def branch_diff(self):
        """Gets the branch_diff of this CodeReviewSourceCodeType.


        :return: The branch_diff of this CodeReviewSourceCodeType.
        :rtype: SourceCodeTypeBranchDiff
        """
        return self._branch_diff

    @branch_diff.setter
    def branch_diff(self, branch_diff):
        """Sets the branch_diff of this CodeReviewSourceCodeType.


        :param branch_diff: The branch_diff of this CodeReviewSourceCodeType.
        :type branch_diff: SourceCodeTypeBranchDiff
        """

        self._branch_diff = branch_diff

    @property
    def s3_bucket_repository(self):
        """Gets the s3_bucket_repository of this CodeReviewSourceCodeType.


        :return: The s3_bucket_repository of this CodeReviewSourceCodeType.
        :rtype: SourceCodeTypeS3BucketRepository
        """
        return self._s3_bucket_repository

    @s3_bucket_repository.setter
    def s3_bucket_repository(self, s3_bucket_repository):
        """Sets the s3_bucket_repository of this CodeReviewSourceCodeType.


        :param s3_bucket_repository: The s3_bucket_repository of this CodeReviewSourceCodeType.
        :type s3_bucket_repository: SourceCodeTypeS3BucketRepository
        """

        self._s3_bucket_repository = s3_bucket_repository

    @property
    def request_metadata(self):
        """Gets the request_metadata of this CodeReviewSourceCodeType.


        :return: The request_metadata of this CodeReviewSourceCodeType.
        :rtype: SourceCodeTypeRequestMetadata
        """
        return self._request_metadata

    @request_metadata.setter
    def request_metadata(self, request_metadata):
        """Sets the request_metadata of this CodeReviewSourceCodeType.


        :param request_metadata: The request_metadata of this CodeReviewSourceCodeType.
        :type request_metadata: SourceCodeTypeRequestMetadata
        """

        self._request_metadata = request_metadata
