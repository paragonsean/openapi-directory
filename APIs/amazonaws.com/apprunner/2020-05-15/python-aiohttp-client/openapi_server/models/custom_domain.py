# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_domain_association_status import CustomDomainAssociationStatus
from openapi_server import util


class CustomDomain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, enable_www_subdomain: bool=None, certificate_validation_records: List=None, status: CustomDomainAssociationStatus=None):
        """CustomDomain - a model defined in OpenAPI

        :param domain_name: The domain_name of this CustomDomain.
        :param enable_www_subdomain: The enable_www_subdomain of this CustomDomain.
        :param certificate_validation_records: The certificate_validation_records of this CustomDomain.
        :param status: The status of this CustomDomain.
        """
        self.openapi_types = {
            'domain_name': str,
            'enable_www_subdomain': bool,
            'certificate_validation_records': List,
            'status': CustomDomainAssociationStatus
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'enable_www_subdomain': 'EnableWWWSubdomain',
            'certificate_validation_records': 'CertificateValidationRecords',
            'status': 'Status'
        }

        self._domain_name = domain_name
        self._enable_www_subdomain = enable_www_subdomain
        self._certificate_validation_records = certificate_validation_records
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomDomain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomDomain of this CustomDomain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this CustomDomain.


        :return: The domain_name of this CustomDomain.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this CustomDomain.


        :param domain_name: The domain_name of this CustomDomain.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def enable_www_subdomain(self):
        """Gets the enable_www_subdomain of this CustomDomain.


        :return: The enable_www_subdomain of this CustomDomain.
        :rtype: bool
        """
        return self._enable_www_subdomain

    @enable_www_subdomain.setter
    def enable_www_subdomain(self, enable_www_subdomain):
        """Sets the enable_www_subdomain of this CustomDomain.


        :param enable_www_subdomain: The enable_www_subdomain of this CustomDomain.
        :type enable_www_subdomain: bool
        """
        if enable_www_subdomain is None:
            raise ValueError("Invalid value for `enable_www_subdomain`, must not be `None`")

        self._enable_www_subdomain = enable_www_subdomain

    @property
    def certificate_validation_records(self):
        """Gets the certificate_validation_records of this CustomDomain.


        :return: The certificate_validation_records of this CustomDomain.
        :rtype: List
        """
        return self._certificate_validation_records

    @certificate_validation_records.setter
    def certificate_validation_records(self, certificate_validation_records):
        """Sets the certificate_validation_records of this CustomDomain.


        :param certificate_validation_records: The certificate_validation_records of this CustomDomain.
        :type certificate_validation_records: List
        """

        self._certificate_validation_records = certificate_validation_records

    @property
    def status(self):
        """Gets the status of this CustomDomain.


        :return: The status of this CustomDomain.
        :rtype: CustomDomainAssociationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CustomDomain.


        :param status: The status of this CustomDomain.
        :type status: CustomDomainAssociationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
