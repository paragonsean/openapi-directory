# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeVpcConnectorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vpc_connector_arn: str=None):
        """DescribeVpcConnectorRequest - a model defined in OpenAPI

        :param vpc_connector_arn: The vpc_connector_arn of this DescribeVpcConnectorRequest.
        """
        self.openapi_types = {
            'vpc_connector_arn': str
        }

        self.attribute_map = {
            'vpc_connector_arn': 'VpcConnectorArn'
        }

        self._vpc_connector_arn = vpc_connector_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeVpcConnectorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeVpcConnectorRequest of this DescribeVpcConnectorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vpc_connector_arn(self):
        """Gets the vpc_connector_arn of this DescribeVpcConnectorRequest.


        :return: The vpc_connector_arn of this DescribeVpcConnectorRequest.
        :rtype: str
        """
        return self._vpc_connector_arn

    @vpc_connector_arn.setter
    def vpc_connector_arn(self, vpc_connector_arn):
        """Sets the vpc_connector_arn of this DescribeVpcConnectorRequest.


        :param vpc_connector_arn: The vpc_connector_arn of this DescribeVpcConnectorRequest.
        :type vpc_connector_arn: str
        """
        if vpc_connector_arn is None:
            raise ValueError("Invalid value for `vpc_connector_arn`, must not be `None`")

        self._vpc_connector_arn = vpc_connector_arn
