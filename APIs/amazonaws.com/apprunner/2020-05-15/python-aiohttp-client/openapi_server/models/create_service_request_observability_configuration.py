# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateServiceRequestObservabilityConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, observability_enabled: bool=None, observability_configuration_arn: str=None):
        """CreateServiceRequestObservabilityConfiguration - a model defined in OpenAPI

        :param observability_enabled: The observability_enabled of this CreateServiceRequestObservabilityConfiguration.
        :param observability_configuration_arn: The observability_configuration_arn of this CreateServiceRequestObservabilityConfiguration.
        """
        self.openapi_types = {
            'observability_enabled': bool,
            'observability_configuration_arn': str
        }

        self.attribute_map = {
            'observability_enabled': 'ObservabilityEnabled',
            'observability_configuration_arn': 'ObservabilityConfigurationArn'
        }

        self._observability_enabled = observability_enabled
        self._observability_configuration_arn = observability_configuration_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServiceRequestObservabilityConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateServiceRequest_ObservabilityConfiguration of this CreateServiceRequestObservabilityConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def observability_enabled(self):
        """Gets the observability_enabled of this CreateServiceRequestObservabilityConfiguration.


        :return: The observability_enabled of this CreateServiceRequestObservabilityConfiguration.
        :rtype: bool
        """
        return self._observability_enabled

    @observability_enabled.setter
    def observability_enabled(self, observability_enabled):
        """Sets the observability_enabled of this CreateServiceRequestObservabilityConfiguration.


        :param observability_enabled: The observability_enabled of this CreateServiceRequestObservabilityConfiguration.
        :type observability_enabled: bool
        """
        if observability_enabled is None:
            raise ValueError("Invalid value for `observability_enabled`, must not be `None`")

        self._observability_enabled = observability_enabled

    @property
    def observability_configuration_arn(self):
        """Gets the observability_configuration_arn of this CreateServiceRequestObservabilityConfiguration.


        :return: The observability_configuration_arn of this CreateServiceRequestObservabilityConfiguration.
        :rtype: str
        """
        return self._observability_configuration_arn

    @observability_configuration_arn.setter
    def observability_configuration_arn(self, observability_configuration_arn):
        """Sets the observability_configuration_arn of this CreateServiceRequestObservabilityConfiguration.


        :param observability_configuration_arn: The observability_configuration_arn of this CreateServiceRequestObservabilityConfiguration.
        :type observability_configuration_arn: str
        """

        self._observability_configuration_arn = observability_configuration_arn
