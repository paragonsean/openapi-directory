# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_configuration_code_configuration_values import CodeConfigurationCodeConfigurationValues
from openapi_server.models.configuration_source import ConfigurationSource
from openapi_server import util


class CodeRepositoryCodeConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_source: ConfigurationSource=None, code_configuration_values: CodeConfigurationCodeConfigurationValues=None):
        """CodeRepositoryCodeConfiguration - a model defined in OpenAPI

        :param configuration_source: The configuration_source of this CodeRepositoryCodeConfiguration.
        :param code_configuration_values: The code_configuration_values of this CodeRepositoryCodeConfiguration.
        """
        self.openapi_types = {
            'configuration_source': ConfigurationSource,
            'code_configuration_values': CodeConfigurationCodeConfigurationValues
        }

        self.attribute_map = {
            'configuration_source': 'ConfigurationSource',
            'code_configuration_values': 'CodeConfigurationValues'
        }

        self._configuration_source = configuration_source
        self._code_configuration_values = code_configuration_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeRepositoryCodeConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeRepository_CodeConfiguration of this CodeRepositoryCodeConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_source(self):
        """Gets the configuration_source of this CodeRepositoryCodeConfiguration.


        :return: The configuration_source of this CodeRepositoryCodeConfiguration.
        :rtype: ConfigurationSource
        """
        return self._configuration_source

    @configuration_source.setter
    def configuration_source(self, configuration_source):
        """Sets the configuration_source of this CodeRepositoryCodeConfiguration.


        :param configuration_source: The configuration_source of this CodeRepositoryCodeConfiguration.
        :type configuration_source: ConfigurationSource
        """
        if configuration_source is None:
            raise ValueError("Invalid value for `configuration_source`, must not be `None`")

        self._configuration_source = configuration_source

    @property
    def code_configuration_values(self):
        """Gets the code_configuration_values of this CodeRepositoryCodeConfiguration.


        :return: The code_configuration_values of this CodeRepositoryCodeConfiguration.
        :rtype: CodeConfigurationCodeConfigurationValues
        """
        return self._code_configuration_values

    @code_configuration_values.setter
    def code_configuration_values(self, code_configuration_values):
        """Sets the code_configuration_values of this CodeRepositoryCodeConfiguration.


        :param code_configuration_values: The code_configuration_values of this CodeRepositoryCodeConfiguration.
        :type code_configuration_values: CodeConfigurationCodeConfigurationValues
        """

        self._code_configuration_values = code_configuration_values
