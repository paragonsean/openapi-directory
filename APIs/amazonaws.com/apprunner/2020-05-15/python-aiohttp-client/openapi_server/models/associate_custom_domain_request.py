# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateCustomDomainRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_arn: str=None, domain_name: str=None, enable_www_subdomain: bool=None):
        """AssociateCustomDomainRequest - a model defined in OpenAPI

        :param service_arn: The service_arn of this AssociateCustomDomainRequest.
        :param domain_name: The domain_name of this AssociateCustomDomainRequest.
        :param enable_www_subdomain: The enable_www_subdomain of this AssociateCustomDomainRequest.
        """
        self.openapi_types = {
            'service_arn': str,
            'domain_name': str,
            'enable_www_subdomain': bool
        }

        self.attribute_map = {
            'service_arn': 'ServiceArn',
            'domain_name': 'DomainName',
            'enable_www_subdomain': 'EnableWWWSubdomain'
        }

        self._service_arn = service_arn
        self._domain_name = domain_name
        self._enable_www_subdomain = enable_www_subdomain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateCustomDomainRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateCustomDomainRequest of this AssociateCustomDomainRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_arn(self):
        """Gets the service_arn of this AssociateCustomDomainRequest.


        :return: The service_arn of this AssociateCustomDomainRequest.
        :rtype: str
        """
        return self._service_arn

    @service_arn.setter
    def service_arn(self, service_arn):
        """Sets the service_arn of this AssociateCustomDomainRequest.


        :param service_arn: The service_arn of this AssociateCustomDomainRequest.
        :type service_arn: str
        """
        if service_arn is None:
            raise ValueError("Invalid value for `service_arn`, must not be `None`")

        self._service_arn = service_arn

    @property
    def domain_name(self):
        """Gets the domain_name of this AssociateCustomDomainRequest.


        :return: The domain_name of this AssociateCustomDomainRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this AssociateCustomDomainRequest.


        :param domain_name: The domain_name of this AssociateCustomDomainRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def enable_www_subdomain(self):
        """Gets the enable_www_subdomain of this AssociateCustomDomainRequest.


        :return: The enable_www_subdomain of this AssociateCustomDomainRequest.
        :rtype: bool
        """
        return self._enable_www_subdomain

    @enable_www_subdomain.setter
    def enable_www_subdomain(self, enable_www_subdomain):
        """Sets the enable_www_subdomain of this AssociateCustomDomainRequest.


        :param enable_www_subdomain: The enable_www_subdomain of this AssociateCustomDomainRequest.
        :type enable_www_subdomain: bool
        """

        self._enable_www_subdomain = enable_www_subdomain
