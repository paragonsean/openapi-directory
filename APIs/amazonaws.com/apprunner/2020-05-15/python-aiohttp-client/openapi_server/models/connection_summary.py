# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_status import ConnectionStatus
from openapi_server.models.provider_type import ProviderType
from openapi_server import util


class ConnectionSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_name: str=None, connection_arn: str=None, provider_type: ProviderType=None, status: ConnectionStatus=None, created_at: datetime=None):
        """ConnectionSummary - a model defined in OpenAPI

        :param connection_name: The connection_name of this ConnectionSummary.
        :param connection_arn: The connection_arn of this ConnectionSummary.
        :param provider_type: The provider_type of this ConnectionSummary.
        :param status: The status of this ConnectionSummary.
        :param created_at: The created_at of this ConnectionSummary.
        """
        self.openapi_types = {
            'connection_name': str,
            'connection_arn': str,
            'provider_type': ProviderType,
            'status': ConnectionStatus,
            'created_at': datetime
        }

        self.attribute_map = {
            'connection_name': 'ConnectionName',
            'connection_arn': 'ConnectionArn',
            'provider_type': 'ProviderType',
            'status': 'Status',
            'created_at': 'CreatedAt'
        }

        self._connection_name = connection_name
        self._connection_arn = connection_arn
        self._provider_type = provider_type
        self._status = status
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionSummary of this ConnectionSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_name(self):
        """Gets the connection_name of this ConnectionSummary.


        :return: The connection_name of this ConnectionSummary.
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """Sets the connection_name of this ConnectionSummary.


        :param connection_name: The connection_name of this ConnectionSummary.
        :type connection_name: str
        """

        self._connection_name = connection_name

    @property
    def connection_arn(self):
        """Gets the connection_arn of this ConnectionSummary.


        :return: The connection_arn of this ConnectionSummary.
        :rtype: str
        """
        return self._connection_arn

    @connection_arn.setter
    def connection_arn(self, connection_arn):
        """Sets the connection_arn of this ConnectionSummary.


        :param connection_arn: The connection_arn of this ConnectionSummary.
        :type connection_arn: str
        """

        self._connection_arn = connection_arn

    @property
    def provider_type(self):
        """Gets the provider_type of this ConnectionSummary.


        :return: The provider_type of this ConnectionSummary.
        :rtype: ProviderType
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this ConnectionSummary.


        :param provider_type: The provider_type of this ConnectionSummary.
        :type provider_type: ProviderType
        """

        self._provider_type = provider_type

    @property
    def status(self):
        """Gets the status of this ConnectionSummary.


        :return: The status of this ConnectionSummary.
        :rtype: ConnectionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConnectionSummary.


        :param status: The status of this ConnectionSummary.
        :type status: ConnectionStatus
        """

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this ConnectionSummary.


        :return: The created_at of this ConnectionSummary.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConnectionSummary.


        :param created_at: The created_at of this ConnectionSummary.
        :type created_at: datetime
        """

        self._created_at = created_at
