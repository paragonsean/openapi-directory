# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_vpc_ingress_connection_request_ingress_vpc_configuration import CreateVpcIngressConnectionRequestIngressVpcConfiguration
from openapi_server import util


class CreateVpcIngressConnectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_arn: str=None, vpc_ingress_connection_name: str=None, ingress_vpc_configuration: CreateVpcIngressConnectionRequestIngressVpcConfiguration=None, tags: List=None):
        """CreateVpcIngressConnectionRequest - a model defined in OpenAPI

        :param service_arn: The service_arn of this CreateVpcIngressConnectionRequest.
        :param vpc_ingress_connection_name: The vpc_ingress_connection_name of this CreateVpcIngressConnectionRequest.
        :param ingress_vpc_configuration: The ingress_vpc_configuration of this CreateVpcIngressConnectionRequest.
        :param tags: The tags of this CreateVpcIngressConnectionRequest.
        """
        self.openapi_types = {
            'service_arn': str,
            'vpc_ingress_connection_name': str,
            'ingress_vpc_configuration': CreateVpcIngressConnectionRequestIngressVpcConfiguration,
            'tags': List
        }

        self.attribute_map = {
            'service_arn': 'ServiceArn',
            'vpc_ingress_connection_name': 'VpcIngressConnectionName',
            'ingress_vpc_configuration': 'IngressVpcConfiguration',
            'tags': 'Tags'
        }

        self._service_arn = service_arn
        self._vpc_ingress_connection_name = vpc_ingress_connection_name
        self._ingress_vpc_configuration = ingress_vpc_configuration
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVpcIngressConnectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVpcIngressConnectionRequest of this CreateVpcIngressConnectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_arn(self):
        """Gets the service_arn of this CreateVpcIngressConnectionRequest.


        :return: The service_arn of this CreateVpcIngressConnectionRequest.
        :rtype: str
        """
        return self._service_arn

    @service_arn.setter
    def service_arn(self, service_arn):
        """Sets the service_arn of this CreateVpcIngressConnectionRequest.


        :param service_arn: The service_arn of this CreateVpcIngressConnectionRequest.
        :type service_arn: str
        """
        if service_arn is None:
            raise ValueError("Invalid value for `service_arn`, must not be `None`")

        self._service_arn = service_arn

    @property
    def vpc_ingress_connection_name(self):
        """Gets the vpc_ingress_connection_name of this CreateVpcIngressConnectionRequest.


        :return: The vpc_ingress_connection_name of this CreateVpcIngressConnectionRequest.
        :rtype: str
        """
        return self._vpc_ingress_connection_name

    @vpc_ingress_connection_name.setter
    def vpc_ingress_connection_name(self, vpc_ingress_connection_name):
        """Sets the vpc_ingress_connection_name of this CreateVpcIngressConnectionRequest.


        :param vpc_ingress_connection_name: The vpc_ingress_connection_name of this CreateVpcIngressConnectionRequest.
        :type vpc_ingress_connection_name: str
        """
        if vpc_ingress_connection_name is None:
            raise ValueError("Invalid value for `vpc_ingress_connection_name`, must not be `None`")

        self._vpc_ingress_connection_name = vpc_ingress_connection_name

    @property
    def ingress_vpc_configuration(self):
        """Gets the ingress_vpc_configuration of this CreateVpcIngressConnectionRequest.


        :return: The ingress_vpc_configuration of this CreateVpcIngressConnectionRequest.
        :rtype: CreateVpcIngressConnectionRequestIngressVpcConfiguration
        """
        return self._ingress_vpc_configuration

    @ingress_vpc_configuration.setter
    def ingress_vpc_configuration(self, ingress_vpc_configuration):
        """Sets the ingress_vpc_configuration of this CreateVpcIngressConnectionRequest.


        :param ingress_vpc_configuration: The ingress_vpc_configuration of this CreateVpcIngressConnectionRequest.
        :type ingress_vpc_configuration: CreateVpcIngressConnectionRequestIngressVpcConfiguration
        """
        if ingress_vpc_configuration is None:
            raise ValueError("Invalid value for `ingress_vpc_configuration`, must not be `None`")

        self._ingress_vpc_configuration = ingress_vpc_configuration

    @property
    def tags(self):
        """Gets the tags of this CreateVpcIngressConnectionRequest.


        :return: The tags of this CreateVpcIngressConnectionRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateVpcIngressConnectionRequest.


        :param tags: The tags of this CreateVpcIngressConnectionRequest.
        :type tags: List
        """

        self._tags = tags
