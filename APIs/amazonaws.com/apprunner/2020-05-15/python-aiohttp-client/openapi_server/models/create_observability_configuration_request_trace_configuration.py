# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tracing_vendor import TracingVendor
from openapi_server import util


class CreateObservabilityConfigurationRequestTraceConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vendor: TracingVendor=None):
        """CreateObservabilityConfigurationRequestTraceConfiguration - a model defined in OpenAPI

        :param vendor: The vendor of this CreateObservabilityConfigurationRequestTraceConfiguration.
        """
        self.openapi_types = {
            'vendor': TracingVendor
        }

        self.attribute_map = {
            'vendor': 'Vendor'
        }

        self._vendor = vendor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateObservabilityConfigurationRequestTraceConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateObservabilityConfigurationRequest_TraceConfiguration of this CreateObservabilityConfigurationRequestTraceConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vendor(self):
        """Gets the vendor of this CreateObservabilityConfigurationRequestTraceConfiguration.


        :return: The vendor of this CreateObservabilityConfigurationRequestTraceConfiguration.
        :rtype: TracingVendor
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this CreateObservabilityConfigurationRequestTraceConfiguration.


        :param vendor: The vendor of this CreateObservabilityConfigurationRequestTraceConfiguration.
        :type vendor: TracingVendor
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")

        self._vendor = vendor
