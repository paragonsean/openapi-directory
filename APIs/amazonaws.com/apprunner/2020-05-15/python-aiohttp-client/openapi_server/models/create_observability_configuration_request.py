# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_observability_configuration_request_trace_configuration import CreateObservabilityConfigurationRequestTraceConfiguration
from openapi_server import util


class CreateObservabilityConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, observability_configuration_name: str=None, trace_configuration: CreateObservabilityConfigurationRequestTraceConfiguration=None, tags: List=None):
        """CreateObservabilityConfigurationRequest - a model defined in OpenAPI

        :param observability_configuration_name: The observability_configuration_name of this CreateObservabilityConfigurationRequest.
        :param trace_configuration: The trace_configuration of this CreateObservabilityConfigurationRequest.
        :param tags: The tags of this CreateObservabilityConfigurationRequest.
        """
        self.openapi_types = {
            'observability_configuration_name': str,
            'trace_configuration': CreateObservabilityConfigurationRequestTraceConfiguration,
            'tags': List
        }

        self.attribute_map = {
            'observability_configuration_name': 'ObservabilityConfigurationName',
            'trace_configuration': 'TraceConfiguration',
            'tags': 'Tags'
        }

        self._observability_configuration_name = observability_configuration_name
        self._trace_configuration = trace_configuration
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateObservabilityConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateObservabilityConfigurationRequest of this CreateObservabilityConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def observability_configuration_name(self):
        """Gets the observability_configuration_name of this CreateObservabilityConfigurationRequest.


        :return: The observability_configuration_name of this CreateObservabilityConfigurationRequest.
        :rtype: str
        """
        return self._observability_configuration_name

    @observability_configuration_name.setter
    def observability_configuration_name(self, observability_configuration_name):
        """Sets the observability_configuration_name of this CreateObservabilityConfigurationRequest.


        :param observability_configuration_name: The observability_configuration_name of this CreateObservabilityConfigurationRequest.
        :type observability_configuration_name: str
        """
        if observability_configuration_name is None:
            raise ValueError("Invalid value for `observability_configuration_name`, must not be `None`")

        self._observability_configuration_name = observability_configuration_name

    @property
    def trace_configuration(self):
        """Gets the trace_configuration of this CreateObservabilityConfigurationRequest.


        :return: The trace_configuration of this CreateObservabilityConfigurationRequest.
        :rtype: CreateObservabilityConfigurationRequestTraceConfiguration
        """
        return self._trace_configuration

    @trace_configuration.setter
    def trace_configuration(self, trace_configuration):
        """Sets the trace_configuration of this CreateObservabilityConfigurationRequest.


        :param trace_configuration: The trace_configuration of this CreateObservabilityConfigurationRequest.
        :type trace_configuration: CreateObservabilityConfigurationRequestTraceConfiguration
        """

        self._trace_configuration = trace_configuration

    @property
    def tags(self):
        """Gets the tags of this CreateObservabilityConfigurationRequest.


        :return: The tags of this CreateObservabilityConfigurationRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateObservabilityConfigurationRequest.


        :param tags: The tags of this CreateObservabilityConfigurationRequest.
        :type tags: List
        """

        self._tags = tags
