# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_service_response_service import CreateServiceResponseService
from openapi_server import util


class CreateServiceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service: CreateServiceResponseService=None, operation_id: str=None):
        """CreateServiceResponse - a model defined in OpenAPI

        :param service: The service of this CreateServiceResponse.
        :param operation_id: The operation_id of this CreateServiceResponse.
        """
        self.openapi_types = {
            'service': CreateServiceResponseService,
            'operation_id': str
        }

        self.attribute_map = {
            'service': 'Service',
            'operation_id': 'OperationId'
        }

        self._service = service
        self._operation_id = operation_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServiceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateServiceResponse of this CreateServiceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service(self):
        """Gets the service of this CreateServiceResponse.


        :return: The service of this CreateServiceResponse.
        :rtype: CreateServiceResponseService
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this CreateServiceResponse.


        :param service: The service of this CreateServiceResponse.
        :type service: CreateServiceResponseService
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def operation_id(self):
        """Gets the operation_id of this CreateServiceResponse.


        :return: The operation_id of this CreateServiceResponse.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this CreateServiceResponse.


        :param operation_id: The operation_id of this CreateServiceResponse.
        :type operation_id: str
        """
        if operation_id is None:
            raise ValueError("Invalid value for `operation_id`, must not be `None`")

        self._operation_id = operation_id
