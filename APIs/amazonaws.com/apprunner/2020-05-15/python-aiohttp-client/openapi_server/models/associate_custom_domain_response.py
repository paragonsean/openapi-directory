# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associate_custom_domain_response_custom_domain import AssociateCustomDomainResponseCustomDomain
from openapi_server import util


class AssociateCustomDomainResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_target: str=None, service_arn: str=None, custom_domain: AssociateCustomDomainResponseCustomDomain=None, vpc_dns_targets: List=None):
        """AssociateCustomDomainResponse - a model defined in OpenAPI

        :param dns_target: The dns_target of this AssociateCustomDomainResponse.
        :param service_arn: The service_arn of this AssociateCustomDomainResponse.
        :param custom_domain: The custom_domain of this AssociateCustomDomainResponse.
        :param vpc_dns_targets: The vpc_dns_targets of this AssociateCustomDomainResponse.
        """
        self.openapi_types = {
            'dns_target': str,
            'service_arn': str,
            'custom_domain': AssociateCustomDomainResponseCustomDomain,
            'vpc_dns_targets': List
        }

        self.attribute_map = {
            'dns_target': 'DNSTarget',
            'service_arn': 'ServiceArn',
            'custom_domain': 'CustomDomain',
            'vpc_dns_targets': 'VpcDNSTargets'
        }

        self._dns_target = dns_target
        self._service_arn = service_arn
        self._custom_domain = custom_domain
        self._vpc_dns_targets = vpc_dns_targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateCustomDomainResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateCustomDomainResponse of this AssociateCustomDomainResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_target(self):
        """Gets the dns_target of this AssociateCustomDomainResponse.


        :return: The dns_target of this AssociateCustomDomainResponse.
        :rtype: str
        """
        return self._dns_target

    @dns_target.setter
    def dns_target(self, dns_target):
        """Sets the dns_target of this AssociateCustomDomainResponse.


        :param dns_target: The dns_target of this AssociateCustomDomainResponse.
        :type dns_target: str
        """
        if dns_target is None:
            raise ValueError("Invalid value for `dns_target`, must not be `None`")

        self._dns_target = dns_target

    @property
    def service_arn(self):
        """Gets the service_arn of this AssociateCustomDomainResponse.


        :return: The service_arn of this AssociateCustomDomainResponse.
        :rtype: str
        """
        return self._service_arn

    @service_arn.setter
    def service_arn(self, service_arn):
        """Sets the service_arn of this AssociateCustomDomainResponse.


        :param service_arn: The service_arn of this AssociateCustomDomainResponse.
        :type service_arn: str
        """
        if service_arn is None:
            raise ValueError("Invalid value for `service_arn`, must not be `None`")

        self._service_arn = service_arn

    @property
    def custom_domain(self):
        """Gets the custom_domain of this AssociateCustomDomainResponse.


        :return: The custom_domain of this AssociateCustomDomainResponse.
        :rtype: AssociateCustomDomainResponseCustomDomain
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """Sets the custom_domain of this AssociateCustomDomainResponse.


        :param custom_domain: The custom_domain of this AssociateCustomDomainResponse.
        :type custom_domain: AssociateCustomDomainResponseCustomDomain
        """
        if custom_domain is None:
            raise ValueError("Invalid value for `custom_domain`, must not be `None`")

        self._custom_domain = custom_domain

    @property
    def vpc_dns_targets(self):
        """Gets the vpc_dns_targets of this AssociateCustomDomainResponse.


        :return: The vpc_dns_targets of this AssociateCustomDomainResponse.
        :rtype: List
        """
        return self._vpc_dns_targets

    @vpc_dns_targets.setter
    def vpc_dns_targets(self, vpc_dns_targets):
        """Sets the vpc_dns_targets of this AssociateCustomDomainResponse.


        :param vpc_dns_targets: The vpc_dns_targets of this AssociateCustomDomainResponse.
        :type vpc_dns_targets: List
        """
        if vpc_dns_targets is None:
            raise ValueError("Invalid value for `vpc_dns_targets`, must not be `None`")

        self._vpc_dns_targets = vpc_dns_targets
