# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provider_type import ProviderType
from openapi_server import util


class CreateConnectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_name: str=None, provider_type: ProviderType=None, tags: List=None):
        """CreateConnectionRequest - a model defined in OpenAPI

        :param connection_name: The connection_name of this CreateConnectionRequest.
        :param provider_type: The provider_type of this CreateConnectionRequest.
        :param tags: The tags of this CreateConnectionRequest.
        """
        self.openapi_types = {
            'connection_name': str,
            'provider_type': ProviderType,
            'tags': List
        }

        self.attribute_map = {
            'connection_name': 'ConnectionName',
            'provider_type': 'ProviderType',
            'tags': 'Tags'
        }

        self._connection_name = connection_name
        self._provider_type = provider_type
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConnectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConnectionRequest of this CreateConnectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_name(self):
        """Gets the connection_name of this CreateConnectionRequest.


        :return: The connection_name of this CreateConnectionRequest.
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """Sets the connection_name of this CreateConnectionRequest.


        :param connection_name: The connection_name of this CreateConnectionRequest.
        :type connection_name: str
        """
        if connection_name is None:
            raise ValueError("Invalid value for `connection_name`, must not be `None`")

        self._connection_name = connection_name

    @property
    def provider_type(self):
        """Gets the provider_type of this CreateConnectionRequest.


        :return: The provider_type of this CreateConnectionRequest.
        :rtype: ProviderType
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this CreateConnectionRequest.


        :param provider_type: The provider_type of this CreateConnectionRequest.
        :type provider_type: ProviderType
        """
        if provider_type is None:
            raise ValueError("Invalid value for `provider_type`, must not be `None`")

        self._provider_type = provider_type

    @property
    def tags(self):
        """Gets the tags of this CreateConnectionRequest.


        :return: The tags of this CreateConnectionRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateConnectionRequest.


        :param tags: The tags of this CreateConnectionRequest.
        :type tags: List
        """

        self._tags = tags
