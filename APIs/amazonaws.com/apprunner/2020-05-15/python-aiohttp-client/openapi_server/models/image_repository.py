# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_repository_image_configuration import ImageRepositoryImageConfiguration
from openapi_server.models.image_repository_type import ImageRepositoryType
from openapi_server import util


class ImageRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_identifier: str=None, image_configuration: ImageRepositoryImageConfiguration=None, image_repository_type: ImageRepositoryType=None):
        """ImageRepository - a model defined in OpenAPI

        :param image_identifier: The image_identifier of this ImageRepository.
        :param image_configuration: The image_configuration of this ImageRepository.
        :param image_repository_type: The image_repository_type of this ImageRepository.
        """
        self.openapi_types = {
            'image_identifier': str,
            'image_configuration': ImageRepositoryImageConfiguration,
            'image_repository_type': ImageRepositoryType
        }

        self.attribute_map = {
            'image_identifier': 'ImageIdentifier',
            'image_configuration': 'ImageConfiguration',
            'image_repository_type': 'ImageRepositoryType'
        }

        self._image_identifier = image_identifier
        self._image_configuration = image_configuration
        self._image_repository_type = image_repository_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageRepository of this ImageRepository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_identifier(self):
        """Gets the image_identifier of this ImageRepository.


        :return: The image_identifier of this ImageRepository.
        :rtype: str
        """
        return self._image_identifier

    @image_identifier.setter
    def image_identifier(self, image_identifier):
        """Sets the image_identifier of this ImageRepository.


        :param image_identifier: The image_identifier of this ImageRepository.
        :type image_identifier: str
        """
        if image_identifier is None:
            raise ValueError("Invalid value for `image_identifier`, must not be `None`")

        self._image_identifier = image_identifier

    @property
    def image_configuration(self):
        """Gets the image_configuration of this ImageRepository.


        :return: The image_configuration of this ImageRepository.
        :rtype: ImageRepositoryImageConfiguration
        """
        return self._image_configuration

    @image_configuration.setter
    def image_configuration(self, image_configuration):
        """Sets the image_configuration of this ImageRepository.


        :param image_configuration: The image_configuration of this ImageRepository.
        :type image_configuration: ImageRepositoryImageConfiguration
        """

        self._image_configuration = image_configuration

    @property
    def image_repository_type(self):
        """Gets the image_repository_type of this ImageRepository.


        :return: The image_repository_type of this ImageRepository.
        :rtype: ImageRepositoryType
        """
        return self._image_repository_type

    @image_repository_type.setter
    def image_repository_type(self, image_repository_type):
        """Sets the image_repository_type of this ImageRepository.


        :param image_repository_type: The image_repository_type of this ImageRepository.
        :type image_repository_type: ImageRepositoryType
        """
        if image_repository_type is None:
            raise ValueError("Invalid value for `image_repository_type`, must not be `None`")

        self._image_repository_type = image_repository_type
