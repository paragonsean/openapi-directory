# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_repository_code_configuration import CodeRepositoryCodeConfiguration
from openapi_server.models.code_repository_source_code_version import CodeRepositorySourceCodeVersion
from openapi_server import util


class SourceConfigurationCodeRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_url: str=None, source_code_version: CodeRepositorySourceCodeVersion=None, code_configuration: CodeRepositoryCodeConfiguration=None):
        """SourceConfigurationCodeRepository - a model defined in OpenAPI

        :param repository_url: The repository_url of this SourceConfigurationCodeRepository.
        :param source_code_version: The source_code_version of this SourceConfigurationCodeRepository.
        :param code_configuration: The code_configuration of this SourceConfigurationCodeRepository.
        """
        self.openapi_types = {
            'repository_url': str,
            'source_code_version': CodeRepositorySourceCodeVersion,
            'code_configuration': CodeRepositoryCodeConfiguration
        }

        self.attribute_map = {
            'repository_url': 'RepositoryUrl',
            'source_code_version': 'SourceCodeVersion',
            'code_configuration': 'CodeConfiguration'
        }

        self._repository_url = repository_url
        self._source_code_version = source_code_version
        self._code_configuration = code_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceConfigurationCodeRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceConfiguration_CodeRepository of this SourceConfigurationCodeRepository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_url(self):
        """Gets the repository_url of this SourceConfigurationCodeRepository.


        :return: The repository_url of this SourceConfigurationCodeRepository.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this SourceConfigurationCodeRepository.


        :param repository_url: The repository_url of this SourceConfigurationCodeRepository.
        :type repository_url: str
        """
        if repository_url is None:
            raise ValueError("Invalid value for `repository_url`, must not be `None`")

        self._repository_url = repository_url

    @property
    def source_code_version(self):
        """Gets the source_code_version of this SourceConfigurationCodeRepository.


        :return: The source_code_version of this SourceConfigurationCodeRepository.
        :rtype: CodeRepositorySourceCodeVersion
        """
        return self._source_code_version

    @source_code_version.setter
    def source_code_version(self, source_code_version):
        """Sets the source_code_version of this SourceConfigurationCodeRepository.


        :param source_code_version: The source_code_version of this SourceConfigurationCodeRepository.
        :type source_code_version: CodeRepositorySourceCodeVersion
        """
        if source_code_version is None:
            raise ValueError("Invalid value for `source_code_version`, must not be `None`")

        self._source_code_version = source_code_version

    @property
    def code_configuration(self):
        """Gets the code_configuration of this SourceConfigurationCodeRepository.


        :return: The code_configuration of this SourceConfigurationCodeRepository.
        :rtype: CodeRepositoryCodeConfiguration
        """
        return self._code_configuration

    @code_configuration.setter
    def code_configuration(self, code_configuration):
        """Sets the code_configuration of this SourceConfigurationCodeRepository.


        :param code_configuration: The code_configuration of this SourceConfigurationCodeRepository.
        :type code_configuration: CodeRepositoryCodeConfiguration
        """

        self._code_configuration = code_configuration
