# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateVpcConnectorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vpc_connector_name: str=None, subnets: List=None, security_groups: List=None, tags: List=None):
        """CreateVpcConnectorRequest - a model defined in OpenAPI

        :param vpc_connector_name: The vpc_connector_name of this CreateVpcConnectorRequest.
        :param subnets: The subnets of this CreateVpcConnectorRequest.
        :param security_groups: The security_groups of this CreateVpcConnectorRequest.
        :param tags: The tags of this CreateVpcConnectorRequest.
        """
        self.openapi_types = {
            'vpc_connector_name': str,
            'subnets': List,
            'security_groups': List,
            'tags': List
        }

        self.attribute_map = {
            'vpc_connector_name': 'VpcConnectorName',
            'subnets': 'Subnets',
            'security_groups': 'SecurityGroups',
            'tags': 'Tags'
        }

        self._vpc_connector_name = vpc_connector_name
        self._subnets = subnets
        self._security_groups = security_groups
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVpcConnectorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVpcConnectorRequest of this CreateVpcConnectorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vpc_connector_name(self):
        """Gets the vpc_connector_name of this CreateVpcConnectorRequest.


        :return: The vpc_connector_name of this CreateVpcConnectorRequest.
        :rtype: str
        """
        return self._vpc_connector_name

    @vpc_connector_name.setter
    def vpc_connector_name(self, vpc_connector_name):
        """Sets the vpc_connector_name of this CreateVpcConnectorRequest.


        :param vpc_connector_name: The vpc_connector_name of this CreateVpcConnectorRequest.
        :type vpc_connector_name: str
        """
        if vpc_connector_name is None:
            raise ValueError("Invalid value for `vpc_connector_name`, must not be `None`")

        self._vpc_connector_name = vpc_connector_name

    @property
    def subnets(self):
        """Gets the subnets of this CreateVpcConnectorRequest.


        :return: The subnets of this CreateVpcConnectorRequest.
        :rtype: List
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this CreateVpcConnectorRequest.


        :param subnets: The subnets of this CreateVpcConnectorRequest.
        :type subnets: List
        """
        if subnets is None:
            raise ValueError("Invalid value for `subnets`, must not be `None`")

        self._subnets = subnets

    @property
    def security_groups(self):
        """Gets the security_groups of this CreateVpcConnectorRequest.


        :return: The security_groups of this CreateVpcConnectorRequest.
        :rtype: List
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this CreateVpcConnectorRequest.


        :param security_groups: The security_groups of this CreateVpcConnectorRequest.
        :type security_groups: List
        """

        self._security_groups = security_groups

    @property
    def tags(self):
        """Gets the tags of this CreateVpcConnectorRequest.


        :return: The tags of this CreateVpcConnectorRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateVpcConnectorRequest.


        :param tags: The tags of this CreateVpcConnectorRequest.
        :type tags: List
        """

        self._tags = tags
