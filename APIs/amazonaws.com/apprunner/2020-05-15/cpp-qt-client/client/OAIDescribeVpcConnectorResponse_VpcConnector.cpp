/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeVpcConnectorResponse_VpcConnector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeVpcConnectorResponse_VpcConnector::OAIDescribeVpcConnectorResponse_VpcConnector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeVpcConnectorResponse_VpcConnector::OAIDescribeVpcConnectorResponse_VpcConnector() {
    this->initializeModel();
}

OAIDescribeVpcConnectorResponse_VpcConnector::~OAIDescribeVpcConnectorResponse_VpcConnector() {}

void OAIDescribeVpcConnectorResponse_VpcConnector::initializeModel() {

    m_vpc_connector_name_isSet = false;
    m_vpc_connector_name_isValid = false;

    m_vpc_connector_arn_isSet = false;
    m_vpc_connector_arn_isValid = false;

    m_vpc_connector_revision_isSet = false;
    m_vpc_connector_revision_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;
}

void OAIDescribeVpcConnectorResponse_VpcConnector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeVpcConnectorResponse_VpcConnector::fromJsonObject(QJsonObject json) {

    m_vpc_connector_name_isValid = ::OpenAPI::fromJsonValue(m_vpc_connector_name, json[QString("VpcConnectorName")]);
    m_vpc_connector_name_isSet = !json[QString("VpcConnectorName")].isNull() && m_vpc_connector_name_isValid;

    m_vpc_connector_arn_isValid = ::OpenAPI::fromJsonValue(m_vpc_connector_arn, json[QString("VpcConnectorArn")]);
    m_vpc_connector_arn_isSet = !json[QString("VpcConnectorArn")].isNull() && m_vpc_connector_arn_isValid;

    m_vpc_connector_revision_isValid = ::OpenAPI::fromJsonValue(m_vpc_connector_revision, json[QString("VpcConnectorRevision")]);
    m_vpc_connector_revision_isSet = !json[QString("VpcConnectorRevision")].isNull() && m_vpc_connector_revision_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("Subnets")]);
    m_subnets_isSet = !json[QString("Subnets")].isNull() && m_subnets_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("DeletedAt")]);
    m_deleted_at_isSet = !json[QString("DeletedAt")].isNull() && m_deleted_at_isValid;
}

QString OAIDescribeVpcConnectorResponse_VpcConnector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeVpcConnectorResponse_VpcConnector::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_connector_name_isSet) {
        obj.insert(QString("VpcConnectorName"), ::OpenAPI::toJsonValue(m_vpc_connector_name));
    }
    if (m_vpc_connector_arn_isSet) {
        obj.insert(QString("VpcConnectorArn"), ::OpenAPI::toJsonValue(m_vpc_connector_arn));
    }
    if (m_vpc_connector_revision_isSet) {
        obj.insert(QString("VpcConnectorRevision"), ::OpenAPI::toJsonValue(m_vpc_connector_revision));
    }
    if (m_subnets.isSet()) {
        obj.insert(QString("Subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("DeletedAt"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    return obj;
}

QString OAIDescribeVpcConnectorResponse_VpcConnector::getVpcConnectorName() const {
    return m_vpc_connector_name;
}
void OAIDescribeVpcConnectorResponse_VpcConnector::setVpcConnectorName(const QString &vpc_connector_name) {
    m_vpc_connector_name = vpc_connector_name;
    m_vpc_connector_name_isSet = true;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_vpc_connector_name_Set() const{
    return m_vpc_connector_name_isSet;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_vpc_connector_name_Valid() const{
    return m_vpc_connector_name_isValid;
}

QString OAIDescribeVpcConnectorResponse_VpcConnector::getVpcConnectorArn() const {
    return m_vpc_connector_arn;
}
void OAIDescribeVpcConnectorResponse_VpcConnector::setVpcConnectorArn(const QString &vpc_connector_arn) {
    m_vpc_connector_arn = vpc_connector_arn;
    m_vpc_connector_arn_isSet = true;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_vpc_connector_arn_Set() const{
    return m_vpc_connector_arn_isSet;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_vpc_connector_arn_Valid() const{
    return m_vpc_connector_arn_isValid;
}

qint32 OAIDescribeVpcConnectorResponse_VpcConnector::getVpcConnectorRevision() const {
    return m_vpc_connector_revision;
}
void OAIDescribeVpcConnectorResponse_VpcConnector::setVpcConnectorRevision(const qint32 &vpc_connector_revision) {
    m_vpc_connector_revision = vpc_connector_revision;
    m_vpc_connector_revision_isSet = true;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_vpc_connector_revision_Set() const{
    return m_vpc_connector_revision_isSet;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_vpc_connector_revision_Valid() const{
    return m_vpc_connector_revision_isValid;
}

QList OAIDescribeVpcConnectorResponse_VpcConnector::getSubnets() const {
    return m_subnets;
}
void OAIDescribeVpcConnectorResponse_VpcConnector::setSubnets(const QList &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_subnets_Valid() const{
    return m_subnets_isValid;
}

QList OAIDescribeVpcConnectorResponse_VpcConnector::getSecurityGroups() const {
    return m_security_groups;
}
void OAIDescribeVpcConnectorResponse_VpcConnector::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

OAIVpcConnectorStatus OAIDescribeVpcConnectorResponse_VpcConnector::getStatus() const {
    return m_status;
}
void OAIDescribeVpcConnectorResponse_VpcConnector::setStatus(const OAIVpcConnectorStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeVpcConnectorResponse_VpcConnector::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeVpcConnectorResponse_VpcConnector::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIDescribeVpcConnectorResponse_VpcConnector::getDeletedAt() const {
    return m_deleted_at;
}
void OAIDescribeVpcConnectorResponse_VpcConnector::setDeletedAt(const QDateTime &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_connector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connector_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connector_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeVpcConnectorResponse_VpcConnector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
