/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListVpcIngressConnectionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListVpcIngressConnectionsRequest::OAIListVpcIngressConnectionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListVpcIngressConnectionsRequest::OAIListVpcIngressConnectionsRequest() {
    this->initializeModel();
}

OAIListVpcIngressConnectionsRequest::~OAIListVpcIngressConnectionsRequest() {}

void OAIListVpcIngressConnectionsRequest::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListVpcIngressConnectionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListVpcIngressConnectionsRequest::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListVpcIngressConnectionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListVpcIngressConnectionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

OAIListVpcIngressConnectionsRequest_Filter OAIListVpcIngressConnectionsRequest::getFilter() const {
    return m_filter;
}
void OAIListVpcIngressConnectionsRequest::setFilter(const OAIListVpcIngressConnectionsRequest_Filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIListVpcIngressConnectionsRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIListVpcIngressConnectionsRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAIListVpcIngressConnectionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListVpcIngressConnectionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListVpcIngressConnectionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListVpcIngressConnectionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListVpcIngressConnectionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListVpcIngressConnectionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListVpcIngressConnectionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListVpcIngressConnectionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListVpcIngressConnectionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListVpcIngressConnectionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
