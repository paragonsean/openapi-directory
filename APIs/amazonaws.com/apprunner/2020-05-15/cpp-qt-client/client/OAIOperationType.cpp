/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationType::OAIOperationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationType::OAIOperationType() {
    this->initializeModel();
}

OAIOperationType::~OAIOperationType() {}

void OAIOperationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOperationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOperationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("START_DEPLOYMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::START_DEPLOYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATE_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::CREATE_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAUSE_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::PAUSE_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESUME_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::RESUME_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETE_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::DELETE_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATE_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::UPDATE_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOperationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOperationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOperationType::START_DEPLOYMENT:
            val = "START_DEPLOYMENT";
            break;
        case eOAIOperationType::CREATE_SERVICE:
            val = "CREATE_SERVICE";
            break;
        case eOAIOperationType::PAUSE_SERVICE:
            val = "PAUSE_SERVICE";
            break;
        case eOAIOperationType::RESUME_SERVICE:
            val = "RESUME_SERVICE";
            break;
        case eOAIOperationType::DELETE_SERVICE:
            val = "DELETE_SERVICE";
            break;
        case eOAIOperationType::UPDATE_SERVICE:
            val = "UPDATE_SERVICE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOperationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOperationType::eOAIOperationType OAIOperationType::getValue() const {
    return m_value;
}

void OAIOperationType::setValue(const OAIOperationType::eOAIOperationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOperationType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOperationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
