/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServiceRequest_SourceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServiceRequest_SourceConfiguration::OAIUpdateServiceRequest_SourceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServiceRequest_SourceConfiguration::OAIUpdateServiceRequest_SourceConfiguration() {
    this->initializeModel();
}

OAIUpdateServiceRequest_SourceConfiguration::~OAIUpdateServiceRequest_SourceConfiguration() {}

void OAIUpdateServiceRequest_SourceConfiguration::initializeModel() {

    m_code_repository_isSet = false;
    m_code_repository_isValid = false;

    m_image_repository_isSet = false;
    m_image_repository_isValid = false;

    m_auto_deployments_enabled_isSet = false;
    m_auto_deployments_enabled_isValid = false;

    m_authentication_configuration_isSet = false;
    m_authentication_configuration_isValid = false;
}

void OAIUpdateServiceRequest_SourceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServiceRequest_SourceConfiguration::fromJsonObject(QJsonObject json) {

    m_code_repository_isValid = ::OpenAPI::fromJsonValue(m_code_repository, json[QString("CodeRepository")]);
    m_code_repository_isSet = !json[QString("CodeRepository")].isNull() && m_code_repository_isValid;

    m_image_repository_isValid = ::OpenAPI::fromJsonValue(m_image_repository, json[QString("ImageRepository")]);
    m_image_repository_isSet = !json[QString("ImageRepository")].isNull() && m_image_repository_isValid;

    m_auto_deployments_enabled_isValid = ::OpenAPI::fromJsonValue(m_auto_deployments_enabled, json[QString("AutoDeploymentsEnabled")]);
    m_auto_deployments_enabled_isSet = !json[QString("AutoDeploymentsEnabled")].isNull() && m_auto_deployments_enabled_isValid;

    m_authentication_configuration_isValid = ::OpenAPI::fromJsonValue(m_authentication_configuration, json[QString("AuthenticationConfiguration")]);
    m_authentication_configuration_isSet = !json[QString("AuthenticationConfiguration")].isNull() && m_authentication_configuration_isValid;
}

QString OAIUpdateServiceRequest_SourceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServiceRequest_SourceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_code_repository.isSet()) {
        obj.insert(QString("CodeRepository"), ::OpenAPI::toJsonValue(m_code_repository));
    }
    if (m_image_repository.isSet()) {
        obj.insert(QString("ImageRepository"), ::OpenAPI::toJsonValue(m_image_repository));
    }
    if (m_auto_deployments_enabled_isSet) {
        obj.insert(QString("AutoDeploymentsEnabled"), ::OpenAPI::toJsonValue(m_auto_deployments_enabled));
    }
    if (m_authentication_configuration.isSet()) {
        obj.insert(QString("AuthenticationConfiguration"), ::OpenAPI::toJsonValue(m_authentication_configuration));
    }
    return obj;
}

OAISourceConfiguration_CodeRepository OAIUpdateServiceRequest_SourceConfiguration::getCodeRepository() const {
    return m_code_repository;
}
void OAIUpdateServiceRequest_SourceConfiguration::setCodeRepository(const OAISourceConfiguration_CodeRepository &code_repository) {
    m_code_repository = code_repository;
    m_code_repository_isSet = true;
}

bool OAIUpdateServiceRequest_SourceConfiguration::is_code_repository_Set() const{
    return m_code_repository_isSet;
}

bool OAIUpdateServiceRequest_SourceConfiguration::is_code_repository_Valid() const{
    return m_code_repository_isValid;
}

OAISourceConfiguration_ImageRepository OAIUpdateServiceRequest_SourceConfiguration::getImageRepository() const {
    return m_image_repository;
}
void OAIUpdateServiceRequest_SourceConfiguration::setImageRepository(const OAISourceConfiguration_ImageRepository &image_repository) {
    m_image_repository = image_repository;
    m_image_repository_isSet = true;
}

bool OAIUpdateServiceRequest_SourceConfiguration::is_image_repository_Set() const{
    return m_image_repository_isSet;
}

bool OAIUpdateServiceRequest_SourceConfiguration::is_image_repository_Valid() const{
    return m_image_repository_isValid;
}

bool OAIUpdateServiceRequest_SourceConfiguration::getAutoDeploymentsEnabled() const {
    return m_auto_deployments_enabled;
}
void OAIUpdateServiceRequest_SourceConfiguration::setAutoDeploymentsEnabled(const bool &auto_deployments_enabled) {
    m_auto_deployments_enabled = auto_deployments_enabled;
    m_auto_deployments_enabled_isSet = true;
}

bool OAIUpdateServiceRequest_SourceConfiguration::is_auto_deployments_enabled_Set() const{
    return m_auto_deployments_enabled_isSet;
}

bool OAIUpdateServiceRequest_SourceConfiguration::is_auto_deployments_enabled_Valid() const{
    return m_auto_deployments_enabled_isValid;
}

OAISourceConfiguration_AuthenticationConfiguration OAIUpdateServiceRequest_SourceConfiguration::getAuthenticationConfiguration() const {
    return m_authentication_configuration;
}
void OAIUpdateServiceRequest_SourceConfiguration::setAuthenticationConfiguration(const OAISourceConfiguration_AuthenticationConfiguration &authentication_configuration) {
    m_authentication_configuration = authentication_configuration;
    m_authentication_configuration_isSet = true;
}

bool OAIUpdateServiceRequest_SourceConfiguration::is_authentication_configuration_Set() const{
    return m_authentication_configuration_isSet;
}

bool OAIUpdateServiceRequest_SourceConfiguration::is_authentication_configuration_Valid() const{
    return m_authentication_configuration_isValid;
}

bool OAIUpdateServiceRequest_SourceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_deployments_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServiceRequest_SourceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
