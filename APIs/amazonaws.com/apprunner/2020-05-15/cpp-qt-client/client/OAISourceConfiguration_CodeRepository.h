/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISourceConfiguration_CodeRepository.h
 *
 * 
 */

#ifndef OAISourceConfiguration_CodeRepository_H
#define OAISourceConfiguration_CodeRepository_H

#include <QJsonObject>

#include "OAICodeRepository_CodeConfiguration.h"
#include "OAICodeRepository_SourceCodeVersion.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICodeRepository_SourceCodeVersion;
class OAICodeRepository_CodeConfiguration;

class OAISourceConfiguration_CodeRepository : public OAIObject {
public:
    OAISourceConfiguration_CodeRepository();
    OAISourceConfiguration_CodeRepository(QString json);
    ~OAISourceConfiguration_CodeRepository() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRepositoryUrl() const;
    void setRepositoryUrl(const QString &repository_url);
    bool is_repository_url_Set() const;
    bool is_repository_url_Valid() const;

    OAICodeRepository_SourceCodeVersion getSourceCodeVersion() const;
    void setSourceCodeVersion(const OAICodeRepository_SourceCodeVersion &source_code_version);
    bool is_source_code_version_Set() const;
    bool is_source_code_version_Valid() const;

    OAICodeRepository_CodeConfiguration getCodeConfiguration() const;
    void setCodeConfiguration(const OAICodeRepository_CodeConfiguration &code_configuration);
    bool is_code_configuration_Set() const;
    bool is_code_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_repository_url;
    bool m_repository_url_isSet;
    bool m_repository_url_isValid;

    OAICodeRepository_SourceCodeVersion m_source_code_version;
    bool m_source_code_version_isSet;
    bool m_source_code_version_isValid;

    OAICodeRepository_CodeConfiguration m_code_configuration;
    bool m_code_configuration_isSet;
    bool m_code_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISourceConfiguration_CodeRepository)

#endif // OAISourceConfiguration_CodeRepository_H
