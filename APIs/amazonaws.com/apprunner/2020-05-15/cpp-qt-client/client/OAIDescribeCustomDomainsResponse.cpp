/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeCustomDomainsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeCustomDomainsResponse::OAIDescribeCustomDomainsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeCustomDomainsResponse::OAIDescribeCustomDomainsResponse() {
    this->initializeModel();
}

OAIDescribeCustomDomainsResponse::~OAIDescribeCustomDomainsResponse() {}

void OAIDescribeCustomDomainsResponse::initializeModel() {

    m_dns_target_isSet = false;
    m_dns_target_isValid = false;

    m_service_arn_isSet = false;
    m_service_arn_isValid = false;

    m_custom_domains_isSet = false;
    m_custom_domains_isValid = false;

    m_vpc_dns_targets_isSet = false;
    m_vpc_dns_targets_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeCustomDomainsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeCustomDomainsResponse::fromJsonObject(QJsonObject json) {

    m_dns_target_isValid = ::OpenAPI::fromJsonValue(m_dns_target, json[QString("DNSTarget")]);
    m_dns_target_isSet = !json[QString("DNSTarget")].isNull() && m_dns_target_isValid;

    m_service_arn_isValid = ::OpenAPI::fromJsonValue(m_service_arn, json[QString("ServiceArn")]);
    m_service_arn_isSet = !json[QString("ServiceArn")].isNull() && m_service_arn_isValid;

    m_custom_domains_isValid = ::OpenAPI::fromJsonValue(m_custom_domains, json[QString("CustomDomains")]);
    m_custom_domains_isSet = !json[QString("CustomDomains")].isNull() && m_custom_domains_isValid;

    m_vpc_dns_targets_isValid = ::OpenAPI::fromJsonValue(m_vpc_dns_targets, json[QString("VpcDNSTargets")]);
    m_vpc_dns_targets_isSet = !json[QString("VpcDNSTargets")].isNull() && m_vpc_dns_targets_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeCustomDomainsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeCustomDomainsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_target_isSet) {
        obj.insert(QString("DNSTarget"), ::OpenAPI::toJsonValue(m_dns_target));
    }
    if (m_service_arn_isSet) {
        obj.insert(QString("ServiceArn"), ::OpenAPI::toJsonValue(m_service_arn));
    }
    if (m_custom_domains.isSet()) {
        obj.insert(QString("CustomDomains"), ::OpenAPI::toJsonValue(m_custom_domains));
    }
    if (m_vpc_dns_targets.isSet()) {
        obj.insert(QString("VpcDNSTargets"), ::OpenAPI::toJsonValue(m_vpc_dns_targets));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIDescribeCustomDomainsResponse::getDnsTarget() const {
    return m_dns_target;
}
void OAIDescribeCustomDomainsResponse::setDnsTarget(const QString &dns_target) {
    m_dns_target = dns_target;
    m_dns_target_isSet = true;
}

bool OAIDescribeCustomDomainsResponse::is_dns_target_Set() const{
    return m_dns_target_isSet;
}

bool OAIDescribeCustomDomainsResponse::is_dns_target_Valid() const{
    return m_dns_target_isValid;
}

QString OAIDescribeCustomDomainsResponse::getServiceArn() const {
    return m_service_arn;
}
void OAIDescribeCustomDomainsResponse::setServiceArn(const QString &service_arn) {
    m_service_arn = service_arn;
    m_service_arn_isSet = true;
}

bool OAIDescribeCustomDomainsResponse::is_service_arn_Set() const{
    return m_service_arn_isSet;
}

bool OAIDescribeCustomDomainsResponse::is_service_arn_Valid() const{
    return m_service_arn_isValid;
}

QList OAIDescribeCustomDomainsResponse::getCustomDomains() const {
    return m_custom_domains;
}
void OAIDescribeCustomDomainsResponse::setCustomDomains(const QList &custom_domains) {
    m_custom_domains = custom_domains;
    m_custom_domains_isSet = true;
}

bool OAIDescribeCustomDomainsResponse::is_custom_domains_Set() const{
    return m_custom_domains_isSet;
}

bool OAIDescribeCustomDomainsResponse::is_custom_domains_Valid() const{
    return m_custom_domains_isValid;
}

QList OAIDescribeCustomDomainsResponse::getVpcDnsTargets() const {
    return m_vpc_dns_targets;
}
void OAIDescribeCustomDomainsResponse::setVpcDnsTargets(const QList &vpc_dns_targets) {
    m_vpc_dns_targets = vpc_dns_targets;
    m_vpc_dns_targets_isSet = true;
}

bool OAIDescribeCustomDomainsResponse::is_vpc_dns_targets_Set() const{
    return m_vpc_dns_targets_isSet;
}

bool OAIDescribeCustomDomainsResponse::is_vpc_dns_targets_Valid() const{
    return m_vpc_dns_targets_isValid;
}

QString OAIDescribeCustomDomainsResponse::getNextToken() const {
    return m_next_token;
}
void OAIDescribeCustomDomainsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeCustomDomainsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeCustomDomainsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeCustomDomainsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domains.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_dns_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeCustomDomainsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dns_target_isValid && m_service_arn_isValid && m_custom_domains_isValid && m_vpc_dns_targets_isValid && true;
}

} // namespace OpenAPI
