/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration() {
    this->initializeModel();
}

OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::~OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration() {}

void OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::initializeModel() {

    m_observability_configuration_arn_isSet = false;
    m_observability_configuration_arn_isValid = false;

    m_observability_configuration_name_isSet = false;
    m_observability_configuration_name_isValid = false;

    m_trace_configuration_isSet = false;
    m_trace_configuration_isValid = false;

    m_observability_configuration_revision_isSet = false;
    m_observability_configuration_revision_isValid = false;

    m_latest_isSet = false;
    m_latest_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;
}

void OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::fromJsonObject(QJsonObject json) {

    m_observability_configuration_arn_isValid = ::OpenAPI::fromJsonValue(m_observability_configuration_arn, json[QString("ObservabilityConfigurationArn")]);
    m_observability_configuration_arn_isSet = !json[QString("ObservabilityConfigurationArn")].isNull() && m_observability_configuration_arn_isValid;

    m_observability_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_observability_configuration_name, json[QString("ObservabilityConfigurationName")]);
    m_observability_configuration_name_isSet = !json[QString("ObservabilityConfigurationName")].isNull() && m_observability_configuration_name_isValid;

    m_trace_configuration_isValid = ::OpenAPI::fromJsonValue(m_trace_configuration, json[QString("TraceConfiguration")]);
    m_trace_configuration_isSet = !json[QString("TraceConfiguration")].isNull() && m_trace_configuration_isValid;

    m_observability_configuration_revision_isValid = ::OpenAPI::fromJsonValue(m_observability_configuration_revision, json[QString("ObservabilityConfigurationRevision")]);
    m_observability_configuration_revision_isSet = !json[QString("ObservabilityConfigurationRevision")].isNull() && m_observability_configuration_revision_isValid;

    m_latest_isValid = ::OpenAPI::fromJsonValue(m_latest, json[QString("Latest")]);
    m_latest_isSet = !json[QString("Latest")].isNull() && m_latest_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("DeletedAt")]);
    m_deleted_at_isSet = !json[QString("DeletedAt")].isNull() && m_deleted_at_isValid;
}

QString OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_observability_configuration_arn_isSet) {
        obj.insert(QString("ObservabilityConfigurationArn"), ::OpenAPI::toJsonValue(m_observability_configuration_arn));
    }
    if (m_observability_configuration_name_isSet) {
        obj.insert(QString("ObservabilityConfigurationName"), ::OpenAPI::toJsonValue(m_observability_configuration_name));
    }
    if (m_trace_configuration.isSet()) {
        obj.insert(QString("TraceConfiguration"), ::OpenAPI::toJsonValue(m_trace_configuration));
    }
    if (m_observability_configuration_revision_isSet) {
        obj.insert(QString("ObservabilityConfigurationRevision"), ::OpenAPI::toJsonValue(m_observability_configuration_revision));
    }
    if (m_latest_isSet) {
        obj.insert(QString("Latest"), ::OpenAPI::toJsonValue(m_latest));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("DeletedAt"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    return obj;
}

QString OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::getObservabilityConfigurationArn() const {
    return m_observability_configuration_arn;
}
void OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::setObservabilityConfigurationArn(const QString &observability_configuration_arn) {
    m_observability_configuration_arn = observability_configuration_arn;
    m_observability_configuration_arn_isSet = true;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_observability_configuration_arn_Set() const{
    return m_observability_configuration_arn_isSet;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_observability_configuration_arn_Valid() const{
    return m_observability_configuration_arn_isValid;
}

QString OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::getObservabilityConfigurationName() const {
    return m_observability_configuration_name;
}
void OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::setObservabilityConfigurationName(const QString &observability_configuration_name) {
    m_observability_configuration_name = observability_configuration_name;
    m_observability_configuration_name_isSet = true;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_observability_configuration_name_Set() const{
    return m_observability_configuration_name_isSet;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_observability_configuration_name_Valid() const{
    return m_observability_configuration_name_isValid;
}

OAIObservabilityConfiguration_TraceConfiguration OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::getTraceConfiguration() const {
    return m_trace_configuration;
}
void OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::setTraceConfiguration(const OAIObservabilityConfiguration_TraceConfiguration &trace_configuration) {
    m_trace_configuration = trace_configuration;
    m_trace_configuration_isSet = true;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_trace_configuration_Set() const{
    return m_trace_configuration_isSet;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_trace_configuration_Valid() const{
    return m_trace_configuration_isValid;
}

qint32 OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::getObservabilityConfigurationRevision() const {
    return m_observability_configuration_revision;
}
void OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::setObservabilityConfigurationRevision(const qint32 &observability_configuration_revision) {
    m_observability_configuration_revision = observability_configuration_revision;
    m_observability_configuration_revision_isSet = true;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_observability_configuration_revision_Set() const{
    return m_observability_configuration_revision_isSet;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_observability_configuration_revision_Valid() const{
    return m_observability_configuration_revision_isValid;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::getLatest() const {
    return m_latest;
}
void OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::setLatest(const bool &latest) {
    m_latest = latest;
    m_latest_isSet = true;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_latest_Set() const{
    return m_latest_isSet;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_latest_Valid() const{
    return m_latest_isValid;
}

OAIObservabilityConfigurationStatus OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::getStatus() const {
    return m_status;
}
void OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::setStatus(const OAIObservabilityConfigurationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::getCreatedAt() const {
    return m_created_at;
}
void OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::getDeletedAt() const {
    return m_deleted_at;
}
void OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::setDeletedAt(const QDateTime &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_observability_configuration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observability_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_observability_configuration_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteObservabilityConfigurationResponse_ObservabilityConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
