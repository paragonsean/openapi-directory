/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateObservabilityConfigurationRequest.h
 *
 * 
 */

#ifndef OAICreateObservabilityConfigurationRequest_H
#define OAICreateObservabilityConfigurationRequest_H

#include <QJsonObject>

#include "OAICreateObservabilityConfigurationRequest_TraceConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateObservabilityConfigurationRequest_TraceConfiguration;

class OAICreateObservabilityConfigurationRequest : public OAIObject {
public:
    OAICreateObservabilityConfigurationRequest();
    OAICreateObservabilityConfigurationRequest(QString json);
    ~OAICreateObservabilityConfigurationRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getObservabilityConfigurationName() const;
    void setObservabilityConfigurationName(const QString &observability_configuration_name);
    bool is_observability_configuration_name_Set() const;
    bool is_observability_configuration_name_Valid() const;

    OAICreateObservabilityConfigurationRequest_TraceConfiguration getTraceConfiguration() const;
    void setTraceConfiguration(const OAICreateObservabilityConfigurationRequest_TraceConfiguration &trace_configuration);
    bool is_trace_configuration_Set() const;
    bool is_trace_configuration_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_observability_configuration_name;
    bool m_observability_configuration_name_isSet;
    bool m_observability_configuration_name_isValid;

    OAICreateObservabilityConfigurationRequest_TraceConfiguration m_trace_configuration;
    bool m_trace_configuration_isSet;
    bool m_trace_configuration_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateObservabilityConfigurationRequest)

#endif // OAICreateObservabilityConfigurationRequest_H
