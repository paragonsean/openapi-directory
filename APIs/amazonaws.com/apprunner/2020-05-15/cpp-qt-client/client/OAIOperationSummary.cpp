/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationSummary::OAIOperationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationSummary::OAIOperationSummary() {
    this->initializeModel();
}

OAIOperationSummary::~OAIOperationSummary() {}

void OAIOperationSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_arn_isSet = false;
    m_target_arn_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIOperationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_target_arn_isValid = ::OpenAPI::fromJsonValue(m_target_arn, json[QString("TargetArn")]);
    m_target_arn_isSet = !json[QString("TargetArn")].isNull() && m_target_arn_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("StartedAt")]);
    m_started_at_isSet = !json[QString("StartedAt")].isNull() && m_started_at_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("EndedAt")]);
    m_ended_at_isSet = !json[QString("EndedAt")].isNull() && m_ended_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIOperationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_arn_isSet) {
        obj.insert(QString("TargetArn"), ::OpenAPI::toJsonValue(m_target_arn));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("StartedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("EndedAt"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIOperationSummary::getId() const {
    return m_id;
}
void OAIOperationSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOperationSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOperationSummary::is_id_Valid() const{
    return m_id_isValid;
}

OAIOperationType OAIOperationSummary::getType() const {
    return m_type;
}
void OAIOperationSummary::setType(const OAIOperationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOperationSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOperationSummary::is_type_Valid() const{
    return m_type_isValid;
}

OAIOperationStatus OAIOperationSummary::getStatus() const {
    return m_status;
}
void OAIOperationSummary::setStatus(const OAIOperationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOperationSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOperationSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOperationSummary::getTargetArn() const {
    return m_target_arn;
}
void OAIOperationSummary::setTargetArn(const QString &target_arn) {
    m_target_arn = target_arn;
    m_target_arn_isSet = true;
}

bool OAIOperationSummary::is_target_arn_Set() const{
    return m_target_arn_isSet;
}

bool OAIOperationSummary::is_target_arn_Valid() const{
    return m_target_arn_isValid;
}

QDateTime OAIOperationSummary::getStartedAt() const {
    return m_started_at;
}
void OAIOperationSummary::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIOperationSummary::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIOperationSummary::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QDateTime OAIOperationSummary::getEndedAt() const {
    return m_ended_at;
}
void OAIOperationSummary::setEndedAt(const QDateTime &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAIOperationSummary::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAIOperationSummary::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QDateTime OAIOperationSummary::getUpdatedAt() const {
    return m_updated_at;
}
void OAIOperationSummary::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIOperationSummary::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIOperationSummary::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIOperationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
