/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoScalingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoScalingConfiguration::OAIAutoScalingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoScalingConfiguration::OAIAutoScalingConfiguration() {
    this->initializeModel();
}

OAIAutoScalingConfiguration::~OAIAutoScalingConfiguration() {}

void OAIAutoScalingConfiguration::initializeModel() {

    m_auto_scaling_configuration_arn_isSet = false;
    m_auto_scaling_configuration_arn_isValid = false;

    m_auto_scaling_configuration_name_isSet = false;
    m_auto_scaling_configuration_name_isValid = false;

    m_auto_scaling_configuration_revision_isSet = false;
    m_auto_scaling_configuration_revision_isValid = false;

    m_latest_isSet = false;
    m_latest_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_max_concurrency_isSet = false;
    m_max_concurrency_isValid = false;

    m_min_size_isSet = false;
    m_min_size_isValid = false;

    m_max_size_isSet = false;
    m_max_size_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;
}

void OAIAutoScalingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoScalingConfiguration::fromJsonObject(QJsonObject json) {

    m_auto_scaling_configuration_arn_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_configuration_arn, json[QString("AutoScalingConfigurationArn")]);
    m_auto_scaling_configuration_arn_isSet = !json[QString("AutoScalingConfigurationArn")].isNull() && m_auto_scaling_configuration_arn_isValid;

    m_auto_scaling_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_configuration_name, json[QString("AutoScalingConfigurationName")]);
    m_auto_scaling_configuration_name_isSet = !json[QString("AutoScalingConfigurationName")].isNull() && m_auto_scaling_configuration_name_isValid;

    m_auto_scaling_configuration_revision_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_configuration_revision, json[QString("AutoScalingConfigurationRevision")]);
    m_auto_scaling_configuration_revision_isSet = !json[QString("AutoScalingConfigurationRevision")].isNull() && m_auto_scaling_configuration_revision_isValid;

    m_latest_isValid = ::OpenAPI::fromJsonValue(m_latest, json[QString("Latest")]);
    m_latest_isSet = !json[QString("Latest")].isNull() && m_latest_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_max_concurrency_isValid = ::OpenAPI::fromJsonValue(m_max_concurrency, json[QString("MaxConcurrency")]);
    m_max_concurrency_isSet = !json[QString("MaxConcurrency")].isNull() && m_max_concurrency_isValid;

    m_min_size_isValid = ::OpenAPI::fromJsonValue(m_min_size, json[QString("MinSize")]);
    m_min_size_isSet = !json[QString("MinSize")].isNull() && m_min_size_isValid;

    m_max_size_isValid = ::OpenAPI::fromJsonValue(m_max_size, json[QString("MaxSize")]);
    m_max_size_isSet = !json[QString("MaxSize")].isNull() && m_max_size_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("DeletedAt")]);
    m_deleted_at_isSet = !json[QString("DeletedAt")].isNull() && m_deleted_at_isValid;
}

QString OAIAutoScalingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoScalingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_scaling_configuration_arn_isSet) {
        obj.insert(QString("AutoScalingConfigurationArn"), ::OpenAPI::toJsonValue(m_auto_scaling_configuration_arn));
    }
    if (m_auto_scaling_configuration_name_isSet) {
        obj.insert(QString("AutoScalingConfigurationName"), ::OpenAPI::toJsonValue(m_auto_scaling_configuration_name));
    }
    if (m_auto_scaling_configuration_revision_isSet) {
        obj.insert(QString("AutoScalingConfigurationRevision"), ::OpenAPI::toJsonValue(m_auto_scaling_configuration_revision));
    }
    if (m_latest_isSet) {
        obj.insert(QString("Latest"), ::OpenAPI::toJsonValue(m_latest));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_max_concurrency_isSet) {
        obj.insert(QString("MaxConcurrency"), ::OpenAPI::toJsonValue(m_max_concurrency));
    }
    if (m_min_size_isSet) {
        obj.insert(QString("MinSize"), ::OpenAPI::toJsonValue(m_min_size));
    }
    if (m_max_size_isSet) {
        obj.insert(QString("MaxSize"), ::OpenAPI::toJsonValue(m_max_size));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("DeletedAt"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    return obj;
}

QString OAIAutoScalingConfiguration::getAutoScalingConfigurationArn() const {
    return m_auto_scaling_configuration_arn;
}
void OAIAutoScalingConfiguration::setAutoScalingConfigurationArn(const QString &auto_scaling_configuration_arn) {
    m_auto_scaling_configuration_arn = auto_scaling_configuration_arn;
    m_auto_scaling_configuration_arn_isSet = true;
}

bool OAIAutoScalingConfiguration::is_auto_scaling_configuration_arn_Set() const{
    return m_auto_scaling_configuration_arn_isSet;
}

bool OAIAutoScalingConfiguration::is_auto_scaling_configuration_arn_Valid() const{
    return m_auto_scaling_configuration_arn_isValid;
}

QString OAIAutoScalingConfiguration::getAutoScalingConfigurationName() const {
    return m_auto_scaling_configuration_name;
}
void OAIAutoScalingConfiguration::setAutoScalingConfigurationName(const QString &auto_scaling_configuration_name) {
    m_auto_scaling_configuration_name = auto_scaling_configuration_name;
    m_auto_scaling_configuration_name_isSet = true;
}

bool OAIAutoScalingConfiguration::is_auto_scaling_configuration_name_Set() const{
    return m_auto_scaling_configuration_name_isSet;
}

bool OAIAutoScalingConfiguration::is_auto_scaling_configuration_name_Valid() const{
    return m_auto_scaling_configuration_name_isValid;
}

qint32 OAIAutoScalingConfiguration::getAutoScalingConfigurationRevision() const {
    return m_auto_scaling_configuration_revision;
}
void OAIAutoScalingConfiguration::setAutoScalingConfigurationRevision(const qint32 &auto_scaling_configuration_revision) {
    m_auto_scaling_configuration_revision = auto_scaling_configuration_revision;
    m_auto_scaling_configuration_revision_isSet = true;
}

bool OAIAutoScalingConfiguration::is_auto_scaling_configuration_revision_Set() const{
    return m_auto_scaling_configuration_revision_isSet;
}

bool OAIAutoScalingConfiguration::is_auto_scaling_configuration_revision_Valid() const{
    return m_auto_scaling_configuration_revision_isValid;
}

bool OAIAutoScalingConfiguration::getLatest() const {
    return m_latest;
}
void OAIAutoScalingConfiguration::setLatest(const bool &latest) {
    m_latest = latest;
    m_latest_isSet = true;
}

bool OAIAutoScalingConfiguration::is_latest_Set() const{
    return m_latest_isSet;
}

bool OAIAutoScalingConfiguration::is_latest_Valid() const{
    return m_latest_isValid;
}

OAIAutoScalingConfigurationStatus OAIAutoScalingConfiguration::getStatus() const {
    return m_status;
}
void OAIAutoScalingConfiguration::setStatus(const OAIAutoScalingConfigurationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAutoScalingConfiguration::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAutoScalingConfiguration::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIAutoScalingConfiguration::getMaxConcurrency() const {
    return m_max_concurrency;
}
void OAIAutoScalingConfiguration::setMaxConcurrency(const qint32 &max_concurrency) {
    m_max_concurrency = max_concurrency;
    m_max_concurrency_isSet = true;
}

bool OAIAutoScalingConfiguration::is_max_concurrency_Set() const{
    return m_max_concurrency_isSet;
}

bool OAIAutoScalingConfiguration::is_max_concurrency_Valid() const{
    return m_max_concurrency_isValid;
}

qint32 OAIAutoScalingConfiguration::getMinSize() const {
    return m_min_size;
}
void OAIAutoScalingConfiguration::setMinSize(const qint32 &min_size) {
    m_min_size = min_size;
    m_min_size_isSet = true;
}

bool OAIAutoScalingConfiguration::is_min_size_Set() const{
    return m_min_size_isSet;
}

bool OAIAutoScalingConfiguration::is_min_size_Valid() const{
    return m_min_size_isValid;
}

qint32 OAIAutoScalingConfiguration::getMaxSize() const {
    return m_max_size;
}
void OAIAutoScalingConfiguration::setMaxSize(const qint32 &max_size) {
    m_max_size = max_size;
    m_max_size_isSet = true;
}

bool OAIAutoScalingConfiguration::is_max_size_Set() const{
    return m_max_size_isSet;
}

bool OAIAutoScalingConfiguration::is_max_size_Valid() const{
    return m_max_size_isValid;
}

QDateTime OAIAutoScalingConfiguration::getCreatedAt() const {
    return m_created_at;
}
void OAIAutoScalingConfiguration::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAutoScalingConfiguration::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAutoScalingConfiguration::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIAutoScalingConfiguration::getDeletedAt() const {
    return m_deleted_at;
}
void OAIAutoScalingConfiguration::setDeletedAt(const QDateTime &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIAutoScalingConfiguration::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIAutoScalingConfiguration::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

bool OAIAutoScalingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_scaling_configuration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_configuration_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoScalingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
