/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkConfiguration_EgressConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkConfiguration_EgressConfiguration::OAINetworkConfiguration_EgressConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkConfiguration_EgressConfiguration::OAINetworkConfiguration_EgressConfiguration() {
    this->initializeModel();
}

OAINetworkConfiguration_EgressConfiguration::~OAINetworkConfiguration_EgressConfiguration() {}

void OAINetworkConfiguration_EgressConfiguration::initializeModel() {

    m_egress_type_isSet = false;
    m_egress_type_isValid = false;

    m_vpc_connector_arn_isSet = false;
    m_vpc_connector_arn_isValid = false;
}

void OAINetworkConfiguration_EgressConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkConfiguration_EgressConfiguration::fromJsonObject(QJsonObject json) {

    m_egress_type_isValid = ::OpenAPI::fromJsonValue(m_egress_type, json[QString("EgressType")]);
    m_egress_type_isSet = !json[QString("EgressType")].isNull() && m_egress_type_isValid;

    m_vpc_connector_arn_isValid = ::OpenAPI::fromJsonValue(m_vpc_connector_arn, json[QString("VpcConnectorArn")]);
    m_vpc_connector_arn_isSet = !json[QString("VpcConnectorArn")].isNull() && m_vpc_connector_arn_isValid;
}

QString OAINetworkConfiguration_EgressConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkConfiguration_EgressConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_egress_type.isSet()) {
        obj.insert(QString("EgressType"), ::OpenAPI::toJsonValue(m_egress_type));
    }
    if (m_vpc_connector_arn_isSet) {
        obj.insert(QString("VpcConnectorArn"), ::OpenAPI::toJsonValue(m_vpc_connector_arn));
    }
    return obj;
}

OAIEgressType OAINetworkConfiguration_EgressConfiguration::getEgressType() const {
    return m_egress_type;
}
void OAINetworkConfiguration_EgressConfiguration::setEgressType(const OAIEgressType &egress_type) {
    m_egress_type = egress_type;
    m_egress_type_isSet = true;
}

bool OAINetworkConfiguration_EgressConfiguration::is_egress_type_Set() const{
    return m_egress_type_isSet;
}

bool OAINetworkConfiguration_EgressConfiguration::is_egress_type_Valid() const{
    return m_egress_type_isValid;
}

QString OAINetworkConfiguration_EgressConfiguration::getVpcConnectorArn() const {
    return m_vpc_connector_arn;
}
void OAINetworkConfiguration_EgressConfiguration::setVpcConnectorArn(const QString &vpc_connector_arn) {
    m_vpc_connector_arn = vpc_connector_arn;
    m_vpc_connector_arn_isSet = true;
}

bool OAINetworkConfiguration_EgressConfiguration::is_vpc_connector_arn_Set() const{
    return m_vpc_connector_arn_isSet;
}

bool OAINetworkConfiguration_EgressConfiguration::is_vpc_connector_arn_Valid() const{
    return m_vpc_connector_arn_isValid;
}

bool OAINetworkConfiguration_EgressConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_egress_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connector_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkConfiguration_EgressConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
