/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConnectionResponse_Connection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConnectionResponse_Connection::OAICreateConnectionResponse_Connection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConnectionResponse_Connection::OAICreateConnectionResponse_Connection() {
    this->initializeModel();
}

OAICreateConnectionResponse_Connection::~OAICreateConnectionResponse_Connection() {}

void OAICreateConnectionResponse_Connection::initializeModel() {

    m_connection_name_isSet = false;
    m_connection_name_isValid = false;

    m_connection_arn_isSet = false;
    m_connection_arn_isValid = false;

    m_provider_type_isSet = false;
    m_provider_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;
}

void OAICreateConnectionResponse_Connection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConnectionResponse_Connection::fromJsonObject(QJsonObject json) {

    m_connection_name_isValid = ::OpenAPI::fromJsonValue(m_connection_name, json[QString("ConnectionName")]);
    m_connection_name_isSet = !json[QString("ConnectionName")].isNull() && m_connection_name_isValid;

    m_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_connection_arn, json[QString("ConnectionArn")]);
    m_connection_arn_isSet = !json[QString("ConnectionArn")].isNull() && m_connection_arn_isValid;

    m_provider_type_isValid = ::OpenAPI::fromJsonValue(m_provider_type, json[QString("ProviderType")]);
    m_provider_type_isSet = !json[QString("ProviderType")].isNull() && m_provider_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;
}

QString OAICreateConnectionResponse_Connection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConnectionResponse_Connection::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_name_isSet) {
        obj.insert(QString("ConnectionName"), ::OpenAPI::toJsonValue(m_connection_name));
    }
    if (m_connection_arn_isSet) {
        obj.insert(QString("ConnectionArn"), ::OpenAPI::toJsonValue(m_connection_arn));
    }
    if (m_provider_type.isSet()) {
        obj.insert(QString("ProviderType"), ::OpenAPI::toJsonValue(m_provider_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    return obj;
}

QString OAICreateConnectionResponse_Connection::getConnectionName() const {
    return m_connection_name;
}
void OAICreateConnectionResponse_Connection::setConnectionName(const QString &connection_name) {
    m_connection_name = connection_name;
    m_connection_name_isSet = true;
}

bool OAICreateConnectionResponse_Connection::is_connection_name_Set() const{
    return m_connection_name_isSet;
}

bool OAICreateConnectionResponse_Connection::is_connection_name_Valid() const{
    return m_connection_name_isValid;
}

QString OAICreateConnectionResponse_Connection::getConnectionArn() const {
    return m_connection_arn;
}
void OAICreateConnectionResponse_Connection::setConnectionArn(const QString &connection_arn) {
    m_connection_arn = connection_arn;
    m_connection_arn_isSet = true;
}

bool OAICreateConnectionResponse_Connection::is_connection_arn_Set() const{
    return m_connection_arn_isSet;
}

bool OAICreateConnectionResponse_Connection::is_connection_arn_Valid() const{
    return m_connection_arn_isValid;
}

OAIProviderType OAICreateConnectionResponse_Connection::getProviderType() const {
    return m_provider_type;
}
void OAICreateConnectionResponse_Connection::setProviderType(const OAIProviderType &provider_type) {
    m_provider_type = provider_type;
    m_provider_type_isSet = true;
}

bool OAICreateConnectionResponse_Connection::is_provider_type_Set() const{
    return m_provider_type_isSet;
}

bool OAICreateConnectionResponse_Connection::is_provider_type_Valid() const{
    return m_provider_type_isValid;
}

OAIConnectionStatus OAICreateConnectionResponse_Connection::getStatus() const {
    return m_status;
}
void OAICreateConnectionResponse_Connection::setStatus(const OAIConnectionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateConnectionResponse_Connection::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateConnectionResponse_Connection::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAICreateConnectionResponse_Connection::getCreatedAt() const {
    return m_created_at;
}
void OAICreateConnectionResponse_Connection::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICreateConnectionResponse_Connection::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICreateConnectionResponse_Connection::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAICreateConnectionResponse_Connection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConnectionResponse_Connection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
