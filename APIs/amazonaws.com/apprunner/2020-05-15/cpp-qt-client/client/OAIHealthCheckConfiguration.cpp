/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthCheckConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthCheckConfiguration::OAIHealthCheckConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthCheckConfiguration::OAIHealthCheckConfiguration() {
    this->initializeModel();
}

OAIHealthCheckConfiguration::~OAIHealthCheckConfiguration() {}

void OAIHealthCheckConfiguration::initializeModel() {

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_healthy_threshold_isSet = false;
    m_healthy_threshold_isValid = false;

    m_unhealthy_threshold_isSet = false;
    m_unhealthy_threshold_isValid = false;
}

void OAIHealthCheckConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthCheckConfiguration::fromJsonObject(QJsonObject json) {

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("Protocol")]);
    m_protocol_isSet = !json[QString("Protocol")].isNull() && m_protocol_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("Interval")]);
    m_interval_isSet = !json[QString("Interval")].isNull() && m_interval_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("Timeout")]);
    m_timeout_isSet = !json[QString("Timeout")].isNull() && m_timeout_isValid;

    m_healthy_threshold_isValid = ::OpenAPI::fromJsonValue(m_healthy_threshold, json[QString("HealthyThreshold")]);
    m_healthy_threshold_isSet = !json[QString("HealthyThreshold")].isNull() && m_healthy_threshold_isValid;

    m_unhealthy_threshold_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_threshold, json[QString("UnhealthyThreshold")]);
    m_unhealthy_threshold_isSet = !json[QString("UnhealthyThreshold")].isNull() && m_unhealthy_threshold_isValid;
}

QString OAIHealthCheckConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthCheckConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_protocol.isSet()) {
        obj.insert(QString("Protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_interval_isSet) {
        obj.insert(QString("Interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("Timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_healthy_threshold_isSet) {
        obj.insert(QString("HealthyThreshold"), ::OpenAPI::toJsonValue(m_healthy_threshold));
    }
    if (m_unhealthy_threshold_isSet) {
        obj.insert(QString("UnhealthyThreshold"), ::OpenAPI::toJsonValue(m_unhealthy_threshold));
    }
    return obj;
}

OAIHealthCheckProtocol OAIHealthCheckConfiguration::getProtocol() const {
    return m_protocol;
}
void OAIHealthCheckConfiguration::setProtocol(const OAIHealthCheckProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIHealthCheckConfiguration::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIHealthCheckConfiguration::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIHealthCheckConfiguration::getPath() const {
    return m_path;
}
void OAIHealthCheckConfiguration::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIHealthCheckConfiguration::is_path_Set() const{
    return m_path_isSet;
}

bool OAIHealthCheckConfiguration::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIHealthCheckConfiguration::getInterval() const {
    return m_interval;
}
void OAIHealthCheckConfiguration::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIHealthCheckConfiguration::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIHealthCheckConfiguration::is_interval_Valid() const{
    return m_interval_isValid;
}

qint32 OAIHealthCheckConfiguration::getTimeout() const {
    return m_timeout;
}
void OAIHealthCheckConfiguration::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIHealthCheckConfiguration::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIHealthCheckConfiguration::is_timeout_Valid() const{
    return m_timeout_isValid;
}

qint32 OAIHealthCheckConfiguration::getHealthyThreshold() const {
    return m_healthy_threshold;
}
void OAIHealthCheckConfiguration::setHealthyThreshold(const qint32 &healthy_threshold) {
    m_healthy_threshold = healthy_threshold;
    m_healthy_threshold_isSet = true;
}

bool OAIHealthCheckConfiguration::is_healthy_threshold_Set() const{
    return m_healthy_threshold_isSet;
}

bool OAIHealthCheckConfiguration::is_healthy_threshold_Valid() const{
    return m_healthy_threshold_isValid;
}

qint32 OAIHealthCheckConfiguration::getUnhealthyThreshold() const {
    return m_unhealthy_threshold;
}
void OAIHealthCheckConfiguration::setUnhealthyThreshold(const qint32 &unhealthy_threshold) {
    m_unhealthy_threshold = unhealthy_threshold;
    m_unhealthy_threshold_isSet = true;
}

bool OAIHealthCheckConfiguration::is_unhealthy_threshold_Set() const{
    return m_unhealthy_threshold_isSet;
}

bool OAIHealthCheckConfiguration::is_unhealthy_threshold_Valid() const{
    return m_unhealthy_threshold_isValid;
}

bool OAIHealthCheckConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_healthy_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthCheckConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
