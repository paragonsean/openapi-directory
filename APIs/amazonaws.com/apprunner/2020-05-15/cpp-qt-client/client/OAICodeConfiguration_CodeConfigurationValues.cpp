/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeConfiguration_CodeConfigurationValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeConfiguration_CodeConfigurationValues::OAICodeConfiguration_CodeConfigurationValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeConfiguration_CodeConfigurationValues::OAICodeConfiguration_CodeConfigurationValues() {
    this->initializeModel();
}

OAICodeConfiguration_CodeConfigurationValues::~OAICodeConfiguration_CodeConfigurationValues() {}

void OAICodeConfiguration_CodeConfigurationValues::initializeModel() {

    m_runtime_isSet = false;
    m_runtime_isValid = false;

    m_build_command_isSet = false;
    m_build_command_isValid = false;

    m_start_command_isSet = false;
    m_start_command_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_runtime_environment_variables_isSet = false;
    m_runtime_environment_variables_isValid = false;

    m_runtime_environment_secrets_isSet = false;
    m_runtime_environment_secrets_isValid = false;
}

void OAICodeConfiguration_CodeConfigurationValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeConfiguration_CodeConfigurationValues::fromJsonObject(QJsonObject json) {

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("Runtime")]);
    m_runtime_isSet = !json[QString("Runtime")].isNull() && m_runtime_isValid;

    m_build_command_isValid = ::OpenAPI::fromJsonValue(m_build_command, json[QString("BuildCommand")]);
    m_build_command_isSet = !json[QString("BuildCommand")].isNull() && m_build_command_isValid;

    m_start_command_isValid = ::OpenAPI::fromJsonValue(m_start_command, json[QString("StartCommand")]);
    m_start_command_isSet = !json[QString("StartCommand")].isNull() && m_start_command_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_runtime_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_runtime_environment_variables, json[QString("RuntimeEnvironmentVariables")]);
    m_runtime_environment_variables_isSet = !json[QString("RuntimeEnvironmentVariables")].isNull() && m_runtime_environment_variables_isValid;

    m_runtime_environment_secrets_isValid = ::OpenAPI::fromJsonValue(m_runtime_environment_secrets, json[QString("RuntimeEnvironmentSecrets")]);
    m_runtime_environment_secrets_isSet = !json[QString("RuntimeEnvironmentSecrets")].isNull() && m_runtime_environment_secrets_isValid;
}

QString OAICodeConfiguration_CodeConfigurationValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeConfiguration_CodeConfigurationValues::asJsonObject() const {
    QJsonObject obj;
    if (m_runtime.isSet()) {
        obj.insert(QString("Runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    if (m_build_command_isSet) {
        obj.insert(QString("BuildCommand"), ::OpenAPI::toJsonValue(m_build_command));
    }
    if (m_start_command_isSet) {
        obj.insert(QString("StartCommand"), ::OpenAPI::toJsonValue(m_start_command));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_runtime_environment_variables.isSet()) {
        obj.insert(QString("RuntimeEnvironmentVariables"), ::OpenAPI::toJsonValue(m_runtime_environment_variables));
    }
    if (m_runtime_environment_secrets.isSet()) {
        obj.insert(QString("RuntimeEnvironmentSecrets"), ::OpenAPI::toJsonValue(m_runtime_environment_secrets));
    }
    return obj;
}

OAIRuntime OAICodeConfiguration_CodeConfigurationValues::getRuntime() const {
    return m_runtime;
}
void OAICodeConfiguration_CodeConfigurationValues::setRuntime(const OAIRuntime &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAICodeConfiguration_CodeConfigurationValues::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAICodeConfiguration_CodeConfigurationValues::is_runtime_Valid() const{
    return m_runtime_isValid;
}

QString OAICodeConfiguration_CodeConfigurationValues::getBuildCommand() const {
    return m_build_command;
}
void OAICodeConfiguration_CodeConfigurationValues::setBuildCommand(const QString &build_command) {
    m_build_command = build_command;
    m_build_command_isSet = true;
}

bool OAICodeConfiguration_CodeConfigurationValues::is_build_command_Set() const{
    return m_build_command_isSet;
}

bool OAICodeConfiguration_CodeConfigurationValues::is_build_command_Valid() const{
    return m_build_command_isValid;
}

QString OAICodeConfiguration_CodeConfigurationValues::getStartCommand() const {
    return m_start_command;
}
void OAICodeConfiguration_CodeConfigurationValues::setStartCommand(const QString &start_command) {
    m_start_command = start_command;
    m_start_command_isSet = true;
}

bool OAICodeConfiguration_CodeConfigurationValues::is_start_command_Set() const{
    return m_start_command_isSet;
}

bool OAICodeConfiguration_CodeConfigurationValues::is_start_command_Valid() const{
    return m_start_command_isValid;
}

QString OAICodeConfiguration_CodeConfigurationValues::getPort() const {
    return m_port;
}
void OAICodeConfiguration_CodeConfigurationValues::setPort(const QString &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAICodeConfiguration_CodeConfigurationValues::is_port_Set() const{
    return m_port_isSet;
}

bool OAICodeConfiguration_CodeConfigurationValues::is_port_Valid() const{
    return m_port_isValid;
}

QMap OAICodeConfiguration_CodeConfigurationValues::getRuntimeEnvironmentVariables() const {
    return m_runtime_environment_variables;
}
void OAICodeConfiguration_CodeConfigurationValues::setRuntimeEnvironmentVariables(const QMap &runtime_environment_variables) {
    m_runtime_environment_variables = runtime_environment_variables;
    m_runtime_environment_variables_isSet = true;
}

bool OAICodeConfiguration_CodeConfigurationValues::is_runtime_environment_variables_Set() const{
    return m_runtime_environment_variables_isSet;
}

bool OAICodeConfiguration_CodeConfigurationValues::is_runtime_environment_variables_Valid() const{
    return m_runtime_environment_variables_isValid;
}

QMap OAICodeConfiguration_CodeConfigurationValues::getRuntimeEnvironmentSecrets() const {
    return m_runtime_environment_secrets;
}
void OAICodeConfiguration_CodeConfigurationValues::setRuntimeEnvironmentSecrets(const QMap &runtime_environment_secrets) {
    m_runtime_environment_secrets = runtime_environment_secrets;
    m_runtime_environment_secrets_isSet = true;
}

bool OAICodeConfiguration_CodeConfigurationValues::is_runtime_environment_secrets_Set() const{
    return m_runtime_environment_secrets_isSet;
}

bool OAICodeConfiguration_CodeConfigurationValues::is_runtime_environment_secrets_Valid() const{
    return m_runtime_environment_secrets_isValid;
}

bool OAICodeConfiguration_CodeConfigurationValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_runtime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_environment_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_environment_secrets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeConfiguration_CodeConfigurationValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_runtime_isValid && true;
}

} // namespace OpenAPI
