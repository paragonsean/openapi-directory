/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceSummary::OAIServiceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceSummary::OAIServiceSummary() {
    this->initializeModel();
}

OAIServiceSummary::~OAIServiceSummary() {}

void OAIServiceSummary::initializeModel() {

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_arn_isSet = false;
    m_service_arn_isValid = false;

    m_service_url_isSet = false;
    m_service_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIServiceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceSummary::fromJsonObject(QJsonObject json) {

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceId")]);
    m_service_id_isSet = !json[QString("ServiceId")].isNull() && m_service_id_isValid;

    m_service_arn_isValid = ::OpenAPI::fromJsonValue(m_service_arn, json[QString("ServiceArn")]);
    m_service_arn_isSet = !json[QString("ServiceArn")].isNull() && m_service_arn_isValid;

    m_service_url_isValid = ::OpenAPI::fromJsonValue(m_service_url, json[QString("ServiceUrl")]);
    m_service_url_isSet = !json[QString("ServiceUrl")].isNull() && m_service_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIServiceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_arn_isSet) {
        obj.insert(QString("ServiceArn"), ::OpenAPI::toJsonValue(m_service_arn));
    }
    if (m_service_url_isSet) {
        obj.insert(QString("ServiceUrl"), ::OpenAPI::toJsonValue(m_service_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIServiceSummary::getServiceName() const {
    return m_service_name;
}
void OAIServiceSummary::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIServiceSummary::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIServiceSummary::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIServiceSummary::getServiceId() const {
    return m_service_id;
}
void OAIServiceSummary::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIServiceSummary::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIServiceSummary::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIServiceSummary::getServiceArn() const {
    return m_service_arn;
}
void OAIServiceSummary::setServiceArn(const QString &service_arn) {
    m_service_arn = service_arn;
    m_service_arn_isSet = true;
}

bool OAIServiceSummary::is_service_arn_Set() const{
    return m_service_arn_isSet;
}

bool OAIServiceSummary::is_service_arn_Valid() const{
    return m_service_arn_isValid;
}

QString OAIServiceSummary::getServiceUrl() const {
    return m_service_url;
}
void OAIServiceSummary::setServiceUrl(const QString &service_url) {
    m_service_url = service_url;
    m_service_url_isSet = true;
}

bool OAIServiceSummary::is_service_url_Set() const{
    return m_service_url_isSet;
}

bool OAIServiceSummary::is_service_url_Valid() const{
    return m_service_url_isValid;
}

QDateTime OAIServiceSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIServiceSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIServiceSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIServiceSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIServiceSummary::getUpdatedAt() const {
    return m_updated_at;
}
void OAIServiceSummary::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIServiceSummary::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIServiceSummary::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIServiceStatus OAIServiceSummary::getStatus() const {
    return m_status;
}
void OAIServiceSummary::setStatus(const OAIServiceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServiceSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServiceSummary::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIServiceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
