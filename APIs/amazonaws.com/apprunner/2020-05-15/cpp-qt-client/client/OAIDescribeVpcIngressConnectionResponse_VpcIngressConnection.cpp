/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection() {
    this->initializeModel();
}

OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::~OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection() {}

void OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::initializeModel() {

    m_vpc_ingress_connection_arn_isSet = false;
    m_vpc_ingress_connection_arn_isValid = false;

    m_vpc_ingress_connection_name_isSet = false;
    m_vpc_ingress_connection_name_isValid = false;

    m_service_arn_isSet = false;
    m_service_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_ingress_vpc_configuration_isSet = false;
    m_ingress_vpc_configuration_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;
}

void OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::fromJsonObject(QJsonObject json) {

    m_vpc_ingress_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_vpc_ingress_connection_arn, json[QString("VpcIngressConnectionArn")]);
    m_vpc_ingress_connection_arn_isSet = !json[QString("VpcIngressConnectionArn")].isNull() && m_vpc_ingress_connection_arn_isValid;

    m_vpc_ingress_connection_name_isValid = ::OpenAPI::fromJsonValue(m_vpc_ingress_connection_name, json[QString("VpcIngressConnectionName")]);
    m_vpc_ingress_connection_name_isSet = !json[QString("VpcIngressConnectionName")].isNull() && m_vpc_ingress_connection_name_isValid;

    m_service_arn_isValid = ::OpenAPI::fromJsonValue(m_service_arn, json[QString("ServiceArn")]);
    m_service_arn_isSet = !json[QString("ServiceArn")].isNull() && m_service_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_ingress_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_ingress_vpc_configuration, json[QString("IngressVpcConfiguration")]);
    m_ingress_vpc_configuration_isSet = !json[QString("IngressVpcConfiguration")].isNull() && m_ingress_vpc_configuration_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("DeletedAt")]);
    m_deleted_at_isSet = !json[QString("DeletedAt")].isNull() && m_deleted_at_isValid;
}

QString OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_ingress_connection_arn_isSet) {
        obj.insert(QString("VpcIngressConnectionArn"), ::OpenAPI::toJsonValue(m_vpc_ingress_connection_arn));
    }
    if (m_vpc_ingress_connection_name_isSet) {
        obj.insert(QString("VpcIngressConnectionName"), ::OpenAPI::toJsonValue(m_vpc_ingress_connection_name));
    }
    if (m_service_arn_isSet) {
        obj.insert(QString("ServiceArn"), ::OpenAPI::toJsonValue(m_service_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_ingress_vpc_configuration.isSet()) {
        obj.insert(QString("IngressVpcConfiguration"), ::OpenAPI::toJsonValue(m_ingress_vpc_configuration));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("DeletedAt"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    return obj;
}

QString OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::getVpcIngressConnectionArn() const {
    return m_vpc_ingress_connection_arn;
}
void OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::setVpcIngressConnectionArn(const QString &vpc_ingress_connection_arn) {
    m_vpc_ingress_connection_arn = vpc_ingress_connection_arn;
    m_vpc_ingress_connection_arn_isSet = true;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_vpc_ingress_connection_arn_Set() const{
    return m_vpc_ingress_connection_arn_isSet;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_vpc_ingress_connection_arn_Valid() const{
    return m_vpc_ingress_connection_arn_isValid;
}

QString OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::getVpcIngressConnectionName() const {
    return m_vpc_ingress_connection_name;
}
void OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::setVpcIngressConnectionName(const QString &vpc_ingress_connection_name) {
    m_vpc_ingress_connection_name = vpc_ingress_connection_name;
    m_vpc_ingress_connection_name_isSet = true;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_vpc_ingress_connection_name_Set() const{
    return m_vpc_ingress_connection_name_isSet;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_vpc_ingress_connection_name_Valid() const{
    return m_vpc_ingress_connection_name_isValid;
}

QString OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::getServiceArn() const {
    return m_service_arn;
}
void OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::setServiceArn(const QString &service_arn) {
    m_service_arn = service_arn;
    m_service_arn_isSet = true;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_service_arn_Set() const{
    return m_service_arn_isSet;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_service_arn_Valid() const{
    return m_service_arn_isValid;
}

OAIVpcIngressConnectionStatus OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::getStatus() const {
    return m_status;
}
void OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::setStatus(const OAIVpcIngressConnectionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::getAccountId() const {
    return m_account_id;
}
void OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::getDomainName() const {
    return m_domain_name;
}
void OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

OAIVpcIngressConnection_IngressVpcConfiguration OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::getIngressVpcConfiguration() const {
    return m_ingress_vpc_configuration;
}
void OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::setIngressVpcConfiguration(const OAIVpcIngressConnection_IngressVpcConfiguration &ingress_vpc_configuration) {
    m_ingress_vpc_configuration = ingress_vpc_configuration;
    m_ingress_vpc_configuration_isSet = true;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_ingress_vpc_configuration_Set() const{
    return m_ingress_vpc_configuration_isSet;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_ingress_vpc_configuration_Valid() const{
    return m_ingress_vpc_configuration_isValid;
}

QDateTime OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::getDeletedAt() const {
    return m_deleted_at;
}
void OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::setDeletedAt(const QDateTime &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_ingress_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_ingress_connection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeVpcIngressConnectionResponse_VpcIngressConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
