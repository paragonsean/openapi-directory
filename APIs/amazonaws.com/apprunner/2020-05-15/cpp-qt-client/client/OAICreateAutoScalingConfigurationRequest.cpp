/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAutoScalingConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAutoScalingConfigurationRequest::OAICreateAutoScalingConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAutoScalingConfigurationRequest::OAICreateAutoScalingConfigurationRequest() {
    this->initializeModel();
}

OAICreateAutoScalingConfigurationRequest::~OAICreateAutoScalingConfigurationRequest() {}

void OAICreateAutoScalingConfigurationRequest::initializeModel() {

    m_auto_scaling_configuration_name_isSet = false;
    m_auto_scaling_configuration_name_isValid = false;

    m_max_concurrency_isSet = false;
    m_max_concurrency_isValid = false;

    m_min_size_isSet = false;
    m_min_size_isValid = false;

    m_max_size_isSet = false;
    m_max_size_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAutoScalingConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAutoScalingConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_auto_scaling_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_configuration_name, json[QString("AutoScalingConfigurationName")]);
    m_auto_scaling_configuration_name_isSet = !json[QString("AutoScalingConfigurationName")].isNull() && m_auto_scaling_configuration_name_isValid;

    m_max_concurrency_isValid = ::OpenAPI::fromJsonValue(m_max_concurrency, json[QString("MaxConcurrency")]);
    m_max_concurrency_isSet = !json[QString("MaxConcurrency")].isNull() && m_max_concurrency_isValid;

    m_min_size_isValid = ::OpenAPI::fromJsonValue(m_min_size, json[QString("MinSize")]);
    m_min_size_isSet = !json[QString("MinSize")].isNull() && m_min_size_isValid;

    m_max_size_isValid = ::OpenAPI::fromJsonValue(m_max_size, json[QString("MaxSize")]);
    m_max_size_isSet = !json[QString("MaxSize")].isNull() && m_max_size_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateAutoScalingConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAutoScalingConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_scaling_configuration_name_isSet) {
        obj.insert(QString("AutoScalingConfigurationName"), ::OpenAPI::toJsonValue(m_auto_scaling_configuration_name));
    }
    if (m_max_concurrency_isSet) {
        obj.insert(QString("MaxConcurrency"), ::OpenAPI::toJsonValue(m_max_concurrency));
    }
    if (m_min_size_isSet) {
        obj.insert(QString("MinSize"), ::OpenAPI::toJsonValue(m_min_size));
    }
    if (m_max_size_isSet) {
        obj.insert(QString("MaxSize"), ::OpenAPI::toJsonValue(m_max_size));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateAutoScalingConfigurationRequest::getAutoScalingConfigurationName() const {
    return m_auto_scaling_configuration_name;
}
void OAICreateAutoScalingConfigurationRequest::setAutoScalingConfigurationName(const QString &auto_scaling_configuration_name) {
    m_auto_scaling_configuration_name = auto_scaling_configuration_name;
    m_auto_scaling_configuration_name_isSet = true;
}

bool OAICreateAutoScalingConfigurationRequest::is_auto_scaling_configuration_name_Set() const{
    return m_auto_scaling_configuration_name_isSet;
}

bool OAICreateAutoScalingConfigurationRequest::is_auto_scaling_configuration_name_Valid() const{
    return m_auto_scaling_configuration_name_isValid;
}

qint32 OAICreateAutoScalingConfigurationRequest::getMaxConcurrency() const {
    return m_max_concurrency;
}
void OAICreateAutoScalingConfigurationRequest::setMaxConcurrency(const qint32 &max_concurrency) {
    m_max_concurrency = max_concurrency;
    m_max_concurrency_isSet = true;
}

bool OAICreateAutoScalingConfigurationRequest::is_max_concurrency_Set() const{
    return m_max_concurrency_isSet;
}

bool OAICreateAutoScalingConfigurationRequest::is_max_concurrency_Valid() const{
    return m_max_concurrency_isValid;
}

qint32 OAICreateAutoScalingConfigurationRequest::getMinSize() const {
    return m_min_size;
}
void OAICreateAutoScalingConfigurationRequest::setMinSize(const qint32 &min_size) {
    m_min_size = min_size;
    m_min_size_isSet = true;
}

bool OAICreateAutoScalingConfigurationRequest::is_min_size_Set() const{
    return m_min_size_isSet;
}

bool OAICreateAutoScalingConfigurationRequest::is_min_size_Valid() const{
    return m_min_size_isValid;
}

qint32 OAICreateAutoScalingConfigurationRequest::getMaxSize() const {
    return m_max_size;
}
void OAICreateAutoScalingConfigurationRequest::setMaxSize(const qint32 &max_size) {
    m_max_size = max_size;
    m_max_size_isSet = true;
}

bool OAICreateAutoScalingConfigurationRequest::is_max_size_Set() const{
    return m_max_size_isSet;
}

bool OAICreateAutoScalingConfigurationRequest::is_max_size_Valid() const{
    return m_max_size_isValid;
}

QList OAICreateAutoScalingConfigurationRequest::getTags() const {
    return m_tags;
}
void OAICreateAutoScalingConfigurationRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAutoScalingConfigurationRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAutoScalingConfigurationRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAutoScalingConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_scaling_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAutoScalingConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_scaling_configuration_name_isValid && true;
}

} // namespace OpenAPI
