/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVpcIngressConnectionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVpcIngressConnectionRequest::OAICreateVpcIngressConnectionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVpcIngressConnectionRequest::OAICreateVpcIngressConnectionRequest() {
    this->initializeModel();
}

OAICreateVpcIngressConnectionRequest::~OAICreateVpcIngressConnectionRequest() {}

void OAICreateVpcIngressConnectionRequest::initializeModel() {

    m_service_arn_isSet = false;
    m_service_arn_isValid = false;

    m_vpc_ingress_connection_name_isSet = false;
    m_vpc_ingress_connection_name_isValid = false;

    m_ingress_vpc_configuration_isSet = false;
    m_ingress_vpc_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateVpcIngressConnectionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVpcIngressConnectionRequest::fromJsonObject(QJsonObject json) {

    m_service_arn_isValid = ::OpenAPI::fromJsonValue(m_service_arn, json[QString("ServiceArn")]);
    m_service_arn_isSet = !json[QString("ServiceArn")].isNull() && m_service_arn_isValid;

    m_vpc_ingress_connection_name_isValid = ::OpenAPI::fromJsonValue(m_vpc_ingress_connection_name, json[QString("VpcIngressConnectionName")]);
    m_vpc_ingress_connection_name_isSet = !json[QString("VpcIngressConnectionName")].isNull() && m_vpc_ingress_connection_name_isValid;

    m_ingress_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_ingress_vpc_configuration, json[QString("IngressVpcConfiguration")]);
    m_ingress_vpc_configuration_isSet = !json[QString("IngressVpcConfiguration")].isNull() && m_ingress_vpc_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateVpcIngressConnectionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVpcIngressConnectionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_service_arn_isSet) {
        obj.insert(QString("ServiceArn"), ::OpenAPI::toJsonValue(m_service_arn));
    }
    if (m_vpc_ingress_connection_name_isSet) {
        obj.insert(QString("VpcIngressConnectionName"), ::OpenAPI::toJsonValue(m_vpc_ingress_connection_name));
    }
    if (m_ingress_vpc_configuration.isSet()) {
        obj.insert(QString("IngressVpcConfiguration"), ::OpenAPI::toJsonValue(m_ingress_vpc_configuration));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateVpcIngressConnectionRequest::getServiceArn() const {
    return m_service_arn;
}
void OAICreateVpcIngressConnectionRequest::setServiceArn(const QString &service_arn) {
    m_service_arn = service_arn;
    m_service_arn_isSet = true;
}

bool OAICreateVpcIngressConnectionRequest::is_service_arn_Set() const{
    return m_service_arn_isSet;
}

bool OAICreateVpcIngressConnectionRequest::is_service_arn_Valid() const{
    return m_service_arn_isValid;
}

QString OAICreateVpcIngressConnectionRequest::getVpcIngressConnectionName() const {
    return m_vpc_ingress_connection_name;
}
void OAICreateVpcIngressConnectionRequest::setVpcIngressConnectionName(const QString &vpc_ingress_connection_name) {
    m_vpc_ingress_connection_name = vpc_ingress_connection_name;
    m_vpc_ingress_connection_name_isSet = true;
}

bool OAICreateVpcIngressConnectionRequest::is_vpc_ingress_connection_name_Set() const{
    return m_vpc_ingress_connection_name_isSet;
}

bool OAICreateVpcIngressConnectionRequest::is_vpc_ingress_connection_name_Valid() const{
    return m_vpc_ingress_connection_name_isValid;
}

OAICreateVpcIngressConnectionRequest_IngressVpcConfiguration OAICreateVpcIngressConnectionRequest::getIngressVpcConfiguration() const {
    return m_ingress_vpc_configuration;
}
void OAICreateVpcIngressConnectionRequest::setIngressVpcConfiguration(const OAICreateVpcIngressConnectionRequest_IngressVpcConfiguration &ingress_vpc_configuration) {
    m_ingress_vpc_configuration = ingress_vpc_configuration;
    m_ingress_vpc_configuration_isSet = true;
}

bool OAICreateVpcIngressConnectionRequest::is_ingress_vpc_configuration_Set() const{
    return m_ingress_vpc_configuration_isSet;
}

bool OAICreateVpcIngressConnectionRequest::is_ingress_vpc_configuration_Valid() const{
    return m_ingress_vpc_configuration_isValid;
}

QList OAICreateVpcIngressConnectionRequest::getTags() const {
    return m_tags;
}
void OAICreateVpcIngressConnectionRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateVpcIngressConnectionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateVpcIngressConnectionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateVpcIngressConnectionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_ingress_connection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVpcIngressConnectionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_arn_isValid && m_vpc_ingress_connection_name_isValid && m_ingress_vpc_configuration_isValid && true;
}

} // namespace OpenAPI
