/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPauseServiceResponse_Service.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPauseServiceResponse_Service::OAIPauseServiceResponse_Service(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPauseServiceResponse_Service::OAIPauseServiceResponse_Service() {
    this->initializeModel();
}

OAIPauseServiceResponse_Service::~OAIPauseServiceResponse_Service() {}

void OAIPauseServiceResponse_Service::initializeModel() {

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_arn_isSet = false;
    m_service_arn_isValid = false;

    m_service_url_isSet = false;
    m_service_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_source_configuration_isSet = false;
    m_source_configuration_isValid = false;

    m_instance_configuration_isSet = false;
    m_instance_configuration_isValid = false;

    m_encryption_configuration_isSet = false;
    m_encryption_configuration_isValid = false;

    m_health_check_configuration_isSet = false;
    m_health_check_configuration_isValid = false;

    m_auto_scaling_configuration_summary_isSet = false;
    m_auto_scaling_configuration_summary_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_observability_configuration_isSet = false;
    m_observability_configuration_isValid = false;
}

void OAIPauseServiceResponse_Service::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPauseServiceResponse_Service::fromJsonObject(QJsonObject json) {

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceId")]);
    m_service_id_isSet = !json[QString("ServiceId")].isNull() && m_service_id_isValid;

    m_service_arn_isValid = ::OpenAPI::fromJsonValue(m_service_arn, json[QString("ServiceArn")]);
    m_service_arn_isSet = !json[QString("ServiceArn")].isNull() && m_service_arn_isValid;

    m_service_url_isValid = ::OpenAPI::fromJsonValue(m_service_url, json[QString("ServiceUrl")]);
    m_service_url_isSet = !json[QString("ServiceUrl")].isNull() && m_service_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("DeletedAt")]);
    m_deleted_at_isSet = !json[QString("DeletedAt")].isNull() && m_deleted_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_source_configuration_isValid = ::OpenAPI::fromJsonValue(m_source_configuration, json[QString("SourceConfiguration")]);
    m_source_configuration_isSet = !json[QString("SourceConfiguration")].isNull() && m_source_configuration_isValid;

    m_instance_configuration_isValid = ::OpenAPI::fromJsonValue(m_instance_configuration, json[QString("InstanceConfiguration")]);
    m_instance_configuration_isSet = !json[QString("InstanceConfiguration")].isNull() && m_instance_configuration_isValid;

    m_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_encryption_configuration, json[QString("EncryptionConfiguration")]);
    m_encryption_configuration_isSet = !json[QString("EncryptionConfiguration")].isNull() && m_encryption_configuration_isValid;

    m_health_check_configuration_isValid = ::OpenAPI::fromJsonValue(m_health_check_configuration, json[QString("HealthCheckConfiguration")]);
    m_health_check_configuration_isSet = !json[QString("HealthCheckConfiguration")].isNull() && m_health_check_configuration_isValid;

    m_auto_scaling_configuration_summary_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_configuration_summary, json[QString("AutoScalingConfigurationSummary")]);
    m_auto_scaling_configuration_summary_isSet = !json[QString("AutoScalingConfigurationSummary")].isNull() && m_auto_scaling_configuration_summary_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("NetworkConfiguration")]);
    m_network_configuration_isSet = !json[QString("NetworkConfiguration")].isNull() && m_network_configuration_isValid;

    m_observability_configuration_isValid = ::OpenAPI::fromJsonValue(m_observability_configuration, json[QString("ObservabilityConfiguration")]);
    m_observability_configuration_isSet = !json[QString("ObservabilityConfiguration")].isNull() && m_observability_configuration_isValid;
}

QString OAIPauseServiceResponse_Service::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPauseServiceResponse_Service::asJsonObject() const {
    QJsonObject obj;
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_arn_isSet) {
        obj.insert(QString("ServiceArn"), ::OpenAPI::toJsonValue(m_service_arn));
    }
    if (m_service_url_isSet) {
        obj.insert(QString("ServiceUrl"), ::OpenAPI::toJsonValue(m_service_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("DeletedAt"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_source_configuration.isSet()) {
        obj.insert(QString("SourceConfiguration"), ::OpenAPI::toJsonValue(m_source_configuration));
    }
    if (m_instance_configuration.isSet()) {
        obj.insert(QString("InstanceConfiguration"), ::OpenAPI::toJsonValue(m_instance_configuration));
    }
    if (m_encryption_configuration.isSet()) {
        obj.insert(QString("EncryptionConfiguration"), ::OpenAPI::toJsonValue(m_encryption_configuration));
    }
    if (m_health_check_configuration.isSet()) {
        obj.insert(QString("HealthCheckConfiguration"), ::OpenAPI::toJsonValue(m_health_check_configuration));
    }
    if (m_auto_scaling_configuration_summary.isSet()) {
        obj.insert(QString("AutoScalingConfigurationSummary"), ::OpenAPI::toJsonValue(m_auto_scaling_configuration_summary));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("NetworkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_observability_configuration.isSet()) {
        obj.insert(QString("ObservabilityConfiguration"), ::OpenAPI::toJsonValue(m_observability_configuration));
    }
    return obj;
}

QString OAIPauseServiceResponse_Service::getServiceName() const {
    return m_service_name;
}
void OAIPauseServiceResponse_Service::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIPauseServiceResponse_Service::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIPauseServiceResponse_Service::getServiceId() const {
    return m_service_id;
}
void OAIPauseServiceResponse_Service::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIPauseServiceResponse_Service::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIPauseServiceResponse_Service::getServiceArn() const {
    return m_service_arn;
}
void OAIPauseServiceResponse_Service::setServiceArn(const QString &service_arn) {
    m_service_arn = service_arn;
    m_service_arn_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_service_arn_Set() const{
    return m_service_arn_isSet;
}

bool OAIPauseServiceResponse_Service::is_service_arn_Valid() const{
    return m_service_arn_isValid;
}

QString OAIPauseServiceResponse_Service::getServiceUrl() const {
    return m_service_url;
}
void OAIPauseServiceResponse_Service::setServiceUrl(const QString &service_url) {
    m_service_url = service_url;
    m_service_url_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_service_url_Set() const{
    return m_service_url_isSet;
}

bool OAIPauseServiceResponse_Service::is_service_url_Valid() const{
    return m_service_url_isValid;
}

QDateTime OAIPauseServiceResponse_Service::getCreatedAt() const {
    return m_created_at;
}
void OAIPauseServiceResponse_Service::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPauseServiceResponse_Service::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIPauseServiceResponse_Service::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPauseServiceResponse_Service::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPauseServiceResponse_Service::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QDateTime OAIPauseServiceResponse_Service::getDeletedAt() const {
    return m_deleted_at;
}
void OAIPauseServiceResponse_Service::setDeletedAt(const QDateTime &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIPauseServiceResponse_Service::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

OAIServiceStatus OAIPauseServiceResponse_Service::getStatus() const {
    return m_status;
}
void OAIPauseServiceResponse_Service::setStatus(const OAIServiceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPauseServiceResponse_Service::is_status_Valid() const{
    return m_status_isValid;
}

OAIService_SourceConfiguration OAIPauseServiceResponse_Service::getSourceConfiguration() const {
    return m_source_configuration;
}
void OAIPauseServiceResponse_Service::setSourceConfiguration(const OAIService_SourceConfiguration &source_configuration) {
    m_source_configuration = source_configuration;
    m_source_configuration_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_source_configuration_Set() const{
    return m_source_configuration_isSet;
}

bool OAIPauseServiceResponse_Service::is_source_configuration_Valid() const{
    return m_source_configuration_isValid;
}

OAIService_InstanceConfiguration OAIPauseServiceResponse_Service::getInstanceConfiguration() const {
    return m_instance_configuration;
}
void OAIPauseServiceResponse_Service::setInstanceConfiguration(const OAIService_InstanceConfiguration &instance_configuration) {
    m_instance_configuration = instance_configuration;
    m_instance_configuration_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_instance_configuration_Set() const{
    return m_instance_configuration_isSet;
}

bool OAIPauseServiceResponse_Service::is_instance_configuration_Valid() const{
    return m_instance_configuration_isValid;
}

OAIService_EncryptionConfiguration OAIPauseServiceResponse_Service::getEncryptionConfiguration() const {
    return m_encryption_configuration;
}
void OAIPauseServiceResponse_Service::setEncryptionConfiguration(const OAIService_EncryptionConfiguration &encryption_configuration) {
    m_encryption_configuration = encryption_configuration;
    m_encryption_configuration_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_encryption_configuration_Set() const{
    return m_encryption_configuration_isSet;
}

bool OAIPauseServiceResponse_Service::is_encryption_configuration_Valid() const{
    return m_encryption_configuration_isValid;
}

OAIService_HealthCheckConfiguration OAIPauseServiceResponse_Service::getHealthCheckConfiguration() const {
    return m_health_check_configuration;
}
void OAIPauseServiceResponse_Service::setHealthCheckConfiguration(const OAIService_HealthCheckConfiguration &health_check_configuration) {
    m_health_check_configuration = health_check_configuration;
    m_health_check_configuration_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_health_check_configuration_Set() const{
    return m_health_check_configuration_isSet;
}

bool OAIPauseServiceResponse_Service::is_health_check_configuration_Valid() const{
    return m_health_check_configuration_isValid;
}

OAIService_AutoScalingConfigurationSummary OAIPauseServiceResponse_Service::getAutoScalingConfigurationSummary() const {
    return m_auto_scaling_configuration_summary;
}
void OAIPauseServiceResponse_Service::setAutoScalingConfigurationSummary(const OAIService_AutoScalingConfigurationSummary &auto_scaling_configuration_summary) {
    m_auto_scaling_configuration_summary = auto_scaling_configuration_summary;
    m_auto_scaling_configuration_summary_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_auto_scaling_configuration_summary_Set() const{
    return m_auto_scaling_configuration_summary_isSet;
}

bool OAIPauseServiceResponse_Service::is_auto_scaling_configuration_summary_Valid() const{
    return m_auto_scaling_configuration_summary_isValid;
}

OAIService_NetworkConfiguration OAIPauseServiceResponse_Service::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIPauseServiceResponse_Service::setNetworkConfiguration(const OAIService_NetworkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIPauseServiceResponse_Service::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

OAIService_ObservabilityConfiguration OAIPauseServiceResponse_Service::getObservabilityConfiguration() const {
    return m_observability_configuration;
}
void OAIPauseServiceResponse_Service::setObservabilityConfiguration(const OAIService_ObservabilityConfiguration &observability_configuration) {
    m_observability_configuration = observability_configuration;
    m_observability_configuration_isSet = true;
}

bool OAIPauseServiceResponse_Service::is_observability_configuration_Set() const{
    return m_observability_configuration_isSet;
}

bool OAIPauseServiceResponse_Service::is_observability_configuration_Valid() const{
    return m_observability_configuration_isValid;
}

bool OAIPauseServiceResponse_Service::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_configuration_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_observability_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPauseServiceResponse_Service::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_name_isValid && m_service_id_isValid && m_service_arn_isValid && m_created_at_isValid && m_updated_at_isValid && m_status_isValid && m_source_configuration_isValid && m_instance_configuration_isValid && m_auto_scaling_configuration_summary_isValid && m_network_configuration_isValid && true;
}

} // namespace OpenAPI
