/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcDNSTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcDNSTarget::OAIVpcDNSTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcDNSTarget::OAIVpcDNSTarget() {
    this->initializeModel();
}

OAIVpcDNSTarget::~OAIVpcDNSTarget() {}

void OAIVpcDNSTarget::initializeModel() {

    m_vpc_ingress_connection_arn_isSet = false;
    m_vpc_ingress_connection_arn_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;
}

void OAIVpcDNSTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpcDNSTarget::fromJsonObject(QJsonObject json) {

    m_vpc_ingress_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_vpc_ingress_connection_arn, json[QString("VpcIngressConnectionArn")]);
    m_vpc_ingress_connection_arn_isSet = !json[QString("VpcIngressConnectionArn")].isNull() && m_vpc_ingress_connection_arn_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;
}

QString OAIVpcDNSTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpcDNSTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_ingress_connection_arn_isSet) {
        obj.insert(QString("VpcIngressConnectionArn"), ::OpenAPI::toJsonValue(m_vpc_ingress_connection_arn));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    return obj;
}

QString OAIVpcDNSTarget::getVpcIngressConnectionArn() const {
    return m_vpc_ingress_connection_arn;
}
void OAIVpcDNSTarget::setVpcIngressConnectionArn(const QString &vpc_ingress_connection_arn) {
    m_vpc_ingress_connection_arn = vpc_ingress_connection_arn;
    m_vpc_ingress_connection_arn_isSet = true;
}

bool OAIVpcDNSTarget::is_vpc_ingress_connection_arn_Set() const{
    return m_vpc_ingress_connection_arn_isSet;
}

bool OAIVpcDNSTarget::is_vpc_ingress_connection_arn_Valid() const{
    return m_vpc_ingress_connection_arn_isValid;
}

QString OAIVpcDNSTarget::getVpcId() const {
    return m_vpc_id;
}
void OAIVpcDNSTarget::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIVpcDNSTarget::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIVpcDNSTarget::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QString OAIVpcDNSTarget::getDomainName() const {
    return m_domain_name;
}
void OAIVpcDNSTarget::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIVpcDNSTarget::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIVpcDNSTarget::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

bool OAIVpcDNSTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_ingress_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpcDNSTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
