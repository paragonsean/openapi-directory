/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateCustomDomainResponse_CustomDomain.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateCustomDomainResponse_CustomDomain::OAIAssociateCustomDomainResponse_CustomDomain(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateCustomDomainResponse_CustomDomain::OAIAssociateCustomDomainResponse_CustomDomain() {
    this->initializeModel();
}

OAIAssociateCustomDomainResponse_CustomDomain::~OAIAssociateCustomDomainResponse_CustomDomain() {}

void OAIAssociateCustomDomainResponse_CustomDomain::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_enable_www_subdomain_isSet = false;
    m_enable_www_subdomain_isValid = false;

    m_certificate_validation_records_isSet = false;
    m_certificate_validation_records_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAssociateCustomDomainResponse_CustomDomain::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateCustomDomainResponse_CustomDomain::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_enable_www_subdomain_isValid = ::OpenAPI::fromJsonValue(m_enable_www_subdomain, json[QString("EnableWWWSubdomain")]);
    m_enable_www_subdomain_isSet = !json[QString("EnableWWWSubdomain")].isNull() && m_enable_www_subdomain_isValid;

    m_certificate_validation_records_isValid = ::OpenAPI::fromJsonValue(m_certificate_validation_records, json[QString("CertificateValidationRecords")]);
    m_certificate_validation_records_isSet = !json[QString("CertificateValidationRecords")].isNull() && m_certificate_validation_records_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIAssociateCustomDomainResponse_CustomDomain::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateCustomDomainResponse_CustomDomain::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_enable_www_subdomain_isSet) {
        obj.insert(QString("EnableWWWSubdomain"), ::OpenAPI::toJsonValue(m_enable_www_subdomain));
    }
    if (m_certificate_validation_records.isSet()) {
        obj.insert(QString("CertificateValidationRecords"), ::OpenAPI::toJsonValue(m_certificate_validation_records));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIAssociateCustomDomainResponse_CustomDomain::getDomainName() const {
    return m_domain_name;
}
void OAIAssociateCustomDomainResponse_CustomDomain::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIAssociateCustomDomainResponse_CustomDomain::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIAssociateCustomDomainResponse_CustomDomain::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

bool OAIAssociateCustomDomainResponse_CustomDomain::getEnableWwwSubdomain() const {
    return m_enable_www_subdomain;
}
void OAIAssociateCustomDomainResponse_CustomDomain::setEnableWwwSubdomain(const bool &enable_www_subdomain) {
    m_enable_www_subdomain = enable_www_subdomain;
    m_enable_www_subdomain_isSet = true;
}

bool OAIAssociateCustomDomainResponse_CustomDomain::is_enable_www_subdomain_Set() const{
    return m_enable_www_subdomain_isSet;
}

bool OAIAssociateCustomDomainResponse_CustomDomain::is_enable_www_subdomain_Valid() const{
    return m_enable_www_subdomain_isValid;
}

QList OAIAssociateCustomDomainResponse_CustomDomain::getCertificateValidationRecords() const {
    return m_certificate_validation_records;
}
void OAIAssociateCustomDomainResponse_CustomDomain::setCertificateValidationRecords(const QList &certificate_validation_records) {
    m_certificate_validation_records = certificate_validation_records;
    m_certificate_validation_records_isSet = true;
}

bool OAIAssociateCustomDomainResponse_CustomDomain::is_certificate_validation_records_Set() const{
    return m_certificate_validation_records_isSet;
}

bool OAIAssociateCustomDomainResponse_CustomDomain::is_certificate_validation_records_Valid() const{
    return m_certificate_validation_records_isValid;
}

OAICustomDomainAssociationStatus OAIAssociateCustomDomainResponse_CustomDomain::getStatus() const {
    return m_status;
}
void OAIAssociateCustomDomainResponse_CustomDomain::setStatus(const OAICustomDomainAssociationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAssociateCustomDomainResponse_CustomDomain::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAssociateCustomDomainResponse_CustomDomain::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAssociateCustomDomainResponse_CustomDomain::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_www_subdomain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_validation_records.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateCustomDomainResponse_CustomDomain::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_enable_www_subdomain_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
