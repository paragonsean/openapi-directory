/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateVpcIngressConnectionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateVpcIngressConnectionRequest::OAIUpdateVpcIngressConnectionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateVpcIngressConnectionRequest::OAIUpdateVpcIngressConnectionRequest() {
    this->initializeModel();
}

OAIUpdateVpcIngressConnectionRequest::~OAIUpdateVpcIngressConnectionRequest() {}

void OAIUpdateVpcIngressConnectionRequest::initializeModel() {

    m_vpc_ingress_connection_arn_isSet = false;
    m_vpc_ingress_connection_arn_isValid = false;

    m_ingress_vpc_configuration_isSet = false;
    m_ingress_vpc_configuration_isValid = false;
}

void OAIUpdateVpcIngressConnectionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateVpcIngressConnectionRequest::fromJsonObject(QJsonObject json) {

    m_vpc_ingress_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_vpc_ingress_connection_arn, json[QString("VpcIngressConnectionArn")]);
    m_vpc_ingress_connection_arn_isSet = !json[QString("VpcIngressConnectionArn")].isNull() && m_vpc_ingress_connection_arn_isValid;

    m_ingress_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_ingress_vpc_configuration, json[QString("IngressVpcConfiguration")]);
    m_ingress_vpc_configuration_isSet = !json[QString("IngressVpcConfiguration")].isNull() && m_ingress_vpc_configuration_isValid;
}

QString OAIUpdateVpcIngressConnectionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateVpcIngressConnectionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_ingress_connection_arn_isSet) {
        obj.insert(QString("VpcIngressConnectionArn"), ::OpenAPI::toJsonValue(m_vpc_ingress_connection_arn));
    }
    if (m_ingress_vpc_configuration.isSet()) {
        obj.insert(QString("IngressVpcConfiguration"), ::OpenAPI::toJsonValue(m_ingress_vpc_configuration));
    }
    return obj;
}

QString OAIUpdateVpcIngressConnectionRequest::getVpcIngressConnectionArn() const {
    return m_vpc_ingress_connection_arn;
}
void OAIUpdateVpcIngressConnectionRequest::setVpcIngressConnectionArn(const QString &vpc_ingress_connection_arn) {
    m_vpc_ingress_connection_arn = vpc_ingress_connection_arn;
    m_vpc_ingress_connection_arn_isSet = true;
}

bool OAIUpdateVpcIngressConnectionRequest::is_vpc_ingress_connection_arn_Set() const{
    return m_vpc_ingress_connection_arn_isSet;
}

bool OAIUpdateVpcIngressConnectionRequest::is_vpc_ingress_connection_arn_Valid() const{
    return m_vpc_ingress_connection_arn_isValid;
}

OAIUpdateVpcIngressConnectionRequest_IngressVpcConfiguration OAIUpdateVpcIngressConnectionRequest::getIngressVpcConfiguration() const {
    return m_ingress_vpc_configuration;
}
void OAIUpdateVpcIngressConnectionRequest::setIngressVpcConfiguration(const OAIUpdateVpcIngressConnectionRequest_IngressVpcConfiguration &ingress_vpc_configuration) {
    m_ingress_vpc_configuration = ingress_vpc_configuration;
    m_ingress_vpc_configuration_isSet = true;
}

bool OAIUpdateVpcIngressConnectionRequest::is_ingress_vpc_configuration_Set() const{
    return m_ingress_vpc_configuration_isSet;
}

bool OAIUpdateVpcIngressConnectionRequest::is_ingress_vpc_configuration_Valid() const{
    return m_ingress_vpc_configuration_isValid;
}

bool OAIUpdateVpcIngressConnectionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_ingress_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateVpcIngressConnectionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vpc_ingress_connection_arn_isValid && m_ingress_vpc_configuration_isValid && true;
}

} // namespace OpenAPI
