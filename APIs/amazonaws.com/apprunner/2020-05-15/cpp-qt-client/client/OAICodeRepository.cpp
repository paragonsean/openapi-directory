/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeRepository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeRepository::OAICodeRepository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeRepository::OAICodeRepository() {
    this->initializeModel();
}

OAICodeRepository::~OAICodeRepository() {}

void OAICodeRepository::initializeModel() {

    m_repository_url_isSet = false;
    m_repository_url_isValid = false;

    m_source_code_version_isSet = false;
    m_source_code_version_isValid = false;

    m_code_configuration_isSet = false;
    m_code_configuration_isValid = false;
}

void OAICodeRepository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeRepository::fromJsonObject(QJsonObject json) {

    m_repository_url_isValid = ::OpenAPI::fromJsonValue(m_repository_url, json[QString("RepositoryUrl")]);
    m_repository_url_isSet = !json[QString("RepositoryUrl")].isNull() && m_repository_url_isValid;

    m_source_code_version_isValid = ::OpenAPI::fromJsonValue(m_source_code_version, json[QString("SourceCodeVersion")]);
    m_source_code_version_isSet = !json[QString("SourceCodeVersion")].isNull() && m_source_code_version_isValid;

    m_code_configuration_isValid = ::OpenAPI::fromJsonValue(m_code_configuration, json[QString("CodeConfiguration")]);
    m_code_configuration_isSet = !json[QString("CodeConfiguration")].isNull() && m_code_configuration_isValid;
}

QString OAICodeRepository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeRepository::asJsonObject() const {
    QJsonObject obj;
    if (m_repository_url_isSet) {
        obj.insert(QString("RepositoryUrl"), ::OpenAPI::toJsonValue(m_repository_url));
    }
    if (m_source_code_version.isSet()) {
        obj.insert(QString("SourceCodeVersion"), ::OpenAPI::toJsonValue(m_source_code_version));
    }
    if (m_code_configuration.isSet()) {
        obj.insert(QString("CodeConfiguration"), ::OpenAPI::toJsonValue(m_code_configuration));
    }
    return obj;
}

QString OAICodeRepository::getRepositoryUrl() const {
    return m_repository_url;
}
void OAICodeRepository::setRepositoryUrl(const QString &repository_url) {
    m_repository_url = repository_url;
    m_repository_url_isSet = true;
}

bool OAICodeRepository::is_repository_url_Set() const{
    return m_repository_url_isSet;
}

bool OAICodeRepository::is_repository_url_Valid() const{
    return m_repository_url_isValid;
}

OAICodeRepository_SourceCodeVersion OAICodeRepository::getSourceCodeVersion() const {
    return m_source_code_version;
}
void OAICodeRepository::setSourceCodeVersion(const OAICodeRepository_SourceCodeVersion &source_code_version) {
    m_source_code_version = source_code_version;
    m_source_code_version_isSet = true;
}

bool OAICodeRepository::is_source_code_version_Set() const{
    return m_source_code_version_isSet;
}

bool OAICodeRepository::is_source_code_version_Valid() const{
    return m_source_code_version_isValid;
}

OAICodeRepository_CodeConfiguration OAICodeRepository::getCodeConfiguration() const {
    return m_code_configuration;
}
void OAICodeRepository::setCodeConfiguration(const OAICodeRepository_CodeConfiguration &code_configuration) {
    m_code_configuration = code_configuration;
    m_code_configuration_isSet = true;
}

bool OAICodeRepository::is_code_configuration_Set() const{
    return m_code_configuration_isSet;
}

bool OAICodeRepository::is_code_configuration_Valid() const{
    return m_code_configuration_isValid;
}

bool OAICodeRepository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repository_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_code_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeRepository::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repository_url_isValid && m_source_code_version_isValid && true;
}

} // namespace OpenAPI
