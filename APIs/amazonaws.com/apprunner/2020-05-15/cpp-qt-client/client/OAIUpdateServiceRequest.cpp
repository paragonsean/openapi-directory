/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServiceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServiceRequest::OAIUpdateServiceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServiceRequest::OAIUpdateServiceRequest() {
    this->initializeModel();
}

OAIUpdateServiceRequest::~OAIUpdateServiceRequest() {}

void OAIUpdateServiceRequest::initializeModel() {

    m_service_arn_isSet = false;
    m_service_arn_isValid = false;

    m_source_configuration_isSet = false;
    m_source_configuration_isValid = false;

    m_instance_configuration_isSet = false;
    m_instance_configuration_isValid = false;

    m_auto_scaling_configuration_arn_isSet = false;
    m_auto_scaling_configuration_arn_isValid = false;

    m_health_check_configuration_isSet = false;
    m_health_check_configuration_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_observability_configuration_isSet = false;
    m_observability_configuration_isValid = false;
}

void OAIUpdateServiceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServiceRequest::fromJsonObject(QJsonObject json) {

    m_service_arn_isValid = ::OpenAPI::fromJsonValue(m_service_arn, json[QString("ServiceArn")]);
    m_service_arn_isSet = !json[QString("ServiceArn")].isNull() && m_service_arn_isValid;

    m_source_configuration_isValid = ::OpenAPI::fromJsonValue(m_source_configuration, json[QString("SourceConfiguration")]);
    m_source_configuration_isSet = !json[QString("SourceConfiguration")].isNull() && m_source_configuration_isValid;

    m_instance_configuration_isValid = ::OpenAPI::fromJsonValue(m_instance_configuration, json[QString("InstanceConfiguration")]);
    m_instance_configuration_isSet = !json[QString("InstanceConfiguration")].isNull() && m_instance_configuration_isValid;

    m_auto_scaling_configuration_arn_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_configuration_arn, json[QString("AutoScalingConfigurationArn")]);
    m_auto_scaling_configuration_arn_isSet = !json[QString("AutoScalingConfigurationArn")].isNull() && m_auto_scaling_configuration_arn_isValid;

    m_health_check_configuration_isValid = ::OpenAPI::fromJsonValue(m_health_check_configuration, json[QString("HealthCheckConfiguration")]);
    m_health_check_configuration_isSet = !json[QString("HealthCheckConfiguration")].isNull() && m_health_check_configuration_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("NetworkConfiguration")]);
    m_network_configuration_isSet = !json[QString("NetworkConfiguration")].isNull() && m_network_configuration_isValid;

    m_observability_configuration_isValid = ::OpenAPI::fromJsonValue(m_observability_configuration, json[QString("ObservabilityConfiguration")]);
    m_observability_configuration_isSet = !json[QString("ObservabilityConfiguration")].isNull() && m_observability_configuration_isValid;
}

QString OAIUpdateServiceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServiceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_service_arn_isSet) {
        obj.insert(QString("ServiceArn"), ::OpenAPI::toJsonValue(m_service_arn));
    }
    if (m_source_configuration.isSet()) {
        obj.insert(QString("SourceConfiguration"), ::OpenAPI::toJsonValue(m_source_configuration));
    }
    if (m_instance_configuration.isSet()) {
        obj.insert(QString("InstanceConfiguration"), ::OpenAPI::toJsonValue(m_instance_configuration));
    }
    if (m_auto_scaling_configuration_arn_isSet) {
        obj.insert(QString("AutoScalingConfigurationArn"), ::OpenAPI::toJsonValue(m_auto_scaling_configuration_arn));
    }
    if (m_health_check_configuration.isSet()) {
        obj.insert(QString("HealthCheckConfiguration"), ::OpenAPI::toJsonValue(m_health_check_configuration));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("NetworkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_observability_configuration.isSet()) {
        obj.insert(QString("ObservabilityConfiguration"), ::OpenAPI::toJsonValue(m_observability_configuration));
    }
    return obj;
}

QString OAIUpdateServiceRequest::getServiceArn() const {
    return m_service_arn;
}
void OAIUpdateServiceRequest::setServiceArn(const QString &service_arn) {
    m_service_arn = service_arn;
    m_service_arn_isSet = true;
}

bool OAIUpdateServiceRequest::is_service_arn_Set() const{
    return m_service_arn_isSet;
}

bool OAIUpdateServiceRequest::is_service_arn_Valid() const{
    return m_service_arn_isValid;
}

OAIUpdateServiceRequest_SourceConfiguration OAIUpdateServiceRequest::getSourceConfiguration() const {
    return m_source_configuration;
}
void OAIUpdateServiceRequest::setSourceConfiguration(const OAIUpdateServiceRequest_SourceConfiguration &source_configuration) {
    m_source_configuration = source_configuration;
    m_source_configuration_isSet = true;
}

bool OAIUpdateServiceRequest::is_source_configuration_Set() const{
    return m_source_configuration_isSet;
}

bool OAIUpdateServiceRequest::is_source_configuration_Valid() const{
    return m_source_configuration_isValid;
}

OAIUpdateServiceRequest_InstanceConfiguration OAIUpdateServiceRequest::getInstanceConfiguration() const {
    return m_instance_configuration;
}
void OAIUpdateServiceRequest::setInstanceConfiguration(const OAIUpdateServiceRequest_InstanceConfiguration &instance_configuration) {
    m_instance_configuration = instance_configuration;
    m_instance_configuration_isSet = true;
}

bool OAIUpdateServiceRequest::is_instance_configuration_Set() const{
    return m_instance_configuration_isSet;
}

bool OAIUpdateServiceRequest::is_instance_configuration_Valid() const{
    return m_instance_configuration_isValid;
}

QString OAIUpdateServiceRequest::getAutoScalingConfigurationArn() const {
    return m_auto_scaling_configuration_arn;
}
void OAIUpdateServiceRequest::setAutoScalingConfigurationArn(const QString &auto_scaling_configuration_arn) {
    m_auto_scaling_configuration_arn = auto_scaling_configuration_arn;
    m_auto_scaling_configuration_arn_isSet = true;
}

bool OAIUpdateServiceRequest::is_auto_scaling_configuration_arn_Set() const{
    return m_auto_scaling_configuration_arn_isSet;
}

bool OAIUpdateServiceRequest::is_auto_scaling_configuration_arn_Valid() const{
    return m_auto_scaling_configuration_arn_isValid;
}

OAICreateServiceRequest_HealthCheckConfiguration OAIUpdateServiceRequest::getHealthCheckConfiguration() const {
    return m_health_check_configuration;
}
void OAIUpdateServiceRequest::setHealthCheckConfiguration(const OAICreateServiceRequest_HealthCheckConfiguration &health_check_configuration) {
    m_health_check_configuration = health_check_configuration;
    m_health_check_configuration_isSet = true;
}

bool OAIUpdateServiceRequest::is_health_check_configuration_Set() const{
    return m_health_check_configuration_isSet;
}

bool OAIUpdateServiceRequest::is_health_check_configuration_Valid() const{
    return m_health_check_configuration_isValid;
}

OAICreateServiceRequest_NetworkConfiguration OAIUpdateServiceRequest::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIUpdateServiceRequest::setNetworkConfiguration(const OAICreateServiceRequest_NetworkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIUpdateServiceRequest::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIUpdateServiceRequest::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

OAICreateServiceRequest_ObservabilityConfiguration OAIUpdateServiceRequest::getObservabilityConfiguration() const {
    return m_observability_configuration;
}
void OAIUpdateServiceRequest::setObservabilityConfiguration(const OAICreateServiceRequest_ObservabilityConfiguration &observability_configuration) {
    m_observability_configuration = observability_configuration;
    m_observability_configuration_isSet = true;
}

bool OAIUpdateServiceRequest::is_observability_configuration_Set() const{
    return m_observability_configuration_isSet;
}

bool OAIUpdateServiceRequest::is_observability_configuration_Valid() const{
    return m_observability_configuration_isValid;
}

bool OAIUpdateServiceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_configuration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_observability_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServiceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_arn_isValid && true;
}

} // namespace OpenAPI
