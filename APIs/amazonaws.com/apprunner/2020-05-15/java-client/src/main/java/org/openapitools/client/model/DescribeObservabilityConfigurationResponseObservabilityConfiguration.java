/*
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ObservabilityConfigurationStatus;
import org.openapitools.client.model.ObservabilityConfigurationTraceConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeObservabilityConfigurationResponseObservabilityConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:30.695381-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeObservabilityConfigurationResponseObservabilityConfiguration {
  public static final String SERIALIZED_NAME_OBSERVABILITY_CONFIGURATION_ARN = "ObservabilityConfigurationArn";
  @SerializedName(SERIALIZED_NAME_OBSERVABILITY_CONFIGURATION_ARN)
  private String observabilityConfigurationArn;

  public static final String SERIALIZED_NAME_OBSERVABILITY_CONFIGURATION_NAME = "ObservabilityConfigurationName";
  @SerializedName(SERIALIZED_NAME_OBSERVABILITY_CONFIGURATION_NAME)
  private String observabilityConfigurationName;

  public static final String SERIALIZED_NAME_TRACE_CONFIGURATION = "TraceConfiguration";
  @SerializedName(SERIALIZED_NAME_TRACE_CONFIGURATION)
  private ObservabilityConfigurationTraceConfiguration traceConfiguration;

  public static final String SERIALIZED_NAME_OBSERVABILITY_CONFIGURATION_REVISION = "ObservabilityConfigurationRevision";
  @SerializedName(SERIALIZED_NAME_OBSERVABILITY_CONFIGURATION_REVISION)
  private Integer observabilityConfigurationRevision;

  public static final String SERIALIZED_NAME_LATEST = "Latest";
  @SerializedName(SERIALIZED_NAME_LATEST)
  private Boolean latest;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ObservabilityConfigurationStatus status;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "DeletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public DescribeObservabilityConfigurationResponseObservabilityConfiguration() {
  }

  public DescribeObservabilityConfigurationResponseObservabilityConfiguration observabilityConfigurationArn(String observabilityConfigurationArn) {
    this.observabilityConfigurationArn = observabilityConfigurationArn;
    return this;
  }

  /**
   * Get observabilityConfigurationArn
   * @return observabilityConfigurationArn
   */
  @javax.annotation.Nullable
  public String getObservabilityConfigurationArn() {
    return observabilityConfigurationArn;
  }

  public void setObservabilityConfigurationArn(String observabilityConfigurationArn) {
    this.observabilityConfigurationArn = observabilityConfigurationArn;
  }


  public DescribeObservabilityConfigurationResponseObservabilityConfiguration observabilityConfigurationName(String observabilityConfigurationName) {
    this.observabilityConfigurationName = observabilityConfigurationName;
    return this;
  }

  /**
   * Get observabilityConfigurationName
   * @return observabilityConfigurationName
   */
  @javax.annotation.Nullable
  public String getObservabilityConfigurationName() {
    return observabilityConfigurationName;
  }

  public void setObservabilityConfigurationName(String observabilityConfigurationName) {
    this.observabilityConfigurationName = observabilityConfigurationName;
  }


  public DescribeObservabilityConfigurationResponseObservabilityConfiguration traceConfiguration(ObservabilityConfigurationTraceConfiguration traceConfiguration) {
    this.traceConfiguration = traceConfiguration;
    return this;
  }

  /**
   * Get traceConfiguration
   * @return traceConfiguration
   */
  @javax.annotation.Nullable
  public ObservabilityConfigurationTraceConfiguration getTraceConfiguration() {
    return traceConfiguration;
  }

  public void setTraceConfiguration(ObservabilityConfigurationTraceConfiguration traceConfiguration) {
    this.traceConfiguration = traceConfiguration;
  }


  public DescribeObservabilityConfigurationResponseObservabilityConfiguration observabilityConfigurationRevision(Integer observabilityConfigurationRevision) {
    this.observabilityConfigurationRevision = observabilityConfigurationRevision;
    return this;
  }

  /**
   * Get observabilityConfigurationRevision
   * @return observabilityConfigurationRevision
   */
  @javax.annotation.Nullable
  public Integer getObservabilityConfigurationRevision() {
    return observabilityConfigurationRevision;
  }

  public void setObservabilityConfigurationRevision(Integer observabilityConfigurationRevision) {
    this.observabilityConfigurationRevision = observabilityConfigurationRevision;
  }


  public DescribeObservabilityConfigurationResponseObservabilityConfiguration latest(Boolean latest) {
    this.latest = latest;
    return this;
  }

  /**
   * Get latest
   * @return latest
   */
  @javax.annotation.Nullable
  public Boolean getLatest() {
    return latest;
  }

  public void setLatest(Boolean latest) {
    this.latest = latest;
  }


  public DescribeObservabilityConfigurationResponseObservabilityConfiguration status(ObservabilityConfigurationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ObservabilityConfigurationStatus getStatus() {
    return status;
  }

  public void setStatus(ObservabilityConfigurationStatus status) {
    this.status = status;
  }


  public DescribeObservabilityConfigurationResponseObservabilityConfiguration createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DescribeObservabilityConfigurationResponseObservabilityConfiguration deletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * Get deletedAt
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeObservabilityConfigurationResponseObservabilityConfiguration describeObservabilityConfigurationResponseObservabilityConfiguration = (DescribeObservabilityConfigurationResponseObservabilityConfiguration) o;
    return Objects.equals(this.observabilityConfigurationArn, describeObservabilityConfigurationResponseObservabilityConfiguration.observabilityConfigurationArn) &&
        Objects.equals(this.observabilityConfigurationName, describeObservabilityConfigurationResponseObservabilityConfiguration.observabilityConfigurationName) &&
        Objects.equals(this.traceConfiguration, describeObservabilityConfigurationResponseObservabilityConfiguration.traceConfiguration) &&
        Objects.equals(this.observabilityConfigurationRevision, describeObservabilityConfigurationResponseObservabilityConfiguration.observabilityConfigurationRevision) &&
        Objects.equals(this.latest, describeObservabilityConfigurationResponseObservabilityConfiguration.latest) &&
        Objects.equals(this.status, describeObservabilityConfigurationResponseObservabilityConfiguration.status) &&
        Objects.equals(this.createdAt, describeObservabilityConfigurationResponseObservabilityConfiguration.createdAt) &&
        Objects.equals(this.deletedAt, describeObservabilityConfigurationResponseObservabilityConfiguration.deletedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(observabilityConfigurationArn, observabilityConfigurationName, traceConfiguration, observabilityConfigurationRevision, latest, status, createdAt, deletedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeObservabilityConfigurationResponseObservabilityConfiguration {\n");
    sb.append("    observabilityConfigurationArn: ").append(toIndentedString(observabilityConfigurationArn)).append("\n");
    sb.append("    observabilityConfigurationName: ").append(toIndentedString(observabilityConfigurationName)).append("\n");
    sb.append("    traceConfiguration: ").append(toIndentedString(traceConfiguration)).append("\n");
    sb.append("    observabilityConfigurationRevision: ").append(toIndentedString(observabilityConfigurationRevision)).append("\n");
    sb.append("    latest: ").append(toIndentedString(latest)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ObservabilityConfigurationArn");
    openapiFields.add("ObservabilityConfigurationName");
    openapiFields.add("TraceConfiguration");
    openapiFields.add("ObservabilityConfigurationRevision");
    openapiFields.add("Latest");
    openapiFields.add("Status");
    openapiFields.add("CreatedAt");
    openapiFields.add("DeletedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeObservabilityConfigurationResponseObservabilityConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeObservabilityConfigurationResponseObservabilityConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeObservabilityConfigurationResponseObservabilityConfiguration is not found in the empty JSON string", DescribeObservabilityConfigurationResponseObservabilityConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeObservabilityConfigurationResponseObservabilityConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeObservabilityConfigurationResponseObservabilityConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ObservabilityConfigurationArn`
      if (jsonObj.get("ObservabilityConfigurationArn") != null && !jsonObj.get("ObservabilityConfigurationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ObservabilityConfigurationArn"));
      }
      // validate the optional field `ObservabilityConfigurationName`
      if (jsonObj.get("ObservabilityConfigurationName") != null && !jsonObj.get("ObservabilityConfigurationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ObservabilityConfigurationName"));
      }
      // validate the optional field `TraceConfiguration`
      if (jsonObj.get("TraceConfiguration") != null && !jsonObj.get("TraceConfiguration").isJsonNull()) {
        ObservabilityConfigurationTraceConfiguration.validateJsonElement(jsonObj.get("TraceConfiguration"));
      }
      // validate the optional field `ObservabilityConfigurationRevision`
      if (jsonObj.get("ObservabilityConfigurationRevision") != null && !jsonObj.get("ObservabilityConfigurationRevision").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ObservabilityConfigurationRevision"));
      }
      // validate the optional field `Latest`
      if (jsonObj.get("Latest") != null && !jsonObj.get("Latest").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Latest"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ObservabilityConfigurationStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `DeletedAt`
      if (jsonObj.get("DeletedAt") != null && !jsonObj.get("DeletedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DeletedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeObservabilityConfigurationResponseObservabilityConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeObservabilityConfigurationResponseObservabilityConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeObservabilityConfigurationResponseObservabilityConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeObservabilityConfigurationResponseObservabilityConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeObservabilityConfigurationResponseObservabilityConfiguration>() {
           @Override
           public void write(JsonWriter out, DescribeObservabilityConfigurationResponseObservabilityConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeObservabilityConfigurationResponseObservabilityConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeObservabilityConfigurationResponseObservabilityConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeObservabilityConfigurationResponseObservabilityConfiguration
   * @throws IOException if the JSON string is invalid with respect to DescribeObservabilityConfigurationResponseObservabilityConfiguration
   */
  public static DescribeObservabilityConfigurationResponseObservabilityConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeObservabilityConfigurationResponseObservabilityConfiguration.class);
  }

  /**
   * Convert an instance of DescribeObservabilityConfigurationResponseObservabilityConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

