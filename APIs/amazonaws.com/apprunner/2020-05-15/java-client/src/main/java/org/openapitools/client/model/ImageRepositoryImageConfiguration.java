/*
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImageRepositoryImageConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:30.695381-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageRepositoryImageConfiguration {
  public static final String SERIALIZED_NAME_RUNTIME_ENVIRONMENT_VARIABLES = "RuntimeEnvironmentVariables";
  @SerializedName(SERIALIZED_NAME_RUNTIME_ENVIRONMENT_VARIABLES)
  private Map runtimeEnvironmentVariables;

  public static final String SERIALIZED_NAME_START_COMMAND = "StartCommand";
  @SerializedName(SERIALIZED_NAME_START_COMMAND)
  private String startCommand;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private String port;

  public static final String SERIALIZED_NAME_RUNTIME_ENVIRONMENT_SECRETS = "RuntimeEnvironmentSecrets";
  @SerializedName(SERIALIZED_NAME_RUNTIME_ENVIRONMENT_SECRETS)
  private Map runtimeEnvironmentSecrets;

  public ImageRepositoryImageConfiguration() {
  }

  public ImageRepositoryImageConfiguration runtimeEnvironmentVariables(Map runtimeEnvironmentVariables) {
    this.runtimeEnvironmentVariables = runtimeEnvironmentVariables;
    return this;
  }

  /**
   * Get runtimeEnvironmentVariables
   * @return runtimeEnvironmentVariables
   */
  @javax.annotation.Nullable
  public Map getRuntimeEnvironmentVariables() {
    return runtimeEnvironmentVariables;
  }

  public void setRuntimeEnvironmentVariables(Map runtimeEnvironmentVariables) {
    this.runtimeEnvironmentVariables = runtimeEnvironmentVariables;
  }


  public ImageRepositoryImageConfiguration startCommand(String startCommand) {
    this.startCommand = startCommand;
    return this;
  }

  /**
   * Get startCommand
   * @return startCommand
   */
  @javax.annotation.Nullable
  public String getStartCommand() {
    return startCommand;
  }

  public void setStartCommand(String startCommand) {
    this.startCommand = startCommand;
  }


  public ImageRepositoryImageConfiguration port(String port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public String getPort() {
    return port;
  }

  public void setPort(String port) {
    this.port = port;
  }


  public ImageRepositoryImageConfiguration runtimeEnvironmentSecrets(Map runtimeEnvironmentSecrets) {
    this.runtimeEnvironmentSecrets = runtimeEnvironmentSecrets;
    return this;
  }

  /**
   * Get runtimeEnvironmentSecrets
   * @return runtimeEnvironmentSecrets
   */
  @javax.annotation.Nullable
  public Map getRuntimeEnvironmentSecrets() {
    return runtimeEnvironmentSecrets;
  }

  public void setRuntimeEnvironmentSecrets(Map runtimeEnvironmentSecrets) {
    this.runtimeEnvironmentSecrets = runtimeEnvironmentSecrets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageRepositoryImageConfiguration imageRepositoryImageConfiguration = (ImageRepositoryImageConfiguration) o;
    return Objects.equals(this.runtimeEnvironmentVariables, imageRepositoryImageConfiguration.runtimeEnvironmentVariables) &&
        Objects.equals(this.startCommand, imageRepositoryImageConfiguration.startCommand) &&
        Objects.equals(this.port, imageRepositoryImageConfiguration.port) &&
        Objects.equals(this.runtimeEnvironmentSecrets, imageRepositoryImageConfiguration.runtimeEnvironmentSecrets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runtimeEnvironmentVariables, startCommand, port, runtimeEnvironmentSecrets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageRepositoryImageConfiguration {\n");
    sb.append("    runtimeEnvironmentVariables: ").append(toIndentedString(runtimeEnvironmentVariables)).append("\n");
    sb.append("    startCommand: ").append(toIndentedString(startCommand)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    runtimeEnvironmentSecrets: ").append(toIndentedString(runtimeEnvironmentSecrets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RuntimeEnvironmentVariables");
    openapiFields.add("StartCommand");
    openapiFields.add("Port");
    openapiFields.add("RuntimeEnvironmentSecrets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageRepositoryImageConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageRepositoryImageConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageRepositoryImageConfiguration is not found in the empty JSON string", ImageRepositoryImageConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageRepositoryImageConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageRepositoryImageConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RuntimeEnvironmentVariables`
      if (jsonObj.get("RuntimeEnvironmentVariables") != null && !jsonObj.get("RuntimeEnvironmentVariables").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("RuntimeEnvironmentVariables"));
      }
      // validate the optional field `StartCommand`
      if (jsonObj.get("StartCommand") != null && !jsonObj.get("StartCommand").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StartCommand"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `RuntimeEnvironmentSecrets`
      if (jsonObj.get("RuntimeEnvironmentSecrets") != null && !jsonObj.get("RuntimeEnvironmentSecrets").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("RuntimeEnvironmentSecrets"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageRepositoryImageConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageRepositoryImageConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageRepositoryImageConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageRepositoryImageConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageRepositoryImageConfiguration>() {
           @Override
           public void write(JsonWriter out, ImageRepositoryImageConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageRepositoryImageConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageRepositoryImageConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageRepositoryImageConfiguration
   * @throws IOException if the JSON string is invalid with respect to ImageRepositoryImageConfiguration
   */
  public static ImageRepositoryImageConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageRepositoryImageConfiguration.class);
  }

  /**
   * Convert an instance of ImageRepositoryImageConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

