/*
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateVpcIngressConnectionRequestIngressVpcConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateVpcIngressConnectionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:30.695381-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateVpcIngressConnectionRequest {
  public static final String SERIALIZED_NAME_VPC_INGRESS_CONNECTION_ARN = "VpcIngressConnectionArn";
  @SerializedName(SERIALIZED_NAME_VPC_INGRESS_CONNECTION_ARN)
  private String vpcIngressConnectionArn;

  public static final String SERIALIZED_NAME_INGRESS_VPC_CONFIGURATION = "IngressVpcConfiguration";
  @SerializedName(SERIALIZED_NAME_INGRESS_VPC_CONFIGURATION)
  private UpdateVpcIngressConnectionRequestIngressVpcConfiguration ingressVpcConfiguration;

  public UpdateVpcIngressConnectionRequest() {
  }

  public UpdateVpcIngressConnectionRequest vpcIngressConnectionArn(String vpcIngressConnectionArn) {
    this.vpcIngressConnectionArn = vpcIngressConnectionArn;
    return this;
  }

  /**
   * Get vpcIngressConnectionArn
   * @return vpcIngressConnectionArn
   */
  @javax.annotation.Nonnull
  public String getVpcIngressConnectionArn() {
    return vpcIngressConnectionArn;
  }

  public void setVpcIngressConnectionArn(String vpcIngressConnectionArn) {
    this.vpcIngressConnectionArn = vpcIngressConnectionArn;
  }


  public UpdateVpcIngressConnectionRequest ingressVpcConfiguration(UpdateVpcIngressConnectionRequestIngressVpcConfiguration ingressVpcConfiguration) {
    this.ingressVpcConfiguration = ingressVpcConfiguration;
    return this;
  }

  /**
   * Get ingressVpcConfiguration
   * @return ingressVpcConfiguration
   */
  @javax.annotation.Nonnull
  public UpdateVpcIngressConnectionRequestIngressVpcConfiguration getIngressVpcConfiguration() {
    return ingressVpcConfiguration;
  }

  public void setIngressVpcConfiguration(UpdateVpcIngressConnectionRequestIngressVpcConfiguration ingressVpcConfiguration) {
    this.ingressVpcConfiguration = ingressVpcConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateVpcIngressConnectionRequest updateVpcIngressConnectionRequest = (UpdateVpcIngressConnectionRequest) o;
    return Objects.equals(this.vpcIngressConnectionArn, updateVpcIngressConnectionRequest.vpcIngressConnectionArn) &&
        Objects.equals(this.ingressVpcConfiguration, updateVpcIngressConnectionRequest.ingressVpcConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vpcIngressConnectionArn, ingressVpcConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateVpcIngressConnectionRequest {\n");
    sb.append("    vpcIngressConnectionArn: ").append(toIndentedString(vpcIngressConnectionArn)).append("\n");
    sb.append("    ingressVpcConfiguration: ").append(toIndentedString(ingressVpcConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VpcIngressConnectionArn");
    openapiFields.add("IngressVpcConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("VpcIngressConnectionArn");
    openapiRequiredFields.add("IngressVpcConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateVpcIngressConnectionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateVpcIngressConnectionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateVpcIngressConnectionRequest is not found in the empty JSON string", UpdateVpcIngressConnectionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateVpcIngressConnectionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateVpcIngressConnectionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateVpcIngressConnectionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `VpcIngressConnectionArn`
      String.validateJsonElement(jsonObj.get("VpcIngressConnectionArn"));
      // validate the required field `IngressVpcConfiguration`
      UpdateVpcIngressConnectionRequestIngressVpcConfiguration.validateJsonElement(jsonObj.get("IngressVpcConfiguration"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateVpcIngressConnectionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateVpcIngressConnectionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateVpcIngressConnectionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateVpcIngressConnectionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateVpcIngressConnectionRequest>() {
           @Override
           public void write(JsonWriter out, UpdateVpcIngressConnectionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateVpcIngressConnectionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateVpcIngressConnectionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateVpcIngressConnectionRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateVpcIngressConnectionRequest
   */
  public static UpdateVpcIngressConnectionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateVpcIngressConnectionRequest.class);
  }

  /**
   * Convert an instance of UpdateVpcIngressConnectionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

