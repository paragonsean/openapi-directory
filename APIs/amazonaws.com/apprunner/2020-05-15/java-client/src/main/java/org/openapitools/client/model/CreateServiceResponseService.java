/*
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ServiceAutoScalingConfigurationSummary;
import org.openapitools.client.model.ServiceEncryptionConfiguration;
import org.openapitools.client.model.ServiceHealthCheckConfiguration;
import org.openapitools.client.model.ServiceInstanceConfiguration;
import org.openapitools.client.model.ServiceNetworkConfiguration;
import org.openapitools.client.model.ServiceObservabilityConfiguration;
import org.openapitools.client.model.ServiceSourceConfiguration;
import org.openapitools.client.model.ServiceStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateServiceResponseService
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:30.695381-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateServiceResponseService {
  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SERVICE_ID = "ServiceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_SERVICE_ARN = "ServiceArn";
  @SerializedName(SERIALIZED_NAME_SERVICE_ARN)
  private String serviceArn;

  public static final String SERIALIZED_NAME_SERVICE_URL = "ServiceUrl";
  @SerializedName(SERIALIZED_NAME_SERVICE_URL)
  private String serviceUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "UpdatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "DeletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ServiceStatus status;

  public static final String SERIALIZED_NAME_SOURCE_CONFIGURATION = "SourceConfiguration";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONFIGURATION)
  private ServiceSourceConfiguration sourceConfiguration;

  public static final String SERIALIZED_NAME_INSTANCE_CONFIGURATION = "InstanceConfiguration";
  @SerializedName(SERIALIZED_NAME_INSTANCE_CONFIGURATION)
  private ServiceInstanceConfiguration instanceConfiguration;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIGURATION = "EncryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIGURATION)
  private ServiceEncryptionConfiguration encryptionConfiguration;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_CONFIGURATION = "HealthCheckConfiguration";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_CONFIGURATION)
  private ServiceHealthCheckConfiguration healthCheckConfiguration;

  public static final String SERIALIZED_NAME_AUTO_SCALING_CONFIGURATION_SUMMARY = "AutoScalingConfigurationSummary";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALING_CONFIGURATION_SUMMARY)
  private ServiceAutoScalingConfigurationSummary autoScalingConfigurationSummary;

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATION = "NetworkConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATION)
  private ServiceNetworkConfiguration networkConfiguration;

  public static final String SERIALIZED_NAME_OBSERVABILITY_CONFIGURATION = "ObservabilityConfiguration";
  @SerializedName(SERIALIZED_NAME_OBSERVABILITY_CONFIGURATION)
  private ServiceObservabilityConfiguration observabilityConfiguration;

  public CreateServiceResponseService() {
  }

  public CreateServiceResponseService serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nonnull
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public CreateServiceResponseService serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Get serviceId
   * @return serviceId
   */
  @javax.annotation.Nonnull
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public CreateServiceResponseService serviceArn(String serviceArn) {
    this.serviceArn = serviceArn;
    return this;
  }

  /**
   * Get serviceArn
   * @return serviceArn
   */
  @javax.annotation.Nonnull
  public String getServiceArn() {
    return serviceArn;
  }

  public void setServiceArn(String serviceArn) {
    this.serviceArn = serviceArn;
  }


  public CreateServiceResponseService serviceUrl(String serviceUrl) {
    this.serviceUrl = serviceUrl;
    return this;
  }

  /**
   * Get serviceUrl
   * @return serviceUrl
   */
  @javax.annotation.Nullable
  public String getServiceUrl() {
    return serviceUrl;
  }

  public void setServiceUrl(String serviceUrl) {
    this.serviceUrl = serviceUrl;
  }


  public CreateServiceResponseService createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CreateServiceResponseService updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CreateServiceResponseService deletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * Get deletedAt
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  public CreateServiceResponseService status(ServiceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ServiceStatus getStatus() {
    return status;
  }

  public void setStatus(ServiceStatus status) {
    this.status = status;
  }


  public CreateServiceResponseService sourceConfiguration(ServiceSourceConfiguration sourceConfiguration) {
    this.sourceConfiguration = sourceConfiguration;
    return this;
  }

  /**
   * Get sourceConfiguration
   * @return sourceConfiguration
   */
  @javax.annotation.Nonnull
  public ServiceSourceConfiguration getSourceConfiguration() {
    return sourceConfiguration;
  }

  public void setSourceConfiguration(ServiceSourceConfiguration sourceConfiguration) {
    this.sourceConfiguration = sourceConfiguration;
  }


  public CreateServiceResponseService instanceConfiguration(ServiceInstanceConfiguration instanceConfiguration) {
    this.instanceConfiguration = instanceConfiguration;
    return this;
  }

  /**
   * Get instanceConfiguration
   * @return instanceConfiguration
   */
  @javax.annotation.Nonnull
  public ServiceInstanceConfiguration getInstanceConfiguration() {
    return instanceConfiguration;
  }

  public void setInstanceConfiguration(ServiceInstanceConfiguration instanceConfiguration) {
    this.instanceConfiguration = instanceConfiguration;
  }


  public CreateServiceResponseService encryptionConfiguration(ServiceEncryptionConfiguration encryptionConfiguration) {
    this.encryptionConfiguration = encryptionConfiguration;
    return this;
  }

  /**
   * Get encryptionConfiguration
   * @return encryptionConfiguration
   */
  @javax.annotation.Nullable
  public ServiceEncryptionConfiguration getEncryptionConfiguration() {
    return encryptionConfiguration;
  }

  public void setEncryptionConfiguration(ServiceEncryptionConfiguration encryptionConfiguration) {
    this.encryptionConfiguration = encryptionConfiguration;
  }


  public CreateServiceResponseService healthCheckConfiguration(ServiceHealthCheckConfiguration healthCheckConfiguration) {
    this.healthCheckConfiguration = healthCheckConfiguration;
    return this;
  }

  /**
   * Get healthCheckConfiguration
   * @return healthCheckConfiguration
   */
  @javax.annotation.Nullable
  public ServiceHealthCheckConfiguration getHealthCheckConfiguration() {
    return healthCheckConfiguration;
  }

  public void setHealthCheckConfiguration(ServiceHealthCheckConfiguration healthCheckConfiguration) {
    this.healthCheckConfiguration = healthCheckConfiguration;
  }


  public CreateServiceResponseService autoScalingConfigurationSummary(ServiceAutoScalingConfigurationSummary autoScalingConfigurationSummary) {
    this.autoScalingConfigurationSummary = autoScalingConfigurationSummary;
    return this;
  }

  /**
   * Get autoScalingConfigurationSummary
   * @return autoScalingConfigurationSummary
   */
  @javax.annotation.Nonnull
  public ServiceAutoScalingConfigurationSummary getAutoScalingConfigurationSummary() {
    return autoScalingConfigurationSummary;
  }

  public void setAutoScalingConfigurationSummary(ServiceAutoScalingConfigurationSummary autoScalingConfigurationSummary) {
    this.autoScalingConfigurationSummary = autoScalingConfigurationSummary;
  }


  public CreateServiceResponseService networkConfiguration(ServiceNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
    return this;
  }

  /**
   * Get networkConfiguration
   * @return networkConfiguration
   */
  @javax.annotation.Nonnull
  public ServiceNetworkConfiguration getNetworkConfiguration() {
    return networkConfiguration;
  }

  public void setNetworkConfiguration(ServiceNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
  }


  public CreateServiceResponseService observabilityConfiguration(ServiceObservabilityConfiguration observabilityConfiguration) {
    this.observabilityConfiguration = observabilityConfiguration;
    return this;
  }

  /**
   * Get observabilityConfiguration
   * @return observabilityConfiguration
   */
  @javax.annotation.Nullable
  public ServiceObservabilityConfiguration getObservabilityConfiguration() {
    return observabilityConfiguration;
  }

  public void setObservabilityConfiguration(ServiceObservabilityConfiguration observabilityConfiguration) {
    this.observabilityConfiguration = observabilityConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateServiceResponseService createServiceResponseService = (CreateServiceResponseService) o;
    return Objects.equals(this.serviceName, createServiceResponseService.serviceName) &&
        Objects.equals(this.serviceId, createServiceResponseService.serviceId) &&
        Objects.equals(this.serviceArn, createServiceResponseService.serviceArn) &&
        Objects.equals(this.serviceUrl, createServiceResponseService.serviceUrl) &&
        Objects.equals(this.createdAt, createServiceResponseService.createdAt) &&
        Objects.equals(this.updatedAt, createServiceResponseService.updatedAt) &&
        Objects.equals(this.deletedAt, createServiceResponseService.deletedAt) &&
        Objects.equals(this.status, createServiceResponseService.status) &&
        Objects.equals(this.sourceConfiguration, createServiceResponseService.sourceConfiguration) &&
        Objects.equals(this.instanceConfiguration, createServiceResponseService.instanceConfiguration) &&
        Objects.equals(this.encryptionConfiguration, createServiceResponseService.encryptionConfiguration) &&
        Objects.equals(this.healthCheckConfiguration, createServiceResponseService.healthCheckConfiguration) &&
        Objects.equals(this.autoScalingConfigurationSummary, createServiceResponseService.autoScalingConfigurationSummary) &&
        Objects.equals(this.networkConfiguration, createServiceResponseService.networkConfiguration) &&
        Objects.equals(this.observabilityConfiguration, createServiceResponseService.observabilityConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceName, serviceId, serviceArn, serviceUrl, createdAt, updatedAt, deletedAt, status, sourceConfiguration, instanceConfiguration, encryptionConfiguration, healthCheckConfiguration, autoScalingConfigurationSummary, networkConfiguration, observabilityConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateServiceResponseService {\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    serviceArn: ").append(toIndentedString(serviceArn)).append("\n");
    sb.append("    serviceUrl: ").append(toIndentedString(serviceUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    sourceConfiguration: ").append(toIndentedString(sourceConfiguration)).append("\n");
    sb.append("    instanceConfiguration: ").append(toIndentedString(instanceConfiguration)).append("\n");
    sb.append("    encryptionConfiguration: ").append(toIndentedString(encryptionConfiguration)).append("\n");
    sb.append("    healthCheckConfiguration: ").append(toIndentedString(healthCheckConfiguration)).append("\n");
    sb.append("    autoScalingConfigurationSummary: ").append(toIndentedString(autoScalingConfigurationSummary)).append("\n");
    sb.append("    networkConfiguration: ").append(toIndentedString(networkConfiguration)).append("\n");
    sb.append("    observabilityConfiguration: ").append(toIndentedString(observabilityConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ServiceName");
    openapiFields.add("ServiceId");
    openapiFields.add("ServiceArn");
    openapiFields.add("ServiceUrl");
    openapiFields.add("CreatedAt");
    openapiFields.add("UpdatedAt");
    openapiFields.add("DeletedAt");
    openapiFields.add("Status");
    openapiFields.add("SourceConfiguration");
    openapiFields.add("InstanceConfiguration");
    openapiFields.add("EncryptionConfiguration");
    openapiFields.add("HealthCheckConfiguration");
    openapiFields.add("AutoScalingConfigurationSummary");
    openapiFields.add("NetworkConfiguration");
    openapiFields.add("ObservabilityConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ServiceName");
    openapiRequiredFields.add("ServiceId");
    openapiRequiredFields.add("ServiceArn");
    openapiRequiredFields.add("CreatedAt");
    openapiRequiredFields.add("UpdatedAt");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("SourceConfiguration");
    openapiRequiredFields.add("InstanceConfiguration");
    openapiRequiredFields.add("AutoScalingConfigurationSummary");
    openapiRequiredFields.add("NetworkConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateServiceResponseService
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateServiceResponseService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateServiceResponseService is not found in the empty JSON string", CreateServiceResponseService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateServiceResponseService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateServiceResponseService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateServiceResponseService.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ServiceName`
      String.validateJsonElement(jsonObj.get("ServiceName"));
      // validate the required field `ServiceId`
      String.validateJsonElement(jsonObj.get("ServiceId"));
      // validate the required field `ServiceArn`
      String.validateJsonElement(jsonObj.get("ServiceArn"));
      // validate the optional field `ServiceUrl`
      if (jsonObj.get("ServiceUrl") != null && !jsonObj.get("ServiceUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceUrl"));
      }
      // validate the required field `CreatedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      // validate the required field `UpdatedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("UpdatedAt"));
      // validate the optional field `DeletedAt`
      if (jsonObj.get("DeletedAt") != null && !jsonObj.get("DeletedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DeletedAt"));
      }
      // validate the required field `Status`
      ServiceStatus.validateJsonElement(jsonObj.get("Status"));
      // validate the required field `SourceConfiguration`
      ServiceSourceConfiguration.validateJsonElement(jsonObj.get("SourceConfiguration"));
      // validate the required field `InstanceConfiguration`
      ServiceInstanceConfiguration.validateJsonElement(jsonObj.get("InstanceConfiguration"));
      // validate the optional field `EncryptionConfiguration`
      if (jsonObj.get("EncryptionConfiguration") != null && !jsonObj.get("EncryptionConfiguration").isJsonNull()) {
        ServiceEncryptionConfiguration.validateJsonElement(jsonObj.get("EncryptionConfiguration"));
      }
      // validate the optional field `HealthCheckConfiguration`
      if (jsonObj.get("HealthCheckConfiguration") != null && !jsonObj.get("HealthCheckConfiguration").isJsonNull()) {
        ServiceHealthCheckConfiguration.validateJsonElement(jsonObj.get("HealthCheckConfiguration"));
      }
      // validate the required field `AutoScalingConfigurationSummary`
      ServiceAutoScalingConfigurationSummary.validateJsonElement(jsonObj.get("AutoScalingConfigurationSummary"));
      // validate the required field `NetworkConfiguration`
      ServiceNetworkConfiguration.validateJsonElement(jsonObj.get("NetworkConfiguration"));
      // validate the optional field `ObservabilityConfiguration`
      if (jsonObj.get("ObservabilityConfiguration") != null && !jsonObj.get("ObservabilityConfiguration").isJsonNull()) {
        ServiceObservabilityConfiguration.validateJsonElement(jsonObj.get("ObservabilityConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateServiceResponseService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateServiceResponseService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateServiceResponseService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateServiceResponseService.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateServiceResponseService>() {
           @Override
           public void write(JsonWriter out, CreateServiceResponseService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateServiceResponseService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateServiceResponseService given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateServiceResponseService
   * @throws IOException if the JSON string is invalid with respect to CreateServiceResponseService
   */
  public static CreateServiceResponseService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateServiceResponseService.class);
  }

  /**
   * Convert an instance of CreateServiceResponseService to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

