/*
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VpcConnectorStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeVpcConnectorResponseVpcConnector
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:30.695381-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeVpcConnectorResponseVpcConnector {
  public static final String SERIALIZED_NAME_VPC_CONNECTOR_NAME = "VpcConnectorName";
  @SerializedName(SERIALIZED_NAME_VPC_CONNECTOR_NAME)
  private String vpcConnectorName;

  public static final String SERIALIZED_NAME_VPC_CONNECTOR_ARN = "VpcConnectorArn";
  @SerializedName(SERIALIZED_NAME_VPC_CONNECTOR_ARN)
  private String vpcConnectorArn;

  public static final String SERIALIZED_NAME_VPC_CONNECTOR_REVISION = "VpcConnectorRevision";
  @SerializedName(SERIALIZED_NAME_VPC_CONNECTOR_REVISION)
  private Integer vpcConnectorRevision;

  public static final String SERIALIZED_NAME_SUBNETS = "Subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  private List subnets;

  public static final String SERIALIZED_NAME_SECURITY_GROUPS = "SecurityGroups";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
  private List securityGroups;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private VpcConnectorStatus status;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "DeletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public DescribeVpcConnectorResponseVpcConnector() {
  }

  public DescribeVpcConnectorResponseVpcConnector vpcConnectorName(String vpcConnectorName) {
    this.vpcConnectorName = vpcConnectorName;
    return this;
  }

  /**
   * Get vpcConnectorName
   * @return vpcConnectorName
   */
  @javax.annotation.Nullable
  public String getVpcConnectorName() {
    return vpcConnectorName;
  }

  public void setVpcConnectorName(String vpcConnectorName) {
    this.vpcConnectorName = vpcConnectorName;
  }


  public DescribeVpcConnectorResponseVpcConnector vpcConnectorArn(String vpcConnectorArn) {
    this.vpcConnectorArn = vpcConnectorArn;
    return this;
  }

  /**
   * Get vpcConnectorArn
   * @return vpcConnectorArn
   */
  @javax.annotation.Nullable
  public String getVpcConnectorArn() {
    return vpcConnectorArn;
  }

  public void setVpcConnectorArn(String vpcConnectorArn) {
    this.vpcConnectorArn = vpcConnectorArn;
  }


  public DescribeVpcConnectorResponseVpcConnector vpcConnectorRevision(Integer vpcConnectorRevision) {
    this.vpcConnectorRevision = vpcConnectorRevision;
    return this;
  }

  /**
   * Get vpcConnectorRevision
   * @return vpcConnectorRevision
   */
  @javax.annotation.Nullable
  public Integer getVpcConnectorRevision() {
    return vpcConnectorRevision;
  }

  public void setVpcConnectorRevision(Integer vpcConnectorRevision) {
    this.vpcConnectorRevision = vpcConnectorRevision;
  }


  public DescribeVpcConnectorResponseVpcConnector subnets(List subnets) {
    this.subnets = subnets;
    return this;
  }

  /**
   * Get subnets
   * @return subnets
   */
  @javax.annotation.Nullable
  public List getSubnets() {
    return subnets;
  }

  public void setSubnets(List subnets) {
    this.subnets = subnets;
  }


  public DescribeVpcConnectorResponseVpcConnector securityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
    return this;
  }

  /**
   * Get securityGroups
   * @return securityGroups
   */
  @javax.annotation.Nullable
  public List getSecurityGroups() {
    return securityGroups;
  }

  public void setSecurityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
  }


  public DescribeVpcConnectorResponseVpcConnector status(VpcConnectorStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public VpcConnectorStatus getStatus() {
    return status;
  }

  public void setStatus(VpcConnectorStatus status) {
    this.status = status;
  }


  public DescribeVpcConnectorResponseVpcConnector createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DescribeVpcConnectorResponseVpcConnector deletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * Get deletedAt
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeVpcConnectorResponseVpcConnector describeVpcConnectorResponseVpcConnector = (DescribeVpcConnectorResponseVpcConnector) o;
    return Objects.equals(this.vpcConnectorName, describeVpcConnectorResponseVpcConnector.vpcConnectorName) &&
        Objects.equals(this.vpcConnectorArn, describeVpcConnectorResponseVpcConnector.vpcConnectorArn) &&
        Objects.equals(this.vpcConnectorRevision, describeVpcConnectorResponseVpcConnector.vpcConnectorRevision) &&
        Objects.equals(this.subnets, describeVpcConnectorResponseVpcConnector.subnets) &&
        Objects.equals(this.securityGroups, describeVpcConnectorResponseVpcConnector.securityGroups) &&
        Objects.equals(this.status, describeVpcConnectorResponseVpcConnector.status) &&
        Objects.equals(this.createdAt, describeVpcConnectorResponseVpcConnector.createdAt) &&
        Objects.equals(this.deletedAt, describeVpcConnectorResponseVpcConnector.deletedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vpcConnectorName, vpcConnectorArn, vpcConnectorRevision, subnets, securityGroups, status, createdAt, deletedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeVpcConnectorResponseVpcConnector {\n");
    sb.append("    vpcConnectorName: ").append(toIndentedString(vpcConnectorName)).append("\n");
    sb.append("    vpcConnectorArn: ").append(toIndentedString(vpcConnectorArn)).append("\n");
    sb.append("    vpcConnectorRevision: ").append(toIndentedString(vpcConnectorRevision)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VpcConnectorName");
    openapiFields.add("VpcConnectorArn");
    openapiFields.add("VpcConnectorRevision");
    openapiFields.add("Subnets");
    openapiFields.add("SecurityGroups");
    openapiFields.add("Status");
    openapiFields.add("CreatedAt");
    openapiFields.add("DeletedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeVpcConnectorResponseVpcConnector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeVpcConnectorResponseVpcConnector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeVpcConnectorResponseVpcConnector is not found in the empty JSON string", DescribeVpcConnectorResponseVpcConnector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeVpcConnectorResponseVpcConnector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeVpcConnectorResponseVpcConnector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `VpcConnectorName`
      if (jsonObj.get("VpcConnectorName") != null && !jsonObj.get("VpcConnectorName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcConnectorName"));
      }
      // validate the optional field `VpcConnectorArn`
      if (jsonObj.get("VpcConnectorArn") != null && !jsonObj.get("VpcConnectorArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcConnectorArn"));
      }
      // validate the optional field `VpcConnectorRevision`
      if (jsonObj.get("VpcConnectorRevision") != null && !jsonObj.get("VpcConnectorRevision").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("VpcConnectorRevision"));
      }
      // validate the optional field `Subnets`
      if (jsonObj.get("Subnets") != null && !jsonObj.get("Subnets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Subnets"));
      }
      // validate the optional field `SecurityGroups`
      if (jsonObj.get("SecurityGroups") != null && !jsonObj.get("SecurityGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SecurityGroups"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        VpcConnectorStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `DeletedAt`
      if (jsonObj.get("DeletedAt") != null && !jsonObj.get("DeletedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DeletedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeVpcConnectorResponseVpcConnector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeVpcConnectorResponseVpcConnector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeVpcConnectorResponseVpcConnector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeVpcConnectorResponseVpcConnector.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeVpcConnectorResponseVpcConnector>() {
           @Override
           public void write(JsonWriter out, DescribeVpcConnectorResponseVpcConnector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeVpcConnectorResponseVpcConnector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeVpcConnectorResponseVpcConnector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeVpcConnectorResponseVpcConnector
   * @throws IOException if the JSON string is invalid with respect to DescribeVpcConnectorResponseVpcConnector
   */
  public static DescribeVpcConnectorResponseVpcConnector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeVpcConnectorResponseVpcConnector.class);
  }

  /**
   * Convert an instance of DescribeVpcConnectorResponseVpcConnector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

