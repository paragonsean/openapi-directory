/*
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateServiceRequestHealthCheckConfiguration;
import org.openapitools.client.model.CreateServiceRequestNetworkConfiguration;
import org.openapitools.client.model.CreateServiceRequestObservabilityConfiguration;
import org.openapitools.client.model.UpdateServiceRequestInstanceConfiguration;
import org.openapitools.client.model.UpdateServiceRequestSourceConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateServiceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:30.695381-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateServiceRequest {
  public static final String SERIALIZED_NAME_SERVICE_ARN = "ServiceArn";
  @SerializedName(SERIALIZED_NAME_SERVICE_ARN)
  private String serviceArn;

  public static final String SERIALIZED_NAME_SOURCE_CONFIGURATION = "SourceConfiguration";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONFIGURATION)
  private UpdateServiceRequestSourceConfiguration sourceConfiguration;

  public static final String SERIALIZED_NAME_INSTANCE_CONFIGURATION = "InstanceConfiguration";
  @SerializedName(SERIALIZED_NAME_INSTANCE_CONFIGURATION)
  private UpdateServiceRequestInstanceConfiguration instanceConfiguration;

  public static final String SERIALIZED_NAME_AUTO_SCALING_CONFIGURATION_ARN = "AutoScalingConfigurationArn";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALING_CONFIGURATION_ARN)
  private String autoScalingConfigurationArn;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_CONFIGURATION = "HealthCheckConfiguration";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_CONFIGURATION)
  private CreateServiceRequestHealthCheckConfiguration healthCheckConfiguration;

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATION = "NetworkConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATION)
  private CreateServiceRequestNetworkConfiguration networkConfiguration;

  public static final String SERIALIZED_NAME_OBSERVABILITY_CONFIGURATION = "ObservabilityConfiguration";
  @SerializedName(SERIALIZED_NAME_OBSERVABILITY_CONFIGURATION)
  private CreateServiceRequestObservabilityConfiguration observabilityConfiguration;

  public UpdateServiceRequest() {
  }

  public UpdateServiceRequest serviceArn(String serviceArn) {
    this.serviceArn = serviceArn;
    return this;
  }

  /**
   * Get serviceArn
   * @return serviceArn
   */
  @javax.annotation.Nonnull
  public String getServiceArn() {
    return serviceArn;
  }

  public void setServiceArn(String serviceArn) {
    this.serviceArn = serviceArn;
  }


  public UpdateServiceRequest sourceConfiguration(UpdateServiceRequestSourceConfiguration sourceConfiguration) {
    this.sourceConfiguration = sourceConfiguration;
    return this;
  }

  /**
   * Get sourceConfiguration
   * @return sourceConfiguration
   */
  @javax.annotation.Nullable
  public UpdateServiceRequestSourceConfiguration getSourceConfiguration() {
    return sourceConfiguration;
  }

  public void setSourceConfiguration(UpdateServiceRequestSourceConfiguration sourceConfiguration) {
    this.sourceConfiguration = sourceConfiguration;
  }


  public UpdateServiceRequest instanceConfiguration(UpdateServiceRequestInstanceConfiguration instanceConfiguration) {
    this.instanceConfiguration = instanceConfiguration;
    return this;
  }

  /**
   * Get instanceConfiguration
   * @return instanceConfiguration
   */
  @javax.annotation.Nullable
  public UpdateServiceRequestInstanceConfiguration getInstanceConfiguration() {
    return instanceConfiguration;
  }

  public void setInstanceConfiguration(UpdateServiceRequestInstanceConfiguration instanceConfiguration) {
    this.instanceConfiguration = instanceConfiguration;
  }


  public UpdateServiceRequest autoScalingConfigurationArn(String autoScalingConfigurationArn) {
    this.autoScalingConfigurationArn = autoScalingConfigurationArn;
    return this;
  }

  /**
   * Get autoScalingConfigurationArn
   * @return autoScalingConfigurationArn
   */
  @javax.annotation.Nullable
  public String getAutoScalingConfigurationArn() {
    return autoScalingConfigurationArn;
  }

  public void setAutoScalingConfigurationArn(String autoScalingConfigurationArn) {
    this.autoScalingConfigurationArn = autoScalingConfigurationArn;
  }


  public UpdateServiceRequest healthCheckConfiguration(CreateServiceRequestHealthCheckConfiguration healthCheckConfiguration) {
    this.healthCheckConfiguration = healthCheckConfiguration;
    return this;
  }

  /**
   * Get healthCheckConfiguration
   * @return healthCheckConfiguration
   */
  @javax.annotation.Nullable
  public CreateServiceRequestHealthCheckConfiguration getHealthCheckConfiguration() {
    return healthCheckConfiguration;
  }

  public void setHealthCheckConfiguration(CreateServiceRequestHealthCheckConfiguration healthCheckConfiguration) {
    this.healthCheckConfiguration = healthCheckConfiguration;
  }


  public UpdateServiceRequest networkConfiguration(CreateServiceRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
    return this;
  }

  /**
   * Get networkConfiguration
   * @return networkConfiguration
   */
  @javax.annotation.Nullable
  public CreateServiceRequestNetworkConfiguration getNetworkConfiguration() {
    return networkConfiguration;
  }

  public void setNetworkConfiguration(CreateServiceRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
  }


  public UpdateServiceRequest observabilityConfiguration(CreateServiceRequestObservabilityConfiguration observabilityConfiguration) {
    this.observabilityConfiguration = observabilityConfiguration;
    return this;
  }

  /**
   * Get observabilityConfiguration
   * @return observabilityConfiguration
   */
  @javax.annotation.Nullable
  public CreateServiceRequestObservabilityConfiguration getObservabilityConfiguration() {
    return observabilityConfiguration;
  }

  public void setObservabilityConfiguration(CreateServiceRequestObservabilityConfiguration observabilityConfiguration) {
    this.observabilityConfiguration = observabilityConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateServiceRequest updateServiceRequest = (UpdateServiceRequest) o;
    return Objects.equals(this.serviceArn, updateServiceRequest.serviceArn) &&
        Objects.equals(this.sourceConfiguration, updateServiceRequest.sourceConfiguration) &&
        Objects.equals(this.instanceConfiguration, updateServiceRequest.instanceConfiguration) &&
        Objects.equals(this.autoScalingConfigurationArn, updateServiceRequest.autoScalingConfigurationArn) &&
        Objects.equals(this.healthCheckConfiguration, updateServiceRequest.healthCheckConfiguration) &&
        Objects.equals(this.networkConfiguration, updateServiceRequest.networkConfiguration) &&
        Objects.equals(this.observabilityConfiguration, updateServiceRequest.observabilityConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceArn, sourceConfiguration, instanceConfiguration, autoScalingConfigurationArn, healthCheckConfiguration, networkConfiguration, observabilityConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateServiceRequest {\n");
    sb.append("    serviceArn: ").append(toIndentedString(serviceArn)).append("\n");
    sb.append("    sourceConfiguration: ").append(toIndentedString(sourceConfiguration)).append("\n");
    sb.append("    instanceConfiguration: ").append(toIndentedString(instanceConfiguration)).append("\n");
    sb.append("    autoScalingConfigurationArn: ").append(toIndentedString(autoScalingConfigurationArn)).append("\n");
    sb.append("    healthCheckConfiguration: ").append(toIndentedString(healthCheckConfiguration)).append("\n");
    sb.append("    networkConfiguration: ").append(toIndentedString(networkConfiguration)).append("\n");
    sb.append("    observabilityConfiguration: ").append(toIndentedString(observabilityConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ServiceArn");
    openapiFields.add("SourceConfiguration");
    openapiFields.add("InstanceConfiguration");
    openapiFields.add("AutoScalingConfigurationArn");
    openapiFields.add("HealthCheckConfiguration");
    openapiFields.add("NetworkConfiguration");
    openapiFields.add("ObservabilityConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ServiceArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateServiceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateServiceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateServiceRequest is not found in the empty JSON string", UpdateServiceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateServiceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateServiceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateServiceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ServiceArn`
      String.validateJsonElement(jsonObj.get("ServiceArn"));
      // validate the optional field `SourceConfiguration`
      if (jsonObj.get("SourceConfiguration") != null && !jsonObj.get("SourceConfiguration").isJsonNull()) {
        UpdateServiceRequestSourceConfiguration.validateJsonElement(jsonObj.get("SourceConfiguration"));
      }
      // validate the optional field `InstanceConfiguration`
      if (jsonObj.get("InstanceConfiguration") != null && !jsonObj.get("InstanceConfiguration").isJsonNull()) {
        UpdateServiceRequestInstanceConfiguration.validateJsonElement(jsonObj.get("InstanceConfiguration"));
      }
      // validate the optional field `AutoScalingConfigurationArn`
      if (jsonObj.get("AutoScalingConfigurationArn") != null && !jsonObj.get("AutoScalingConfigurationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AutoScalingConfigurationArn"));
      }
      // validate the optional field `HealthCheckConfiguration`
      if (jsonObj.get("HealthCheckConfiguration") != null && !jsonObj.get("HealthCheckConfiguration").isJsonNull()) {
        CreateServiceRequestHealthCheckConfiguration.validateJsonElement(jsonObj.get("HealthCheckConfiguration"));
      }
      // validate the optional field `NetworkConfiguration`
      if (jsonObj.get("NetworkConfiguration") != null && !jsonObj.get("NetworkConfiguration").isJsonNull()) {
        CreateServiceRequestNetworkConfiguration.validateJsonElement(jsonObj.get("NetworkConfiguration"));
      }
      // validate the optional field `ObservabilityConfiguration`
      if (jsonObj.get("ObservabilityConfiguration") != null && !jsonObj.get("ObservabilityConfiguration").isJsonNull()) {
        CreateServiceRequestObservabilityConfiguration.validateJsonElement(jsonObj.get("ObservabilityConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateServiceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateServiceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateServiceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateServiceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateServiceRequest>() {
           @Override
           public void write(JsonWriter out, UpdateServiceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateServiceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateServiceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateServiceRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateServiceRequest
   */
  public static UpdateServiceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateServiceRequest.class);
  }

  /**
   * Convert an instance of UpdateServiceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

