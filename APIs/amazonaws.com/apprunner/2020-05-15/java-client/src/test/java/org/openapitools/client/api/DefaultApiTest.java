/*
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateCustomDomainRequest;
import org.openapitools.client.model.AssociateCustomDomainResponse;
import org.openapitools.client.model.CreateAutoScalingConfigurationRequest;
import org.openapitools.client.model.CreateAutoScalingConfigurationResponse;
import org.openapitools.client.model.CreateConnectionRequest;
import org.openapitools.client.model.CreateConnectionResponse;
import org.openapitools.client.model.CreateObservabilityConfigurationRequest;
import org.openapitools.client.model.CreateObservabilityConfigurationResponse;
import org.openapitools.client.model.CreateServiceRequest;
import org.openapitools.client.model.CreateServiceResponse;
import org.openapitools.client.model.CreateVpcConnectorRequest;
import org.openapitools.client.model.CreateVpcConnectorResponse;
import org.openapitools.client.model.CreateVpcIngressConnectionRequest;
import org.openapitools.client.model.CreateVpcIngressConnectionResponse;
import org.openapitools.client.model.DeleteAutoScalingConfigurationRequest;
import org.openapitools.client.model.DeleteAutoScalingConfigurationResponse;
import org.openapitools.client.model.DeleteConnectionRequest;
import org.openapitools.client.model.DeleteConnectionResponse;
import org.openapitools.client.model.DeleteObservabilityConfigurationRequest;
import org.openapitools.client.model.DeleteObservabilityConfigurationResponse;
import org.openapitools.client.model.DeleteServiceRequest;
import org.openapitools.client.model.DeleteServiceResponse;
import org.openapitools.client.model.DeleteVpcConnectorRequest;
import org.openapitools.client.model.DeleteVpcConnectorResponse;
import org.openapitools.client.model.DeleteVpcIngressConnectionRequest;
import org.openapitools.client.model.DeleteVpcIngressConnectionResponse;
import org.openapitools.client.model.DescribeAutoScalingConfigurationRequest;
import org.openapitools.client.model.DescribeAutoScalingConfigurationResponse;
import org.openapitools.client.model.DescribeCustomDomainsRequest;
import org.openapitools.client.model.DescribeCustomDomainsResponse;
import org.openapitools.client.model.DescribeObservabilityConfigurationRequest;
import org.openapitools.client.model.DescribeObservabilityConfigurationResponse;
import org.openapitools.client.model.DescribeServiceRequest;
import org.openapitools.client.model.DescribeServiceResponse;
import org.openapitools.client.model.DescribeVpcConnectorRequest;
import org.openapitools.client.model.DescribeVpcConnectorResponse;
import org.openapitools.client.model.DescribeVpcIngressConnectionRequest;
import org.openapitools.client.model.DescribeVpcIngressConnectionResponse;
import org.openapitools.client.model.DisassociateCustomDomainRequest;
import org.openapitools.client.model.DisassociateCustomDomainResponse;
import org.openapitools.client.model.ListAutoScalingConfigurationsRequest;
import org.openapitools.client.model.ListAutoScalingConfigurationsResponse;
import org.openapitools.client.model.ListConnectionsRequest;
import org.openapitools.client.model.ListConnectionsResponse;
import org.openapitools.client.model.ListObservabilityConfigurationsRequest;
import org.openapitools.client.model.ListObservabilityConfigurationsResponse;
import org.openapitools.client.model.ListOperationsRequest;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListServicesRequest;
import org.openapitools.client.model.ListServicesResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListVpcConnectorsRequest;
import org.openapitools.client.model.ListVpcConnectorsResponse;
import org.openapitools.client.model.ListVpcIngressConnectionsRequest;
import org.openapitools.client.model.ListVpcIngressConnectionsResponse;
import org.openapitools.client.model.PauseServiceRequest;
import org.openapitools.client.model.PauseServiceResponse;
import org.openapitools.client.model.ResumeServiceRequest;
import org.openapitools.client.model.ResumeServiceResponse;
import org.openapitools.client.model.StartDeploymentRequest;
import org.openapitools.client.model.StartDeploymentResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateServiceRequest;
import org.openapitools.client.model.UpdateServiceResponse;
import org.openapitools.client.model.UpdateVpcIngressConnectionRequest;
import org.openapitools.client.model.UpdateVpcIngressConnectionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Associate your own domain name with the App Runner subdomain URL of your App Runner service.&lt;/p&gt; &lt;p&gt;After you call &lt;code&gt;AssociateCustomDomain&lt;/code&gt; and receive a successful response, use the information in the &lt;a&gt;CustomDomain&lt;/a&gt; record that&#39;s returned to add CNAME records to your Domain Name System (DNS). For each mapped domain name, add a mapping to the target App Runner subdomain and one or more certificate validation records. App Runner then performs DNS validation to verify that you own or control the domain name that you associated. App Runner tracks domain validity in a certificate stored in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide\&quot;&gt;AWS Certificate Manager (ACM)&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateCustomDomainTest() throws ApiException {
        String xAmzTarget = null;
        AssociateCustomDomainRequest associateCustomDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateCustomDomainResponse response = api.associateCustomDomain(xAmzTarget, associateCustomDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Create an App Runner automatic scaling configuration resource. App Runner requires this resource when you create or update App Runner services and you require non-default auto scaling settings. You can share an auto scaling configuration across multiple services.&lt;/p&gt; &lt;p&gt;Create multiple revisions of a configuration by calling this action multiple times using the same &lt;code&gt;AutoScalingConfigurationName&lt;/code&gt;. The call returns incremental &lt;code&gt;AutoScalingConfigurationRevision&lt;/code&gt; values. When you create a service and configure an auto scaling configuration resource, the service uses the latest active revision of the auto scaling configuration by default. You can optionally configure the service to use a specific revision.&lt;/p&gt; &lt;p&gt;Configure a higher &lt;code&gt;MinSize&lt;/code&gt; to increase the spread of your App Runner service over more Availability Zones in the Amazon Web Services Region. The tradeoff is a higher minimal cost.&lt;/p&gt; &lt;p&gt;Configure a lower &lt;code&gt;MaxSize&lt;/code&gt; to control your cost. The tradeoff is lower responsiveness during peak demand.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAutoScalingConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        CreateAutoScalingConfigurationRequest createAutoScalingConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAutoScalingConfigurationResponse response = api.createAutoScalingConfiguration(xAmzTarget, createAutoScalingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Create an App Runner connection resource. App Runner requires a connection resource when you create App Runner services that access private repositories from certain third-party providers. You can share a connection across multiple services.&lt;/p&gt; &lt;p&gt;A connection resource is needed to access GitHub repositories. GitHub requires a user interface approval process through the App Runner console before you can use the connection.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectionTest() throws ApiException {
        String xAmzTarget = null;
        CreateConnectionRequest createConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateConnectionResponse response = api.createConnection(xAmzTarget, createConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Create an App Runner observability configuration resource. App Runner requires this resource when you create or update App Runner services and you want to enable non-default observability features. You can share an observability configuration across multiple services.&lt;/p&gt; &lt;p&gt;Create multiple revisions of a configuration by calling this action multiple times using the same &lt;code&gt;ObservabilityConfigurationName&lt;/code&gt;. The call returns incremental &lt;code&gt;ObservabilityConfigurationRevision&lt;/code&gt; values. When you create a service and configure an observability configuration resource, the service uses the latest active revision of the observability configuration by default. You can optionally configure the service to use a specific revision.&lt;/p&gt; &lt;p&gt;The observability configuration resource is designed to configure multiple features (currently one feature, tracing). This action takes optional parameters that describe the configuration of these features (currently one parameter, &lt;code&gt;TraceConfiguration&lt;/code&gt;). If you don&#39;t specify a feature parameter, App Runner doesn&#39;t enable the feature.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createObservabilityConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        CreateObservabilityConfigurationRequest createObservabilityConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateObservabilityConfigurationResponse response = api.createObservabilityConfiguration(xAmzTarget, createObservabilityConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Create an App Runner service. After the service is created, the action also automatically starts a deployment.&lt;/p&gt; &lt;p&gt;This is an asynchronous operation. On a successful call, you can use the returned &lt;code&gt;OperationId&lt;/code&gt; and the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apprunner/latest/api/API_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt; call to track the operation&#39;s progress.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceTest() throws ApiException {
        String xAmzTarget = null;
        CreateServiceRequest createServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateServiceResponse response = api.createService(xAmzTarget, createServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create an App Runner VPC connector resource. App Runner requires this resource when you want to associate your App Runner service to a custom Amazon Virtual Private Cloud (Amazon VPC).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVpcConnectorTest() throws ApiException {
        String xAmzTarget = null;
        CreateVpcConnectorRequest createVpcConnectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateVpcConnectorResponse response = api.createVpcConnector(xAmzTarget, createVpcConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create an App Runner VPC Ingress Connection resource. App Runner requires this resource when you want to associate your App Runner service with an Amazon VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVpcIngressConnectionTest() throws ApiException {
        String xAmzTarget = null;
        CreateVpcIngressConnectionRequest createVpcIngressConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateVpcIngressConnectionResponse response = api.createVpcIngressConnection(xAmzTarget, createVpcIngressConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete an App Runner automatic scaling configuration resource. You can delete a specific revision or the latest active revision. You can&#39;t delete a configuration that&#39;s used by one or more App Runner services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAutoScalingConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAutoScalingConfigurationRequest deleteAutoScalingConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteAutoScalingConfigurationResponse response = api.deleteAutoScalingConfiguration(xAmzTarget, deleteAutoScalingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete an App Runner connection. You must first ensure that there are no running App Runner services that use this connection. If there are any, the &lt;code&gt;DeleteConnection&lt;/code&gt; action fails.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConnectionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteConnectionRequest deleteConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteConnectionResponse response = api.deleteConnection(xAmzTarget, deleteConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete an App Runner observability configuration resource. You can delete a specific revision or the latest active revision. You can&#39;t delete a configuration that&#39;s used by one or more App Runner services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteObservabilityConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteObservabilityConfigurationRequest deleteObservabilityConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteObservabilityConfigurationResponse response = api.deleteObservabilityConfiguration(xAmzTarget, deleteObservabilityConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete an App Runner service.&lt;/p&gt; &lt;p&gt;This is an asynchronous operation. On a successful call, you can use the returned &lt;code&gt;OperationId&lt;/code&gt; and the &lt;a&gt;ListOperations&lt;/a&gt; call to track the operation&#39;s progress.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Make sure that you don&#39;t have any active VPCIngressConnections associated with the service you want to delete. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteServiceRequest deleteServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteServiceResponse response = api.deleteService(xAmzTarget, deleteServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete an App Runner VPC connector resource. You can&#39;t delete a connector that&#39;s used by one or more App Runner services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVpcConnectorTest() throws ApiException {
        String xAmzTarget = null;
        DeleteVpcConnectorRequest deleteVpcConnectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteVpcConnectorResponse response = api.deleteVpcConnector(xAmzTarget, deleteVpcConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete an App Runner VPC Ingress Connection resource that&#39;s associated with an App Runner service. The VPC Ingress Connection must be in one of the following states to be deleted: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AVAILABLE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FAILED_CREATION&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FAILED_UPDATE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FAILED_DELETION&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVpcIngressConnectionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteVpcIngressConnectionRequest deleteVpcIngressConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteVpcIngressConnectionResponse response = api.deleteVpcIngressConnection(xAmzTarget, deleteVpcIngressConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Return a full description of an App Runner automatic scaling configuration resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAutoScalingConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAutoScalingConfigurationRequest describeAutoScalingConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAutoScalingConfigurationResponse response = api.describeAutoScalingConfiguration(xAmzTarget, describeAutoScalingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Return a description of custom domain names that are associated with an App Runner service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCustomDomainsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeCustomDomainsRequest describeCustomDomainsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeCustomDomainsResponse response = api.describeCustomDomains(xAmzTarget, describeCustomDomainsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Return a full description of an App Runner observability configuration resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeObservabilityConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DescribeObservabilityConfigurationRequest describeObservabilityConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeObservabilityConfigurationResponse response = api.describeObservabilityConfiguration(xAmzTarget, describeObservabilityConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Return a full description of an App Runner service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeServiceTest() throws ApiException {
        String xAmzTarget = null;
        DescribeServiceRequest describeServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeServiceResponse response = api.describeService(xAmzTarget, describeServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Return a description of an App Runner VPC connector resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeVpcConnectorTest() throws ApiException {
        String xAmzTarget = null;
        DescribeVpcConnectorRequest describeVpcConnectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeVpcConnectorResponse response = api.describeVpcConnector(xAmzTarget, describeVpcConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Return a full description of an App Runner VPC Ingress Connection resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeVpcIngressConnectionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeVpcIngressConnectionRequest describeVpcIngressConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeVpcIngressConnectionResponse response = api.describeVpcIngressConnection(xAmzTarget, describeVpcIngressConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disassociate a custom domain name from an App Runner service.&lt;/p&gt; &lt;p&gt;Certificates tracking domain validity are associated with a custom domain and are stored in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide\&quot;&gt;AWS Certificate Manager (ACM)&lt;/a&gt;. These certificates aren&#39;t deleted as part of this action. App Runner delays certificate deletion for 30 days after a domain is disassociated from your service.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateCustomDomainTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateCustomDomainRequest disassociateCustomDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateCustomDomainResponse response = api.disassociateCustomDomain(xAmzTarget, disassociateCustomDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of active App Runner automatic scaling configurations in your Amazon Web Services account. You can query the revisions for a specific configuration name or the revisions for all active configurations in your account. You can optionally query only the latest revision of each requested name.&lt;/p&gt; &lt;p&gt;To retrieve a full description of a particular configuration revision, call and provide one of the ARNs returned by &lt;code&gt;ListAutoScalingConfigurations&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAutoScalingConfigurationsTest() throws ApiException {
        String xAmzTarget = null;
        ListAutoScalingConfigurationsRequest listAutoScalingConfigurationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAutoScalingConfigurationsResponse response = api.listAutoScalingConfigurations(xAmzTarget, listAutoScalingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of App Runner connections that are associated with your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConnectionsTest() throws ApiException {
        String xAmzTarget = null;
        ListConnectionsRequest listConnectionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListConnectionsResponse response = api.listConnections(xAmzTarget, listConnectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of active App Runner observability configurations in your Amazon Web Services account. You can query the revisions for a specific configuration name or the revisions for all active configurations in your account. You can optionally query only the latest revision of each requested name.&lt;/p&gt; &lt;p&gt;To retrieve a full description of a particular configuration revision, call and provide one of the ARNs returned by &lt;code&gt;ListObservabilityConfigurations&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listObservabilityConfigurationsTest() throws ApiException {
        String xAmzTarget = null;
        ListObservabilityConfigurationsRequest listObservabilityConfigurationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListObservabilityConfigurationsResponse response = api.listObservabilityConfigurations(xAmzTarget, listObservabilityConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Return a list of operations that occurred on an App Runner service.&lt;/p&gt; &lt;p&gt;The resulting list of &lt;a&gt;OperationSummary&lt;/a&gt; objects is sorted in reverse chronological order. The first object on the list represents the last started operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOperationsTest() throws ApiException {
        String xAmzTarget = null;
        ListOperationsRequest listOperationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListOperationsResponse response = api.listOperations(xAmzTarget, listOperationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of running App Runner services in your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServicesTest() throws ApiException {
        String xAmzTarget = null;
        ListServicesRequest listServicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListServicesResponse response = api.listServices(xAmzTarget, listServicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List tags that are associated with for an App Runner resource. The response contains a list of tag key-value pairs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of App Runner VPC connectors in your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVpcConnectorsTest() throws ApiException {
        String xAmzTarget = null;
        ListVpcConnectorsRequest listVpcConnectorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListVpcConnectorsResponse response = api.listVpcConnectors(xAmzTarget, listVpcConnectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Return a list of App Runner VPC Ingress Connections in your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVpcIngressConnectionsTest() throws ApiException {
        String xAmzTarget = null;
        ListVpcIngressConnectionsRequest listVpcIngressConnectionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListVpcIngressConnectionsResponse response = api.listVpcIngressConnections(xAmzTarget, listVpcIngressConnectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Pause an active App Runner service. App Runner reduces compute capacity for the service to zero and loses state (for example, ephemeral storage is removed).&lt;/p&gt; &lt;p&gt;This is an asynchronous operation. On a successful call, you can use the returned &lt;code&gt;OperationId&lt;/code&gt; and the &lt;a&gt;ListOperations&lt;/a&gt; call to track the operation&#39;s progress.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseServiceTest() throws ApiException {
        String xAmzTarget = null;
        PauseServiceRequest pauseServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PauseServiceResponse response = api.pauseService(xAmzTarget, pauseServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Resume an active App Runner service. App Runner provisions compute capacity for the service.&lt;/p&gt; &lt;p&gt;This is an asynchronous operation. On a successful call, you can use the returned &lt;code&gt;OperationId&lt;/code&gt; and the &lt;a&gt;ListOperations&lt;/a&gt; call to track the operation&#39;s progress.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeServiceTest() throws ApiException {
        String xAmzTarget = null;
        ResumeServiceRequest resumeServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResumeServiceResponse response = api.resumeService(xAmzTarget, resumeServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Initiate a manual deployment of the latest commit in a source code repository or the latest image in a source image repository to an App Runner service.&lt;/p&gt; &lt;p&gt;For a source code repository, App Runner retrieves the commit and builds a Docker image. For a source image repository, App Runner retrieves the latest Docker image. In both cases, App Runner then deploys the new image to your service and starts a new container instance.&lt;/p&gt; &lt;p&gt;This is an asynchronous operation. On a successful call, you can use the returned &lt;code&gt;OperationId&lt;/code&gt; and the &lt;a&gt;ListOperations&lt;/a&gt; call to track the operation&#39;s progress.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDeploymentTest() throws ApiException {
        String xAmzTarget = null;
        StartDeploymentRequest startDeploymentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartDeploymentResponse response = api.startDeployment(xAmzTarget, startDeploymentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Add tags to, or update the tag values of, an App Runner resource. A tag is a key-value pair.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Remove tags from an App Runner resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Update an App Runner service. You can update the source configuration and instance configuration of the service. You can also update the ARN of the auto scaling configuration resource that&#39;s associated with the service. However, you can&#39;t change the name or the encryption configuration of the service. These can be set only when you create the service.&lt;/p&gt; &lt;p&gt;To update the tags applied to your service, use the separate actions &lt;a&gt;TagResource&lt;/a&gt; and &lt;a&gt;UntagResource&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This is an asynchronous operation. On a successful call, you can use the returned &lt;code&gt;OperationId&lt;/code&gt; and the &lt;a&gt;ListOperations&lt;/a&gt; call to track the operation&#39;s progress.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateServiceRequest updateServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateServiceResponse response = api.updateService(xAmzTarget, updateServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Update an existing App Runner VPC Ingress Connection resource. The VPC Ingress Connection must be in one of the following states to be updated:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; AVAILABLE &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; FAILED_CREATION &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; FAILED_UPDATE &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVpcIngressConnectionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateVpcIngressConnectionRequest updateVpcIngressConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateVpcIngressConnectionResponse response = api.updateVpcIngressConnection(xAmzTarget, updateVpcIngressConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
