/**
 * AWS App Runner
 * <fullname>App Runner</fullname> <p>App Runner is an application service that provides a fast, simple, and cost-effective way to go directly from an existing container image or source code to a running service in the Amazon Web Services Cloud in seconds. You don't need to learn new technologies, decide which compute service to use, or understand how to provision and configure Amazon Web Services resources.</p> <p>App Runner connects directly to your container registry or source code repository. It provides an automatic delivery pipeline with fully managed operations, high performance, scalability, and security.</p> <p>For more information about App Runner, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/dg/\">App Runner Developer Guide</a>. For release information, see the <a href=\"https://docs.aws.amazon.com/apprunner/latest/relnotes/\">App Runner Release Notes</a>.</p> <p> To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that you can use to access the API, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that App Runner supports, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/apprunner.html\">App Runner endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2020-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsAppRunner);
  }
}(this, function(expect, AwsAppRunner) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsAppRunner.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateCustomDomain', function() {
      it('should call associateCustomDomain successfully', function(done) {
        //uncomment below and update the code to test associateCustomDomain
        //instance.associateCustomDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAutoScalingConfiguration', function() {
      it('should call createAutoScalingConfiguration successfully', function(done) {
        //uncomment below and update the code to test createAutoScalingConfiguration
        //instance.createAutoScalingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConnection', function() {
      it('should call createConnection successfully', function(done) {
        //uncomment below and update the code to test createConnection
        //instance.createConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createObservabilityConfiguration', function() {
      it('should call createObservabilityConfiguration successfully', function(done) {
        //uncomment below and update the code to test createObservabilityConfiguration
        //instance.createObservabilityConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createService', function() {
      it('should call createService successfully', function(done) {
        //uncomment below and update the code to test createService
        //instance.createService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVpcConnector', function() {
      it('should call createVpcConnector successfully', function(done) {
        //uncomment below and update the code to test createVpcConnector
        //instance.createVpcConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVpcIngressConnection', function() {
      it('should call createVpcIngressConnection successfully', function(done) {
        //uncomment below and update the code to test createVpcIngressConnection
        //instance.createVpcIngressConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAutoScalingConfiguration', function() {
      it('should call deleteAutoScalingConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteAutoScalingConfiguration
        //instance.deleteAutoScalingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteConnection', function() {
      it('should call deleteConnection successfully', function(done) {
        //uncomment below and update the code to test deleteConnection
        //instance.deleteConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteObservabilityConfiguration', function() {
      it('should call deleteObservabilityConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteObservabilityConfiguration
        //instance.deleteObservabilityConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteService', function() {
      it('should call deleteService successfully', function(done) {
        //uncomment below and update the code to test deleteService
        //instance.deleteService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVpcConnector', function() {
      it('should call deleteVpcConnector successfully', function(done) {
        //uncomment below and update the code to test deleteVpcConnector
        //instance.deleteVpcConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVpcIngressConnection', function() {
      it('should call deleteVpcIngressConnection successfully', function(done) {
        //uncomment below and update the code to test deleteVpcIngressConnection
        //instance.deleteVpcIngressConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAutoScalingConfiguration', function() {
      it('should call describeAutoScalingConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeAutoScalingConfiguration
        //instance.describeAutoScalingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCustomDomains', function() {
      it('should call describeCustomDomains successfully', function(done) {
        //uncomment below and update the code to test describeCustomDomains
        //instance.describeCustomDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeObservabilityConfiguration', function() {
      it('should call describeObservabilityConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeObservabilityConfiguration
        //instance.describeObservabilityConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeService', function() {
      it('should call describeService successfully', function(done) {
        //uncomment below and update the code to test describeService
        //instance.describeService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVpcConnector', function() {
      it('should call describeVpcConnector successfully', function(done) {
        //uncomment below and update the code to test describeVpcConnector
        //instance.describeVpcConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVpcIngressConnection', function() {
      it('should call describeVpcIngressConnection successfully', function(done) {
        //uncomment below and update the code to test describeVpcIngressConnection
        //instance.describeVpcIngressConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateCustomDomain', function() {
      it('should call disassociateCustomDomain successfully', function(done) {
        //uncomment below and update the code to test disassociateCustomDomain
        //instance.disassociateCustomDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAutoScalingConfigurations', function() {
      it('should call listAutoScalingConfigurations successfully', function(done) {
        //uncomment below and update the code to test listAutoScalingConfigurations
        //instance.listAutoScalingConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConnections', function() {
      it('should call listConnections successfully', function(done) {
        //uncomment below and update the code to test listConnections
        //instance.listConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listObservabilityConfigurations', function() {
      it('should call listObservabilityConfigurations successfully', function(done) {
        //uncomment below and update the code to test listObservabilityConfigurations
        //instance.listObservabilityConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOperations', function() {
      it('should call listOperations successfully', function(done) {
        //uncomment below and update the code to test listOperations
        //instance.listOperations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServices', function() {
      it('should call listServices successfully', function(done) {
        //uncomment below and update the code to test listServices
        //instance.listServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVpcConnectors', function() {
      it('should call listVpcConnectors successfully', function(done) {
        //uncomment below and update the code to test listVpcConnectors
        //instance.listVpcConnectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVpcIngressConnections', function() {
      it('should call listVpcIngressConnections successfully', function(done) {
        //uncomment below and update the code to test listVpcIngressConnections
        //instance.listVpcIngressConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pauseService', function() {
      it('should call pauseService successfully', function(done) {
        //uncomment below and update the code to test pauseService
        //instance.pauseService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resumeService', function() {
      it('should call resumeService successfully', function(done) {
        //uncomment below and update the code to test resumeService
        //instance.resumeService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startDeployment', function() {
      it('should call startDeployment successfully', function(done) {
        //uncomment below and update the code to test startDeployment
        //instance.startDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateService', function() {
      it('should call updateService successfully', function(done) {
        //uncomment below and update the code to test updateService
        //instance.updateService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVpcIngressConnection', function() {
      it('should call updateVpcIngressConnection successfully', function(done) {
        //uncomment below and update the code to test updateVpcIngressConnection
        //instance.updateVpcIngressConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
