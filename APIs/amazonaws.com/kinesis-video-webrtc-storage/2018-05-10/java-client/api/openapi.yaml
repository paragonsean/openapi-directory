openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: ' '
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Kinesis Video WebRTC Storage
  version: 2018-05-10
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: kinesis-video-webrtc-storage
  x-aws-signingName: kinesisvideo
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/kinesis-video-webrtc-storage-2018-05-10.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/kinesisvideo/
servers:
- description: The Amazon Kinesis Video WebRTC Storage multi-region endpoint
  url: "http://kinesisvideo.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Kinesis Video WebRTC Storage multi-region endpoint
  url: "https://kinesisvideo.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Kinesis Video WebRTC Storage endpoint for China (Beijing)
    and China (Ningxia)
  url: "http://kinesisvideo.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Amazon Kinesis Video WebRTC Storage endpoint for China (Beijing)
    and China (Ningxia)
  url: "https://kinesisvideo.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /joinStorageSession:
    post:
      description: "<p> Join the ongoing one way-video and/or multi-way audio WebRTC\
        \ session as a video producing device for an input channel. If thereâ€™s no\
        \ existing session for the channel, a new streaming session needs to be created,\
        \ and the Amazon Resource Name (ARN) of the signaling channel must be provided.\
        \ </p> <p>Currently for the <code>SINGLE_MASTER</code> type, a video producing\
        \ device is able to ingest both audio and video media into a stream, while\
        \ viewers can only ingest audio. Both a video producing device and viewers\
        \ can join the session first, and wait for other participants.</p> <p>While\
        \ participants are having peer to peer conversations through webRTC, the ingested\
        \ media session will be stored into the Kinesis Video Stream. Multiple viewers\
        \ are able to playback real-time media.</p> <p>Customers can also use existing\
        \ Kinesis Video Streams features like <code>HLS</code> or <code>DASH</code>\
        \ playback, Image generation, and more with ingested WebRTC media.</p> <note>\
        \ <p>Assume that only one video producing device client can be associated\
        \ with a session for the channel. If more than one client joins the session\
        \ of a specific channel as a video producing device, the most recent client\
        \ request takes precedence. </p> </note>"
      operationId: JoinStorageSession
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinStorageSession_request'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientLimitExceededException'
          description: ClientLimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
          description: InvalidArgumentException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    ClientLimitExceededException: {}
    InvalidArgumentException: {}
    AccessDeniedException: {}
    ResourceNotFoundException: {}
    ChannelArn:
      pattern: "^arn:(aws[a-zA-Z-]*):kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+$"
      type: string
    JoinStorageSessionInput:
      properties:
        channelArn:
          allOf:
          - $ref: '#/components/schemas/ChannelArn'
          - description: ' The Amazon Resource Name (ARN) of the signaling channel. '
      required:
      - channelArn
      title: JoinStorageSessionInput
      type: object
    JoinStorageSession_request:
      properties:
        channelArn:
          description: ' The Amazon Resource Name (ARN) of the signaling channel. '
          pattern: "^arn:(aws[a-zA-Z-]*):kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+$"
          type: string
      required:
      - channelArn
      type: object
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4

