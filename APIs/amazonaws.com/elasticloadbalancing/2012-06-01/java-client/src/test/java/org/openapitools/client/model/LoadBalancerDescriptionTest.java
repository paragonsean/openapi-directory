/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LoadBalancerDescriptionHealthCheck;
import org.openapitools.client.model.LoadBalancerDescriptionPolicies;
import org.openapitools.client.model.LoadBalancerDescriptionSourceSecurityGroup;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for LoadBalancerDescription
 */
public class LoadBalancerDescriptionTest {
    private final LoadBalancerDescription model = new LoadBalancerDescription();

    /**
     * Model tests for LoadBalancerDescription
     */
    @Test
    public void testLoadBalancerDescription() {
        // TODO: test LoadBalancerDescription
    }

    /**
     * Test the property 'loadBalancerName'
     */
    @Test
    public void loadBalancerNameTest() {
        // TODO: test loadBalancerName
    }

    /**
     * Test the property 'dnSName'
     */
    @Test
    public void dnSNameTest() {
        // TODO: test dnSName
    }

    /**
     * Test the property 'canonicalHostedZoneName'
     */
    @Test
    public void canonicalHostedZoneNameTest() {
        // TODO: test canonicalHostedZoneName
    }

    /**
     * Test the property 'canonicalHostedZoneNameID'
     */
    @Test
    public void canonicalHostedZoneNameIDTest() {
        // TODO: test canonicalHostedZoneNameID
    }

    /**
     * Test the property 'listenerDescriptions'
     */
    @Test
    public void listenerDescriptionsTest() {
        // TODO: test listenerDescriptions
    }

    /**
     * Test the property 'policies'
     */
    @Test
    public void policiesTest() {
        // TODO: test policies
    }

    /**
     * Test the property 'backendServerDescriptions'
     */
    @Test
    public void backendServerDescriptionsTest() {
        // TODO: test backendServerDescriptions
    }

    /**
     * Test the property 'availabilityZones'
     */
    @Test
    public void availabilityZonesTest() {
        // TODO: test availabilityZones
    }

    /**
     * Test the property 'subnets'
     */
    @Test
    public void subnetsTest() {
        // TODO: test subnets
    }

    /**
     * Test the property 'vpCId'
     */
    @Test
    public void vpCIdTest() {
        // TODO: test vpCId
    }

    /**
     * Test the property 'instances'
     */
    @Test
    public void instancesTest() {
        // TODO: test instances
    }

    /**
     * Test the property 'healthCheck'
     */
    @Test
    public void healthCheckTest() {
        // TODO: test healthCheck
    }

    /**
     * Test the property 'sourceSecurityGroup'
     */
    @Test
    public void sourceSecurityGroupTest() {
        // TODO: test sourceSecurityGroup
    }

    /**
     * Test the property 'securityGroups'
     */
    @Test
    public void securityGroupsTest() {
        // TODO: test securityGroups
    }

    /**
     * Test the property 'createdTime'
     */
    @Test
    public void createdTimeTest() {
        // TODO: test createdTime
    }

    /**
     * Test the property 'scheme'
     */
    @Test
    public void schemeTest() {
        // TODO: test scheme
    }

}
