/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddAvailabilityZonesInput;
import org.openapitools.client.model.AddAvailabilityZonesOutput;
import org.openapitools.client.model.AddTagsInput;
import org.openapitools.client.model.ApplySecurityGroupsToLoadBalancerInput;
import org.openapitools.client.model.ApplySecurityGroupsToLoadBalancerOutput;
import org.openapitools.client.model.AttachLoadBalancerToSubnetsInput;
import org.openapitools.client.model.AttachLoadBalancerToSubnetsOutput;
import org.openapitools.client.model.ConfigureHealthCheckInput;
import org.openapitools.client.model.ConfigureHealthCheckOutput;
import org.openapitools.client.model.CreateAccessPointInput;
import org.openapitools.client.model.CreateAccessPointOutput;
import org.openapitools.client.model.CreateAppCookieStickinessPolicyInput;
import org.openapitools.client.model.CreateLBCookieStickinessPolicyInput;
import org.openapitools.client.model.CreateLoadBalancerListenerInput;
import org.openapitools.client.model.CreateLoadBalancerPolicyInput;
import org.openapitools.client.model.DeleteAccessPointInput;
import org.openapitools.client.model.DeleteLoadBalancerListenerInput;
import org.openapitools.client.model.DeleteLoadBalancerPolicyInput;
import org.openapitools.client.model.DeregisterEndPointsInput;
import org.openapitools.client.model.DeregisterEndPointsOutput;
import org.openapitools.client.model.DescribeAccessPointsInput;
import org.openapitools.client.model.DescribeAccessPointsOutput;
import org.openapitools.client.model.DescribeAccountLimitsInput;
import org.openapitools.client.model.DescribeAccountLimitsOutput;
import org.openapitools.client.model.DescribeEndPointStateInput;
import org.openapitools.client.model.DescribeEndPointStateOutput;
import org.openapitools.client.model.DescribeLoadBalancerAttributesInput;
import org.openapitools.client.model.DescribeLoadBalancerAttributesOutput;
import org.openapitools.client.model.DescribeLoadBalancerPoliciesInput;
import org.openapitools.client.model.DescribeLoadBalancerPoliciesOutput;
import org.openapitools.client.model.DescribeLoadBalancerPolicyTypesInput;
import org.openapitools.client.model.DescribeLoadBalancerPolicyTypesOutput;
import org.openapitools.client.model.DescribeTagsInput;
import org.openapitools.client.model.DescribeTagsOutput;
import org.openapitools.client.model.DetachLoadBalancerFromSubnetsInput;
import org.openapitools.client.model.DetachLoadBalancerFromSubnetsOutput;
import org.openapitools.client.model.GETConfigureHealthCheckHealthCheckParameter;
import org.openapitools.client.model.GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter;
import org.openapitools.client.model.Instance;
import org.openapitools.client.model.Listener;
import org.openapitools.client.model.ModifyLoadBalancerAttributesInput;
import org.openapitools.client.model.ModifyLoadBalancerAttributesOutput;
import org.openapitools.client.model.PolicyAttribute;
import org.openapitools.client.model.RegisterEndPointsInput;
import org.openapitools.client.model.RegisterEndPointsOutput;
import org.openapitools.client.model.RemoveAvailabilityZonesInput;
import org.openapitools.client.model.RemoveAvailabilityZonesOutput;
import org.openapitools.client.model.RemoveTagsInput;
import org.openapitools.client.model.SetLoadBalancerListenerSSLCertificateInput;
import org.openapitools.client.model.SetLoadBalancerPoliciesForBackendServerInput;
import org.openapitools.client.model.SetLoadBalancerPoliciesOfListenerInput;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TagKeyOnly;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETAddTags
     * @param loadBalancerNames The name of the load balancer. You can specify one load balancer only. (required)
     * @param tags The tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddTagsCall(List<String> loadBalancerNames, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AddTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LoadBalancerNames", loadBalancerNames));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAddTagsValidateBeforeCall(List<String> loadBalancerNames, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerNames' is set
        if (loadBalancerNames == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerNames' when calling gETAddTags(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling gETAddTags(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAddTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAddTags(Async)");
        }

        return gETAddTagsCall(loadBalancerNames, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a tag with the same key is already associated with the load balancer, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html\&quot;&gt;Tag Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerNames The name of the load balancer. You can specify one load balancer only. (required)
     * @param tags The tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETAddTags(List<String> loadBalancerNames, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETAddTagsWithHttpInfo(loadBalancerNames, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a tag with the same key is already associated with the load balancer, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html\&quot;&gt;Tag Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerNames The name of the load balancer. You can specify one load balancer only. (required)
     * @param tags The tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETAddTagsWithHttpInfo(List<String> loadBalancerNames, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAddTagsValidateBeforeCall(loadBalancerNames, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a tag with the same key is already associated with the load balancer, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html\&quot;&gt;Tag Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerNames The name of the load balancer. You can specify one load balancer only. (required)
     * @param tags The tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddTagsAsync(List<String> loadBalancerNames, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAddTagsValidateBeforeCall(loadBalancerNames, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETApplySecurityGroupsToLoadBalancer
     * @param loadBalancerName The name of the load balancer. (required)
     * @param securityGroups The IDs of the security groups to associate with the load balancer. Note that you cannot specify the name of the security group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETApplySecurityGroupsToLoadBalancerCall(String loadBalancerName, List<String> securityGroups, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ApplySecurityGroupsToLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (securityGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SecurityGroups", securityGroups));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETApplySecurityGroupsToLoadBalancerValidateBeforeCall(String loadBalancerName, List<String> securityGroups, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETApplySecurityGroupsToLoadBalancer(Async)");
        }

        // verify the required parameter 'securityGroups' is set
        if (securityGroups == null) {
            throw new ApiException("Missing the required parameter 'securityGroups' when calling gETApplySecurityGroupsToLoadBalancer(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETApplySecurityGroupsToLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETApplySecurityGroupsToLoadBalancer(Async)");
        }

        return gETApplySecurityGroupsToLoadBalancerCall(loadBalancerName, securityGroups, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-vpc-security-groups\&quot;&gt;Security Groups for Load Balancers in a VPC&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param securityGroups The IDs of the security groups to associate with the load balancer. Note that you cannot specify the name of the security group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApplySecurityGroupsToLoadBalancerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public ApplySecurityGroupsToLoadBalancerOutput gETApplySecurityGroupsToLoadBalancer(String loadBalancerName, List<String> securityGroups, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ApplySecurityGroupsToLoadBalancerOutput> localVarResp = gETApplySecurityGroupsToLoadBalancerWithHttpInfo(loadBalancerName, securityGroups, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-vpc-security-groups\&quot;&gt;Security Groups for Load Balancers in a VPC&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param securityGroups The IDs of the security groups to associate with the load balancer. Note that you cannot specify the name of the security group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ApplySecurityGroupsToLoadBalancerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplySecurityGroupsToLoadBalancerOutput> gETApplySecurityGroupsToLoadBalancerWithHttpInfo(String loadBalancerName, List<String> securityGroups, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETApplySecurityGroupsToLoadBalancerValidateBeforeCall(loadBalancerName, securityGroups, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ApplySecurityGroupsToLoadBalancerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-vpc-security-groups\&quot;&gt;Security Groups for Load Balancers in a VPC&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param securityGroups The IDs of the security groups to associate with the load balancer. Note that you cannot specify the name of the security group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETApplySecurityGroupsToLoadBalancerAsync(String loadBalancerName, List<String> securityGroups, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ApplySecurityGroupsToLoadBalancerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETApplySecurityGroupsToLoadBalancerValidateBeforeCall(loadBalancerName, securityGroups, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ApplySecurityGroupsToLoadBalancerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETAttachLoadBalancerToSubnets
     * @param loadBalancerName The name of the load balancer. (required)
     * @param subnets The IDs of the subnets to add. You can add only one subnet per Availability Zone. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAttachLoadBalancerToSubnetsCall(String loadBalancerName, List<String> subnets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AttachLoadBalancerToSubnets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (subnets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Subnets", subnets));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAttachLoadBalancerToSubnetsValidateBeforeCall(String loadBalancerName, List<String> subnets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETAttachLoadBalancerToSubnets(Async)");
        }

        // verify the required parameter 'subnets' is set
        if (subnets == null) {
            throw new ApiException("Missing the required parameter 'subnets' when calling gETAttachLoadBalancerToSubnets(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAttachLoadBalancerToSubnets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAttachLoadBalancerToSubnets(Async)");
        }

        return gETAttachLoadBalancerToSubnetsCall(loadBalancerName, subnets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds one or more subnets to the set of configured subnets for the specified load balancer.&lt;/p&gt; &lt;p&gt;The load balancer evenly distributes requests across all registered subnets. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-manage-subnets.html\&quot;&gt;Add or Remove Subnets for Your Load Balancer in a VPC&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param subnets The IDs of the subnets to add. You can add only one subnet per Availability Zone. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AttachLoadBalancerToSubnetsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public AttachLoadBalancerToSubnetsOutput gETAttachLoadBalancerToSubnets(String loadBalancerName, List<String> subnets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AttachLoadBalancerToSubnetsOutput> localVarResp = gETAttachLoadBalancerToSubnetsWithHttpInfo(loadBalancerName, subnets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds one or more subnets to the set of configured subnets for the specified load balancer.&lt;/p&gt; &lt;p&gt;The load balancer evenly distributes requests across all registered subnets. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-manage-subnets.html\&quot;&gt;Add or Remove Subnets for Your Load Balancer in a VPC&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param subnets The IDs of the subnets to add. You can add only one subnet per Availability Zone. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AttachLoadBalancerToSubnetsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachLoadBalancerToSubnetsOutput> gETAttachLoadBalancerToSubnetsWithHttpInfo(String loadBalancerName, List<String> subnets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAttachLoadBalancerToSubnetsValidateBeforeCall(loadBalancerName, subnets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AttachLoadBalancerToSubnetsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds one or more subnets to the set of configured subnets for the specified load balancer.&lt;/p&gt; &lt;p&gt;The load balancer evenly distributes requests across all registered subnets. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-manage-subnets.html\&quot;&gt;Add or Remove Subnets for Your Load Balancer in a VPC&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param subnets The IDs of the subnets to add. You can add only one subnet per Availability Zone. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAttachLoadBalancerToSubnetsAsync(String loadBalancerName, List<String> subnets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AttachLoadBalancerToSubnetsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAttachLoadBalancerToSubnetsValidateBeforeCall(loadBalancerName, subnets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AttachLoadBalancerToSubnetsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETConfigureHealthCheck
     * @param loadBalancerName The name of the load balancer. (required)
     * @param healthCheck The configuration information. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETConfigureHealthCheckCall(String loadBalancerName, GETConfigureHealthCheckHealthCheckParameter healthCheck, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ConfigureHealthCheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (healthCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheck", healthCheck));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETConfigureHealthCheckValidateBeforeCall(String loadBalancerName, GETConfigureHealthCheckHealthCheckParameter healthCheck, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETConfigureHealthCheck(Async)");
        }

        // verify the required parameter 'healthCheck' is set
        if (healthCheck == null) {
            throw new ApiException("Missing the required parameter 'healthCheck' when calling gETConfigureHealthCheck(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETConfigureHealthCheck(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETConfigureHealthCheck(Async)");
        }

        return gETConfigureHealthCheckCall(loadBalancerName, healthCheck, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Specifies the health check settings to use when evaluating the health state of your EC2 instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html\&quot;&gt;Configure Health Checks for Your Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param healthCheck The configuration information. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ConfigureHealthCheckOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ConfigureHealthCheckOutput gETConfigureHealthCheck(String loadBalancerName, GETConfigureHealthCheckHealthCheckParameter healthCheck, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ConfigureHealthCheckOutput> localVarResp = gETConfigureHealthCheckWithHttpInfo(loadBalancerName, healthCheck, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Specifies the health check settings to use when evaluating the health state of your EC2 instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html\&quot;&gt;Configure Health Checks for Your Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param healthCheck The configuration information. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ConfigureHealthCheckOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigureHealthCheckOutput> gETConfigureHealthCheckWithHttpInfo(String loadBalancerName, GETConfigureHealthCheckHealthCheckParameter healthCheck, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETConfigureHealthCheckValidateBeforeCall(loadBalancerName, healthCheck, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ConfigureHealthCheckOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Specifies the health check settings to use when evaluating the health state of your EC2 instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html\&quot;&gt;Configure Health Checks for Your Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param healthCheck The configuration information. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETConfigureHealthCheckAsync(String loadBalancerName, GETConfigureHealthCheckHealthCheckParameter healthCheck, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ConfigureHealthCheckOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETConfigureHealthCheckValidateBeforeCall(loadBalancerName, healthCheck, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ConfigureHealthCheckOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateAppCookieStickinessPolicy
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer. (required)
     * @param cookieName The name of the application cookie used for stickiness. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateAppCookieStickinessPolicyCall(String loadBalancerName, String policyName, String cookieName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateAppCookieStickinessPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (policyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicyName", policyName));
        }

        if (cookieName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CookieName", cookieName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateAppCookieStickinessPolicyValidateBeforeCall(String loadBalancerName, String policyName, String cookieName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETCreateAppCookieStickinessPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling gETCreateAppCookieStickinessPolicy(Async)");
        }

        // verify the required parameter 'cookieName' is set
        if (cookieName == null) {
            throw new ApiException("Missing the required parameter 'cookieName' when calling gETCreateAppCookieStickinessPolicy(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateAppCookieStickinessPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateAppCookieStickinessPolicy(Async)");
        }

        return gETCreateAppCookieStickinessPolicyCall(loadBalancerName, policyName, cookieName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt; &lt;p&gt;This policy is similar to the policy created by &lt;a&gt;CreateLBCookieStickinessPolicy&lt;/a&gt;, except that the lifetime of the special Elastic Load Balancing cookie, &lt;code&gt;AWSELB&lt;/code&gt;, follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer only inserts a new stickiness cookie when the application response includes a new application cookie.&lt;/p&gt; &lt;p&gt;If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\&quot;&gt;Application-Controlled Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer. (required)
     * @param cookieName The name of the application cookie used for stickiness. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETCreateAppCookieStickinessPolicy(String loadBalancerName, String policyName, String cookieName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETCreateAppCookieStickinessPolicyWithHttpInfo(loadBalancerName, policyName, cookieName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt; &lt;p&gt;This policy is similar to the policy created by &lt;a&gt;CreateLBCookieStickinessPolicy&lt;/a&gt;, except that the lifetime of the special Elastic Load Balancing cookie, &lt;code&gt;AWSELB&lt;/code&gt;, follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer only inserts a new stickiness cookie when the application response includes a new application cookie.&lt;/p&gt; &lt;p&gt;If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\&quot;&gt;Application-Controlled Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer. (required)
     * @param cookieName The name of the application cookie used for stickiness. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETCreateAppCookieStickinessPolicyWithHttpInfo(String loadBalancerName, String policyName, String cookieName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETCreateAppCookieStickinessPolicyValidateBeforeCall(loadBalancerName, policyName, cookieName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt; &lt;p&gt;This policy is similar to the policy created by &lt;a&gt;CreateLBCookieStickinessPolicy&lt;/a&gt;, except that the lifetime of the special Elastic Load Balancing cookie, &lt;code&gt;AWSELB&lt;/code&gt;, follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer only inserts a new stickiness cookie when the application response includes a new application cookie.&lt;/p&gt; &lt;p&gt;If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\&quot;&gt;Application-Controlled Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer. (required)
     * @param cookieName The name of the application cookie used for stickiness. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateAppCookieStickinessPolicyAsync(String loadBalancerName, String policyName, String cookieName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateAppCookieStickinessPolicyValidateBeforeCall(loadBalancerName, policyName, cookieName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateLBCookieStickinessPolicy
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cookieExpirationPeriod The time period, in seconds, after which the cookie should be considered stale. If you do not specify this parameter, the default value is 0, which indicates that the sticky session should last for the duration of the browser session. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateLBCookieStickinessPolicyCall(String loadBalancerName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer cookieExpirationPeriod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateLBCookieStickinessPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (policyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicyName", policyName));
        }

        if (cookieExpirationPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CookieExpirationPeriod", cookieExpirationPeriod));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateLBCookieStickinessPolicyValidateBeforeCall(String loadBalancerName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer cookieExpirationPeriod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETCreateLBCookieStickinessPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling gETCreateLBCookieStickinessPolicy(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateLBCookieStickinessPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateLBCookieStickinessPolicy(Async)");
        }

        return gETCreateLBCookieStickinessPolicyCall(loadBalancerName, policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cookieExpirationPeriod, _callback);

    }

    /**
     * 
     * &lt;p&gt;Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt; &lt;p&gt;When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request. If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.&lt;/p&gt; &lt;p&gt;A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\&quot;&gt;Duration-Based Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cookieExpirationPeriod The time period, in seconds, after which the cookie should be considered stale. If you do not specify this parameter, the default value is 0, which indicates that the sticky session should last for the duration of the browser session. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETCreateLBCookieStickinessPolicy(String loadBalancerName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer cookieExpirationPeriod) throws ApiException {
        ApiResponse<Object> localVarResp = gETCreateLBCookieStickinessPolicyWithHttpInfo(loadBalancerName, policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cookieExpirationPeriod);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt; &lt;p&gt;When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request. If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.&lt;/p&gt; &lt;p&gt;A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\&quot;&gt;Duration-Based Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cookieExpirationPeriod The time period, in seconds, after which the cookie should be considered stale. If you do not specify this parameter, the default value is 0, which indicates that the sticky session should last for the duration of the browser session. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETCreateLBCookieStickinessPolicyWithHttpInfo(String loadBalancerName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer cookieExpirationPeriod) throws ApiException {
        okhttp3.Call localVarCall = gETCreateLBCookieStickinessPolicyValidateBeforeCall(loadBalancerName, policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cookieExpirationPeriod, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt; &lt;p&gt;When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request. If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.&lt;/p&gt; &lt;p&gt;A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\&quot;&gt;Duration-Based Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cookieExpirationPeriod The time period, in seconds, after which the cookie should be considered stale. If you do not specify this parameter, the default value is 0, which indicates that the sticky session should last for the duration of the browser session. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateLBCookieStickinessPolicyAsync(String loadBalancerName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer cookieExpirationPeriod, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateLBCookieStickinessPolicyValidateBeforeCall(loadBalancerName, policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cookieExpirationPeriod, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateLoadBalancer
     * @param loadBalancerName &lt;p&gt;The name of the load balancer.&lt;/p&gt; &lt;p&gt;This name must be unique within your set of load balancers for the region, must have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and cannot begin or end with a hyphen.&lt;/p&gt; (required)
     * @param listeners &lt;p&gt;The listeners.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html\&quot;&gt;Listeners for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones &lt;p&gt;One or more Availability Zones from the same region as the load balancer.&lt;/p&gt; &lt;p&gt;You must specify at least one Availability Zone.&lt;/p&gt; &lt;p&gt;You can add more Availability Zones after you create the load balancer using &lt;a&gt;EnableAvailabilityZonesForLoadBalancer&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param subnets The IDs of the subnets in your VPC to attach to the load balancer. Specify one subnet per Availability Zone specified in &lt;code&gt;AvailabilityZones&lt;/code&gt;. (optional)
     * @param securityGroups The IDs of the security groups to assign to the load balancer. (optional)
     * @param scheme &lt;p&gt;The type of a load balancer. Valid only for load balancers in a VPC.&lt;/p&gt; &lt;p&gt;By default, Elastic Load Balancing creates an Internet-facing load balancer with a DNS name that resolves to public IP addresses. For more information about Internet-facing and Internal load balancers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/how-elastic-load-balancing-works.html#load-balancer-scheme\&quot;&gt;Load Balancer Scheme&lt;/a&gt; in the &lt;i&gt;Elastic Load Balancing User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Specify &lt;code&gt;internal&lt;/code&gt; to create a load balancer with a DNS name that resolves to private IP addresses.&lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of tags to assign to the load balancer.&lt;/p&gt; &lt;p&gt;For more information about tagging your load balancer, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html\&quot;&gt;Tag Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateAccessPointNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyAccessPointsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateLoadBalancerCall(String loadBalancerName, List<Listener> listeners, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, List<String> subnets, List<String> securityGroups, String scheme, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (listeners != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Listeners", listeners));
        }

        if (availabilityZones != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AvailabilityZones", availabilityZones));
        }

        if (subnets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Subnets", subnets));
        }

        if (securityGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SecurityGroups", securityGroups));
        }

        if (scheme != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Scheme", scheme));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateLoadBalancerValidateBeforeCall(String loadBalancerName, List<Listener> listeners, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, List<String> subnets, List<String> securityGroups, String scheme, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETCreateLoadBalancer(Async)");
        }

        // verify the required parameter 'listeners' is set
        if (listeners == null) {
            throw new ApiException("Missing the required parameter 'listeners' when calling gETCreateLoadBalancer(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateLoadBalancer(Async)");
        }

        return gETCreateLoadBalancerCall(loadBalancerName, listeners, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, subnets, securityGroups, scheme, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a Classic Load Balancer.&lt;/p&gt; &lt;p&gt;You can add listeners, security groups, subnets, and tags when you create your load balancer, or you can add them later using &lt;a&gt;CreateLoadBalancerListeners&lt;/a&gt;, &lt;a&gt;ApplySecurityGroupsToLoadBalancer&lt;/a&gt;, &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;, and &lt;a&gt;AddTags&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To describe your current load balancers, see &lt;a&gt;DescribeLoadBalancers&lt;/a&gt;. When you are finished with a load balancer, you can delete it using &lt;a&gt;DeleteLoadBalancer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\&quot;&gt;Limits for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName &lt;p&gt;The name of the load balancer.&lt;/p&gt; &lt;p&gt;This name must be unique within your set of load balancers for the region, must have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and cannot begin or end with a hyphen.&lt;/p&gt; (required)
     * @param listeners &lt;p&gt;The listeners.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html\&quot;&gt;Listeners for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones &lt;p&gt;One or more Availability Zones from the same region as the load balancer.&lt;/p&gt; &lt;p&gt;You must specify at least one Availability Zone.&lt;/p&gt; &lt;p&gt;You can add more Availability Zones after you create the load balancer using &lt;a&gt;EnableAvailabilityZonesForLoadBalancer&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param subnets The IDs of the subnets in your VPC to attach to the load balancer. Specify one subnet per Availability Zone specified in &lt;code&gt;AvailabilityZones&lt;/code&gt;. (optional)
     * @param securityGroups The IDs of the security groups to assign to the load balancer. (optional)
     * @param scheme &lt;p&gt;The type of a load balancer. Valid only for load balancers in a VPC.&lt;/p&gt; &lt;p&gt;By default, Elastic Load Balancing creates an Internet-facing load balancer with a DNS name that resolves to public IP addresses. For more information about Internet-facing and Internal load balancers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/how-elastic-load-balancing-works.html#load-balancer-scheme\&quot;&gt;Load Balancer Scheme&lt;/a&gt; in the &lt;i&gt;Elastic Load Balancing User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Specify &lt;code&gt;internal&lt;/code&gt; to create a load balancer with a DNS name that resolves to private IP addresses.&lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of tags to assign to the load balancer.&lt;/p&gt; &lt;p&gt;For more information about tagging your load balancer, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html\&quot;&gt;Tag Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return CreateAccessPointOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateAccessPointNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyAccessPointsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccessPointOutput gETCreateLoadBalancer(String loadBalancerName, List<Listener> listeners, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, List<String> subnets, List<String> securityGroups, String scheme, List<Tag> tags) throws ApiException {
        ApiResponse<CreateAccessPointOutput> localVarResp = gETCreateLoadBalancerWithHttpInfo(loadBalancerName, listeners, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, subnets, securityGroups, scheme, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a Classic Load Balancer.&lt;/p&gt; &lt;p&gt;You can add listeners, security groups, subnets, and tags when you create your load balancer, or you can add them later using &lt;a&gt;CreateLoadBalancerListeners&lt;/a&gt;, &lt;a&gt;ApplySecurityGroupsToLoadBalancer&lt;/a&gt;, &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;, and &lt;a&gt;AddTags&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To describe your current load balancers, see &lt;a&gt;DescribeLoadBalancers&lt;/a&gt;. When you are finished with a load balancer, you can delete it using &lt;a&gt;DeleteLoadBalancer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\&quot;&gt;Limits for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName &lt;p&gt;The name of the load balancer.&lt;/p&gt; &lt;p&gt;This name must be unique within your set of load balancers for the region, must have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and cannot begin or end with a hyphen.&lt;/p&gt; (required)
     * @param listeners &lt;p&gt;The listeners.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html\&quot;&gt;Listeners for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones &lt;p&gt;One or more Availability Zones from the same region as the load balancer.&lt;/p&gt; &lt;p&gt;You must specify at least one Availability Zone.&lt;/p&gt; &lt;p&gt;You can add more Availability Zones after you create the load balancer using &lt;a&gt;EnableAvailabilityZonesForLoadBalancer&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param subnets The IDs of the subnets in your VPC to attach to the load balancer. Specify one subnet per Availability Zone specified in &lt;code&gt;AvailabilityZones&lt;/code&gt;. (optional)
     * @param securityGroups The IDs of the security groups to assign to the load balancer. (optional)
     * @param scheme &lt;p&gt;The type of a load balancer. Valid only for load balancers in a VPC.&lt;/p&gt; &lt;p&gt;By default, Elastic Load Balancing creates an Internet-facing load balancer with a DNS name that resolves to public IP addresses. For more information about Internet-facing and Internal load balancers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/how-elastic-load-balancing-works.html#load-balancer-scheme\&quot;&gt;Load Balancer Scheme&lt;/a&gt; in the &lt;i&gt;Elastic Load Balancing User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Specify &lt;code&gt;internal&lt;/code&gt; to create a load balancer with a DNS name that resolves to private IP addresses.&lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of tags to assign to the load balancer.&lt;/p&gt; &lt;p&gt;For more information about tagging your load balancer, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html\&quot;&gt;Tag Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;CreateAccessPointOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateAccessPointNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyAccessPointsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccessPointOutput> gETCreateLoadBalancerWithHttpInfo(String loadBalancerName, List<Listener> listeners, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, List<String> subnets, List<String> securityGroups, String scheme, List<Tag> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateLoadBalancerValidateBeforeCall(loadBalancerName, listeners, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, subnets, securityGroups, scheme, tags, null);
        Type localVarReturnType = new TypeToken<CreateAccessPointOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a Classic Load Balancer.&lt;/p&gt; &lt;p&gt;You can add listeners, security groups, subnets, and tags when you create your load balancer, or you can add them later using &lt;a&gt;CreateLoadBalancerListeners&lt;/a&gt;, &lt;a&gt;ApplySecurityGroupsToLoadBalancer&lt;/a&gt;, &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;, and &lt;a&gt;AddTags&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To describe your current load balancers, see &lt;a&gt;DescribeLoadBalancers&lt;/a&gt;. When you are finished with a load balancer, you can delete it using &lt;a&gt;DeleteLoadBalancer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\&quot;&gt;Limits for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName &lt;p&gt;The name of the load balancer.&lt;/p&gt; &lt;p&gt;This name must be unique within your set of load balancers for the region, must have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and cannot begin or end with a hyphen.&lt;/p&gt; (required)
     * @param listeners &lt;p&gt;The listeners.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html\&quot;&gt;Listeners for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones &lt;p&gt;One or more Availability Zones from the same region as the load balancer.&lt;/p&gt; &lt;p&gt;You must specify at least one Availability Zone.&lt;/p&gt; &lt;p&gt;You can add more Availability Zones after you create the load balancer using &lt;a&gt;EnableAvailabilityZonesForLoadBalancer&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param subnets The IDs of the subnets in your VPC to attach to the load balancer. Specify one subnet per Availability Zone specified in &lt;code&gt;AvailabilityZones&lt;/code&gt;. (optional)
     * @param securityGroups The IDs of the security groups to assign to the load balancer. (optional)
     * @param scheme &lt;p&gt;The type of a load balancer. Valid only for load balancers in a VPC.&lt;/p&gt; &lt;p&gt;By default, Elastic Load Balancing creates an Internet-facing load balancer with a DNS name that resolves to public IP addresses. For more information about Internet-facing and Internal load balancers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/how-elastic-load-balancing-works.html#load-balancer-scheme\&quot;&gt;Load Balancer Scheme&lt;/a&gt; in the &lt;i&gt;Elastic Load Balancing User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Specify &lt;code&gt;internal&lt;/code&gt; to create a load balancer with a DNS name that resolves to private IP addresses.&lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of tags to assign to the load balancer.&lt;/p&gt; &lt;p&gt;For more information about tagging your load balancer, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html\&quot;&gt;Tag Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateAccessPointNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyAccessPointsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateLoadBalancerAsync(String loadBalancerName, List<Listener> listeners, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, List<String> subnets, List<String> securityGroups, String scheme, List<Tag> tags, final ApiCallback<CreateAccessPointOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateLoadBalancerValidateBeforeCall(loadBalancerName, listeners, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, subnets, securityGroups, scheme, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateAccessPointOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateLoadBalancerListeners
     * @param loadBalancerName The name of the load balancer. (required)
     * @param listeners The listeners. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateLoadBalancerListenersCall(String loadBalancerName, List<Listener> listeners, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateLoadBalancerListeners";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (listeners != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Listeners", listeners));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateLoadBalancerListenersValidateBeforeCall(String loadBalancerName, List<Listener> listeners, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETCreateLoadBalancerListeners(Async)");
        }

        // verify the required parameter 'listeners' is set
        if (listeners == null) {
            throw new ApiException("Missing the required parameter 'listeners' when calling gETCreateLoadBalancerListeners(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateLoadBalancerListeners(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateLoadBalancerListeners(Async)");
        }

        return gETCreateLoadBalancerListenersCall(loadBalancerName, listeners, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html\&quot;&gt;Listeners for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param listeners The listeners. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETCreateLoadBalancerListeners(String loadBalancerName, List<Listener> listeners, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETCreateLoadBalancerListenersWithHttpInfo(loadBalancerName, listeners, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html\&quot;&gt;Listeners for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param listeners The listeners. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETCreateLoadBalancerListenersWithHttpInfo(String loadBalancerName, List<Listener> listeners, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETCreateLoadBalancerListenersValidateBeforeCall(loadBalancerName, listeners, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html\&quot;&gt;Listeners for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param listeners The listeners. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateLoadBalancerListenersAsync(String loadBalancerName, List<Listener> listeners, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateLoadBalancerListenersValidateBeforeCall(loadBalancerName, listeners, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateLoadBalancerPolicy
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer. (required)
     * @param policyTypeName The name of the base policy type. To get the list of policy types, use &lt;a&gt;DescribeLoadBalancerPolicyTypes&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param policyAttributes The policy attributes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateLoadBalancerPolicyCall(String loadBalancerName, String policyName, String policyTypeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<PolicyAttribute> policyAttributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateLoadBalancerPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (policyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicyName", policyName));
        }

        if (policyTypeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicyTypeName", policyTypeName));
        }

        if (policyAttributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "PolicyAttributes", policyAttributes));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateLoadBalancerPolicyValidateBeforeCall(String loadBalancerName, String policyName, String policyTypeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<PolicyAttribute> policyAttributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETCreateLoadBalancerPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling gETCreateLoadBalancerPolicy(Async)");
        }

        // verify the required parameter 'policyTypeName' is set
        if (policyTypeName == null) {
            throw new ApiException("Missing the required parameter 'policyTypeName' when calling gETCreateLoadBalancerPolicy(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateLoadBalancerPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateLoadBalancerPolicy(Async)");
        }

        return gETCreateLoadBalancerPolicyCall(loadBalancerName, policyName, policyTypeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, policyAttributes, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a policy with the specified attributes for the specified load balancer.&lt;/p&gt; &lt;p&gt;Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer. (required)
     * @param policyTypeName The name of the base policy type. To get the list of policy types, use &lt;a&gt;DescribeLoadBalancerPolicyTypes&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param policyAttributes The policy attributes. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETCreateLoadBalancerPolicy(String loadBalancerName, String policyName, String policyTypeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<PolicyAttribute> policyAttributes) throws ApiException {
        ApiResponse<Object> localVarResp = gETCreateLoadBalancerPolicyWithHttpInfo(loadBalancerName, policyName, policyTypeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, policyAttributes);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a policy with the specified attributes for the specified load balancer.&lt;/p&gt; &lt;p&gt;Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer. (required)
     * @param policyTypeName The name of the base policy type. To get the list of policy types, use &lt;a&gt;DescribeLoadBalancerPolicyTypes&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param policyAttributes The policy attributes. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETCreateLoadBalancerPolicyWithHttpInfo(String loadBalancerName, String policyName, String policyTypeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<PolicyAttribute> policyAttributes) throws ApiException {
        okhttp3.Call localVarCall = gETCreateLoadBalancerPolicyValidateBeforeCall(loadBalancerName, policyName, policyTypeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, policyAttributes, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a policy with the specified attributes for the specified load balancer.&lt;/p&gt; &lt;p&gt;Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer. (required)
     * @param policyTypeName The name of the base policy type. To get the list of policy types, use &lt;a&gt;DescribeLoadBalancerPolicyTypes&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param policyAttributes The policy attributes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateLoadBalancerPolicyAsync(String loadBalancerName, String policyName, String policyTypeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<PolicyAttribute> policyAttributes, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateLoadBalancerPolicyValidateBeforeCall(loadBalancerName, policyName, policyTypeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, policyAttributes, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteLoadBalancer
     * @param loadBalancerName The name of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteLoadBalancerCall(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteLoadBalancerValidateBeforeCall(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETDeleteLoadBalancer(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteLoadBalancer(Async)");
        }

        return gETDeleteLoadBalancerCall(loadBalancerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified load balancer.&lt;/p&gt; &lt;p&gt;If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.&lt;/p&gt; &lt;p&gt;If the load balancer does not exist or has already been deleted, the call to &lt;code&gt;DeleteLoadBalancer&lt;/code&gt; still succeeds.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteLoadBalancer(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteLoadBalancerWithHttpInfo(loadBalancerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified load balancer.&lt;/p&gt; &lt;p&gt;If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.&lt;/p&gt; &lt;p&gt;If the load balancer does not exist or has already been deleted, the call to &lt;code&gt;DeleteLoadBalancer&lt;/code&gt; still succeeds.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteLoadBalancerWithHttpInfo(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteLoadBalancerValidateBeforeCall(loadBalancerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified load balancer.&lt;/p&gt; &lt;p&gt;If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.&lt;/p&gt; &lt;p&gt;If the load balancer does not exist or has already been deleted, the call to &lt;code&gt;DeleteLoadBalancer&lt;/code&gt; still succeeds.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteLoadBalancerAsync(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteLoadBalancerValidateBeforeCall(loadBalancerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteLoadBalancerListeners
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerPorts The client port numbers of the listeners. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteLoadBalancerListenersCall(String loadBalancerName, List<Integer> loadBalancerPorts, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteLoadBalancerListeners";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (loadBalancerPorts != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LoadBalancerPorts", loadBalancerPorts));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteLoadBalancerListenersValidateBeforeCall(String loadBalancerName, List<Integer> loadBalancerPorts, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETDeleteLoadBalancerListeners(Async)");
        }

        // verify the required parameter 'loadBalancerPorts' is set
        if (loadBalancerPorts == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerPorts' when calling gETDeleteLoadBalancerListeners(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteLoadBalancerListeners(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteLoadBalancerListeners(Async)");
        }

        return gETDeleteLoadBalancerListenersCall(loadBalancerName, loadBalancerPorts, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the specified listeners from the specified load balancer.
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerPorts The client port numbers of the listeners. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteLoadBalancerListeners(String loadBalancerName, List<Integer> loadBalancerPorts, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteLoadBalancerListenersWithHttpInfo(loadBalancerName, loadBalancerPorts, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the specified listeners from the specified load balancer.
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerPorts The client port numbers of the listeners. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteLoadBalancerListenersWithHttpInfo(String loadBalancerName, List<Integer> loadBalancerPorts, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteLoadBalancerListenersValidateBeforeCall(loadBalancerName, loadBalancerPorts, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the specified listeners from the specified load balancer.
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerPorts The client port numbers of the listeners. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteLoadBalancerListenersAsync(String loadBalancerName, List<Integer> loadBalancerPorts, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteLoadBalancerListenersValidateBeforeCall(loadBalancerName, loadBalancerPorts, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteLoadBalancerPolicy
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteLoadBalancerPolicyCall(String loadBalancerName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteLoadBalancerPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (policyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicyName", policyName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteLoadBalancerPolicyValidateBeforeCall(String loadBalancerName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETDeleteLoadBalancerPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling gETDeleteLoadBalancerPolicy(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteLoadBalancerPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteLoadBalancerPolicy(Async)");
        }

        return gETDeleteLoadBalancerPolicyCall(loadBalancerName, policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteLoadBalancerPolicy(String loadBalancerName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteLoadBalancerPolicyWithHttpInfo(loadBalancerName, policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteLoadBalancerPolicyWithHttpInfo(String loadBalancerName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteLoadBalancerPolicyValidateBeforeCall(loadBalancerName, policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.
     * @param loadBalancerName The name of the load balancer. (required)
     * @param policyName The name of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteLoadBalancerPolicyAsync(String loadBalancerName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteLoadBalancerPolicyValidateBeforeCall(loadBalancerName, policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeregisterInstancesFromLoadBalancer
     * @param loadBalancerName The name of the load balancer. (required)
     * @param instances The IDs of the instances. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeregisterInstancesFromLoadBalancerCall(String loadBalancerName, List<Instance> instances, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeregisterInstancesFromLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (instances != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Instances", instances));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeregisterInstancesFromLoadBalancerValidateBeforeCall(String loadBalancerName, List<Instance> instances, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETDeregisterInstancesFromLoadBalancer(Async)");
        }

        // verify the required parameter 'instances' is set
        if (instances == null) {
            throw new ApiException("Missing the required parameter 'instances' when calling gETDeregisterInstancesFromLoadBalancer(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeregisterInstancesFromLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeregisterInstancesFromLoadBalancer(Async)");
        }

        return gETDeregisterInstancesFromLoadBalancerCall(loadBalancerName, instances, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; to verify that the instance is deregistered from the load balancer.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\&quot;&gt;Register or De-Register EC2 Instances&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param instances The IDs of the instances. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeregisterEndPointsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public DeregisterEndPointsOutput gETDeregisterInstancesFromLoadBalancer(String loadBalancerName, List<Instance> instances, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeregisterEndPointsOutput> localVarResp = gETDeregisterInstancesFromLoadBalancerWithHttpInfo(loadBalancerName, instances, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; to verify that the instance is deregistered from the load balancer.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\&quot;&gt;Register or De-Register EC2 Instances&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param instances The IDs of the instances. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeregisterEndPointsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeregisterEndPointsOutput> gETDeregisterInstancesFromLoadBalancerWithHttpInfo(String loadBalancerName, List<Instance> instances, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeregisterInstancesFromLoadBalancerValidateBeforeCall(loadBalancerName, instances, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeregisterEndPointsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; to verify that the instance is deregistered from the load balancer.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\&quot;&gt;Register or De-Register EC2 Instances&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param instances The IDs of the instances. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeregisterInstancesFromLoadBalancerAsync(String loadBalancerName, List<Instance> instances, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeregisterEndPointsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeregisterInstancesFromLoadBalancerValidateBeforeCall(loadBalancerName, instances, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeregisterEndPointsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeAccountLimits
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAccountLimitsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAccountLimits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeAccountLimitsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeAccountLimits(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeAccountLimits(Async)");
        }

        return gETDescribeAccountLimitsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your AWS account.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\&quot;&gt;Limits for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return DescribeAccountLimitsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccountLimitsOutput gETDescribeAccountLimits(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize) throws ApiException {
        ApiResponse<DescribeAccountLimitsOutput> localVarResp = gETDescribeAccountLimitsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your AWS account.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\&quot;&gt;Limits for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return ApiResponse&lt;DescribeAccountLimitsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccountLimitsOutput> gETDescribeAccountLimitsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize, null);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your AWS account.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\&quot;&gt;Limits for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAccountLimitsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize, final ApiCallback<DescribeAccountLimitsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeInstanceHealth
     * @param loadBalancerName The name of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instances The IDs of the instances. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeInstanceHealthCall(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Instance> instances, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeInstanceHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (instances != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Instances", instances));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeInstanceHealthValidateBeforeCall(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Instance> instances, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETDescribeInstanceHealth(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeInstanceHealth(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeInstanceHealth(Async)");
        }

        return gETDescribeInstanceHealthCall(loadBalancerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instances, _callback);

    }

    /**
     * 
     * Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.
     * @param loadBalancerName The name of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instances The IDs of the instances. (optional)
     * @return DescribeEndPointStateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEndPointStateOutput gETDescribeInstanceHealth(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Instance> instances) throws ApiException {
        ApiResponse<DescribeEndPointStateOutput> localVarResp = gETDescribeInstanceHealthWithHttpInfo(loadBalancerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instances);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.
     * @param loadBalancerName The name of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instances The IDs of the instances. (optional)
     * @return ApiResponse&lt;DescribeEndPointStateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEndPointStateOutput> gETDescribeInstanceHealthWithHttpInfo(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Instance> instances) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeInstanceHealthValidateBeforeCall(loadBalancerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instances, null);
        Type localVarReturnType = new TypeToken<DescribeEndPointStateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.
     * @param loadBalancerName The name of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instances The IDs of the instances. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeInstanceHealthAsync(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Instance> instances, final ApiCallback<DescribeEndPointStateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeInstanceHealthValidateBeforeCall(loadBalancerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instances, _callback);
        Type localVarReturnType = new TypeToken<DescribeEndPointStateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeLoadBalancerAttributes
     * @param loadBalancerName The name of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancerAttributesCall(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancerAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeLoadBalancerAttributesValidateBeforeCall(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETDescribeLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeLoadBalancerAttributes(Async)");
        }

        return gETDescribeLoadBalancerAttributesCall(loadBalancerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the attributes for the specified load balancer.
     * @param loadBalancerName The name of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeLoadBalancerAttributesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancerAttributesOutput gETDescribeLoadBalancerAttributes(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeLoadBalancerAttributesOutput> localVarResp = gETDescribeLoadBalancerAttributesWithHttpInfo(loadBalancerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the attributes for the specified load balancer.
     * @param loadBalancerName The name of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeLoadBalancerAttributesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancerAttributesOutput> gETDescribeLoadBalancerAttributesWithHttpInfo(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeLoadBalancerAttributesValidateBeforeCall(loadBalancerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerAttributesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the attributes for the specified load balancer.
     * @param loadBalancerName The name of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancerAttributesAsync(String loadBalancerName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeLoadBalancerAttributesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeLoadBalancerAttributesValidateBeforeCall(loadBalancerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerAttributesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeLoadBalancerPolicies
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerName The name of the load balancer. (optional)
     * @param policyNames The names of the policies. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancerPoliciesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerName, List<String> policyNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancerPolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (policyNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "PolicyNames", policyNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeLoadBalancerPoliciesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerName, List<String> policyNames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeLoadBalancerPolicies(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeLoadBalancerPolicies(Async)");
        }

        return gETDescribeLoadBalancerPoliciesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerName, policyNames, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the specified policies.&lt;/p&gt; &lt;p&gt;If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer. If you specify a policy name associated with your load balancer, the action returns the description of that policy. If you don&#39;t specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies. The names of the sample policies have the &lt;code&gt;ELBSample-&lt;/code&gt; prefix.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerName The name of the load balancer. (optional)
     * @param policyNames The names of the policies. (optional)
     * @return DescribeLoadBalancerPoliciesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancerPoliciesOutput gETDescribeLoadBalancerPolicies(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerName, List<String> policyNames) throws ApiException {
        ApiResponse<DescribeLoadBalancerPoliciesOutput> localVarResp = gETDescribeLoadBalancerPoliciesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerName, policyNames);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the specified policies.&lt;/p&gt; &lt;p&gt;If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer. If you specify a policy name associated with your load balancer, the action returns the description of that policy. If you don&#39;t specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies. The names of the sample policies have the &lt;code&gt;ELBSample-&lt;/code&gt; prefix.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerName The name of the load balancer. (optional)
     * @param policyNames The names of the policies. (optional)
     * @return ApiResponse&lt;DescribeLoadBalancerPoliciesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancerPoliciesOutput> gETDescribeLoadBalancerPoliciesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerName, List<String> policyNames) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeLoadBalancerPoliciesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerName, policyNames, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerPoliciesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the specified policies.&lt;/p&gt; &lt;p&gt;If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer. If you specify a policy name associated with your load balancer, the action returns the description of that policy. If you don&#39;t specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies. The names of the sample policies have the &lt;code&gt;ELBSample-&lt;/code&gt; prefix.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerName The name of the load balancer. (optional)
     * @param policyNames The names of the policies. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancerPoliciesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerName, List<String> policyNames, final ApiCallback<DescribeLoadBalancerPoliciesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeLoadBalancerPoliciesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerName, policyNames, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerPoliciesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeLoadBalancerPolicyTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param policyTypeNames The names of the policy types. If no names are specified, describes all policy types defined by Elastic Load Balancing. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancerPolicyTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> policyTypeNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancerPolicyTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyTypeNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "PolicyTypeNames", policyTypeNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeLoadBalancerPolicyTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> policyTypeNames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeLoadBalancerPolicyTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeLoadBalancerPolicyTypes(Async)");
        }

        return gETDescribeLoadBalancerPolicyTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, policyTypeNames, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the specified load balancer policy types or all load balancer policy types.&lt;/p&gt; &lt;p&gt;The description of each type indicates how it can be used. For example, some policies can be used only with layer 7 listeners, some policies can be used only with layer 4 listeners, and some policies can be used only with your EC2 instances.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;CreateLoadBalancerPolicy&lt;/a&gt; to create a policy configuration for any of these policy types. Then, depending on the policy type, use either &lt;a&gt;SetLoadBalancerPoliciesOfListener&lt;/a&gt; or &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt; to set the policy.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param policyTypeNames The names of the policy types. If no names are specified, describes all policy types defined by Elastic Load Balancing. (optional)
     * @return DescribeLoadBalancerPolicyTypesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancerPolicyTypesOutput gETDescribeLoadBalancerPolicyTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> policyTypeNames) throws ApiException {
        ApiResponse<DescribeLoadBalancerPolicyTypesOutput> localVarResp = gETDescribeLoadBalancerPolicyTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, policyTypeNames);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the specified load balancer policy types or all load balancer policy types.&lt;/p&gt; &lt;p&gt;The description of each type indicates how it can be used. For example, some policies can be used only with layer 7 listeners, some policies can be used only with layer 4 listeners, and some policies can be used only with your EC2 instances.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;CreateLoadBalancerPolicy&lt;/a&gt; to create a policy configuration for any of these policy types. Then, depending on the policy type, use either &lt;a&gt;SetLoadBalancerPoliciesOfListener&lt;/a&gt; or &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt; to set the policy.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param policyTypeNames The names of the policy types. If no names are specified, describes all policy types defined by Elastic Load Balancing. (optional)
     * @return ApiResponse&lt;DescribeLoadBalancerPolicyTypesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancerPolicyTypesOutput> gETDescribeLoadBalancerPolicyTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> policyTypeNames) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeLoadBalancerPolicyTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, policyTypeNames, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerPolicyTypesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the specified load balancer policy types or all load balancer policy types.&lt;/p&gt; &lt;p&gt;The description of each type indicates how it can be used. For example, some policies can be used only with layer 7 listeners, some policies can be used only with layer 4 listeners, and some policies can be used only with your EC2 instances.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;CreateLoadBalancerPolicy&lt;/a&gt; to create a policy configuration for any of these policy types. Then, depending on the policy type, use either &lt;a&gt;SetLoadBalancerPoliciesOfListener&lt;/a&gt; or &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt; to set the policy.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param policyTypeNames The names of the policy types. If no names are specified, describes all policy types defined by Elastic Load Balancing. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancerPolicyTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> policyTypeNames, final ApiCallback<DescribeLoadBalancerPolicyTypesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeLoadBalancerPolicyTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, policyTypeNames, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerPolicyTypesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeLoadBalancers
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerNames The names of the load balancers. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call (a number from 1 to 400). The default is 400. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DependencyThrottleException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> loadBalancerNames, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LoadBalancerNames", loadBalancerNames));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeLoadBalancersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> loadBalancerNames, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeLoadBalancers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeLoadBalancers(Async)");
        }

        return gETDescribeLoadBalancersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerNames, marker, pageSize, _callback);

    }

    /**
     * 
     * Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerNames The names of the load balancers. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call (a number from 1 to 400). The default is 400. (optional)
     * @return DescribeAccessPointsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DependencyThrottleException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccessPointsOutput gETDescribeLoadBalancers(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> loadBalancerNames, String marker, Integer pageSize) throws ApiException {
        ApiResponse<DescribeAccessPointsOutput> localVarResp = gETDescribeLoadBalancersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerNames, marker, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerNames The names of the load balancers. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call (a number from 1 to 400). The default is 400. (optional)
     * @return ApiResponse&lt;DescribeAccessPointsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DependencyThrottleException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccessPointsOutput> gETDescribeLoadBalancersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> loadBalancerNames, String marker, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerNames, marker, pageSize, null);
        Type localVarReturnType = new TypeToken<DescribeAccessPointsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerNames The names of the load balancers. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call (a number from 1 to 400). The default is 400. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DependencyThrottleException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> loadBalancerNames, String marker, Integer pageSize, final ApiCallback<DescribeAccessPointsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerNames, marker, pageSize, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccessPointsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeTags
     * @param loadBalancerNames The names of the load balancers. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTagsCall(List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LoadBalancerNames", loadBalancerNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeTagsValidateBeforeCall(List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerNames' is set
        if (loadBalancerNames == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerNames' when calling gETDescribeTags(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeTags(Async)");
        }

        return gETDescribeTagsCall(loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the tags associated with the specified load balancers.
     * @param loadBalancerNames The names of the load balancers. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeTagsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTagsOutput gETDescribeTags(List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeTagsOutput> localVarResp = gETDescribeTagsWithHttpInfo(loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the tags associated with the specified load balancers.
     * @param loadBalancerNames The names of the load balancers. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeTagsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTagsOutput> gETDescribeTagsWithHttpInfo(List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeTagsValidateBeforeCall(loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeTagsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the tags associated with the specified load balancers.
     * @param loadBalancerNames The names of the load balancers. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTagsAsync(List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeTagsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeTagsValidateBeforeCall(loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeTagsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDetachLoadBalancerFromSubnets
     * @param loadBalancerName The name of the load balancer. (required)
     * @param subnets The IDs of the subnets. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetachLoadBalancerFromSubnetsCall(String loadBalancerName, List<String> subnets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DetachLoadBalancerFromSubnets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (subnets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Subnets", subnets));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDetachLoadBalancerFromSubnetsValidateBeforeCall(String loadBalancerName, List<String> subnets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETDetachLoadBalancerFromSubnets(Async)");
        }

        // verify the required parameter 'subnets' is set
        if (subnets == null) {
            throw new ApiException("Missing the required parameter 'subnets' when calling gETDetachLoadBalancerFromSubnets(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDetachLoadBalancerFromSubnets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDetachLoadBalancerFromSubnets(Async)");
        }

        return gETDetachLoadBalancerFromSubnetsCall(loadBalancerName, subnets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes the specified subnets from the set of configured subnets for the load balancer.&lt;/p&gt; &lt;p&gt;After a subnet is removed, all EC2 instances registered with the load balancer in the removed subnet go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer balances the traffic among the remaining routable subnets.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param subnets The IDs of the subnets. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DetachLoadBalancerFromSubnetsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public DetachLoadBalancerFromSubnetsOutput gETDetachLoadBalancerFromSubnets(String loadBalancerName, List<String> subnets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DetachLoadBalancerFromSubnetsOutput> localVarResp = gETDetachLoadBalancerFromSubnetsWithHttpInfo(loadBalancerName, subnets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Removes the specified subnets from the set of configured subnets for the load balancer.&lt;/p&gt; &lt;p&gt;After a subnet is removed, all EC2 instances registered with the load balancer in the removed subnet go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer balances the traffic among the remaining routable subnets.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param subnets The IDs of the subnets. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DetachLoadBalancerFromSubnetsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetachLoadBalancerFromSubnetsOutput> gETDetachLoadBalancerFromSubnetsWithHttpInfo(String loadBalancerName, List<String> subnets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDetachLoadBalancerFromSubnetsValidateBeforeCall(loadBalancerName, subnets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DetachLoadBalancerFromSubnetsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes the specified subnets from the set of configured subnets for the load balancer.&lt;/p&gt; &lt;p&gt;After a subnet is removed, all EC2 instances registered with the load balancer in the removed subnet go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer balances the traffic among the remaining routable subnets.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param subnets The IDs of the subnets. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetachLoadBalancerFromSubnetsAsync(String loadBalancerName, List<String> subnets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DetachLoadBalancerFromSubnetsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDetachLoadBalancerFromSubnetsValidateBeforeCall(loadBalancerName, subnets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DetachLoadBalancerFromSubnetsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDisableAvailabilityZonesForLoadBalancer
     * @param loadBalancerName The name of the load balancer. (required)
     * @param availabilityZones The Availability Zones. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDisableAvailabilityZonesForLoadBalancerCall(String loadBalancerName, List<String> availabilityZones, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DisableAvailabilityZonesForLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (availabilityZones != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AvailabilityZones", availabilityZones));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDisableAvailabilityZonesForLoadBalancerValidateBeforeCall(String loadBalancerName, List<String> availabilityZones, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETDisableAvailabilityZonesForLoadBalancer(Async)");
        }

        // verify the required parameter 'availabilityZones' is set
        if (availabilityZones == null) {
            throw new ApiException("Missing the required parameter 'availabilityZones' when calling gETDisableAvailabilityZonesForLoadBalancer(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDisableAvailabilityZonesForLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDisableAvailabilityZonesForLoadBalancer(Async)");
        }

        return gETDisableAvailabilityZonesForLoadBalancerCall(loadBalancerName, availabilityZones, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.&lt;/p&gt; &lt;p&gt;For load balancers in a non-default VPC, use &lt;a&gt;DetachLoadBalancerFromSubnets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There must be at least one Availability Zone registered with a load balancer at all times. After an Availability Zone is removed, all instances registered with the load balancer that are in the removed Availability Zone go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer attempts to equally balance the traffic among its remaining Availability Zones.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\&quot;&gt;Add or Remove Availability Zones&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param availabilityZones The Availability Zones. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RemoveAvailabilityZonesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAvailabilityZonesOutput gETDisableAvailabilityZonesForLoadBalancer(String loadBalancerName, List<String> availabilityZones, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RemoveAvailabilityZonesOutput> localVarResp = gETDisableAvailabilityZonesForLoadBalancerWithHttpInfo(loadBalancerName, availabilityZones, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.&lt;/p&gt; &lt;p&gt;For load balancers in a non-default VPC, use &lt;a&gt;DetachLoadBalancerFromSubnets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There must be at least one Availability Zone registered with a load balancer at all times. After an Availability Zone is removed, all instances registered with the load balancer that are in the removed Availability Zone go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer attempts to equally balance the traffic among its remaining Availability Zones.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\&quot;&gt;Add or Remove Availability Zones&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param availabilityZones The Availability Zones. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RemoveAvailabilityZonesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoveAvailabilityZonesOutput> gETDisableAvailabilityZonesForLoadBalancerWithHttpInfo(String loadBalancerName, List<String> availabilityZones, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDisableAvailabilityZonesForLoadBalancerValidateBeforeCall(loadBalancerName, availabilityZones, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RemoveAvailabilityZonesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.&lt;/p&gt; &lt;p&gt;For load balancers in a non-default VPC, use &lt;a&gt;DetachLoadBalancerFromSubnets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There must be at least one Availability Zone registered with a load balancer at all times. After an Availability Zone is removed, all instances registered with the load balancer that are in the removed Availability Zone go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer attempts to equally balance the traffic among its remaining Availability Zones.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\&quot;&gt;Add or Remove Availability Zones&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param availabilityZones The Availability Zones. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDisableAvailabilityZonesForLoadBalancerAsync(String loadBalancerName, List<String> availabilityZones, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RemoveAvailabilityZonesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDisableAvailabilityZonesForLoadBalancerValidateBeforeCall(loadBalancerName, availabilityZones, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RemoveAvailabilityZonesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETEnableAvailabilityZonesForLoadBalancer
     * @param loadBalancerName The name of the load balancer. (required)
     * @param availabilityZones The Availability Zones. These must be in the same region as the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETEnableAvailabilityZonesForLoadBalancerCall(String loadBalancerName, List<String> availabilityZones, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=EnableAvailabilityZonesForLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (availabilityZones != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AvailabilityZones", availabilityZones));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETEnableAvailabilityZonesForLoadBalancerValidateBeforeCall(String loadBalancerName, List<String> availabilityZones, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETEnableAvailabilityZonesForLoadBalancer(Async)");
        }

        // verify the required parameter 'availabilityZones' is set
        if (availabilityZones == null) {
            throw new ApiException("Missing the required parameter 'availabilityZones' when calling gETEnableAvailabilityZonesForLoadBalancer(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETEnableAvailabilityZonesForLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETEnableAvailabilityZonesForLoadBalancer(Async)");
        }

        return gETEnableAvailabilityZonesForLoadBalancerCall(loadBalancerName, availabilityZones, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.&lt;/p&gt; &lt;p&gt;For load balancers in a non-default VPC, use &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The load balancer evenly distributes requests across all its registered Availability Zones that contain instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\&quot;&gt;Add or Remove Availability Zones&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param availabilityZones The Availability Zones. These must be in the same region as the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AddAvailabilityZonesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public AddAvailabilityZonesOutput gETEnableAvailabilityZonesForLoadBalancer(String loadBalancerName, List<String> availabilityZones, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AddAvailabilityZonesOutput> localVarResp = gETEnableAvailabilityZonesForLoadBalancerWithHttpInfo(loadBalancerName, availabilityZones, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.&lt;/p&gt; &lt;p&gt;For load balancers in a non-default VPC, use &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The load balancer evenly distributes requests across all its registered Availability Zones that contain instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\&quot;&gt;Add or Remove Availability Zones&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param availabilityZones The Availability Zones. These must be in the same region as the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AddAvailabilityZonesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddAvailabilityZonesOutput> gETEnableAvailabilityZonesForLoadBalancerWithHttpInfo(String loadBalancerName, List<String> availabilityZones, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETEnableAvailabilityZonesForLoadBalancerValidateBeforeCall(loadBalancerName, availabilityZones, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AddAvailabilityZonesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.&lt;/p&gt; &lt;p&gt;For load balancers in a non-default VPC, use &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The load balancer evenly distributes requests across all its registered Availability Zones that contain instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\&quot;&gt;Add or Remove Availability Zones&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param availabilityZones The Availability Zones. These must be in the same region as the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETEnableAvailabilityZonesForLoadBalancerAsync(String loadBalancerName, List<String> availabilityZones, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AddAvailabilityZonesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETEnableAvailabilityZonesForLoadBalancerValidateBeforeCall(loadBalancerName, availabilityZones, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AddAvailabilityZonesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyLoadBalancerAttributes
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerAttributes The attributes for the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyLoadBalancerAttributesCall(String loadBalancerName, GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter loadBalancerAttributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyLoadBalancerAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (loadBalancerAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerAttributes", loadBalancerAttributes));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyLoadBalancerAttributesValidateBeforeCall(String loadBalancerName, GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter loadBalancerAttributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETModifyLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'loadBalancerAttributes' is set
        if (loadBalancerAttributes == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerAttributes' when calling gETModifyLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyLoadBalancerAttributes(Async)");
        }

        return gETModifyLoadBalancerAttributesCall(loadBalancerName, loadBalancerAttributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the attributes of the specified load balancer.&lt;/p&gt; &lt;p&gt;You can modify the load balancer attributes, such as &lt;code&gt;AccessLogs&lt;/code&gt;, &lt;code&gt;ConnectionDraining&lt;/code&gt;, and &lt;code&gt;CrossZoneLoadBalancing&lt;/code&gt; by either enabling or disabling them. Or, you can modify the load balancer attribute &lt;code&gt;ConnectionSettings&lt;/code&gt; by specifying an idle connection timeout value for your load balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html\&quot;&gt;Cross-Zone Load Balancing&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html\&quot;&gt;Connection Draining&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html\&quot;&gt;Access Logs&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html\&quot;&gt;Idle Connection Timeout&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerAttributes The attributes for the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ModifyLoadBalancerAttributesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyLoadBalancerAttributesOutput gETModifyLoadBalancerAttributes(String loadBalancerName, GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter loadBalancerAttributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ModifyLoadBalancerAttributesOutput> localVarResp = gETModifyLoadBalancerAttributesWithHttpInfo(loadBalancerName, loadBalancerAttributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the attributes of the specified load balancer.&lt;/p&gt; &lt;p&gt;You can modify the load balancer attributes, such as &lt;code&gt;AccessLogs&lt;/code&gt;, &lt;code&gt;ConnectionDraining&lt;/code&gt;, and &lt;code&gt;CrossZoneLoadBalancing&lt;/code&gt; by either enabling or disabling them. Or, you can modify the load balancer attribute &lt;code&gt;ConnectionSettings&lt;/code&gt; by specifying an idle connection timeout value for your load balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html\&quot;&gt;Cross-Zone Load Balancing&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html\&quot;&gt;Connection Draining&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html\&quot;&gt;Access Logs&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html\&quot;&gt;Idle Connection Timeout&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerAttributes The attributes for the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ModifyLoadBalancerAttributesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyLoadBalancerAttributesOutput> gETModifyLoadBalancerAttributesWithHttpInfo(String loadBalancerName, GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter loadBalancerAttributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETModifyLoadBalancerAttributesValidateBeforeCall(loadBalancerName, loadBalancerAttributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ModifyLoadBalancerAttributesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the attributes of the specified load balancer.&lt;/p&gt; &lt;p&gt;You can modify the load balancer attributes, such as &lt;code&gt;AccessLogs&lt;/code&gt;, &lt;code&gt;ConnectionDraining&lt;/code&gt;, and &lt;code&gt;CrossZoneLoadBalancing&lt;/code&gt; by either enabling or disabling them. Or, you can modify the load balancer attribute &lt;code&gt;ConnectionSettings&lt;/code&gt; by specifying an idle connection timeout value for your load balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html\&quot;&gt;Cross-Zone Load Balancing&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html\&quot;&gt;Connection Draining&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html\&quot;&gt;Access Logs&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html\&quot;&gt;Idle Connection Timeout&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerAttributes The attributes for the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyLoadBalancerAttributesAsync(String loadBalancerName, GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter loadBalancerAttributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ModifyLoadBalancerAttributesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyLoadBalancerAttributesValidateBeforeCall(loadBalancerName, loadBalancerAttributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ModifyLoadBalancerAttributesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRegisterInstancesWithLoadBalancer
     * @param loadBalancerName The name of the load balancer. (required)
     * @param instances The IDs of the instances. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRegisterInstancesWithLoadBalancerCall(String loadBalancerName, List<Instance> instances, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RegisterInstancesWithLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (instances != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Instances", instances));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRegisterInstancesWithLoadBalancerValidateBeforeCall(String loadBalancerName, List<Instance> instances, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETRegisterInstancesWithLoadBalancer(Async)");
        }

        // verify the required parameter 'instances' is set
        if (instances == null) {
            throw new ApiException("Missing the required parameter 'instances' when calling gETRegisterInstancesWithLoadBalancer(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRegisterInstancesWithLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRegisterInstancesWithLoadBalancer(Async)");
        }

        return gETRegisterInstancesWithLoadBalancerCall(loadBalancerName, instances, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds the specified instances to the specified load balancer.&lt;/p&gt; &lt;p&gt;The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.&lt;/p&gt; &lt;p&gt;Note that &lt;code&gt;RegisterInstanceWithLoadBalancer&lt;/code&gt; completes when the request has been registered. Instance registration takes a little time to complete. To check the state of the registered instances, use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeInstanceHealth&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After the instance is registered, it starts receiving traffic and requests from the load balancer. Any instance that is not in one of the Availability Zones registered for the load balancer is moved to the &lt;code&gt;OutOfService&lt;/code&gt; state. If an Availability Zone is added to the load balancer later, any instances registered with the load balancer move to the &lt;code&gt;InService&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To deregister instances from a load balancer, use &lt;a&gt;DeregisterInstancesFromLoadBalancer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\&quot;&gt;Register or De-Register EC2 Instances&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param instances The IDs of the instances. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RegisterEndPointsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public RegisterEndPointsOutput gETRegisterInstancesWithLoadBalancer(String loadBalancerName, List<Instance> instances, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RegisterEndPointsOutput> localVarResp = gETRegisterInstancesWithLoadBalancerWithHttpInfo(loadBalancerName, instances, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds the specified instances to the specified load balancer.&lt;/p&gt; &lt;p&gt;The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.&lt;/p&gt; &lt;p&gt;Note that &lt;code&gt;RegisterInstanceWithLoadBalancer&lt;/code&gt; completes when the request has been registered. Instance registration takes a little time to complete. To check the state of the registered instances, use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeInstanceHealth&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After the instance is registered, it starts receiving traffic and requests from the load balancer. Any instance that is not in one of the Availability Zones registered for the load balancer is moved to the &lt;code&gt;OutOfService&lt;/code&gt; state. If an Availability Zone is added to the load balancer later, any instances registered with the load balancer move to the &lt;code&gt;InService&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To deregister instances from a load balancer, use &lt;a&gt;DeregisterInstancesFromLoadBalancer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\&quot;&gt;Register or De-Register EC2 Instances&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param instances The IDs of the instances. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RegisterEndPointsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterEndPointsOutput> gETRegisterInstancesWithLoadBalancerWithHttpInfo(String loadBalancerName, List<Instance> instances, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRegisterInstancesWithLoadBalancerValidateBeforeCall(loadBalancerName, instances, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RegisterEndPointsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds the specified instances to the specified load balancer.&lt;/p&gt; &lt;p&gt;The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.&lt;/p&gt; &lt;p&gt;Note that &lt;code&gt;RegisterInstanceWithLoadBalancer&lt;/code&gt; completes when the request has been registered. Instance registration takes a little time to complete. To check the state of the registered instances, use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeInstanceHealth&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After the instance is registered, it starts receiving traffic and requests from the load balancer. Any instance that is not in one of the Availability Zones registered for the load balancer is moved to the &lt;code&gt;OutOfService&lt;/code&gt; state. If an Availability Zone is added to the load balancer later, any instances registered with the load balancer move to the &lt;code&gt;InService&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To deregister instances from a load balancer, use &lt;a&gt;DeregisterInstancesFromLoadBalancer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\&quot;&gt;Register or De-Register EC2 Instances&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param instances The IDs of the instances. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRegisterInstancesWithLoadBalancerAsync(String loadBalancerName, List<Instance> instances, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RegisterEndPointsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRegisterInstancesWithLoadBalancerValidateBeforeCall(loadBalancerName, instances, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RegisterEndPointsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRemoveTags
     * @param loadBalancerNames The name of the load balancer. You can specify a maximum of one load balancer name. (required)
     * @param tags The list of tag keys to remove. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveTagsCall(List<String> loadBalancerNames, List<TagKeyOnly> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RemoveTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LoadBalancerNames", loadBalancerNames));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRemoveTagsValidateBeforeCall(List<String> loadBalancerNames, List<TagKeyOnly> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerNames' is set
        if (loadBalancerNames == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerNames' when calling gETRemoveTags(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling gETRemoveTags(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRemoveTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRemoveTags(Async)");
        }

        return gETRemoveTagsCall(loadBalancerNames, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes one or more tags from the specified load balancer.
     * @param loadBalancerNames The name of the load balancer. You can specify a maximum of one load balancer name. (required)
     * @param tags The list of tag keys to remove. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETRemoveTags(List<String> loadBalancerNames, List<TagKeyOnly> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETRemoveTagsWithHttpInfo(loadBalancerNames, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes one or more tags from the specified load balancer.
     * @param loadBalancerNames The name of the load balancer. You can specify a maximum of one load balancer name. (required)
     * @param tags The list of tag keys to remove. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETRemoveTagsWithHttpInfo(List<String> loadBalancerNames, List<TagKeyOnly> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRemoveTagsValidateBeforeCall(loadBalancerNames, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes one or more tags from the specified load balancer.
     * @param loadBalancerNames The name of the load balancer. You can specify a maximum of one load balancer name. (required)
     * @param tags The list of tag keys to remove. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveTagsAsync(List<String> loadBalancerNames, List<TagKeyOnly> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRemoveTagsValidateBeforeCall(loadBalancerNames, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetLoadBalancerListenerSSLCertificate
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerPort The port that uses the specified SSL certificate. (required)
     * @param ssLCertificateId The Amazon Resource Name (ARN) of the SSL certificate. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetLoadBalancerListenerSSLCertificateCall(String loadBalancerName, Integer loadBalancerPort, String ssLCertificateId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetLoadBalancerListenerSSLCertificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (loadBalancerPort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerPort", loadBalancerPort));
        }

        if (ssLCertificateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SSLCertificateId", ssLCertificateId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetLoadBalancerListenerSSLCertificateValidateBeforeCall(String loadBalancerName, Integer loadBalancerPort, String ssLCertificateId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETSetLoadBalancerListenerSSLCertificate(Async)");
        }

        // verify the required parameter 'loadBalancerPort' is set
        if (loadBalancerPort == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerPort' when calling gETSetLoadBalancerListenerSSLCertificate(Async)");
        }

        // verify the required parameter 'ssLCertificateId' is set
        if (ssLCertificateId == null) {
            throw new ApiException("Missing the required parameter 'ssLCertificateId' when calling gETSetLoadBalancerListenerSSLCertificate(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetLoadBalancerListenerSSLCertificate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetLoadBalancerListenerSSLCertificate(Async)");
        }

        return gETSetLoadBalancerListenerSSLCertificateCall(loadBalancerName, loadBalancerPort, ssLCertificateId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the certificate that terminates the specified listener&#39;s SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.&lt;/p&gt; &lt;p&gt;For more information about updating your SSL certificate, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-update-ssl-cert.html\&quot;&gt;Replace the SSL Certificate for Your Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerPort The port that uses the specified SSL certificate. (required)
     * @param ssLCertificateId The Amazon Resource Name (ARN) of the SSL certificate. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETSetLoadBalancerListenerSSLCertificate(String loadBalancerName, Integer loadBalancerPort, String ssLCertificateId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETSetLoadBalancerListenerSSLCertificateWithHttpInfo(loadBalancerName, loadBalancerPort, ssLCertificateId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sets the certificate that terminates the specified listener&#39;s SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.&lt;/p&gt; &lt;p&gt;For more information about updating your SSL certificate, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-update-ssl-cert.html\&quot;&gt;Replace the SSL Certificate for Your Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerPort The port that uses the specified SSL certificate. (required)
     * @param ssLCertificateId The Amazon Resource Name (ARN) of the SSL certificate. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETSetLoadBalancerListenerSSLCertificateWithHttpInfo(String loadBalancerName, Integer loadBalancerPort, String ssLCertificateId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETSetLoadBalancerListenerSSLCertificateValidateBeforeCall(loadBalancerName, loadBalancerPort, ssLCertificateId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the certificate that terminates the specified listener&#39;s SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.&lt;/p&gt; &lt;p&gt;For more information about updating your SSL certificate, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-update-ssl-cert.html\&quot;&gt;Replace the SSL Certificate for Your Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerPort The port that uses the specified SSL certificate. (required)
     * @param ssLCertificateId The Amazon Resource Name (ARN) of the SSL certificate. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetLoadBalancerListenerSSLCertificateAsync(String loadBalancerName, Integer loadBalancerPort, String ssLCertificateId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetLoadBalancerListenerSSLCertificateValidateBeforeCall(loadBalancerName, loadBalancerPort, ssLCertificateId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetLoadBalancerPoliciesForBackendServer
     * @param loadBalancerName The name of the load balancer. (required)
     * @param instancePort The port number associated with the EC2 instance. (required)
     * @param policyNames The names of the policies. If the list is empty, then all current polices are removed from the EC2 instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetLoadBalancerPoliciesForBackendServerCall(String loadBalancerName, Integer instancePort, List<String> policyNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetLoadBalancerPoliciesForBackendServer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (instancePort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstancePort", instancePort));
        }

        if (policyNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "PolicyNames", policyNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetLoadBalancerPoliciesForBackendServerValidateBeforeCall(String loadBalancerName, Integer instancePort, List<String> policyNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETSetLoadBalancerPoliciesForBackendServer(Async)");
        }

        // verify the required parameter 'instancePort' is set
        if (instancePort == null) {
            throw new ApiException("Missing the required parameter 'instancePort' when calling gETSetLoadBalancerPoliciesForBackendServer(Async)");
        }

        // verify the required parameter 'policyNames' is set
        if (policyNames == null) {
            throw new ApiException("Missing the required parameter 'policyNames' when calling gETSetLoadBalancerPoliciesForBackendServer(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetLoadBalancerPoliciesForBackendServer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetLoadBalancerPoliciesForBackendServer(Async)");
        }

        return gETSetLoadBalancerPoliciesForBackendServerCall(loadBalancerName, instancePort, policyNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies. At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.&lt;/p&gt; &lt;p&gt;Each time you use &lt;code&gt;SetLoadBalancerPoliciesForBackendServer&lt;/code&gt; to enable the policies, use the &lt;code&gt;PolicyNames&lt;/code&gt; parameter to list the policies that you want to enable.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeLoadBalancerPolicies&lt;/a&gt; to verify that the policy is associated with the EC2 instance.&lt;/p&gt; &lt;p&gt;For more information about enabling back-end instance authentication, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html#configure_backendauth_clt\&quot;&gt;Configure Back-end Instance Authentication&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;. For more information about Proxy Protocol, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html\&quot;&gt;Configure Proxy Protocol Support&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param instancePort The port number associated with the EC2 instance. (required)
     * @param policyNames The names of the policies. If the list is empty, then all current polices are removed from the EC2 instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETSetLoadBalancerPoliciesForBackendServer(String loadBalancerName, Integer instancePort, List<String> policyNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETSetLoadBalancerPoliciesForBackendServerWithHttpInfo(loadBalancerName, instancePort, policyNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies. At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.&lt;/p&gt; &lt;p&gt;Each time you use &lt;code&gt;SetLoadBalancerPoliciesForBackendServer&lt;/code&gt; to enable the policies, use the &lt;code&gt;PolicyNames&lt;/code&gt; parameter to list the policies that you want to enable.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeLoadBalancerPolicies&lt;/a&gt; to verify that the policy is associated with the EC2 instance.&lt;/p&gt; &lt;p&gt;For more information about enabling back-end instance authentication, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html#configure_backendauth_clt\&quot;&gt;Configure Back-end Instance Authentication&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;. For more information about Proxy Protocol, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html\&quot;&gt;Configure Proxy Protocol Support&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param instancePort The port number associated with the EC2 instance. (required)
     * @param policyNames The names of the policies. If the list is empty, then all current polices are removed from the EC2 instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETSetLoadBalancerPoliciesForBackendServerWithHttpInfo(String loadBalancerName, Integer instancePort, List<String> policyNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETSetLoadBalancerPoliciesForBackendServerValidateBeforeCall(loadBalancerName, instancePort, policyNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies. At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.&lt;/p&gt; &lt;p&gt;Each time you use &lt;code&gt;SetLoadBalancerPoliciesForBackendServer&lt;/code&gt; to enable the policies, use the &lt;code&gt;PolicyNames&lt;/code&gt; parameter to list the policies that you want to enable.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeLoadBalancerPolicies&lt;/a&gt; to verify that the policy is associated with the EC2 instance.&lt;/p&gt; &lt;p&gt;For more information about enabling back-end instance authentication, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html#configure_backendauth_clt\&quot;&gt;Configure Back-end Instance Authentication&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;. For more information about Proxy Protocol, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html\&quot;&gt;Configure Proxy Protocol Support&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param instancePort The port number associated with the EC2 instance. (required)
     * @param policyNames The names of the policies. If the list is empty, then all current polices are removed from the EC2 instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetLoadBalancerPoliciesForBackendServerAsync(String loadBalancerName, Integer instancePort, List<String> policyNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetLoadBalancerPoliciesForBackendServerValidateBeforeCall(loadBalancerName, instancePort, policyNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetLoadBalancerPoliciesOfListener
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerPort The external port of the load balancer. (required)
     * @param policyNames The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetLoadBalancerPoliciesOfListenerCall(String loadBalancerName, Integer loadBalancerPort, List<String> policyNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetLoadBalancerPoliciesOfListener";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerName", loadBalancerName));
        }

        if (loadBalancerPort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerPort", loadBalancerPort));
        }

        if (policyNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "PolicyNames", policyNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetLoadBalancerPoliciesOfListenerValidateBeforeCall(String loadBalancerName, Integer loadBalancerPort, List<String> policyNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerName' is set
        if (loadBalancerName == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerName' when calling gETSetLoadBalancerPoliciesOfListener(Async)");
        }

        // verify the required parameter 'loadBalancerPort' is set
        if (loadBalancerPort == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerPort' when calling gETSetLoadBalancerPoliciesOfListener(Async)");
        }

        // verify the required parameter 'policyNames' is set
        if (policyNames == null) {
            throw new ApiException("Missing the required parameter 'policyNames' when calling gETSetLoadBalancerPoliciesOfListener(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetLoadBalancerPoliciesOfListener(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetLoadBalancerPoliciesOfListener(Async)");
        }

        return gETSetLoadBalancerPoliciesOfListenerCall(loadBalancerName, loadBalancerPort, policyNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Replaces the current set of policies for the specified load balancer port with the specified set of policies.&lt;/p&gt; &lt;p&gt;To enable back-end server authentication, use &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about setting policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-config-update.html\&quot;&gt;Update the SSL Negotiation Configuration&lt;/a&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\&quot;&gt;Duration-Based Session Stickiness&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\&quot;&gt;Application-Controlled Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerPort The external port of the load balancer. (required)
     * @param policyNames The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETSetLoadBalancerPoliciesOfListener(String loadBalancerName, Integer loadBalancerPort, List<String> policyNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETSetLoadBalancerPoliciesOfListenerWithHttpInfo(loadBalancerName, loadBalancerPort, policyNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Replaces the current set of policies for the specified load balancer port with the specified set of policies.&lt;/p&gt; &lt;p&gt;To enable back-end server authentication, use &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about setting policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-config-update.html\&quot;&gt;Update the SSL Negotiation Configuration&lt;/a&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\&quot;&gt;Duration-Based Session Stickiness&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\&quot;&gt;Application-Controlled Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerPort The external port of the load balancer. (required)
     * @param policyNames The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETSetLoadBalancerPoliciesOfListenerWithHttpInfo(String loadBalancerName, Integer loadBalancerPort, List<String> policyNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETSetLoadBalancerPoliciesOfListenerValidateBeforeCall(loadBalancerName, loadBalancerPort, policyNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Replaces the current set of policies for the specified load balancer port with the specified set of policies.&lt;/p&gt; &lt;p&gt;To enable back-end server authentication, use &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about setting policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-config-update.html\&quot;&gt;Update the SSL Negotiation Configuration&lt;/a&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\&quot;&gt;Duration-Based Session Stickiness&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\&quot;&gt;Application-Controlled Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param loadBalancerName The name of the load balancer. (required)
     * @param loadBalancerPort The external port of the load balancer. (required)
     * @param policyNames The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetLoadBalancerPoliciesOfListenerAsync(String loadBalancerName, Integer loadBalancerPort, List<String> policyNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetLoadBalancerPoliciesOfListenerValidateBeforeCall(loadBalancerName, loadBalancerPort, policyNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAddTags
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddTagsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsInput addTagsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTagsInput;

        // create path and map variables
        String localVarPath = "/#Action=AddTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAddTagsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsInput addTagsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAddTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAddTags(Async)");
        }

        return pOSTAddTagsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a tag with the same key is already associated with the load balancer, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html\&quot;&gt;Tag Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTAddTags(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsInput addTagsInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTAddTagsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a tag with the same key is already associated with the load balancer, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html\&quot;&gt;Tag Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTAddTagsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsInput addTagsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTAddTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a tag with the same key is already associated with the load balancer, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html\&quot;&gt;Tag Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddTagsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsInput addTagsInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAddTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTApplySecurityGroupsToLoadBalancer
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applySecurityGroupsToLoadBalancerInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTApplySecurityGroupsToLoadBalancerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplySecurityGroupsToLoadBalancerInput applySecurityGroupsToLoadBalancerInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applySecurityGroupsToLoadBalancerInput;

        // create path and map variables
        String localVarPath = "/#Action=ApplySecurityGroupsToLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTApplySecurityGroupsToLoadBalancerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplySecurityGroupsToLoadBalancerInput applySecurityGroupsToLoadBalancerInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTApplySecurityGroupsToLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTApplySecurityGroupsToLoadBalancer(Async)");
        }

        return pOSTApplySecurityGroupsToLoadBalancerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applySecurityGroupsToLoadBalancerInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-vpc-security-groups\&quot;&gt;Security Groups for Load Balancers in a VPC&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applySecurityGroupsToLoadBalancerInput  (optional)
     * @return ApplySecurityGroupsToLoadBalancerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public ApplySecurityGroupsToLoadBalancerOutput pOSTApplySecurityGroupsToLoadBalancer(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplySecurityGroupsToLoadBalancerInput applySecurityGroupsToLoadBalancerInput) throws ApiException {
        ApiResponse<ApplySecurityGroupsToLoadBalancerOutput> localVarResp = pOSTApplySecurityGroupsToLoadBalancerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applySecurityGroupsToLoadBalancerInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-vpc-security-groups\&quot;&gt;Security Groups for Load Balancers in a VPC&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applySecurityGroupsToLoadBalancerInput  (optional)
     * @return ApiResponse&lt;ApplySecurityGroupsToLoadBalancerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplySecurityGroupsToLoadBalancerOutput> pOSTApplySecurityGroupsToLoadBalancerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplySecurityGroupsToLoadBalancerInput applySecurityGroupsToLoadBalancerInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTApplySecurityGroupsToLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applySecurityGroupsToLoadBalancerInput, null);
        Type localVarReturnType = new TypeToken<ApplySecurityGroupsToLoadBalancerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-vpc-security-groups\&quot;&gt;Security Groups for Load Balancers in a VPC&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applySecurityGroupsToLoadBalancerInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTApplySecurityGroupsToLoadBalancerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplySecurityGroupsToLoadBalancerInput applySecurityGroupsToLoadBalancerInput, final ApiCallback<ApplySecurityGroupsToLoadBalancerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTApplySecurityGroupsToLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applySecurityGroupsToLoadBalancerInput, _callback);
        Type localVarReturnType = new TypeToken<ApplySecurityGroupsToLoadBalancerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAttachLoadBalancerToSubnets
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachLoadBalancerToSubnetsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAttachLoadBalancerToSubnetsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancerToSubnetsInput attachLoadBalancerToSubnetsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachLoadBalancerToSubnetsInput;

        // create path and map variables
        String localVarPath = "/#Action=AttachLoadBalancerToSubnets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAttachLoadBalancerToSubnetsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancerToSubnetsInput attachLoadBalancerToSubnetsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAttachLoadBalancerToSubnets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAttachLoadBalancerToSubnets(Async)");
        }

        return pOSTAttachLoadBalancerToSubnetsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancerToSubnetsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds one or more subnets to the set of configured subnets for the specified load balancer.&lt;/p&gt; &lt;p&gt;The load balancer evenly distributes requests across all registered subnets. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-manage-subnets.html\&quot;&gt;Add or Remove Subnets for Your Load Balancer in a VPC&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachLoadBalancerToSubnetsInput  (optional)
     * @return AttachLoadBalancerToSubnetsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public AttachLoadBalancerToSubnetsOutput pOSTAttachLoadBalancerToSubnets(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancerToSubnetsInput attachLoadBalancerToSubnetsInput) throws ApiException {
        ApiResponse<AttachLoadBalancerToSubnetsOutput> localVarResp = pOSTAttachLoadBalancerToSubnetsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancerToSubnetsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds one or more subnets to the set of configured subnets for the specified load balancer.&lt;/p&gt; &lt;p&gt;The load balancer evenly distributes requests across all registered subnets. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-manage-subnets.html\&quot;&gt;Add or Remove Subnets for Your Load Balancer in a VPC&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachLoadBalancerToSubnetsInput  (optional)
     * @return ApiResponse&lt;AttachLoadBalancerToSubnetsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachLoadBalancerToSubnetsOutput> pOSTAttachLoadBalancerToSubnetsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancerToSubnetsInput attachLoadBalancerToSubnetsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTAttachLoadBalancerToSubnetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancerToSubnetsInput, null);
        Type localVarReturnType = new TypeToken<AttachLoadBalancerToSubnetsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds one or more subnets to the set of configured subnets for the specified load balancer.&lt;/p&gt; &lt;p&gt;The load balancer evenly distributes requests across all registered subnets. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-manage-subnets.html\&quot;&gt;Add or Remove Subnets for Your Load Balancer in a VPC&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachLoadBalancerToSubnetsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAttachLoadBalancerToSubnetsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancerToSubnetsInput attachLoadBalancerToSubnetsInput, final ApiCallback<AttachLoadBalancerToSubnetsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAttachLoadBalancerToSubnetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancerToSubnetsInput, _callback);
        Type localVarReturnType = new TypeToken<AttachLoadBalancerToSubnetsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTConfigureHealthCheck
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param configureHealthCheckInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTConfigureHealthCheckCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ConfigureHealthCheckInput configureHealthCheckInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = configureHealthCheckInput;

        // create path and map variables
        String localVarPath = "/#Action=ConfigureHealthCheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTConfigureHealthCheckValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ConfigureHealthCheckInput configureHealthCheckInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTConfigureHealthCheck(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTConfigureHealthCheck(Async)");
        }

        return pOSTConfigureHealthCheckCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, configureHealthCheckInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Specifies the health check settings to use when evaluating the health state of your EC2 instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html\&quot;&gt;Configure Health Checks for Your Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param configureHealthCheckInput  (optional)
     * @return ConfigureHealthCheckOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ConfigureHealthCheckOutput pOSTConfigureHealthCheck(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ConfigureHealthCheckInput configureHealthCheckInput) throws ApiException {
        ApiResponse<ConfigureHealthCheckOutput> localVarResp = pOSTConfigureHealthCheckWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, configureHealthCheckInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Specifies the health check settings to use when evaluating the health state of your EC2 instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html\&quot;&gt;Configure Health Checks for Your Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param configureHealthCheckInput  (optional)
     * @return ApiResponse&lt;ConfigureHealthCheckOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigureHealthCheckOutput> pOSTConfigureHealthCheckWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ConfigureHealthCheckInput configureHealthCheckInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTConfigureHealthCheckValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, configureHealthCheckInput, null);
        Type localVarReturnType = new TypeToken<ConfigureHealthCheckOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Specifies the health check settings to use when evaluating the health state of your EC2 instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html\&quot;&gt;Configure Health Checks for Your Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param configureHealthCheckInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTConfigureHealthCheckAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ConfigureHealthCheckInput configureHealthCheckInput, final ApiCallback<ConfigureHealthCheckOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTConfigureHealthCheckValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, configureHealthCheckInput, _callback);
        Type localVarReturnType = new TypeToken<ConfigureHealthCheckOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateAppCookieStickinessPolicy
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createAppCookieStickinessPolicyInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateAppCookieStickinessPolicyCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAppCookieStickinessPolicyInput createAppCookieStickinessPolicyInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAppCookieStickinessPolicyInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateAppCookieStickinessPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateAppCookieStickinessPolicyValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAppCookieStickinessPolicyInput createAppCookieStickinessPolicyInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateAppCookieStickinessPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateAppCookieStickinessPolicy(Async)");
        }

        return pOSTCreateAppCookieStickinessPolicyCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAppCookieStickinessPolicyInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt; &lt;p&gt;This policy is similar to the policy created by &lt;a&gt;CreateLBCookieStickinessPolicy&lt;/a&gt;, except that the lifetime of the special Elastic Load Balancing cookie, &lt;code&gt;AWSELB&lt;/code&gt;, follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer only inserts a new stickiness cookie when the application response includes a new application cookie.&lt;/p&gt; &lt;p&gt;If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\&quot;&gt;Application-Controlled Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createAppCookieStickinessPolicyInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTCreateAppCookieStickinessPolicy(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAppCookieStickinessPolicyInput createAppCookieStickinessPolicyInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTCreateAppCookieStickinessPolicyWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAppCookieStickinessPolicyInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt; &lt;p&gt;This policy is similar to the policy created by &lt;a&gt;CreateLBCookieStickinessPolicy&lt;/a&gt;, except that the lifetime of the special Elastic Load Balancing cookie, &lt;code&gt;AWSELB&lt;/code&gt;, follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer only inserts a new stickiness cookie when the application response includes a new application cookie.&lt;/p&gt; &lt;p&gt;If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\&quot;&gt;Application-Controlled Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createAppCookieStickinessPolicyInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTCreateAppCookieStickinessPolicyWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAppCookieStickinessPolicyInput createAppCookieStickinessPolicyInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateAppCookieStickinessPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAppCookieStickinessPolicyInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt; &lt;p&gt;This policy is similar to the policy created by &lt;a&gt;CreateLBCookieStickinessPolicy&lt;/a&gt;, except that the lifetime of the special Elastic Load Balancing cookie, &lt;code&gt;AWSELB&lt;/code&gt;, follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer only inserts a new stickiness cookie when the application response includes a new application cookie.&lt;/p&gt; &lt;p&gt;If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\&quot;&gt;Application-Controlled Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createAppCookieStickinessPolicyInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateAppCookieStickinessPolicyAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAppCookieStickinessPolicyInput createAppCookieStickinessPolicyInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateAppCookieStickinessPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAppCookieStickinessPolicyInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateLBCookieStickinessPolicy
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLBCookieStickinessPolicyInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateLBCookieStickinessPolicyCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLBCookieStickinessPolicyInput createLBCookieStickinessPolicyInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLBCookieStickinessPolicyInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateLBCookieStickinessPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateLBCookieStickinessPolicyValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLBCookieStickinessPolicyInput createLBCookieStickinessPolicyInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateLBCookieStickinessPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateLBCookieStickinessPolicy(Async)");
        }

        return pOSTCreateLBCookieStickinessPolicyCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLBCookieStickinessPolicyInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt; &lt;p&gt;When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request. If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.&lt;/p&gt; &lt;p&gt;A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\&quot;&gt;Duration-Based Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLBCookieStickinessPolicyInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTCreateLBCookieStickinessPolicy(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLBCookieStickinessPolicyInput createLBCookieStickinessPolicyInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTCreateLBCookieStickinessPolicyWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLBCookieStickinessPolicyInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt; &lt;p&gt;When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request. If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.&lt;/p&gt; &lt;p&gt;A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\&quot;&gt;Duration-Based Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLBCookieStickinessPolicyInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTCreateLBCookieStickinessPolicyWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLBCookieStickinessPolicyInput createLBCookieStickinessPolicyInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateLBCookieStickinessPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLBCookieStickinessPolicyInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt; &lt;p&gt;When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request. If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.&lt;/p&gt; &lt;p&gt;A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\&quot;&gt;Duration-Based Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLBCookieStickinessPolicyInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateLBCookieStickinessPolicyAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLBCookieStickinessPolicyInput createLBCookieStickinessPolicyInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateLBCookieStickinessPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLBCookieStickinessPolicyInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateLoadBalancer
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createAccessPointInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateAccessPointNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyAccessPointsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateLoadBalancerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAccessPointInput createAccessPointInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAccessPointInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateLoadBalancerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAccessPointInput createAccessPointInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateLoadBalancer(Async)");
        }

        return pOSTCreateLoadBalancerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAccessPointInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a Classic Load Balancer.&lt;/p&gt; &lt;p&gt;You can add listeners, security groups, subnets, and tags when you create your load balancer, or you can add them later using &lt;a&gt;CreateLoadBalancerListeners&lt;/a&gt;, &lt;a&gt;ApplySecurityGroupsToLoadBalancer&lt;/a&gt;, &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;, and &lt;a&gt;AddTags&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To describe your current load balancers, see &lt;a&gt;DescribeLoadBalancers&lt;/a&gt;. When you are finished with a load balancer, you can delete it using &lt;a&gt;DeleteLoadBalancer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\&quot;&gt;Limits for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createAccessPointInput  (optional)
     * @return CreateAccessPointOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateAccessPointNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyAccessPointsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccessPointOutput pOSTCreateLoadBalancer(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAccessPointInput createAccessPointInput) throws ApiException {
        ApiResponse<CreateAccessPointOutput> localVarResp = pOSTCreateLoadBalancerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAccessPointInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a Classic Load Balancer.&lt;/p&gt; &lt;p&gt;You can add listeners, security groups, subnets, and tags when you create your load balancer, or you can add them later using &lt;a&gt;CreateLoadBalancerListeners&lt;/a&gt;, &lt;a&gt;ApplySecurityGroupsToLoadBalancer&lt;/a&gt;, &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;, and &lt;a&gt;AddTags&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To describe your current load balancers, see &lt;a&gt;DescribeLoadBalancers&lt;/a&gt;. When you are finished with a load balancer, you can delete it using &lt;a&gt;DeleteLoadBalancer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\&quot;&gt;Limits for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createAccessPointInput  (optional)
     * @return ApiResponse&lt;CreateAccessPointOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateAccessPointNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyAccessPointsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccessPointOutput> pOSTCreateLoadBalancerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAccessPointInput createAccessPointInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAccessPointInput, null);
        Type localVarReturnType = new TypeToken<CreateAccessPointOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a Classic Load Balancer.&lt;/p&gt; &lt;p&gt;You can add listeners, security groups, subnets, and tags when you create your load balancer, or you can add them later using &lt;a&gt;CreateLoadBalancerListeners&lt;/a&gt;, &lt;a&gt;ApplySecurityGroupsToLoadBalancer&lt;/a&gt;, &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;, and &lt;a&gt;AddTags&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To describe your current load balancers, see &lt;a&gt;DescribeLoadBalancers&lt;/a&gt;. When you are finished with a load balancer, you can delete it using &lt;a&gt;DeleteLoadBalancer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\&quot;&gt;Limits for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createAccessPointInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateAccessPointNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyAccessPointsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateLoadBalancerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAccessPointInput createAccessPointInput, final ApiCallback<CreateAccessPointOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAccessPointInput, _callback);
        Type localVarReturnType = new TypeToken<CreateAccessPointOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateLoadBalancerListeners
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLoadBalancerListenerInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateLoadBalancerListenersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerListenerInput createLoadBalancerListenerInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLoadBalancerListenerInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateLoadBalancerListeners";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateLoadBalancerListenersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerListenerInput createLoadBalancerListenerInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateLoadBalancerListeners(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateLoadBalancerListeners(Async)");
        }

        return pOSTCreateLoadBalancerListenersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLoadBalancerListenerInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html\&quot;&gt;Listeners for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLoadBalancerListenerInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTCreateLoadBalancerListeners(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerListenerInput createLoadBalancerListenerInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTCreateLoadBalancerListenersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLoadBalancerListenerInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html\&quot;&gt;Listeners for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLoadBalancerListenerInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTCreateLoadBalancerListenersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerListenerInput createLoadBalancerListenerInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateLoadBalancerListenersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLoadBalancerListenerInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html\&quot;&gt;Listeners for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLoadBalancerListenerInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateLoadBalancerListenersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerListenerInput createLoadBalancerListenerInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateLoadBalancerListenersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLoadBalancerListenerInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateLoadBalancerPolicy
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLoadBalancerPolicyInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateLoadBalancerPolicyCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerPolicyInput createLoadBalancerPolicyInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLoadBalancerPolicyInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateLoadBalancerPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateLoadBalancerPolicyValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerPolicyInput createLoadBalancerPolicyInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateLoadBalancerPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateLoadBalancerPolicy(Async)");
        }

        return pOSTCreateLoadBalancerPolicyCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLoadBalancerPolicyInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a policy with the specified attributes for the specified load balancer.&lt;/p&gt; &lt;p&gt;Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLoadBalancerPolicyInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTCreateLoadBalancerPolicy(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerPolicyInput createLoadBalancerPolicyInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTCreateLoadBalancerPolicyWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLoadBalancerPolicyInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a policy with the specified attributes for the specified load balancer.&lt;/p&gt; &lt;p&gt;Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLoadBalancerPolicyInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTCreateLoadBalancerPolicyWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerPolicyInput createLoadBalancerPolicyInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateLoadBalancerPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLoadBalancerPolicyInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a policy with the specified attributes for the specified load balancer.&lt;/p&gt; &lt;p&gt;Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLoadBalancerPolicyInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicatePolicyNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyPoliciesException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateLoadBalancerPolicyAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerPolicyInput createLoadBalancerPolicyInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateLoadBalancerPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLoadBalancerPolicyInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteLoadBalancer
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAccessPointInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteLoadBalancerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAccessPointInput deleteAccessPointInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAccessPointInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteLoadBalancerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAccessPointInput deleteAccessPointInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteLoadBalancer(Async)");
        }

        return pOSTDeleteLoadBalancerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAccessPointInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified load balancer.&lt;/p&gt; &lt;p&gt;If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.&lt;/p&gt; &lt;p&gt;If the load balancer does not exist or has already been deleted, the call to &lt;code&gt;DeleteLoadBalancer&lt;/code&gt; still succeeds.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAccessPointInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteLoadBalancer(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAccessPointInput deleteAccessPointInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteLoadBalancerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAccessPointInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified load balancer.&lt;/p&gt; &lt;p&gt;If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.&lt;/p&gt; &lt;p&gt;If the load balancer does not exist or has already been deleted, the call to &lt;code&gt;DeleteLoadBalancer&lt;/code&gt; still succeeds.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAccessPointInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteLoadBalancerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAccessPointInput deleteAccessPointInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAccessPointInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified load balancer.&lt;/p&gt; &lt;p&gt;If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.&lt;/p&gt; &lt;p&gt;If the load balancer does not exist or has already been deleted, the call to &lt;code&gt;DeleteLoadBalancer&lt;/code&gt; still succeeds.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAccessPointInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteLoadBalancerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAccessPointInput deleteAccessPointInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAccessPointInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteLoadBalancerListeners
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLoadBalancerListenerInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteLoadBalancerListenersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerListenerInput deleteLoadBalancerListenerInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteLoadBalancerListenerInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteLoadBalancerListeners";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteLoadBalancerListenersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerListenerInput deleteLoadBalancerListenerInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteLoadBalancerListeners(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteLoadBalancerListeners(Async)");
        }

        return pOSTDeleteLoadBalancerListenersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLoadBalancerListenerInput, _callback);

    }

    /**
     * 
     * Deletes the specified listeners from the specified load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLoadBalancerListenerInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteLoadBalancerListeners(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerListenerInput deleteLoadBalancerListenerInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteLoadBalancerListenersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLoadBalancerListenerInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the specified listeners from the specified load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLoadBalancerListenerInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteLoadBalancerListenersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerListenerInput deleteLoadBalancerListenerInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteLoadBalancerListenersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLoadBalancerListenerInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the specified listeners from the specified load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLoadBalancerListenerInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteLoadBalancerListenersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerListenerInput deleteLoadBalancerListenerInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteLoadBalancerListenersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLoadBalancerListenerInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteLoadBalancerPolicy
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLoadBalancerPolicyInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteLoadBalancerPolicyCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerPolicyInput deleteLoadBalancerPolicyInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteLoadBalancerPolicyInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteLoadBalancerPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteLoadBalancerPolicyValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerPolicyInput deleteLoadBalancerPolicyInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteLoadBalancerPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteLoadBalancerPolicy(Async)");
        }

        return pOSTDeleteLoadBalancerPolicyCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLoadBalancerPolicyInput, _callback);

    }

    /**
     * 
     * Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLoadBalancerPolicyInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteLoadBalancerPolicy(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerPolicyInput deleteLoadBalancerPolicyInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteLoadBalancerPolicyWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLoadBalancerPolicyInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLoadBalancerPolicyInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteLoadBalancerPolicyWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerPolicyInput deleteLoadBalancerPolicyInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteLoadBalancerPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLoadBalancerPolicyInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLoadBalancerPolicyInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteLoadBalancerPolicyAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerPolicyInput deleteLoadBalancerPolicyInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteLoadBalancerPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLoadBalancerPolicyInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeregisterInstancesFromLoadBalancer
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deregisterEndPointsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeregisterInstancesFromLoadBalancerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterEndPointsInput deregisterEndPointsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deregisterEndPointsInput;

        // create path and map variables
        String localVarPath = "/#Action=DeregisterInstancesFromLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeregisterInstancesFromLoadBalancerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterEndPointsInput deregisterEndPointsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeregisterInstancesFromLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeregisterInstancesFromLoadBalancer(Async)");
        }

        return pOSTDeregisterInstancesFromLoadBalancerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deregisterEndPointsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; to verify that the instance is deregistered from the load balancer.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\&quot;&gt;Register or De-Register EC2 Instances&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deregisterEndPointsInput  (optional)
     * @return DeregisterEndPointsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public DeregisterEndPointsOutput pOSTDeregisterInstancesFromLoadBalancer(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterEndPointsInput deregisterEndPointsInput) throws ApiException {
        ApiResponse<DeregisterEndPointsOutput> localVarResp = pOSTDeregisterInstancesFromLoadBalancerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deregisterEndPointsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; to verify that the instance is deregistered from the load balancer.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\&quot;&gt;Register or De-Register EC2 Instances&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deregisterEndPointsInput  (optional)
     * @return ApiResponse&lt;DeregisterEndPointsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeregisterEndPointsOutput> pOSTDeregisterInstancesFromLoadBalancerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterEndPointsInput deregisterEndPointsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeregisterInstancesFromLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deregisterEndPointsInput, null);
        Type localVarReturnType = new TypeToken<DeregisterEndPointsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; to verify that the instance is deregistered from the load balancer.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\&quot;&gt;Register or De-Register EC2 Instances&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deregisterEndPointsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeregisterInstancesFromLoadBalancerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterEndPointsInput deregisterEndPointsInput, final ApiCallback<DeregisterEndPointsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeregisterInstancesFromLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deregisterEndPointsInput, _callback);
        Type localVarReturnType = new TypeToken<DeregisterEndPointsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeAccountLimits
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeAccountLimitsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAccountLimitsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAccountLimitsInput describeAccountLimitsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeAccountLimitsInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAccountLimits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeAccountLimitsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAccountLimitsInput describeAccountLimitsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeAccountLimits(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeAccountLimits(Async)");
        }

        return pOSTDescribeAccountLimitsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAccountLimitsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your AWS account.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\&quot;&gt;Limits for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeAccountLimitsInput  (optional)
     * @return DescribeAccountLimitsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccountLimitsOutput pOSTDescribeAccountLimits(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAccountLimitsInput describeAccountLimitsInput) throws ApiException {
        ApiResponse<DescribeAccountLimitsOutput> localVarResp = pOSTDescribeAccountLimitsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAccountLimitsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your AWS account.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\&quot;&gt;Limits for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeAccountLimitsInput  (optional)
     * @return ApiResponse&lt;DescribeAccountLimitsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccountLimitsOutput> pOSTDescribeAccountLimitsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAccountLimitsInput describeAccountLimitsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAccountLimitsInput, null);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your AWS account.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\&quot;&gt;Limits for Your Classic Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeAccountLimitsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAccountLimitsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAccountLimitsInput describeAccountLimitsInput, final ApiCallback<DescribeAccountLimitsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAccountLimitsInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeInstanceHealth
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEndPointStateInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeInstanceHealthCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEndPointStateInput describeEndPointStateInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEndPointStateInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeInstanceHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeInstanceHealthValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEndPointStateInput describeEndPointStateInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeInstanceHealth(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeInstanceHealth(Async)");
        }

        return pOSTDescribeInstanceHealthCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEndPointStateInput, _callback);

    }

    /**
     * 
     * Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEndPointStateInput  (optional)
     * @return DescribeEndPointStateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEndPointStateOutput pOSTDescribeInstanceHealth(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEndPointStateInput describeEndPointStateInput) throws ApiException {
        ApiResponse<DescribeEndPointStateOutput> localVarResp = pOSTDescribeInstanceHealthWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEndPointStateInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEndPointStateInput  (optional)
     * @return ApiResponse&lt;DescribeEndPointStateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEndPointStateOutput> pOSTDescribeInstanceHealthWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEndPointStateInput describeEndPointStateInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeInstanceHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEndPointStateInput, null);
        Type localVarReturnType = new TypeToken<DescribeEndPointStateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEndPointStateInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeInstanceHealthAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEndPointStateInput describeEndPointStateInput, final ApiCallback<DescribeEndPointStateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeInstanceHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEndPointStateInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeEndPointStateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeLoadBalancerAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancerAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerAttributesInput describeLoadBalancerAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeLoadBalancerAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancerAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeLoadBalancerAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerAttributesInput describeLoadBalancerAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeLoadBalancerAttributes(Async)");
        }

        return pOSTDescribeLoadBalancerAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerAttributesInput, _callback);

    }

    /**
     * 
     * Describes the attributes for the specified load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerAttributesInput  (optional)
     * @return DescribeLoadBalancerAttributesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancerAttributesOutput pOSTDescribeLoadBalancerAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerAttributesInput describeLoadBalancerAttributesInput) throws ApiException {
        ApiResponse<DescribeLoadBalancerAttributesOutput> localVarResp = pOSTDescribeLoadBalancerAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerAttributesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the attributes for the specified load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerAttributesInput  (optional)
     * @return ApiResponse&lt;DescribeLoadBalancerAttributesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancerAttributesOutput> pOSTDescribeLoadBalancerAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerAttributesInput describeLoadBalancerAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeLoadBalancerAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerAttributesInput, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerAttributesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the attributes for the specified load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancerAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerAttributesInput describeLoadBalancerAttributesInput, final ApiCallback<DescribeLoadBalancerAttributesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeLoadBalancerAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerAttributesInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerAttributesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeLoadBalancerPolicies
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerPoliciesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancerPoliciesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerPoliciesInput describeLoadBalancerPoliciesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeLoadBalancerPoliciesInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancerPolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeLoadBalancerPoliciesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerPoliciesInput describeLoadBalancerPoliciesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeLoadBalancerPolicies(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeLoadBalancerPolicies(Async)");
        }

        return pOSTDescribeLoadBalancerPoliciesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerPoliciesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the specified policies.&lt;/p&gt; &lt;p&gt;If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer. If you specify a policy name associated with your load balancer, the action returns the description of that policy. If you don&#39;t specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies. The names of the sample policies have the &lt;code&gt;ELBSample-&lt;/code&gt; prefix.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerPoliciesInput  (optional)
     * @return DescribeLoadBalancerPoliciesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancerPoliciesOutput pOSTDescribeLoadBalancerPolicies(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerPoliciesInput describeLoadBalancerPoliciesInput) throws ApiException {
        ApiResponse<DescribeLoadBalancerPoliciesOutput> localVarResp = pOSTDescribeLoadBalancerPoliciesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerPoliciesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the specified policies.&lt;/p&gt; &lt;p&gt;If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer. If you specify a policy name associated with your load balancer, the action returns the description of that policy. If you don&#39;t specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies. The names of the sample policies have the &lt;code&gt;ELBSample-&lt;/code&gt; prefix.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerPoliciesInput  (optional)
     * @return ApiResponse&lt;DescribeLoadBalancerPoliciesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancerPoliciesOutput> pOSTDescribeLoadBalancerPoliciesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerPoliciesInput describeLoadBalancerPoliciesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeLoadBalancerPoliciesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerPoliciesInput, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerPoliciesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the specified policies.&lt;/p&gt; &lt;p&gt;If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer. If you specify a policy name associated with your load balancer, the action returns the description of that policy. If you don&#39;t specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies. The names of the sample policies have the &lt;code&gt;ELBSample-&lt;/code&gt; prefix.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerPoliciesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancerPoliciesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerPoliciesInput describeLoadBalancerPoliciesInput, final ApiCallback<DescribeLoadBalancerPoliciesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeLoadBalancerPoliciesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerPoliciesInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerPoliciesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeLoadBalancerPolicyTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerPolicyTypesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancerPolicyTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerPolicyTypesInput describeLoadBalancerPolicyTypesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeLoadBalancerPolicyTypesInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancerPolicyTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeLoadBalancerPolicyTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerPolicyTypesInput describeLoadBalancerPolicyTypesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeLoadBalancerPolicyTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeLoadBalancerPolicyTypes(Async)");
        }

        return pOSTDescribeLoadBalancerPolicyTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerPolicyTypesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the specified load balancer policy types or all load balancer policy types.&lt;/p&gt; &lt;p&gt;The description of each type indicates how it can be used. For example, some policies can be used only with layer 7 listeners, some policies can be used only with layer 4 listeners, and some policies can be used only with your EC2 instances.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;CreateLoadBalancerPolicy&lt;/a&gt; to create a policy configuration for any of these policy types. Then, depending on the policy type, use either &lt;a&gt;SetLoadBalancerPoliciesOfListener&lt;/a&gt; or &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt; to set the policy.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerPolicyTypesInput  (optional)
     * @return DescribeLoadBalancerPolicyTypesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancerPolicyTypesOutput pOSTDescribeLoadBalancerPolicyTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerPolicyTypesInput describeLoadBalancerPolicyTypesInput) throws ApiException {
        ApiResponse<DescribeLoadBalancerPolicyTypesOutput> localVarResp = pOSTDescribeLoadBalancerPolicyTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerPolicyTypesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the specified load balancer policy types or all load balancer policy types.&lt;/p&gt; &lt;p&gt;The description of each type indicates how it can be used. For example, some policies can be used only with layer 7 listeners, some policies can be used only with layer 4 listeners, and some policies can be used only with your EC2 instances.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;CreateLoadBalancerPolicy&lt;/a&gt; to create a policy configuration for any of these policy types. Then, depending on the policy type, use either &lt;a&gt;SetLoadBalancerPoliciesOfListener&lt;/a&gt; or &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt; to set the policy.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerPolicyTypesInput  (optional)
     * @return ApiResponse&lt;DescribeLoadBalancerPolicyTypesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancerPolicyTypesOutput> pOSTDescribeLoadBalancerPolicyTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerPolicyTypesInput describeLoadBalancerPolicyTypesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeLoadBalancerPolicyTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerPolicyTypesInput, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerPolicyTypesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the specified load balancer policy types or all load balancer policy types.&lt;/p&gt; &lt;p&gt;The description of each type indicates how it can be used. For example, some policies can be used only with layer 7 listeners, some policies can be used only with layer 4 listeners, and some policies can be used only with your EC2 instances.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;CreateLoadBalancerPolicy&lt;/a&gt; to create a policy configuration for any of these policy types. Then, depending on the policy type, use either &lt;a&gt;SetLoadBalancerPoliciesOfListener&lt;/a&gt; or &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt; to set the policy.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerPolicyTypesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PolicyTypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancerPolicyTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerPolicyTypesInput describeLoadBalancerPolicyTypesInput, final ApiCallback<DescribeLoadBalancerPolicyTypesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeLoadBalancerPolicyTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerPolicyTypesInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerPolicyTypesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeLoadBalancers
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeAccessPointsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DependencyThrottleException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeAccessPointsInput describeAccessPointsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeAccessPointsInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeLoadBalancersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeAccessPointsInput describeAccessPointsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeLoadBalancers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeLoadBalancers(Async)");
        }

        return pOSTDescribeLoadBalancersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeAccessPointsInput, _callback);

    }

    /**
     * 
     * Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeAccessPointsInput  (optional)
     * @return DescribeAccessPointsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DependencyThrottleException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccessPointsOutput pOSTDescribeLoadBalancers(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeAccessPointsInput describeAccessPointsInput) throws ApiException {
        ApiResponse<DescribeAccessPointsOutput> localVarResp = pOSTDescribeLoadBalancersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeAccessPointsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeAccessPointsInput  (optional)
     * @return ApiResponse&lt;DescribeAccessPointsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DependencyThrottleException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccessPointsOutput> pOSTDescribeLoadBalancersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeAccessPointsInput describeAccessPointsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeAccessPointsInput, null);
        Type localVarReturnType = new TypeToken<DescribeAccessPointsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeAccessPointsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DependencyThrottleException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeAccessPointsInput describeAccessPointsInput, final ApiCallback<DescribeAccessPointsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeAccessPointsInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccessPointsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeTags
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTagsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTagsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTagsInput describeTagsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTagsInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeTagsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTagsInput describeTagsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeTags(Async)");
        }

        return pOSTDescribeTagsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTagsInput, _callback);

    }

    /**
     * 
     * Describes the tags associated with the specified load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTagsInput  (optional)
     * @return DescribeTagsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTagsOutput pOSTDescribeTags(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTagsInput describeTagsInput) throws ApiException {
        ApiResponse<DescribeTagsOutput> localVarResp = pOSTDescribeTagsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTagsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the tags associated with the specified load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTagsInput  (optional)
     * @return ApiResponse&lt;DescribeTagsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTagsOutput> pOSTDescribeTagsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTagsInput describeTagsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTagsInput, null);
        Type localVarReturnType = new TypeToken<DescribeTagsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the tags associated with the specified load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTagsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTagsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTagsInput describeTagsInput, final ApiCallback<DescribeTagsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTagsInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeTagsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDetachLoadBalancerFromSubnets
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachLoadBalancerFromSubnetsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetachLoadBalancerFromSubnetsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancerFromSubnetsInput detachLoadBalancerFromSubnetsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detachLoadBalancerFromSubnetsInput;

        // create path and map variables
        String localVarPath = "/#Action=DetachLoadBalancerFromSubnets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDetachLoadBalancerFromSubnetsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancerFromSubnetsInput detachLoadBalancerFromSubnetsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDetachLoadBalancerFromSubnets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDetachLoadBalancerFromSubnets(Async)");
        }

        return pOSTDetachLoadBalancerFromSubnetsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancerFromSubnetsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes the specified subnets from the set of configured subnets for the load balancer.&lt;/p&gt; &lt;p&gt;After a subnet is removed, all EC2 instances registered with the load balancer in the removed subnet go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer balances the traffic among the remaining routable subnets.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachLoadBalancerFromSubnetsInput  (optional)
     * @return DetachLoadBalancerFromSubnetsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public DetachLoadBalancerFromSubnetsOutput pOSTDetachLoadBalancerFromSubnets(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancerFromSubnetsInput detachLoadBalancerFromSubnetsInput) throws ApiException {
        ApiResponse<DetachLoadBalancerFromSubnetsOutput> localVarResp = pOSTDetachLoadBalancerFromSubnetsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancerFromSubnetsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Removes the specified subnets from the set of configured subnets for the load balancer.&lt;/p&gt; &lt;p&gt;After a subnet is removed, all EC2 instances registered with the load balancer in the removed subnet go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer balances the traffic among the remaining routable subnets.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachLoadBalancerFromSubnetsInput  (optional)
     * @return ApiResponse&lt;DetachLoadBalancerFromSubnetsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetachLoadBalancerFromSubnetsOutput> pOSTDetachLoadBalancerFromSubnetsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancerFromSubnetsInput detachLoadBalancerFromSubnetsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDetachLoadBalancerFromSubnetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancerFromSubnetsInput, null);
        Type localVarReturnType = new TypeToken<DetachLoadBalancerFromSubnetsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes the specified subnets from the set of configured subnets for the load balancer.&lt;/p&gt; &lt;p&gt;After a subnet is removed, all EC2 instances registered with the load balancer in the removed subnet go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer balances the traffic among the remaining routable subnets.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachLoadBalancerFromSubnetsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetachLoadBalancerFromSubnetsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancerFromSubnetsInput detachLoadBalancerFromSubnetsInput, final ApiCallback<DetachLoadBalancerFromSubnetsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDetachLoadBalancerFromSubnetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancerFromSubnetsInput, _callback);
        Type localVarReturnType = new TypeToken<DetachLoadBalancerFromSubnetsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDisableAvailabilityZonesForLoadBalancer
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeAvailabilityZonesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDisableAvailabilityZonesForLoadBalancerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveAvailabilityZonesInput removeAvailabilityZonesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeAvailabilityZonesInput;

        // create path and map variables
        String localVarPath = "/#Action=DisableAvailabilityZonesForLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDisableAvailabilityZonesForLoadBalancerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveAvailabilityZonesInput removeAvailabilityZonesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDisableAvailabilityZonesForLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDisableAvailabilityZonesForLoadBalancer(Async)");
        }

        return pOSTDisableAvailabilityZonesForLoadBalancerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeAvailabilityZonesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.&lt;/p&gt; &lt;p&gt;For load balancers in a non-default VPC, use &lt;a&gt;DetachLoadBalancerFromSubnets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There must be at least one Availability Zone registered with a load balancer at all times. After an Availability Zone is removed, all instances registered with the load balancer that are in the removed Availability Zone go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer attempts to equally balance the traffic among its remaining Availability Zones.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\&quot;&gt;Add or Remove Availability Zones&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeAvailabilityZonesInput  (optional)
     * @return RemoveAvailabilityZonesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAvailabilityZonesOutput pOSTDisableAvailabilityZonesForLoadBalancer(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveAvailabilityZonesInput removeAvailabilityZonesInput) throws ApiException {
        ApiResponse<RemoveAvailabilityZonesOutput> localVarResp = pOSTDisableAvailabilityZonesForLoadBalancerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeAvailabilityZonesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.&lt;/p&gt; &lt;p&gt;For load balancers in a non-default VPC, use &lt;a&gt;DetachLoadBalancerFromSubnets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There must be at least one Availability Zone registered with a load balancer at all times. After an Availability Zone is removed, all instances registered with the load balancer that are in the removed Availability Zone go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer attempts to equally balance the traffic among its remaining Availability Zones.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\&quot;&gt;Add or Remove Availability Zones&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeAvailabilityZonesInput  (optional)
     * @return ApiResponse&lt;RemoveAvailabilityZonesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoveAvailabilityZonesOutput> pOSTDisableAvailabilityZonesForLoadBalancerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveAvailabilityZonesInput removeAvailabilityZonesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDisableAvailabilityZonesForLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeAvailabilityZonesInput, null);
        Type localVarReturnType = new TypeToken<RemoveAvailabilityZonesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.&lt;/p&gt; &lt;p&gt;For load balancers in a non-default VPC, use &lt;a&gt;DetachLoadBalancerFromSubnets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There must be at least one Availability Zone registered with a load balancer at all times. After an Availability Zone is removed, all instances registered with the load balancer that are in the removed Availability Zone go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer attempts to equally balance the traffic among its remaining Availability Zones.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\&quot;&gt;Add or Remove Availability Zones&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeAvailabilityZonesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDisableAvailabilityZonesForLoadBalancerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveAvailabilityZonesInput removeAvailabilityZonesInput, final ApiCallback<RemoveAvailabilityZonesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDisableAvailabilityZonesForLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeAvailabilityZonesInput, _callback);
        Type localVarReturnType = new TypeToken<RemoveAvailabilityZonesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTEnableAvailabilityZonesForLoadBalancer
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addAvailabilityZonesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTEnableAvailabilityZonesForLoadBalancerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddAvailabilityZonesInput addAvailabilityZonesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addAvailabilityZonesInput;

        // create path and map variables
        String localVarPath = "/#Action=EnableAvailabilityZonesForLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTEnableAvailabilityZonesForLoadBalancerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddAvailabilityZonesInput addAvailabilityZonesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTEnableAvailabilityZonesForLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTEnableAvailabilityZonesForLoadBalancer(Async)");
        }

        return pOSTEnableAvailabilityZonesForLoadBalancerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addAvailabilityZonesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.&lt;/p&gt; &lt;p&gt;For load balancers in a non-default VPC, use &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The load balancer evenly distributes requests across all its registered Availability Zones that contain instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\&quot;&gt;Add or Remove Availability Zones&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addAvailabilityZonesInput  (optional)
     * @return AddAvailabilityZonesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public AddAvailabilityZonesOutput pOSTEnableAvailabilityZonesForLoadBalancer(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddAvailabilityZonesInput addAvailabilityZonesInput) throws ApiException {
        ApiResponse<AddAvailabilityZonesOutput> localVarResp = pOSTEnableAvailabilityZonesForLoadBalancerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addAvailabilityZonesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.&lt;/p&gt; &lt;p&gt;For load balancers in a non-default VPC, use &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The load balancer evenly distributes requests across all its registered Availability Zones that contain instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\&quot;&gt;Add or Remove Availability Zones&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addAvailabilityZonesInput  (optional)
     * @return ApiResponse&lt;AddAvailabilityZonesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddAvailabilityZonesOutput> pOSTEnableAvailabilityZonesForLoadBalancerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddAvailabilityZonesInput addAvailabilityZonesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTEnableAvailabilityZonesForLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addAvailabilityZonesInput, null);
        Type localVarReturnType = new TypeToken<AddAvailabilityZonesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.&lt;/p&gt; &lt;p&gt;For load balancers in a non-default VPC, use &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The load balancer evenly distributes requests across all its registered Availability Zones that contain instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\&quot;&gt;Add or Remove Availability Zones&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addAvailabilityZonesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTEnableAvailabilityZonesForLoadBalancerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddAvailabilityZonesInput addAvailabilityZonesInput, final ApiCallback<AddAvailabilityZonesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTEnableAvailabilityZonesForLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addAvailabilityZonesInput, _callback);
        Type localVarReturnType = new TypeToken<AddAvailabilityZonesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyLoadBalancerAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyLoadBalancerAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyLoadBalancerAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyLoadBalancerAttributesInput modifyLoadBalancerAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyLoadBalancerAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=ModifyLoadBalancerAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyLoadBalancerAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyLoadBalancerAttributesInput modifyLoadBalancerAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyLoadBalancerAttributes(Async)");
        }

        return pOSTModifyLoadBalancerAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyLoadBalancerAttributesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the attributes of the specified load balancer.&lt;/p&gt; &lt;p&gt;You can modify the load balancer attributes, such as &lt;code&gt;AccessLogs&lt;/code&gt;, &lt;code&gt;ConnectionDraining&lt;/code&gt;, and &lt;code&gt;CrossZoneLoadBalancing&lt;/code&gt; by either enabling or disabling them. Or, you can modify the load balancer attribute &lt;code&gt;ConnectionSettings&lt;/code&gt; by specifying an idle connection timeout value for your load balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html\&quot;&gt;Cross-Zone Load Balancing&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html\&quot;&gt;Connection Draining&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html\&quot;&gt;Access Logs&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html\&quot;&gt;Idle Connection Timeout&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyLoadBalancerAttributesInput  (optional)
     * @return ModifyLoadBalancerAttributesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyLoadBalancerAttributesOutput pOSTModifyLoadBalancerAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyLoadBalancerAttributesInput modifyLoadBalancerAttributesInput) throws ApiException {
        ApiResponse<ModifyLoadBalancerAttributesOutput> localVarResp = pOSTModifyLoadBalancerAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyLoadBalancerAttributesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the attributes of the specified load balancer.&lt;/p&gt; &lt;p&gt;You can modify the load balancer attributes, such as &lt;code&gt;AccessLogs&lt;/code&gt;, &lt;code&gt;ConnectionDraining&lt;/code&gt;, and &lt;code&gt;CrossZoneLoadBalancing&lt;/code&gt; by either enabling or disabling them. Or, you can modify the load balancer attribute &lt;code&gt;ConnectionSettings&lt;/code&gt; by specifying an idle connection timeout value for your load balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html\&quot;&gt;Cross-Zone Load Balancing&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html\&quot;&gt;Connection Draining&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html\&quot;&gt;Access Logs&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html\&quot;&gt;Idle Connection Timeout&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyLoadBalancerAttributesInput  (optional)
     * @return ApiResponse&lt;ModifyLoadBalancerAttributesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyLoadBalancerAttributesOutput> pOSTModifyLoadBalancerAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyLoadBalancerAttributesInput modifyLoadBalancerAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyLoadBalancerAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyLoadBalancerAttributesInput, null);
        Type localVarReturnType = new TypeToken<ModifyLoadBalancerAttributesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the attributes of the specified load balancer.&lt;/p&gt; &lt;p&gt;You can modify the load balancer attributes, such as &lt;code&gt;AccessLogs&lt;/code&gt;, &lt;code&gt;ConnectionDraining&lt;/code&gt;, and &lt;code&gt;CrossZoneLoadBalancing&lt;/code&gt; by either enabling or disabling them. Or, you can modify the load balancer attribute &lt;code&gt;ConnectionSettings&lt;/code&gt; by specifying an idle connection timeout value for your load balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html\&quot;&gt;Cross-Zone Load Balancing&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html\&quot;&gt;Connection Draining&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html\&quot;&gt;Access Logs&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html\&quot;&gt;Idle Connection Timeout&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyLoadBalancerAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerAttributeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyLoadBalancerAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyLoadBalancerAttributesInput modifyLoadBalancerAttributesInput, final ApiCallback<ModifyLoadBalancerAttributesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyLoadBalancerAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyLoadBalancerAttributesInput, _callback);
        Type localVarReturnType = new TypeToken<ModifyLoadBalancerAttributesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRegisterInstancesWithLoadBalancer
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerEndPointsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRegisterInstancesWithLoadBalancerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterEndPointsInput registerEndPointsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerEndPointsInput;

        // create path and map variables
        String localVarPath = "/#Action=RegisterInstancesWithLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRegisterInstancesWithLoadBalancerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterEndPointsInput registerEndPointsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRegisterInstancesWithLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRegisterInstancesWithLoadBalancer(Async)");
        }

        return pOSTRegisterInstancesWithLoadBalancerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerEndPointsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds the specified instances to the specified load balancer.&lt;/p&gt; &lt;p&gt;The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.&lt;/p&gt; &lt;p&gt;Note that &lt;code&gt;RegisterInstanceWithLoadBalancer&lt;/code&gt; completes when the request has been registered. Instance registration takes a little time to complete. To check the state of the registered instances, use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeInstanceHealth&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After the instance is registered, it starts receiving traffic and requests from the load balancer. Any instance that is not in one of the Availability Zones registered for the load balancer is moved to the &lt;code&gt;OutOfService&lt;/code&gt; state. If an Availability Zone is added to the load balancer later, any instances registered with the load balancer move to the &lt;code&gt;InService&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To deregister instances from a load balancer, use &lt;a&gt;DeregisterInstancesFromLoadBalancer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\&quot;&gt;Register or De-Register EC2 Instances&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerEndPointsInput  (optional)
     * @return RegisterEndPointsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public RegisterEndPointsOutput pOSTRegisterInstancesWithLoadBalancer(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterEndPointsInput registerEndPointsInput) throws ApiException {
        ApiResponse<RegisterEndPointsOutput> localVarResp = pOSTRegisterInstancesWithLoadBalancerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerEndPointsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds the specified instances to the specified load balancer.&lt;/p&gt; &lt;p&gt;The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.&lt;/p&gt; &lt;p&gt;Note that &lt;code&gt;RegisterInstanceWithLoadBalancer&lt;/code&gt; completes when the request has been registered. Instance registration takes a little time to complete. To check the state of the registered instances, use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeInstanceHealth&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After the instance is registered, it starts receiving traffic and requests from the load balancer. Any instance that is not in one of the Availability Zones registered for the load balancer is moved to the &lt;code&gt;OutOfService&lt;/code&gt; state. If an Availability Zone is added to the load balancer later, any instances registered with the load balancer move to the &lt;code&gt;InService&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To deregister instances from a load balancer, use &lt;a&gt;DeregisterInstancesFromLoadBalancer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\&quot;&gt;Register or De-Register EC2 Instances&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerEndPointsInput  (optional)
     * @return ApiResponse&lt;RegisterEndPointsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterEndPointsOutput> pOSTRegisterInstancesWithLoadBalancerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterEndPointsInput registerEndPointsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTRegisterInstancesWithLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerEndPointsInput, null);
        Type localVarReturnType = new TypeToken<RegisterEndPointsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds the specified instances to the specified load balancer.&lt;/p&gt; &lt;p&gt;The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.&lt;/p&gt; &lt;p&gt;Note that &lt;code&gt;RegisterInstanceWithLoadBalancer&lt;/code&gt; completes when the request has been registered. Instance registration takes a little time to complete. To check the state of the registered instances, use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeInstanceHealth&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After the instance is registered, it starts receiving traffic and requests from the load balancer. Any instance that is not in one of the Availability Zones registered for the load balancer is moved to the &lt;code&gt;OutOfService&lt;/code&gt; state. If an Availability Zone is added to the load balancer later, any instances registered with the load balancer move to the &lt;code&gt;InService&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To deregister instances from a load balancer, use &lt;a&gt;DeregisterInstancesFromLoadBalancer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\&quot;&gt;Register or De-Register EC2 Instances&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerEndPointsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEndPointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRegisterInstancesWithLoadBalancerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterEndPointsInput registerEndPointsInput, final ApiCallback<RegisterEndPointsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRegisterInstancesWithLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerEndPointsInput, _callback);
        Type localVarReturnType = new TypeToken<RegisterEndPointsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRemoveTags
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveTagsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsInput removeTagsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeTagsInput;

        // create path and map variables
        String localVarPath = "/#Action=RemoveTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRemoveTagsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsInput removeTagsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRemoveTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRemoveTags(Async)");
        }

        return pOSTRemoveTagsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsInput, _callback);

    }

    /**
     * 
     * Removes one or more tags from the specified load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTRemoveTags(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsInput removeTagsInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTRemoveTagsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes one or more tags from the specified load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTRemoveTagsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsInput removeTagsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTRemoveTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes one or more tags from the specified load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveTagsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsInput removeTagsInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRemoveTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetLoadBalancerListenerSSLCertificate
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setLoadBalancerListenerSSLCertificateInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetLoadBalancerListenerSSLCertificateCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerListenerSSLCertificateInput setLoadBalancerListenerSSLCertificateInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setLoadBalancerListenerSSLCertificateInput;

        // create path and map variables
        String localVarPath = "/#Action=SetLoadBalancerListenerSSLCertificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetLoadBalancerListenerSSLCertificateValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerListenerSSLCertificateInput setLoadBalancerListenerSSLCertificateInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetLoadBalancerListenerSSLCertificate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetLoadBalancerListenerSSLCertificate(Async)");
        }

        return pOSTSetLoadBalancerListenerSSLCertificateCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setLoadBalancerListenerSSLCertificateInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the certificate that terminates the specified listener&#39;s SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.&lt;/p&gt; &lt;p&gt;For more information about updating your SSL certificate, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-update-ssl-cert.html\&quot;&gt;Replace the SSL Certificate for Your Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setLoadBalancerListenerSSLCertificateInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTSetLoadBalancerListenerSSLCertificate(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerListenerSSLCertificateInput setLoadBalancerListenerSSLCertificateInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTSetLoadBalancerListenerSSLCertificateWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setLoadBalancerListenerSSLCertificateInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sets the certificate that terminates the specified listener&#39;s SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.&lt;/p&gt; &lt;p&gt;For more information about updating your SSL certificate, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-update-ssl-cert.html\&quot;&gt;Replace the SSL Certificate for Your Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setLoadBalancerListenerSSLCertificateInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTSetLoadBalancerListenerSSLCertificateWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerListenerSSLCertificateInput setLoadBalancerListenerSSLCertificateInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetLoadBalancerListenerSSLCertificateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setLoadBalancerListenerSSLCertificateInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the certificate that terminates the specified listener&#39;s SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.&lt;/p&gt; &lt;p&gt;For more information about updating your SSL certificate, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-update-ssl-cert.html\&quot;&gt;Replace the SSL Certificate for Your Load Balancer&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setLoadBalancerListenerSSLCertificateInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetLoadBalancerListenerSSLCertificateAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerListenerSSLCertificateInput setLoadBalancerListenerSSLCertificateInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetLoadBalancerListenerSSLCertificateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setLoadBalancerListenerSSLCertificateInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetLoadBalancerPoliciesForBackendServer
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setLoadBalancerPoliciesForBackendServerInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetLoadBalancerPoliciesForBackendServerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerPoliciesForBackendServerInput setLoadBalancerPoliciesForBackendServerInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setLoadBalancerPoliciesForBackendServerInput;

        // create path and map variables
        String localVarPath = "/#Action=SetLoadBalancerPoliciesForBackendServer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetLoadBalancerPoliciesForBackendServerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerPoliciesForBackendServerInput setLoadBalancerPoliciesForBackendServerInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetLoadBalancerPoliciesForBackendServer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetLoadBalancerPoliciesForBackendServer(Async)");
        }

        return pOSTSetLoadBalancerPoliciesForBackendServerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setLoadBalancerPoliciesForBackendServerInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies. At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.&lt;/p&gt; &lt;p&gt;Each time you use &lt;code&gt;SetLoadBalancerPoliciesForBackendServer&lt;/code&gt; to enable the policies, use the &lt;code&gt;PolicyNames&lt;/code&gt; parameter to list the policies that you want to enable.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeLoadBalancerPolicies&lt;/a&gt; to verify that the policy is associated with the EC2 instance.&lt;/p&gt; &lt;p&gt;For more information about enabling back-end instance authentication, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html#configure_backendauth_clt\&quot;&gt;Configure Back-end Instance Authentication&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;. For more information about Proxy Protocol, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html\&quot;&gt;Configure Proxy Protocol Support&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setLoadBalancerPoliciesForBackendServerInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTSetLoadBalancerPoliciesForBackendServer(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerPoliciesForBackendServerInput setLoadBalancerPoliciesForBackendServerInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTSetLoadBalancerPoliciesForBackendServerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setLoadBalancerPoliciesForBackendServerInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies. At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.&lt;/p&gt; &lt;p&gt;Each time you use &lt;code&gt;SetLoadBalancerPoliciesForBackendServer&lt;/code&gt; to enable the policies, use the &lt;code&gt;PolicyNames&lt;/code&gt; parameter to list the policies that you want to enable.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeLoadBalancerPolicies&lt;/a&gt; to verify that the policy is associated with the EC2 instance.&lt;/p&gt; &lt;p&gt;For more information about enabling back-end instance authentication, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html#configure_backendauth_clt\&quot;&gt;Configure Back-end Instance Authentication&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;. For more information about Proxy Protocol, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html\&quot;&gt;Configure Proxy Protocol Support&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setLoadBalancerPoliciesForBackendServerInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTSetLoadBalancerPoliciesForBackendServerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerPoliciesForBackendServerInput setLoadBalancerPoliciesForBackendServerInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetLoadBalancerPoliciesForBackendServerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setLoadBalancerPoliciesForBackendServerInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies. At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.&lt;/p&gt; &lt;p&gt;Each time you use &lt;code&gt;SetLoadBalancerPoliciesForBackendServer&lt;/code&gt; to enable the policies, use the &lt;code&gt;PolicyNames&lt;/code&gt; parameter to list the policies that you want to enable.&lt;/p&gt; &lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeLoadBalancerPolicies&lt;/a&gt; to verify that the policy is associated with the EC2 instance.&lt;/p&gt; &lt;p&gt;For more information about enabling back-end instance authentication, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html#configure_backendauth_clt\&quot;&gt;Configure Back-end Instance Authentication&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;. For more information about Proxy Protocol, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html\&quot;&gt;Configure Proxy Protocol Support&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setLoadBalancerPoliciesForBackendServerInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetLoadBalancerPoliciesForBackendServerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerPoliciesForBackendServerInput setLoadBalancerPoliciesForBackendServerInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetLoadBalancerPoliciesForBackendServerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setLoadBalancerPoliciesForBackendServerInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetLoadBalancerPoliciesOfListener
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setLoadBalancerPoliciesOfListenerInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetLoadBalancerPoliciesOfListenerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerPoliciesOfListenerInput setLoadBalancerPoliciesOfListenerInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setLoadBalancerPoliciesOfListenerInput;

        // create path and map variables
        String localVarPath = "/#Action=SetLoadBalancerPoliciesOfListener";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetLoadBalancerPoliciesOfListenerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerPoliciesOfListenerInput setLoadBalancerPoliciesOfListenerInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetLoadBalancerPoliciesOfListener(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetLoadBalancerPoliciesOfListener(Async)");
        }

        return pOSTSetLoadBalancerPoliciesOfListenerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setLoadBalancerPoliciesOfListenerInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Replaces the current set of policies for the specified load balancer port with the specified set of policies.&lt;/p&gt; &lt;p&gt;To enable back-end server authentication, use &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about setting policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-config-update.html\&quot;&gt;Update the SSL Negotiation Configuration&lt;/a&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\&quot;&gt;Duration-Based Session Stickiness&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\&quot;&gt;Application-Controlled Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setLoadBalancerPoliciesOfListenerInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTSetLoadBalancerPoliciesOfListener(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerPoliciesOfListenerInput setLoadBalancerPoliciesOfListenerInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTSetLoadBalancerPoliciesOfListenerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setLoadBalancerPoliciesOfListenerInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Replaces the current set of policies for the specified load balancer port with the specified set of policies.&lt;/p&gt; &lt;p&gt;To enable back-end server authentication, use &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about setting policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-config-update.html\&quot;&gt;Update the SSL Negotiation Configuration&lt;/a&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\&quot;&gt;Duration-Based Session Stickiness&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\&quot;&gt;Application-Controlled Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setLoadBalancerPoliciesOfListenerInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTSetLoadBalancerPoliciesOfListenerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerPoliciesOfListenerInput setLoadBalancerPoliciesOfListenerInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetLoadBalancerPoliciesOfListenerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setLoadBalancerPoliciesOfListenerInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Replaces the current set of policies for the specified load balancer port with the specified set of policies.&lt;/p&gt; &lt;p&gt;To enable back-end server authentication, use &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about setting policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-config-update.html\&quot;&gt;Update the SSL Negotiation Configuration&lt;/a&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\&quot;&gt;Duration-Based Session Stickiness&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\&quot;&gt;Application-Controlled Session Stickiness&lt;/a&gt; in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setLoadBalancerPoliciesOfListenerInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessPointNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetLoadBalancerPoliciesOfListenerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetLoadBalancerPoliciesOfListenerInput setLoadBalancerPoliciesOfListenerInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetLoadBalancerPoliciesOfListenerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setLoadBalancerPoliciesOfListenerInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
