/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:22.346579-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog {
  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_S3_BUCKET_NAME = "S3BucketName";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_NAME)
  private String s3BucketName;

  public static final String SERIALIZED_NAME_EMIT_INTERVAL = "EmitInterval";
  @SerializedName(SERIALIZED_NAME_EMIT_INTERVAL)
  private Integer emitInterval;

  public static final String SERIALIZED_NAME_S3_BUCKET_PREFIX = "S3BucketPrefix";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_PREFIX)
  private String s3BucketPrefix;

  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog() {
  }

  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog s3BucketName(String s3BucketName) {
    this.s3BucketName = s3BucketName;
    return this;
  }

  /**
   * Get s3BucketName
   * @return s3BucketName
   */
  @javax.annotation.Nullable
  public String getS3BucketName() {
    return s3BucketName;
  }

  public void setS3BucketName(String s3BucketName) {
    this.s3BucketName = s3BucketName;
  }


  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog emitInterval(Integer emitInterval) {
    this.emitInterval = emitInterval;
    return this;
  }

  /**
   * Get emitInterval
   * @return emitInterval
   */
  @javax.annotation.Nullable
  public Integer getEmitInterval() {
    return emitInterval;
  }

  public void setEmitInterval(Integer emitInterval) {
    this.emitInterval = emitInterval;
  }


  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog s3BucketPrefix(String s3BucketPrefix) {
    this.s3BucketPrefix = s3BucketPrefix;
    return this;
  }

  /**
   * Get s3BucketPrefix
   * @return s3BucketPrefix
   */
  @javax.annotation.Nullable
  public String getS3BucketPrefix() {
    return s3BucketPrefix;
  }

  public void setS3BucketPrefix(String s3BucketPrefix) {
    this.s3BucketPrefix = s3BucketPrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog geTModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog = (GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog) o;
    return Objects.equals(this.enabled, geTModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog.enabled) &&
        Objects.equals(this.s3BucketName, geTModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog.s3BucketName) &&
        Objects.equals(this.emitInterval, geTModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog.emitInterval) &&
        Objects.equals(this.s3BucketPrefix, geTModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog.s3BucketPrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, s3BucketName, emitInterval, s3BucketPrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    s3BucketName: ").append(toIndentedString(s3BucketName)).append("\n");
    sb.append("    emitInterval: ").append(toIndentedString(emitInterval)).append("\n");
    sb.append("    s3BucketPrefix: ").append(toIndentedString(s3BucketPrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Enabled");
    openapiFields.add("S3BucketName");
    openapiFields.add("EmitInterval");
    openapiFields.add("S3BucketPrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Enabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog is not found in the empty JSON string", GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Enabled`
      Boolean.validateJsonElement(jsonObj.get("Enabled"));
      // validate the optional field `S3BucketName`
      if (jsonObj.get("S3BucketName") != null && !jsonObj.get("S3BucketName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3BucketName"));
      }
      // validate the optional field `EmitInterval`
      if (jsonObj.get("EmitInterval") != null && !jsonObj.get("EmitInterval").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EmitInterval"));
      }
      // validate the optional field `S3BucketPrefix`
      if (jsonObj.get("S3BucketPrefix") != null && !jsonObj.get("S3BucketPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3BucketPrefix"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog.class));

       return (TypeAdapter<T>) new TypeAdapter<GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog>() {
           @Override
           public void write(JsonWriter out, GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog
   * @throws IOException if the JSON string is invalid with respect to GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog
   */
  public static GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog.class);
  }

  /**
   * Convert an instance of GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

