/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog;
import org.openapitools.client.model.GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterConnectionDraining;
import org.openapitools.client.model.GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterConnectionSettings;
import org.openapitools.client.model.GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterCrossZoneLoadBalancing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The attributes for a load balancer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:22.346579-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter {
  public static final String SERIALIZED_NAME_CROSS_ZONE_LOAD_BALANCING = "CrossZoneLoadBalancing";
  @SerializedName(SERIALIZED_NAME_CROSS_ZONE_LOAD_BALANCING)
  private GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterCrossZoneLoadBalancing crossZoneLoadBalancing;

  public static final String SERIALIZED_NAME_ACCESS_LOG = "AccessLog";
  @SerializedName(SERIALIZED_NAME_ACCESS_LOG)
  private GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog accessLog;

  public static final String SERIALIZED_NAME_CONNECTION_DRAINING = "ConnectionDraining";
  @SerializedName(SERIALIZED_NAME_CONNECTION_DRAINING)
  private GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterConnectionDraining connectionDraining;

  public static final String SERIALIZED_NAME_CONNECTION_SETTINGS = "ConnectionSettings";
  @SerializedName(SERIALIZED_NAME_CONNECTION_SETTINGS)
  private GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterConnectionSettings connectionSettings;

  public static final String SERIALIZED_NAME_ADDITIONAL_ATTRIBUTES = "AdditionalAttributes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ATTRIBUTES)
  private List additionalAttributes;

  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter() {
  }

  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter crossZoneLoadBalancing(GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterCrossZoneLoadBalancing crossZoneLoadBalancing) {
    this.crossZoneLoadBalancing = crossZoneLoadBalancing;
    return this;
  }

  /**
   * Get crossZoneLoadBalancing
   * @return crossZoneLoadBalancing
   */
  @javax.annotation.Nullable
  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterCrossZoneLoadBalancing getCrossZoneLoadBalancing() {
    return crossZoneLoadBalancing;
  }

  public void setCrossZoneLoadBalancing(GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterCrossZoneLoadBalancing crossZoneLoadBalancing) {
    this.crossZoneLoadBalancing = crossZoneLoadBalancing;
  }


  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter accessLog(GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog accessLog) {
    this.accessLog = accessLog;
    return this;
  }

  /**
   * Get accessLog
   * @return accessLog
   */
  @javax.annotation.Nullable
  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog getAccessLog() {
    return accessLog;
  }

  public void setAccessLog(GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog accessLog) {
    this.accessLog = accessLog;
  }


  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter connectionDraining(GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterConnectionDraining connectionDraining) {
    this.connectionDraining = connectionDraining;
    return this;
  }

  /**
   * Get connectionDraining
   * @return connectionDraining
   */
  @javax.annotation.Nullable
  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterConnectionDraining getConnectionDraining() {
    return connectionDraining;
  }

  public void setConnectionDraining(GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterConnectionDraining connectionDraining) {
    this.connectionDraining = connectionDraining;
  }


  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter connectionSettings(GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterConnectionSettings connectionSettings) {
    this.connectionSettings = connectionSettings;
    return this;
  }

  /**
   * Get connectionSettings
   * @return connectionSettings
   */
  @javax.annotation.Nullable
  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterConnectionSettings getConnectionSettings() {
    return connectionSettings;
  }

  public void setConnectionSettings(GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterConnectionSettings connectionSettings) {
    this.connectionSettings = connectionSettings;
  }


  public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter additionalAttributes(List additionalAttributes) {
    this.additionalAttributes = additionalAttributes;
    return this;
  }

  /**
   * Get additionalAttributes
   * @return additionalAttributes
   */
  @javax.annotation.Nullable
  public List getAdditionalAttributes() {
    return additionalAttributes;
  }

  public void setAdditionalAttributes(List additionalAttributes) {
    this.additionalAttributes = additionalAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter geTModifyLoadBalancerAttributesLoadBalancerAttributesParameter = (GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter) o;
    return Objects.equals(this.crossZoneLoadBalancing, geTModifyLoadBalancerAttributesLoadBalancerAttributesParameter.crossZoneLoadBalancing) &&
        Objects.equals(this.accessLog, geTModifyLoadBalancerAttributesLoadBalancerAttributesParameter.accessLog) &&
        Objects.equals(this.connectionDraining, geTModifyLoadBalancerAttributesLoadBalancerAttributesParameter.connectionDraining) &&
        Objects.equals(this.connectionSettings, geTModifyLoadBalancerAttributesLoadBalancerAttributesParameter.connectionSettings) &&
        Objects.equals(this.additionalAttributes, geTModifyLoadBalancerAttributesLoadBalancerAttributesParameter.additionalAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crossZoneLoadBalancing, accessLog, connectionDraining, connectionSettings, additionalAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter {\n");
    sb.append("    crossZoneLoadBalancing: ").append(toIndentedString(crossZoneLoadBalancing)).append("\n");
    sb.append("    accessLog: ").append(toIndentedString(accessLog)).append("\n");
    sb.append("    connectionDraining: ").append(toIndentedString(connectionDraining)).append("\n");
    sb.append("    connectionSettings: ").append(toIndentedString(connectionSettings)).append("\n");
    sb.append("    additionalAttributes: ").append(toIndentedString(additionalAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CrossZoneLoadBalancing");
    openapiFields.add("AccessLog");
    openapiFields.add("ConnectionDraining");
    openapiFields.add("ConnectionSettings");
    openapiFields.add("AdditionalAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter is not found in the empty JSON string", GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CrossZoneLoadBalancing`
      if (jsonObj.get("CrossZoneLoadBalancing") != null && !jsonObj.get("CrossZoneLoadBalancing").isJsonNull()) {
        GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterCrossZoneLoadBalancing.validateJsonElement(jsonObj.get("CrossZoneLoadBalancing"));
      }
      // validate the optional field `AccessLog`
      if (jsonObj.get("AccessLog") != null && !jsonObj.get("AccessLog").isJsonNull()) {
        GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterAccessLog.validateJsonElement(jsonObj.get("AccessLog"));
      }
      // validate the optional field `ConnectionDraining`
      if (jsonObj.get("ConnectionDraining") != null && !jsonObj.get("ConnectionDraining").isJsonNull()) {
        GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterConnectionDraining.validateJsonElement(jsonObj.get("ConnectionDraining"));
      }
      // validate the optional field `ConnectionSettings`
      if (jsonObj.get("ConnectionSettings") != null && !jsonObj.get("ConnectionSettings").isJsonNull()) {
        GETModifyLoadBalancerAttributesLoadBalancerAttributesParameterConnectionSettings.validateJsonElement(jsonObj.get("ConnectionSettings"));
      }
      // validate the optional field `AdditionalAttributes`
      if (jsonObj.get("AdditionalAttributes") != null && !jsonObj.get("AdditionalAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdditionalAttributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter>() {
           @Override
           public void write(JsonWriter out, GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter
   * @throws IOException if the JSON string is invalid with respect to GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter
   */
  public static GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter.class);
  }

  /**
   * Convert an instance of GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

