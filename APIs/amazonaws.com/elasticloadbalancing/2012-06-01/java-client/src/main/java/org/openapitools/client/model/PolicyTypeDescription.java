/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a policy type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:22.346579-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyTypeDescription {
  public static final String SERIALIZED_NAME_POLICY_TYPE_NAME = "PolicyTypeName";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE_NAME)
  private String policyTypeName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_POLICY_ATTRIBUTE_TYPE_DESCRIPTIONS = "PolicyAttributeTypeDescriptions";
  @SerializedName(SERIALIZED_NAME_POLICY_ATTRIBUTE_TYPE_DESCRIPTIONS)
  private List policyAttributeTypeDescriptions;

  public PolicyTypeDescription() {
  }

  public PolicyTypeDescription policyTypeName(String policyTypeName) {
    this.policyTypeName = policyTypeName;
    return this;
  }

  /**
   * Get policyTypeName
   * @return policyTypeName
   */
  @javax.annotation.Nullable
  public String getPolicyTypeName() {
    return policyTypeName;
  }

  public void setPolicyTypeName(String policyTypeName) {
    this.policyTypeName = policyTypeName;
  }


  public PolicyTypeDescription description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PolicyTypeDescription policyAttributeTypeDescriptions(List policyAttributeTypeDescriptions) {
    this.policyAttributeTypeDescriptions = policyAttributeTypeDescriptions;
    return this;
  }

  /**
   * Get policyAttributeTypeDescriptions
   * @return policyAttributeTypeDescriptions
   */
  @javax.annotation.Nullable
  public List getPolicyAttributeTypeDescriptions() {
    return policyAttributeTypeDescriptions;
  }

  public void setPolicyAttributeTypeDescriptions(List policyAttributeTypeDescriptions) {
    this.policyAttributeTypeDescriptions = policyAttributeTypeDescriptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyTypeDescription policyTypeDescription = (PolicyTypeDescription) o;
    return Objects.equals(this.policyTypeName, policyTypeDescription.policyTypeName) &&
        Objects.equals(this.description, policyTypeDescription.description) &&
        Objects.equals(this.policyAttributeTypeDescriptions, policyTypeDescription.policyAttributeTypeDescriptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyTypeName, description, policyAttributeTypeDescriptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyTypeDescription {\n");
    sb.append("    policyTypeName: ").append(toIndentedString(policyTypeName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    policyAttributeTypeDescriptions: ").append(toIndentedString(policyAttributeTypeDescriptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PolicyTypeName");
    openapiFields.add("Description");
    openapiFields.add("PolicyAttributeTypeDescriptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyTypeDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyTypeDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyTypeDescription is not found in the empty JSON string", PolicyTypeDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyTypeDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyTypeDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PolicyTypeName`
      if (jsonObj.get("PolicyTypeName") != null && !jsonObj.get("PolicyTypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PolicyTypeName"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `PolicyAttributeTypeDescriptions`
      if (jsonObj.get("PolicyAttributeTypeDescriptions") != null && !jsonObj.get("PolicyAttributeTypeDescriptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PolicyAttributeTypeDescriptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyTypeDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyTypeDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyTypeDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyTypeDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyTypeDescription>() {
           @Override
           public void write(JsonWriter out, PolicyTypeDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyTypeDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyTypeDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyTypeDescription
   * @throws IOException if the JSON string is invalid with respect to PolicyTypeDescription
   */
  public static PolicyTypeDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyTypeDescription.class);
  }

  /**
   * Convert an instance of PolicyTypeDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

