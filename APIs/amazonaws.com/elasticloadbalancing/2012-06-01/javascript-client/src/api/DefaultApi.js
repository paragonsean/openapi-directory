/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddAvailabilityZonesInput from '../model/AddAvailabilityZonesInput';
import AddAvailabilityZonesOutput from '../model/AddAvailabilityZonesOutput';
import AddTagsInput from '../model/AddTagsInput';
import ApplySecurityGroupsToLoadBalancerInput from '../model/ApplySecurityGroupsToLoadBalancerInput';
import ApplySecurityGroupsToLoadBalancerOutput from '../model/ApplySecurityGroupsToLoadBalancerOutput';
import AttachLoadBalancerToSubnetsInput from '../model/AttachLoadBalancerToSubnetsInput';
import AttachLoadBalancerToSubnetsOutput from '../model/AttachLoadBalancerToSubnetsOutput';
import ConfigureHealthCheckInput from '../model/ConfigureHealthCheckInput';
import ConfigureHealthCheckOutput from '../model/ConfigureHealthCheckOutput';
import CreateAccessPointInput from '../model/CreateAccessPointInput';
import CreateAccessPointOutput from '../model/CreateAccessPointOutput';
import CreateAppCookieStickinessPolicyInput from '../model/CreateAppCookieStickinessPolicyInput';
import CreateLBCookieStickinessPolicyInput from '../model/CreateLBCookieStickinessPolicyInput';
import CreateLoadBalancerListenerInput from '../model/CreateLoadBalancerListenerInput';
import CreateLoadBalancerPolicyInput from '../model/CreateLoadBalancerPolicyInput';
import DeleteAccessPointInput from '../model/DeleteAccessPointInput';
import DeleteLoadBalancerListenerInput from '../model/DeleteLoadBalancerListenerInput';
import DeleteLoadBalancerPolicyInput from '../model/DeleteLoadBalancerPolicyInput';
import DeregisterEndPointsInput from '../model/DeregisterEndPointsInput';
import DeregisterEndPointsOutput from '../model/DeregisterEndPointsOutput';
import DescribeAccessPointsInput from '../model/DescribeAccessPointsInput';
import DescribeAccessPointsOutput from '../model/DescribeAccessPointsOutput';
import DescribeAccountLimitsInput from '../model/DescribeAccountLimitsInput';
import DescribeAccountLimitsOutput from '../model/DescribeAccountLimitsOutput';
import DescribeEndPointStateInput from '../model/DescribeEndPointStateInput';
import DescribeEndPointStateOutput from '../model/DescribeEndPointStateOutput';
import DescribeLoadBalancerAttributesInput from '../model/DescribeLoadBalancerAttributesInput';
import DescribeLoadBalancerAttributesOutput from '../model/DescribeLoadBalancerAttributesOutput';
import DescribeLoadBalancerPoliciesInput from '../model/DescribeLoadBalancerPoliciesInput';
import DescribeLoadBalancerPoliciesOutput from '../model/DescribeLoadBalancerPoliciesOutput';
import DescribeLoadBalancerPolicyTypesInput from '../model/DescribeLoadBalancerPolicyTypesInput';
import DescribeLoadBalancerPolicyTypesOutput from '../model/DescribeLoadBalancerPolicyTypesOutput';
import DescribeTagsInput from '../model/DescribeTagsInput';
import DescribeTagsOutput from '../model/DescribeTagsOutput';
import DetachLoadBalancerFromSubnetsInput from '../model/DetachLoadBalancerFromSubnetsInput';
import DetachLoadBalancerFromSubnetsOutput from '../model/DetachLoadBalancerFromSubnetsOutput';
import GETConfigureHealthCheckHealthCheckParameter from '../model/GETConfigureHealthCheckHealthCheckParameter';
import GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter from '../model/GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter';
import Instance from '../model/Instance';
import Listener from '../model/Listener';
import ModifyLoadBalancerAttributesInput from '../model/ModifyLoadBalancerAttributesInput';
import ModifyLoadBalancerAttributesOutput from '../model/ModifyLoadBalancerAttributesOutput';
import PolicyAttribute from '../model/PolicyAttribute';
import RegisterEndPointsInput from '../model/RegisterEndPointsInput';
import RegisterEndPointsOutput from '../model/RegisterEndPointsOutput';
import RemoveAvailabilityZonesInput from '../model/RemoveAvailabilityZonesInput';
import RemoveAvailabilityZonesOutput from '../model/RemoveAvailabilityZonesOutput';
import RemoveTagsInput from '../model/RemoveTagsInput';
import SetLoadBalancerListenerSSLCertificateInput from '../model/SetLoadBalancerListenerSSLCertificateInput';
import SetLoadBalancerPoliciesForBackendServerInput from '../model/SetLoadBalancerPoliciesForBackendServerInput';
import SetLoadBalancerPoliciesOfListenerInput from '../model/SetLoadBalancerPoliciesOfListenerInput';
import Tag from '../model/Tag';
import TagKeyOnly from '../model/TagKeyOnly';

/**
* Default service.
* @module api/DefaultApi
* @version 2012-06-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETAddTags operation.
     * @callback module:api/DefaultApi~gETAddTagsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.</p> <p>Each tag consists of a key and an optional value. If a tag with the same key is already associated with the load balancer, <code>AddTags</code> updates its value.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html\">Tag Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {Array.<String>} loadBalancerNames The name of the load balancer. You can specify one load balancer only.
     * @param {Array.<module:model/Tag>} tags The tags.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETAddTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gETAddTags(loadBalancerNames, tags, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerNames' is set
      if (loadBalancerNames === undefined || loadBalancerNames === null) {
        throw new Error("Missing the required parameter 'loadBalancerNames' when calling gETAddTags");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling gETAddTags");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETAddTags");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETAddTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerNames': this.apiClient.buildCollectionParam(loadBalancerNames, 'multi'),
        'Tags': this.apiClient.buildCollectionParam(tags, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=AddTags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETApplySecurityGroupsToLoadBalancer operation.
     * @callback module:api/DefaultApi~gETApplySecurityGroupsToLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplySecurityGroupsToLoadBalancerOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-vpc-security-groups\">Security Groups for Load Balancers in a VPC</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {Array.<String>} securityGroups The IDs of the security groups to associate with the load balancer. Note that you cannot specify the name of the security group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETApplySecurityGroupsToLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplySecurityGroupsToLoadBalancerOutput}
     */
    gETApplySecurityGroupsToLoadBalancer(loadBalancerName, securityGroups, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETApplySecurityGroupsToLoadBalancer");
      }
      // verify the required parameter 'securityGroups' is set
      if (securityGroups === undefined || securityGroups === null) {
        throw new Error("Missing the required parameter 'securityGroups' when calling gETApplySecurityGroupsToLoadBalancer");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETApplySecurityGroupsToLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETApplySecurityGroupsToLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'SecurityGroups': this.apiClient.buildCollectionParam(securityGroups, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ApplySecurityGroupsToLoadBalancerOutput;
      return this.apiClient.callApi(
        '/#Action=ApplySecurityGroupsToLoadBalancer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETAttachLoadBalancerToSubnets operation.
     * @callback module:api/DefaultApi~gETAttachLoadBalancerToSubnetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachLoadBalancerToSubnetsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds one or more subnets to the set of configured subnets for the specified load balancer.</p> <p>The load balancer evenly distributes requests across all registered subnets. For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-manage-subnets.html\">Add or Remove Subnets for Your Load Balancer in a VPC</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {Array.<String>} subnets The IDs of the subnets to add. You can add only one subnet per Availability Zone.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETAttachLoadBalancerToSubnetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachLoadBalancerToSubnetsOutput}
     */
    gETAttachLoadBalancerToSubnets(loadBalancerName, subnets, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETAttachLoadBalancerToSubnets");
      }
      // verify the required parameter 'subnets' is set
      if (subnets === undefined || subnets === null) {
        throw new Error("Missing the required parameter 'subnets' when calling gETAttachLoadBalancerToSubnets");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETAttachLoadBalancerToSubnets");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETAttachLoadBalancerToSubnets");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'Subnets': this.apiClient.buildCollectionParam(subnets, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = AttachLoadBalancerToSubnetsOutput;
      return this.apiClient.callApi(
        '/#Action=AttachLoadBalancerToSubnets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETConfigureHealthCheck operation.
     * @callback module:api/DefaultApi~gETConfigureHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigureHealthCheckOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Specifies the health check settings to use when evaluating the health state of your EC2 instances.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html\">Configure Health Checks for Your Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {module:model/GETConfigureHealthCheckHealthCheckParameter} healthCheck The configuration information.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETConfigureHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigureHealthCheckOutput}
     */
    gETConfigureHealthCheck(loadBalancerName, healthCheck, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETConfigureHealthCheck");
      }
      // verify the required parameter 'healthCheck' is set
      if (healthCheck === undefined || healthCheck === null) {
        throw new Error("Missing the required parameter 'healthCheck' when calling gETConfigureHealthCheck");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETConfigureHealthCheck");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETConfigureHealthCheck");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'HealthCheck': healthCheck,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ConfigureHealthCheckOutput;
      return this.apiClient.callApi(
        '/#Action=ConfigureHealthCheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateAppCookieStickinessPolicy operation.
     * @callback module:api/DefaultApi~gETCreateAppCookieStickinessPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.</p> <p>This policy is similar to the policy created by <a>CreateLBCookieStickinessPolicy</a>, except that the lifetime of the special Elastic Load Balancing cookie, <code>AWSELB</code>, follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer only inserts a new stickiness cookie when the application response includes a new application cookie.</p> <p>If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\">Application-Controlled Session Stickiness</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {String} policyName The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer.
     * @param {String} cookieName The name of the application cookie used for stickiness.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETCreateAppCookieStickinessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gETCreateAppCookieStickinessPolicy(loadBalancerName, policyName, cookieName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETCreateAppCookieStickinessPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling gETCreateAppCookieStickinessPolicy");
      }
      // verify the required parameter 'cookieName' is set
      if (cookieName === undefined || cookieName === null) {
        throw new Error("Missing the required parameter 'cookieName' when calling gETCreateAppCookieStickinessPolicy");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateAppCookieStickinessPolicy");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateAppCookieStickinessPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'PolicyName': policyName,
        'CookieName': cookieName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=CreateAppCookieStickinessPolicy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateLBCookieStickinessPolicy operation.
     * @callback module:api/DefaultApi~gETCreateLBCookieStickinessPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.</p> <p>When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request. If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.</p> <p>A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\">Duration-Based Session Stickiness</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {String} policyName The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [cookieExpirationPeriod] The time period, in seconds, after which the cookie should be considered stale. If you do not specify this parameter, the default value is 0, which indicates that the sticky session should last for the duration of the browser session.
     * @param {module:api/DefaultApi~gETCreateLBCookieStickinessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gETCreateLBCookieStickinessPolicy(loadBalancerName, policyName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETCreateLBCookieStickinessPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling gETCreateLBCookieStickinessPolicy");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateLBCookieStickinessPolicy");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateLBCookieStickinessPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'PolicyName': policyName,
        'CookieExpirationPeriod': opts['cookieExpirationPeriod'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=CreateLBCookieStickinessPolicy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateLoadBalancer operation.
     * @callback module:api/DefaultApi~gETCreateLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAccessPointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a Classic Load Balancer.</p> <p>You can add listeners, security groups, subnets, and tags when you create your load balancer, or you can add them later using <a>CreateLoadBalancerListeners</a>, <a>ApplySecurityGroupsToLoadBalancer</a>, <a>AttachLoadBalancerToSubnets</a>, and <a>AddTags</a>.</p> <p>To describe your current load balancers, see <a>DescribeLoadBalancers</a>. When you are finished with a load balancer, you can delete it using <a>DeleteLoadBalancer</a>.</p> <p>You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\">Limits for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName <p>The name of the load balancer.</p> <p>This name must be unique within your set of load balancers for the region, must have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and cannot begin or end with a hyphen.</p>
     * @param {Array.<module:model/Listener>} listeners <p>The listeners.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html\">Listeners for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [availabilityZones] <p>One or more Availability Zones from the same region as the load balancer.</p> <p>You must specify at least one Availability Zone.</p> <p>You can add more Availability Zones after you create the load balancer using <a>EnableAvailabilityZonesForLoadBalancer</a>.</p>
     * @param {Array.<String>} [subnets] The IDs of the subnets in your VPC to attach to the load balancer. Specify one subnet per Availability Zone specified in <code>AvailabilityZones</code>.
     * @param {Array.<String>} [securityGroups] The IDs of the security groups to assign to the load balancer.
     * @param {String} [scheme] <p>The type of a load balancer. Valid only for load balancers in a VPC.</p> <p>By default, Elastic Load Balancing creates an Internet-facing load balancer with a DNS name that resolves to public IP addresses. For more information about Internet-facing and Internal load balancers, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/how-elastic-load-balancing-works.html#load-balancer-scheme\">Load Balancer Scheme</a> in the <i>Elastic Load Balancing User Guide</i>.</p> <p>Specify <code>internal</code> to create a load balancer with a DNS name that resolves to private IP addresses.</p>
     * @param {Array.<module:model/Tag>} [tags] <p>A list of tags to assign to the load balancer.</p> <p>For more information about tagging your load balancer, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html\">Tag Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:api/DefaultApi~gETCreateLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAccessPointOutput}
     */
    gETCreateLoadBalancer(loadBalancerName, listeners, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETCreateLoadBalancer");
      }
      // verify the required parameter 'listeners' is set
      if (listeners === undefined || listeners === null) {
        throw new Error("Missing the required parameter 'listeners' when calling gETCreateLoadBalancer");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'Listeners': this.apiClient.buildCollectionParam(listeners, 'multi'),
        'AvailabilityZones': this.apiClient.buildCollectionParam(opts['availabilityZones'], 'multi'),
        'Subnets': this.apiClient.buildCollectionParam(opts['subnets'], 'multi'),
        'SecurityGroups': this.apiClient.buildCollectionParam(opts['securityGroups'], 'multi'),
        'Scheme': opts['scheme'],
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateAccessPointOutput;
      return this.apiClient.callApi(
        '/#Action=CreateLoadBalancer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateLoadBalancerListeners operation.
     * @callback module:api/DefaultApi~gETCreateLoadBalancerListenersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html\">Listeners for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {Array.<module:model/Listener>} listeners The listeners.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETCreateLoadBalancerListenersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gETCreateLoadBalancerListeners(loadBalancerName, listeners, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETCreateLoadBalancerListeners");
      }
      // verify the required parameter 'listeners' is set
      if (listeners === undefined || listeners === null) {
        throw new Error("Missing the required parameter 'listeners' when calling gETCreateLoadBalancerListeners");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateLoadBalancerListeners");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateLoadBalancerListeners");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'Listeners': this.apiClient.buildCollectionParam(listeners, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=CreateLoadBalancerListeners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateLoadBalancerPolicy operation.
     * @callback module:api/DefaultApi~gETCreateLoadBalancerPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a policy with the specified attributes for the specified load balancer.</p> <p>Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {String} policyName The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer.
     * @param {String} policyTypeName The name of the base policy type. To get the list of policy types, use <a>DescribeLoadBalancerPolicyTypes</a>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/PolicyAttribute>} [policyAttributes] The policy attributes.
     * @param {module:api/DefaultApi~gETCreateLoadBalancerPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gETCreateLoadBalancerPolicy(loadBalancerName, policyName, policyTypeName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETCreateLoadBalancerPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling gETCreateLoadBalancerPolicy");
      }
      // verify the required parameter 'policyTypeName' is set
      if (policyTypeName === undefined || policyTypeName === null) {
        throw new Error("Missing the required parameter 'policyTypeName' when calling gETCreateLoadBalancerPolicy");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateLoadBalancerPolicy");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateLoadBalancerPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'PolicyName': policyName,
        'PolicyTypeName': policyTypeName,
        'PolicyAttributes': this.apiClient.buildCollectionParam(opts['policyAttributes'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=CreateLoadBalancerPolicy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteLoadBalancer operation.
     * @callback module:api/DefaultApi~gETDeleteLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified load balancer.</p> <p>If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.</p> <p>If the load balancer does not exist or has already been deleted, the call to <code>DeleteLoadBalancer</code> still succeeds.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gETDeleteLoadBalancer(loadBalancerName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETDeleteLoadBalancer");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=DeleteLoadBalancer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteLoadBalancerListeners operation.
     * @callback module:api/DefaultApi~gETDeleteLoadBalancerListenersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified listeners from the specified load balancer.
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {Array.<Number>} loadBalancerPorts The client port numbers of the listeners.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteLoadBalancerListenersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gETDeleteLoadBalancerListeners(loadBalancerName, loadBalancerPorts, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETDeleteLoadBalancerListeners");
      }
      // verify the required parameter 'loadBalancerPorts' is set
      if (loadBalancerPorts === undefined || loadBalancerPorts === null) {
        throw new Error("Missing the required parameter 'loadBalancerPorts' when calling gETDeleteLoadBalancerListeners");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteLoadBalancerListeners");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteLoadBalancerListeners");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'LoadBalancerPorts': this.apiClient.buildCollectionParam(loadBalancerPorts, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=DeleteLoadBalancerListeners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteLoadBalancerPolicy operation.
     * @callback module:api/DefaultApi~gETDeleteLoadBalancerPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {String} policyName The name of the policy.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteLoadBalancerPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gETDeleteLoadBalancerPolicy(loadBalancerName, policyName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETDeleteLoadBalancerPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling gETDeleteLoadBalancerPolicy");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteLoadBalancerPolicy");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteLoadBalancerPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'PolicyName': policyName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=DeleteLoadBalancerPolicy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeregisterInstancesFromLoadBalancer operation.
     * @callback module:api/DefaultApi~gETDeregisterInstancesFromLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeregisterEndPointsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.</p> <p>You can use <a>DescribeLoadBalancers</a> to verify that the instance is deregistered from the load balancer.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\">Register or De-Register EC2 Instances</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {Array.<module:model/Instance>} instances The IDs of the instances.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeregisterInstancesFromLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeregisterEndPointsOutput}
     */
    gETDeregisterInstancesFromLoadBalancer(loadBalancerName, instances, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETDeregisterInstancesFromLoadBalancer");
      }
      // verify the required parameter 'instances' is set
      if (instances === undefined || instances === null) {
        throw new Error("Missing the required parameter 'instances' when calling gETDeregisterInstancesFromLoadBalancer");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeregisterInstancesFromLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeregisterInstancesFromLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'Instances': this.apiClient.buildCollectionParam(instances, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeregisterEndPointsOutput;
      return this.apiClient.callApi(
        '/#Action=DeregisterInstancesFromLoadBalancer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeAccountLimits operation.
     * @callback module:api/DefaultApi~gETDescribeAccountLimitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAccountLimitsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the current Elastic Load Balancing resource limits for your AWS account.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\">Limits for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] The marker for the next set of results. (You received this marker from a previous call.)
     * @param {Number} [pageSize] The maximum number of results to return with this call.
     * @param {module:api/DefaultApi~gETDescribeAccountLimitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAccountLimitsOutput}
     */
    gETDescribeAccountLimits(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeAccountLimits");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeAccountLimits");
      }

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'PageSize': opts['pageSize'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeAccountLimitsOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeAccountLimits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeInstanceHealth operation.
     * @callback module:api/DefaultApi~gETDescribeInstanceHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEndPointStateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/Instance>} [instances] The IDs of the instances.
     * @param {module:api/DefaultApi~gETDescribeInstanceHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEndPointStateOutput}
     */
    gETDescribeInstanceHealth(loadBalancerName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETDescribeInstanceHealth");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeInstanceHealth");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeInstanceHealth");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'Instances': this.apiClient.buildCollectionParam(opts['instances'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeEndPointStateOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeInstanceHealth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeLoadBalancerAttributes operation.
     * @callback module:api/DefaultApi~gETDescribeLoadBalancerAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLoadBalancerAttributesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the attributes for the specified load balancer.
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeLoadBalancerAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLoadBalancerAttributesOutput}
     */
    gETDescribeLoadBalancerAttributes(loadBalancerName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETDescribeLoadBalancerAttributes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeLoadBalancerAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeLoadBalancerAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeLoadBalancerAttributesOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeLoadBalancerAttributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeLoadBalancerPolicies operation.
     * @callback module:api/DefaultApi~gETDescribeLoadBalancerPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLoadBalancerPoliciesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the specified policies.</p> <p>If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer. If you specify a policy name associated with your load balancer, the action returns the description of that policy. If you don't specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies. The names of the sample policies have the <code>ELBSample-</code> prefix.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [loadBalancerName] The name of the load balancer.
     * @param {Array.<String>} [policyNames] The names of the policies.
     * @param {module:api/DefaultApi~gETDescribeLoadBalancerPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLoadBalancerPoliciesOutput}
     */
    gETDescribeLoadBalancerPolicies(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeLoadBalancerPolicies");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeLoadBalancerPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': opts['loadBalancerName'],
        'PolicyNames': this.apiClient.buildCollectionParam(opts['policyNames'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeLoadBalancerPoliciesOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeLoadBalancerPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeLoadBalancerPolicyTypes operation.
     * @callback module:api/DefaultApi~gETDescribeLoadBalancerPolicyTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLoadBalancerPolicyTypesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the specified load balancer policy types or all load balancer policy types.</p> <p>The description of each type indicates how it can be used. For example, some policies can be used only with layer 7 listeners, some policies can be used only with layer 4 listeners, and some policies can be used only with your EC2 instances.</p> <p>You can use <a>CreateLoadBalancerPolicy</a> to create a policy configuration for any of these policy types. Then, depending on the policy type, use either <a>SetLoadBalancerPoliciesOfListener</a> or <a>SetLoadBalancerPoliciesForBackendServer</a> to set the policy.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [policyTypeNames] The names of the policy types. If no names are specified, describes all policy types defined by Elastic Load Balancing.
     * @param {module:api/DefaultApi~gETDescribeLoadBalancerPolicyTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLoadBalancerPolicyTypesOutput}
     */
    gETDescribeLoadBalancerPolicyTypes(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeLoadBalancerPolicyTypes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeLoadBalancerPolicyTypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'PolicyTypeNames': this.apiClient.buildCollectionParam(opts['policyTypeNames'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeLoadBalancerPolicyTypesOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeLoadBalancerPolicyTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeLoadBalancers operation.
     * @callback module:api/DefaultApi~gETDescribeLoadBalancersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAccessPointsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [loadBalancerNames] The names of the load balancers.
     * @param {String} [marker] The marker for the next set of results. (You received this marker from a previous call.)
     * @param {Number} [pageSize] The maximum number of results to return with this call (a number from 1 to 400). The default is 400.
     * @param {module:api/DefaultApi~gETDescribeLoadBalancersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAccessPointsOutput}
     */
    gETDescribeLoadBalancers(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeLoadBalancers");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeLoadBalancers");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerNames': this.apiClient.buildCollectionParam(opts['loadBalancerNames'], 'multi'),
        'Marker': opts['marker'],
        'PageSize': opts['pageSize'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeAccessPointsOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeLoadBalancers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeTags operation.
     * @callback module:api/DefaultApi~gETDescribeTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTagsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the tags associated with the specified load balancers.
     * @param {Array.<String>} loadBalancerNames The names of the load balancers.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTagsOutput}
     */
    gETDescribeTags(loadBalancerNames, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerNames' is set
      if (loadBalancerNames === undefined || loadBalancerNames === null) {
        throw new Error("Missing the required parameter 'loadBalancerNames' when calling gETDescribeTags");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeTags");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerNames': this.apiClient.buildCollectionParam(loadBalancerNames, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeTagsOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeTags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDetachLoadBalancerFromSubnets operation.
     * @callback module:api/DefaultApi~gETDetachLoadBalancerFromSubnetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetachLoadBalancerFromSubnetsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the specified subnets from the set of configured subnets for the load balancer.</p> <p>After a subnet is removed, all EC2 instances registered with the load balancer in the removed subnet go into the <code>OutOfService</code> state. Then, the load balancer balances the traffic among the remaining routable subnets.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {Array.<String>} subnets The IDs of the subnets.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDetachLoadBalancerFromSubnetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetachLoadBalancerFromSubnetsOutput}
     */
    gETDetachLoadBalancerFromSubnets(loadBalancerName, subnets, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETDetachLoadBalancerFromSubnets");
      }
      // verify the required parameter 'subnets' is set
      if (subnets === undefined || subnets === null) {
        throw new Error("Missing the required parameter 'subnets' when calling gETDetachLoadBalancerFromSubnets");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDetachLoadBalancerFromSubnets");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDetachLoadBalancerFromSubnets");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'Subnets': this.apiClient.buildCollectionParam(subnets, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DetachLoadBalancerFromSubnetsOutput;
      return this.apiClient.callApi(
        '/#Action=DetachLoadBalancerFromSubnets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDisableAvailabilityZonesForLoadBalancer operation.
     * @callback module:api/DefaultApi~gETDisableAvailabilityZonesForLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveAvailabilityZonesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.</p> <p>For load balancers in a non-default VPC, use <a>DetachLoadBalancerFromSubnets</a>.</p> <p>There must be at least one Availability Zone registered with a load balancer at all times. After an Availability Zone is removed, all instances registered with the load balancer that are in the removed Availability Zone go into the <code>OutOfService</code> state. Then, the load balancer attempts to equally balance the traffic among its remaining Availability Zones.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\">Add or Remove Availability Zones</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {Array.<String>} availabilityZones The Availability Zones.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDisableAvailabilityZonesForLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveAvailabilityZonesOutput}
     */
    gETDisableAvailabilityZonesForLoadBalancer(loadBalancerName, availabilityZones, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETDisableAvailabilityZonesForLoadBalancer");
      }
      // verify the required parameter 'availabilityZones' is set
      if (availabilityZones === undefined || availabilityZones === null) {
        throw new Error("Missing the required parameter 'availabilityZones' when calling gETDisableAvailabilityZonesForLoadBalancer");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDisableAvailabilityZonesForLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDisableAvailabilityZonesForLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'AvailabilityZones': this.apiClient.buildCollectionParam(availabilityZones, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = RemoveAvailabilityZonesOutput;
      return this.apiClient.callApi(
        '/#Action=DisableAvailabilityZonesForLoadBalancer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETEnableAvailabilityZonesForLoadBalancer operation.
     * @callback module:api/DefaultApi~gETEnableAvailabilityZonesForLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddAvailabilityZonesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.</p> <p>For load balancers in a non-default VPC, use <a>AttachLoadBalancerToSubnets</a>.</p> <p>The load balancer evenly distributes requests across all its registered Availability Zones that contain instances. For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\">Add or Remove Availability Zones</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {Array.<String>} availabilityZones The Availability Zones. These must be in the same region as the load balancer.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETEnableAvailabilityZonesForLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddAvailabilityZonesOutput}
     */
    gETEnableAvailabilityZonesForLoadBalancer(loadBalancerName, availabilityZones, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETEnableAvailabilityZonesForLoadBalancer");
      }
      // verify the required parameter 'availabilityZones' is set
      if (availabilityZones === undefined || availabilityZones === null) {
        throw new Error("Missing the required parameter 'availabilityZones' when calling gETEnableAvailabilityZonesForLoadBalancer");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETEnableAvailabilityZonesForLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETEnableAvailabilityZonesForLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'AvailabilityZones': this.apiClient.buildCollectionParam(availabilityZones, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = AddAvailabilityZonesOutput;
      return this.apiClient.callApi(
        '/#Action=EnableAvailabilityZonesForLoadBalancer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyLoadBalancerAttributes operation.
     * @callback module:api/DefaultApi~gETModifyLoadBalancerAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyLoadBalancerAttributesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies the attributes of the specified load balancer.</p> <p>You can modify the load balancer attributes, such as <code>AccessLogs</code>, <code>ConnectionDraining</code>, and <code>CrossZoneLoadBalancing</code> by either enabling or disabling them. Or, you can modify the load balancer attribute <code>ConnectionSettings</code> by specifying an idle connection timeout value for your load balancer.</p> <p>For more information, see the following in the <i>Classic Load Balancers Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html\">Cross-Zone Load Balancing</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html\">Connection Draining</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html\">Access Logs</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html\">Idle Connection Timeout</a> </p> </li> </ul>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {module:model/GETModifyLoadBalancerAttributesLoadBalancerAttributesParameter} loadBalancerAttributes The attributes for the load balancer.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETModifyLoadBalancerAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyLoadBalancerAttributesOutput}
     */
    gETModifyLoadBalancerAttributes(loadBalancerName, loadBalancerAttributes, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETModifyLoadBalancerAttributes");
      }
      // verify the required parameter 'loadBalancerAttributes' is set
      if (loadBalancerAttributes === undefined || loadBalancerAttributes === null) {
        throw new Error("Missing the required parameter 'loadBalancerAttributes' when calling gETModifyLoadBalancerAttributes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyLoadBalancerAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyLoadBalancerAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'LoadBalancerAttributes': loadBalancerAttributes,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyLoadBalancerAttributesOutput;
      return this.apiClient.callApi(
        '/#Action=ModifyLoadBalancerAttributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRegisterInstancesWithLoadBalancer operation.
     * @callback module:api/DefaultApi~gETRegisterInstancesWithLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterEndPointsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds the specified instances to the specified load balancer.</p> <p>The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.</p> <p>Note that <code>RegisterInstanceWithLoadBalancer</code> completes when the request has been registered. Instance registration takes a little time to complete. To check the state of the registered instances, use <a>DescribeLoadBalancers</a> or <a>DescribeInstanceHealth</a>.</p> <p>After the instance is registered, it starts receiving traffic and requests from the load balancer. Any instance that is not in one of the Availability Zones registered for the load balancer is moved to the <code>OutOfService</code> state. If an Availability Zone is added to the load balancer later, any instances registered with the load balancer move to the <code>InService</code> state.</p> <p>To deregister instances from a load balancer, use <a>DeregisterInstancesFromLoadBalancer</a>.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\">Register or De-Register EC2 Instances</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {Array.<module:model/Instance>} instances The IDs of the instances.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETRegisterInstancesWithLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterEndPointsOutput}
     */
    gETRegisterInstancesWithLoadBalancer(loadBalancerName, instances, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETRegisterInstancesWithLoadBalancer");
      }
      // verify the required parameter 'instances' is set
      if (instances === undefined || instances === null) {
        throw new Error("Missing the required parameter 'instances' when calling gETRegisterInstancesWithLoadBalancer");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRegisterInstancesWithLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRegisterInstancesWithLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'Instances': this.apiClient.buildCollectionParam(instances, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = RegisterEndPointsOutput;
      return this.apiClient.callApi(
        '/#Action=RegisterInstancesWithLoadBalancer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRemoveTags operation.
     * @callback module:api/DefaultApi~gETRemoveTagsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more tags from the specified load balancer.
     * @param {Array.<String>} loadBalancerNames The name of the load balancer. You can specify a maximum of one load balancer name.
     * @param {Array.<module:model/TagKeyOnly>} tags The list of tag keys to remove.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETRemoveTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gETRemoveTags(loadBalancerNames, tags, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerNames' is set
      if (loadBalancerNames === undefined || loadBalancerNames === null) {
        throw new Error("Missing the required parameter 'loadBalancerNames' when calling gETRemoveTags");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling gETRemoveTags");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRemoveTags");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRemoveTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerNames': this.apiClient.buildCollectionParam(loadBalancerNames, 'multi'),
        'Tags': this.apiClient.buildCollectionParam(tags, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=RemoveTags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETSetLoadBalancerListenerSSLCertificate operation.
     * @callback module:api/DefaultApi~gETSetLoadBalancerListenerSSLCertificateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sets the certificate that terminates the specified listener's SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.</p> <p>For more information about updating your SSL certificate, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-update-ssl-cert.html\">Replace the SSL Certificate for Your Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {Number} loadBalancerPort The port that uses the specified SSL certificate.
     * @param {String} sSLCertificateId The Amazon Resource Name (ARN) of the SSL certificate.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETSetLoadBalancerListenerSSLCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gETSetLoadBalancerListenerSSLCertificate(loadBalancerName, loadBalancerPort, sSLCertificateId, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETSetLoadBalancerListenerSSLCertificate");
      }
      // verify the required parameter 'loadBalancerPort' is set
      if (loadBalancerPort === undefined || loadBalancerPort === null) {
        throw new Error("Missing the required parameter 'loadBalancerPort' when calling gETSetLoadBalancerListenerSSLCertificate");
      }
      // verify the required parameter 'sSLCertificateId' is set
      if (sSLCertificateId === undefined || sSLCertificateId === null) {
        throw new Error("Missing the required parameter 'sSLCertificateId' when calling gETSetLoadBalancerListenerSSLCertificate");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETSetLoadBalancerListenerSSLCertificate");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETSetLoadBalancerListenerSSLCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'LoadBalancerPort': loadBalancerPort,
        'SSLCertificateId': sSLCertificateId,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=SetLoadBalancerListenerSSLCertificate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETSetLoadBalancerPoliciesForBackendServer operation.
     * @callback module:api/DefaultApi~gETSetLoadBalancerPoliciesForBackendServerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies. At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.</p> <p>Each time you use <code>SetLoadBalancerPoliciesForBackendServer</code> to enable the policies, use the <code>PolicyNames</code> parameter to list the policies that you want to enable.</p> <p>You can use <a>DescribeLoadBalancers</a> or <a>DescribeLoadBalancerPolicies</a> to verify that the policy is associated with the EC2 instance.</p> <p>For more information about enabling back-end instance authentication, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html#configure_backendauth_clt\">Configure Back-end Instance Authentication</a> in the <i>Classic Load Balancers Guide</i>. For more information about Proxy Protocol, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html\">Configure Proxy Protocol Support</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {Number} instancePort The port number associated with the EC2 instance.
     * @param {Array.<String>} policyNames The names of the policies. If the list is empty, then all current polices are removed from the EC2 instance.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETSetLoadBalancerPoliciesForBackendServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gETSetLoadBalancerPoliciesForBackendServer(loadBalancerName, instancePort, policyNames, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETSetLoadBalancerPoliciesForBackendServer");
      }
      // verify the required parameter 'instancePort' is set
      if (instancePort === undefined || instancePort === null) {
        throw new Error("Missing the required parameter 'instancePort' when calling gETSetLoadBalancerPoliciesForBackendServer");
      }
      // verify the required parameter 'policyNames' is set
      if (policyNames === undefined || policyNames === null) {
        throw new Error("Missing the required parameter 'policyNames' when calling gETSetLoadBalancerPoliciesForBackendServer");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETSetLoadBalancerPoliciesForBackendServer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETSetLoadBalancerPoliciesForBackendServer");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'InstancePort': instancePort,
        'PolicyNames': this.apiClient.buildCollectionParam(policyNames, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=SetLoadBalancerPoliciesForBackendServer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETSetLoadBalancerPoliciesOfListener operation.
     * @callback module:api/DefaultApi~gETSetLoadBalancerPoliciesOfListenerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Replaces the current set of policies for the specified load balancer port with the specified set of policies.</p> <p>To enable back-end server authentication, use <a>SetLoadBalancerPoliciesForBackendServer</a>.</p> <p>For more information about setting policies, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-config-update.html\">Update the SSL Negotiation Configuration</a>, <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\">Duration-Based Session Stickiness</a>, and <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\">Application-Controlled Session Stickiness</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {String} loadBalancerName The name of the load balancer.
     * @param {Number} loadBalancerPort The external port of the load balancer.
     * @param {Array.<String>} policyNames The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETSetLoadBalancerPoliciesOfListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gETSetLoadBalancerPoliciesOfListener(loadBalancerName, loadBalancerPort, policyNames, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling gETSetLoadBalancerPoliciesOfListener");
      }
      // verify the required parameter 'loadBalancerPort' is set
      if (loadBalancerPort === undefined || loadBalancerPort === null) {
        throw new Error("Missing the required parameter 'loadBalancerPort' when calling gETSetLoadBalancerPoliciesOfListener");
      }
      // verify the required parameter 'policyNames' is set
      if (policyNames === undefined || policyNames === null) {
        throw new Error("Missing the required parameter 'policyNames' when calling gETSetLoadBalancerPoliciesOfListener");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETSetLoadBalancerPoliciesOfListener");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETSetLoadBalancerPoliciesOfListener");
      }

      let pathParams = {
      };
      let queryParams = {
        'LoadBalancerName': loadBalancerName,
        'LoadBalancerPort': loadBalancerPort,
        'PolicyNames': this.apiClient.buildCollectionParam(policyNames, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=SetLoadBalancerPoliciesOfListener', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTAddTags operation.
     * @callback module:api/DefaultApi~pOSTAddTagsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.</p> <p>Each tag consists of a key and an optional value. If a tag with the same key is already associated with the load balancer, <code>AddTags</code> updates its value.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html\">Tag Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/AddTagsInput} [addTagsInput] 
     * @param {module:api/DefaultApi~pOSTAddTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pOSTAddTags(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['addTagsInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTAddTags");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTAddTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=AddTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTApplySecurityGroupsToLoadBalancer operation.
     * @callback module:api/DefaultApi~pOSTApplySecurityGroupsToLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplySecurityGroupsToLoadBalancerOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-vpc-security-groups\">Security Groups for Load Balancers in a VPC</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ApplySecurityGroupsToLoadBalancerInput} [applySecurityGroupsToLoadBalancerInput] 
     * @param {module:api/DefaultApi~pOSTApplySecurityGroupsToLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplySecurityGroupsToLoadBalancerOutput}
     */
    pOSTApplySecurityGroupsToLoadBalancer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['applySecurityGroupsToLoadBalancerInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTApplySecurityGroupsToLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTApplySecurityGroupsToLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ApplySecurityGroupsToLoadBalancerOutput;
      return this.apiClient.callApi(
        '/#Action=ApplySecurityGroupsToLoadBalancer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTAttachLoadBalancerToSubnets operation.
     * @callback module:api/DefaultApi~pOSTAttachLoadBalancerToSubnetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachLoadBalancerToSubnetsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds one or more subnets to the set of configured subnets for the specified load balancer.</p> <p>The load balancer evenly distributes requests across all registered subnets. For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-manage-subnets.html\">Add or Remove Subnets for Your Load Balancer in a VPC</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/AttachLoadBalancerToSubnetsInput} [attachLoadBalancerToSubnetsInput] 
     * @param {module:api/DefaultApi~pOSTAttachLoadBalancerToSubnetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachLoadBalancerToSubnetsOutput}
     */
    pOSTAttachLoadBalancerToSubnets(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['attachLoadBalancerToSubnetsInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTAttachLoadBalancerToSubnets");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTAttachLoadBalancerToSubnets");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = AttachLoadBalancerToSubnetsOutput;
      return this.apiClient.callApi(
        '/#Action=AttachLoadBalancerToSubnets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTConfigureHealthCheck operation.
     * @callback module:api/DefaultApi~pOSTConfigureHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigureHealthCheckOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Specifies the health check settings to use when evaluating the health state of your EC2 instances.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html\">Configure Health Checks for Your Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ConfigureHealthCheckInput} [configureHealthCheckInput] 
     * @param {module:api/DefaultApi~pOSTConfigureHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigureHealthCheckOutput}
     */
    pOSTConfigureHealthCheck(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['configureHealthCheckInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTConfigureHealthCheck");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTConfigureHealthCheck");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ConfigureHealthCheckOutput;
      return this.apiClient.callApi(
        '/#Action=ConfigureHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateAppCookieStickinessPolicy operation.
     * @callback module:api/DefaultApi~pOSTCreateAppCookieStickinessPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.</p> <p>This policy is similar to the policy created by <a>CreateLBCookieStickinessPolicy</a>, except that the lifetime of the special Elastic Load Balancing cookie, <code>AWSELB</code>, follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer only inserts a new stickiness cookie when the application response includes a new application cookie.</p> <p>If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\">Application-Controlled Session Stickiness</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateAppCookieStickinessPolicyInput} [createAppCookieStickinessPolicyInput] 
     * @param {module:api/DefaultApi~pOSTCreateAppCookieStickinessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pOSTCreateAppCookieStickinessPolicy(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createAppCookieStickinessPolicyInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateAppCookieStickinessPolicy");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateAppCookieStickinessPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=CreateAppCookieStickinessPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateLBCookieStickinessPolicy operation.
     * @callback module:api/DefaultApi~pOSTCreateLBCookieStickinessPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.</p> <p>When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request. If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.</p> <p>A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\">Duration-Based Session Stickiness</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateLBCookieStickinessPolicyInput} [createLBCookieStickinessPolicyInput] 
     * @param {module:api/DefaultApi~pOSTCreateLBCookieStickinessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pOSTCreateLBCookieStickinessPolicy(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createLBCookieStickinessPolicyInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateLBCookieStickinessPolicy");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateLBCookieStickinessPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=CreateLBCookieStickinessPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateLoadBalancer operation.
     * @callback module:api/DefaultApi~pOSTCreateLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAccessPointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a Classic Load Balancer.</p> <p>You can add listeners, security groups, subnets, and tags when you create your load balancer, or you can add them later using <a>CreateLoadBalancerListeners</a>, <a>ApplySecurityGroupsToLoadBalancer</a>, <a>AttachLoadBalancerToSubnets</a>, and <a>AddTags</a>.</p> <p>To describe your current load balancers, see <a>DescribeLoadBalancers</a>. When you are finished with a load balancer, you can delete it using <a>DeleteLoadBalancer</a>.</p> <p>You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\">Limits for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateAccessPointInput} [createAccessPointInput] 
     * @param {module:api/DefaultApi~pOSTCreateLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAccessPointOutput}
     */
    pOSTCreateLoadBalancer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createAccessPointInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateAccessPointOutput;
      return this.apiClient.callApi(
        '/#Action=CreateLoadBalancer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateLoadBalancerListeners operation.
     * @callback module:api/DefaultApi~pOSTCreateLoadBalancerListenersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html\">Listeners for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateLoadBalancerListenerInput} [createLoadBalancerListenerInput] 
     * @param {module:api/DefaultApi~pOSTCreateLoadBalancerListenersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pOSTCreateLoadBalancerListeners(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createLoadBalancerListenerInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateLoadBalancerListeners");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateLoadBalancerListeners");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=CreateLoadBalancerListeners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateLoadBalancerPolicy operation.
     * @callback module:api/DefaultApi~pOSTCreateLoadBalancerPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a policy with the specified attributes for the specified load balancer.</p> <p>Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateLoadBalancerPolicyInput} [createLoadBalancerPolicyInput] 
     * @param {module:api/DefaultApi~pOSTCreateLoadBalancerPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pOSTCreateLoadBalancerPolicy(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createLoadBalancerPolicyInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateLoadBalancerPolicy");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateLoadBalancerPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=CreateLoadBalancerPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteLoadBalancer operation.
     * @callback module:api/DefaultApi~pOSTDeleteLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified load balancer.</p> <p>If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.</p> <p>If the load balancer does not exist or has already been deleted, the call to <code>DeleteLoadBalancer</code> still succeeds.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteAccessPointInput} [deleteAccessPointInput] 
     * @param {module:api/DefaultApi~pOSTDeleteLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pOSTDeleteLoadBalancer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteAccessPointInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=DeleteLoadBalancer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteLoadBalancerListeners operation.
     * @callback module:api/DefaultApi~pOSTDeleteLoadBalancerListenersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified listeners from the specified load balancer.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteLoadBalancerListenerInput} [deleteLoadBalancerListenerInput] 
     * @param {module:api/DefaultApi~pOSTDeleteLoadBalancerListenersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pOSTDeleteLoadBalancerListeners(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteLoadBalancerListenerInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteLoadBalancerListeners");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteLoadBalancerListeners");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=DeleteLoadBalancerListeners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteLoadBalancerPolicy operation.
     * @callback module:api/DefaultApi~pOSTDeleteLoadBalancerPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteLoadBalancerPolicyInput} [deleteLoadBalancerPolicyInput] 
     * @param {module:api/DefaultApi~pOSTDeleteLoadBalancerPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pOSTDeleteLoadBalancerPolicy(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteLoadBalancerPolicyInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteLoadBalancerPolicy");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteLoadBalancerPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=DeleteLoadBalancerPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeregisterInstancesFromLoadBalancer operation.
     * @callback module:api/DefaultApi~pOSTDeregisterInstancesFromLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeregisterEndPointsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.</p> <p>You can use <a>DescribeLoadBalancers</a> to verify that the instance is deregistered from the load balancer.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\">Register or De-Register EC2 Instances</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeregisterEndPointsInput} [deregisterEndPointsInput] 
     * @param {module:api/DefaultApi~pOSTDeregisterInstancesFromLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeregisterEndPointsOutput}
     */
    pOSTDeregisterInstancesFromLoadBalancer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deregisterEndPointsInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeregisterInstancesFromLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeregisterInstancesFromLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeregisterEndPointsOutput;
      return this.apiClient.callApi(
        '/#Action=DeregisterInstancesFromLoadBalancer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeAccountLimits operation.
     * @callback module:api/DefaultApi~pOSTDescribeAccountLimitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAccountLimitsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the current Elastic Load Balancing resource limits for your AWS account.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html\">Limits for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeAccountLimitsInput} [describeAccountLimitsInput] 
     * @param {module:api/DefaultApi~pOSTDescribeAccountLimitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAccountLimitsOutput}
     */
    pOSTDescribeAccountLimits(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeAccountLimitsInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeAccountLimits");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeAccountLimits");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeAccountLimitsOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeAccountLimits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeInstanceHealth operation.
     * @callback module:api/DefaultApi~pOSTDescribeInstanceHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEndPointStateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeEndPointStateInput} [describeEndPointStateInput] 
     * @param {module:api/DefaultApi~pOSTDescribeInstanceHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEndPointStateOutput}
     */
    pOSTDescribeInstanceHealth(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeEndPointStateInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeInstanceHealth");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeInstanceHealth");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeEndPointStateOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeInstanceHealth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeLoadBalancerAttributes operation.
     * @callback module:api/DefaultApi~pOSTDescribeLoadBalancerAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLoadBalancerAttributesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the attributes for the specified load balancer.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeLoadBalancerAttributesInput} [describeLoadBalancerAttributesInput] 
     * @param {module:api/DefaultApi~pOSTDescribeLoadBalancerAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLoadBalancerAttributesOutput}
     */
    pOSTDescribeLoadBalancerAttributes(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeLoadBalancerAttributesInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeLoadBalancerAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeLoadBalancerAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeLoadBalancerAttributesOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeLoadBalancerAttributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeLoadBalancerPolicies operation.
     * @callback module:api/DefaultApi~pOSTDescribeLoadBalancerPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLoadBalancerPoliciesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the specified policies.</p> <p>If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer. If you specify a policy name associated with your load balancer, the action returns the description of that policy. If you don't specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies. The names of the sample policies have the <code>ELBSample-</code> prefix.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeLoadBalancerPoliciesInput} [describeLoadBalancerPoliciesInput] 
     * @param {module:api/DefaultApi~pOSTDescribeLoadBalancerPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLoadBalancerPoliciesOutput}
     */
    pOSTDescribeLoadBalancerPolicies(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeLoadBalancerPoliciesInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeLoadBalancerPolicies");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeLoadBalancerPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeLoadBalancerPoliciesOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeLoadBalancerPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeLoadBalancerPolicyTypes operation.
     * @callback module:api/DefaultApi~pOSTDescribeLoadBalancerPolicyTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLoadBalancerPolicyTypesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the specified load balancer policy types or all load balancer policy types.</p> <p>The description of each type indicates how it can be used. For example, some policies can be used only with layer 7 listeners, some policies can be used only with layer 4 listeners, and some policies can be used only with your EC2 instances.</p> <p>You can use <a>CreateLoadBalancerPolicy</a> to create a policy configuration for any of these policy types. Then, depending on the policy type, use either <a>SetLoadBalancerPoliciesOfListener</a> or <a>SetLoadBalancerPoliciesForBackendServer</a> to set the policy.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeLoadBalancerPolicyTypesInput} [describeLoadBalancerPolicyTypesInput] 
     * @param {module:api/DefaultApi~pOSTDescribeLoadBalancerPolicyTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLoadBalancerPolicyTypesOutput}
     */
    pOSTDescribeLoadBalancerPolicyTypes(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeLoadBalancerPolicyTypesInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeLoadBalancerPolicyTypes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeLoadBalancerPolicyTypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeLoadBalancerPolicyTypesOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeLoadBalancerPolicyTypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeLoadBalancers operation.
     * @callback module:api/DefaultApi~pOSTDescribeLoadBalancersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAccessPointsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeAccessPointsInput} [describeAccessPointsInput] 
     * @param {module:api/DefaultApi~pOSTDescribeLoadBalancersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAccessPointsOutput}
     */
    pOSTDescribeLoadBalancers(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeAccessPointsInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeLoadBalancers");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeLoadBalancers");
      }

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeAccessPointsOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeLoadBalancers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeTags operation.
     * @callback module:api/DefaultApi~pOSTDescribeTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTagsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the tags associated with the specified load balancers.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeTagsInput} [describeTagsInput] 
     * @param {module:api/DefaultApi~pOSTDescribeTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTagsOutput}
     */
    pOSTDescribeTags(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeTagsInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeTags");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeTagsOutput;
      return this.apiClient.callApi(
        '/#Action=DescribeTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDetachLoadBalancerFromSubnets operation.
     * @callback module:api/DefaultApi~pOSTDetachLoadBalancerFromSubnetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetachLoadBalancerFromSubnetsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the specified subnets from the set of configured subnets for the load balancer.</p> <p>After a subnet is removed, all EC2 instances registered with the load balancer in the removed subnet go into the <code>OutOfService</code> state. Then, the load balancer balances the traffic among the remaining routable subnets.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DetachLoadBalancerFromSubnetsInput} [detachLoadBalancerFromSubnetsInput] 
     * @param {module:api/DefaultApi~pOSTDetachLoadBalancerFromSubnetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetachLoadBalancerFromSubnetsOutput}
     */
    pOSTDetachLoadBalancerFromSubnets(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['detachLoadBalancerFromSubnetsInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDetachLoadBalancerFromSubnets");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDetachLoadBalancerFromSubnets");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DetachLoadBalancerFromSubnetsOutput;
      return this.apiClient.callApi(
        '/#Action=DetachLoadBalancerFromSubnets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDisableAvailabilityZonesForLoadBalancer operation.
     * @callback module:api/DefaultApi~pOSTDisableAvailabilityZonesForLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveAvailabilityZonesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.</p> <p>For load balancers in a non-default VPC, use <a>DetachLoadBalancerFromSubnets</a>.</p> <p>There must be at least one Availability Zone registered with a load balancer at all times. After an Availability Zone is removed, all instances registered with the load balancer that are in the removed Availability Zone go into the <code>OutOfService</code> state. Then, the load balancer attempts to equally balance the traffic among its remaining Availability Zones.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\">Add or Remove Availability Zones</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RemoveAvailabilityZonesInput} [removeAvailabilityZonesInput] 
     * @param {module:api/DefaultApi~pOSTDisableAvailabilityZonesForLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveAvailabilityZonesOutput}
     */
    pOSTDisableAvailabilityZonesForLoadBalancer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeAvailabilityZonesInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDisableAvailabilityZonesForLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDisableAvailabilityZonesForLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = RemoveAvailabilityZonesOutput;
      return this.apiClient.callApi(
        '/#Action=DisableAvailabilityZonesForLoadBalancer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTEnableAvailabilityZonesForLoadBalancer operation.
     * @callback module:api/DefaultApi~pOSTEnableAvailabilityZonesForLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddAvailabilityZonesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.</p> <p>For load balancers in a non-default VPC, use <a>AttachLoadBalancerToSubnets</a>.</p> <p>The load balancer evenly distributes requests across all its registered Availability Zones that contain instances. For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html\">Add or Remove Availability Zones</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/AddAvailabilityZonesInput} [addAvailabilityZonesInput] 
     * @param {module:api/DefaultApi~pOSTEnableAvailabilityZonesForLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddAvailabilityZonesOutput}
     */
    pOSTEnableAvailabilityZonesForLoadBalancer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['addAvailabilityZonesInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTEnableAvailabilityZonesForLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTEnableAvailabilityZonesForLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = AddAvailabilityZonesOutput;
      return this.apiClient.callApi(
        '/#Action=EnableAvailabilityZonesForLoadBalancer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyLoadBalancerAttributes operation.
     * @callback module:api/DefaultApi~pOSTModifyLoadBalancerAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyLoadBalancerAttributesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies the attributes of the specified load balancer.</p> <p>You can modify the load balancer attributes, such as <code>AccessLogs</code>, <code>ConnectionDraining</code>, and <code>CrossZoneLoadBalancing</code> by either enabling or disabling them. Or, you can modify the load balancer attribute <code>ConnectionSettings</code> by specifying an idle connection timeout value for your load balancer.</p> <p>For more information, see the following in the <i>Classic Load Balancers Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html\">Cross-Zone Load Balancing</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html\">Connection Draining</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html\">Access Logs</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html\">Idle Connection Timeout</a> </p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyLoadBalancerAttributesInput} [modifyLoadBalancerAttributesInput] 
     * @param {module:api/DefaultApi~pOSTModifyLoadBalancerAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyLoadBalancerAttributesOutput}
     */
    pOSTModifyLoadBalancerAttributes(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyLoadBalancerAttributesInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyLoadBalancerAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyLoadBalancerAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyLoadBalancerAttributesOutput;
      return this.apiClient.callApi(
        '/#Action=ModifyLoadBalancerAttributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRegisterInstancesWithLoadBalancer operation.
     * @callback module:api/DefaultApi~pOSTRegisterInstancesWithLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterEndPointsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds the specified instances to the specified load balancer.</p> <p>The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.</p> <p>Note that <code>RegisterInstanceWithLoadBalancer</code> completes when the request has been registered. Instance registration takes a little time to complete. To check the state of the registered instances, use <a>DescribeLoadBalancers</a> or <a>DescribeInstanceHealth</a>.</p> <p>After the instance is registered, it starts receiving traffic and requests from the load balancer. Any instance that is not in one of the Availability Zones registered for the load balancer is moved to the <code>OutOfService</code> state. If an Availability Zone is added to the load balancer later, any instances registered with the load balancer move to the <code>InService</code> state.</p> <p>To deregister instances from a load balancer, use <a>DeregisterInstancesFromLoadBalancer</a>.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html\">Register or De-Register EC2 Instances</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RegisterEndPointsInput} [registerEndPointsInput] 
     * @param {module:api/DefaultApi~pOSTRegisterInstancesWithLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterEndPointsOutput}
     */
    pOSTRegisterInstancesWithLoadBalancer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['registerEndPointsInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRegisterInstancesWithLoadBalancer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRegisterInstancesWithLoadBalancer");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = RegisterEndPointsOutput;
      return this.apiClient.callApi(
        '/#Action=RegisterInstancesWithLoadBalancer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRemoveTags operation.
     * @callback module:api/DefaultApi~pOSTRemoveTagsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more tags from the specified load balancer.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RemoveTagsInput} [removeTagsInput] 
     * @param {module:api/DefaultApi~pOSTRemoveTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pOSTRemoveTags(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeTagsInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRemoveTags");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRemoveTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=RemoveTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTSetLoadBalancerListenerSSLCertificate operation.
     * @callback module:api/DefaultApi~pOSTSetLoadBalancerListenerSSLCertificateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sets the certificate that terminates the specified listener's SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.</p> <p>For more information about updating your SSL certificate, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-update-ssl-cert.html\">Replace the SSL Certificate for Your Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/SetLoadBalancerListenerSSLCertificateInput} [setLoadBalancerListenerSSLCertificateInput] 
     * @param {module:api/DefaultApi~pOSTSetLoadBalancerListenerSSLCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pOSTSetLoadBalancerListenerSSLCertificate(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['setLoadBalancerListenerSSLCertificateInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTSetLoadBalancerListenerSSLCertificate");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTSetLoadBalancerListenerSSLCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=SetLoadBalancerListenerSSLCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTSetLoadBalancerPoliciesForBackendServer operation.
     * @callback module:api/DefaultApi~pOSTSetLoadBalancerPoliciesForBackendServerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies. At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.</p> <p>Each time you use <code>SetLoadBalancerPoliciesForBackendServer</code> to enable the policies, use the <code>PolicyNames</code> parameter to list the policies that you want to enable.</p> <p>You can use <a>DescribeLoadBalancers</a> or <a>DescribeLoadBalancerPolicies</a> to verify that the policy is associated with the EC2 instance.</p> <p>For more information about enabling back-end instance authentication, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html#configure_backendauth_clt\">Configure Back-end Instance Authentication</a> in the <i>Classic Load Balancers Guide</i>. For more information about Proxy Protocol, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html\">Configure Proxy Protocol Support</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/SetLoadBalancerPoliciesForBackendServerInput} [setLoadBalancerPoliciesForBackendServerInput] 
     * @param {module:api/DefaultApi~pOSTSetLoadBalancerPoliciesForBackendServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pOSTSetLoadBalancerPoliciesForBackendServer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['setLoadBalancerPoliciesForBackendServerInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTSetLoadBalancerPoliciesForBackendServer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTSetLoadBalancerPoliciesForBackendServer");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=SetLoadBalancerPoliciesForBackendServer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTSetLoadBalancerPoliciesOfListener operation.
     * @callback module:api/DefaultApi~pOSTSetLoadBalancerPoliciesOfListenerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Replaces the current set of policies for the specified load balancer port with the specified set of policies.</p> <p>To enable back-end server authentication, use <a>SetLoadBalancerPoliciesForBackendServer</a>.</p> <p>For more information about setting policies, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-config-update.html\">Update the SSL Negotiation Configuration</a>, <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration\">Duration-Based Session Stickiness</a>, and <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application\">Application-Controlled Session Stickiness</a> in the <i>Classic Load Balancers Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/SetLoadBalancerPoliciesOfListenerInput} [setLoadBalancerPoliciesOfListenerInput] 
     * @param {module:api/DefaultApi~pOSTSetLoadBalancerPoliciesOfListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pOSTSetLoadBalancerPoliciesOfListener(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['setLoadBalancerPoliciesOfListenerInput'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTSetLoadBalancerPoliciesOfListener");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTSetLoadBalancerPoliciesOfListener");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#Action=SetLoadBalancerPoliciesOfListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
