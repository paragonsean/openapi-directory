# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Listener(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, protocol: str=None, load_balancer_port: int=None, instance_protocol: str=None, instance_port: int=None, ssl_certificate_id: str=None):
        """Listener - a model defined in OpenAPI

        :param protocol: The protocol of this Listener.
        :param load_balancer_port: The load_balancer_port of this Listener.
        :param instance_protocol: The instance_protocol of this Listener.
        :param instance_port: The instance_port of this Listener.
        :param ssl_certificate_id: The ssl_certificate_id of this Listener.
        """
        self.openapi_types = {
            'protocol': str,
            'load_balancer_port': int,
            'instance_protocol': str,
            'instance_port': int,
            'ssl_certificate_id': str
        }

        self.attribute_map = {
            'protocol': 'Protocol',
            'load_balancer_port': 'LoadBalancerPort',
            'instance_protocol': 'InstanceProtocol',
            'instance_port': 'InstancePort',
            'ssl_certificate_id': 'SSLCertificateId'
        }

        self._protocol = protocol
        self._load_balancer_port = load_balancer_port
        self._instance_protocol = instance_protocol
        self._instance_port = instance_port
        self._ssl_certificate_id = ssl_certificate_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Listener':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Listener of this Listener.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def protocol(self):
        """Gets the protocol of this Listener.


        :return: The protocol of this Listener.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Listener.


        :param protocol: The protocol of this Listener.
        :type protocol: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol

    @property
    def load_balancer_port(self):
        """Gets the load_balancer_port of this Listener.


        :return: The load_balancer_port of this Listener.
        :rtype: int
        """
        return self._load_balancer_port

    @load_balancer_port.setter
    def load_balancer_port(self, load_balancer_port):
        """Sets the load_balancer_port of this Listener.


        :param load_balancer_port: The load_balancer_port of this Listener.
        :type load_balancer_port: int
        """
        if load_balancer_port is None:
            raise ValueError("Invalid value for `load_balancer_port`, must not be `None`")

        self._load_balancer_port = load_balancer_port

    @property
    def instance_protocol(self):
        """Gets the instance_protocol of this Listener.


        :return: The instance_protocol of this Listener.
        :rtype: str
        """
        return self._instance_protocol

    @instance_protocol.setter
    def instance_protocol(self, instance_protocol):
        """Sets the instance_protocol of this Listener.


        :param instance_protocol: The instance_protocol of this Listener.
        :type instance_protocol: str
        """

        self._instance_protocol = instance_protocol

    @property
    def instance_port(self):
        """Gets the instance_port of this Listener.


        :return: The instance_port of this Listener.
        :rtype: int
        """
        return self._instance_port

    @instance_port.setter
    def instance_port(self, instance_port):
        """Sets the instance_port of this Listener.


        :param instance_port: The instance_port of this Listener.
        :type instance_port: int
        """
        if instance_port is None:
            raise ValueError("Invalid value for `instance_port`, must not be `None`")

        self._instance_port = instance_port

    @property
    def ssl_certificate_id(self):
        """Gets the ssl_certificate_id of this Listener.


        :return: The ssl_certificate_id of this Listener.
        :rtype: str
        """
        return self._ssl_certificate_id

    @ssl_certificate_id.setter
    def ssl_certificate_id(self, ssl_certificate_id):
        """Sets the ssl_certificate_id of this Listener.


        :param ssl_certificate_id: The ssl_certificate_id of this Listener.
        :type ssl_certificate_id: str
        """

        self._ssl_certificate_id = ssl_certificate_id
