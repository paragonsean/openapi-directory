# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisterEndPointsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, load_balancer_name: str=None, instances: List=None):
        """RegisterEndPointsInput - a model defined in OpenAPI

        :param load_balancer_name: The load_balancer_name of this RegisterEndPointsInput.
        :param instances: The instances of this RegisterEndPointsInput.
        """
        self.openapi_types = {
            'load_balancer_name': str,
            'instances': List
        }

        self.attribute_map = {
            'load_balancer_name': 'LoadBalancerName',
            'instances': 'Instances'
        }

        self._load_balancer_name = load_balancer_name
        self._instances = instances

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterEndPointsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterEndPointsInput of this RegisterEndPointsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def load_balancer_name(self):
        """Gets the load_balancer_name of this RegisterEndPointsInput.


        :return: The load_balancer_name of this RegisterEndPointsInput.
        :rtype: str
        """
        return self._load_balancer_name

    @load_balancer_name.setter
    def load_balancer_name(self, load_balancer_name):
        """Sets the load_balancer_name of this RegisterEndPointsInput.


        :param load_balancer_name: The load_balancer_name of this RegisterEndPointsInput.
        :type load_balancer_name: str
        """
        if load_balancer_name is None:
            raise ValueError("Invalid value for `load_balancer_name`, must not be `None`")

        self._load_balancer_name = load_balancer_name

    @property
    def instances(self):
        """Gets the instances of this RegisterEndPointsInput.


        :return: The instances of this RegisterEndPointsInput.
        :rtype: List
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this RegisterEndPointsInput.


        :param instances: The instances of this RegisterEndPointsInput.
        :type instances: List
        """
        if instances is None:
            raise ValueError("Invalid value for `instances`, must not be `None`")

        self._instances = instances
