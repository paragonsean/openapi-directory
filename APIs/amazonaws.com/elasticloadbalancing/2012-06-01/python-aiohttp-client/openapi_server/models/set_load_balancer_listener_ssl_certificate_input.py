# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetLoadBalancerListenerSSLCertificateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, load_balancer_name: str=None, load_balancer_port: int=None, ssl_certificate_id: str=None):
        """SetLoadBalancerListenerSSLCertificateInput - a model defined in OpenAPI

        :param load_balancer_name: The load_balancer_name of this SetLoadBalancerListenerSSLCertificateInput.
        :param load_balancer_port: The load_balancer_port of this SetLoadBalancerListenerSSLCertificateInput.
        :param ssl_certificate_id: The ssl_certificate_id of this SetLoadBalancerListenerSSLCertificateInput.
        """
        self.openapi_types = {
            'load_balancer_name': str,
            'load_balancer_port': int,
            'ssl_certificate_id': str
        }

        self.attribute_map = {
            'load_balancer_name': 'LoadBalancerName',
            'load_balancer_port': 'LoadBalancerPort',
            'ssl_certificate_id': 'SSLCertificateId'
        }

        self._load_balancer_name = load_balancer_name
        self._load_balancer_port = load_balancer_port
        self._ssl_certificate_id = ssl_certificate_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetLoadBalancerListenerSSLCertificateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetLoadBalancerListenerSSLCertificateInput of this SetLoadBalancerListenerSSLCertificateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def load_balancer_name(self):
        """Gets the load_balancer_name of this SetLoadBalancerListenerSSLCertificateInput.


        :return: The load_balancer_name of this SetLoadBalancerListenerSSLCertificateInput.
        :rtype: str
        """
        return self._load_balancer_name

    @load_balancer_name.setter
    def load_balancer_name(self, load_balancer_name):
        """Sets the load_balancer_name of this SetLoadBalancerListenerSSLCertificateInput.


        :param load_balancer_name: The load_balancer_name of this SetLoadBalancerListenerSSLCertificateInput.
        :type load_balancer_name: str
        """
        if load_balancer_name is None:
            raise ValueError("Invalid value for `load_balancer_name`, must not be `None`")

        self._load_balancer_name = load_balancer_name

    @property
    def load_balancer_port(self):
        """Gets the load_balancer_port of this SetLoadBalancerListenerSSLCertificateInput.


        :return: The load_balancer_port of this SetLoadBalancerListenerSSLCertificateInput.
        :rtype: int
        """
        return self._load_balancer_port

    @load_balancer_port.setter
    def load_balancer_port(self, load_balancer_port):
        """Sets the load_balancer_port of this SetLoadBalancerListenerSSLCertificateInput.


        :param load_balancer_port: The load_balancer_port of this SetLoadBalancerListenerSSLCertificateInput.
        :type load_balancer_port: int
        """
        if load_balancer_port is None:
            raise ValueError("Invalid value for `load_balancer_port`, must not be `None`")

        self._load_balancer_port = load_balancer_port

    @property
    def ssl_certificate_id(self):
        """Gets the ssl_certificate_id of this SetLoadBalancerListenerSSLCertificateInput.


        :return: The ssl_certificate_id of this SetLoadBalancerListenerSSLCertificateInput.
        :rtype: str
        """
        return self._ssl_certificate_id

    @ssl_certificate_id.setter
    def ssl_certificate_id(self, ssl_certificate_id):
        """Sets the ssl_certificate_id of this SetLoadBalancerListenerSSLCertificateInput.


        :param ssl_certificate_id: The ssl_certificate_id of this SetLoadBalancerListenerSSLCertificateInput.
        :type ssl_certificate_id: str
        """
        if ssl_certificate_id is None:
            raise ValueError("Invalid value for `ssl_certificate_id`, must not be `None`")

        self._ssl_certificate_id = ssl_certificate_id
