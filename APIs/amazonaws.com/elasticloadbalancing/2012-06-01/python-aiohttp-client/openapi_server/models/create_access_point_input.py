# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAccessPointInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, load_balancer_name: str=None, listeners: List=None, availability_zones: List=None, subnets: List=None, security_groups: List=None, scheme: str=None, tags: List=None):
        """CreateAccessPointInput - a model defined in OpenAPI

        :param load_balancer_name: The load_balancer_name of this CreateAccessPointInput.
        :param listeners: The listeners of this CreateAccessPointInput.
        :param availability_zones: The availability_zones of this CreateAccessPointInput.
        :param subnets: The subnets of this CreateAccessPointInput.
        :param security_groups: The security_groups of this CreateAccessPointInput.
        :param scheme: The scheme of this CreateAccessPointInput.
        :param tags: The tags of this CreateAccessPointInput.
        """
        self.openapi_types = {
            'load_balancer_name': str,
            'listeners': List,
            'availability_zones': List,
            'subnets': List,
            'security_groups': List,
            'scheme': str,
            'tags': List
        }

        self.attribute_map = {
            'load_balancer_name': 'LoadBalancerName',
            'listeners': 'Listeners',
            'availability_zones': 'AvailabilityZones',
            'subnets': 'Subnets',
            'security_groups': 'SecurityGroups',
            'scheme': 'Scheme',
            'tags': 'Tags'
        }

        self._load_balancer_name = load_balancer_name
        self._listeners = listeners
        self._availability_zones = availability_zones
        self._subnets = subnets
        self._security_groups = security_groups
        self._scheme = scheme
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAccessPointInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAccessPointInput of this CreateAccessPointInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def load_balancer_name(self):
        """Gets the load_balancer_name of this CreateAccessPointInput.


        :return: The load_balancer_name of this CreateAccessPointInput.
        :rtype: str
        """
        return self._load_balancer_name

    @load_balancer_name.setter
    def load_balancer_name(self, load_balancer_name):
        """Sets the load_balancer_name of this CreateAccessPointInput.


        :param load_balancer_name: The load_balancer_name of this CreateAccessPointInput.
        :type load_balancer_name: str
        """
        if load_balancer_name is None:
            raise ValueError("Invalid value for `load_balancer_name`, must not be `None`")

        self._load_balancer_name = load_balancer_name

    @property
    def listeners(self):
        """Gets the listeners of this CreateAccessPointInput.


        :return: The listeners of this CreateAccessPointInput.
        :rtype: List
        """
        return self._listeners

    @listeners.setter
    def listeners(self, listeners):
        """Sets the listeners of this CreateAccessPointInput.


        :param listeners: The listeners of this CreateAccessPointInput.
        :type listeners: List
        """
        if listeners is None:
            raise ValueError("Invalid value for `listeners`, must not be `None`")

        self._listeners = listeners

    @property
    def availability_zones(self):
        """Gets the availability_zones of this CreateAccessPointInput.


        :return: The availability_zones of this CreateAccessPointInput.
        :rtype: List
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this CreateAccessPointInput.


        :param availability_zones: The availability_zones of this CreateAccessPointInput.
        :type availability_zones: List
        """

        self._availability_zones = availability_zones

    @property
    def subnets(self):
        """Gets the subnets of this CreateAccessPointInput.


        :return: The subnets of this CreateAccessPointInput.
        :rtype: List
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this CreateAccessPointInput.


        :param subnets: The subnets of this CreateAccessPointInput.
        :type subnets: List
        """

        self._subnets = subnets

    @property
    def security_groups(self):
        """Gets the security_groups of this CreateAccessPointInput.


        :return: The security_groups of this CreateAccessPointInput.
        :rtype: List
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this CreateAccessPointInput.


        :param security_groups: The security_groups of this CreateAccessPointInput.
        :type security_groups: List
        """

        self._security_groups = security_groups

    @property
    def scheme(self):
        """Gets the scheme of this CreateAccessPointInput.


        :return: The scheme of this CreateAccessPointInput.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this CreateAccessPointInput.


        :param scheme: The scheme of this CreateAccessPointInput.
        :type scheme: str
        """

        self._scheme = scheme

    @property
    def tags(self):
        """Gets the tags of this CreateAccessPointInput.


        :return: The tags of this CreateAccessPointInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAccessPointInput.


        :param tags: The tags of this CreateAccessPointInput.
        :type tags: List
        """

        self._tags = tags
