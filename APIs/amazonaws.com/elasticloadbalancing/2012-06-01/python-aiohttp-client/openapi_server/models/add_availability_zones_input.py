# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddAvailabilityZonesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, load_balancer_name: str=None, availability_zones: List=None):
        """AddAvailabilityZonesInput - a model defined in OpenAPI

        :param load_balancer_name: The load_balancer_name of this AddAvailabilityZonesInput.
        :param availability_zones: The availability_zones of this AddAvailabilityZonesInput.
        """
        self.openapi_types = {
            'load_balancer_name': str,
            'availability_zones': List
        }

        self.attribute_map = {
            'load_balancer_name': 'LoadBalancerName',
            'availability_zones': 'AvailabilityZones'
        }

        self._load_balancer_name = load_balancer_name
        self._availability_zones = availability_zones

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddAvailabilityZonesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddAvailabilityZonesInput of this AddAvailabilityZonesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def load_balancer_name(self):
        """Gets the load_balancer_name of this AddAvailabilityZonesInput.


        :return: The load_balancer_name of this AddAvailabilityZonesInput.
        :rtype: str
        """
        return self._load_balancer_name

    @load_balancer_name.setter
    def load_balancer_name(self, load_balancer_name):
        """Sets the load_balancer_name of this AddAvailabilityZonesInput.


        :param load_balancer_name: The load_balancer_name of this AddAvailabilityZonesInput.
        :type load_balancer_name: str
        """
        if load_balancer_name is None:
            raise ValueError("Invalid value for `load_balancer_name`, must not be `None`")

        self._load_balancer_name = load_balancer_name

    @property
    def availability_zones(self):
        """Gets the availability_zones of this AddAvailabilityZonesInput.


        :return: The availability_zones of this AddAvailabilityZonesInput.
        :rtype: List
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this AddAvailabilityZonesInput.


        :param availability_zones: The availability_zones of this AddAvailabilityZonesInput.
        :type availability_zones: List
        """
        if availability_zones is None:
            raise ValueError("Invalid value for `availability_zones`, must not be `None`")

        self._availability_zones = availability_zones
