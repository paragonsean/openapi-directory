/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigureHealthCheckOutput_HealthCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigureHealthCheckOutput_HealthCheck::OAIConfigureHealthCheckOutput_HealthCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigureHealthCheckOutput_HealthCheck::OAIConfigureHealthCheckOutput_HealthCheck() {
    this->initializeModel();
}

OAIConfigureHealthCheckOutput_HealthCheck::~OAIConfigureHealthCheckOutput_HealthCheck() {}

void OAIConfigureHealthCheckOutput_HealthCheck::initializeModel() {

    m_target_isSet = false;
    m_target_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_unhealthy_threshold_isSet = false;
    m_unhealthy_threshold_isValid = false;

    m_healthy_threshold_isSet = false;
    m_healthy_threshold_isValid = false;
}

void OAIConfigureHealthCheckOutput_HealthCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigureHealthCheckOutput_HealthCheck::fromJsonObject(QJsonObject json) {

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("Interval")]);
    m_interval_isSet = !json[QString("Interval")].isNull() && m_interval_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("Timeout")]);
    m_timeout_isSet = !json[QString("Timeout")].isNull() && m_timeout_isValid;

    m_unhealthy_threshold_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_threshold, json[QString("UnhealthyThreshold")]);
    m_unhealthy_threshold_isSet = !json[QString("UnhealthyThreshold")].isNull() && m_unhealthy_threshold_isValid;

    m_healthy_threshold_isValid = ::OpenAPI::fromJsonValue(m_healthy_threshold, json[QString("HealthyThreshold")]);
    m_healthy_threshold_isSet = !json[QString("HealthyThreshold")].isNull() && m_healthy_threshold_isValid;
}

QString OAIConfigureHealthCheckOutput_HealthCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigureHealthCheckOutput_HealthCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_target_isSet) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_interval_isSet) {
        obj.insert(QString("Interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("Timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_unhealthy_threshold_isSet) {
        obj.insert(QString("UnhealthyThreshold"), ::OpenAPI::toJsonValue(m_unhealthy_threshold));
    }
    if (m_healthy_threshold_isSet) {
        obj.insert(QString("HealthyThreshold"), ::OpenAPI::toJsonValue(m_healthy_threshold));
    }
    return obj;
}

QString OAIConfigureHealthCheckOutput_HealthCheck::getTarget() const {
    return m_target;
}
void OAIConfigureHealthCheckOutput_HealthCheck::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIConfigureHealthCheckOutput_HealthCheck::is_target_Set() const{
    return m_target_isSet;
}

bool OAIConfigureHealthCheckOutput_HealthCheck::is_target_Valid() const{
    return m_target_isValid;
}

qint32 OAIConfigureHealthCheckOutput_HealthCheck::getInterval() const {
    return m_interval;
}
void OAIConfigureHealthCheckOutput_HealthCheck::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIConfigureHealthCheckOutput_HealthCheck::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIConfigureHealthCheckOutput_HealthCheck::is_interval_Valid() const{
    return m_interval_isValid;
}

qint32 OAIConfigureHealthCheckOutput_HealthCheck::getTimeout() const {
    return m_timeout;
}
void OAIConfigureHealthCheckOutput_HealthCheck::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIConfigureHealthCheckOutput_HealthCheck::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIConfigureHealthCheckOutput_HealthCheck::is_timeout_Valid() const{
    return m_timeout_isValid;
}

qint32 OAIConfigureHealthCheckOutput_HealthCheck::getUnhealthyThreshold() const {
    return m_unhealthy_threshold;
}
void OAIConfigureHealthCheckOutput_HealthCheck::setUnhealthyThreshold(const qint32 &unhealthy_threshold) {
    m_unhealthy_threshold = unhealthy_threshold;
    m_unhealthy_threshold_isSet = true;
}

bool OAIConfigureHealthCheckOutput_HealthCheck::is_unhealthy_threshold_Set() const{
    return m_unhealthy_threshold_isSet;
}

bool OAIConfigureHealthCheckOutput_HealthCheck::is_unhealthy_threshold_Valid() const{
    return m_unhealthy_threshold_isValid;
}

qint32 OAIConfigureHealthCheckOutput_HealthCheck::getHealthyThreshold() const {
    return m_healthy_threshold;
}
void OAIConfigureHealthCheckOutput_HealthCheck::setHealthyThreshold(const qint32 &healthy_threshold) {
    m_healthy_threshold = healthy_threshold;
    m_healthy_threshold_isSet = true;
}

bool OAIConfigureHealthCheckOutput_HealthCheck::is_healthy_threshold_Set() const{
    return m_healthy_threshold_isSet;
}

bool OAIConfigureHealthCheckOutput_HealthCheck::is_healthy_threshold_Valid() const{
    return m_healthy_threshold_isValid;
}

bool OAIConfigureHealthCheckOutput_HealthCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_healthy_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigureHealthCheckOutput_HealthCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_isValid && m_interval_isValid && m_timeout_isValid && m_unhealthy_threshold_isValid && m_healthy_threshold_isValid && true;
}

} // namespace OpenAPI
