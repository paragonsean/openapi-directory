/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadBalancerDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadBalancerDescription::OAILoadBalancerDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadBalancerDescription::OAILoadBalancerDescription() {
    this->initializeModel();
}

OAILoadBalancerDescription::~OAILoadBalancerDescription() {}

void OAILoadBalancerDescription::initializeModel() {

    m_load_balancer_name_isSet = false;
    m_load_balancer_name_isValid = false;

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_canonical_hosted_zone_name_isSet = false;
    m_canonical_hosted_zone_name_isValid = false;

    m_canonical_hosted_zone_name_id_isSet = false;
    m_canonical_hosted_zone_name_id_isValid = false;

    m_listener_descriptions_isSet = false;
    m_listener_descriptions_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_backend_server_descriptions_isSet = false;
    m_backend_server_descriptions_isValid = false;

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;

    m_vpcid_isSet = false;
    m_vpcid_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_health_check_isSet = false;
    m_health_check_isValid = false;

    m_source_security_group_isSet = false;
    m_source_security_group_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;
}

void OAILoadBalancerDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadBalancerDescription::fromJsonObject(QJsonObject json) {

    m_load_balancer_name_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_name, json[QString("LoadBalancerName")]);
    m_load_balancer_name_isSet = !json[QString("LoadBalancerName")].isNull() && m_load_balancer_name_isValid;

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("DNSName")]);
    m_dns_name_isSet = !json[QString("DNSName")].isNull() && m_dns_name_isValid;

    m_canonical_hosted_zone_name_isValid = ::OpenAPI::fromJsonValue(m_canonical_hosted_zone_name, json[QString("CanonicalHostedZoneName")]);
    m_canonical_hosted_zone_name_isSet = !json[QString("CanonicalHostedZoneName")].isNull() && m_canonical_hosted_zone_name_isValid;

    m_canonical_hosted_zone_name_id_isValid = ::OpenAPI::fromJsonValue(m_canonical_hosted_zone_name_id, json[QString("CanonicalHostedZoneNameID")]);
    m_canonical_hosted_zone_name_id_isSet = !json[QString("CanonicalHostedZoneNameID")].isNull() && m_canonical_hosted_zone_name_id_isValid;

    m_listener_descriptions_isValid = ::OpenAPI::fromJsonValue(m_listener_descriptions, json[QString("ListenerDescriptions")]);
    m_listener_descriptions_isSet = !json[QString("ListenerDescriptions")].isNull() && m_listener_descriptions_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("Policies")]);
    m_policies_isSet = !json[QString("Policies")].isNull() && m_policies_isValid;

    m_backend_server_descriptions_isValid = ::OpenAPI::fromJsonValue(m_backend_server_descriptions, json[QString("BackendServerDescriptions")]);
    m_backend_server_descriptions_isSet = !json[QString("BackendServerDescriptions")].isNull() && m_backend_server_descriptions_isValid;

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("Subnets")]);
    m_subnets_isSet = !json[QString("Subnets")].isNull() && m_subnets_isValid;

    m_vpcid_isValid = ::OpenAPI::fromJsonValue(m_vpcid, json[QString("VPCId")]);
    m_vpcid_isSet = !json[QString("VPCId")].isNull() && m_vpcid_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("Instances")]);
    m_instances_isSet = !json[QString("Instances")].isNull() && m_instances_isValid;

    m_health_check_isValid = ::OpenAPI::fromJsonValue(m_health_check, json[QString("HealthCheck")]);
    m_health_check_isSet = !json[QString("HealthCheck")].isNull() && m_health_check_isValid;

    m_source_security_group_isValid = ::OpenAPI::fromJsonValue(m_source_security_group, json[QString("SourceSecurityGroup")]);
    m_source_security_group_isSet = !json[QString("SourceSecurityGroup")].isNull() && m_source_security_group_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("Scheme")]);
    m_scheme_isSet = !json[QString("Scheme")].isNull() && m_scheme_isValid;
}

QString OAILoadBalancerDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadBalancerDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_load_balancer_name_isSet) {
        obj.insert(QString("LoadBalancerName"), ::OpenAPI::toJsonValue(m_load_balancer_name));
    }
    if (m_dns_name_isSet) {
        obj.insert(QString("DNSName"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_canonical_hosted_zone_name_isSet) {
        obj.insert(QString("CanonicalHostedZoneName"), ::OpenAPI::toJsonValue(m_canonical_hosted_zone_name));
    }
    if (m_canonical_hosted_zone_name_id_isSet) {
        obj.insert(QString("CanonicalHostedZoneNameID"), ::OpenAPI::toJsonValue(m_canonical_hosted_zone_name_id));
    }
    if (m_listener_descriptions.isSet()) {
        obj.insert(QString("ListenerDescriptions"), ::OpenAPI::toJsonValue(m_listener_descriptions));
    }
    if (m_policies.isSet()) {
        obj.insert(QString("Policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_backend_server_descriptions.isSet()) {
        obj.insert(QString("BackendServerDescriptions"), ::OpenAPI::toJsonValue(m_backend_server_descriptions));
    }
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_subnets.isSet()) {
        obj.insert(QString("Subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    if (m_vpcid_isSet) {
        obj.insert(QString("VPCId"), ::OpenAPI::toJsonValue(m_vpcid));
    }
    if (m_instances.isSet()) {
        obj.insert(QString("Instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_health_check.isSet()) {
        obj.insert(QString("HealthCheck"), ::OpenAPI::toJsonValue(m_health_check));
    }
    if (m_source_security_group.isSet()) {
        obj.insert(QString("SourceSecurityGroup"), ::OpenAPI::toJsonValue(m_source_security_group));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("Scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    return obj;
}

QString OAILoadBalancerDescription::getLoadBalancerName() const {
    return m_load_balancer_name;
}
void OAILoadBalancerDescription::setLoadBalancerName(const QString &load_balancer_name) {
    m_load_balancer_name = load_balancer_name;
    m_load_balancer_name_isSet = true;
}

bool OAILoadBalancerDescription::is_load_balancer_name_Set() const{
    return m_load_balancer_name_isSet;
}

bool OAILoadBalancerDescription::is_load_balancer_name_Valid() const{
    return m_load_balancer_name_isValid;
}

QString OAILoadBalancerDescription::getDnsName() const {
    return m_dns_name;
}
void OAILoadBalancerDescription::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAILoadBalancerDescription::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAILoadBalancerDescription::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

QString OAILoadBalancerDescription::getCanonicalHostedZoneName() const {
    return m_canonical_hosted_zone_name;
}
void OAILoadBalancerDescription::setCanonicalHostedZoneName(const QString &canonical_hosted_zone_name) {
    m_canonical_hosted_zone_name = canonical_hosted_zone_name;
    m_canonical_hosted_zone_name_isSet = true;
}

bool OAILoadBalancerDescription::is_canonical_hosted_zone_name_Set() const{
    return m_canonical_hosted_zone_name_isSet;
}

bool OAILoadBalancerDescription::is_canonical_hosted_zone_name_Valid() const{
    return m_canonical_hosted_zone_name_isValid;
}

QString OAILoadBalancerDescription::getCanonicalHostedZoneNameId() const {
    return m_canonical_hosted_zone_name_id;
}
void OAILoadBalancerDescription::setCanonicalHostedZoneNameId(const QString &canonical_hosted_zone_name_id) {
    m_canonical_hosted_zone_name_id = canonical_hosted_zone_name_id;
    m_canonical_hosted_zone_name_id_isSet = true;
}

bool OAILoadBalancerDescription::is_canonical_hosted_zone_name_id_Set() const{
    return m_canonical_hosted_zone_name_id_isSet;
}

bool OAILoadBalancerDescription::is_canonical_hosted_zone_name_id_Valid() const{
    return m_canonical_hosted_zone_name_id_isValid;
}

QList OAILoadBalancerDescription::getListenerDescriptions() const {
    return m_listener_descriptions;
}
void OAILoadBalancerDescription::setListenerDescriptions(const QList &listener_descriptions) {
    m_listener_descriptions = listener_descriptions;
    m_listener_descriptions_isSet = true;
}

bool OAILoadBalancerDescription::is_listener_descriptions_Set() const{
    return m_listener_descriptions_isSet;
}

bool OAILoadBalancerDescription::is_listener_descriptions_Valid() const{
    return m_listener_descriptions_isValid;
}

OAILoadBalancerDescription_Policies OAILoadBalancerDescription::getPolicies() const {
    return m_policies;
}
void OAILoadBalancerDescription::setPolicies(const OAILoadBalancerDescription_Policies &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAILoadBalancerDescription::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAILoadBalancerDescription::is_policies_Valid() const{
    return m_policies_isValid;
}

QList OAILoadBalancerDescription::getBackendServerDescriptions() const {
    return m_backend_server_descriptions;
}
void OAILoadBalancerDescription::setBackendServerDescriptions(const QList &backend_server_descriptions) {
    m_backend_server_descriptions = backend_server_descriptions;
    m_backend_server_descriptions_isSet = true;
}

bool OAILoadBalancerDescription::is_backend_server_descriptions_Set() const{
    return m_backend_server_descriptions_isSet;
}

bool OAILoadBalancerDescription::is_backend_server_descriptions_Valid() const{
    return m_backend_server_descriptions_isValid;
}

QList OAILoadBalancerDescription::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAILoadBalancerDescription::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAILoadBalancerDescription::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAILoadBalancerDescription::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

QList OAILoadBalancerDescription::getSubnets() const {
    return m_subnets;
}
void OAILoadBalancerDescription::setSubnets(const QList &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAILoadBalancerDescription::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAILoadBalancerDescription::is_subnets_Valid() const{
    return m_subnets_isValid;
}

QString OAILoadBalancerDescription::getVpcid() const {
    return m_vpcid;
}
void OAILoadBalancerDescription::setVpcid(const QString &vpcid) {
    m_vpcid = vpcid;
    m_vpcid_isSet = true;
}

bool OAILoadBalancerDescription::is_vpcid_Set() const{
    return m_vpcid_isSet;
}

bool OAILoadBalancerDescription::is_vpcid_Valid() const{
    return m_vpcid_isValid;
}

QList OAILoadBalancerDescription::getInstances() const {
    return m_instances;
}
void OAILoadBalancerDescription::setInstances(const QList &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAILoadBalancerDescription::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAILoadBalancerDescription::is_instances_Valid() const{
    return m_instances_isValid;
}

OAILoadBalancerDescription_HealthCheck OAILoadBalancerDescription::getHealthCheck() const {
    return m_health_check;
}
void OAILoadBalancerDescription::setHealthCheck(const OAILoadBalancerDescription_HealthCheck &health_check) {
    m_health_check = health_check;
    m_health_check_isSet = true;
}

bool OAILoadBalancerDescription::is_health_check_Set() const{
    return m_health_check_isSet;
}

bool OAILoadBalancerDescription::is_health_check_Valid() const{
    return m_health_check_isValid;
}

OAILoadBalancerDescription_SourceSecurityGroup OAILoadBalancerDescription::getSourceSecurityGroup() const {
    return m_source_security_group;
}
void OAILoadBalancerDescription::setSourceSecurityGroup(const OAILoadBalancerDescription_SourceSecurityGroup &source_security_group) {
    m_source_security_group = source_security_group;
    m_source_security_group_isSet = true;
}

bool OAILoadBalancerDescription::is_source_security_group_Set() const{
    return m_source_security_group_isSet;
}

bool OAILoadBalancerDescription::is_source_security_group_Valid() const{
    return m_source_security_group_isValid;
}

QList OAILoadBalancerDescription::getSecurityGroups() const {
    return m_security_groups;
}
void OAILoadBalancerDescription::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAILoadBalancerDescription::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAILoadBalancerDescription::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

QDateTime OAILoadBalancerDescription::getCreatedTime() const {
    return m_created_time;
}
void OAILoadBalancerDescription::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAILoadBalancerDescription::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAILoadBalancerDescription::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAILoadBalancerDescription::getScheme() const {
    return m_scheme;
}
void OAILoadBalancerDescription::setScheme(const QString &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAILoadBalancerDescription::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAILoadBalancerDescription::is_scheme_Valid() const{
    return m_scheme_isValid;
}

bool OAILoadBalancerDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_load_balancer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canonical_hosted_zone_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canonical_hosted_zone_name_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listener_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_server_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpcid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_security_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadBalancerDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
