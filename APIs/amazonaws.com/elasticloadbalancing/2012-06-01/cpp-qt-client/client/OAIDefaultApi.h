/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddAvailabilityZonesInput.h"
#include "OAIAddAvailabilityZonesOutput.h"
#include "OAIAddTagsInput.h"
#include "OAIApplySecurityGroupsToLoadBalancerInput.h"
#include "OAIApplySecurityGroupsToLoadBalancerOutput.h"
#include "OAIAttachLoadBalancerToSubnetsInput.h"
#include "OAIAttachLoadBalancerToSubnetsOutput.h"
#include "OAIConfigureHealthCheckInput.h"
#include "OAIConfigureHealthCheckOutput.h"
#include "OAICreateAccessPointInput.h"
#include "OAICreateAccessPointOutput.h"
#include "OAICreateAppCookieStickinessPolicyInput.h"
#include "OAICreateLBCookieStickinessPolicyInput.h"
#include "OAICreateLoadBalancerListenerInput.h"
#include "OAICreateLoadBalancerPolicyInput.h"
#include "OAIDeleteAccessPointInput.h"
#include "OAIDeleteLoadBalancerListenerInput.h"
#include "OAIDeleteLoadBalancerPolicyInput.h"
#include "OAIDeregisterEndPointsInput.h"
#include "OAIDeregisterEndPointsOutput.h"
#include "OAIDescribeAccessPointsInput.h"
#include "OAIDescribeAccessPointsOutput.h"
#include "OAIDescribeAccountLimitsInput.h"
#include "OAIDescribeAccountLimitsOutput.h"
#include "OAIDescribeEndPointStateInput.h"
#include "OAIDescribeEndPointStateOutput.h"
#include "OAIDescribeLoadBalancerAttributesInput.h"
#include "OAIDescribeLoadBalancerAttributesOutput.h"
#include "OAIDescribeLoadBalancerPoliciesInput.h"
#include "OAIDescribeLoadBalancerPoliciesOutput.h"
#include "OAIDescribeLoadBalancerPolicyTypesInput.h"
#include "OAIDescribeLoadBalancerPolicyTypesOutput.h"
#include "OAIDescribeTagsInput.h"
#include "OAIDescribeTagsOutput.h"
#include "OAIDetachLoadBalancerFromSubnetsInput.h"
#include "OAIDetachLoadBalancerFromSubnetsOutput.h"
#include "OAIGET_ConfigureHealthCheck_HealthCheck_parameter.h"
#include "OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter.h"
#include "OAIInstance.h"
#include "OAIListener.h"
#include "OAIModifyLoadBalancerAttributesInput.h"
#include "OAIModifyLoadBalancerAttributesOutput.h"
#include "OAIObject.h"
#include "OAIPolicyAttribute.h"
#include "OAIRegisterEndPointsInput.h"
#include "OAIRegisterEndPointsOutput.h"
#include "OAIRemoveAvailabilityZonesInput.h"
#include "OAIRemoveAvailabilityZonesOutput.h"
#include "OAIRemoveTagsInput.h"
#include "OAISetLoadBalancerListenerSSLCertificateInput.h"
#include "OAISetLoadBalancerPoliciesForBackendServerInput.h"
#include "OAISetLoadBalancerPoliciesOfListenerInput.h"
#include "OAITag.h"
#include "OAITagKeyOnly.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  load_balancer_names QList<QString> [required]
    * @param[in]  tags QList<OAITag> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETAddTags(const QList<QString> &load_balancer_names, const QList<OAITag> &tags, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  security_groups QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETApplySecurityGroupsToLoadBalancer(const QString &load_balancer_name, const QList<QString> &security_groups, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  subnets QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETAttachLoadBalancerToSubnets(const QString &load_balancer_name, const QList<QString> &subnets, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  health_check OAIGET_ConfigureHealthCheck_HealthCheck_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETConfigureHealthCheck(const QString &load_balancer_name, const OAIGET_ConfigureHealthCheck_HealthCheck_parameter &health_check, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  cookie_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateAppCookieStickinessPolicy(const QString &load_balancer_name, const QString &policy_name, const QString &cookie_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cookie_expiration_period qint32 [optional]
    */
    virtual void gETCreateLBCookieStickinessPolicy(const QString &load_balancer_name, const QString &policy_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &cookie_expiration_period = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  listeners QList<OAIListener> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  availability_zones QList<QString> [optional]
    * @param[in]  subnets QList<QString> [optional]
    * @param[in]  security_groups QList<QString> [optional]
    * @param[in]  scheme QString [optional]
    * @param[in]  tags QList<OAITag> [optional]
    */
    virtual void gETCreateLoadBalancer(const QString &load_balancer_name, const QList<OAIListener> &listeners, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &availability_zones = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &subnets = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &security_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &scheme = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  listeners QList<OAIListener> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateLoadBalancerListeners(const QString &load_balancer_name, const QList<OAIListener> &listeners, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  policy_type_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  policy_attributes QList<OAIPolicyAttribute> [optional]
    */
    virtual void gETCreateLoadBalancerPolicy(const QString &load_balancer_name, const QString &policy_name, const QString &policy_type_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIPolicyAttribute>> &policy_attributes = ::OpenAPI::OptionalParam<QList<OAIPolicyAttribute>>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteLoadBalancer(const QString &load_balancer_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  load_balancer_ports QList<qint32> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteLoadBalancerListeners(const QString &load_balancer_name, const QList<qint32> &load_balancer_ports, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteLoadBalancerPolicy(const QString &load_balancer_name, const QString &policy_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  instances QList<OAIInstance> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeregisterInstancesFromLoadBalancer(const QString &load_balancer_name, const QList<OAIInstance> &instances, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETDescribeAccountLimits(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  instances QList<OAIInstance> [optional]
    */
    virtual void gETDescribeInstanceHealth(const QString &load_balancer_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIInstance>> &instances = ::OpenAPI::OptionalParam<QList<OAIInstance>>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeLoadBalancerAttributes(const QString &load_balancer_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  load_balancer_name QString [optional]
    * @param[in]  policy_names QList<QString> [optional]
    */
    virtual void gETDescribeLoadBalancerPolicies(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &load_balancer_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &policy_names = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  policy_type_names QList<QString> [optional]
    */
    virtual void gETDescribeLoadBalancerPolicyTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &policy_type_names = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  load_balancer_names QList<QString> [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETDescribeLoadBalancers(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &load_balancer_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  load_balancer_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeTags(const QList<QString> &load_balancer_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  subnets QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDetachLoadBalancerFromSubnets(const QString &load_balancer_name, const QList<QString> &subnets, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  availability_zones QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDisableAvailabilityZonesForLoadBalancer(const QString &load_balancer_name, const QList<QString> &availability_zones, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  availability_zones QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETEnableAvailabilityZonesForLoadBalancer(const QString &load_balancer_name, const QList<QString> &availability_zones, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  load_balancer_attributes OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETModifyLoadBalancerAttributes(const QString &load_balancer_name, const OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter &load_balancer_attributes, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  instances QList<OAIInstance> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETRegisterInstancesWithLoadBalancer(const QString &load_balancer_name, const QList<OAIInstance> &instances, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_names QList<QString> [required]
    * @param[in]  tags QList<OAITagKeyOnly> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETRemoveTags(const QList<QString> &load_balancer_names, const QList<OAITagKeyOnly> &tags, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  load_balancer_port qint32 [required]
    * @param[in]  ssl_certificate_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETSetLoadBalancerListenerSSLCertificate(const QString &load_balancer_name, const qint32 &load_balancer_port, const QString &ssl_certificate_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  instance_port qint32 [required]
    * @param[in]  policy_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETSetLoadBalancerPoliciesForBackendServer(const QString &load_balancer_name, const qint32 &instance_port, const QList<QString> &policy_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  load_balancer_port qint32 [required]
    * @param[in]  policy_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETSetLoadBalancerPoliciesOfListener(const QString &load_balancer_name, const qint32 &load_balancer_port, const QList<QString> &policy_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_add_tags_input OAIAddTagsInput [optional]
    */
    virtual void pOSTAddTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddTagsInput> &oai_add_tags_input = ::OpenAPI::OptionalParam<OAIAddTagsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_apply_security_groups_to_load_balancer_input OAIApplySecurityGroupsToLoadBalancerInput [optional]
    */
    virtual void pOSTApplySecurityGroupsToLoadBalancer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIApplySecurityGroupsToLoadBalancerInput> &oai_apply_security_groups_to_load_balancer_input = ::OpenAPI::OptionalParam<OAIApplySecurityGroupsToLoadBalancerInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_attach_load_balancer_to_subnets_input OAIAttachLoadBalancerToSubnetsInput [optional]
    */
    virtual void pOSTAttachLoadBalancerToSubnets(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAttachLoadBalancerToSubnetsInput> &oai_attach_load_balancer_to_subnets_input = ::OpenAPI::OptionalParam<OAIAttachLoadBalancerToSubnetsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_configure_health_check_input OAIConfigureHealthCheckInput [optional]
    */
    virtual void pOSTConfigureHealthCheck(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConfigureHealthCheckInput> &oai_configure_health_check_input = ::OpenAPI::OptionalParam<OAIConfigureHealthCheckInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_app_cookie_stickiness_policy_input OAICreateAppCookieStickinessPolicyInput [optional]
    */
    virtual void pOSTCreateAppCookieStickinessPolicy(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateAppCookieStickinessPolicyInput> &oai_create_app_cookie_stickiness_policy_input = ::OpenAPI::OptionalParam<OAICreateAppCookieStickinessPolicyInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_lb_cookie_stickiness_policy_input OAICreateLBCookieStickinessPolicyInput [optional]
    */
    virtual void pOSTCreateLBCookieStickinessPolicy(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateLBCookieStickinessPolicyInput> &oai_create_lb_cookie_stickiness_policy_input = ::OpenAPI::OptionalParam<OAICreateLBCookieStickinessPolicyInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_access_point_input OAICreateAccessPointInput [optional]
    */
    virtual void pOSTCreateLoadBalancer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateAccessPointInput> &oai_create_access_point_input = ::OpenAPI::OptionalParam<OAICreateAccessPointInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_load_balancer_listener_input OAICreateLoadBalancerListenerInput [optional]
    */
    virtual void pOSTCreateLoadBalancerListeners(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateLoadBalancerListenerInput> &oai_create_load_balancer_listener_input = ::OpenAPI::OptionalParam<OAICreateLoadBalancerListenerInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_load_balancer_policy_input OAICreateLoadBalancerPolicyInput [optional]
    */
    virtual void pOSTCreateLoadBalancerPolicy(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateLoadBalancerPolicyInput> &oai_create_load_balancer_policy_input = ::OpenAPI::OptionalParam<OAICreateLoadBalancerPolicyInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_access_point_input OAIDeleteAccessPointInput [optional]
    */
    virtual void pOSTDeleteLoadBalancer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteAccessPointInput> &oai_delete_access_point_input = ::OpenAPI::OptionalParam<OAIDeleteAccessPointInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_load_balancer_listener_input OAIDeleteLoadBalancerListenerInput [optional]
    */
    virtual void pOSTDeleteLoadBalancerListeners(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteLoadBalancerListenerInput> &oai_delete_load_balancer_listener_input = ::OpenAPI::OptionalParam<OAIDeleteLoadBalancerListenerInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_load_balancer_policy_input OAIDeleteLoadBalancerPolicyInput [optional]
    */
    virtual void pOSTDeleteLoadBalancerPolicy(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteLoadBalancerPolicyInput> &oai_delete_load_balancer_policy_input = ::OpenAPI::OptionalParam<OAIDeleteLoadBalancerPolicyInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_deregister_end_points_input OAIDeregisterEndPointsInput [optional]
    */
    virtual void pOSTDeregisterInstancesFromLoadBalancer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeregisterEndPointsInput> &oai_deregister_end_points_input = ::OpenAPI::OptionalParam<OAIDeregisterEndPointsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_account_limits_input OAIDescribeAccountLimitsInput [optional]
    */
    virtual void pOSTDescribeAccountLimits(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAccountLimitsInput> &oai_describe_account_limits_input = ::OpenAPI::OptionalParam<OAIDescribeAccountLimitsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_end_point_state_input OAIDescribeEndPointStateInput [optional]
    */
    virtual void pOSTDescribeInstanceHealth(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEndPointStateInput> &oai_describe_end_point_state_input = ::OpenAPI::OptionalParam<OAIDescribeEndPointStateInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_load_balancer_attributes_input OAIDescribeLoadBalancerAttributesInput [optional]
    */
    virtual void pOSTDescribeLoadBalancerAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeLoadBalancerAttributesInput> &oai_describe_load_balancer_attributes_input = ::OpenAPI::OptionalParam<OAIDescribeLoadBalancerAttributesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_load_balancer_policies_input OAIDescribeLoadBalancerPoliciesInput [optional]
    */
    virtual void pOSTDescribeLoadBalancerPolicies(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeLoadBalancerPoliciesInput> &oai_describe_load_balancer_policies_input = ::OpenAPI::OptionalParam<OAIDescribeLoadBalancerPoliciesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_load_balancer_policy_types_input OAIDescribeLoadBalancerPolicyTypesInput [optional]
    */
    virtual void pOSTDescribeLoadBalancerPolicyTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeLoadBalancerPolicyTypesInput> &oai_describe_load_balancer_policy_types_input = ::OpenAPI::OptionalParam<OAIDescribeLoadBalancerPolicyTypesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_access_points_input OAIDescribeAccessPointsInput [optional]
    */
    virtual void pOSTDescribeLoadBalancers(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAccessPointsInput> &oai_describe_access_points_input = ::OpenAPI::OptionalParam<OAIDescribeAccessPointsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_tags_input OAIDescribeTagsInput [optional]
    */
    virtual void pOSTDescribeTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeTagsInput> &oai_describe_tags_input = ::OpenAPI::OptionalParam<OAIDescribeTagsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_detach_load_balancer_from_subnets_input OAIDetachLoadBalancerFromSubnetsInput [optional]
    */
    virtual void pOSTDetachLoadBalancerFromSubnets(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDetachLoadBalancerFromSubnetsInput> &oai_detach_load_balancer_from_subnets_input = ::OpenAPI::OptionalParam<OAIDetachLoadBalancerFromSubnetsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_remove_availability_zones_input OAIRemoveAvailabilityZonesInput [optional]
    */
    virtual void pOSTDisableAvailabilityZonesForLoadBalancer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRemoveAvailabilityZonesInput> &oai_remove_availability_zones_input = ::OpenAPI::OptionalParam<OAIRemoveAvailabilityZonesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_add_availability_zones_input OAIAddAvailabilityZonesInput [optional]
    */
    virtual void pOSTEnableAvailabilityZonesForLoadBalancer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddAvailabilityZonesInput> &oai_add_availability_zones_input = ::OpenAPI::OptionalParam<OAIAddAvailabilityZonesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_load_balancer_attributes_input OAIModifyLoadBalancerAttributesInput [optional]
    */
    virtual void pOSTModifyLoadBalancerAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyLoadBalancerAttributesInput> &oai_modify_load_balancer_attributes_input = ::OpenAPI::OptionalParam<OAIModifyLoadBalancerAttributesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_register_end_points_input OAIRegisterEndPointsInput [optional]
    */
    virtual void pOSTRegisterInstancesWithLoadBalancer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRegisterEndPointsInput> &oai_register_end_points_input = ::OpenAPI::OptionalParam<OAIRegisterEndPointsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_remove_tags_input OAIRemoveTagsInput [optional]
    */
    virtual void pOSTRemoveTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRemoveTagsInput> &oai_remove_tags_input = ::OpenAPI::OptionalParam<OAIRemoveTagsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_load_balancer_listener_ssl_certificate_input OAISetLoadBalancerListenerSSLCertificateInput [optional]
    */
    virtual void pOSTSetLoadBalancerListenerSSLCertificate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetLoadBalancerListenerSSLCertificateInput> &oai_set_load_balancer_listener_ssl_certificate_input = ::OpenAPI::OptionalParam<OAISetLoadBalancerListenerSSLCertificateInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_load_balancer_policies_for_backend_server_input OAISetLoadBalancerPoliciesForBackendServerInput [optional]
    */
    virtual void pOSTSetLoadBalancerPoliciesForBackendServer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetLoadBalancerPoliciesForBackendServerInput> &oai_set_load_balancer_policies_for_backend_server_input = ::OpenAPI::OptionalParam<OAISetLoadBalancerPoliciesForBackendServerInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_load_balancer_policies_of_listener_input OAISetLoadBalancerPoliciesOfListenerInput [optional]
    */
    virtual void pOSTSetLoadBalancerPoliciesOfListener(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetLoadBalancerPoliciesOfListenerInput> &oai_set_load_balancer_policies_of_listener_input = ::OpenAPI::OptionalParam<OAISetLoadBalancerPoliciesOfListenerInput>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETAddTagsCallback(OAIHttpRequestWorker *worker);
    void gETApplySecurityGroupsToLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void gETAttachLoadBalancerToSubnetsCallback(OAIHttpRequestWorker *worker);
    void gETConfigureHealthCheckCallback(OAIHttpRequestWorker *worker);
    void gETCreateAppCookieStickinessPolicyCallback(OAIHttpRequestWorker *worker);
    void gETCreateLBCookieStickinessPolicyCallback(OAIHttpRequestWorker *worker);
    void gETCreateLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void gETCreateLoadBalancerListenersCallback(OAIHttpRequestWorker *worker);
    void gETCreateLoadBalancerPolicyCallback(OAIHttpRequestWorker *worker);
    void gETDeleteLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void gETDeleteLoadBalancerListenersCallback(OAIHttpRequestWorker *worker);
    void gETDeleteLoadBalancerPolicyCallback(OAIHttpRequestWorker *worker);
    void gETDeregisterInstancesFromLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAccountLimitsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeInstanceHealthCallback(OAIHttpRequestWorker *worker);
    void gETDescribeLoadBalancerAttributesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeLoadBalancerPoliciesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeLoadBalancerPolicyTypesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeLoadBalancersCallback(OAIHttpRequestWorker *worker);
    void gETDescribeTagsCallback(OAIHttpRequestWorker *worker);
    void gETDetachLoadBalancerFromSubnetsCallback(OAIHttpRequestWorker *worker);
    void gETDisableAvailabilityZonesForLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void gETEnableAvailabilityZonesForLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void gETModifyLoadBalancerAttributesCallback(OAIHttpRequestWorker *worker);
    void gETRegisterInstancesWithLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void gETRemoveTagsCallback(OAIHttpRequestWorker *worker);
    void gETSetLoadBalancerListenerSSLCertificateCallback(OAIHttpRequestWorker *worker);
    void gETSetLoadBalancerPoliciesForBackendServerCallback(OAIHttpRequestWorker *worker);
    void gETSetLoadBalancerPoliciesOfListenerCallback(OAIHttpRequestWorker *worker);
    void pOSTAddTagsCallback(OAIHttpRequestWorker *worker);
    void pOSTApplySecurityGroupsToLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void pOSTAttachLoadBalancerToSubnetsCallback(OAIHttpRequestWorker *worker);
    void pOSTConfigureHealthCheckCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateAppCookieStickinessPolicyCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateLBCookieStickinessPolicyCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateLoadBalancerListenersCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateLoadBalancerPolicyCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteLoadBalancerListenersCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteLoadBalancerPolicyCallback(OAIHttpRequestWorker *worker);
    void pOSTDeregisterInstancesFromLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAccountLimitsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeInstanceHealthCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeLoadBalancerAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeLoadBalancerPoliciesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeLoadBalancerPolicyTypesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeLoadBalancersCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeTagsCallback(OAIHttpRequestWorker *worker);
    void pOSTDetachLoadBalancerFromSubnetsCallback(OAIHttpRequestWorker *worker);
    void pOSTDisableAvailabilityZonesForLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void pOSTEnableAvailabilityZonesForLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyLoadBalancerAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTRegisterInstancesWithLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void pOSTRemoveTagsCallback(OAIHttpRequestWorker *worker);
    void pOSTSetLoadBalancerListenerSSLCertificateCallback(OAIHttpRequestWorker *worker);
    void pOSTSetLoadBalancerPoliciesForBackendServerCallback(OAIHttpRequestWorker *worker);
    void pOSTSetLoadBalancerPoliciesOfListenerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETAddTagsSignal(OAIObject summary);
    void gETApplySecurityGroupsToLoadBalancerSignal(OAIApplySecurityGroupsToLoadBalancerOutput summary);
    void gETAttachLoadBalancerToSubnetsSignal(OAIAttachLoadBalancerToSubnetsOutput summary);
    void gETConfigureHealthCheckSignal(OAIConfigureHealthCheckOutput summary);
    void gETCreateAppCookieStickinessPolicySignal(OAIObject summary);
    void gETCreateLBCookieStickinessPolicySignal(OAIObject summary);
    void gETCreateLoadBalancerSignal(OAICreateAccessPointOutput summary);
    void gETCreateLoadBalancerListenersSignal(OAIObject summary);
    void gETCreateLoadBalancerPolicySignal(OAIObject summary);
    void gETDeleteLoadBalancerSignal(OAIObject summary);
    void gETDeleteLoadBalancerListenersSignal(OAIObject summary);
    void gETDeleteLoadBalancerPolicySignal(OAIObject summary);
    void gETDeregisterInstancesFromLoadBalancerSignal(OAIDeregisterEndPointsOutput summary);
    void gETDescribeAccountLimitsSignal(OAIDescribeAccountLimitsOutput summary);
    void gETDescribeInstanceHealthSignal(OAIDescribeEndPointStateOutput summary);
    void gETDescribeLoadBalancerAttributesSignal(OAIDescribeLoadBalancerAttributesOutput summary);
    void gETDescribeLoadBalancerPoliciesSignal(OAIDescribeLoadBalancerPoliciesOutput summary);
    void gETDescribeLoadBalancerPolicyTypesSignal(OAIDescribeLoadBalancerPolicyTypesOutput summary);
    void gETDescribeLoadBalancersSignal(OAIDescribeAccessPointsOutput summary);
    void gETDescribeTagsSignal(OAIDescribeTagsOutput summary);
    void gETDetachLoadBalancerFromSubnetsSignal(OAIDetachLoadBalancerFromSubnetsOutput summary);
    void gETDisableAvailabilityZonesForLoadBalancerSignal(OAIRemoveAvailabilityZonesOutput summary);
    void gETEnableAvailabilityZonesForLoadBalancerSignal(OAIAddAvailabilityZonesOutput summary);
    void gETModifyLoadBalancerAttributesSignal(OAIModifyLoadBalancerAttributesOutput summary);
    void gETRegisterInstancesWithLoadBalancerSignal(OAIRegisterEndPointsOutput summary);
    void gETRemoveTagsSignal(OAIObject summary);
    void gETSetLoadBalancerListenerSSLCertificateSignal(OAIObject summary);
    void gETSetLoadBalancerPoliciesForBackendServerSignal(OAIObject summary);
    void gETSetLoadBalancerPoliciesOfListenerSignal(OAIObject summary);
    void pOSTAddTagsSignal(OAIObject summary);
    void pOSTApplySecurityGroupsToLoadBalancerSignal(OAIApplySecurityGroupsToLoadBalancerOutput summary);
    void pOSTAttachLoadBalancerToSubnetsSignal(OAIAttachLoadBalancerToSubnetsOutput summary);
    void pOSTConfigureHealthCheckSignal(OAIConfigureHealthCheckOutput summary);
    void pOSTCreateAppCookieStickinessPolicySignal(OAIObject summary);
    void pOSTCreateLBCookieStickinessPolicySignal(OAIObject summary);
    void pOSTCreateLoadBalancerSignal(OAICreateAccessPointOutput summary);
    void pOSTCreateLoadBalancerListenersSignal(OAIObject summary);
    void pOSTCreateLoadBalancerPolicySignal(OAIObject summary);
    void pOSTDeleteLoadBalancerSignal(OAIObject summary);
    void pOSTDeleteLoadBalancerListenersSignal(OAIObject summary);
    void pOSTDeleteLoadBalancerPolicySignal(OAIObject summary);
    void pOSTDeregisterInstancesFromLoadBalancerSignal(OAIDeregisterEndPointsOutput summary);
    void pOSTDescribeAccountLimitsSignal(OAIDescribeAccountLimitsOutput summary);
    void pOSTDescribeInstanceHealthSignal(OAIDescribeEndPointStateOutput summary);
    void pOSTDescribeLoadBalancerAttributesSignal(OAIDescribeLoadBalancerAttributesOutput summary);
    void pOSTDescribeLoadBalancerPoliciesSignal(OAIDescribeLoadBalancerPoliciesOutput summary);
    void pOSTDescribeLoadBalancerPolicyTypesSignal(OAIDescribeLoadBalancerPolicyTypesOutput summary);
    void pOSTDescribeLoadBalancersSignal(OAIDescribeAccessPointsOutput summary);
    void pOSTDescribeTagsSignal(OAIDescribeTagsOutput summary);
    void pOSTDetachLoadBalancerFromSubnetsSignal(OAIDetachLoadBalancerFromSubnetsOutput summary);
    void pOSTDisableAvailabilityZonesForLoadBalancerSignal(OAIRemoveAvailabilityZonesOutput summary);
    void pOSTEnableAvailabilityZonesForLoadBalancerSignal(OAIAddAvailabilityZonesOutput summary);
    void pOSTModifyLoadBalancerAttributesSignal(OAIModifyLoadBalancerAttributesOutput summary);
    void pOSTRegisterInstancesWithLoadBalancerSignal(OAIRegisterEndPointsOutput summary);
    void pOSTRemoveTagsSignal(OAIObject summary);
    void pOSTSetLoadBalancerListenerSSLCertificateSignal(OAIObject summary);
    void pOSTSetLoadBalancerPoliciesForBackendServerSignal(OAIObject summary);
    void pOSTSetLoadBalancerPoliciesOfListenerSignal(OAIObject summary);


    void gETAddTagsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETApplySecurityGroupsToLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIApplySecurityGroupsToLoadBalancerOutput summary);
    void gETAttachLoadBalancerToSubnetsSignalFull(OAIHttpRequestWorker *worker, OAIAttachLoadBalancerToSubnetsOutput summary);
    void gETConfigureHealthCheckSignalFull(OAIHttpRequestWorker *worker, OAIConfigureHealthCheckOutput summary);
    void gETCreateAppCookieStickinessPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETCreateLBCookieStickinessPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETCreateLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAICreateAccessPointOutput summary);
    void gETCreateLoadBalancerListenersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETCreateLoadBalancerPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteLoadBalancerListenersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteLoadBalancerPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeregisterInstancesFromLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIDeregisterEndPointsOutput summary);
    void gETDescribeAccountLimitsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountLimitsOutput summary);
    void gETDescribeInstanceHealthSignalFull(OAIHttpRequestWorker *worker, OAIDescribeEndPointStateOutput summary);
    void gETDescribeLoadBalancerAttributesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancerAttributesOutput summary);
    void gETDescribeLoadBalancerPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancerPoliciesOutput summary);
    void gETDescribeLoadBalancerPolicyTypesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancerPolicyTypesOutput summary);
    void gETDescribeLoadBalancersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccessPointsOutput summary);
    void gETDescribeTagsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTagsOutput summary);
    void gETDetachLoadBalancerFromSubnetsSignalFull(OAIHttpRequestWorker *worker, OAIDetachLoadBalancerFromSubnetsOutput summary);
    void gETDisableAvailabilityZonesForLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIRemoveAvailabilityZonesOutput summary);
    void gETEnableAvailabilityZonesForLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIAddAvailabilityZonesOutput summary);
    void gETModifyLoadBalancerAttributesSignalFull(OAIHttpRequestWorker *worker, OAIModifyLoadBalancerAttributesOutput summary);
    void gETRegisterInstancesWithLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIRegisterEndPointsOutput summary);
    void gETRemoveTagsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETSetLoadBalancerListenerSSLCertificateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETSetLoadBalancerPoliciesForBackendServerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETSetLoadBalancerPoliciesOfListenerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTAddTagsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTApplySecurityGroupsToLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIApplySecurityGroupsToLoadBalancerOutput summary);
    void pOSTAttachLoadBalancerToSubnetsSignalFull(OAIHttpRequestWorker *worker, OAIAttachLoadBalancerToSubnetsOutput summary);
    void pOSTConfigureHealthCheckSignalFull(OAIHttpRequestWorker *worker, OAIConfigureHealthCheckOutput summary);
    void pOSTCreateAppCookieStickinessPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCreateLBCookieStickinessPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCreateLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAICreateAccessPointOutput summary);
    void pOSTCreateLoadBalancerListenersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCreateLoadBalancerPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteLoadBalancerListenersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteLoadBalancerPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeregisterInstancesFromLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIDeregisterEndPointsOutput summary);
    void pOSTDescribeAccountLimitsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountLimitsOutput summary);
    void pOSTDescribeInstanceHealthSignalFull(OAIHttpRequestWorker *worker, OAIDescribeEndPointStateOutput summary);
    void pOSTDescribeLoadBalancerAttributesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancerAttributesOutput summary);
    void pOSTDescribeLoadBalancerPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancerPoliciesOutput summary);
    void pOSTDescribeLoadBalancerPolicyTypesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancerPolicyTypesOutput summary);
    void pOSTDescribeLoadBalancersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccessPointsOutput summary);
    void pOSTDescribeTagsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTagsOutput summary);
    void pOSTDetachLoadBalancerFromSubnetsSignalFull(OAIHttpRequestWorker *worker, OAIDetachLoadBalancerFromSubnetsOutput summary);
    void pOSTDisableAvailabilityZonesForLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIRemoveAvailabilityZonesOutput summary);
    void pOSTEnableAvailabilityZonesForLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIAddAvailabilityZonesOutput summary);
    void pOSTModifyLoadBalancerAttributesSignalFull(OAIHttpRequestWorker *worker, OAIModifyLoadBalancerAttributesOutput summary);
    void pOSTRegisterInstancesWithLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIRegisterEndPointsOutput summary);
    void pOSTRemoveTagsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTSetLoadBalancerListenerSSLCertificateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTSetLoadBalancerPoliciesForBackendServerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTSetLoadBalancerPoliciesOfListenerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use gETAddTagsSignalError() instead")
    void gETAddTagsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAddTagsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETApplySecurityGroupsToLoadBalancerSignalError() instead")
    void gETApplySecurityGroupsToLoadBalancerSignalE(OAIApplySecurityGroupsToLoadBalancerOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETApplySecurityGroupsToLoadBalancerSignalError(OAIApplySecurityGroupsToLoadBalancerOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAttachLoadBalancerToSubnetsSignalError() instead")
    void gETAttachLoadBalancerToSubnetsSignalE(OAIAttachLoadBalancerToSubnetsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAttachLoadBalancerToSubnetsSignalError(OAIAttachLoadBalancerToSubnetsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETConfigureHealthCheckSignalError() instead")
    void gETConfigureHealthCheckSignalE(OAIConfigureHealthCheckOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETConfigureHealthCheckSignalError(OAIConfigureHealthCheckOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateAppCookieStickinessPolicySignalError() instead")
    void gETCreateAppCookieStickinessPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateAppCookieStickinessPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateLBCookieStickinessPolicySignalError() instead")
    void gETCreateLBCookieStickinessPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateLBCookieStickinessPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateLoadBalancerSignalError() instead")
    void gETCreateLoadBalancerSignalE(OAICreateAccessPointOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateLoadBalancerSignalError(OAICreateAccessPointOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateLoadBalancerListenersSignalError() instead")
    void gETCreateLoadBalancerListenersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateLoadBalancerListenersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateLoadBalancerPolicySignalError() instead")
    void gETCreateLoadBalancerPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateLoadBalancerPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteLoadBalancerSignalError() instead")
    void gETDeleteLoadBalancerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteLoadBalancerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteLoadBalancerListenersSignalError() instead")
    void gETDeleteLoadBalancerListenersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteLoadBalancerListenersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteLoadBalancerPolicySignalError() instead")
    void gETDeleteLoadBalancerPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteLoadBalancerPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeregisterInstancesFromLoadBalancerSignalError() instead")
    void gETDeregisterInstancesFromLoadBalancerSignalE(OAIDeregisterEndPointsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeregisterInstancesFromLoadBalancerSignalError(OAIDeregisterEndPointsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAccountLimitsSignalError() instead")
    void gETDescribeAccountLimitsSignalE(OAIDescribeAccountLimitsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAccountLimitsSignalError(OAIDescribeAccountLimitsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeInstanceHealthSignalError() instead")
    void gETDescribeInstanceHealthSignalE(OAIDescribeEndPointStateOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeInstanceHealthSignalError(OAIDescribeEndPointStateOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancerAttributesSignalError() instead")
    void gETDescribeLoadBalancerAttributesSignalE(OAIDescribeLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancerAttributesSignalError(OAIDescribeLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancerPoliciesSignalError() instead")
    void gETDescribeLoadBalancerPoliciesSignalE(OAIDescribeLoadBalancerPoliciesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancerPoliciesSignalError(OAIDescribeLoadBalancerPoliciesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancerPolicyTypesSignalError() instead")
    void gETDescribeLoadBalancerPolicyTypesSignalE(OAIDescribeLoadBalancerPolicyTypesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancerPolicyTypesSignalError(OAIDescribeLoadBalancerPolicyTypesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancersSignalError() instead")
    void gETDescribeLoadBalancersSignalE(OAIDescribeAccessPointsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancersSignalError(OAIDescribeAccessPointsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTagsSignalError() instead")
    void gETDescribeTagsSignalE(OAIDescribeTagsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTagsSignalError(OAIDescribeTagsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetachLoadBalancerFromSubnetsSignalError() instead")
    void gETDetachLoadBalancerFromSubnetsSignalE(OAIDetachLoadBalancerFromSubnetsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetachLoadBalancerFromSubnetsSignalError(OAIDetachLoadBalancerFromSubnetsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisableAvailabilityZonesForLoadBalancerSignalError() instead")
    void gETDisableAvailabilityZonesForLoadBalancerSignalE(OAIRemoveAvailabilityZonesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisableAvailabilityZonesForLoadBalancerSignalError(OAIRemoveAvailabilityZonesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnableAvailabilityZonesForLoadBalancerSignalError() instead")
    void gETEnableAvailabilityZonesForLoadBalancerSignalE(OAIAddAvailabilityZonesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnableAvailabilityZonesForLoadBalancerSignalError(OAIAddAvailabilityZonesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyLoadBalancerAttributesSignalError() instead")
    void gETModifyLoadBalancerAttributesSignalE(OAIModifyLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyLoadBalancerAttributesSignalError(OAIModifyLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRegisterInstancesWithLoadBalancerSignalError() instead")
    void gETRegisterInstancesWithLoadBalancerSignalE(OAIRegisterEndPointsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRegisterInstancesWithLoadBalancerSignalError(OAIRegisterEndPointsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRemoveTagsSignalError() instead")
    void gETRemoveTagsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRemoveTagsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetLoadBalancerListenerSSLCertificateSignalError() instead")
    void gETSetLoadBalancerListenerSSLCertificateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetLoadBalancerListenerSSLCertificateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetLoadBalancerPoliciesForBackendServerSignalError() instead")
    void gETSetLoadBalancerPoliciesForBackendServerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetLoadBalancerPoliciesForBackendServerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetLoadBalancerPoliciesOfListenerSignalError() instead")
    void gETSetLoadBalancerPoliciesOfListenerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetLoadBalancerPoliciesOfListenerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAddTagsSignalError() instead")
    void pOSTAddTagsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAddTagsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTApplySecurityGroupsToLoadBalancerSignalError() instead")
    void pOSTApplySecurityGroupsToLoadBalancerSignalE(OAIApplySecurityGroupsToLoadBalancerOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTApplySecurityGroupsToLoadBalancerSignalError(OAIApplySecurityGroupsToLoadBalancerOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAttachLoadBalancerToSubnetsSignalError() instead")
    void pOSTAttachLoadBalancerToSubnetsSignalE(OAIAttachLoadBalancerToSubnetsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAttachLoadBalancerToSubnetsSignalError(OAIAttachLoadBalancerToSubnetsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTConfigureHealthCheckSignalError() instead")
    void pOSTConfigureHealthCheckSignalE(OAIConfigureHealthCheckOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTConfigureHealthCheckSignalError(OAIConfigureHealthCheckOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateAppCookieStickinessPolicySignalError() instead")
    void pOSTCreateAppCookieStickinessPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateAppCookieStickinessPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateLBCookieStickinessPolicySignalError() instead")
    void pOSTCreateLBCookieStickinessPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateLBCookieStickinessPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateLoadBalancerSignalError() instead")
    void pOSTCreateLoadBalancerSignalE(OAICreateAccessPointOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateLoadBalancerSignalError(OAICreateAccessPointOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateLoadBalancerListenersSignalError() instead")
    void pOSTCreateLoadBalancerListenersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateLoadBalancerListenersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateLoadBalancerPolicySignalError() instead")
    void pOSTCreateLoadBalancerPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateLoadBalancerPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteLoadBalancerSignalError() instead")
    void pOSTDeleteLoadBalancerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteLoadBalancerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteLoadBalancerListenersSignalError() instead")
    void pOSTDeleteLoadBalancerListenersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteLoadBalancerListenersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteLoadBalancerPolicySignalError() instead")
    void pOSTDeleteLoadBalancerPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteLoadBalancerPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeregisterInstancesFromLoadBalancerSignalError() instead")
    void pOSTDeregisterInstancesFromLoadBalancerSignalE(OAIDeregisterEndPointsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeregisterInstancesFromLoadBalancerSignalError(OAIDeregisterEndPointsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAccountLimitsSignalError() instead")
    void pOSTDescribeAccountLimitsSignalE(OAIDescribeAccountLimitsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAccountLimitsSignalError(OAIDescribeAccountLimitsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeInstanceHealthSignalError() instead")
    void pOSTDescribeInstanceHealthSignalE(OAIDescribeEndPointStateOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeInstanceHealthSignalError(OAIDescribeEndPointStateOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancerAttributesSignalError() instead")
    void pOSTDescribeLoadBalancerAttributesSignalE(OAIDescribeLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancerAttributesSignalError(OAIDescribeLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancerPoliciesSignalError() instead")
    void pOSTDescribeLoadBalancerPoliciesSignalE(OAIDescribeLoadBalancerPoliciesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancerPoliciesSignalError(OAIDescribeLoadBalancerPoliciesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancerPolicyTypesSignalError() instead")
    void pOSTDescribeLoadBalancerPolicyTypesSignalE(OAIDescribeLoadBalancerPolicyTypesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancerPolicyTypesSignalError(OAIDescribeLoadBalancerPolicyTypesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancersSignalError() instead")
    void pOSTDescribeLoadBalancersSignalE(OAIDescribeAccessPointsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancersSignalError(OAIDescribeAccessPointsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTagsSignalError() instead")
    void pOSTDescribeTagsSignalE(OAIDescribeTagsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTagsSignalError(OAIDescribeTagsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetachLoadBalancerFromSubnetsSignalError() instead")
    void pOSTDetachLoadBalancerFromSubnetsSignalE(OAIDetachLoadBalancerFromSubnetsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetachLoadBalancerFromSubnetsSignalError(OAIDetachLoadBalancerFromSubnetsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisableAvailabilityZonesForLoadBalancerSignalError() instead")
    void pOSTDisableAvailabilityZonesForLoadBalancerSignalE(OAIRemoveAvailabilityZonesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisableAvailabilityZonesForLoadBalancerSignalError(OAIRemoveAvailabilityZonesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnableAvailabilityZonesForLoadBalancerSignalError() instead")
    void pOSTEnableAvailabilityZonesForLoadBalancerSignalE(OAIAddAvailabilityZonesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnableAvailabilityZonesForLoadBalancerSignalError(OAIAddAvailabilityZonesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyLoadBalancerAttributesSignalError() instead")
    void pOSTModifyLoadBalancerAttributesSignalE(OAIModifyLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyLoadBalancerAttributesSignalError(OAIModifyLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRegisterInstancesWithLoadBalancerSignalError() instead")
    void pOSTRegisterInstancesWithLoadBalancerSignalE(OAIRegisterEndPointsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRegisterInstancesWithLoadBalancerSignalError(OAIRegisterEndPointsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRemoveTagsSignalError() instead")
    void pOSTRemoveTagsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRemoveTagsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetLoadBalancerListenerSSLCertificateSignalError() instead")
    void pOSTSetLoadBalancerListenerSSLCertificateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetLoadBalancerListenerSSLCertificateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetLoadBalancerPoliciesForBackendServerSignalError() instead")
    void pOSTSetLoadBalancerPoliciesForBackendServerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetLoadBalancerPoliciesForBackendServerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetLoadBalancerPoliciesOfListenerSignalError() instead")
    void pOSTSetLoadBalancerPoliciesOfListenerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetLoadBalancerPoliciesOfListenerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETAddTagsSignalErrorFull() instead")
    void gETAddTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAddTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETApplySecurityGroupsToLoadBalancerSignalErrorFull() instead")
    void gETApplySecurityGroupsToLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETApplySecurityGroupsToLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAttachLoadBalancerToSubnetsSignalErrorFull() instead")
    void gETAttachLoadBalancerToSubnetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAttachLoadBalancerToSubnetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETConfigureHealthCheckSignalErrorFull() instead")
    void gETConfigureHealthCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETConfigureHealthCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateAppCookieStickinessPolicySignalErrorFull() instead")
    void gETCreateAppCookieStickinessPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateAppCookieStickinessPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateLBCookieStickinessPolicySignalErrorFull() instead")
    void gETCreateLBCookieStickinessPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateLBCookieStickinessPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateLoadBalancerSignalErrorFull() instead")
    void gETCreateLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateLoadBalancerListenersSignalErrorFull() instead")
    void gETCreateLoadBalancerListenersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateLoadBalancerListenersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateLoadBalancerPolicySignalErrorFull() instead")
    void gETCreateLoadBalancerPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateLoadBalancerPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteLoadBalancerSignalErrorFull() instead")
    void gETDeleteLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteLoadBalancerListenersSignalErrorFull() instead")
    void gETDeleteLoadBalancerListenersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteLoadBalancerListenersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteLoadBalancerPolicySignalErrorFull() instead")
    void gETDeleteLoadBalancerPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteLoadBalancerPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeregisterInstancesFromLoadBalancerSignalErrorFull() instead")
    void gETDeregisterInstancesFromLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeregisterInstancesFromLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAccountLimitsSignalErrorFull() instead")
    void gETDescribeAccountLimitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAccountLimitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeInstanceHealthSignalErrorFull() instead")
    void gETDescribeInstanceHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeInstanceHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancerAttributesSignalErrorFull() instead")
    void gETDescribeLoadBalancerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancerPoliciesSignalErrorFull() instead")
    void gETDescribeLoadBalancerPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancerPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancerPolicyTypesSignalErrorFull() instead")
    void gETDescribeLoadBalancerPolicyTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancerPolicyTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancersSignalErrorFull() instead")
    void gETDescribeLoadBalancersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTagsSignalErrorFull() instead")
    void gETDescribeTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetachLoadBalancerFromSubnetsSignalErrorFull() instead")
    void gETDetachLoadBalancerFromSubnetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetachLoadBalancerFromSubnetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisableAvailabilityZonesForLoadBalancerSignalErrorFull() instead")
    void gETDisableAvailabilityZonesForLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisableAvailabilityZonesForLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnableAvailabilityZonesForLoadBalancerSignalErrorFull() instead")
    void gETEnableAvailabilityZonesForLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnableAvailabilityZonesForLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyLoadBalancerAttributesSignalErrorFull() instead")
    void gETModifyLoadBalancerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyLoadBalancerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRegisterInstancesWithLoadBalancerSignalErrorFull() instead")
    void gETRegisterInstancesWithLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRegisterInstancesWithLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRemoveTagsSignalErrorFull() instead")
    void gETRemoveTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRemoveTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetLoadBalancerListenerSSLCertificateSignalErrorFull() instead")
    void gETSetLoadBalancerListenerSSLCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetLoadBalancerListenerSSLCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetLoadBalancerPoliciesForBackendServerSignalErrorFull() instead")
    void gETSetLoadBalancerPoliciesForBackendServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetLoadBalancerPoliciesForBackendServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetLoadBalancerPoliciesOfListenerSignalErrorFull() instead")
    void gETSetLoadBalancerPoliciesOfListenerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetLoadBalancerPoliciesOfListenerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAddTagsSignalErrorFull() instead")
    void pOSTAddTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAddTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTApplySecurityGroupsToLoadBalancerSignalErrorFull() instead")
    void pOSTApplySecurityGroupsToLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTApplySecurityGroupsToLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAttachLoadBalancerToSubnetsSignalErrorFull() instead")
    void pOSTAttachLoadBalancerToSubnetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAttachLoadBalancerToSubnetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTConfigureHealthCheckSignalErrorFull() instead")
    void pOSTConfigureHealthCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTConfigureHealthCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateAppCookieStickinessPolicySignalErrorFull() instead")
    void pOSTCreateAppCookieStickinessPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateAppCookieStickinessPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateLBCookieStickinessPolicySignalErrorFull() instead")
    void pOSTCreateLBCookieStickinessPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateLBCookieStickinessPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateLoadBalancerSignalErrorFull() instead")
    void pOSTCreateLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateLoadBalancerListenersSignalErrorFull() instead")
    void pOSTCreateLoadBalancerListenersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateLoadBalancerListenersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateLoadBalancerPolicySignalErrorFull() instead")
    void pOSTCreateLoadBalancerPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateLoadBalancerPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteLoadBalancerSignalErrorFull() instead")
    void pOSTDeleteLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteLoadBalancerListenersSignalErrorFull() instead")
    void pOSTDeleteLoadBalancerListenersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteLoadBalancerListenersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteLoadBalancerPolicySignalErrorFull() instead")
    void pOSTDeleteLoadBalancerPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteLoadBalancerPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeregisterInstancesFromLoadBalancerSignalErrorFull() instead")
    void pOSTDeregisterInstancesFromLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeregisterInstancesFromLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAccountLimitsSignalErrorFull() instead")
    void pOSTDescribeAccountLimitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAccountLimitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeInstanceHealthSignalErrorFull() instead")
    void pOSTDescribeInstanceHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeInstanceHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancerAttributesSignalErrorFull() instead")
    void pOSTDescribeLoadBalancerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancerPoliciesSignalErrorFull() instead")
    void pOSTDescribeLoadBalancerPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancerPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancerPolicyTypesSignalErrorFull() instead")
    void pOSTDescribeLoadBalancerPolicyTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancerPolicyTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancersSignalErrorFull() instead")
    void pOSTDescribeLoadBalancersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTagsSignalErrorFull() instead")
    void pOSTDescribeTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetachLoadBalancerFromSubnetsSignalErrorFull() instead")
    void pOSTDetachLoadBalancerFromSubnetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetachLoadBalancerFromSubnetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisableAvailabilityZonesForLoadBalancerSignalErrorFull() instead")
    void pOSTDisableAvailabilityZonesForLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisableAvailabilityZonesForLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnableAvailabilityZonesForLoadBalancerSignalErrorFull() instead")
    void pOSTEnableAvailabilityZonesForLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnableAvailabilityZonesForLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyLoadBalancerAttributesSignalErrorFull() instead")
    void pOSTModifyLoadBalancerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyLoadBalancerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRegisterInstancesWithLoadBalancerSignalErrorFull() instead")
    void pOSTRegisterInstancesWithLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRegisterInstancesWithLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRemoveTagsSignalErrorFull() instead")
    void pOSTRemoveTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRemoveTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetLoadBalancerListenerSSLCertificateSignalErrorFull() instead")
    void pOSTSetLoadBalancerListenerSSLCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetLoadBalancerListenerSSLCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetLoadBalancerPoliciesForBackendServerSignalErrorFull() instead")
    void pOSTSetLoadBalancerPoliciesForBackendServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetLoadBalancerPoliciesForBackendServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetLoadBalancerPoliciesOfListenerSignalErrorFull() instead")
    void pOSTSetLoadBalancerPoliciesOfListenerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetLoadBalancerPoliciesOfListenerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
