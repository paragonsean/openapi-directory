/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListenerDescription_Listener.h
 *
 * 
 */

#ifndef OAIListenerDescription_Listener_H
#define OAIListenerDescription_Listener_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListenerDescription_Listener : public OAIObject {
public:
    OAIListenerDescription_Listener();
    OAIListenerDescription_Listener(QString json);
    ~OAIListenerDescription_Listener() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    qint32 getLoadBalancerPort() const;
    void setLoadBalancerPort(const qint32 &load_balancer_port);
    bool is_load_balancer_port_Set() const;
    bool is_load_balancer_port_Valid() const;

    QString getInstanceProtocol() const;
    void setInstanceProtocol(const QString &instance_protocol);
    bool is_instance_protocol_Set() const;
    bool is_instance_protocol_Valid() const;

    qint32 getInstancePort() const;
    void setInstancePort(const qint32 &instance_port);
    bool is_instance_port_Set() const;
    bool is_instance_port_Valid() const;

    QString getSslCertificateId() const;
    void setSslCertificateId(const QString &ssl_certificate_id);
    bool is_ssl_certificate_id_Set() const;
    bool is_ssl_certificate_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    qint32 m_load_balancer_port;
    bool m_load_balancer_port_isSet;
    bool m_load_balancer_port_isValid;

    QString m_instance_protocol;
    bool m_instance_protocol_isSet;
    bool m_instance_protocol_isValid;

    qint32 m_instance_port;
    bool m_instance_port_isSet;
    bool m_instance_port_isValid;

    QString m_ssl_certificate_id;
    bool m_ssl_certificate_id_isSet;
    bool m_ssl_certificate_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListenerDescription_Listener)

#endif // OAIListenerDescription_Listener_H
