/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog() {
    this->initializeModel();
}

OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::~OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog() {}

void OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_s3_bucket_name_isSet = false;
    m_s3_bucket_name_isValid = false;

    m_emit_interval_isSet = false;
    m_emit_interval_isValid = false;

    m_s3_bucket_prefix_isSet = false;
    m_s3_bucket_prefix_isValid = false;
}

void OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_s3_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_name, json[QString("S3BucketName")]);
    m_s3_bucket_name_isSet = !json[QString("S3BucketName")].isNull() && m_s3_bucket_name_isValid;

    m_emit_interval_isValid = ::OpenAPI::fromJsonValue(m_emit_interval, json[QString("EmitInterval")]);
    m_emit_interval_isSet = !json[QString("EmitInterval")].isNull() && m_emit_interval_isValid;

    m_s3_bucket_prefix_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_prefix, json[QString("S3BucketPrefix")]);
    m_s3_bucket_prefix_isSet = !json[QString("S3BucketPrefix")].isNull() && m_s3_bucket_prefix_isValid;
}

QString OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_s3_bucket_name_isSet) {
        obj.insert(QString("S3BucketName"), ::OpenAPI::toJsonValue(m_s3_bucket_name));
    }
    if (m_emit_interval_isSet) {
        obj.insert(QString("EmitInterval"), ::OpenAPI::toJsonValue(m_emit_interval));
    }
    if (m_s3_bucket_prefix_isSet) {
        obj.insert(QString("S3BucketPrefix"), ::OpenAPI::toJsonValue(m_s3_bucket_prefix));
    }
    return obj;
}

bool OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::getEnabled() const {
    return m_enabled;
}
void OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::getS3BucketName() const {
    return m_s3_bucket_name;
}
void OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::setS3BucketName(const QString &s3_bucket_name) {
    m_s3_bucket_name = s3_bucket_name;
    m_s3_bucket_name_isSet = true;
}

bool OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::is_s3_bucket_name_Set() const{
    return m_s3_bucket_name_isSet;
}

bool OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::is_s3_bucket_name_Valid() const{
    return m_s3_bucket_name_isValid;
}

qint32 OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::getEmitInterval() const {
    return m_emit_interval;
}
void OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::setEmitInterval(const qint32 &emit_interval) {
    m_emit_interval = emit_interval;
    m_emit_interval_isSet = true;
}

bool OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::is_emit_interval_Set() const{
    return m_emit_interval_isSet;
}

bool OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::is_emit_interval_Valid() const{
    return m_emit_interval_isValid;
}

QString OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::getS3BucketPrefix() const {
    return m_s3_bucket_prefix;
}
void OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::setS3BucketPrefix(const QString &s3_bucket_prefix) {
    m_s3_bucket_prefix = s3_bucket_prefix;
    m_s3_bucket_prefix_isSet = true;
}

bool OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::is_s3_bucket_prefix_Set() const{
    return m_s3_bucket_prefix_isSet;
}

bool OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::is_s3_bucket_prefix_Valid() const{
    return m_s3_bucket_prefix_isValid;
}

bool OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emit_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && true;
}

} // namespace OpenAPI
