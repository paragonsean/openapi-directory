/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILoadBalancerDescription.h
 *
 * Information about a load balancer.
 */

#ifndef OAILoadBalancerDescription_H
#define OAILoadBalancerDescription_H

#include <QJsonObject>

#include "OAILoadBalancerDescription_HealthCheck.h"
#include "OAILoadBalancerDescription_Policies.h"
#include "OAILoadBalancerDescription_SourceSecurityGroup.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILoadBalancerDescription_Policies;
class OAILoadBalancerDescription_HealthCheck;
class OAILoadBalancerDescription_SourceSecurityGroup;

class OAILoadBalancerDescription : public OAIObject {
public:
    OAILoadBalancerDescription();
    OAILoadBalancerDescription(QString json);
    ~OAILoadBalancerDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLoadBalancerName() const;
    void setLoadBalancerName(const QString &load_balancer_name);
    bool is_load_balancer_name_Set() const;
    bool is_load_balancer_name_Valid() const;

    QString getDnsName() const;
    void setDnsName(const QString &dns_name);
    bool is_dns_name_Set() const;
    bool is_dns_name_Valid() const;

    QString getCanonicalHostedZoneName() const;
    void setCanonicalHostedZoneName(const QString &canonical_hosted_zone_name);
    bool is_canonical_hosted_zone_name_Set() const;
    bool is_canonical_hosted_zone_name_Valid() const;

    QString getCanonicalHostedZoneNameId() const;
    void setCanonicalHostedZoneNameId(const QString &canonical_hosted_zone_name_id);
    bool is_canonical_hosted_zone_name_id_Set() const;
    bool is_canonical_hosted_zone_name_id_Valid() const;

    QList getListenerDescriptions() const;
    void setListenerDescriptions(const QList &listener_descriptions);
    bool is_listener_descriptions_Set() const;
    bool is_listener_descriptions_Valid() const;

    OAILoadBalancerDescription_Policies getPolicies() const;
    void setPolicies(const OAILoadBalancerDescription_Policies &policies);
    bool is_policies_Set() const;
    bool is_policies_Valid() const;

    QList getBackendServerDescriptions() const;
    void setBackendServerDescriptions(const QList &backend_server_descriptions);
    bool is_backend_server_descriptions_Set() const;
    bool is_backend_server_descriptions_Valid() const;

    QList getAvailabilityZones() const;
    void setAvailabilityZones(const QList &availability_zones);
    bool is_availability_zones_Set() const;
    bool is_availability_zones_Valid() const;

    QList getSubnets() const;
    void setSubnets(const QList &subnets);
    bool is_subnets_Set() const;
    bool is_subnets_Valid() const;

    QString getVpcid() const;
    void setVpcid(const QString &vpcid);
    bool is_vpcid_Set() const;
    bool is_vpcid_Valid() const;

    QList getInstances() const;
    void setInstances(const QList &instances);
    bool is_instances_Set() const;
    bool is_instances_Valid() const;

    OAILoadBalancerDescription_HealthCheck getHealthCheck() const;
    void setHealthCheck(const OAILoadBalancerDescription_HealthCheck &health_check);
    bool is_health_check_Set() const;
    bool is_health_check_Valid() const;

    OAILoadBalancerDescription_SourceSecurityGroup getSourceSecurityGroup() const;
    void setSourceSecurityGroup(const OAILoadBalancerDescription_SourceSecurityGroup &source_security_group);
    bool is_source_security_group_Set() const;
    bool is_source_security_group_Valid() const;

    QList getSecurityGroups() const;
    void setSecurityGroups(const QList &security_groups);
    bool is_security_groups_Set() const;
    bool is_security_groups_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    QString getScheme() const;
    void setScheme(const QString &scheme);
    bool is_scheme_Set() const;
    bool is_scheme_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_load_balancer_name;
    bool m_load_balancer_name_isSet;
    bool m_load_balancer_name_isValid;

    QString m_dns_name;
    bool m_dns_name_isSet;
    bool m_dns_name_isValid;

    QString m_canonical_hosted_zone_name;
    bool m_canonical_hosted_zone_name_isSet;
    bool m_canonical_hosted_zone_name_isValid;

    QString m_canonical_hosted_zone_name_id;
    bool m_canonical_hosted_zone_name_id_isSet;
    bool m_canonical_hosted_zone_name_id_isValid;

    QList m_listener_descriptions;
    bool m_listener_descriptions_isSet;
    bool m_listener_descriptions_isValid;

    OAILoadBalancerDescription_Policies m_policies;
    bool m_policies_isSet;
    bool m_policies_isValid;

    QList m_backend_server_descriptions;
    bool m_backend_server_descriptions_isSet;
    bool m_backend_server_descriptions_isValid;

    QList m_availability_zones;
    bool m_availability_zones_isSet;
    bool m_availability_zones_isValid;

    QList m_subnets;
    bool m_subnets_isSet;
    bool m_subnets_isValid;

    QString m_vpcid;
    bool m_vpcid_isSet;
    bool m_vpcid_isValid;

    QList m_instances;
    bool m_instances_isSet;
    bool m_instances_isValid;

    OAILoadBalancerDescription_HealthCheck m_health_check;
    bool m_health_check_isSet;
    bool m_health_check_isValid;

    OAILoadBalancerDescription_SourceSecurityGroup m_source_security_group;
    bool m_source_security_group_isSet;
    bool m_source_security_group_isValid;

    QList m_security_groups;
    bool m_security_groups_isSet;
    bool m_security_groups_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    QString m_scheme;
    bool m_scheme_isSet;
    bool m_scheme_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILoadBalancerDescription)

#endif // OAILoadBalancerDescription_H
