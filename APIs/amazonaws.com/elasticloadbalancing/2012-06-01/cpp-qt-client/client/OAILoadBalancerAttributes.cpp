/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadBalancerAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadBalancerAttributes::OAILoadBalancerAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadBalancerAttributes::OAILoadBalancerAttributes() {
    this->initializeModel();
}

OAILoadBalancerAttributes::~OAILoadBalancerAttributes() {}

void OAILoadBalancerAttributes::initializeModel() {

    m_cross_zone_load_balancing_isSet = false;
    m_cross_zone_load_balancing_isValid = false;

    m_access_log_isSet = false;
    m_access_log_isValid = false;

    m_connection_draining_isSet = false;
    m_connection_draining_isValid = false;

    m_connection_settings_isSet = false;
    m_connection_settings_isValid = false;

    m_additional_attributes_isSet = false;
    m_additional_attributes_isValid = false;
}

void OAILoadBalancerAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadBalancerAttributes::fromJsonObject(QJsonObject json) {

    m_cross_zone_load_balancing_isValid = ::OpenAPI::fromJsonValue(m_cross_zone_load_balancing, json[QString("CrossZoneLoadBalancing")]);
    m_cross_zone_load_balancing_isSet = !json[QString("CrossZoneLoadBalancing")].isNull() && m_cross_zone_load_balancing_isValid;

    m_access_log_isValid = ::OpenAPI::fromJsonValue(m_access_log, json[QString("AccessLog")]);
    m_access_log_isSet = !json[QString("AccessLog")].isNull() && m_access_log_isValid;

    m_connection_draining_isValid = ::OpenAPI::fromJsonValue(m_connection_draining, json[QString("ConnectionDraining")]);
    m_connection_draining_isSet = !json[QString("ConnectionDraining")].isNull() && m_connection_draining_isValid;

    m_connection_settings_isValid = ::OpenAPI::fromJsonValue(m_connection_settings, json[QString("ConnectionSettings")]);
    m_connection_settings_isSet = !json[QString("ConnectionSettings")].isNull() && m_connection_settings_isValid;

    m_additional_attributes_isValid = ::OpenAPI::fromJsonValue(m_additional_attributes, json[QString("AdditionalAttributes")]);
    m_additional_attributes_isSet = !json[QString("AdditionalAttributes")].isNull() && m_additional_attributes_isValid;
}

QString OAILoadBalancerAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadBalancerAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_cross_zone_load_balancing.isSet()) {
        obj.insert(QString("CrossZoneLoadBalancing"), ::OpenAPI::toJsonValue(m_cross_zone_load_balancing));
    }
    if (m_access_log.isSet()) {
        obj.insert(QString("AccessLog"), ::OpenAPI::toJsonValue(m_access_log));
    }
    if (m_connection_draining.isSet()) {
        obj.insert(QString("ConnectionDraining"), ::OpenAPI::toJsonValue(m_connection_draining));
    }
    if (m_connection_settings.isSet()) {
        obj.insert(QString("ConnectionSettings"), ::OpenAPI::toJsonValue(m_connection_settings));
    }
    if (m_additional_attributes.isSet()) {
        obj.insert(QString("AdditionalAttributes"), ::OpenAPI::toJsonValue(m_additional_attributes));
    }
    return obj;
}

OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_CrossZoneLoadBalancing OAILoadBalancerAttributes::getCrossZoneLoadBalancing() const {
    return m_cross_zone_load_balancing;
}
void OAILoadBalancerAttributes::setCrossZoneLoadBalancing(const OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_CrossZoneLoadBalancing &cross_zone_load_balancing) {
    m_cross_zone_load_balancing = cross_zone_load_balancing;
    m_cross_zone_load_balancing_isSet = true;
}

bool OAILoadBalancerAttributes::is_cross_zone_load_balancing_Set() const{
    return m_cross_zone_load_balancing_isSet;
}

bool OAILoadBalancerAttributes::is_cross_zone_load_balancing_Valid() const{
    return m_cross_zone_load_balancing_isValid;
}

OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog OAILoadBalancerAttributes::getAccessLog() const {
    return m_access_log;
}
void OAILoadBalancerAttributes::setAccessLog(const OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_AccessLog &access_log) {
    m_access_log = access_log;
    m_access_log_isSet = true;
}

bool OAILoadBalancerAttributes::is_access_log_Set() const{
    return m_access_log_isSet;
}

bool OAILoadBalancerAttributes::is_access_log_Valid() const{
    return m_access_log_isValid;
}

OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_ConnectionDraining OAILoadBalancerAttributes::getConnectionDraining() const {
    return m_connection_draining;
}
void OAILoadBalancerAttributes::setConnectionDraining(const OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_ConnectionDraining &connection_draining) {
    m_connection_draining = connection_draining;
    m_connection_draining_isSet = true;
}

bool OAILoadBalancerAttributes::is_connection_draining_Set() const{
    return m_connection_draining_isSet;
}

bool OAILoadBalancerAttributes::is_connection_draining_Valid() const{
    return m_connection_draining_isValid;
}

OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_ConnectionSettings OAILoadBalancerAttributes::getConnectionSettings() const {
    return m_connection_settings;
}
void OAILoadBalancerAttributes::setConnectionSettings(const OAIGET_ModifyLoadBalancerAttributes_LoadBalancerAttributes_parameter_ConnectionSettings &connection_settings) {
    m_connection_settings = connection_settings;
    m_connection_settings_isSet = true;
}

bool OAILoadBalancerAttributes::is_connection_settings_Set() const{
    return m_connection_settings_isSet;
}

bool OAILoadBalancerAttributes::is_connection_settings_Valid() const{
    return m_connection_settings_isValid;
}

QList OAILoadBalancerAttributes::getAdditionalAttributes() const {
    return m_additional_attributes;
}
void OAILoadBalancerAttributes::setAdditionalAttributes(const QList &additional_attributes) {
    m_additional_attributes = additional_attributes;
    m_additional_attributes_isSet = true;
}

bool OAILoadBalancerAttributes::is_additional_attributes_Set() const{
    return m_additional_attributes_isSet;
}

bool OAILoadBalancerAttributes::is_additional_attributes_Valid() const{
    return m_additional_attributes_isValid;
}

bool OAILoadBalancerAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cross_zone_load_balancing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_log.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_draining.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadBalancerAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
