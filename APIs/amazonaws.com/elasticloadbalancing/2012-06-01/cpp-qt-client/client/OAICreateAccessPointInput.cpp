/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccessPointInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccessPointInput::OAICreateAccessPointInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccessPointInput::OAICreateAccessPointInput() {
    this->initializeModel();
}

OAICreateAccessPointInput::~OAICreateAccessPointInput() {}

void OAICreateAccessPointInput::initializeModel() {

    m_load_balancer_name_isSet = false;
    m_load_balancer_name_isValid = false;

    m_listeners_isSet = false;
    m_listeners_isValid = false;

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAccessPointInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccessPointInput::fromJsonObject(QJsonObject json) {

    m_load_balancer_name_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_name, json[QString("LoadBalancerName")]);
    m_load_balancer_name_isSet = !json[QString("LoadBalancerName")].isNull() && m_load_balancer_name_isValid;

    m_listeners_isValid = ::OpenAPI::fromJsonValue(m_listeners, json[QString("Listeners")]);
    m_listeners_isSet = !json[QString("Listeners")].isNull() && m_listeners_isValid;

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("Subnets")]);
    m_subnets_isSet = !json[QString("Subnets")].isNull() && m_subnets_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("Scheme")]);
    m_scheme_isSet = !json[QString("Scheme")].isNull() && m_scheme_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateAccessPointInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccessPointInput::asJsonObject() const {
    QJsonObject obj;
    if (m_load_balancer_name_isSet) {
        obj.insert(QString("LoadBalancerName"), ::OpenAPI::toJsonValue(m_load_balancer_name));
    }
    if (m_listeners.isSet()) {
        obj.insert(QString("Listeners"), ::OpenAPI::toJsonValue(m_listeners));
    }
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_subnets.isSet()) {
        obj.insert(QString("Subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("Scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateAccessPointInput::getLoadBalancerName() const {
    return m_load_balancer_name;
}
void OAICreateAccessPointInput::setLoadBalancerName(const QString &load_balancer_name) {
    m_load_balancer_name = load_balancer_name;
    m_load_balancer_name_isSet = true;
}

bool OAICreateAccessPointInput::is_load_balancer_name_Set() const{
    return m_load_balancer_name_isSet;
}

bool OAICreateAccessPointInput::is_load_balancer_name_Valid() const{
    return m_load_balancer_name_isValid;
}

QList OAICreateAccessPointInput::getListeners() const {
    return m_listeners;
}
void OAICreateAccessPointInput::setListeners(const QList &listeners) {
    m_listeners = listeners;
    m_listeners_isSet = true;
}

bool OAICreateAccessPointInput::is_listeners_Set() const{
    return m_listeners_isSet;
}

bool OAICreateAccessPointInput::is_listeners_Valid() const{
    return m_listeners_isValid;
}

QList OAICreateAccessPointInput::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAICreateAccessPointInput::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAICreateAccessPointInput::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAICreateAccessPointInput::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

QList OAICreateAccessPointInput::getSubnets() const {
    return m_subnets;
}
void OAICreateAccessPointInput::setSubnets(const QList &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAICreateAccessPointInput::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAICreateAccessPointInput::is_subnets_Valid() const{
    return m_subnets_isValid;
}

QList OAICreateAccessPointInput::getSecurityGroups() const {
    return m_security_groups;
}
void OAICreateAccessPointInput::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAICreateAccessPointInput::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAICreateAccessPointInput::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

QString OAICreateAccessPointInput::getScheme() const {
    return m_scheme;
}
void OAICreateAccessPointInput::setScheme(const QString &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAICreateAccessPointInput::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAICreateAccessPointInput::is_scheme_Valid() const{
    return m_scheme_isValid;
}

QList OAICreateAccessPointInput::getTags() const {
    return m_tags;
}
void OAICreateAccessPointInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAccessPointInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAccessPointInput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAccessPointInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_load_balancer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listeners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccessPointInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_load_balancer_name_isValid && m_listeners_isValid && true;
}

} // namespace OpenAPI
