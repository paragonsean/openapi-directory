/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListenerDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListenerDescription::OAIListenerDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListenerDescription::OAIListenerDescription() {
    this->initializeModel();
}

OAIListenerDescription::~OAIListenerDescription() {}

void OAIListenerDescription::initializeModel() {

    m_listener_isSet = false;
    m_listener_isValid = false;

    m_policy_names_isSet = false;
    m_policy_names_isValid = false;
}

void OAIListenerDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListenerDescription::fromJsonObject(QJsonObject json) {

    m_listener_isValid = ::OpenAPI::fromJsonValue(m_listener, json[QString("Listener")]);
    m_listener_isSet = !json[QString("Listener")].isNull() && m_listener_isValid;

    m_policy_names_isValid = ::OpenAPI::fromJsonValue(m_policy_names, json[QString("PolicyNames")]);
    m_policy_names_isSet = !json[QString("PolicyNames")].isNull() && m_policy_names_isValid;
}

QString OAIListenerDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListenerDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_listener.isSet()) {
        obj.insert(QString("Listener"), ::OpenAPI::toJsonValue(m_listener));
    }
    if (m_policy_names.isSet()) {
        obj.insert(QString("PolicyNames"), ::OpenAPI::toJsonValue(m_policy_names));
    }
    return obj;
}

OAIListenerDescription_Listener OAIListenerDescription::getListener() const {
    return m_listener;
}
void OAIListenerDescription::setListener(const OAIListenerDescription_Listener &listener) {
    m_listener = listener;
    m_listener_isSet = true;
}

bool OAIListenerDescription::is_listener_Set() const{
    return m_listener_isSet;
}

bool OAIListenerDescription::is_listener_Valid() const{
    return m_listener_isValid;
}

QList OAIListenerDescription::getPolicyNames() const {
    return m_policy_names;
}
void OAIListenerDescription::setPolicyNames(const QList &policy_names) {
    m_policy_names = policy_names;
    m_policy_names_isSet = true;
}

bool OAIListenerDescription::is_policy_names_Set() const{
    return m_policy_names_isSet;
}

bool OAIListenerDescription::is_policy_names_Valid() const{
    return m_policy_names_isValid;
}

bool OAIListenerDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_listener.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListenerDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
