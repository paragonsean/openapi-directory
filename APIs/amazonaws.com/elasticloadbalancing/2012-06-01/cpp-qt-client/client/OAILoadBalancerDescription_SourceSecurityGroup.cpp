/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer can distribute incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.</p> <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers, and Classic Load Balancers. You can select a load balancer based on your application needs. For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers. The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p> <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>. Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.</p>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadBalancerDescription_SourceSecurityGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadBalancerDescription_SourceSecurityGroup::OAILoadBalancerDescription_SourceSecurityGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadBalancerDescription_SourceSecurityGroup::OAILoadBalancerDescription_SourceSecurityGroup() {
    this->initializeModel();
}

OAILoadBalancerDescription_SourceSecurityGroup::~OAILoadBalancerDescription_SourceSecurityGroup() {}

void OAILoadBalancerDescription_SourceSecurityGroup::initializeModel() {

    m_owner_alias_isSet = false;
    m_owner_alias_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;
}

void OAILoadBalancerDescription_SourceSecurityGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadBalancerDescription_SourceSecurityGroup::fromJsonObject(QJsonObject json) {

    m_owner_alias_isValid = ::OpenAPI::fromJsonValue(m_owner_alias, json[QString("OwnerAlias")]);
    m_owner_alias_isSet = !json[QString("OwnerAlias")].isNull() && m_owner_alias_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("GroupName")]);
    m_group_name_isSet = !json[QString("GroupName")].isNull() && m_group_name_isValid;
}

QString OAILoadBalancerDescription_SourceSecurityGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadBalancerDescription_SourceSecurityGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_owner_alias_isSet) {
        obj.insert(QString("OwnerAlias"), ::OpenAPI::toJsonValue(m_owner_alias));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("GroupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    return obj;
}

QString OAILoadBalancerDescription_SourceSecurityGroup::getOwnerAlias() const {
    return m_owner_alias;
}
void OAILoadBalancerDescription_SourceSecurityGroup::setOwnerAlias(const QString &owner_alias) {
    m_owner_alias = owner_alias;
    m_owner_alias_isSet = true;
}

bool OAILoadBalancerDescription_SourceSecurityGroup::is_owner_alias_Set() const{
    return m_owner_alias_isSet;
}

bool OAILoadBalancerDescription_SourceSecurityGroup::is_owner_alias_Valid() const{
    return m_owner_alias_isValid;
}

QString OAILoadBalancerDescription_SourceSecurityGroup::getGroupName() const {
    return m_group_name;
}
void OAILoadBalancerDescription_SourceSecurityGroup::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAILoadBalancerDescription_SourceSecurityGroup::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAILoadBalancerDescription_SourceSecurityGroup::is_group_name_Valid() const{
    return m_group_name_isValid;
}

bool OAILoadBalancerDescription_SourceSecurityGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_owner_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadBalancerDescription_SourceSecurityGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
