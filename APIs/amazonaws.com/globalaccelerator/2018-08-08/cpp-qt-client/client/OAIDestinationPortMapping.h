/**
 * AWS Global Accelerator
 * <fullname>Global Accelerator</fullname> <p>This is the <i>Global Accelerator API Reference</i>. This guide is for developers who need detailed information about Global Accelerator API actions, data types, and errors. For more information about Global Accelerator features, see the <a href=\"https://docs.aws.amazon.com/global-accelerator/latest/dg/what-is-global-accelerator.html\">Global Accelerator Developer Guide</a>.</p> <p>Global Accelerator is a service in which you create <i>accelerators</i> to improve the performance of your applications for local and global users. Depending on the type of accelerator you choose, you can gain additional benefits. </p> <ul> <li> <p>By using a standard accelerator, you can improve availability of your internet applications that are used by a global audience. With a standard accelerator, Global Accelerator directs traffic to optimal endpoints over the Amazon Web Services global network. </p> </li> <li> <p>For other scenarios, you might choose a custom routing accelerator. With a custom routing accelerator, you can use application logic to directly map one or more users to a specific endpoint among many endpoints.</p> </li> </ul> <important> <p>Global Accelerator is a global service that supports endpoints in multiple Amazon Web Services Regions but you must specify the US West (Oregon) Region to create, update, or otherwise work with accelerators. That is, for example, specify <code>--region us-west-2</code> on AWS CLI commands.</p> </important> <p>By default, Global Accelerator provides you with static IP addresses that you associate with your accelerator. The static IP addresses are anycast from the Amazon Web Services edge network. For IPv4, Global Accelerator provides two static IPv4 addresses. For dual-stack, Global Accelerator provides a total of four addresses: two static IPv4 addresses and two static IPv6 addresses. With a standard accelerator for IPv4, instead of using the addresses that Global Accelerator provides, you can configure these entry points to be IPv4 addresses from your own IP address ranges that you bring toGlobal Accelerator (BYOIP). </p> <p>For a standard accelerator, they distribute incoming application traffic across multiple endpoint resources in multiple Amazon Web Services Regions , which increases the availability of your applications. Endpoints for standard accelerators can be Network Load Balancers, Application Load Balancers, Amazon EC2 instances, or Elastic IP addresses that are located in one Amazon Web Services Region or multiple Amazon Web Services Regions. For custom routing accelerators, you map traffic that arrives to the static IP addresses to specific Amazon EC2 servers in endpoints that are virtual private cloud (VPC) subnets.</p> <important> <p>The static IP addresses remain assigned to your accelerator for as long as it exists, even if you disable the accelerator and it no longer accepts or routes traffic. However, when you <i>delete</i> an accelerator, you lose the static IP addresses that are assigned to it, so you can no longer route traffic by using them. You can use IAM policies like tag-based permissions with Global Accelerator to limit the users who have permissions to delete an accelerator. For more information, see <a href=\"https://docs.aws.amazon.com/global-accelerator/latest/dg/access-control-manage-access-tag-policies.html\">Tag-based policies</a>.</p> </important> <p>For standard accelerators, Global Accelerator uses the Amazon Web Services global network to route traffic to the optimal regional endpoint based on health, client location, and policies that you configure. The service reacts instantly to changes in health or configuration to ensure that internet traffic from clients is always directed to healthy endpoints.</p> <p>For more information about understanding and using Global Accelerator, see the <a href=\"https://docs.aws.amazon.com/global-accelerator/latest/dg/what-is-global-accelerator.html\">Global Accelerator Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestinationPortMapping.h
 *
 * The port mappings for a specified endpoint IP address (destination).
 */

#ifndef OAIDestinationPortMapping_H
#define OAIDestinationPortMapping_H

#include <QJsonObject>

#include "OAICustomRoutingDestinationTrafficState.h"
#include "OAIDestinationPortMapping_DestinationSocketAddress.h"
#include "OAIIpAddressType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestinationPortMapping_DestinationSocketAddress;

class OAIDestinationPortMapping : public OAIObject {
public:
    OAIDestinationPortMapping();
    OAIDestinationPortMapping(QString json);
    ~OAIDestinationPortMapping() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAcceleratorArn() const;
    void setAcceleratorArn(const QString &accelerator_arn);
    bool is_accelerator_arn_Set() const;
    bool is_accelerator_arn_Valid() const;

    QList getAcceleratorSocketAddresses() const;
    void setAcceleratorSocketAddresses(const QList &accelerator_socket_addresses);
    bool is_accelerator_socket_addresses_Set() const;
    bool is_accelerator_socket_addresses_Valid() const;

    QString getEndpointGroupArn() const;
    void setEndpointGroupArn(const QString &endpoint_group_arn);
    bool is_endpoint_group_arn_Set() const;
    bool is_endpoint_group_arn_Valid() const;

    QString getEndpointId() const;
    void setEndpointId(const QString &endpoint_id);
    bool is_endpoint_id_Set() const;
    bool is_endpoint_id_Valid() const;

    QString getEndpointGroupRegion() const;
    void setEndpointGroupRegion(const QString &endpoint_group_region);
    bool is_endpoint_group_region_Set() const;
    bool is_endpoint_group_region_Valid() const;

    OAIDestinationPortMapping_DestinationSocketAddress getDestinationSocketAddress() const;
    void setDestinationSocketAddress(const OAIDestinationPortMapping_DestinationSocketAddress &destination_socket_address);
    bool is_destination_socket_address_Set() const;
    bool is_destination_socket_address_Valid() const;

    OAIIpAddressType getIpAddressType() const;
    void setIpAddressType(const OAIIpAddressType &ip_address_type);
    bool is_ip_address_type_Set() const;
    bool is_ip_address_type_Valid() const;

    OAICustomRoutingDestinationTrafficState getDestinationTrafficState() const;
    void setDestinationTrafficState(const OAICustomRoutingDestinationTrafficState &destination_traffic_state);
    bool is_destination_traffic_state_Set() const;
    bool is_destination_traffic_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_accelerator_arn;
    bool m_accelerator_arn_isSet;
    bool m_accelerator_arn_isValid;

    QList m_accelerator_socket_addresses;
    bool m_accelerator_socket_addresses_isSet;
    bool m_accelerator_socket_addresses_isValid;

    QString m_endpoint_group_arn;
    bool m_endpoint_group_arn_isSet;
    bool m_endpoint_group_arn_isValid;

    QString m_endpoint_id;
    bool m_endpoint_id_isSet;
    bool m_endpoint_id_isValid;

    QString m_endpoint_group_region;
    bool m_endpoint_group_region_isSet;
    bool m_endpoint_group_region_isValid;

    OAIDestinationPortMapping_DestinationSocketAddress m_destination_socket_address;
    bool m_destination_socket_address_isSet;
    bool m_destination_socket_address_isValid;

    OAIIpAddressType m_ip_address_type;
    bool m_ip_address_type_isSet;
    bool m_ip_address_type_isValid;

    OAICustomRoutingDestinationTrafficState m_destination_traffic_state;
    bool m_destination_traffic_state_isSet;
    bool m_destination_traffic_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestinationPortMapping)

#endif // OAIDestinationPortMapping_H
