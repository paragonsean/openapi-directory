/**
 * AWS Global Accelerator
 * <fullname>Global Accelerator</fullname> <p>This is the <i>Global Accelerator API Reference</i>. This guide is for developers who need detailed information about Global Accelerator API actions, data types, and errors. For more information about Global Accelerator features, see the <a href=\"https://docs.aws.amazon.com/global-accelerator/latest/dg/what-is-global-accelerator.html\">Global Accelerator Developer Guide</a>.</p> <p>Global Accelerator is a service in which you create <i>accelerators</i> to improve the performance of your applications for local and global users. Depending on the type of accelerator you choose, you can gain additional benefits. </p> <ul> <li> <p>By using a standard accelerator, you can improve availability of your internet applications that are used by a global audience. With a standard accelerator, Global Accelerator directs traffic to optimal endpoints over the Amazon Web Services global network. </p> </li> <li> <p>For other scenarios, you might choose a custom routing accelerator. With a custom routing accelerator, you can use application logic to directly map one or more users to a specific endpoint among many endpoints.</p> </li> </ul> <important> <p>Global Accelerator is a global service that supports endpoints in multiple Amazon Web Services Regions but you must specify the US West (Oregon) Region to create, update, or otherwise work with accelerators. That is, for example, specify <code>--region us-west-2</code> on AWS CLI commands.</p> </important> <p>By default, Global Accelerator provides you with static IP addresses that you associate with your accelerator. The static IP addresses are anycast from the Amazon Web Services edge network. For IPv4, Global Accelerator provides two static IPv4 addresses. For dual-stack, Global Accelerator provides a total of four addresses: two static IPv4 addresses and two static IPv6 addresses. With a standard accelerator for IPv4, instead of using the addresses that Global Accelerator provides, you can configure these entry points to be IPv4 addresses from your own IP address ranges that you bring toGlobal Accelerator (BYOIP). </p> <p>For a standard accelerator, they distribute incoming application traffic across multiple endpoint resources in multiple Amazon Web Services Regions , which increases the availability of your applications. Endpoints for standard accelerators can be Network Load Balancers, Application Load Balancers, Amazon EC2 instances, or Elastic IP addresses that are located in one Amazon Web Services Region or multiple Amazon Web Services Regions. For custom routing accelerators, you map traffic that arrives to the static IP addresses to specific Amazon EC2 servers in endpoints that are virtual private cloud (VPC) subnets.</p> <important> <p>The static IP addresses remain assigned to your accelerator for as long as it exists, even if you disable the accelerator and it no longer accepts or routes traffic. However, when you <i>delete</i> an accelerator, you lose the static IP addresses that are assigned to it, so you can no longer route traffic by using them. You can use IAM policies like tag-based permissions with Global Accelerator to limit the users who have permissions to delete an accelerator. For more information, see <a href=\"https://docs.aws.amazon.com/global-accelerator/latest/dg/access-control-manage-access-tag-policies.html\">Tag-based policies</a>.</p> </important> <p>For standard accelerators, Global Accelerator uses the Amazon Web Services global network to route traffic to the optimal regional endpoint based on health, client location, and policies that you configure. The service reacts instantly to changes in health or configuration to ensure that internet traffic from clients is always directed to healthy endpoints.</p> <p>For more information about understanding and using Global Accelerator, see the <a href=\"https://docs.aws.amazon.com/global-accelerator/latest/dg/what-is-global-accelerator.html\">Global Accelerator Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsGlobalAccelerator);
  }
}(this, function(expect, AwsGlobalAccelerator) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsGlobalAccelerator.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addCustomRoutingEndpoints', function() {
      it('should call addCustomRoutingEndpoints successfully', function(done) {
        //uncomment below and update the code to test addCustomRoutingEndpoints
        //instance.addCustomRoutingEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addEndpoints', function() {
      it('should call addEndpoints successfully', function(done) {
        //uncomment below and update the code to test addEndpoints
        //instance.addEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('advertiseByoipCidr', function() {
      it('should call advertiseByoipCidr successfully', function(done) {
        //uncomment below and update the code to test advertiseByoipCidr
        //instance.advertiseByoipCidr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('allowCustomRoutingTraffic', function() {
      it('should call allowCustomRoutingTraffic successfully', function(done) {
        //uncomment below and update the code to test allowCustomRoutingTraffic
        //instance.allowCustomRoutingTraffic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAccelerator', function() {
      it('should call createAccelerator successfully', function(done) {
        //uncomment below and update the code to test createAccelerator
        //instance.createAccelerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCustomRoutingAccelerator', function() {
      it('should call createCustomRoutingAccelerator successfully', function(done) {
        //uncomment below and update the code to test createCustomRoutingAccelerator
        //instance.createCustomRoutingAccelerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCustomRoutingEndpointGroup', function() {
      it('should call createCustomRoutingEndpointGroup successfully', function(done) {
        //uncomment below and update the code to test createCustomRoutingEndpointGroup
        //instance.createCustomRoutingEndpointGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCustomRoutingListener', function() {
      it('should call createCustomRoutingListener successfully', function(done) {
        //uncomment below and update the code to test createCustomRoutingListener
        //instance.createCustomRoutingListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEndpointGroup', function() {
      it('should call createEndpointGroup successfully', function(done) {
        //uncomment below and update the code to test createEndpointGroup
        //instance.createEndpointGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createListener', function() {
      it('should call createListener successfully', function(done) {
        //uncomment below and update the code to test createListener
        //instance.createListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAccelerator', function() {
      it('should call deleteAccelerator successfully', function(done) {
        //uncomment below and update the code to test deleteAccelerator
        //instance.deleteAccelerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCustomRoutingAccelerator', function() {
      it('should call deleteCustomRoutingAccelerator successfully', function(done) {
        //uncomment below and update the code to test deleteCustomRoutingAccelerator
        //instance.deleteCustomRoutingAccelerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCustomRoutingEndpointGroup', function() {
      it('should call deleteCustomRoutingEndpointGroup successfully', function(done) {
        //uncomment below and update the code to test deleteCustomRoutingEndpointGroup
        //instance.deleteCustomRoutingEndpointGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCustomRoutingListener', function() {
      it('should call deleteCustomRoutingListener successfully', function(done) {
        //uncomment below and update the code to test deleteCustomRoutingListener
        //instance.deleteCustomRoutingListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEndpointGroup', function() {
      it('should call deleteEndpointGroup successfully', function(done) {
        //uncomment below and update the code to test deleteEndpointGroup
        //instance.deleteEndpointGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteListener', function() {
      it('should call deleteListener successfully', function(done) {
        //uncomment below and update the code to test deleteListener
        //instance.deleteListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('denyCustomRoutingTraffic', function() {
      it('should call denyCustomRoutingTraffic successfully', function(done) {
        //uncomment below and update the code to test denyCustomRoutingTraffic
        //instance.denyCustomRoutingTraffic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deprovisionByoipCidr', function() {
      it('should call deprovisionByoipCidr successfully', function(done) {
        //uncomment below and update the code to test deprovisionByoipCidr
        //instance.deprovisionByoipCidr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccelerator', function() {
      it('should call describeAccelerator successfully', function(done) {
        //uncomment below and update the code to test describeAccelerator
        //instance.describeAccelerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAcceleratorAttributes', function() {
      it('should call describeAcceleratorAttributes successfully', function(done) {
        //uncomment below and update the code to test describeAcceleratorAttributes
        //instance.describeAcceleratorAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCustomRoutingAccelerator', function() {
      it('should call describeCustomRoutingAccelerator successfully', function(done) {
        //uncomment below and update the code to test describeCustomRoutingAccelerator
        //instance.describeCustomRoutingAccelerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCustomRoutingAcceleratorAttributes', function() {
      it('should call describeCustomRoutingAcceleratorAttributes successfully', function(done) {
        //uncomment below and update the code to test describeCustomRoutingAcceleratorAttributes
        //instance.describeCustomRoutingAcceleratorAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCustomRoutingEndpointGroup', function() {
      it('should call describeCustomRoutingEndpointGroup successfully', function(done) {
        //uncomment below and update the code to test describeCustomRoutingEndpointGroup
        //instance.describeCustomRoutingEndpointGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCustomRoutingListener', function() {
      it('should call describeCustomRoutingListener successfully', function(done) {
        //uncomment below and update the code to test describeCustomRoutingListener
        //instance.describeCustomRoutingListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEndpointGroup', function() {
      it('should call describeEndpointGroup successfully', function(done) {
        //uncomment below and update the code to test describeEndpointGroup
        //instance.describeEndpointGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeListener', function() {
      it('should call describeListener successfully', function(done) {
        //uncomment below and update the code to test describeListener
        //instance.describeListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccelerators', function() {
      it('should call listAccelerators successfully', function(done) {
        //uncomment below and update the code to test listAccelerators
        //instance.listAccelerators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listByoipCidrs', function() {
      it('should call listByoipCidrs successfully', function(done) {
        //uncomment below and update the code to test listByoipCidrs
        //instance.listByoipCidrs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCustomRoutingAccelerators', function() {
      it('should call listCustomRoutingAccelerators successfully', function(done) {
        //uncomment below and update the code to test listCustomRoutingAccelerators
        //instance.listCustomRoutingAccelerators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCustomRoutingEndpointGroups', function() {
      it('should call listCustomRoutingEndpointGroups successfully', function(done) {
        //uncomment below and update the code to test listCustomRoutingEndpointGroups
        //instance.listCustomRoutingEndpointGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCustomRoutingListeners', function() {
      it('should call listCustomRoutingListeners successfully', function(done) {
        //uncomment below and update the code to test listCustomRoutingListeners
        //instance.listCustomRoutingListeners(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCustomRoutingPortMappings', function() {
      it('should call listCustomRoutingPortMappings successfully', function(done) {
        //uncomment below and update the code to test listCustomRoutingPortMappings
        //instance.listCustomRoutingPortMappings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCustomRoutingPortMappingsByDestination', function() {
      it('should call listCustomRoutingPortMappingsByDestination successfully', function(done) {
        //uncomment below and update the code to test listCustomRoutingPortMappingsByDestination
        //instance.listCustomRoutingPortMappingsByDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEndpointGroups', function() {
      it('should call listEndpointGroups successfully', function(done) {
        //uncomment below and update the code to test listEndpointGroups
        //instance.listEndpointGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listListeners', function() {
      it('should call listListeners successfully', function(done) {
        //uncomment below and update the code to test listListeners
        //instance.listListeners(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('provisionByoipCidr', function() {
      it('should call provisionByoipCidr successfully', function(done) {
        //uncomment below and update the code to test provisionByoipCidr
        //instance.provisionByoipCidr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeCustomRoutingEndpoints', function() {
      it('should call removeCustomRoutingEndpoints successfully', function(done) {
        //uncomment below and update the code to test removeCustomRoutingEndpoints
        //instance.removeCustomRoutingEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeEndpoints', function() {
      it('should call removeEndpoints successfully', function(done) {
        //uncomment below and update the code to test removeEndpoints
        //instance.removeEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAccelerator', function() {
      it('should call updateAccelerator successfully', function(done) {
        //uncomment below and update the code to test updateAccelerator
        //instance.updateAccelerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAcceleratorAttributes', function() {
      it('should call updateAcceleratorAttributes successfully', function(done) {
        //uncomment below and update the code to test updateAcceleratorAttributes
        //instance.updateAcceleratorAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCustomRoutingAccelerator', function() {
      it('should call updateCustomRoutingAccelerator successfully', function(done) {
        //uncomment below and update the code to test updateCustomRoutingAccelerator
        //instance.updateCustomRoutingAccelerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCustomRoutingAcceleratorAttributes', function() {
      it('should call updateCustomRoutingAcceleratorAttributes successfully', function(done) {
        //uncomment below and update the code to test updateCustomRoutingAcceleratorAttributes
        //instance.updateCustomRoutingAcceleratorAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCustomRoutingListener', function() {
      it('should call updateCustomRoutingListener successfully', function(done) {
        //uncomment below and update the code to test updateCustomRoutingListener
        //instance.updateCustomRoutingListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEndpointGroup', function() {
      it('should call updateEndpointGroup successfully', function(done) {
        //uncomment below and update the code to test updateEndpointGroup
        //instance.updateEndpointGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateListener', function() {
      it('should call updateListener successfully', function(done) {
        //uncomment below and update the code to test updateListener
        //instance.updateListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('withdrawByoipCidr', function() {
      it('should call withdrawByoipCidr successfully', function(done) {
        //uncomment below and update the code to test withdrawByoipCidr
        //instance.withdrawByoipCidr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
