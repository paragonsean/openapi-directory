# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AllowCustomRoutingTrafficRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_group_arn: str=None, endpoint_id: str=None, destination_addresses: List=None, destination_ports: List=None, allow_all_traffic_to_endpoint: bool=None):
        """AllowCustomRoutingTrafficRequest - a model defined in OpenAPI

        :param endpoint_group_arn: The endpoint_group_arn of this AllowCustomRoutingTrafficRequest.
        :param endpoint_id: The endpoint_id of this AllowCustomRoutingTrafficRequest.
        :param destination_addresses: The destination_addresses of this AllowCustomRoutingTrafficRequest.
        :param destination_ports: The destination_ports of this AllowCustomRoutingTrafficRequest.
        :param allow_all_traffic_to_endpoint: The allow_all_traffic_to_endpoint of this AllowCustomRoutingTrafficRequest.
        """
        self.openapi_types = {
            'endpoint_group_arn': str,
            'endpoint_id': str,
            'destination_addresses': List,
            'destination_ports': List,
            'allow_all_traffic_to_endpoint': bool
        }

        self.attribute_map = {
            'endpoint_group_arn': 'EndpointGroupArn',
            'endpoint_id': 'EndpointId',
            'destination_addresses': 'DestinationAddresses',
            'destination_ports': 'DestinationPorts',
            'allow_all_traffic_to_endpoint': 'AllowAllTrafficToEndpoint'
        }

        self._endpoint_group_arn = endpoint_group_arn
        self._endpoint_id = endpoint_id
        self._destination_addresses = destination_addresses
        self._destination_ports = destination_ports
        self._allow_all_traffic_to_endpoint = allow_all_traffic_to_endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AllowCustomRoutingTrafficRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AllowCustomRoutingTrafficRequest of this AllowCustomRoutingTrafficRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_group_arn(self):
        """Gets the endpoint_group_arn of this AllowCustomRoutingTrafficRequest.


        :return: The endpoint_group_arn of this AllowCustomRoutingTrafficRequest.
        :rtype: str
        """
        return self._endpoint_group_arn

    @endpoint_group_arn.setter
    def endpoint_group_arn(self, endpoint_group_arn):
        """Sets the endpoint_group_arn of this AllowCustomRoutingTrafficRequest.


        :param endpoint_group_arn: The endpoint_group_arn of this AllowCustomRoutingTrafficRequest.
        :type endpoint_group_arn: str
        """
        if endpoint_group_arn is None:
            raise ValueError("Invalid value for `endpoint_group_arn`, must not be `None`")

        self._endpoint_group_arn = endpoint_group_arn

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this AllowCustomRoutingTrafficRequest.


        :return: The endpoint_id of this AllowCustomRoutingTrafficRequest.
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this AllowCustomRoutingTrafficRequest.


        :param endpoint_id: The endpoint_id of this AllowCustomRoutingTrafficRequest.
        :type endpoint_id: str
        """
        if endpoint_id is None:
            raise ValueError("Invalid value for `endpoint_id`, must not be `None`")

        self._endpoint_id = endpoint_id

    @property
    def destination_addresses(self):
        """Gets the destination_addresses of this AllowCustomRoutingTrafficRequest.


        :return: The destination_addresses of this AllowCustomRoutingTrafficRequest.
        :rtype: List
        """
        return self._destination_addresses

    @destination_addresses.setter
    def destination_addresses(self, destination_addresses):
        """Sets the destination_addresses of this AllowCustomRoutingTrafficRequest.


        :param destination_addresses: The destination_addresses of this AllowCustomRoutingTrafficRequest.
        :type destination_addresses: List
        """

        self._destination_addresses = destination_addresses

    @property
    def destination_ports(self):
        """Gets the destination_ports of this AllowCustomRoutingTrafficRequest.


        :return: The destination_ports of this AllowCustomRoutingTrafficRequest.
        :rtype: List
        """
        return self._destination_ports

    @destination_ports.setter
    def destination_ports(self, destination_ports):
        """Sets the destination_ports of this AllowCustomRoutingTrafficRequest.


        :param destination_ports: The destination_ports of this AllowCustomRoutingTrafficRequest.
        :type destination_ports: List
        """

        self._destination_ports = destination_ports

    @property
    def allow_all_traffic_to_endpoint(self):
        """Gets the allow_all_traffic_to_endpoint of this AllowCustomRoutingTrafficRequest.


        :return: The allow_all_traffic_to_endpoint of this AllowCustomRoutingTrafficRequest.
        :rtype: bool
        """
        return self._allow_all_traffic_to_endpoint

    @allow_all_traffic_to_endpoint.setter
    def allow_all_traffic_to_endpoint(self, allow_all_traffic_to_endpoint):
        """Sets the allow_all_traffic_to_endpoint of this AllowCustomRoutingTrafficRequest.


        :param allow_all_traffic_to_endpoint: The allow_all_traffic_to_endpoint of this AllowCustomRoutingTrafficRequest.
        :type allow_all_traffic_to_endpoint: bool
        """

        self._allow_all_traffic_to_endpoint = allow_all_traffic_to_endpoint
