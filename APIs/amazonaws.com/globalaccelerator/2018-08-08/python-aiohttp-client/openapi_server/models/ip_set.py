# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_address_family import IpAddressFamily
from openapi_server import util


class IpSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_family: str=None, ip_addresses: List=None, ip_address_family: IpAddressFamily=None):
        """IpSet - a model defined in OpenAPI

        :param ip_family: The ip_family of this IpSet.
        :param ip_addresses: The ip_addresses of this IpSet.
        :param ip_address_family: The ip_address_family of this IpSet.
        """
        self.openapi_types = {
            'ip_family': str,
            'ip_addresses': List,
            'ip_address_family': IpAddressFamily
        }

        self.attribute_map = {
            'ip_family': 'IpFamily',
            'ip_addresses': 'IpAddresses',
            'ip_address_family': 'IpAddressFamily'
        }

        self._ip_family = ip_family
        self._ip_addresses = ip_addresses
        self._ip_address_family = ip_address_family

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IpSet of this IpSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_family(self):
        """Gets the ip_family of this IpSet.


        :return: The ip_family of this IpSet.
        :rtype: str
        """
        return self._ip_family

    @ip_family.setter
    def ip_family(self, ip_family):
        """Sets the ip_family of this IpSet.


        :param ip_family: The ip_family of this IpSet.
        :type ip_family: str
        """

        self._ip_family = ip_family

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this IpSet.


        :return: The ip_addresses of this IpSet.
        :rtype: List
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this IpSet.


        :param ip_addresses: The ip_addresses of this IpSet.
        :type ip_addresses: List
        """

        self._ip_addresses = ip_addresses

    @property
    def ip_address_family(self):
        """Gets the ip_address_family of this IpSet.


        :return: The ip_address_family of this IpSet.
        :rtype: IpAddressFamily
        """
        return self._ip_address_family

    @ip_address_family.setter
    def ip_address_family(self, ip_address_family):
        """Sets the ip_address_family of this IpSet.


        :param ip_address_family: The ip_address_family of this IpSet.
        :type ip_address_family: IpAddressFamily
        """

        self._ip_address_family = ip_address_family
