# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_check_protocol import HealthCheckProtocol
from openapi_server import util


class CreateEndpointGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, listener_arn: str=None, endpoint_group_region: str=None, endpoint_configurations: List=None, traffic_dial_percentage: float=None, health_check_port: int=None, health_check_protocol: HealthCheckProtocol=None, health_check_path: str=None, health_check_interval_seconds: int=None, threshold_count: int=None, idempotency_token: str=None, port_overrides: List=None):
        """CreateEndpointGroupRequest - a model defined in OpenAPI

        :param listener_arn: The listener_arn of this CreateEndpointGroupRequest.
        :param endpoint_group_region: The endpoint_group_region of this CreateEndpointGroupRequest.
        :param endpoint_configurations: The endpoint_configurations of this CreateEndpointGroupRequest.
        :param traffic_dial_percentage: The traffic_dial_percentage of this CreateEndpointGroupRequest.
        :param health_check_port: The health_check_port of this CreateEndpointGroupRequest.
        :param health_check_protocol: The health_check_protocol of this CreateEndpointGroupRequest.
        :param health_check_path: The health_check_path of this CreateEndpointGroupRequest.
        :param health_check_interval_seconds: The health_check_interval_seconds of this CreateEndpointGroupRequest.
        :param threshold_count: The threshold_count of this CreateEndpointGroupRequest.
        :param idempotency_token: The idempotency_token of this CreateEndpointGroupRequest.
        :param port_overrides: The port_overrides of this CreateEndpointGroupRequest.
        """
        self.openapi_types = {
            'listener_arn': str,
            'endpoint_group_region': str,
            'endpoint_configurations': List,
            'traffic_dial_percentage': float,
            'health_check_port': int,
            'health_check_protocol': HealthCheckProtocol,
            'health_check_path': str,
            'health_check_interval_seconds': int,
            'threshold_count': int,
            'idempotency_token': str,
            'port_overrides': List
        }

        self.attribute_map = {
            'listener_arn': 'ListenerArn',
            'endpoint_group_region': 'EndpointGroupRegion',
            'endpoint_configurations': 'EndpointConfigurations',
            'traffic_dial_percentage': 'TrafficDialPercentage',
            'health_check_port': 'HealthCheckPort',
            'health_check_protocol': 'HealthCheckProtocol',
            'health_check_path': 'HealthCheckPath',
            'health_check_interval_seconds': 'HealthCheckIntervalSeconds',
            'threshold_count': 'ThresholdCount',
            'idempotency_token': 'IdempotencyToken',
            'port_overrides': 'PortOverrides'
        }

        self._listener_arn = listener_arn
        self._endpoint_group_region = endpoint_group_region
        self._endpoint_configurations = endpoint_configurations
        self._traffic_dial_percentage = traffic_dial_percentage
        self._health_check_port = health_check_port
        self._health_check_protocol = health_check_protocol
        self._health_check_path = health_check_path
        self._health_check_interval_seconds = health_check_interval_seconds
        self._threshold_count = threshold_count
        self._idempotency_token = idempotency_token
        self._port_overrides = port_overrides

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEndpointGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEndpointGroupRequest of this CreateEndpointGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def listener_arn(self):
        """Gets the listener_arn of this CreateEndpointGroupRequest.


        :return: The listener_arn of this CreateEndpointGroupRequest.
        :rtype: str
        """
        return self._listener_arn

    @listener_arn.setter
    def listener_arn(self, listener_arn):
        """Sets the listener_arn of this CreateEndpointGroupRequest.


        :param listener_arn: The listener_arn of this CreateEndpointGroupRequest.
        :type listener_arn: str
        """
        if listener_arn is None:
            raise ValueError("Invalid value for `listener_arn`, must not be `None`")

        self._listener_arn = listener_arn

    @property
    def endpoint_group_region(self):
        """Gets the endpoint_group_region of this CreateEndpointGroupRequest.


        :return: The endpoint_group_region of this CreateEndpointGroupRequest.
        :rtype: str
        """
        return self._endpoint_group_region

    @endpoint_group_region.setter
    def endpoint_group_region(self, endpoint_group_region):
        """Sets the endpoint_group_region of this CreateEndpointGroupRequest.


        :param endpoint_group_region: The endpoint_group_region of this CreateEndpointGroupRequest.
        :type endpoint_group_region: str
        """
        if endpoint_group_region is None:
            raise ValueError("Invalid value for `endpoint_group_region`, must not be `None`")

        self._endpoint_group_region = endpoint_group_region

    @property
    def endpoint_configurations(self):
        """Gets the endpoint_configurations of this CreateEndpointGroupRequest.


        :return: The endpoint_configurations of this CreateEndpointGroupRequest.
        :rtype: List
        """
        return self._endpoint_configurations

    @endpoint_configurations.setter
    def endpoint_configurations(self, endpoint_configurations):
        """Sets the endpoint_configurations of this CreateEndpointGroupRequest.


        :param endpoint_configurations: The endpoint_configurations of this CreateEndpointGroupRequest.
        :type endpoint_configurations: List
        """

        self._endpoint_configurations = endpoint_configurations

    @property
    def traffic_dial_percentage(self):
        """Gets the traffic_dial_percentage of this CreateEndpointGroupRequest.


        :return: The traffic_dial_percentage of this CreateEndpointGroupRequest.
        :rtype: float
        """
        return self._traffic_dial_percentage

    @traffic_dial_percentage.setter
    def traffic_dial_percentage(self, traffic_dial_percentage):
        """Sets the traffic_dial_percentage of this CreateEndpointGroupRequest.


        :param traffic_dial_percentage: The traffic_dial_percentage of this CreateEndpointGroupRequest.
        :type traffic_dial_percentage: float
        """

        self._traffic_dial_percentage = traffic_dial_percentage

    @property
    def health_check_port(self):
        """Gets the health_check_port of this CreateEndpointGroupRequest.


        :return: The health_check_port of this CreateEndpointGroupRequest.
        :rtype: int
        """
        return self._health_check_port

    @health_check_port.setter
    def health_check_port(self, health_check_port):
        """Sets the health_check_port of this CreateEndpointGroupRequest.


        :param health_check_port: The health_check_port of this CreateEndpointGroupRequest.
        :type health_check_port: int
        """

        self._health_check_port = health_check_port

    @property
    def health_check_protocol(self):
        """Gets the health_check_protocol of this CreateEndpointGroupRequest.


        :return: The health_check_protocol of this CreateEndpointGroupRequest.
        :rtype: HealthCheckProtocol
        """
        return self._health_check_protocol

    @health_check_protocol.setter
    def health_check_protocol(self, health_check_protocol):
        """Sets the health_check_protocol of this CreateEndpointGroupRequest.


        :param health_check_protocol: The health_check_protocol of this CreateEndpointGroupRequest.
        :type health_check_protocol: HealthCheckProtocol
        """

        self._health_check_protocol = health_check_protocol

    @property
    def health_check_path(self):
        """Gets the health_check_path of this CreateEndpointGroupRequest.


        :return: The health_check_path of this CreateEndpointGroupRequest.
        :rtype: str
        """
        return self._health_check_path

    @health_check_path.setter
    def health_check_path(self, health_check_path):
        """Sets the health_check_path of this CreateEndpointGroupRequest.


        :param health_check_path: The health_check_path of this CreateEndpointGroupRequest.
        :type health_check_path: str
        """

        self._health_check_path = health_check_path

    @property
    def health_check_interval_seconds(self):
        """Gets the health_check_interval_seconds of this CreateEndpointGroupRequest.


        :return: The health_check_interval_seconds of this CreateEndpointGroupRequest.
        :rtype: int
        """
        return self._health_check_interval_seconds

    @health_check_interval_seconds.setter
    def health_check_interval_seconds(self, health_check_interval_seconds):
        """Sets the health_check_interval_seconds of this CreateEndpointGroupRequest.


        :param health_check_interval_seconds: The health_check_interval_seconds of this CreateEndpointGroupRequest.
        :type health_check_interval_seconds: int
        """

        self._health_check_interval_seconds = health_check_interval_seconds

    @property
    def threshold_count(self):
        """Gets the threshold_count of this CreateEndpointGroupRequest.


        :return: The threshold_count of this CreateEndpointGroupRequest.
        :rtype: int
        """
        return self._threshold_count

    @threshold_count.setter
    def threshold_count(self, threshold_count):
        """Sets the threshold_count of this CreateEndpointGroupRequest.


        :param threshold_count: The threshold_count of this CreateEndpointGroupRequest.
        :type threshold_count: int
        """

        self._threshold_count = threshold_count

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateEndpointGroupRequest.


        :return: The idempotency_token of this CreateEndpointGroupRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateEndpointGroupRequest.


        :param idempotency_token: The idempotency_token of this CreateEndpointGroupRequest.
        :type idempotency_token: str
        """
        if idempotency_token is None:
            raise ValueError("Invalid value for `idempotency_token`, must not be `None`")

        self._idempotency_token = idempotency_token

    @property
    def port_overrides(self):
        """Gets the port_overrides of this CreateEndpointGroupRequest.


        :return: The port_overrides of this CreateEndpointGroupRequest.
        :rtype: List
        """
        return self._port_overrides

    @port_overrides.setter
    def port_overrides(self, port_overrides):
        """Sets the port_overrides of this CreateEndpointGroupRequest.


        :param port_overrides: The port_overrides of this CreateEndpointGroupRequest.
        :type port_overrides: List
        """

        self._port_overrides = port_overrides
