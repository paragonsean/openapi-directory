# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.client_affinity import ClientAffinity
from openapi_server.models.protocol import Protocol
from openapi_server import util


class Listener(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, listener_arn: str=None, port_ranges: List=None, protocol: Protocol=None, client_affinity: ClientAffinity=None):
        """Listener - a model defined in OpenAPI

        :param listener_arn: The listener_arn of this Listener.
        :param port_ranges: The port_ranges of this Listener.
        :param protocol: The protocol of this Listener.
        :param client_affinity: The client_affinity of this Listener.
        """
        self.openapi_types = {
            'listener_arn': str,
            'port_ranges': List,
            'protocol': Protocol,
            'client_affinity': ClientAffinity
        }

        self.attribute_map = {
            'listener_arn': 'ListenerArn',
            'port_ranges': 'PortRanges',
            'protocol': 'Protocol',
            'client_affinity': 'ClientAffinity'
        }

        self._listener_arn = listener_arn
        self._port_ranges = port_ranges
        self._protocol = protocol
        self._client_affinity = client_affinity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Listener':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Listener of this Listener.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def listener_arn(self):
        """Gets the listener_arn of this Listener.


        :return: The listener_arn of this Listener.
        :rtype: str
        """
        return self._listener_arn

    @listener_arn.setter
    def listener_arn(self, listener_arn):
        """Sets the listener_arn of this Listener.


        :param listener_arn: The listener_arn of this Listener.
        :type listener_arn: str
        """

        self._listener_arn = listener_arn

    @property
    def port_ranges(self):
        """Gets the port_ranges of this Listener.


        :return: The port_ranges of this Listener.
        :rtype: List
        """
        return self._port_ranges

    @port_ranges.setter
    def port_ranges(self, port_ranges):
        """Sets the port_ranges of this Listener.


        :param port_ranges: The port_ranges of this Listener.
        :type port_ranges: List
        """

        self._port_ranges = port_ranges

    @property
    def protocol(self):
        """Gets the protocol of this Listener.


        :return: The protocol of this Listener.
        :rtype: Protocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Listener.


        :param protocol: The protocol of this Listener.
        :type protocol: Protocol
        """

        self._protocol = protocol

    @property
    def client_affinity(self):
        """Gets the client_affinity of this Listener.


        :return: The client_affinity of this Listener.
        :rtype: ClientAffinity
        """
        return self._client_affinity

    @client_affinity.setter
    def client_affinity(self, client_affinity):
        """Sets the client_affinity of this Listener.


        :param client_affinity: The client_affinity of this Listener.
        :type client_affinity: ClientAffinity
        """

        self._client_affinity = client_affinity
