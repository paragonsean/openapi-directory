# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_address_type import IpAddressType
from openapi_server import util


class UpdateAcceleratorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerator_arn: str=None, name: str=None, ip_address_type: IpAddressType=None, enabled: bool=None):
        """UpdateAcceleratorRequest - a model defined in OpenAPI

        :param accelerator_arn: The accelerator_arn of this UpdateAcceleratorRequest.
        :param name: The name of this UpdateAcceleratorRequest.
        :param ip_address_type: The ip_address_type of this UpdateAcceleratorRequest.
        :param enabled: The enabled of this UpdateAcceleratorRequest.
        """
        self.openapi_types = {
            'accelerator_arn': str,
            'name': str,
            'ip_address_type': IpAddressType,
            'enabled': bool
        }

        self.attribute_map = {
            'accelerator_arn': 'AcceleratorArn',
            'name': 'Name',
            'ip_address_type': 'IpAddressType',
            'enabled': 'Enabled'
        }

        self._accelerator_arn = accelerator_arn
        self._name = name
        self._ip_address_type = ip_address_type
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAcceleratorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAcceleratorRequest of this UpdateAcceleratorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerator_arn(self):
        """Gets the accelerator_arn of this UpdateAcceleratorRequest.


        :return: The accelerator_arn of this UpdateAcceleratorRequest.
        :rtype: str
        """
        return self._accelerator_arn

    @accelerator_arn.setter
    def accelerator_arn(self, accelerator_arn):
        """Sets the accelerator_arn of this UpdateAcceleratorRequest.


        :param accelerator_arn: The accelerator_arn of this UpdateAcceleratorRequest.
        :type accelerator_arn: str
        """
        if accelerator_arn is None:
            raise ValueError("Invalid value for `accelerator_arn`, must not be `None`")

        self._accelerator_arn = accelerator_arn

    @property
    def name(self):
        """Gets the name of this UpdateAcceleratorRequest.


        :return: The name of this UpdateAcceleratorRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateAcceleratorRequest.


        :param name: The name of this UpdateAcceleratorRequest.
        :type name: str
        """

        self._name = name

    @property
    def ip_address_type(self):
        """Gets the ip_address_type of this UpdateAcceleratorRequest.


        :return: The ip_address_type of this UpdateAcceleratorRequest.
        :rtype: IpAddressType
        """
        return self._ip_address_type

    @ip_address_type.setter
    def ip_address_type(self, ip_address_type):
        """Sets the ip_address_type of this UpdateAcceleratorRequest.


        :param ip_address_type: The ip_address_type of this UpdateAcceleratorRequest.
        :type ip_address_type: IpAddressType
        """

        self._ip_address_type = ip_address_type

    @property
    def enabled(self):
        """Gets the enabled of this UpdateAcceleratorRequest.


        :return: The enabled of this UpdateAcceleratorRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateAcceleratorRequest.


        :param enabled: The enabled of this UpdateAcceleratorRequest.
        :type enabled: bool
        """

        self._enabled = enabled
