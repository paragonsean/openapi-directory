# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteListenerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, listener_arn: str=None):
        """DeleteListenerRequest - a model defined in OpenAPI

        :param listener_arn: The listener_arn of this DeleteListenerRequest.
        """
        self.openapi_types = {
            'listener_arn': str
        }

        self.attribute_map = {
            'listener_arn': 'ListenerArn'
        }

        self._listener_arn = listener_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteListenerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteListenerRequest of this DeleteListenerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def listener_arn(self):
        """Gets the listener_arn of this DeleteListenerRequest.


        :return: The listener_arn of this DeleteListenerRequest.
        :rtype: str
        """
        return self._listener_arn

    @listener_arn.setter
    def listener_arn(self, listener_arn):
        """Sets the listener_arn of this DeleteListenerRequest.


        :param listener_arn: The listener_arn of this DeleteListenerRequest.
        :type listener_arn: str
        """
        if listener_arn is None:
            raise ValueError("Invalid value for `listener_arn`, must not be `None`")

        self._listener_arn = listener_arn
