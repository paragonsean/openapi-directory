# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCustomRoutingListenerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerator_arn: str=None, port_ranges: List=None, idempotency_token: str=None):
        """CreateCustomRoutingListenerRequest - a model defined in OpenAPI

        :param accelerator_arn: The accelerator_arn of this CreateCustomRoutingListenerRequest.
        :param port_ranges: The port_ranges of this CreateCustomRoutingListenerRequest.
        :param idempotency_token: The idempotency_token of this CreateCustomRoutingListenerRequest.
        """
        self.openapi_types = {
            'accelerator_arn': str,
            'port_ranges': List,
            'idempotency_token': str
        }

        self.attribute_map = {
            'accelerator_arn': 'AcceleratorArn',
            'port_ranges': 'PortRanges',
            'idempotency_token': 'IdempotencyToken'
        }

        self._accelerator_arn = accelerator_arn
        self._port_ranges = port_ranges
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCustomRoutingListenerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCustomRoutingListenerRequest of this CreateCustomRoutingListenerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerator_arn(self):
        """Gets the accelerator_arn of this CreateCustomRoutingListenerRequest.


        :return: The accelerator_arn of this CreateCustomRoutingListenerRequest.
        :rtype: str
        """
        return self._accelerator_arn

    @accelerator_arn.setter
    def accelerator_arn(self, accelerator_arn):
        """Sets the accelerator_arn of this CreateCustomRoutingListenerRequest.


        :param accelerator_arn: The accelerator_arn of this CreateCustomRoutingListenerRequest.
        :type accelerator_arn: str
        """
        if accelerator_arn is None:
            raise ValueError("Invalid value for `accelerator_arn`, must not be `None`")

        self._accelerator_arn = accelerator_arn

    @property
    def port_ranges(self):
        """Gets the port_ranges of this CreateCustomRoutingListenerRequest.


        :return: The port_ranges of this CreateCustomRoutingListenerRequest.
        :rtype: List
        """
        return self._port_ranges

    @port_ranges.setter
    def port_ranges(self, port_ranges):
        """Sets the port_ranges of this CreateCustomRoutingListenerRequest.


        :param port_ranges: The port_ranges of this CreateCustomRoutingListenerRequest.
        :type port_ranges: List
        """
        if port_ranges is None:
            raise ValueError("Invalid value for `port_ranges`, must not be `None`")

        self._port_ranges = port_ranges

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateCustomRoutingListenerRequest.


        :return: The idempotency_token of this CreateCustomRoutingListenerRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateCustomRoutingListenerRequest.


        :param idempotency_token: The idempotency_token of this CreateCustomRoutingListenerRequest.
        :type idempotency_token: str
        """
        if idempotency_token is None:
            raise ValueError("Invalid value for `idempotency_token`, must not be `None`")

        self._idempotency_token = idempotency_token
