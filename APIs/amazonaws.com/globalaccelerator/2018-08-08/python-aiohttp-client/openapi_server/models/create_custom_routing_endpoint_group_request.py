# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCustomRoutingEndpointGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, listener_arn: str=None, endpoint_group_region: str=None, destination_configurations: List=None, idempotency_token: str=None):
        """CreateCustomRoutingEndpointGroupRequest - a model defined in OpenAPI

        :param listener_arn: The listener_arn of this CreateCustomRoutingEndpointGroupRequest.
        :param endpoint_group_region: The endpoint_group_region of this CreateCustomRoutingEndpointGroupRequest.
        :param destination_configurations: The destination_configurations of this CreateCustomRoutingEndpointGroupRequest.
        :param idempotency_token: The idempotency_token of this CreateCustomRoutingEndpointGroupRequest.
        """
        self.openapi_types = {
            'listener_arn': str,
            'endpoint_group_region': str,
            'destination_configurations': List,
            'idempotency_token': str
        }

        self.attribute_map = {
            'listener_arn': 'ListenerArn',
            'endpoint_group_region': 'EndpointGroupRegion',
            'destination_configurations': 'DestinationConfigurations',
            'idempotency_token': 'IdempotencyToken'
        }

        self._listener_arn = listener_arn
        self._endpoint_group_region = endpoint_group_region
        self._destination_configurations = destination_configurations
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCustomRoutingEndpointGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCustomRoutingEndpointGroupRequest of this CreateCustomRoutingEndpointGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def listener_arn(self):
        """Gets the listener_arn of this CreateCustomRoutingEndpointGroupRequest.


        :return: The listener_arn of this CreateCustomRoutingEndpointGroupRequest.
        :rtype: str
        """
        return self._listener_arn

    @listener_arn.setter
    def listener_arn(self, listener_arn):
        """Sets the listener_arn of this CreateCustomRoutingEndpointGroupRequest.


        :param listener_arn: The listener_arn of this CreateCustomRoutingEndpointGroupRequest.
        :type listener_arn: str
        """
        if listener_arn is None:
            raise ValueError("Invalid value for `listener_arn`, must not be `None`")

        self._listener_arn = listener_arn

    @property
    def endpoint_group_region(self):
        """Gets the endpoint_group_region of this CreateCustomRoutingEndpointGroupRequest.


        :return: The endpoint_group_region of this CreateCustomRoutingEndpointGroupRequest.
        :rtype: str
        """
        return self._endpoint_group_region

    @endpoint_group_region.setter
    def endpoint_group_region(self, endpoint_group_region):
        """Sets the endpoint_group_region of this CreateCustomRoutingEndpointGroupRequest.


        :param endpoint_group_region: The endpoint_group_region of this CreateCustomRoutingEndpointGroupRequest.
        :type endpoint_group_region: str
        """
        if endpoint_group_region is None:
            raise ValueError("Invalid value for `endpoint_group_region`, must not be `None`")

        self._endpoint_group_region = endpoint_group_region

    @property
    def destination_configurations(self):
        """Gets the destination_configurations of this CreateCustomRoutingEndpointGroupRequest.


        :return: The destination_configurations of this CreateCustomRoutingEndpointGroupRequest.
        :rtype: List
        """
        return self._destination_configurations

    @destination_configurations.setter
    def destination_configurations(self, destination_configurations):
        """Sets the destination_configurations of this CreateCustomRoutingEndpointGroupRequest.


        :param destination_configurations: The destination_configurations of this CreateCustomRoutingEndpointGroupRequest.
        :type destination_configurations: List
        """
        if destination_configurations is None:
            raise ValueError("Invalid value for `destination_configurations`, must not be `None`")

        self._destination_configurations = destination_configurations

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateCustomRoutingEndpointGroupRequest.


        :return: The idempotency_token of this CreateCustomRoutingEndpointGroupRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateCustomRoutingEndpointGroupRequest.


        :param idempotency_token: The idempotency_token of this CreateCustomRoutingEndpointGroupRequest.
        :type idempotency_token: str
        """
        if idempotency_token is None:
            raise ValueError("Invalid value for `idempotency_token`, must not be `None`")

        self._idempotency_token = idempotency_token
