# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_routing_destination_traffic_state import CustomRoutingDestinationTrafficState
from openapi_server.models.port_mapping_destination_socket_address import PortMappingDestinationSocketAddress
from openapi_server import util


class PortMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerator_port: int=None, endpoint_group_arn: str=None, endpoint_id: str=None, destination_socket_address: PortMappingDestinationSocketAddress=None, protocols: List=None, destination_traffic_state: CustomRoutingDestinationTrafficState=None):
        """PortMapping - a model defined in OpenAPI

        :param accelerator_port: The accelerator_port of this PortMapping.
        :param endpoint_group_arn: The endpoint_group_arn of this PortMapping.
        :param endpoint_id: The endpoint_id of this PortMapping.
        :param destination_socket_address: The destination_socket_address of this PortMapping.
        :param protocols: The protocols of this PortMapping.
        :param destination_traffic_state: The destination_traffic_state of this PortMapping.
        """
        self.openapi_types = {
            'accelerator_port': int,
            'endpoint_group_arn': str,
            'endpoint_id': str,
            'destination_socket_address': PortMappingDestinationSocketAddress,
            'protocols': List,
            'destination_traffic_state': CustomRoutingDestinationTrafficState
        }

        self.attribute_map = {
            'accelerator_port': 'AcceleratorPort',
            'endpoint_group_arn': 'EndpointGroupArn',
            'endpoint_id': 'EndpointId',
            'destination_socket_address': 'DestinationSocketAddress',
            'protocols': 'Protocols',
            'destination_traffic_state': 'DestinationTrafficState'
        }

        self._accelerator_port = accelerator_port
        self._endpoint_group_arn = endpoint_group_arn
        self._endpoint_id = endpoint_id
        self._destination_socket_address = destination_socket_address
        self._protocols = protocols
        self._destination_traffic_state = destination_traffic_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PortMapping of this PortMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerator_port(self):
        """Gets the accelerator_port of this PortMapping.


        :return: The accelerator_port of this PortMapping.
        :rtype: int
        """
        return self._accelerator_port

    @accelerator_port.setter
    def accelerator_port(self, accelerator_port):
        """Sets the accelerator_port of this PortMapping.


        :param accelerator_port: The accelerator_port of this PortMapping.
        :type accelerator_port: int
        """

        self._accelerator_port = accelerator_port

    @property
    def endpoint_group_arn(self):
        """Gets the endpoint_group_arn of this PortMapping.


        :return: The endpoint_group_arn of this PortMapping.
        :rtype: str
        """
        return self._endpoint_group_arn

    @endpoint_group_arn.setter
    def endpoint_group_arn(self, endpoint_group_arn):
        """Sets the endpoint_group_arn of this PortMapping.


        :param endpoint_group_arn: The endpoint_group_arn of this PortMapping.
        :type endpoint_group_arn: str
        """

        self._endpoint_group_arn = endpoint_group_arn

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this PortMapping.


        :return: The endpoint_id of this PortMapping.
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this PortMapping.


        :param endpoint_id: The endpoint_id of this PortMapping.
        :type endpoint_id: str
        """

        self._endpoint_id = endpoint_id

    @property
    def destination_socket_address(self):
        """Gets the destination_socket_address of this PortMapping.


        :return: The destination_socket_address of this PortMapping.
        :rtype: PortMappingDestinationSocketAddress
        """
        return self._destination_socket_address

    @destination_socket_address.setter
    def destination_socket_address(self, destination_socket_address):
        """Sets the destination_socket_address of this PortMapping.


        :param destination_socket_address: The destination_socket_address of this PortMapping.
        :type destination_socket_address: PortMappingDestinationSocketAddress
        """

        self._destination_socket_address = destination_socket_address

    @property
    def protocols(self):
        """Gets the protocols of this PortMapping.


        :return: The protocols of this PortMapping.
        :rtype: List
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this PortMapping.


        :param protocols: The protocols of this PortMapping.
        :type protocols: List
        """

        self._protocols = protocols

    @property
    def destination_traffic_state(self):
        """Gets the destination_traffic_state of this PortMapping.


        :return: The destination_traffic_state of this PortMapping.
        :rtype: CustomRoutingDestinationTrafficState
        """
        return self._destination_traffic_state

    @destination_traffic_state.setter
    def destination_traffic_state(self, destination_traffic_state):
        """Sets the destination_traffic_state of this PortMapping.


        :param destination_traffic_state: The destination_traffic_state of this PortMapping.
        :type destination_traffic_state: CustomRoutingDestinationTrafficState
        """

        self._destination_traffic_state = destination_traffic_state
