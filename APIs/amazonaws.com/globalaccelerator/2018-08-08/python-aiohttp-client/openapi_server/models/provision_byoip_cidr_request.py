# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provision_byoip_cidr_request_cidr_authorization_context import ProvisionByoipCidrRequestCidrAuthorizationContext
from openapi_server import util


class ProvisionByoipCidrRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cidr: str=None, cidr_authorization_context: ProvisionByoipCidrRequestCidrAuthorizationContext=None):
        """ProvisionByoipCidrRequest - a model defined in OpenAPI

        :param cidr: The cidr of this ProvisionByoipCidrRequest.
        :param cidr_authorization_context: The cidr_authorization_context of this ProvisionByoipCidrRequest.
        """
        self.openapi_types = {
            'cidr': str,
            'cidr_authorization_context': ProvisionByoipCidrRequestCidrAuthorizationContext
        }

        self.attribute_map = {
            'cidr': 'Cidr',
            'cidr_authorization_context': 'CidrAuthorizationContext'
        }

        self._cidr = cidr
        self._cidr_authorization_context = cidr_authorization_context

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvisionByoipCidrRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProvisionByoipCidrRequest of this ProvisionByoipCidrRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cidr(self):
        """Gets the cidr of this ProvisionByoipCidrRequest.


        :return: The cidr of this ProvisionByoipCidrRequest.
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this ProvisionByoipCidrRequest.


        :param cidr: The cidr of this ProvisionByoipCidrRequest.
        :type cidr: str
        """
        if cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")

        self._cidr = cidr

    @property
    def cidr_authorization_context(self):
        """Gets the cidr_authorization_context of this ProvisionByoipCidrRequest.


        :return: The cidr_authorization_context of this ProvisionByoipCidrRequest.
        :rtype: ProvisionByoipCidrRequestCidrAuthorizationContext
        """
        return self._cidr_authorization_context

    @cidr_authorization_context.setter
    def cidr_authorization_context(self, cidr_authorization_context):
        """Sets the cidr_authorization_context of this ProvisionByoipCidrRequest.


        :param cidr_authorization_context: The cidr_authorization_context of this ProvisionByoipCidrRequest.
        :type cidr_authorization_context: ProvisionByoipCidrRequestCidrAuthorizationContext
        """
        if cidr_authorization_context is None:
            raise ValueError("Invalid value for `cidr_authorization_context`, must not be `None`")

        self._cidr_authorization_context = cidr_authorization_context
