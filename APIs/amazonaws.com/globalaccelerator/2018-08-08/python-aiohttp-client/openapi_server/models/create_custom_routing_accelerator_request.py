# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_address_type import IpAddressType
from openapi_server import util


class CreateCustomRoutingAcceleratorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, ip_address_type: IpAddressType=None, ip_addresses: List=None, enabled: bool=None, idempotency_token: str=None, tags: List=None):
        """CreateCustomRoutingAcceleratorRequest - a model defined in OpenAPI

        :param name: The name of this CreateCustomRoutingAcceleratorRequest.
        :param ip_address_type: The ip_address_type of this CreateCustomRoutingAcceleratorRequest.
        :param ip_addresses: The ip_addresses of this CreateCustomRoutingAcceleratorRequest.
        :param enabled: The enabled of this CreateCustomRoutingAcceleratorRequest.
        :param idempotency_token: The idempotency_token of this CreateCustomRoutingAcceleratorRequest.
        :param tags: The tags of this CreateCustomRoutingAcceleratorRequest.
        """
        self.openapi_types = {
            'name': str,
            'ip_address_type': IpAddressType,
            'ip_addresses': List,
            'enabled': bool,
            'idempotency_token': str,
            'tags': List
        }

        self.attribute_map = {
            'name': 'Name',
            'ip_address_type': 'IpAddressType',
            'ip_addresses': 'IpAddresses',
            'enabled': 'Enabled',
            'idempotency_token': 'IdempotencyToken',
            'tags': 'Tags'
        }

        self._name = name
        self._ip_address_type = ip_address_type
        self._ip_addresses = ip_addresses
        self._enabled = enabled
        self._idempotency_token = idempotency_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCustomRoutingAcceleratorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCustomRoutingAcceleratorRequest of this CreateCustomRoutingAcceleratorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateCustomRoutingAcceleratorRequest.


        :return: The name of this CreateCustomRoutingAcceleratorRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCustomRoutingAcceleratorRequest.


        :param name: The name of this CreateCustomRoutingAcceleratorRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def ip_address_type(self):
        """Gets the ip_address_type of this CreateCustomRoutingAcceleratorRequest.


        :return: The ip_address_type of this CreateCustomRoutingAcceleratorRequest.
        :rtype: IpAddressType
        """
        return self._ip_address_type

    @ip_address_type.setter
    def ip_address_type(self, ip_address_type):
        """Sets the ip_address_type of this CreateCustomRoutingAcceleratorRequest.


        :param ip_address_type: The ip_address_type of this CreateCustomRoutingAcceleratorRequest.
        :type ip_address_type: IpAddressType
        """

        self._ip_address_type = ip_address_type

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this CreateCustomRoutingAcceleratorRequest.


        :return: The ip_addresses of this CreateCustomRoutingAcceleratorRequest.
        :rtype: List
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this CreateCustomRoutingAcceleratorRequest.


        :param ip_addresses: The ip_addresses of this CreateCustomRoutingAcceleratorRequest.
        :type ip_addresses: List
        """

        self._ip_addresses = ip_addresses

    @property
    def enabled(self):
        """Gets the enabled of this CreateCustomRoutingAcceleratorRequest.


        :return: The enabled of this CreateCustomRoutingAcceleratorRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CreateCustomRoutingAcceleratorRequest.


        :param enabled: The enabled of this CreateCustomRoutingAcceleratorRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateCustomRoutingAcceleratorRequest.


        :return: The idempotency_token of this CreateCustomRoutingAcceleratorRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateCustomRoutingAcceleratorRequest.


        :param idempotency_token: The idempotency_token of this CreateCustomRoutingAcceleratorRequest.
        :type idempotency_token: str
        """
        if idempotency_token is None:
            raise ValueError("Invalid value for `idempotency_token`, must not be `None`")

        self._idempotency_token = idempotency_token

    @property
    def tags(self):
        """Gets the tags of this CreateCustomRoutingAcceleratorRequest.


        :return: The tags of this CreateCustomRoutingAcceleratorRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateCustomRoutingAcceleratorRequest.


        :param tags: The tags of this CreateCustomRoutingAcceleratorRequest.
        :type tags: List
        """

        self._tags = tags
