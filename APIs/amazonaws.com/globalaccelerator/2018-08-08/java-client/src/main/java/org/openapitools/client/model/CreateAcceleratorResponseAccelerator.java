/*
 * AWS Global Accelerator
 * <fullname>Global Accelerator</fullname> <p>This is the <i>Global Accelerator API Reference</i>. This guide is for developers who need detailed information about Global Accelerator API actions, data types, and errors. For more information about Global Accelerator features, see the <a href=\"https://docs.aws.amazon.com/global-accelerator/latest/dg/what-is-global-accelerator.html\">Global Accelerator Developer Guide</a>.</p> <p>Global Accelerator is a service in which you create <i>accelerators</i> to improve the performance of your applications for local and global users. Depending on the type of accelerator you choose, you can gain additional benefits. </p> <ul> <li> <p>By using a standard accelerator, you can improve availability of your internet applications that are used by a global audience. With a standard accelerator, Global Accelerator directs traffic to optimal endpoints over the Amazon Web Services global network. </p> </li> <li> <p>For other scenarios, you might choose a custom routing accelerator. With a custom routing accelerator, you can use application logic to directly map one or more users to a specific endpoint among many endpoints.</p> </li> </ul> <important> <p>Global Accelerator is a global service that supports endpoints in multiple Amazon Web Services Regions but you must specify the US West (Oregon) Region to create, update, or otherwise work with accelerators. That is, for example, specify <code>--region us-west-2</code> on AWS CLI commands.</p> </important> <p>By default, Global Accelerator provides you with static IP addresses that you associate with your accelerator. The static IP addresses are anycast from the Amazon Web Services edge network. For IPv4, Global Accelerator provides two static IPv4 addresses. For dual-stack, Global Accelerator provides a total of four addresses: two static IPv4 addresses and two static IPv6 addresses. With a standard accelerator for IPv4, instead of using the addresses that Global Accelerator provides, you can configure these entry points to be IPv4 addresses from your own IP address ranges that you bring toGlobal Accelerator (BYOIP). </p> <p>For a standard accelerator, they distribute incoming application traffic across multiple endpoint resources in multiple Amazon Web Services Regions , which increases the availability of your applications. Endpoints for standard accelerators can be Network Load Balancers, Application Load Balancers, Amazon EC2 instances, or Elastic IP addresses that are located in one Amazon Web Services Region or multiple Amazon Web Services Regions. For custom routing accelerators, you map traffic that arrives to the static IP addresses to specific Amazon EC2 servers in endpoints that are virtual private cloud (VPC) subnets.</p> <important> <p>The static IP addresses remain assigned to your accelerator for as long as it exists, even if you disable the accelerator and it no longer accepts or routes traffic. However, when you <i>delete</i> an accelerator, you lose the static IP addresses that are assigned to it, so you can no longer route traffic by using them. You can use IAM policies like tag-based permissions with Global Accelerator to limit the users who have permissions to delete an accelerator. For more information, see <a href=\"https://docs.aws.amazon.com/global-accelerator/latest/dg/access-control-manage-access-tag-policies.html\">Tag-based policies</a>.</p> </important> <p>For standard accelerators, Global Accelerator uses the Amazon Web Services global network to route traffic to the optimal regional endpoint based on health, client location, and policies that you configure. The service reacts instantly to changes in health or configuration to ensure that internet traffic from clients is always directed to healthy endpoints.</p> <p>For more information about understanding and using Global Accelerator, see the <a href=\"https://docs.aws.amazon.com/global-accelerator/latest/dg/what-is-global-accelerator.html\">Global Accelerator Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-08-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AcceleratorStatus;
import org.openapitools.client.model.IpAddressType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAcceleratorResponseAccelerator
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:33.592162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAcceleratorResponseAccelerator {
  public static final String SERIALIZED_NAME_ACCELERATOR_ARN = "AcceleratorArn";
  @SerializedName(SERIALIZED_NAME_ACCELERATOR_ARN)
  private String acceleratorArn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IP_ADDRESS_TYPE = "IpAddressType";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS_TYPE)
  private IpAddressType ipAddressType;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_IP_SETS = "IpSets";
  @SerializedName(SERIALIZED_NAME_IP_SETS)
  private List ipSets;

  public static final String SERIALIZED_NAME_DNS_NAME = "DnsName";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AcceleratorStatus status;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_DUAL_STACK_DNS_NAME = "DualStackDnsName";
  @SerializedName(SERIALIZED_NAME_DUAL_STACK_DNS_NAME)
  private String dualStackDnsName;

  public static final String SERIALIZED_NAME_EVENTS = "Events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List events;

  public CreateAcceleratorResponseAccelerator() {
  }

  public CreateAcceleratorResponseAccelerator acceleratorArn(String acceleratorArn) {
    this.acceleratorArn = acceleratorArn;
    return this;
  }

  /**
   * Get acceleratorArn
   * @return acceleratorArn
   */
  @javax.annotation.Nullable
  public String getAcceleratorArn() {
    return acceleratorArn;
  }

  public void setAcceleratorArn(String acceleratorArn) {
    this.acceleratorArn = acceleratorArn;
  }


  public CreateAcceleratorResponseAccelerator name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateAcceleratorResponseAccelerator ipAddressType(IpAddressType ipAddressType) {
    this.ipAddressType = ipAddressType;
    return this;
  }

  /**
   * Get ipAddressType
   * @return ipAddressType
   */
  @javax.annotation.Nullable
  public IpAddressType getIpAddressType() {
    return ipAddressType;
  }

  public void setIpAddressType(IpAddressType ipAddressType) {
    this.ipAddressType = ipAddressType;
  }


  public CreateAcceleratorResponseAccelerator enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CreateAcceleratorResponseAccelerator ipSets(List ipSets) {
    this.ipSets = ipSets;
    return this;
  }

  /**
   * Get ipSets
   * @return ipSets
   */
  @javax.annotation.Nullable
  public List getIpSets() {
    return ipSets;
  }

  public void setIpSets(List ipSets) {
    this.ipSets = ipSets;
  }


  public CreateAcceleratorResponseAccelerator dnsName(String dnsName) {
    this.dnsName = dnsName;
    return this;
  }

  /**
   * Get dnsName
   * @return dnsName
   */
  @javax.annotation.Nullable
  public String getDnsName() {
    return dnsName;
  }

  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  public CreateAcceleratorResponseAccelerator status(AcceleratorStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public AcceleratorStatus getStatus() {
    return status;
  }

  public void setStatus(AcceleratorStatus status) {
    this.status = status;
  }


  public CreateAcceleratorResponseAccelerator createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public CreateAcceleratorResponseAccelerator lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public CreateAcceleratorResponseAccelerator dualStackDnsName(String dualStackDnsName) {
    this.dualStackDnsName = dualStackDnsName;
    return this;
  }

  /**
   * Get dualStackDnsName
   * @return dualStackDnsName
   */
  @javax.annotation.Nullable
  public String getDualStackDnsName() {
    return dualStackDnsName;
  }

  public void setDualStackDnsName(String dualStackDnsName) {
    this.dualStackDnsName = dualStackDnsName;
  }


  public CreateAcceleratorResponseAccelerator events(List events) {
    this.events = events;
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public List getEvents() {
    return events;
  }

  public void setEvents(List events) {
    this.events = events;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAcceleratorResponseAccelerator createAcceleratorResponseAccelerator = (CreateAcceleratorResponseAccelerator) o;
    return Objects.equals(this.acceleratorArn, createAcceleratorResponseAccelerator.acceleratorArn) &&
        Objects.equals(this.name, createAcceleratorResponseAccelerator.name) &&
        Objects.equals(this.ipAddressType, createAcceleratorResponseAccelerator.ipAddressType) &&
        Objects.equals(this.enabled, createAcceleratorResponseAccelerator.enabled) &&
        Objects.equals(this.ipSets, createAcceleratorResponseAccelerator.ipSets) &&
        Objects.equals(this.dnsName, createAcceleratorResponseAccelerator.dnsName) &&
        Objects.equals(this.status, createAcceleratorResponseAccelerator.status) &&
        Objects.equals(this.createdTime, createAcceleratorResponseAccelerator.createdTime) &&
        Objects.equals(this.lastModifiedTime, createAcceleratorResponseAccelerator.lastModifiedTime) &&
        Objects.equals(this.dualStackDnsName, createAcceleratorResponseAccelerator.dualStackDnsName) &&
        Objects.equals(this.events, createAcceleratorResponseAccelerator.events);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceleratorArn, name, ipAddressType, enabled, ipSets, dnsName, status, createdTime, lastModifiedTime, dualStackDnsName, events);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAcceleratorResponseAccelerator {\n");
    sb.append("    acceleratorArn: ").append(toIndentedString(acceleratorArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ipAddressType: ").append(toIndentedString(ipAddressType)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    ipSets: ").append(toIndentedString(ipSets)).append("\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    dualStackDnsName: ").append(toIndentedString(dualStackDnsName)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AcceleratorArn");
    openapiFields.add("Name");
    openapiFields.add("IpAddressType");
    openapiFields.add("Enabled");
    openapiFields.add("IpSets");
    openapiFields.add("DnsName");
    openapiFields.add("Status");
    openapiFields.add("CreatedTime");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("DualStackDnsName");
    openapiFields.add("Events");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAcceleratorResponseAccelerator
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAcceleratorResponseAccelerator.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAcceleratorResponseAccelerator is not found in the empty JSON string", CreateAcceleratorResponseAccelerator.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAcceleratorResponseAccelerator.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAcceleratorResponseAccelerator` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AcceleratorArn`
      if (jsonObj.get("AcceleratorArn") != null && !jsonObj.get("AcceleratorArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AcceleratorArn"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `IpAddressType`
      if (jsonObj.get("IpAddressType") != null && !jsonObj.get("IpAddressType").isJsonNull()) {
        IpAddressType.validateJsonElement(jsonObj.get("IpAddressType"));
      }
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
      // validate the optional field `IpSets`
      if (jsonObj.get("IpSets") != null && !jsonObj.get("IpSets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IpSets"));
      }
      // validate the optional field `DnsName`
      if (jsonObj.get("DnsName") != null && !jsonObj.get("DnsName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DnsName"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        AcceleratorStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `CreatedTime`
      if (jsonObj.get("CreatedTime") != null && !jsonObj.get("CreatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      }
      // validate the optional field `LastModifiedTime`
      if (jsonObj.get("LastModifiedTime") != null && !jsonObj.get("LastModifiedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      }
      // validate the optional field `DualStackDnsName`
      if (jsonObj.get("DualStackDnsName") != null && !jsonObj.get("DualStackDnsName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DualStackDnsName"));
      }
      // validate the optional field `Events`
      if (jsonObj.get("Events") != null && !jsonObj.get("Events").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Events"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAcceleratorResponseAccelerator.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAcceleratorResponseAccelerator' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAcceleratorResponseAccelerator> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAcceleratorResponseAccelerator.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAcceleratorResponseAccelerator>() {
           @Override
           public void write(JsonWriter out, CreateAcceleratorResponseAccelerator value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAcceleratorResponseAccelerator read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAcceleratorResponseAccelerator given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAcceleratorResponseAccelerator
   * @throws IOException if the JSON string is invalid with respect to CreateAcceleratorResponseAccelerator
   */
  public static CreateAcceleratorResponseAccelerator fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAcceleratorResponseAccelerator.class);
  }

  /**
   * Convert an instance of CreateAcceleratorResponseAccelerator to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

