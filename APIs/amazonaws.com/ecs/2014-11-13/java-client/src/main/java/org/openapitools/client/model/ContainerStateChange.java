/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that represents a change in state for a container.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerStateChange {
  public static final String SERIALIZED_NAME_CONTAINER_NAME = "containerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName;

  public static final String SERIALIZED_NAME_IMAGE_DIGEST = "imageDigest";
  @SerializedName(SERIALIZED_NAME_IMAGE_DIGEST)
  private String imageDigest;

  public static final String SERIALIZED_NAME_RUNTIME_ID = "runtimeId";
  @SerializedName(SERIALIZED_NAME_RUNTIME_ID)
  private String runtimeId;

  public static final String SERIALIZED_NAME_EXIT_CODE = "exitCode";
  @SerializedName(SERIALIZED_NAME_EXIT_CODE)
  private Integer exitCode;

  public static final String SERIALIZED_NAME_NETWORK_BINDINGS = "networkBindings";
  @SerializedName(SERIALIZED_NAME_NETWORK_BINDINGS)
  private List networkBindings;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public ContainerStateChange() {
  }

  public ContainerStateChange containerName(String containerName) {
    this.containerName = containerName;
    return this;
  }

  /**
   * Get containerName
   * @return containerName
   */
  @javax.annotation.Nullable
  public String getContainerName() {
    return containerName;
  }

  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }


  public ContainerStateChange imageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * Get imageDigest
   * @return imageDigest
   */
  @javax.annotation.Nullable
  public String getImageDigest() {
    return imageDigest;
  }

  public void setImageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
  }


  public ContainerStateChange runtimeId(String runtimeId) {
    this.runtimeId = runtimeId;
    return this;
  }

  /**
   * Get runtimeId
   * @return runtimeId
   */
  @javax.annotation.Nullable
  public String getRuntimeId() {
    return runtimeId;
  }

  public void setRuntimeId(String runtimeId) {
    this.runtimeId = runtimeId;
  }


  public ContainerStateChange exitCode(Integer exitCode) {
    this.exitCode = exitCode;
    return this;
  }

  /**
   * Get exitCode
   * @return exitCode
   */
  @javax.annotation.Nullable
  public Integer getExitCode() {
    return exitCode;
  }

  public void setExitCode(Integer exitCode) {
    this.exitCode = exitCode;
  }


  public ContainerStateChange networkBindings(List networkBindings) {
    this.networkBindings = networkBindings;
    return this;
  }

  /**
   * Get networkBindings
   * @return networkBindings
   */
  @javax.annotation.Nullable
  public List getNetworkBindings() {
    return networkBindings;
  }

  public void setNetworkBindings(List networkBindings) {
    this.networkBindings = networkBindings;
  }


  public ContainerStateChange reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public ContainerStateChange status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerStateChange containerStateChange = (ContainerStateChange) o;
    return Objects.equals(this.containerName, containerStateChange.containerName) &&
        Objects.equals(this.imageDigest, containerStateChange.imageDigest) &&
        Objects.equals(this.runtimeId, containerStateChange.runtimeId) &&
        Objects.equals(this.exitCode, containerStateChange.exitCode) &&
        Objects.equals(this.networkBindings, containerStateChange.networkBindings) &&
        Objects.equals(this.reason, containerStateChange.reason) &&
        Objects.equals(this.status, containerStateChange.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerName, imageDigest, runtimeId, exitCode, networkBindings, reason, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerStateChange {\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    imageDigest: ").append(toIndentedString(imageDigest)).append("\n");
    sb.append("    runtimeId: ").append(toIndentedString(runtimeId)).append("\n");
    sb.append("    exitCode: ").append(toIndentedString(exitCode)).append("\n");
    sb.append("    networkBindings: ").append(toIndentedString(networkBindings)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerName");
    openapiFields.add("imageDigest");
    openapiFields.add("runtimeId");
    openapiFields.add("exitCode");
    openapiFields.add("networkBindings");
    openapiFields.add("reason");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerStateChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerStateChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerStateChange is not found in the empty JSON string", ContainerStateChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerStateChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerStateChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containerName`
      if (jsonObj.get("containerName") != null && !jsonObj.get("containerName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("containerName"));
      }
      // validate the optional field `imageDigest`
      if (jsonObj.get("imageDigest") != null && !jsonObj.get("imageDigest").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageDigest"));
      }
      // validate the optional field `runtimeId`
      if (jsonObj.get("runtimeId") != null && !jsonObj.get("runtimeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("runtimeId"));
      }
      // validate the optional field `exitCode`
      if (jsonObj.get("exitCode") != null && !jsonObj.get("exitCode").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("exitCode"));
      }
      // validate the optional field `networkBindings`
      if (jsonObj.get("networkBindings") != null && !jsonObj.get("networkBindings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("networkBindings"));
      }
      // validate the optional field `reason`
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("reason"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerStateChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerStateChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerStateChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerStateChange.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerStateChange>() {
           @Override
           public void write(JsonWriter out, ContainerStateChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerStateChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerStateChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerStateChange
   * @throws IOException if the JSON string is invalid with respect to ContainerStateChange
   */
  public static ContainerStateChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerStateChange.class);
  }

  /**
   * Convert an instance of ContainerStateChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

