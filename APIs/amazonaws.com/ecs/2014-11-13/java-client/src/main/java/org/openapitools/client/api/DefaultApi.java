/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateCapacityProviderRequest;
import org.openapitools.client.model.CreateCapacityProviderResponse;
import org.openapitools.client.model.CreateClusterRequest;
import org.openapitools.client.model.CreateClusterResponse;
import org.openapitools.client.model.CreateServiceRequest;
import org.openapitools.client.model.CreateServiceResponse;
import org.openapitools.client.model.CreateTaskSetRequest;
import org.openapitools.client.model.CreateTaskSetResponse;
import org.openapitools.client.model.DeleteAccountSettingRequest;
import org.openapitools.client.model.DeleteAccountSettingResponse;
import org.openapitools.client.model.DeleteAttributesRequest;
import org.openapitools.client.model.DeleteAttributesResponse;
import org.openapitools.client.model.DeleteCapacityProviderRequest;
import org.openapitools.client.model.DeleteCapacityProviderResponse;
import org.openapitools.client.model.DeleteClusterRequest;
import org.openapitools.client.model.DeleteClusterResponse;
import org.openapitools.client.model.DeleteServiceRequest;
import org.openapitools.client.model.DeleteServiceResponse;
import org.openapitools.client.model.DeleteTaskDefinitionsRequest;
import org.openapitools.client.model.DeleteTaskDefinitionsResponse;
import org.openapitools.client.model.DeleteTaskSetRequest;
import org.openapitools.client.model.DeleteTaskSetResponse;
import org.openapitools.client.model.DeregisterContainerInstanceRequest;
import org.openapitools.client.model.DeregisterContainerInstanceResponse;
import org.openapitools.client.model.DeregisterTaskDefinitionRequest;
import org.openapitools.client.model.DeregisterTaskDefinitionResponse;
import org.openapitools.client.model.DescribeCapacityProvidersRequest;
import org.openapitools.client.model.DescribeCapacityProvidersResponse;
import org.openapitools.client.model.DescribeClustersRequest;
import org.openapitools.client.model.DescribeClustersResponse;
import org.openapitools.client.model.DescribeContainerInstancesRequest;
import org.openapitools.client.model.DescribeContainerInstancesResponse;
import org.openapitools.client.model.DescribeServicesRequest;
import org.openapitools.client.model.DescribeServicesResponse;
import org.openapitools.client.model.DescribeTaskDefinitionRequest;
import org.openapitools.client.model.DescribeTaskDefinitionResponse;
import org.openapitools.client.model.DescribeTaskSetsRequest;
import org.openapitools.client.model.DescribeTaskSetsResponse;
import org.openapitools.client.model.DescribeTasksRequest;
import org.openapitools.client.model.DescribeTasksResponse;
import org.openapitools.client.model.DiscoverPollEndpointRequest;
import org.openapitools.client.model.DiscoverPollEndpointResponse;
import org.openapitools.client.model.ExecuteCommandRequest;
import org.openapitools.client.model.ExecuteCommandResponse;
import org.openapitools.client.model.GetTaskProtectionRequest;
import org.openapitools.client.model.GetTaskProtectionResponse;
import org.openapitools.client.model.ListAccountSettingsRequest;
import org.openapitools.client.model.ListAccountSettingsResponse;
import org.openapitools.client.model.ListAttributesRequest;
import org.openapitools.client.model.ListAttributesResponse;
import org.openapitools.client.model.ListClustersRequest;
import org.openapitools.client.model.ListClustersResponse;
import org.openapitools.client.model.ListContainerInstancesRequest;
import org.openapitools.client.model.ListContainerInstancesResponse;
import org.openapitools.client.model.ListServicesByNamespaceRequest;
import org.openapitools.client.model.ListServicesByNamespaceResponse;
import org.openapitools.client.model.ListServicesRequest;
import org.openapitools.client.model.ListServicesResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTaskDefinitionFamiliesRequest;
import org.openapitools.client.model.ListTaskDefinitionFamiliesResponse;
import org.openapitools.client.model.ListTaskDefinitionsRequest;
import org.openapitools.client.model.ListTaskDefinitionsResponse;
import org.openapitools.client.model.ListTasksRequest;
import org.openapitools.client.model.ListTasksResponse;
import org.openapitools.client.model.PutAccountSettingDefaultRequest;
import org.openapitools.client.model.PutAccountSettingDefaultResponse;
import org.openapitools.client.model.PutAccountSettingRequest;
import org.openapitools.client.model.PutAccountSettingResponse;
import org.openapitools.client.model.PutAttributesRequest;
import org.openapitools.client.model.PutAttributesResponse;
import org.openapitools.client.model.PutClusterCapacityProvidersRequest;
import org.openapitools.client.model.PutClusterCapacityProvidersResponse;
import org.openapitools.client.model.RegisterContainerInstanceRequest;
import org.openapitools.client.model.RegisterContainerInstanceResponse;
import org.openapitools.client.model.RegisterTaskDefinitionRequest;
import org.openapitools.client.model.RegisterTaskDefinitionResponse;
import org.openapitools.client.model.RunTaskRequest;
import org.openapitools.client.model.RunTaskResponse;
import org.openapitools.client.model.StartTaskRequest;
import org.openapitools.client.model.StartTaskResponse;
import org.openapitools.client.model.StopTaskRequest;
import org.openapitools.client.model.StopTaskResponse;
import org.openapitools.client.model.SubmitAttachmentStateChangesRequest;
import org.openapitools.client.model.SubmitAttachmentStateChangesResponse;
import org.openapitools.client.model.SubmitContainerStateChangeRequest;
import org.openapitools.client.model.SubmitContainerStateChangeResponse;
import org.openapitools.client.model.SubmitTaskStateChangeRequest;
import org.openapitools.client.model.SubmitTaskStateChangeResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateCapacityProviderRequest;
import org.openapitools.client.model.UpdateCapacityProviderResponse;
import org.openapitools.client.model.UpdateClusterRequest;
import org.openapitools.client.model.UpdateClusterResponse;
import org.openapitools.client.model.UpdateClusterSettingsRequest;
import org.openapitools.client.model.UpdateClusterSettingsResponse;
import org.openapitools.client.model.UpdateContainerAgentRequest;
import org.openapitools.client.model.UpdateContainerAgentResponse;
import org.openapitools.client.model.UpdateContainerInstancesStateRequest;
import org.openapitools.client.model.UpdateContainerInstancesStateResponse;
import org.openapitools.client.model.UpdateServicePrimaryTaskSetRequest;
import org.openapitools.client.model.UpdateServicePrimaryTaskSetResponse;
import org.openapitools.client.model.UpdateServiceRequest;
import org.openapitools.client.model.UpdateServiceResponse;
import org.openapitools.client.model.UpdateTaskProtectionRequest;
import org.openapitools.client.model.UpdateTaskProtectionResponse;
import org.openapitools.client.model.UpdateTaskSetRequest;
import org.openapitools.client.model.UpdateTaskSetResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCapacityProvider
     * @param xAmzTarget  (required)
     * @param createCapacityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCapacityProviderCall(String xAmzTarget, CreateCapacityProviderRequest createCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCapacityProviderRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.CreateCapacityProvider";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCapacityProviderValidateBeforeCall(String xAmzTarget, CreateCapacityProviderRequest createCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createCapacityProvider(Async)");
        }

        // verify the required parameter 'createCapacityProviderRequest' is set
        if (createCapacityProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'createCapacityProviderRequest' when calling createCapacityProvider(Async)");
        }

        return createCapacityProviderCall(xAmzTarget, createCapacityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new capacity provider. Capacity providers are associated with an Amazon ECS cluster and are used in capacity provider strategies to facilitate cluster auto scaling.&lt;/p&gt; &lt;p&gt;Only capacity providers that use an Auto Scaling group can be created. Amazon ECS tasks on Fargate use the &lt;code&gt;FARGATE&lt;/code&gt; and &lt;code&gt;FARGATE_SPOT&lt;/code&gt; capacity providers. These providers are available to all accounts in the Amazon Web Services Regions that Fargate supports.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createCapacityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateCapacityProviderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public CreateCapacityProviderResponse createCapacityProvider(String xAmzTarget, CreateCapacityProviderRequest createCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateCapacityProviderResponse> localVarResp = createCapacityProviderWithHttpInfo(xAmzTarget, createCapacityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new capacity provider. Capacity providers are associated with an Amazon ECS cluster and are used in capacity provider strategies to facilitate cluster auto scaling.&lt;/p&gt; &lt;p&gt;Only capacity providers that use an Auto Scaling group can be created. Amazon ECS tasks on Fargate use the &lt;code&gt;FARGATE&lt;/code&gt; and &lt;code&gt;FARGATE_SPOT&lt;/code&gt; capacity providers. These providers are available to all accounts in the Amazon Web Services Regions that Fargate supports.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createCapacityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateCapacityProviderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCapacityProviderResponse> createCapacityProviderWithHttpInfo(String xAmzTarget, CreateCapacityProviderRequest createCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createCapacityProviderValidateBeforeCall(xAmzTarget, createCapacityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateCapacityProviderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new capacity provider. Capacity providers are associated with an Amazon ECS cluster and are used in capacity provider strategies to facilitate cluster auto scaling.&lt;/p&gt; &lt;p&gt;Only capacity providers that use an Auto Scaling group can be created. Amazon ECS tasks on Fargate use the &lt;code&gt;FARGATE&lt;/code&gt; and &lt;code&gt;FARGATE_SPOT&lt;/code&gt; capacity providers. These providers are available to all accounts in the Amazon Web Services Regions that Fargate supports.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createCapacityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCapacityProviderAsync(String xAmzTarget, CreateCapacityProviderRequest createCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateCapacityProviderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCapacityProviderValidateBeforeCall(xAmzTarget, createCapacityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateCapacityProviderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCluster
     * @param xAmzTarget  (required)
     * @param createClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClusterCall(String xAmzTarget, CreateClusterRequest createClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createClusterRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.CreateCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClusterValidateBeforeCall(String xAmzTarget, CreateClusterRequest createClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createCluster(Async)");
        }

        // verify the required parameter 'createClusterRequest' is set
        if (createClusterRequest == null) {
            throw new ApiException("Missing the required parameter 'createClusterRequest' when calling createCluster(Async)");
        }

        return createClusterCall(xAmzTarget, createClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon ECS cluster. By default, your account receives a &lt;code&gt;default&lt;/code&gt; cluster when you launch your first container instance. However, you can create your own cluster with a unique name with the &lt;code&gt;CreateCluster&lt;/code&gt; action.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you call the &lt;a&gt;CreateCluster&lt;/a&gt; API operation, Amazon ECS attempts to create the Amazon ECS service-linked role for your account. This is so that it can manage required resources in other Amazon Web Services services on your behalf. However, if the user that makes the call doesn&#39;t have permissions to create the service-linked role, it isn&#39;t created. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html\&quot;&gt;Using service-linked roles for Amazon ECS&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public CreateClusterResponse createCluster(String xAmzTarget, CreateClusterRequest createClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateClusterResponse> localVarResp = createClusterWithHttpInfo(xAmzTarget, createClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon ECS cluster. By default, your account receives a &lt;code&gt;default&lt;/code&gt; cluster when you launch your first container instance. However, you can create your own cluster with a unique name with the &lt;code&gt;CreateCluster&lt;/code&gt; action.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you call the &lt;a&gt;CreateCluster&lt;/a&gt; API operation, Amazon ECS attempts to create the Amazon ECS service-linked role for your account. This is so that it can manage required resources in other Amazon Web Services services on your behalf. However, if the user that makes the call doesn&#39;t have permissions to create the service-linked role, it isn&#39;t created. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html\&quot;&gt;Using service-linked roles for Amazon ECS&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateClusterResponse> createClusterWithHttpInfo(String xAmzTarget, CreateClusterRequest createClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createClusterValidateBeforeCall(xAmzTarget, createClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateClusterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new Amazon ECS cluster. By default, your account receives a &lt;code&gt;default&lt;/code&gt; cluster when you launch your first container instance. However, you can create your own cluster with a unique name with the &lt;code&gt;CreateCluster&lt;/code&gt; action.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you call the &lt;a&gt;CreateCluster&lt;/a&gt; API operation, Amazon ECS attempts to create the Amazon ECS service-linked role for your account. This is so that it can manage required resources in other Amazon Web Services services on your behalf. However, if the user that makes the call doesn&#39;t have permissions to create the service-linked role, it isn&#39;t created. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html\&quot;&gt;Using service-linked roles for Amazon ECS&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClusterAsync(String xAmzTarget, CreateClusterRequest createClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateClusterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClusterValidateBeforeCall(xAmzTarget, createClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateClusterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createService
     * @param xAmzTarget  (required)
     * @param createServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceCall(String xAmzTarget, CreateServiceRequest createServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createServiceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.CreateService";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServiceValidateBeforeCall(String xAmzTarget, CreateServiceRequest createServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createService(Async)");
        }

        // verify the required parameter 'createServiceRequest' is set
        if (createServiceRequest == null) {
            throw new ApiException("Missing the required parameter 'createServiceRequest' when calling createService(Async)");
        }

        return createServiceCall(xAmzTarget, createServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Runs and maintains your desired number of tasks from a specified task definition. If the number of tasks running in a service drops below the &lt;code&gt;desiredCount&lt;/code&gt;, Amazon ECS runs another copy of the task in the specified cluster. To update an existing service, see the &lt;a&gt;UpdateService&lt;/a&gt; action.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;In addition to maintaining the desired count of tasks in your service, you can optionally run your service behind one or more load balancers. The load balancers distribute traffic across the tasks that are associated with the service. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html\&quot;&gt;Service load balancing&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Tasks for services that don&#39;t use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state. Tasks for services that use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state and are reported as healthy by the load balancer.&lt;/p&gt; &lt;p&gt;There are two service scheduler strategies available:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;REPLICA&lt;/code&gt; - The replica scheduling strategy places and maintains your desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html\&quot;&gt;Service scheduler concepts&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DAEMON&lt;/code&gt; - The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks. It also stops tasks that don&#39;t meet the placement constraints. When using this strategy, you don&#39;t need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html\&quot;&gt;Service scheduler concepts&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can optionally specify a deployment configuration for your service. The deployment is initiated by changing properties. For example, the deployment might be initiated by the task definition or by your desired count of a service. This is done with an &lt;a&gt;UpdateService&lt;/a&gt; operation. The default value for a replica service for &lt;code&gt;minimumHealthyPercent&lt;/code&gt; is 100%. The default value for a daemon service for &lt;code&gt;minimumHealthyPercent&lt;/code&gt; is 0%.&lt;/p&gt; &lt;p&gt;If a service uses the &lt;code&gt;ECS&lt;/code&gt; deployment controller, the minimum healthy percent represents a lower limit on the number of tasks in a service that must remain in the &lt;code&gt;RUNNING&lt;/code&gt; state during a deployment. Specifically, it represents it as a percentage of your desired number of tasks (rounded up to the nearest integer). This happens when any of your container instances are in the &lt;code&gt;DRAINING&lt;/code&gt; state if the service contains tasks using the EC2 launch type. Using this parameter, you can deploy without using additional cluster capacity. For example, if you set your service to have desired number of four tasks and a minimum healthy percent of 50%, the scheduler might stop two existing tasks to free up cluster capacity before starting two new tasks. If they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state, tasks for services that don&#39;t use a load balancer are considered healthy . If they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state and reported as healthy by the load balancer, tasks for services that &lt;i&gt;do&lt;/i&gt; use a load balancer are considered healthy . The default value for minimum healthy percent is 100%.&lt;/p&gt; &lt;p&gt;If a service uses the &lt;code&gt;ECS&lt;/code&gt; deployment controller, the &lt;b&gt;maximum percent&lt;/b&gt; parameter represents an upper limit on the number of tasks in a service that are allowed in the &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;PENDING&lt;/code&gt; state during a deployment. Specifically, it represents it as a percentage of the desired number of tasks (rounded down to the nearest integer). This happens when any of your container instances are in the &lt;code&gt;DRAINING&lt;/code&gt; state if the service contains tasks using the EC2 launch type. Using this parameter, you can define the deployment batch size. For example, if your service has a desired number of four tasks and a maximum percent value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default value for maximum percent is 200%.&lt;/p&gt; &lt;p&gt;If a service uses either the &lt;code&gt;CODE_DEPLOY&lt;/code&gt; or &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller types and tasks that use the EC2 launch type, the &lt;b&gt;minimum healthy percent&lt;/b&gt; and &lt;b&gt;maximum percent&lt;/b&gt; values are used only to define the lower and upper limit on the number of the tasks in the service that remain in the &lt;code&gt;RUNNING&lt;/code&gt; state. This is while the container instances are in the &lt;code&gt;DRAINING&lt;/code&gt; state. If the tasks in the service use the Fargate launch type, the minimum healthy percent and maximum percent values aren&#39;t used. This is the case even if they&#39;re currently visible when describing your service.&lt;/p&gt; &lt;p&gt;When creating a service that uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller, you can specify only parameters that aren&#39;t controlled at the task set level. The only required parameter is the service name. You control your services using the &lt;a&gt;CreateTaskSet&lt;/a&gt; operation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS deployment types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When the service scheduler launches new tasks, it determines task placement. For information about task placement and task placement strategies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement.html\&quot;&gt;Amazon ECS task placement&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateServiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public CreateServiceResponse createService(String xAmzTarget, CreateServiceRequest createServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateServiceResponse> localVarResp = createServiceWithHttpInfo(xAmzTarget, createServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Runs and maintains your desired number of tasks from a specified task definition. If the number of tasks running in a service drops below the &lt;code&gt;desiredCount&lt;/code&gt;, Amazon ECS runs another copy of the task in the specified cluster. To update an existing service, see the &lt;a&gt;UpdateService&lt;/a&gt; action.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;In addition to maintaining the desired count of tasks in your service, you can optionally run your service behind one or more load balancers. The load balancers distribute traffic across the tasks that are associated with the service. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html\&quot;&gt;Service load balancing&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Tasks for services that don&#39;t use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state. Tasks for services that use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state and are reported as healthy by the load balancer.&lt;/p&gt; &lt;p&gt;There are two service scheduler strategies available:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;REPLICA&lt;/code&gt; - The replica scheduling strategy places and maintains your desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html\&quot;&gt;Service scheduler concepts&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DAEMON&lt;/code&gt; - The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks. It also stops tasks that don&#39;t meet the placement constraints. When using this strategy, you don&#39;t need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html\&quot;&gt;Service scheduler concepts&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can optionally specify a deployment configuration for your service. The deployment is initiated by changing properties. For example, the deployment might be initiated by the task definition or by your desired count of a service. This is done with an &lt;a&gt;UpdateService&lt;/a&gt; operation. The default value for a replica service for &lt;code&gt;minimumHealthyPercent&lt;/code&gt; is 100%. The default value for a daemon service for &lt;code&gt;minimumHealthyPercent&lt;/code&gt; is 0%.&lt;/p&gt; &lt;p&gt;If a service uses the &lt;code&gt;ECS&lt;/code&gt; deployment controller, the minimum healthy percent represents a lower limit on the number of tasks in a service that must remain in the &lt;code&gt;RUNNING&lt;/code&gt; state during a deployment. Specifically, it represents it as a percentage of your desired number of tasks (rounded up to the nearest integer). This happens when any of your container instances are in the &lt;code&gt;DRAINING&lt;/code&gt; state if the service contains tasks using the EC2 launch type. Using this parameter, you can deploy without using additional cluster capacity. For example, if you set your service to have desired number of four tasks and a minimum healthy percent of 50%, the scheduler might stop two existing tasks to free up cluster capacity before starting two new tasks. If they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state, tasks for services that don&#39;t use a load balancer are considered healthy . If they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state and reported as healthy by the load balancer, tasks for services that &lt;i&gt;do&lt;/i&gt; use a load balancer are considered healthy . The default value for minimum healthy percent is 100%.&lt;/p&gt; &lt;p&gt;If a service uses the &lt;code&gt;ECS&lt;/code&gt; deployment controller, the &lt;b&gt;maximum percent&lt;/b&gt; parameter represents an upper limit on the number of tasks in a service that are allowed in the &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;PENDING&lt;/code&gt; state during a deployment. Specifically, it represents it as a percentage of the desired number of tasks (rounded down to the nearest integer). This happens when any of your container instances are in the &lt;code&gt;DRAINING&lt;/code&gt; state if the service contains tasks using the EC2 launch type. Using this parameter, you can define the deployment batch size. For example, if your service has a desired number of four tasks and a maximum percent value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default value for maximum percent is 200%.&lt;/p&gt; &lt;p&gt;If a service uses either the &lt;code&gt;CODE_DEPLOY&lt;/code&gt; or &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller types and tasks that use the EC2 launch type, the &lt;b&gt;minimum healthy percent&lt;/b&gt; and &lt;b&gt;maximum percent&lt;/b&gt; values are used only to define the lower and upper limit on the number of the tasks in the service that remain in the &lt;code&gt;RUNNING&lt;/code&gt; state. This is while the container instances are in the &lt;code&gt;DRAINING&lt;/code&gt; state. If the tasks in the service use the Fargate launch type, the minimum healthy percent and maximum percent values aren&#39;t used. This is the case even if they&#39;re currently visible when describing your service.&lt;/p&gt; &lt;p&gt;When creating a service that uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller, you can specify only parameters that aren&#39;t controlled at the task set level. The only required parameter is the service name. You control your services using the &lt;a&gt;CreateTaskSet&lt;/a&gt; operation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS deployment types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When the service scheduler launches new tasks, it determines task placement. For information about task placement and task placement strategies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement.html\&quot;&gt;Amazon ECS task placement&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateServiceResponse> createServiceWithHttpInfo(String xAmzTarget, CreateServiceRequest createServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createServiceValidateBeforeCall(xAmzTarget, createServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateServiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Runs and maintains your desired number of tasks from a specified task definition. If the number of tasks running in a service drops below the &lt;code&gt;desiredCount&lt;/code&gt;, Amazon ECS runs another copy of the task in the specified cluster. To update an existing service, see the &lt;a&gt;UpdateService&lt;/a&gt; action.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;In addition to maintaining the desired count of tasks in your service, you can optionally run your service behind one or more load balancers. The load balancers distribute traffic across the tasks that are associated with the service. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html\&quot;&gt;Service load balancing&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Tasks for services that don&#39;t use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state. Tasks for services that use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state and are reported as healthy by the load balancer.&lt;/p&gt; &lt;p&gt;There are two service scheduler strategies available:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;REPLICA&lt;/code&gt; - The replica scheduling strategy places and maintains your desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html\&quot;&gt;Service scheduler concepts&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DAEMON&lt;/code&gt; - The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks. It also stops tasks that don&#39;t meet the placement constraints. When using this strategy, you don&#39;t need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html\&quot;&gt;Service scheduler concepts&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can optionally specify a deployment configuration for your service. The deployment is initiated by changing properties. For example, the deployment might be initiated by the task definition or by your desired count of a service. This is done with an &lt;a&gt;UpdateService&lt;/a&gt; operation. The default value for a replica service for &lt;code&gt;minimumHealthyPercent&lt;/code&gt; is 100%. The default value for a daemon service for &lt;code&gt;minimumHealthyPercent&lt;/code&gt; is 0%.&lt;/p&gt; &lt;p&gt;If a service uses the &lt;code&gt;ECS&lt;/code&gt; deployment controller, the minimum healthy percent represents a lower limit on the number of tasks in a service that must remain in the &lt;code&gt;RUNNING&lt;/code&gt; state during a deployment. Specifically, it represents it as a percentage of your desired number of tasks (rounded up to the nearest integer). This happens when any of your container instances are in the &lt;code&gt;DRAINING&lt;/code&gt; state if the service contains tasks using the EC2 launch type. Using this parameter, you can deploy without using additional cluster capacity. For example, if you set your service to have desired number of four tasks and a minimum healthy percent of 50%, the scheduler might stop two existing tasks to free up cluster capacity before starting two new tasks. If they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state, tasks for services that don&#39;t use a load balancer are considered healthy . If they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state and reported as healthy by the load balancer, tasks for services that &lt;i&gt;do&lt;/i&gt; use a load balancer are considered healthy . The default value for minimum healthy percent is 100%.&lt;/p&gt; &lt;p&gt;If a service uses the &lt;code&gt;ECS&lt;/code&gt; deployment controller, the &lt;b&gt;maximum percent&lt;/b&gt; parameter represents an upper limit on the number of tasks in a service that are allowed in the &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;PENDING&lt;/code&gt; state during a deployment. Specifically, it represents it as a percentage of the desired number of tasks (rounded down to the nearest integer). This happens when any of your container instances are in the &lt;code&gt;DRAINING&lt;/code&gt; state if the service contains tasks using the EC2 launch type. Using this parameter, you can define the deployment batch size. For example, if your service has a desired number of four tasks and a maximum percent value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default value for maximum percent is 200%.&lt;/p&gt; &lt;p&gt;If a service uses either the &lt;code&gt;CODE_DEPLOY&lt;/code&gt; or &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller types and tasks that use the EC2 launch type, the &lt;b&gt;minimum healthy percent&lt;/b&gt; and &lt;b&gt;maximum percent&lt;/b&gt; values are used only to define the lower and upper limit on the number of the tasks in the service that remain in the &lt;code&gt;RUNNING&lt;/code&gt; state. This is while the container instances are in the &lt;code&gt;DRAINING&lt;/code&gt; state. If the tasks in the service use the Fargate launch type, the minimum healthy percent and maximum percent values aren&#39;t used. This is the case even if they&#39;re currently visible when describing your service.&lt;/p&gt; &lt;p&gt;When creating a service that uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller, you can specify only parameters that aren&#39;t controlled at the task set level. The only required parameter is the service name. You control your services using the &lt;a&gt;CreateTaskSet&lt;/a&gt; operation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS deployment types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When the service scheduler launches new tasks, it determines task placement. For information about task placement and task placement strategies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement.html\&quot;&gt;Amazon ECS task placement&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceAsync(String xAmzTarget, CreateServiceRequest createServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateServiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServiceValidateBeforeCall(xAmzTarget, createServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateServiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTaskSet
     * @param xAmzTarget  (required)
     * @param createTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskSetCall(String xAmzTarget, CreateTaskSetRequest createTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTaskSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.CreateTaskSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskSetValidateBeforeCall(String xAmzTarget, CreateTaskSetRequest createTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createTaskSet(Async)");
        }

        // verify the required parameter 'createTaskSetRequest' is set
        if (createTaskSetRequest == null) {
            throw new ApiException("Missing the required parameter 'createTaskSetRequest' when calling createTaskSet(Async)");
        }

        return createTaskSetCall(xAmzTarget, createTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create a task set in the specified cluster and service. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS deployment types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param createTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateTaskSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public CreateTaskSetResponse createTaskSet(String xAmzTarget, CreateTaskSetRequest createTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateTaskSetResponse> localVarResp = createTaskSetWithHttpInfo(xAmzTarget, createTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a task set in the specified cluster and service. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS deployment types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param createTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateTaskSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTaskSetResponse> createTaskSetWithHttpInfo(String xAmzTarget, CreateTaskSetRequest createTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createTaskSetValidateBeforeCall(xAmzTarget, createTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateTaskSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a task set in the specified cluster and service. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS deployment types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param createTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskSetAsync(String xAmzTarget, CreateTaskSetRequest createTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateTaskSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskSetValidateBeforeCall(xAmzTarget, createTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateTaskSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccountSetting
     * @param xAmzTarget  (required)
     * @param deleteAccountSettingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountSettingCall(String xAmzTarget, DeleteAccountSettingRequest deleteAccountSettingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAccountSettingRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteAccountSetting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountSettingValidateBeforeCall(String xAmzTarget, DeleteAccountSettingRequest deleteAccountSettingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteAccountSetting(Async)");
        }

        // verify the required parameter 'deleteAccountSettingRequest' is set
        if (deleteAccountSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteAccountSettingRequest' when calling deleteAccountSetting(Async)");
        }

        return deleteAccountSettingCall(xAmzTarget, deleteAccountSettingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Disables an account setting for a specified user, role, or the root user for an account.
     * @param xAmzTarget  (required)
     * @param deleteAccountSettingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteAccountSettingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAccountSettingResponse deleteAccountSetting(String xAmzTarget, DeleteAccountSettingRequest deleteAccountSettingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteAccountSettingResponse> localVarResp = deleteAccountSettingWithHttpInfo(xAmzTarget, deleteAccountSettingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Disables an account setting for a specified user, role, or the root user for an account.
     * @param xAmzTarget  (required)
     * @param deleteAccountSettingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteAccountSettingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAccountSettingResponse> deleteAccountSettingWithHttpInfo(String xAmzTarget, DeleteAccountSettingRequest deleteAccountSettingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountSettingValidateBeforeCall(xAmzTarget, deleteAccountSettingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteAccountSettingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disables an account setting for a specified user, role, or the root user for an account.
     * @param xAmzTarget  (required)
     * @param deleteAccountSettingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountSettingAsync(String xAmzTarget, DeleteAccountSettingRequest deleteAccountSettingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteAccountSettingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountSettingValidateBeforeCall(xAmzTarget, deleteAccountSettingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteAccountSettingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAttributes
     * @param xAmzTarget  (required)
     * @param deleteAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttributesCall(String xAmzTarget, DeleteAttributesRequest deleteAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAttributesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAttributesValidateBeforeCall(String xAmzTarget, DeleteAttributesRequest deleteAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteAttributes(Async)");
        }

        // verify the required parameter 'deleteAttributesRequest' is set
        if (deleteAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteAttributesRequest' when calling deleteAttributes(Async)");
        }

        return deleteAttributesCall(xAmzTarget, deleteAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes one or more custom attributes from an Amazon ECS resource.
     * @param xAmzTarget  (required)
     * @param deleteAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttributesResponse deleteAttributes(String xAmzTarget, DeleteAttributesRequest deleteAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteAttributesResponse> localVarResp = deleteAttributesWithHttpInfo(xAmzTarget, deleteAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes one or more custom attributes from an Amazon ECS resource.
     * @param xAmzTarget  (required)
     * @param deleteAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAttributesResponse> deleteAttributesWithHttpInfo(String xAmzTarget, DeleteAttributesRequest deleteAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteAttributesValidateBeforeCall(xAmzTarget, deleteAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes one or more custom attributes from an Amazon ECS resource.
     * @param xAmzTarget  (required)
     * @param deleteAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttributesAsync(String xAmzTarget, DeleteAttributesRequest deleteAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAttributesValidateBeforeCall(xAmzTarget, deleteAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCapacityProvider
     * @param xAmzTarget  (required)
     * @param deleteCapacityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCapacityProviderCall(String xAmzTarget, DeleteCapacityProviderRequest deleteCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteCapacityProviderRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteCapacityProvider";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCapacityProviderValidateBeforeCall(String xAmzTarget, DeleteCapacityProviderRequest deleteCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteCapacityProvider(Async)");
        }

        // verify the required parameter 'deleteCapacityProviderRequest' is set
        if (deleteCapacityProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteCapacityProviderRequest' when calling deleteCapacityProvider(Async)");
        }

        return deleteCapacityProviderCall(xAmzTarget, deleteCapacityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified capacity provider.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;FARGATE&lt;/code&gt; and &lt;code&gt;FARGATE_SPOT&lt;/code&gt; capacity providers are reserved and can&#39;t be deleted. You can disassociate them from a cluster using either the &lt;a&gt;PutClusterCapacityProviders&lt;/a&gt; API or by deleting the cluster.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Prior to a capacity provider being deleted, the capacity provider must be removed from the capacity provider strategy from all services. The &lt;a&gt;UpdateService&lt;/a&gt; API can be used to remove a capacity provider from a service&#39;s capacity provider strategy. When updating a service, the &lt;code&gt;forceNewDeployment&lt;/code&gt; option can be used to ensure that any tasks using the Amazon EC2 instance capacity provided by the capacity provider are transitioned to use the capacity from the remaining capacity providers. Only capacity providers that aren&#39;t associated with a cluster can be deleted. To remove a capacity provider from a cluster, you can either use &lt;a&gt;PutClusterCapacityProviders&lt;/a&gt; or delete the cluster.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteCapacityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteCapacityProviderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCapacityProviderResponse deleteCapacityProvider(String xAmzTarget, DeleteCapacityProviderRequest deleteCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteCapacityProviderResponse> localVarResp = deleteCapacityProviderWithHttpInfo(xAmzTarget, deleteCapacityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified capacity provider.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;FARGATE&lt;/code&gt; and &lt;code&gt;FARGATE_SPOT&lt;/code&gt; capacity providers are reserved and can&#39;t be deleted. You can disassociate them from a cluster using either the &lt;a&gt;PutClusterCapacityProviders&lt;/a&gt; API or by deleting the cluster.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Prior to a capacity provider being deleted, the capacity provider must be removed from the capacity provider strategy from all services. The &lt;a&gt;UpdateService&lt;/a&gt; API can be used to remove a capacity provider from a service&#39;s capacity provider strategy. When updating a service, the &lt;code&gt;forceNewDeployment&lt;/code&gt; option can be used to ensure that any tasks using the Amazon EC2 instance capacity provided by the capacity provider are transitioned to use the capacity from the remaining capacity providers. Only capacity providers that aren&#39;t associated with a cluster can be deleted. To remove a capacity provider from a cluster, you can either use &lt;a&gt;PutClusterCapacityProviders&lt;/a&gt; or delete the cluster.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteCapacityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteCapacityProviderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteCapacityProviderResponse> deleteCapacityProviderWithHttpInfo(String xAmzTarget, DeleteCapacityProviderRequest deleteCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteCapacityProviderValidateBeforeCall(xAmzTarget, deleteCapacityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteCapacityProviderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified capacity provider.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;FARGATE&lt;/code&gt; and &lt;code&gt;FARGATE_SPOT&lt;/code&gt; capacity providers are reserved and can&#39;t be deleted. You can disassociate them from a cluster using either the &lt;a&gt;PutClusterCapacityProviders&lt;/a&gt; API or by deleting the cluster.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Prior to a capacity provider being deleted, the capacity provider must be removed from the capacity provider strategy from all services. The &lt;a&gt;UpdateService&lt;/a&gt; API can be used to remove a capacity provider from a service&#39;s capacity provider strategy. When updating a service, the &lt;code&gt;forceNewDeployment&lt;/code&gt; option can be used to ensure that any tasks using the Amazon EC2 instance capacity provided by the capacity provider are transitioned to use the capacity from the remaining capacity providers. Only capacity providers that aren&#39;t associated with a cluster can be deleted. To remove a capacity provider from a cluster, you can either use &lt;a&gt;PutClusterCapacityProviders&lt;/a&gt; or delete the cluster.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteCapacityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCapacityProviderAsync(String xAmzTarget, DeleteCapacityProviderRequest deleteCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteCapacityProviderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCapacityProviderValidateBeforeCall(xAmzTarget, deleteCapacityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteCapacityProviderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCluster
     * @param xAmzTarget  (required)
     * @param deleteClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ClusterContainsContainerInstancesException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterContainsServicesException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ClusterContainsTasksException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClusterCall(String xAmzTarget, DeleteClusterRequest deleteClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteClusterRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClusterValidateBeforeCall(String xAmzTarget, DeleteClusterRequest deleteClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteCluster(Async)");
        }

        // verify the required parameter 'deleteClusterRequest' is set
        if (deleteClusterRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteClusterRequest' when calling deleteCluster(Async)");
        }

        return deleteClusterCall(xAmzTarget, deleteClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified cluster. The cluster transitions to the &lt;code&gt;INACTIVE&lt;/code&gt; state. Clusters with an &lt;code&gt;INACTIVE&lt;/code&gt; status might remain discoverable in your account for a period of time. However, this behavior is subject to change in the future. We don&#39;t recommend that you rely on &lt;code&gt;INACTIVE&lt;/code&gt; clusters persisting.&lt;/p&gt; &lt;p&gt;You must deregister all container instances from this cluster before you may delete it. You can list the container instances in a cluster with &lt;a&gt;ListContainerInstances&lt;/a&gt; and deregister them with &lt;a&gt;DeregisterContainerInstance&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ClusterContainsContainerInstancesException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterContainsServicesException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ClusterContainsTasksException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteClusterResponse deleteCluster(String xAmzTarget, DeleteClusterRequest deleteClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteClusterResponse> localVarResp = deleteClusterWithHttpInfo(xAmzTarget, deleteClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified cluster. The cluster transitions to the &lt;code&gt;INACTIVE&lt;/code&gt; state. Clusters with an &lt;code&gt;INACTIVE&lt;/code&gt; status might remain discoverable in your account for a period of time. However, this behavior is subject to change in the future. We don&#39;t recommend that you rely on &lt;code&gt;INACTIVE&lt;/code&gt; clusters persisting.&lt;/p&gt; &lt;p&gt;You must deregister all container instances from this cluster before you may delete it. You can list the container instances in a cluster with &lt;a&gt;ListContainerInstances&lt;/a&gt; and deregister them with &lt;a&gt;DeregisterContainerInstance&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ClusterContainsContainerInstancesException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterContainsServicesException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ClusterContainsTasksException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteClusterResponse> deleteClusterWithHttpInfo(String xAmzTarget, DeleteClusterRequest deleteClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteClusterValidateBeforeCall(xAmzTarget, deleteClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteClusterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified cluster. The cluster transitions to the &lt;code&gt;INACTIVE&lt;/code&gt; state. Clusters with an &lt;code&gt;INACTIVE&lt;/code&gt; status might remain discoverable in your account for a period of time. However, this behavior is subject to change in the future. We don&#39;t recommend that you rely on &lt;code&gt;INACTIVE&lt;/code&gt; clusters persisting.&lt;/p&gt; &lt;p&gt;You must deregister all container instances from this cluster before you may delete it. You can list the container instances in a cluster with &lt;a&gt;ListContainerInstances&lt;/a&gt; and deregister them with &lt;a&gt;DeregisterContainerInstance&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ClusterContainsContainerInstancesException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterContainsServicesException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ClusterContainsTasksException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClusterAsync(String xAmzTarget, DeleteClusterRequest deleteClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteClusterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClusterValidateBeforeCall(xAmzTarget, deleteClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteClusterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteService
     * @param xAmzTarget  (required)
     * @param deleteServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceCall(String xAmzTarget, DeleteServiceRequest deleteServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteServiceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteService";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceValidateBeforeCall(String xAmzTarget, DeleteServiceRequest deleteServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteService(Async)");
        }

        // verify the required parameter 'deleteServiceRequest' is set
        if (deleteServiceRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteServiceRequest' when calling deleteService(Async)");
        }

        return deleteServiceCall(xAmzTarget, deleteServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a specified service within a cluster. You can delete a service if you have no running tasks in it and the desired task count is zero. If the service is actively maintaining tasks, you can&#39;t delete it, and you must update the service to a desired task count of zero. For more information, see &lt;a&gt;UpdateService&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you delete a service, if there are still running tasks that require cleanup, the service status moves from &lt;code&gt;ACTIVE&lt;/code&gt; to &lt;code&gt;DRAINING&lt;/code&gt;, and the service is no longer visible in the console or in the &lt;a&gt;ListServices&lt;/a&gt; API operation. After all tasks have transitioned to either &lt;code&gt;STOPPING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt; status, the service status moves from &lt;code&gt;DRAINING&lt;/code&gt; to &lt;code&gt;INACTIVE&lt;/code&gt;. Services in the &lt;code&gt;DRAINING&lt;/code&gt; or &lt;code&gt;INACTIVE&lt;/code&gt; status can still be viewed with the &lt;a&gt;DescribeServices&lt;/a&gt; API operation. However, in the future, &lt;code&gt;INACTIVE&lt;/code&gt; services may be cleaned up and purged from Amazon ECS record keeping, and &lt;a&gt;DescribeServices&lt;/a&gt; calls on those services return a &lt;code&gt;ServiceNotFoundException&lt;/code&gt; error.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;If you attempt to create a new service with the same name as an existing service in either &lt;code&gt;ACTIVE&lt;/code&gt; or &lt;code&gt;DRAINING&lt;/code&gt; status, you receive an error.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteServiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteServiceResponse deleteService(String xAmzTarget, DeleteServiceRequest deleteServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteServiceResponse> localVarResp = deleteServiceWithHttpInfo(xAmzTarget, deleteServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a specified service within a cluster. You can delete a service if you have no running tasks in it and the desired task count is zero. If the service is actively maintaining tasks, you can&#39;t delete it, and you must update the service to a desired task count of zero. For more information, see &lt;a&gt;UpdateService&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you delete a service, if there are still running tasks that require cleanup, the service status moves from &lt;code&gt;ACTIVE&lt;/code&gt; to &lt;code&gt;DRAINING&lt;/code&gt;, and the service is no longer visible in the console or in the &lt;a&gt;ListServices&lt;/a&gt; API operation. After all tasks have transitioned to either &lt;code&gt;STOPPING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt; status, the service status moves from &lt;code&gt;DRAINING&lt;/code&gt; to &lt;code&gt;INACTIVE&lt;/code&gt;. Services in the &lt;code&gt;DRAINING&lt;/code&gt; or &lt;code&gt;INACTIVE&lt;/code&gt; status can still be viewed with the &lt;a&gt;DescribeServices&lt;/a&gt; API operation. However, in the future, &lt;code&gt;INACTIVE&lt;/code&gt; services may be cleaned up and purged from Amazon ECS record keeping, and &lt;a&gt;DescribeServices&lt;/a&gt; calls on those services return a &lt;code&gt;ServiceNotFoundException&lt;/code&gt; error.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;If you attempt to create a new service with the same name as an existing service in either &lt;code&gt;ACTIVE&lt;/code&gt; or &lt;code&gt;DRAINING&lt;/code&gt; status, you receive an error.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteServiceResponse> deleteServiceWithHttpInfo(String xAmzTarget, DeleteServiceRequest deleteServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(xAmzTarget, deleteServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteServiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a specified service within a cluster. You can delete a service if you have no running tasks in it and the desired task count is zero. If the service is actively maintaining tasks, you can&#39;t delete it, and you must update the service to a desired task count of zero. For more information, see &lt;a&gt;UpdateService&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you delete a service, if there are still running tasks that require cleanup, the service status moves from &lt;code&gt;ACTIVE&lt;/code&gt; to &lt;code&gt;DRAINING&lt;/code&gt;, and the service is no longer visible in the console or in the &lt;a&gt;ListServices&lt;/a&gt; API operation. After all tasks have transitioned to either &lt;code&gt;STOPPING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt; status, the service status moves from &lt;code&gt;DRAINING&lt;/code&gt; to &lt;code&gt;INACTIVE&lt;/code&gt;. Services in the &lt;code&gt;DRAINING&lt;/code&gt; or &lt;code&gt;INACTIVE&lt;/code&gt; status can still be viewed with the &lt;a&gt;DescribeServices&lt;/a&gt; API operation. However, in the future, &lt;code&gt;INACTIVE&lt;/code&gt; services may be cleaned up and purged from Amazon ECS record keeping, and &lt;a&gt;DescribeServices&lt;/a&gt; calls on those services return a &lt;code&gt;ServiceNotFoundException&lt;/code&gt; error.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;If you attempt to create a new service with the same name as an existing service in either &lt;code&gt;ACTIVE&lt;/code&gt; or &lt;code&gt;DRAINING&lt;/code&gt; status, you receive an error.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceAsync(String xAmzTarget, DeleteServiceRequest deleteServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteServiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(xAmzTarget, deleteServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteServiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTaskDefinitions
     * @param xAmzTarget  (required)
     * @param deleteTaskDefinitionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaskDefinitionsCall(String xAmzTarget, DeleteTaskDefinitionsRequest deleteTaskDefinitionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTaskDefinitionsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteTaskDefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaskDefinitionsValidateBeforeCall(String xAmzTarget, DeleteTaskDefinitionsRequest deleteTaskDefinitionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteTaskDefinitions(Async)");
        }

        // verify the required parameter 'deleteTaskDefinitionsRequest' is set
        if (deleteTaskDefinitionsRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteTaskDefinitionsRequest' when calling deleteTaskDefinitions(Async)");
        }

        return deleteTaskDefinitionsCall(xAmzTarget, deleteTaskDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes one or more task definitions.&lt;/p&gt; &lt;p&gt;You must deregister a task definition revision before you delete it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeregisterTaskDefinition.html\&quot;&gt;DeregisterTaskDefinition&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When you delete a task definition revision, it is immediately transitions from the &lt;code&gt;INACTIVE&lt;/code&gt; to &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt;. Existing tasks and services that reference a &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; task definition revision continue to run without disruption. Existing services that reference a &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; task definition revision can still scale up or down by modifying the service&#39;s desired count.&lt;/p&gt; &lt;p&gt;You can&#39;t use a &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; task definition revision to run new tasks or create new services. You also can&#39;t update an existing service to reference a &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; task definition revision.&lt;/p&gt; &lt;p&gt; A task definition revision will stay in &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; status until all the associated tasks and services have been terminated.&lt;/p&gt; &lt;p&gt;When you delete all &lt;code&gt;INACTIVE&lt;/code&gt; task definition revisions, the task definition name is not displayed in the console and not returned in the API. If a task definition revisions are in the &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; state, the task definition name is displayed in the console and returned in the API. The task definition name is retained by Amazon ECS and the revision is incremented the next time you create a task definition with that name.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteTaskDefinitionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteTaskDefinitionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTaskDefinitionsResponse deleteTaskDefinitions(String xAmzTarget, DeleteTaskDefinitionsRequest deleteTaskDefinitionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteTaskDefinitionsResponse> localVarResp = deleteTaskDefinitionsWithHttpInfo(xAmzTarget, deleteTaskDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes one or more task definitions.&lt;/p&gt; &lt;p&gt;You must deregister a task definition revision before you delete it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeregisterTaskDefinition.html\&quot;&gt;DeregisterTaskDefinition&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When you delete a task definition revision, it is immediately transitions from the &lt;code&gt;INACTIVE&lt;/code&gt; to &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt;. Existing tasks and services that reference a &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; task definition revision continue to run without disruption. Existing services that reference a &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; task definition revision can still scale up or down by modifying the service&#39;s desired count.&lt;/p&gt; &lt;p&gt;You can&#39;t use a &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; task definition revision to run new tasks or create new services. You also can&#39;t update an existing service to reference a &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; task definition revision.&lt;/p&gt; &lt;p&gt; A task definition revision will stay in &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; status until all the associated tasks and services have been terminated.&lt;/p&gt; &lt;p&gt;When you delete all &lt;code&gt;INACTIVE&lt;/code&gt; task definition revisions, the task definition name is not displayed in the console and not returned in the API. If a task definition revisions are in the &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; state, the task definition name is displayed in the console and returned in the API. The task definition name is retained by Amazon ECS and the revision is incremented the next time you create a task definition with that name.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteTaskDefinitionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteTaskDefinitionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteTaskDefinitionsResponse> deleteTaskDefinitionsWithHttpInfo(String xAmzTarget, DeleteTaskDefinitionsRequest deleteTaskDefinitionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteTaskDefinitionsValidateBeforeCall(xAmzTarget, deleteTaskDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteTaskDefinitionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes one or more task definitions.&lt;/p&gt; &lt;p&gt;You must deregister a task definition revision before you delete it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeregisterTaskDefinition.html\&quot;&gt;DeregisterTaskDefinition&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When you delete a task definition revision, it is immediately transitions from the &lt;code&gt;INACTIVE&lt;/code&gt; to &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt;. Existing tasks and services that reference a &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; task definition revision continue to run without disruption. Existing services that reference a &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; task definition revision can still scale up or down by modifying the service&#39;s desired count.&lt;/p&gt; &lt;p&gt;You can&#39;t use a &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; task definition revision to run new tasks or create new services. You also can&#39;t update an existing service to reference a &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; task definition revision.&lt;/p&gt; &lt;p&gt; A task definition revision will stay in &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; status until all the associated tasks and services have been terminated.&lt;/p&gt; &lt;p&gt;When you delete all &lt;code&gt;INACTIVE&lt;/code&gt; task definition revisions, the task definition name is not displayed in the console and not returned in the API. If a task definition revisions are in the &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; state, the task definition name is displayed in the console and returned in the API. The task definition name is retained by Amazon ECS and the revision is incremented the next time you create a task definition with that name.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteTaskDefinitionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaskDefinitionsAsync(String xAmzTarget, DeleteTaskDefinitionsRequest deleteTaskDefinitionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteTaskDefinitionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaskDefinitionsValidateBeforeCall(xAmzTarget, deleteTaskDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteTaskDefinitionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTaskSet
     * @param xAmzTarget  (required)
     * @param deleteTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TaskSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaskSetCall(String xAmzTarget, DeleteTaskSetRequest deleteTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTaskSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteTaskSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaskSetValidateBeforeCall(String xAmzTarget, DeleteTaskSetRequest deleteTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteTaskSet(Async)");
        }

        // verify the required parameter 'deleteTaskSetRequest' is set
        if (deleteTaskSetRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteTaskSetRequest' when calling deleteTaskSet(Async)");
        }

        return deleteTaskSetCall(xAmzTarget, deleteTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a specified task set within a service. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS deployment types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param deleteTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteTaskSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TaskSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTaskSetResponse deleteTaskSet(String xAmzTarget, DeleteTaskSetRequest deleteTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteTaskSetResponse> localVarResp = deleteTaskSetWithHttpInfo(xAmzTarget, deleteTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a specified task set within a service. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS deployment types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param deleteTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteTaskSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TaskSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteTaskSetResponse> deleteTaskSetWithHttpInfo(String xAmzTarget, DeleteTaskSetRequest deleteTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteTaskSetValidateBeforeCall(xAmzTarget, deleteTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteTaskSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a specified task set within a service. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS deployment types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param deleteTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TaskSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaskSetAsync(String xAmzTarget, DeleteTaskSetRequest deleteTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteTaskSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaskSetValidateBeforeCall(xAmzTarget, deleteTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteTaskSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deregisterContainerInstance
     * @param xAmzTarget  (required)
     * @param deregisterContainerInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterContainerInstanceCall(String xAmzTarget, DeregisterContainerInstanceRequest deregisterContainerInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deregisterContainerInstanceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeregisterContainerInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deregisterContainerInstanceValidateBeforeCall(String xAmzTarget, DeregisterContainerInstanceRequest deregisterContainerInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deregisterContainerInstance(Async)");
        }

        // verify the required parameter 'deregisterContainerInstanceRequest' is set
        if (deregisterContainerInstanceRequest == null) {
            throw new ApiException("Missing the required parameter 'deregisterContainerInstanceRequest' when calling deregisterContainerInstance(Async)");
        }

        return deregisterContainerInstanceCall(xAmzTarget, deregisterContainerInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deregisters an Amazon ECS container instance from the specified cluster. This instance is no longer available to run tasks.&lt;/p&gt; &lt;p&gt;If you intend to use the container instance for some other purpose after deregistration, we recommend that you stop all of the tasks running on the container instance before deregistration. That prevents any orphaned tasks from consuming resources.&lt;/p&gt; &lt;p&gt;Deregistering a container instance removes the instance from a cluster, but it doesn&#39;t terminate the EC2 instance. If you are finished using the instance, be sure to terminate it in the Amazon EC2 console to stop billing.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you terminate a running container instance, Amazon ECS automatically deregisters the instance from your cluster (stopped container instances or instances with disconnected agents aren&#39;t automatically deregistered when terminated).&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param deregisterContainerInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeregisterContainerInstanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DeregisterContainerInstanceResponse deregisterContainerInstance(String xAmzTarget, DeregisterContainerInstanceRequest deregisterContainerInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeregisterContainerInstanceResponse> localVarResp = deregisterContainerInstanceWithHttpInfo(xAmzTarget, deregisterContainerInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deregisters an Amazon ECS container instance from the specified cluster. This instance is no longer available to run tasks.&lt;/p&gt; &lt;p&gt;If you intend to use the container instance for some other purpose after deregistration, we recommend that you stop all of the tasks running on the container instance before deregistration. That prevents any orphaned tasks from consuming resources.&lt;/p&gt; &lt;p&gt;Deregistering a container instance removes the instance from a cluster, but it doesn&#39;t terminate the EC2 instance. If you are finished using the instance, be sure to terminate it in the Amazon EC2 console to stop billing.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you terminate a running container instance, Amazon ECS automatically deregisters the instance from your cluster (stopped container instances or instances with disconnected agents aren&#39;t automatically deregistered when terminated).&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param deregisterContainerInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeregisterContainerInstanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeregisterContainerInstanceResponse> deregisterContainerInstanceWithHttpInfo(String xAmzTarget, DeregisterContainerInstanceRequest deregisterContainerInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deregisterContainerInstanceValidateBeforeCall(xAmzTarget, deregisterContainerInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeregisterContainerInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deregisters an Amazon ECS container instance from the specified cluster. This instance is no longer available to run tasks.&lt;/p&gt; &lt;p&gt;If you intend to use the container instance for some other purpose after deregistration, we recommend that you stop all of the tasks running on the container instance before deregistration. That prevents any orphaned tasks from consuming resources.&lt;/p&gt; &lt;p&gt;Deregistering a container instance removes the instance from a cluster, but it doesn&#39;t terminate the EC2 instance. If you are finished using the instance, be sure to terminate it in the Amazon EC2 console to stop billing.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you terminate a running container instance, Amazon ECS automatically deregisters the instance from your cluster (stopped container instances or instances with disconnected agents aren&#39;t automatically deregistered when terminated).&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param deregisterContainerInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterContainerInstanceAsync(String xAmzTarget, DeregisterContainerInstanceRequest deregisterContainerInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeregisterContainerInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deregisterContainerInstanceValidateBeforeCall(xAmzTarget, deregisterContainerInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeregisterContainerInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deregisterTaskDefinition
     * @param xAmzTarget  (required)
     * @param deregisterTaskDefinitionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterTaskDefinitionCall(String xAmzTarget, DeregisterTaskDefinitionRequest deregisterTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deregisterTaskDefinitionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeregisterTaskDefinition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deregisterTaskDefinitionValidateBeforeCall(String xAmzTarget, DeregisterTaskDefinitionRequest deregisterTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deregisterTaskDefinition(Async)");
        }

        // verify the required parameter 'deregisterTaskDefinitionRequest' is set
        if (deregisterTaskDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'deregisterTaskDefinitionRequest' when calling deregisterTaskDefinition(Async)");
        }

        return deregisterTaskDefinitionCall(xAmzTarget, deregisterTaskDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deregisters the specified task definition by family and revision. Upon deregistration, the task definition is marked as &lt;code&gt;INACTIVE&lt;/code&gt;. Existing tasks and services that reference an &lt;code&gt;INACTIVE&lt;/code&gt; task definition continue to run without disruption. Existing services that reference an &lt;code&gt;INACTIVE&lt;/code&gt; task definition can still scale up or down by modifying the service&#39;s desired count. If you want to delete a task definition revision, you must first deregister the task definition revision.&lt;/p&gt; &lt;p&gt;You can&#39;t use an &lt;code&gt;INACTIVE&lt;/code&gt; task definition to run new tasks or create new services, and you can&#39;t update an existing service to reference an &lt;code&gt;INACTIVE&lt;/code&gt; task definition. However, there may be up to a 10-minute window following deregistration where these restrictions have not yet taken effect.&lt;/p&gt; &lt;note&gt; &lt;p&gt;At this time, &lt;code&gt;INACTIVE&lt;/code&gt; task definitions remain discoverable in your account indefinitely. However, this behavior is subject to change in the future. We don&#39;t recommend that you rely on &lt;code&gt;INACTIVE&lt;/code&gt; task definitions persisting beyond the lifecycle of any associated tasks and services.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You must deregister a task definition revision before you delete it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteTaskDefinitions.html\&quot;&gt;DeleteTaskDefinitions&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deregisterTaskDefinitionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeregisterTaskDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public DeregisterTaskDefinitionResponse deregisterTaskDefinition(String xAmzTarget, DeregisterTaskDefinitionRequest deregisterTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeregisterTaskDefinitionResponse> localVarResp = deregisterTaskDefinitionWithHttpInfo(xAmzTarget, deregisterTaskDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deregisters the specified task definition by family and revision. Upon deregistration, the task definition is marked as &lt;code&gt;INACTIVE&lt;/code&gt;. Existing tasks and services that reference an &lt;code&gt;INACTIVE&lt;/code&gt; task definition continue to run without disruption. Existing services that reference an &lt;code&gt;INACTIVE&lt;/code&gt; task definition can still scale up or down by modifying the service&#39;s desired count. If you want to delete a task definition revision, you must first deregister the task definition revision.&lt;/p&gt; &lt;p&gt;You can&#39;t use an &lt;code&gt;INACTIVE&lt;/code&gt; task definition to run new tasks or create new services, and you can&#39;t update an existing service to reference an &lt;code&gt;INACTIVE&lt;/code&gt; task definition. However, there may be up to a 10-minute window following deregistration where these restrictions have not yet taken effect.&lt;/p&gt; &lt;note&gt; &lt;p&gt;At this time, &lt;code&gt;INACTIVE&lt;/code&gt; task definitions remain discoverable in your account indefinitely. However, this behavior is subject to change in the future. We don&#39;t recommend that you rely on &lt;code&gt;INACTIVE&lt;/code&gt; task definitions persisting beyond the lifecycle of any associated tasks and services.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You must deregister a task definition revision before you delete it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteTaskDefinitions.html\&quot;&gt;DeleteTaskDefinitions&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deregisterTaskDefinitionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeregisterTaskDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeregisterTaskDefinitionResponse> deregisterTaskDefinitionWithHttpInfo(String xAmzTarget, DeregisterTaskDefinitionRequest deregisterTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deregisterTaskDefinitionValidateBeforeCall(xAmzTarget, deregisterTaskDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeregisterTaskDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deregisters the specified task definition by family and revision. Upon deregistration, the task definition is marked as &lt;code&gt;INACTIVE&lt;/code&gt;. Existing tasks and services that reference an &lt;code&gt;INACTIVE&lt;/code&gt; task definition continue to run without disruption. Existing services that reference an &lt;code&gt;INACTIVE&lt;/code&gt; task definition can still scale up or down by modifying the service&#39;s desired count. If you want to delete a task definition revision, you must first deregister the task definition revision.&lt;/p&gt; &lt;p&gt;You can&#39;t use an &lt;code&gt;INACTIVE&lt;/code&gt; task definition to run new tasks or create new services, and you can&#39;t update an existing service to reference an &lt;code&gt;INACTIVE&lt;/code&gt; task definition. However, there may be up to a 10-minute window following deregistration where these restrictions have not yet taken effect.&lt;/p&gt; &lt;note&gt; &lt;p&gt;At this time, &lt;code&gt;INACTIVE&lt;/code&gt; task definitions remain discoverable in your account indefinitely. However, this behavior is subject to change in the future. We don&#39;t recommend that you rely on &lt;code&gt;INACTIVE&lt;/code&gt; task definitions persisting beyond the lifecycle of any associated tasks and services.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You must deregister a task definition revision before you delete it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteTaskDefinitions.html\&quot;&gt;DeleteTaskDefinitions&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deregisterTaskDefinitionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterTaskDefinitionAsync(String xAmzTarget, DeregisterTaskDefinitionRequest deregisterTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeregisterTaskDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deregisterTaskDefinitionValidateBeforeCall(xAmzTarget, deregisterTaskDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeregisterTaskDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeCapacityProviders
     * @param xAmzTarget  (required)
     * @param describeCapacityProvidersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeCapacityProvidersCall(String xAmzTarget, DescribeCapacityProvidersRequest describeCapacityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeCapacityProvidersRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeCapacityProviders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeCapacityProvidersValidateBeforeCall(String xAmzTarget, DescribeCapacityProvidersRequest describeCapacityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeCapacityProviders(Async)");
        }

        // verify the required parameter 'describeCapacityProvidersRequest' is set
        if (describeCapacityProvidersRequest == null) {
            throw new ApiException("Missing the required parameter 'describeCapacityProvidersRequest' when calling describeCapacityProviders(Async)");
        }

        return describeCapacityProvidersCall(xAmzTarget, describeCapacityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes one or more of your capacity providers.
     * @param xAmzTarget  (required)
     * @param describeCapacityProvidersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeCapacityProvidersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeCapacityProvidersResponse describeCapacityProviders(String xAmzTarget, DescribeCapacityProvidersRequest describeCapacityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeCapacityProvidersResponse> localVarResp = describeCapacityProvidersWithHttpInfo(xAmzTarget, describeCapacityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes one or more of your capacity providers.
     * @param xAmzTarget  (required)
     * @param describeCapacityProvidersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeCapacityProvidersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeCapacityProvidersResponse> describeCapacityProvidersWithHttpInfo(String xAmzTarget, DescribeCapacityProvidersRequest describeCapacityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeCapacityProvidersValidateBeforeCall(xAmzTarget, describeCapacityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeCapacityProvidersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes one or more of your capacity providers.
     * @param xAmzTarget  (required)
     * @param describeCapacityProvidersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeCapacityProvidersAsync(String xAmzTarget, DescribeCapacityProvidersRequest describeCapacityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeCapacityProvidersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeCapacityProvidersValidateBeforeCall(xAmzTarget, describeCapacityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeCapacityProvidersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeClusters
     * @param xAmzTarget  (required)
     * @param describeClustersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeClustersCall(String xAmzTarget, DescribeClustersRequest describeClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeClustersRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeClusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeClustersValidateBeforeCall(String xAmzTarget, DescribeClustersRequest describeClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeClusters(Async)");
        }

        // verify the required parameter 'describeClustersRequest' is set
        if (describeClustersRequest == null) {
            throw new ApiException("Missing the required parameter 'describeClustersRequest' when calling describeClusters(Async)");
        }

        return describeClustersCall(xAmzTarget, describeClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes one or more of your clusters.
     * @param xAmzTarget  (required)
     * @param describeClustersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeClustersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeClustersResponse describeClusters(String xAmzTarget, DescribeClustersRequest describeClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeClustersResponse> localVarResp = describeClustersWithHttpInfo(xAmzTarget, describeClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes one or more of your clusters.
     * @param xAmzTarget  (required)
     * @param describeClustersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeClustersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeClustersResponse> describeClustersWithHttpInfo(String xAmzTarget, DescribeClustersRequest describeClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeClustersValidateBeforeCall(xAmzTarget, describeClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeClustersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes one or more of your clusters.
     * @param xAmzTarget  (required)
     * @param describeClustersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeClustersAsync(String xAmzTarget, DescribeClustersRequest describeClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeClustersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeClustersValidateBeforeCall(xAmzTarget, describeClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeClustersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeContainerInstances
     * @param xAmzTarget  (required)
     * @param describeContainerInstancesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeContainerInstancesCall(String xAmzTarget, DescribeContainerInstancesRequest describeContainerInstancesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeContainerInstancesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeContainerInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeContainerInstancesValidateBeforeCall(String xAmzTarget, DescribeContainerInstancesRequest describeContainerInstancesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeContainerInstances(Async)");
        }

        // verify the required parameter 'describeContainerInstancesRequest' is set
        if (describeContainerInstancesRequest == null) {
            throw new ApiException("Missing the required parameter 'describeContainerInstancesRequest' when calling describeContainerInstances(Async)");
        }

        return describeContainerInstancesCall(xAmzTarget, describeContainerInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes one or more container instances. Returns metadata about each container instance requested.
     * @param xAmzTarget  (required)
     * @param describeContainerInstancesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeContainerInstancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeContainerInstancesResponse describeContainerInstances(String xAmzTarget, DescribeContainerInstancesRequest describeContainerInstancesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeContainerInstancesResponse> localVarResp = describeContainerInstancesWithHttpInfo(xAmzTarget, describeContainerInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes one or more container instances. Returns metadata about each container instance requested.
     * @param xAmzTarget  (required)
     * @param describeContainerInstancesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeContainerInstancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeContainerInstancesResponse> describeContainerInstancesWithHttpInfo(String xAmzTarget, DescribeContainerInstancesRequest describeContainerInstancesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeContainerInstancesValidateBeforeCall(xAmzTarget, describeContainerInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeContainerInstancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes one or more container instances. Returns metadata about each container instance requested.
     * @param xAmzTarget  (required)
     * @param describeContainerInstancesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeContainerInstancesAsync(String xAmzTarget, DescribeContainerInstancesRequest describeContainerInstancesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeContainerInstancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeContainerInstancesValidateBeforeCall(xAmzTarget, describeContainerInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeContainerInstancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeServices
     * @param xAmzTarget  (required)
     * @param describeServicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeServicesCall(String xAmzTarget, DescribeServicesRequest describeServicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeServicesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeServices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeServicesValidateBeforeCall(String xAmzTarget, DescribeServicesRequest describeServicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeServices(Async)");
        }

        // verify the required parameter 'describeServicesRequest' is set
        if (describeServicesRequest == null) {
            throw new ApiException("Missing the required parameter 'describeServicesRequest' when calling describeServices(Async)");
        }

        return describeServicesCall(xAmzTarget, describeServicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the specified services running in your cluster.
     * @param xAmzTarget  (required)
     * @param describeServicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeServicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeServicesResponse describeServices(String xAmzTarget, DescribeServicesRequest describeServicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeServicesResponse> localVarResp = describeServicesWithHttpInfo(xAmzTarget, describeServicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the specified services running in your cluster.
     * @param xAmzTarget  (required)
     * @param describeServicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeServicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeServicesResponse> describeServicesWithHttpInfo(String xAmzTarget, DescribeServicesRequest describeServicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeServicesValidateBeforeCall(xAmzTarget, describeServicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeServicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the specified services running in your cluster.
     * @param xAmzTarget  (required)
     * @param describeServicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeServicesAsync(String xAmzTarget, DescribeServicesRequest describeServicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeServicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeServicesValidateBeforeCall(xAmzTarget, describeServicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeServicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeTaskDefinition
     * @param xAmzTarget  (required)
     * @param describeTaskDefinitionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTaskDefinitionCall(String xAmzTarget, DescribeTaskDefinitionRequest describeTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTaskDefinitionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeTaskDefinition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeTaskDefinitionValidateBeforeCall(String xAmzTarget, DescribeTaskDefinitionRequest describeTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeTaskDefinition(Async)");
        }

        // verify the required parameter 'describeTaskDefinitionRequest' is set
        if (describeTaskDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'describeTaskDefinitionRequest' when calling describeTaskDefinition(Async)");
        }

        return describeTaskDefinitionCall(xAmzTarget, describeTaskDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes a task definition. You can specify a &lt;code&gt;family&lt;/code&gt; and &lt;code&gt;revision&lt;/code&gt; to find information about a specific task definition, or you can simply specify the family to find the latest &lt;code&gt;ACTIVE&lt;/code&gt; revision in that family.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can only describe &lt;code&gt;INACTIVE&lt;/code&gt; task definitions while an active task or service references them.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeTaskDefinitionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeTaskDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTaskDefinitionResponse describeTaskDefinition(String xAmzTarget, DescribeTaskDefinitionRequest describeTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeTaskDefinitionResponse> localVarResp = describeTaskDefinitionWithHttpInfo(xAmzTarget, describeTaskDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes a task definition. You can specify a &lt;code&gt;family&lt;/code&gt; and &lt;code&gt;revision&lt;/code&gt; to find information about a specific task definition, or you can simply specify the family to find the latest &lt;code&gt;ACTIVE&lt;/code&gt; revision in that family.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can only describe &lt;code&gt;INACTIVE&lt;/code&gt; task definitions while an active task or service references them.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeTaskDefinitionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeTaskDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTaskDefinitionResponse> describeTaskDefinitionWithHttpInfo(String xAmzTarget, DescribeTaskDefinitionRequest describeTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeTaskDefinitionValidateBeforeCall(xAmzTarget, describeTaskDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeTaskDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes a task definition. You can specify a &lt;code&gt;family&lt;/code&gt; and &lt;code&gt;revision&lt;/code&gt; to find information about a specific task definition, or you can simply specify the family to find the latest &lt;code&gt;ACTIVE&lt;/code&gt; revision in that family.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can only describe &lt;code&gt;INACTIVE&lt;/code&gt; task definitions while an active task or service references them.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeTaskDefinitionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTaskDefinitionAsync(String xAmzTarget, DescribeTaskDefinitionRequest describeTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeTaskDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeTaskDefinitionValidateBeforeCall(xAmzTarget, describeTaskDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeTaskDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeTaskSets
     * @param xAmzTarget  (required)
     * @param describeTaskSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTaskSetsCall(String xAmzTarget, DescribeTaskSetsRequest describeTaskSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTaskSetsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeTaskSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeTaskSetsValidateBeforeCall(String xAmzTarget, DescribeTaskSetsRequest describeTaskSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeTaskSets(Async)");
        }

        // verify the required parameter 'describeTaskSetsRequest' is set
        if (describeTaskSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeTaskSetsRequest' when calling describeTaskSets(Async)");
        }

        return describeTaskSetsCall(xAmzTarget, describeTaskSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the task sets in the specified cluster and service. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS Deployment Types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param describeTaskSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeTaskSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTaskSetsResponse describeTaskSets(String xAmzTarget, DescribeTaskSetsRequest describeTaskSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeTaskSetsResponse> localVarResp = describeTaskSetsWithHttpInfo(xAmzTarget, describeTaskSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the task sets in the specified cluster and service. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS Deployment Types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param describeTaskSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeTaskSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTaskSetsResponse> describeTaskSetsWithHttpInfo(String xAmzTarget, DescribeTaskSetsRequest describeTaskSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeTaskSetsValidateBeforeCall(xAmzTarget, describeTaskSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeTaskSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the task sets in the specified cluster and service. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS Deployment Types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param describeTaskSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTaskSetsAsync(String xAmzTarget, DescribeTaskSetsRequest describeTaskSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeTaskSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeTaskSetsValidateBeforeCall(xAmzTarget, describeTaskSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeTaskSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeTasks
     * @param xAmzTarget  (required)
     * @param describeTasksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTasksCall(String xAmzTarget, DescribeTasksRequest describeTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTasksRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeTasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeTasksValidateBeforeCall(String xAmzTarget, DescribeTasksRequest describeTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeTasks(Async)");
        }

        // verify the required parameter 'describeTasksRequest' is set
        if (describeTasksRequest == null) {
            throw new ApiException("Missing the required parameter 'describeTasksRequest' when calling describeTasks(Async)");
        }

        return describeTasksCall(xAmzTarget, describeTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes a specified task or tasks.&lt;/p&gt; &lt;p&gt;Currently, stopped tasks appear in the returned results for at least one hour.&lt;/p&gt; &lt;p&gt;If you have tasks with tags, and then delete the cluster, the tagged tasks are returned in the response. If you create a new cluster with the same name as the deleted cluster, the tagged tasks are not included in the response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeTasksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeTasksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTasksResponse describeTasks(String xAmzTarget, DescribeTasksRequest describeTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeTasksResponse> localVarResp = describeTasksWithHttpInfo(xAmzTarget, describeTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes a specified task or tasks.&lt;/p&gt; &lt;p&gt;Currently, stopped tasks appear in the returned results for at least one hour.&lt;/p&gt; &lt;p&gt;If you have tasks with tags, and then delete the cluster, the tagged tasks are returned in the response. If you create a new cluster with the same name as the deleted cluster, the tagged tasks are not included in the response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeTasksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeTasksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTasksResponse> describeTasksWithHttpInfo(String xAmzTarget, DescribeTasksRequest describeTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeTasksValidateBeforeCall(xAmzTarget, describeTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeTasksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes a specified task or tasks.&lt;/p&gt; &lt;p&gt;Currently, stopped tasks appear in the returned results for at least one hour.&lt;/p&gt; &lt;p&gt;If you have tasks with tags, and then delete the cluster, the tagged tasks are returned in the response. If you create a new cluster with the same name as the deleted cluster, the tagged tasks are not included in the response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeTasksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTasksAsync(String xAmzTarget, DescribeTasksRequest describeTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeTasksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeTasksValidateBeforeCall(xAmzTarget, describeTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeTasksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for discoverPollEndpoint
     * @param xAmzTarget  (required)
     * @param discoverPollEndpointRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discoverPollEndpointCall(String xAmzTarget, DiscoverPollEndpointRequest discoverPollEndpointRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = discoverPollEndpointRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DiscoverPollEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discoverPollEndpointValidateBeforeCall(String xAmzTarget, DiscoverPollEndpointRequest discoverPollEndpointRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling discoverPollEndpoint(Async)");
        }

        // verify the required parameter 'discoverPollEndpointRequest' is set
        if (discoverPollEndpointRequest == null) {
            throw new ApiException("Missing the required parameter 'discoverPollEndpointRequest' when calling discoverPollEndpoint(Async)");
        }

        return discoverPollEndpointCall(xAmzTarget, discoverPollEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an endpoint for the Amazon ECS agent to poll for updates.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param discoverPollEndpointRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DiscoverPollEndpointResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
     </table>
     */
    public DiscoverPollEndpointResponse discoverPollEndpoint(String xAmzTarget, DiscoverPollEndpointRequest discoverPollEndpointRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DiscoverPollEndpointResponse> localVarResp = discoverPollEndpointWithHttpInfo(xAmzTarget, discoverPollEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an endpoint for the Amazon ECS agent to poll for updates.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param discoverPollEndpointRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DiscoverPollEndpointResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscoverPollEndpointResponse> discoverPollEndpointWithHttpInfo(String xAmzTarget, DiscoverPollEndpointRequest discoverPollEndpointRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = discoverPollEndpointValidateBeforeCall(xAmzTarget, discoverPollEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DiscoverPollEndpointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an endpoint for the Amazon ECS agent to poll for updates.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param discoverPollEndpointRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discoverPollEndpointAsync(String xAmzTarget, DiscoverPollEndpointRequest discoverPollEndpointRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DiscoverPollEndpointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = discoverPollEndpointValidateBeforeCall(xAmzTarget, discoverPollEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DiscoverPollEndpointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for executeCommand
     * @param xAmzTarget  (required)
     * @param executeCommandRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetNotConnectedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeCommandCall(String xAmzTarget, ExecuteCommandRequest executeCommandRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = executeCommandRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ExecuteCommand";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeCommandValidateBeforeCall(String xAmzTarget, ExecuteCommandRequest executeCommandRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling executeCommand(Async)");
        }

        // verify the required parameter 'executeCommandRequest' is set
        if (executeCommandRequest == null) {
            throw new ApiException("Missing the required parameter 'executeCommandRequest' when calling executeCommand(Async)");
        }

        return executeCommandCall(xAmzTarget, executeCommandRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Runs a command remotely on a container within a task.&lt;/p&gt; &lt;p&gt;If you use a condition key in your IAM policy to refine the conditions for the policy statement, for example limit the actions to a specific cluster, you receive an &lt;code&gt;AccessDeniedException&lt;/code&gt; when there is a mismatch between the condition key value and the corresponding parameter value.&lt;/p&gt; &lt;p&gt;For information about required permissions and considerations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html\&quot;&gt;Using Amazon ECS Exec for debugging&lt;/a&gt; in the &lt;i&gt;Amazon ECS Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param executeCommandRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ExecuteCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetNotConnectedException </td><td>  -  </td></tr>
     </table>
     */
    public ExecuteCommandResponse executeCommand(String xAmzTarget, ExecuteCommandRequest executeCommandRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ExecuteCommandResponse> localVarResp = executeCommandWithHttpInfo(xAmzTarget, executeCommandRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Runs a command remotely on a container within a task.&lt;/p&gt; &lt;p&gt;If you use a condition key in your IAM policy to refine the conditions for the policy statement, for example limit the actions to a specific cluster, you receive an &lt;code&gt;AccessDeniedException&lt;/code&gt; when there is a mismatch between the condition key value and the corresponding parameter value.&lt;/p&gt; &lt;p&gt;For information about required permissions and considerations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html\&quot;&gt;Using Amazon ECS Exec for debugging&lt;/a&gt; in the &lt;i&gt;Amazon ECS Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param executeCommandRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ExecuteCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetNotConnectedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExecuteCommandResponse> executeCommandWithHttpInfo(String xAmzTarget, ExecuteCommandRequest executeCommandRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = executeCommandValidateBeforeCall(xAmzTarget, executeCommandRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ExecuteCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Runs a command remotely on a container within a task.&lt;/p&gt; &lt;p&gt;If you use a condition key in your IAM policy to refine the conditions for the policy statement, for example limit the actions to a specific cluster, you receive an &lt;code&gt;AccessDeniedException&lt;/code&gt; when there is a mismatch between the condition key value and the corresponding parameter value.&lt;/p&gt; &lt;p&gt;For information about required permissions and considerations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html\&quot;&gt;Using Amazon ECS Exec for debugging&lt;/a&gt; in the &lt;i&gt;Amazon ECS Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param executeCommandRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetNotConnectedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeCommandAsync(String xAmzTarget, ExecuteCommandRequest executeCommandRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ExecuteCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeCommandValidateBeforeCall(xAmzTarget, executeCommandRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ExecuteCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaskProtection
     * @param xAmzTarget  (required)
     * @param getTaskProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskProtectionCall(String xAmzTarget, GetTaskProtectionRequest getTaskProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTaskProtectionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.GetTaskProtection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskProtectionValidateBeforeCall(String xAmzTarget, GetTaskProtectionRequest getTaskProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getTaskProtection(Async)");
        }

        // verify the required parameter 'getTaskProtectionRequest' is set
        if (getTaskProtectionRequest == null) {
            throw new ApiException("Missing the required parameter 'getTaskProtectionRequest' when calling getTaskProtection(Async)");
        }

        return getTaskProtectionCall(xAmzTarget, getTaskProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves the protection status of tasks in an Amazon ECS service.
     * @param xAmzTarget  (required)
     * @param getTaskProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetTaskProtectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskProtectionResponse getTaskProtection(String xAmzTarget, GetTaskProtectionRequest getTaskProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetTaskProtectionResponse> localVarResp = getTaskProtectionWithHttpInfo(xAmzTarget, getTaskProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the protection status of tasks in an Amazon ECS service.
     * @param xAmzTarget  (required)
     * @param getTaskProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetTaskProtectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTaskProtectionResponse> getTaskProtectionWithHttpInfo(String xAmzTarget, GetTaskProtectionRequest getTaskProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getTaskProtectionValidateBeforeCall(xAmzTarget, getTaskProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetTaskProtectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the protection status of tasks in an Amazon ECS service.
     * @param xAmzTarget  (required)
     * @param getTaskProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskProtectionAsync(String xAmzTarget, GetTaskProtectionRequest getTaskProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetTaskProtectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskProtectionValidateBeforeCall(xAmzTarget, getTaskProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetTaskProtectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccountSettings
     * @param xAmzTarget  (required)
     * @param listAccountSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountSettingsCall(String xAmzTarget, ListAccountSettingsRequest listAccountSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAccountSettingsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListAccountSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountSettingsValidateBeforeCall(String xAmzTarget, ListAccountSettingsRequest listAccountSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listAccountSettings(Async)");
        }

        // verify the required parameter 'listAccountSettingsRequest' is set
        if (listAccountSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'listAccountSettingsRequest' when calling listAccountSettings(Async)");
        }

        return listAccountSettingsCall(xAmzTarget, listAccountSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists the account settings for a specified principal.
     * @param xAmzTarget  (required)
     * @param listAccountSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListAccountSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountSettingsResponse listAccountSettings(String xAmzTarget, ListAccountSettingsRequest listAccountSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListAccountSettingsResponse> localVarResp = listAccountSettingsWithHttpInfo(xAmzTarget, listAccountSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the account settings for a specified principal.
     * @param xAmzTarget  (required)
     * @param listAccountSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListAccountSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAccountSettingsResponse> listAccountSettingsWithHttpInfo(String xAmzTarget, ListAccountSettingsRequest listAccountSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listAccountSettingsValidateBeforeCall(xAmzTarget, listAccountSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListAccountSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the account settings for a specified principal.
     * @param xAmzTarget  (required)
     * @param listAccountSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountSettingsAsync(String xAmzTarget, ListAccountSettingsRequest listAccountSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListAccountSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountSettingsValidateBeforeCall(xAmzTarget, listAccountSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListAccountSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttributes
     * @param xAmzTarget  (required)
     * @param listAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttributesCall(String xAmzTarget, ListAttributesRequest listAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAttributesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttributesValidateBeforeCall(String xAmzTarget, ListAttributesRequest listAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listAttributes(Async)");
        }

        // verify the required parameter 'listAttributesRequest' is set
        if (listAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'listAttributesRequest' when calling listAttributes(Async)");
        }

        return listAttributesCall(xAmzTarget, listAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists the attributes for Amazon ECS resources within a specified target type and cluster. When you specify a target type and cluster, &lt;code&gt;ListAttributes&lt;/code&gt; returns a list of attribute objects, one for each attribute on each resource. You can filter the list of results to a single attribute name to only return results that have that name. You can also filter the results by attribute name and value. You can do this, for example, to see which container instances in a cluster are running a Linux AMI (&lt;code&gt;ecs.os-type&#x3D;linux&lt;/code&gt;). 
     * @param xAmzTarget  (required)
     * @param listAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ListAttributesResponse listAttributes(String xAmzTarget, ListAttributesRequest listAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListAttributesResponse> localVarResp = listAttributesWithHttpInfo(xAmzTarget, listAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the attributes for Amazon ECS resources within a specified target type and cluster. When you specify a target type and cluster, &lt;code&gt;ListAttributes&lt;/code&gt; returns a list of attribute objects, one for each attribute on each resource. You can filter the list of results to a single attribute name to only return results that have that name. You can also filter the results by attribute name and value. You can do this, for example, to see which container instances in a cluster are running a Linux AMI (&lt;code&gt;ecs.os-type&#x3D;linux&lt;/code&gt;). 
     * @param xAmzTarget  (required)
     * @param listAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAttributesResponse> listAttributesWithHttpInfo(String xAmzTarget, ListAttributesRequest listAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listAttributesValidateBeforeCall(xAmzTarget, listAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the attributes for Amazon ECS resources within a specified target type and cluster. When you specify a target type and cluster, &lt;code&gt;ListAttributes&lt;/code&gt; returns a list of attribute objects, one for each attribute on each resource. You can filter the list of results to a single attribute name to only return results that have that name. You can also filter the results by attribute name and value. You can do this, for example, to see which container instances in a cluster are running a Linux AMI (&lt;code&gt;ecs.os-type&#x3D;linux&lt;/code&gt;). 
     * @param xAmzTarget  (required)
     * @param listAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttributesAsync(String xAmzTarget, ListAttributesRequest listAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttributesValidateBeforeCall(xAmzTarget, listAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listClusters
     * @param xAmzTarget  (required)
     * @param listClustersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listClustersCall(String xAmzTarget, ListClustersRequest listClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listClustersRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListClusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listClustersValidateBeforeCall(String xAmzTarget, ListClustersRequest listClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listClusters(Async)");
        }

        // verify the required parameter 'listClustersRequest' is set
        if (listClustersRequest == null) {
            throw new ApiException("Missing the required parameter 'listClustersRequest' when calling listClusters(Async)");
        }

        return listClustersCall(xAmzTarget, listClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of existing clusters.
     * @param xAmzTarget  (required)
     * @param listClustersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListClustersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ListClustersResponse listClusters(String xAmzTarget, ListClustersRequest listClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListClustersResponse> localVarResp = listClustersWithHttpInfo(xAmzTarget, listClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of existing clusters.
     * @param xAmzTarget  (required)
     * @param listClustersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListClustersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListClustersResponse> listClustersWithHttpInfo(String xAmzTarget, ListClustersRequest listClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listClustersValidateBeforeCall(xAmzTarget, listClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListClustersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of existing clusters.
     * @param xAmzTarget  (required)
     * @param listClustersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listClustersAsync(String xAmzTarget, ListClustersRequest listClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListClustersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listClustersValidateBeforeCall(xAmzTarget, listClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListClustersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listContainerInstances
     * @param xAmzTarget  (required)
     * @param listContainerInstancesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listContainerInstancesCall(String xAmzTarget, ListContainerInstancesRequest listContainerInstancesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listContainerInstancesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListContainerInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listContainerInstancesValidateBeforeCall(String xAmzTarget, ListContainerInstancesRequest listContainerInstancesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listContainerInstances(Async)");
        }

        // verify the required parameter 'listContainerInstancesRequest' is set
        if (listContainerInstancesRequest == null) {
            throw new ApiException("Missing the required parameter 'listContainerInstancesRequest' when calling listContainerInstances(Async)");
        }

        return listContainerInstancesCall(xAmzTarget, listContainerInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of container instances in a specified cluster. You can filter the results of a &lt;code&gt;ListContainerInstances&lt;/code&gt; operation with cluster query language statements inside the &lt;code&gt;filter&lt;/code&gt; parameter. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html\&quot;&gt;Cluster Query Language&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param listContainerInstancesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListContainerInstancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListContainerInstancesResponse listContainerInstances(String xAmzTarget, ListContainerInstancesRequest listContainerInstancesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListContainerInstancesResponse> localVarResp = listContainerInstancesWithHttpInfo(xAmzTarget, listContainerInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of container instances in a specified cluster. You can filter the results of a &lt;code&gt;ListContainerInstances&lt;/code&gt; operation with cluster query language statements inside the &lt;code&gt;filter&lt;/code&gt; parameter. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html\&quot;&gt;Cluster Query Language&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param listContainerInstancesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListContainerInstancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListContainerInstancesResponse> listContainerInstancesWithHttpInfo(String xAmzTarget, ListContainerInstancesRequest listContainerInstancesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listContainerInstancesValidateBeforeCall(xAmzTarget, listContainerInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListContainerInstancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of container instances in a specified cluster. You can filter the results of a &lt;code&gt;ListContainerInstances&lt;/code&gt; operation with cluster query language statements inside the &lt;code&gt;filter&lt;/code&gt; parameter. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html\&quot;&gt;Cluster Query Language&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param listContainerInstancesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listContainerInstancesAsync(String xAmzTarget, ListContainerInstancesRequest listContainerInstancesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListContainerInstancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listContainerInstancesValidateBeforeCall(xAmzTarget, listContainerInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListContainerInstancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServices
     * @param xAmzTarget  (required)
     * @param listServicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServicesCall(String xAmzTarget, ListServicesRequest listServicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listServicesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListServices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServicesValidateBeforeCall(String xAmzTarget, ListServicesRequest listServicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listServices(Async)");
        }

        // verify the required parameter 'listServicesRequest' is set
        if (listServicesRequest == null) {
            throw new ApiException("Missing the required parameter 'listServicesRequest' when calling listServices(Async)");
        }

        return listServicesCall(xAmzTarget, listServicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of services. You can filter the results by cluster, launch type, and scheduling strategy.
     * @param xAmzTarget  (required)
     * @param listServicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListServicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListServicesResponse listServices(String xAmzTarget, ListServicesRequest listServicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListServicesResponse> localVarResp = listServicesWithHttpInfo(xAmzTarget, listServicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of services. You can filter the results by cluster, launch type, and scheduling strategy.
     * @param xAmzTarget  (required)
     * @param listServicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListServicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListServicesResponse> listServicesWithHttpInfo(String xAmzTarget, ListServicesRequest listServicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listServicesValidateBeforeCall(xAmzTarget, listServicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListServicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of services. You can filter the results by cluster, launch type, and scheduling strategy.
     * @param xAmzTarget  (required)
     * @param listServicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServicesAsync(String xAmzTarget, ListServicesRequest listServicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListServicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServicesValidateBeforeCall(xAmzTarget, listServicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListServicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServicesByNamespace
     * @param xAmzTarget  (required)
     * @param listServicesByNamespaceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServicesByNamespaceCall(String xAmzTarget, ListServicesByNamespaceRequest listServicesByNamespaceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listServicesByNamespaceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListServicesByNamespace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServicesByNamespaceValidateBeforeCall(String xAmzTarget, ListServicesByNamespaceRequest listServicesByNamespaceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listServicesByNamespace(Async)");
        }

        // verify the required parameter 'listServicesByNamespaceRequest' is set
        if (listServicesByNamespaceRequest == null) {
            throw new ApiException("Missing the required parameter 'listServicesByNamespaceRequest' when calling listServicesByNamespace(Async)");
        }

        return listServicesByNamespaceCall(xAmzTarget, listServicesByNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * This operation lists all of the services that are associated with a Cloud Map namespace. This list might include services in different clusters. In contrast, &lt;code&gt;ListServices&lt;/code&gt; can only list services in one cluster at a time. If you need to filter the list of services in a single cluster by various parameters, use &lt;code&gt;ListServices&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html\&quot;&gt;Service Connect&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param listServicesByNamespaceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListServicesByNamespaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListServicesByNamespaceResponse listServicesByNamespace(String xAmzTarget, ListServicesByNamespaceRequest listServicesByNamespaceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListServicesByNamespaceResponse> localVarResp = listServicesByNamespaceWithHttpInfo(xAmzTarget, listServicesByNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation lists all of the services that are associated with a Cloud Map namespace. This list might include services in different clusters. In contrast, &lt;code&gt;ListServices&lt;/code&gt; can only list services in one cluster at a time. If you need to filter the list of services in a single cluster by various parameters, use &lt;code&gt;ListServices&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html\&quot;&gt;Service Connect&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param listServicesByNamespaceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListServicesByNamespaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListServicesByNamespaceResponse> listServicesByNamespaceWithHttpInfo(String xAmzTarget, ListServicesByNamespaceRequest listServicesByNamespaceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listServicesByNamespaceValidateBeforeCall(xAmzTarget, listServicesByNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListServicesByNamespaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation lists all of the services that are associated with a Cloud Map namespace. This list might include services in different clusters. In contrast, &lt;code&gt;ListServices&lt;/code&gt; can only list services in one cluster at a time. If you need to filter the list of services in a single cluster by various parameters, use &lt;code&gt;ListServices&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html\&quot;&gt;Service Connect&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param listServicesByNamespaceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServicesByNamespaceAsync(String xAmzTarget, ListServicesByNamespaceRequest listServicesByNamespaceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListServicesByNamespaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServicesByNamespaceValidateBeforeCall(xAmzTarget, listServicesByNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListServicesByNamespaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTagsForResource(Async)");
        }

        // verify the required parameter 'listTagsForResourceRequest' is set
        if (listTagsForResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * List the tags for an Amazon ECS resource.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse listTagsForResource(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = listTagsForResourceWithHttpInfo(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * List the tags for an Amazon ECS resource.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> listTagsForResourceWithHttpInfo(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the tags for an Amazon ECS resource.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTaskDefinitionFamilies
     * @param xAmzTarget  (required)
     * @param listTaskDefinitionFamiliesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTaskDefinitionFamiliesCall(String xAmzTarget, ListTaskDefinitionFamiliesRequest listTaskDefinitionFamiliesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTaskDefinitionFamiliesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListTaskDefinitionFamilies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTaskDefinitionFamiliesValidateBeforeCall(String xAmzTarget, ListTaskDefinitionFamiliesRequest listTaskDefinitionFamiliesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTaskDefinitionFamilies(Async)");
        }

        // verify the required parameter 'listTaskDefinitionFamiliesRequest' is set
        if (listTaskDefinitionFamiliesRequest == null) {
            throw new ApiException("Missing the required parameter 'listTaskDefinitionFamiliesRequest' when calling listTaskDefinitionFamilies(Async)");
        }

        return listTaskDefinitionFamiliesCall(xAmzTarget, listTaskDefinitionFamiliesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of task definition families that are registered to your account. This list includes task definition families that no longer have any &lt;code&gt;ACTIVE&lt;/code&gt; task definition revisions.&lt;/p&gt; &lt;p&gt;You can filter out task definition families that don&#39;t contain any &lt;code&gt;ACTIVE&lt;/code&gt; task definition revisions by setting the &lt;code&gt;status&lt;/code&gt; parameter to &lt;code&gt;ACTIVE&lt;/code&gt;. You can also filter the results with the &lt;code&gt;familyPrefix&lt;/code&gt; parameter.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTaskDefinitionFamiliesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListTaskDefinitionFamiliesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ListTaskDefinitionFamiliesResponse listTaskDefinitionFamilies(String xAmzTarget, ListTaskDefinitionFamiliesRequest listTaskDefinitionFamiliesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListTaskDefinitionFamiliesResponse> localVarResp = listTaskDefinitionFamiliesWithHttpInfo(xAmzTarget, listTaskDefinitionFamiliesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of task definition families that are registered to your account. This list includes task definition families that no longer have any &lt;code&gt;ACTIVE&lt;/code&gt; task definition revisions.&lt;/p&gt; &lt;p&gt;You can filter out task definition families that don&#39;t contain any &lt;code&gt;ACTIVE&lt;/code&gt; task definition revisions by setting the &lt;code&gt;status&lt;/code&gt; parameter to &lt;code&gt;ACTIVE&lt;/code&gt;. You can also filter the results with the &lt;code&gt;familyPrefix&lt;/code&gt; parameter.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTaskDefinitionFamiliesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListTaskDefinitionFamiliesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTaskDefinitionFamiliesResponse> listTaskDefinitionFamiliesWithHttpInfo(String xAmzTarget, ListTaskDefinitionFamiliesRequest listTaskDefinitionFamiliesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listTaskDefinitionFamiliesValidateBeforeCall(xAmzTarget, listTaskDefinitionFamiliesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTaskDefinitionFamiliesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of task definition families that are registered to your account. This list includes task definition families that no longer have any &lt;code&gt;ACTIVE&lt;/code&gt; task definition revisions.&lt;/p&gt; &lt;p&gt;You can filter out task definition families that don&#39;t contain any &lt;code&gt;ACTIVE&lt;/code&gt; task definition revisions by setting the &lt;code&gt;status&lt;/code&gt; parameter to &lt;code&gt;ACTIVE&lt;/code&gt;. You can also filter the results with the &lt;code&gt;familyPrefix&lt;/code&gt; parameter.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTaskDefinitionFamiliesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTaskDefinitionFamiliesAsync(String xAmzTarget, ListTaskDefinitionFamiliesRequest listTaskDefinitionFamiliesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListTaskDefinitionFamiliesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTaskDefinitionFamiliesValidateBeforeCall(xAmzTarget, listTaskDefinitionFamiliesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTaskDefinitionFamiliesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTaskDefinitions
     * @param xAmzTarget  (required)
     * @param listTaskDefinitionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTaskDefinitionsCall(String xAmzTarget, ListTaskDefinitionsRequest listTaskDefinitionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTaskDefinitionsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListTaskDefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTaskDefinitionsValidateBeforeCall(String xAmzTarget, ListTaskDefinitionsRequest listTaskDefinitionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTaskDefinitions(Async)");
        }

        // verify the required parameter 'listTaskDefinitionsRequest' is set
        if (listTaskDefinitionsRequest == null) {
            throw new ApiException("Missing the required parameter 'listTaskDefinitionsRequest' when calling listTaskDefinitions(Async)");
        }

        return listTaskDefinitionsCall(xAmzTarget, listTaskDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of task definitions that are registered to your account. You can filter the results by family name with the &lt;code&gt;familyPrefix&lt;/code&gt; parameter or by status with the &lt;code&gt;status&lt;/code&gt; parameter.
     * @param xAmzTarget  (required)
     * @param listTaskDefinitionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListTaskDefinitionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ListTaskDefinitionsResponse listTaskDefinitions(String xAmzTarget, ListTaskDefinitionsRequest listTaskDefinitionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListTaskDefinitionsResponse> localVarResp = listTaskDefinitionsWithHttpInfo(xAmzTarget, listTaskDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of task definitions that are registered to your account. You can filter the results by family name with the &lt;code&gt;familyPrefix&lt;/code&gt; parameter or by status with the &lt;code&gt;status&lt;/code&gt; parameter.
     * @param xAmzTarget  (required)
     * @param listTaskDefinitionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListTaskDefinitionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTaskDefinitionsResponse> listTaskDefinitionsWithHttpInfo(String xAmzTarget, ListTaskDefinitionsRequest listTaskDefinitionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listTaskDefinitionsValidateBeforeCall(xAmzTarget, listTaskDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTaskDefinitionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of task definitions that are registered to your account. You can filter the results by family name with the &lt;code&gt;familyPrefix&lt;/code&gt; parameter or by status with the &lt;code&gt;status&lt;/code&gt; parameter.
     * @param xAmzTarget  (required)
     * @param listTaskDefinitionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTaskDefinitionsAsync(String xAmzTarget, ListTaskDefinitionsRequest listTaskDefinitionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListTaskDefinitionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTaskDefinitionsValidateBeforeCall(xAmzTarget, listTaskDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTaskDefinitionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTasks
     * @param xAmzTarget  (required)
     * @param listTasksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTasksCall(String xAmzTarget, ListTasksRequest listTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTasksRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListTasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTasksValidateBeforeCall(String xAmzTarget, ListTasksRequest listTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTasks(Async)");
        }

        // verify the required parameter 'listTasksRequest' is set
        if (listTasksRequest == null) {
            throw new ApiException("Missing the required parameter 'listTasksRequest' when calling listTasks(Async)");
        }

        return listTasksCall(xAmzTarget, listTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of tasks. You can filter the results by cluster, task definition family, container instance, launch type, what IAM principal started the task, or by the desired status of the task.&lt;/p&gt; &lt;p&gt;Recently stopped tasks might appear in the returned results. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTasksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListTasksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListTasksResponse listTasks(String xAmzTarget, ListTasksRequest listTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListTasksResponse> localVarResp = listTasksWithHttpInfo(xAmzTarget, listTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of tasks. You can filter the results by cluster, task definition family, container instance, launch type, what IAM principal started the task, or by the desired status of the task.&lt;/p&gt; &lt;p&gt;Recently stopped tasks might appear in the returned results. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTasksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListTasksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTasksResponse> listTasksWithHttpInfo(String xAmzTarget, ListTasksRequest listTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listTasksValidateBeforeCall(xAmzTarget, listTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTasksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of tasks. You can filter the results by cluster, task definition family, container instance, launch type, what IAM principal started the task, or by the desired status of the task.&lt;/p&gt; &lt;p&gt;Recently stopped tasks might appear in the returned results. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTasksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTasksAsync(String xAmzTarget, ListTasksRequest listTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListTasksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTasksValidateBeforeCall(xAmzTarget, listTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTasksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAccountSetting
     * @param xAmzTarget  (required)
     * @param putAccountSettingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAccountSettingCall(String xAmzTarget, PutAccountSettingRequest putAccountSettingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putAccountSettingRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.PutAccountSetting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAccountSettingValidateBeforeCall(String xAmzTarget, PutAccountSettingRequest putAccountSettingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putAccountSetting(Async)");
        }

        // verify the required parameter 'putAccountSettingRequest' is set
        if (putAccountSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'putAccountSettingRequest' when calling putAccountSetting(Async)");
        }

        return putAccountSettingCall(xAmzTarget, putAccountSettingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies an account setting. Account settings are set on a per-Region basis.&lt;/p&gt; &lt;p&gt;If you change the root user account setting, the default settings are reset for users and roles that do not have specified individual account settings. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html\&quot;&gt;Account Settings&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;serviceLongArnFormat&lt;/code&gt;, &lt;code&gt;taskLongArnFormat&lt;/code&gt;, or &lt;code&gt;containerInstanceLongArnFormat&lt;/code&gt; are specified, the Amazon Resource Name (ARN) and resource ID format of the resource type for a specified user, role, or the root user for an account is affected. The opt-in and opt-out account setting must be set for each Amazon ECS resource separately. The ARN and resource ID format of a resource is defined by the opt-in status of the user or role that created the resource. You must turn on this setting to use Amazon ECS features such as resource tagging.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;awsvpcTrunking&lt;/code&gt; is specified, the elastic network interface (ENI) limit for any new container instances that support the feature is changed. If &lt;code&gt;awsvpcTrunking&lt;/code&gt; is turned on, any new container instances that support the feature are launched have the increased ENI limits available to them. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-eni.html\&quot;&gt;Elastic Network Interface Trunking&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;containerInsights&lt;/code&gt; is specified, the default setting indicating whether Amazon Web Services CloudWatch Container Insights is turned on for your clusters is changed. If &lt;code&gt;containerInsights&lt;/code&gt; is turned on, any new clusters that are created will have Container Insights turned on unless you disable it during cluster creation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html\&quot;&gt;CloudWatch Container Insights&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Amazon ECS is introducing tagging authorization for resource creation. Users must have permissions for actions that create the resource, such as &lt;code&gt;ecsCreateCluster&lt;/code&gt;. If tags are specified when you create a resource, Amazon Web Services performs additional authorization to verify if users or roles have permissions to create tags. Therefore, you must grant explicit permissions to use the &lt;code&gt;ecs:TagResource&lt;/code&gt; action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/supported-iam-actions-tagging.html\&quot;&gt;Grant permission to tag resources on creation&lt;/a&gt; in the &lt;i&gt;Amazon ECS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putAccountSettingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutAccountSettingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public PutAccountSettingResponse putAccountSetting(String xAmzTarget, PutAccountSettingRequest putAccountSettingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutAccountSettingResponse> localVarResp = putAccountSettingWithHttpInfo(xAmzTarget, putAccountSettingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies an account setting. Account settings are set on a per-Region basis.&lt;/p&gt; &lt;p&gt;If you change the root user account setting, the default settings are reset for users and roles that do not have specified individual account settings. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html\&quot;&gt;Account Settings&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;serviceLongArnFormat&lt;/code&gt;, &lt;code&gt;taskLongArnFormat&lt;/code&gt;, or &lt;code&gt;containerInstanceLongArnFormat&lt;/code&gt; are specified, the Amazon Resource Name (ARN) and resource ID format of the resource type for a specified user, role, or the root user for an account is affected. The opt-in and opt-out account setting must be set for each Amazon ECS resource separately. The ARN and resource ID format of a resource is defined by the opt-in status of the user or role that created the resource. You must turn on this setting to use Amazon ECS features such as resource tagging.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;awsvpcTrunking&lt;/code&gt; is specified, the elastic network interface (ENI) limit for any new container instances that support the feature is changed. If &lt;code&gt;awsvpcTrunking&lt;/code&gt; is turned on, any new container instances that support the feature are launched have the increased ENI limits available to them. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-eni.html\&quot;&gt;Elastic Network Interface Trunking&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;containerInsights&lt;/code&gt; is specified, the default setting indicating whether Amazon Web Services CloudWatch Container Insights is turned on for your clusters is changed. If &lt;code&gt;containerInsights&lt;/code&gt; is turned on, any new clusters that are created will have Container Insights turned on unless you disable it during cluster creation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html\&quot;&gt;CloudWatch Container Insights&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Amazon ECS is introducing tagging authorization for resource creation. Users must have permissions for actions that create the resource, such as &lt;code&gt;ecsCreateCluster&lt;/code&gt;. If tags are specified when you create a resource, Amazon Web Services performs additional authorization to verify if users or roles have permissions to create tags. Therefore, you must grant explicit permissions to use the &lt;code&gt;ecs:TagResource&lt;/code&gt; action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/supported-iam-actions-tagging.html\&quot;&gt;Grant permission to tag resources on creation&lt;/a&gt; in the &lt;i&gt;Amazon ECS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putAccountSettingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutAccountSettingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutAccountSettingResponse> putAccountSettingWithHttpInfo(String xAmzTarget, PutAccountSettingRequest putAccountSettingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putAccountSettingValidateBeforeCall(xAmzTarget, putAccountSettingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutAccountSettingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies an account setting. Account settings are set on a per-Region basis.&lt;/p&gt; &lt;p&gt;If you change the root user account setting, the default settings are reset for users and roles that do not have specified individual account settings. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html\&quot;&gt;Account Settings&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;serviceLongArnFormat&lt;/code&gt;, &lt;code&gt;taskLongArnFormat&lt;/code&gt;, or &lt;code&gt;containerInstanceLongArnFormat&lt;/code&gt; are specified, the Amazon Resource Name (ARN) and resource ID format of the resource type for a specified user, role, or the root user for an account is affected. The opt-in and opt-out account setting must be set for each Amazon ECS resource separately. The ARN and resource ID format of a resource is defined by the opt-in status of the user or role that created the resource. You must turn on this setting to use Amazon ECS features such as resource tagging.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;awsvpcTrunking&lt;/code&gt; is specified, the elastic network interface (ENI) limit for any new container instances that support the feature is changed. If &lt;code&gt;awsvpcTrunking&lt;/code&gt; is turned on, any new container instances that support the feature are launched have the increased ENI limits available to them. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-eni.html\&quot;&gt;Elastic Network Interface Trunking&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;containerInsights&lt;/code&gt; is specified, the default setting indicating whether Amazon Web Services CloudWatch Container Insights is turned on for your clusters is changed. If &lt;code&gt;containerInsights&lt;/code&gt; is turned on, any new clusters that are created will have Container Insights turned on unless you disable it during cluster creation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html\&quot;&gt;CloudWatch Container Insights&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Amazon ECS is introducing tagging authorization for resource creation. Users must have permissions for actions that create the resource, such as &lt;code&gt;ecsCreateCluster&lt;/code&gt;. If tags are specified when you create a resource, Amazon Web Services performs additional authorization to verify if users or roles have permissions to create tags. Therefore, you must grant explicit permissions to use the &lt;code&gt;ecs:TagResource&lt;/code&gt; action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/supported-iam-actions-tagging.html\&quot;&gt;Grant permission to tag resources on creation&lt;/a&gt; in the &lt;i&gt;Amazon ECS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putAccountSettingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAccountSettingAsync(String xAmzTarget, PutAccountSettingRequest putAccountSettingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutAccountSettingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAccountSettingValidateBeforeCall(xAmzTarget, putAccountSettingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutAccountSettingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAccountSettingDefault
     * @param xAmzTarget  (required)
     * @param putAccountSettingDefaultRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAccountSettingDefaultCall(String xAmzTarget, PutAccountSettingDefaultRequest putAccountSettingDefaultRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putAccountSettingDefaultRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.PutAccountSettingDefault";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAccountSettingDefaultValidateBeforeCall(String xAmzTarget, PutAccountSettingDefaultRequest putAccountSettingDefaultRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putAccountSettingDefault(Async)");
        }

        // verify the required parameter 'putAccountSettingDefaultRequest' is set
        if (putAccountSettingDefaultRequest == null) {
            throw new ApiException("Missing the required parameter 'putAccountSettingDefaultRequest' when calling putAccountSettingDefault(Async)");
        }

        return putAccountSettingDefaultCall(xAmzTarget, putAccountSettingDefaultRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Modifies an account setting for all users on an account for whom no individual account setting has been specified. Account settings are set on a per-Region basis.
     * @param xAmzTarget  (required)
     * @param putAccountSettingDefaultRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutAccountSettingDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public PutAccountSettingDefaultResponse putAccountSettingDefault(String xAmzTarget, PutAccountSettingDefaultRequest putAccountSettingDefaultRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutAccountSettingDefaultResponse> localVarResp = putAccountSettingDefaultWithHttpInfo(xAmzTarget, putAccountSettingDefaultRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies an account setting for all users on an account for whom no individual account setting has been specified. Account settings are set on a per-Region basis.
     * @param xAmzTarget  (required)
     * @param putAccountSettingDefaultRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutAccountSettingDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutAccountSettingDefaultResponse> putAccountSettingDefaultWithHttpInfo(String xAmzTarget, PutAccountSettingDefaultRequest putAccountSettingDefaultRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putAccountSettingDefaultValidateBeforeCall(xAmzTarget, putAccountSettingDefaultRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutAccountSettingDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies an account setting for all users on an account for whom no individual account setting has been specified. Account settings are set on a per-Region basis.
     * @param xAmzTarget  (required)
     * @param putAccountSettingDefaultRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAccountSettingDefaultAsync(String xAmzTarget, PutAccountSettingDefaultRequest putAccountSettingDefaultRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutAccountSettingDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAccountSettingDefaultValidateBeforeCall(xAmzTarget, putAccountSettingDefaultRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutAccountSettingDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAttributes
     * @param xAmzTarget  (required)
     * @param putAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AttributeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAttributesCall(String xAmzTarget, PutAttributesRequest putAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putAttributesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.PutAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAttributesValidateBeforeCall(String xAmzTarget, PutAttributesRequest putAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putAttributes(Async)");
        }

        // verify the required parameter 'putAttributesRequest' is set
        if (putAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'putAttributesRequest' when calling putAttributes(Async)");
        }

        return putAttributesCall(xAmzTarget, putAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create or update an attribute on an Amazon ECS resource. If the attribute doesn&#39;t exist, it&#39;s created. If the attribute exists, its value is replaced with the specified value. To delete an attribute, use &lt;a&gt;DeleteAttributes&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes\&quot;&gt;Attributes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param putAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AttributeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public PutAttributesResponse putAttributes(String xAmzTarget, PutAttributesRequest putAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutAttributesResponse> localVarResp = putAttributesWithHttpInfo(xAmzTarget, putAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an attribute on an Amazon ECS resource. If the attribute doesn&#39;t exist, it&#39;s created. If the attribute exists, its value is replaced with the specified value. To delete an attribute, use &lt;a&gt;DeleteAttributes&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes\&quot;&gt;Attributes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param putAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AttributeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutAttributesResponse> putAttributesWithHttpInfo(String xAmzTarget, PutAttributesRequest putAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putAttributesValidateBeforeCall(xAmzTarget, putAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an attribute on an Amazon ECS resource. If the attribute doesn&#39;t exist, it&#39;s created. If the attribute exists, its value is replaced with the specified value. To delete an attribute, use &lt;a&gt;DeleteAttributes&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes\&quot;&gt;Attributes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param putAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AttributeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAttributesAsync(String xAmzTarget, PutAttributesRequest putAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAttributesValidateBeforeCall(xAmzTarget, putAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putClusterCapacityProviders
     * @param xAmzTarget  (required)
     * @param putClusterCapacityProvidersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putClusterCapacityProvidersCall(String xAmzTarget, PutClusterCapacityProvidersRequest putClusterCapacityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putClusterCapacityProvidersRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.PutClusterCapacityProviders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putClusterCapacityProvidersValidateBeforeCall(String xAmzTarget, PutClusterCapacityProvidersRequest putClusterCapacityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putClusterCapacityProviders(Async)");
        }

        // verify the required parameter 'putClusterCapacityProvidersRequest' is set
        if (putClusterCapacityProvidersRequest == null) {
            throw new ApiException("Missing the required parameter 'putClusterCapacityProvidersRequest' when calling putClusterCapacityProviders(Async)");
        }

        return putClusterCapacityProvidersCall(xAmzTarget, putClusterCapacityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the available capacity providers and the default capacity provider strategy for a cluster.&lt;/p&gt; &lt;p&gt;You must specify both the available capacity providers and a default capacity provider strategy for the cluster. If the specified cluster has existing capacity providers associated with it, you must specify all existing capacity providers in addition to any new ones you want to add. Any existing capacity providers that are associated with a cluster that are omitted from a &lt;a&gt;PutClusterCapacityProviders&lt;/a&gt; API call will be disassociated with the cluster. You can only disassociate an existing capacity provider from a cluster if it&#39;s not being used by any existing tasks.&lt;/p&gt; &lt;p&gt;When creating a service or running a task on a cluster, if no capacity provider or launch type is specified, then the cluster&#39;s default capacity provider strategy is used. We recommend that you define a default capacity provider strategy for your cluster. However, you must specify an empty array (&lt;code&gt;[]&lt;/code&gt;) to bypass defining a default strategy.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putClusterCapacityProvidersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutClusterCapacityProvidersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public PutClusterCapacityProvidersResponse putClusterCapacityProviders(String xAmzTarget, PutClusterCapacityProvidersRequest putClusterCapacityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutClusterCapacityProvidersResponse> localVarResp = putClusterCapacityProvidersWithHttpInfo(xAmzTarget, putClusterCapacityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the available capacity providers and the default capacity provider strategy for a cluster.&lt;/p&gt; &lt;p&gt;You must specify both the available capacity providers and a default capacity provider strategy for the cluster. If the specified cluster has existing capacity providers associated with it, you must specify all existing capacity providers in addition to any new ones you want to add. Any existing capacity providers that are associated with a cluster that are omitted from a &lt;a&gt;PutClusterCapacityProviders&lt;/a&gt; API call will be disassociated with the cluster. You can only disassociate an existing capacity provider from a cluster if it&#39;s not being used by any existing tasks.&lt;/p&gt; &lt;p&gt;When creating a service or running a task on a cluster, if no capacity provider or launch type is specified, then the cluster&#39;s default capacity provider strategy is used. We recommend that you define a default capacity provider strategy for your cluster. However, you must specify an empty array (&lt;code&gt;[]&lt;/code&gt;) to bypass defining a default strategy.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putClusterCapacityProvidersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutClusterCapacityProvidersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutClusterCapacityProvidersResponse> putClusterCapacityProvidersWithHttpInfo(String xAmzTarget, PutClusterCapacityProvidersRequest putClusterCapacityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putClusterCapacityProvidersValidateBeforeCall(xAmzTarget, putClusterCapacityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutClusterCapacityProvidersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the available capacity providers and the default capacity provider strategy for a cluster.&lt;/p&gt; &lt;p&gt;You must specify both the available capacity providers and a default capacity provider strategy for the cluster. If the specified cluster has existing capacity providers associated with it, you must specify all existing capacity providers in addition to any new ones you want to add. Any existing capacity providers that are associated with a cluster that are omitted from a &lt;a&gt;PutClusterCapacityProviders&lt;/a&gt; API call will be disassociated with the cluster. You can only disassociate an existing capacity provider from a cluster if it&#39;s not being used by any existing tasks.&lt;/p&gt; &lt;p&gt;When creating a service or running a task on a cluster, if no capacity provider or launch type is specified, then the cluster&#39;s default capacity provider strategy is used. We recommend that you define a default capacity provider strategy for your cluster. However, you must specify an empty array (&lt;code&gt;[]&lt;/code&gt;) to bypass defining a default strategy.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putClusterCapacityProvidersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putClusterCapacityProvidersAsync(String xAmzTarget, PutClusterCapacityProvidersRequest putClusterCapacityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutClusterCapacityProvidersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putClusterCapacityProvidersValidateBeforeCall(xAmzTarget, putClusterCapacityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutClusterCapacityProvidersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerContainerInstance
     * @param xAmzTarget  (required)
     * @param registerContainerInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerContainerInstanceCall(String xAmzTarget, RegisterContainerInstanceRequest registerContainerInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerContainerInstanceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.RegisterContainerInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerContainerInstanceValidateBeforeCall(String xAmzTarget, RegisterContainerInstanceRequest registerContainerInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling registerContainerInstance(Async)");
        }

        // verify the required parameter 'registerContainerInstanceRequest' is set
        if (registerContainerInstanceRequest == null) {
            throw new ApiException("Missing the required parameter 'registerContainerInstanceRequest' when calling registerContainerInstance(Async)");
        }

        return registerContainerInstanceCall(xAmzTarget, registerContainerInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Registers an EC2 instance into the specified cluster. This instance becomes available to place containers on.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param registerContainerInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RegisterContainerInstanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public RegisterContainerInstanceResponse registerContainerInstance(String xAmzTarget, RegisterContainerInstanceRequest registerContainerInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RegisterContainerInstanceResponse> localVarResp = registerContainerInstanceWithHttpInfo(xAmzTarget, registerContainerInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Registers an EC2 instance into the specified cluster. This instance becomes available to place containers on.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param registerContainerInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RegisterContainerInstanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterContainerInstanceResponse> registerContainerInstanceWithHttpInfo(String xAmzTarget, RegisterContainerInstanceRequest registerContainerInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = registerContainerInstanceValidateBeforeCall(xAmzTarget, registerContainerInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RegisterContainerInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Registers an EC2 instance into the specified cluster. This instance becomes available to place containers on.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param registerContainerInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerContainerInstanceAsync(String xAmzTarget, RegisterContainerInstanceRequest registerContainerInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RegisterContainerInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerContainerInstanceValidateBeforeCall(xAmzTarget, registerContainerInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RegisterContainerInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerTaskDefinition
     * @param xAmzTarget  (required)
     * @param registerTaskDefinitionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerTaskDefinitionCall(String xAmzTarget, RegisterTaskDefinitionRequest registerTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerTaskDefinitionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.RegisterTaskDefinition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerTaskDefinitionValidateBeforeCall(String xAmzTarget, RegisterTaskDefinitionRequest registerTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling registerTaskDefinition(Async)");
        }

        // verify the required parameter 'registerTaskDefinitionRequest' is set
        if (registerTaskDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'registerTaskDefinitionRequest' when calling registerTaskDefinition(Async)");
        }

        return registerTaskDefinitionCall(xAmzTarget, registerTaskDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Registers a new task definition from the supplied &lt;code&gt;family&lt;/code&gt; and &lt;code&gt;containerDefinitions&lt;/code&gt;. Optionally, you can add data volumes to your containers with the &lt;code&gt;volumes&lt;/code&gt; parameter. For more information about task definition parameters and defaults, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html\&quot;&gt;Amazon ECS Task Definitions&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify a role for your task with the &lt;code&gt;taskRoleArn&lt;/code&gt; parameter. When you specify a role for a task, its containers can then use the latest versions of the CLI or SDKs to make API requests to the Amazon Web Services services that are specified in the policy that&#39;s associated with the role. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html\&quot;&gt;IAM Roles for Tasks&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify a Docker networking mode for the containers in your task definition with the &lt;code&gt;networkMode&lt;/code&gt; parameter. The available network modes correspond to those described in &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/reference/run/#/network-settings\&quot;&gt;Network settings&lt;/a&gt; in the Docker run reference. If you specify the &lt;code&gt;awsvpc&lt;/code&gt; network mode, the task is allocated an elastic network interface, and you must specify a &lt;a&gt;NetworkConfiguration&lt;/a&gt; when you create a service or run a task with the task definition. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html\&quot;&gt;Task Networking&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param registerTaskDefinitionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RegisterTaskDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public RegisterTaskDefinitionResponse registerTaskDefinition(String xAmzTarget, RegisterTaskDefinitionRequest registerTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RegisterTaskDefinitionResponse> localVarResp = registerTaskDefinitionWithHttpInfo(xAmzTarget, registerTaskDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Registers a new task definition from the supplied &lt;code&gt;family&lt;/code&gt; and &lt;code&gt;containerDefinitions&lt;/code&gt;. Optionally, you can add data volumes to your containers with the &lt;code&gt;volumes&lt;/code&gt; parameter. For more information about task definition parameters and defaults, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html\&quot;&gt;Amazon ECS Task Definitions&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify a role for your task with the &lt;code&gt;taskRoleArn&lt;/code&gt; parameter. When you specify a role for a task, its containers can then use the latest versions of the CLI or SDKs to make API requests to the Amazon Web Services services that are specified in the policy that&#39;s associated with the role. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html\&quot;&gt;IAM Roles for Tasks&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify a Docker networking mode for the containers in your task definition with the &lt;code&gt;networkMode&lt;/code&gt; parameter. The available network modes correspond to those described in &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/reference/run/#/network-settings\&quot;&gt;Network settings&lt;/a&gt; in the Docker run reference. If you specify the &lt;code&gt;awsvpc&lt;/code&gt; network mode, the task is allocated an elastic network interface, and you must specify a &lt;a&gt;NetworkConfiguration&lt;/a&gt; when you create a service or run a task with the task definition. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html\&quot;&gt;Task Networking&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param registerTaskDefinitionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RegisterTaskDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterTaskDefinitionResponse> registerTaskDefinitionWithHttpInfo(String xAmzTarget, RegisterTaskDefinitionRequest registerTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = registerTaskDefinitionValidateBeforeCall(xAmzTarget, registerTaskDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RegisterTaskDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Registers a new task definition from the supplied &lt;code&gt;family&lt;/code&gt; and &lt;code&gt;containerDefinitions&lt;/code&gt;. Optionally, you can add data volumes to your containers with the &lt;code&gt;volumes&lt;/code&gt; parameter. For more information about task definition parameters and defaults, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html\&quot;&gt;Amazon ECS Task Definitions&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify a role for your task with the &lt;code&gt;taskRoleArn&lt;/code&gt; parameter. When you specify a role for a task, its containers can then use the latest versions of the CLI or SDKs to make API requests to the Amazon Web Services services that are specified in the policy that&#39;s associated with the role. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html\&quot;&gt;IAM Roles for Tasks&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify a Docker networking mode for the containers in your task definition with the &lt;code&gt;networkMode&lt;/code&gt; parameter. The available network modes correspond to those described in &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/reference/run/#/network-settings\&quot;&gt;Network settings&lt;/a&gt; in the Docker run reference. If you specify the &lt;code&gt;awsvpc&lt;/code&gt; network mode, the task is allocated an elastic network interface, and you must specify a &lt;a&gt;NetworkConfiguration&lt;/a&gt; when you create a service or run a task with the task definition. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html\&quot;&gt;Task Networking&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param registerTaskDefinitionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerTaskDefinitionAsync(String xAmzTarget, RegisterTaskDefinitionRequest registerTaskDefinitionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RegisterTaskDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerTaskDefinitionValidateBeforeCall(xAmzTarget, registerTaskDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RegisterTaskDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for runTask
     * @param xAmzTarget  (required)
     * @param runTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> BlockedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runTaskCall(String xAmzTarget, RunTaskRequest runTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = runTaskRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.RunTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runTaskValidateBeforeCall(String xAmzTarget, RunTaskRequest runTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling runTask(Async)");
        }

        // verify the required parameter 'runTaskRequest' is set
        if (runTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'runTaskRequest' when calling runTask(Async)");
        }

        return runTaskCall(xAmzTarget, runTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts a new task using the specified task definition.&lt;/p&gt; &lt;p&gt;You can allow Amazon ECS to place tasks for you, or you can customize how Amazon ECS places tasks using placement constraints and placement strategies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html\&quot;&gt;Scheduling Tasks&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Alternatively, you can use &lt;a&gt;StartTask&lt;/a&gt; to use your own scheduler or place tasks manually on specific container instances.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Amazon ECS API follows an eventual consistency model. This is because of the distributed nature of the system supporting the API. This means that the result of an API command you run that affects your Amazon ECS resources might not be immediately visible to all subsequent commands you run. Keep this in mind when you carry out an API command that immediately follows a previous API command.&lt;/p&gt; &lt;p&gt;To manage eventual consistency, you can do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Confirm the state of the resource before you run a command to modify it. Run the DescribeTasks command using an exponential backoff algorithm to ensure that you allow enough time for the previous command to propagate through the system. To do this, run the DescribeTasks command repeatedly, starting with a couple of seconds of wait time and increasing gradually up to five minutes of wait time.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add wait time between subsequent commands, even if the DescribeTasks command returns an accurate response. Apply an exponential backoff algorithm starting with a couple of seconds of wait time, and increase gradually up to about five minutes of wait time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param runTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RunTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> BlockedException </td><td>  -  </td></tr>
     </table>
     */
    public RunTaskResponse runTask(String xAmzTarget, RunTaskRequest runTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RunTaskResponse> localVarResp = runTaskWithHttpInfo(xAmzTarget, runTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts a new task using the specified task definition.&lt;/p&gt; &lt;p&gt;You can allow Amazon ECS to place tasks for you, or you can customize how Amazon ECS places tasks using placement constraints and placement strategies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html\&quot;&gt;Scheduling Tasks&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Alternatively, you can use &lt;a&gt;StartTask&lt;/a&gt; to use your own scheduler or place tasks manually on specific container instances.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Amazon ECS API follows an eventual consistency model. This is because of the distributed nature of the system supporting the API. This means that the result of an API command you run that affects your Amazon ECS resources might not be immediately visible to all subsequent commands you run. Keep this in mind when you carry out an API command that immediately follows a previous API command.&lt;/p&gt; &lt;p&gt;To manage eventual consistency, you can do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Confirm the state of the resource before you run a command to modify it. Run the DescribeTasks command using an exponential backoff algorithm to ensure that you allow enough time for the previous command to propagate through the system. To do this, run the DescribeTasks command repeatedly, starting with a couple of seconds of wait time and increasing gradually up to five minutes of wait time.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add wait time between subsequent commands, even if the DescribeTasks command returns an accurate response. Apply an exponential backoff algorithm starting with a couple of seconds of wait time, and increase gradually up to about five minutes of wait time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param runTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RunTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> BlockedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RunTaskResponse> runTaskWithHttpInfo(String xAmzTarget, RunTaskRequest runTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = runTaskValidateBeforeCall(xAmzTarget, runTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RunTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts a new task using the specified task definition.&lt;/p&gt; &lt;p&gt;You can allow Amazon ECS to place tasks for you, or you can customize how Amazon ECS places tasks using placement constraints and placement strategies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html\&quot;&gt;Scheduling Tasks&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Alternatively, you can use &lt;a&gt;StartTask&lt;/a&gt; to use your own scheduler or place tasks manually on specific container instances.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Amazon ECS API follows an eventual consistency model. This is because of the distributed nature of the system supporting the API. This means that the result of an API command you run that affects your Amazon ECS resources might not be immediately visible to all subsequent commands you run. Keep this in mind when you carry out an API command that immediately follows a previous API command.&lt;/p&gt; &lt;p&gt;To manage eventual consistency, you can do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Confirm the state of the resource before you run a command to modify it. Run the DescribeTasks command using an exponential backoff algorithm to ensure that you allow enough time for the previous command to propagate through the system. To do this, run the DescribeTasks command repeatedly, starting with a couple of seconds of wait time and increasing gradually up to five minutes of wait time.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add wait time between subsequent commands, even if the DescribeTasks command returns an accurate response. Apply an exponential backoff algorithm starting with a couple of seconds of wait time, and increase gradually up to about five minutes of wait time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param runTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> BlockedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runTaskAsync(String xAmzTarget, RunTaskRequest runTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RunTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = runTaskValidateBeforeCall(xAmzTarget, runTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RunTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startTask
     * @param xAmzTarget  (required)
     * @param startTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startTaskCall(String xAmzTarget, StartTaskRequest startTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startTaskRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.StartTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startTaskValidateBeforeCall(String xAmzTarget, StartTaskRequest startTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startTask(Async)");
        }

        // verify the required parameter 'startTaskRequest' is set
        if (startTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'startTaskRequest' when calling startTask(Async)");
        }

        return startTaskCall(xAmzTarget, startTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts a new task from the specified task definition on the specified container instance or instances.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Alternatively, you can use &lt;a&gt;RunTask&lt;/a&gt; to place tasks for you. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html\&quot;&gt;Scheduling Tasks&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public StartTaskResponse startTask(String xAmzTarget, StartTaskRequest startTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartTaskResponse> localVarResp = startTaskWithHttpInfo(xAmzTarget, startTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts a new task from the specified task definition on the specified container instance or instances.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Alternatively, you can use &lt;a&gt;RunTask&lt;/a&gt; to place tasks for you. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html\&quot;&gt;Scheduling Tasks&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartTaskResponse> startTaskWithHttpInfo(String xAmzTarget, StartTaskRequest startTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startTaskValidateBeforeCall(xAmzTarget, startTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts a new task from the specified task definition on the specified container instance or instances.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Alternatively, you can use &lt;a&gt;RunTask&lt;/a&gt; to place tasks for you. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html\&quot;&gt;Scheduling Tasks&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startTaskAsync(String xAmzTarget, StartTaskRequest startTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startTaskValidateBeforeCall(xAmzTarget, startTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopTask
     * @param xAmzTarget  (required)
     * @param stopTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopTaskCall(String xAmzTarget, StopTaskRequest stopTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopTaskRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.StopTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopTaskValidateBeforeCall(String xAmzTarget, StopTaskRequest stopTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling stopTask(Async)");
        }

        // verify the required parameter 'stopTaskRequest' is set
        if (stopTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'stopTaskRequest' when calling stopTask(Async)");
        }

        return stopTaskCall(xAmzTarget, stopTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Stops a running task. Any tags associated with the task will be deleted.&lt;/p&gt; &lt;p&gt;When &lt;a&gt;StopTask&lt;/a&gt; is called on a task, the equivalent of &lt;code&gt;docker stop&lt;/code&gt; is issued to the containers running in the task. This results in a &lt;code&gt;SIGTERM&lt;/code&gt; value and a default 30-second timeout, after which the &lt;code&gt;SIGKILL&lt;/code&gt; value is sent and the containers are forcibly stopped. If the container handles the &lt;code&gt;SIGTERM&lt;/code&gt; value gracefully and exits within 30 seconds from receiving it, no &lt;code&gt;SIGKILL&lt;/code&gt; value is sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The default 30-second timeout can be configured on the Amazon ECS container agent with the &lt;code&gt;ECS_CONTAINER_STOP_TIMEOUT&lt;/code&gt; variable. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html\&quot;&gt;Amazon ECS Container Agent Configuration&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param stopTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StopTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public StopTaskResponse stopTask(String xAmzTarget, StopTaskRequest stopTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StopTaskResponse> localVarResp = stopTaskWithHttpInfo(xAmzTarget, stopTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Stops a running task. Any tags associated with the task will be deleted.&lt;/p&gt; &lt;p&gt;When &lt;a&gt;StopTask&lt;/a&gt; is called on a task, the equivalent of &lt;code&gt;docker stop&lt;/code&gt; is issued to the containers running in the task. This results in a &lt;code&gt;SIGTERM&lt;/code&gt; value and a default 30-second timeout, after which the &lt;code&gt;SIGKILL&lt;/code&gt; value is sent and the containers are forcibly stopped. If the container handles the &lt;code&gt;SIGTERM&lt;/code&gt; value gracefully and exits within 30 seconds from receiving it, no &lt;code&gt;SIGKILL&lt;/code&gt; value is sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The default 30-second timeout can be configured on the Amazon ECS container agent with the &lt;code&gt;ECS_CONTAINER_STOP_TIMEOUT&lt;/code&gt; variable. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html\&quot;&gt;Amazon ECS Container Agent Configuration&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param stopTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StopTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StopTaskResponse> stopTaskWithHttpInfo(String xAmzTarget, StopTaskRequest stopTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = stopTaskValidateBeforeCall(xAmzTarget, stopTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StopTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Stops a running task. Any tags associated with the task will be deleted.&lt;/p&gt; &lt;p&gt;When &lt;a&gt;StopTask&lt;/a&gt; is called on a task, the equivalent of &lt;code&gt;docker stop&lt;/code&gt; is issued to the containers running in the task. This results in a &lt;code&gt;SIGTERM&lt;/code&gt; value and a default 30-second timeout, after which the &lt;code&gt;SIGKILL&lt;/code&gt; value is sent and the containers are forcibly stopped. If the container handles the &lt;code&gt;SIGTERM&lt;/code&gt; value gracefully and exits within 30 seconds from receiving it, no &lt;code&gt;SIGKILL&lt;/code&gt; value is sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The default 30-second timeout can be configured on the Amazon ECS container agent with the &lt;code&gt;ECS_CONTAINER_STOP_TIMEOUT&lt;/code&gt; variable. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html\&quot;&gt;Amazon ECS Container Agent Configuration&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param stopTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopTaskAsync(String xAmzTarget, StopTaskRequest stopTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StopTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopTaskValidateBeforeCall(xAmzTarget, stopTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StopTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitAttachmentStateChanges
     * @param xAmzTarget  (required)
     * @param submitAttachmentStateChangesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitAttachmentStateChangesCall(String xAmzTarget, SubmitAttachmentStateChangesRequest submitAttachmentStateChangesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitAttachmentStateChangesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.SubmitAttachmentStateChanges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitAttachmentStateChangesValidateBeforeCall(String xAmzTarget, SubmitAttachmentStateChangesRequest submitAttachmentStateChangesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling submitAttachmentStateChanges(Async)");
        }

        // verify the required parameter 'submitAttachmentStateChangesRequest' is set
        if (submitAttachmentStateChangesRequest == null) {
            throw new ApiException("Missing the required parameter 'submitAttachmentStateChangesRequest' when calling submitAttachmentStateChanges(Async)");
        }

        return submitAttachmentStateChangesCall(xAmzTarget, submitAttachmentStateChangesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Sent to acknowledge that an attachment changed states.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param submitAttachmentStateChangesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SubmitAttachmentStateChangesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public SubmitAttachmentStateChangesResponse submitAttachmentStateChanges(String xAmzTarget, SubmitAttachmentStateChangesRequest submitAttachmentStateChangesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SubmitAttachmentStateChangesResponse> localVarResp = submitAttachmentStateChangesWithHttpInfo(xAmzTarget, submitAttachmentStateChangesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Sent to acknowledge that an attachment changed states.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param submitAttachmentStateChangesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SubmitAttachmentStateChangesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitAttachmentStateChangesResponse> submitAttachmentStateChangesWithHttpInfo(String xAmzTarget, SubmitAttachmentStateChangesRequest submitAttachmentStateChangesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = submitAttachmentStateChangesValidateBeforeCall(xAmzTarget, submitAttachmentStateChangesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SubmitAttachmentStateChangesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Sent to acknowledge that an attachment changed states.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param submitAttachmentStateChangesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitAttachmentStateChangesAsync(String xAmzTarget, SubmitAttachmentStateChangesRequest submitAttachmentStateChangesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SubmitAttachmentStateChangesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitAttachmentStateChangesValidateBeforeCall(xAmzTarget, submitAttachmentStateChangesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SubmitAttachmentStateChangesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitContainerStateChange
     * @param xAmzTarget  (required)
     * @param submitContainerStateChangeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitContainerStateChangeCall(String xAmzTarget, SubmitContainerStateChangeRequest submitContainerStateChangeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitContainerStateChangeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.SubmitContainerStateChange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitContainerStateChangeValidateBeforeCall(String xAmzTarget, SubmitContainerStateChangeRequest submitContainerStateChangeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling submitContainerStateChange(Async)");
        }

        // verify the required parameter 'submitContainerStateChangeRequest' is set
        if (submitContainerStateChangeRequest == null) {
            throw new ApiException("Missing the required parameter 'submitContainerStateChangeRequest' when calling submitContainerStateChange(Async)");
        }

        return submitContainerStateChangeCall(xAmzTarget, submitContainerStateChangeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Sent to acknowledge that a container changed states.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param submitContainerStateChangeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SubmitContainerStateChangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public SubmitContainerStateChangeResponse submitContainerStateChange(String xAmzTarget, SubmitContainerStateChangeRequest submitContainerStateChangeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SubmitContainerStateChangeResponse> localVarResp = submitContainerStateChangeWithHttpInfo(xAmzTarget, submitContainerStateChangeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Sent to acknowledge that a container changed states.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param submitContainerStateChangeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SubmitContainerStateChangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitContainerStateChangeResponse> submitContainerStateChangeWithHttpInfo(String xAmzTarget, SubmitContainerStateChangeRequest submitContainerStateChangeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = submitContainerStateChangeValidateBeforeCall(xAmzTarget, submitContainerStateChangeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SubmitContainerStateChangeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Sent to acknowledge that a container changed states.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param submitContainerStateChangeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitContainerStateChangeAsync(String xAmzTarget, SubmitContainerStateChangeRequest submitContainerStateChangeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SubmitContainerStateChangeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitContainerStateChangeValidateBeforeCall(xAmzTarget, submitContainerStateChangeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SubmitContainerStateChangeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitTaskStateChange
     * @param xAmzTarget  (required)
     * @param submitTaskStateChangeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitTaskStateChangeCall(String xAmzTarget, SubmitTaskStateChangeRequest submitTaskStateChangeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitTaskStateChangeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.SubmitTaskStateChange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitTaskStateChangeValidateBeforeCall(String xAmzTarget, SubmitTaskStateChangeRequest submitTaskStateChangeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling submitTaskStateChange(Async)");
        }

        // verify the required parameter 'submitTaskStateChangeRequest' is set
        if (submitTaskStateChangeRequest == null) {
            throw new ApiException("Missing the required parameter 'submitTaskStateChangeRequest' when calling submitTaskStateChange(Async)");
        }

        return submitTaskStateChangeCall(xAmzTarget, submitTaskStateChangeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Sent to acknowledge that a task changed states.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param submitTaskStateChangeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SubmitTaskStateChangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public SubmitTaskStateChangeResponse submitTaskStateChange(String xAmzTarget, SubmitTaskStateChangeRequest submitTaskStateChangeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SubmitTaskStateChangeResponse> localVarResp = submitTaskStateChangeWithHttpInfo(xAmzTarget, submitTaskStateChangeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Sent to acknowledge that a task changed states.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param submitTaskStateChangeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SubmitTaskStateChangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitTaskStateChangeResponse> submitTaskStateChangeWithHttpInfo(String xAmzTarget, SubmitTaskStateChangeRequest submitTaskStateChangeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = submitTaskStateChangeValidateBeforeCall(xAmzTarget, submitTaskStateChangeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SubmitTaskStateChangeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Sent to acknowledge that a task changed states.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param submitTaskStateChangeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitTaskStateChangeAsync(String xAmzTarget, SubmitTaskStateChangeRequest submitTaskStateChangeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SubmitTaskStateChangeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitTaskStateChangeValidateBeforeCall(xAmzTarget, submitTaskStateChangeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SubmitTaskStateChangeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceRequest' is set
        if (tagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagResourceRequest' when calling tagResource(Async)");
        }

        return tagResourceCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Associates the specified tags to a resource with the specified &lt;code&gt;resourceArn&lt;/code&gt;. If existing tags on a resource aren&#39;t specified in the request parameters, they aren&#39;t changed. When a resource is deleted, the tags that are associated with that resource are deleted as well.
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public Object tagResource(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = tagResourceWithHttpInfo(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Associates the specified tags to a resource with the specified &lt;code&gt;resourceArn&lt;/code&gt;. If existing tags on a resource aren&#39;t specified in the request parameters, they aren&#39;t changed. When a resource is deleted, the tags that are associated with that resource are deleted as well.
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tagResourceWithHttpInfo(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Associates the specified tags to a resource with the specified &lt;code&gt;resourceArn&lt;/code&gt;. If existing tags on a resource aren&#39;t specified in the request parameters, they aren&#39;t changed. When a resource is deleted, the tags that are associated with that resource are deleted as well.
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceRequest' is set
        if (untagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'untagResourceRequest' when calling untagResource(Async)");
        }

        return untagResourceCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes specified tags from a resource.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public Object untagResource(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = untagResourceWithHttpInfo(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes specified tags from a resource.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> untagResourceWithHttpInfo(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes specified tags from a resource.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCapacityProvider
     * @param xAmzTarget  (required)
     * @param updateCapacityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCapacityProviderCall(String xAmzTarget, UpdateCapacityProviderRequest updateCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCapacityProviderRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateCapacityProvider";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCapacityProviderValidateBeforeCall(String xAmzTarget, UpdateCapacityProviderRequest updateCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateCapacityProvider(Async)");
        }

        // verify the required parameter 'updateCapacityProviderRequest' is set
        if (updateCapacityProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCapacityProviderRequest' when calling updateCapacityProvider(Async)");
        }

        return updateCapacityProviderCall(xAmzTarget, updateCapacityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Modifies the parameters for a capacity provider.
     * @param xAmzTarget  (required)
     * @param updateCapacityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateCapacityProviderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCapacityProviderResponse updateCapacityProvider(String xAmzTarget, UpdateCapacityProviderRequest updateCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateCapacityProviderResponse> localVarResp = updateCapacityProviderWithHttpInfo(xAmzTarget, updateCapacityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the parameters for a capacity provider.
     * @param xAmzTarget  (required)
     * @param updateCapacityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateCapacityProviderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateCapacityProviderResponse> updateCapacityProviderWithHttpInfo(String xAmzTarget, UpdateCapacityProviderRequest updateCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateCapacityProviderValidateBeforeCall(xAmzTarget, updateCapacityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateCapacityProviderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the parameters for a capacity provider.
     * @param xAmzTarget  (required)
     * @param updateCapacityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCapacityProviderAsync(String xAmzTarget, UpdateCapacityProviderRequest updateCapacityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateCapacityProviderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCapacityProviderValidateBeforeCall(xAmzTarget, updateCapacityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateCapacityProviderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCluster
     * @param xAmzTarget  (required)
     * @param updateClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClusterCall(String xAmzTarget, UpdateClusterRequest updateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateClusterRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClusterValidateBeforeCall(String xAmzTarget, UpdateClusterRequest updateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateCluster(Async)");
        }

        // verify the required parameter 'updateClusterRequest' is set
        if (updateClusterRequest == null) {
            throw new ApiException("Missing the required parameter 'updateClusterRequest' when calling updateCluster(Async)");
        }

        return updateClusterCall(xAmzTarget, updateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the cluster.
     * @param xAmzTarget  (required)
     * @param updateClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateClusterResponse updateCluster(String xAmzTarget, UpdateClusterRequest updateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateClusterResponse> localVarResp = updateClusterWithHttpInfo(xAmzTarget, updateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the cluster.
     * @param xAmzTarget  (required)
     * @param updateClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateClusterResponse> updateClusterWithHttpInfo(String xAmzTarget, UpdateClusterRequest updateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateClusterValidateBeforeCall(xAmzTarget, updateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateClusterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the cluster.
     * @param xAmzTarget  (required)
     * @param updateClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClusterAsync(String xAmzTarget, UpdateClusterRequest updateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateClusterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClusterValidateBeforeCall(xAmzTarget, updateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateClusterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClusterSettings
     * @param xAmzTarget  (required)
     * @param updateClusterSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClusterSettingsCall(String xAmzTarget, UpdateClusterSettingsRequest updateClusterSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateClusterSettingsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateClusterSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClusterSettingsValidateBeforeCall(String xAmzTarget, UpdateClusterSettingsRequest updateClusterSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateClusterSettings(Async)");
        }

        // verify the required parameter 'updateClusterSettingsRequest' is set
        if (updateClusterSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateClusterSettingsRequest' when calling updateClusterSettings(Async)");
        }

        return updateClusterSettingsCall(xAmzTarget, updateClusterSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Modifies the settings to use for a cluster.
     * @param xAmzTarget  (required)
     * @param updateClusterSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateClusterSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateClusterSettingsResponse updateClusterSettings(String xAmzTarget, UpdateClusterSettingsRequest updateClusterSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateClusterSettingsResponse> localVarResp = updateClusterSettingsWithHttpInfo(xAmzTarget, updateClusterSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the settings to use for a cluster.
     * @param xAmzTarget  (required)
     * @param updateClusterSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateClusterSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateClusterSettingsResponse> updateClusterSettingsWithHttpInfo(String xAmzTarget, UpdateClusterSettingsRequest updateClusterSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateClusterSettingsValidateBeforeCall(xAmzTarget, updateClusterSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateClusterSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the settings to use for a cluster.
     * @param xAmzTarget  (required)
     * @param updateClusterSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClusterSettingsAsync(String xAmzTarget, UpdateClusterSettingsRequest updateClusterSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateClusterSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClusterSettingsValidateBeforeCall(xAmzTarget, updateClusterSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateClusterSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContainerAgent
     * @param xAmzTarget  (required)
     * @param updateContainerAgentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoUpdateAvailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContainerAgentCall(String xAmzTarget, UpdateContainerAgentRequest updateContainerAgentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateContainerAgentRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateContainerAgent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContainerAgentValidateBeforeCall(String xAmzTarget, UpdateContainerAgentRequest updateContainerAgentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateContainerAgent(Async)");
        }

        // verify the required parameter 'updateContainerAgentRequest' is set
        if (updateContainerAgentRequest == null) {
            throw new ApiException("Missing the required parameter 'updateContainerAgentRequest' when calling updateContainerAgent(Async)");
        }

        return updateContainerAgentCall(xAmzTarget, updateContainerAgentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the Amazon ECS container agent on a specified container instance. Updating the Amazon ECS container agent doesn&#39;t interrupt running tasks or services on the container instance. The process for updating the agent differs depending on whether your container instance was launched with the Amazon ECS-optimized AMI or another operating system.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;UpdateContainerAgent&lt;/code&gt; API isn&#39;t supported for container instances using the Amazon ECS-optimized Amazon Linux 2 (arm64) AMI. To update the container agent, you can update the &lt;code&gt;ecs-init&lt;/code&gt; package. This updates the agent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/agent-update-ecs-ami.html\&quot;&gt;Updating the Amazon ECS container agent&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Agent updates with the &lt;code&gt;UpdateContainerAgent&lt;/code&gt; API operation do not apply to Windows container instances. We recommend that you launch new container instances to update the agent version in your Windows clusters.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The &lt;code&gt;UpdateContainerAgent&lt;/code&gt; API requires an Amazon ECS-optimized AMI or Amazon Linux AMI with the &lt;code&gt;ecs-init&lt;/code&gt; service installed and running. For help updating the Amazon ECS container agent on other operating systems, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html#manually_update_agent\&quot;&gt;Manually updating the Amazon ECS container agent&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateContainerAgentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateContainerAgentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoUpdateAvailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingVersionException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContainerAgentResponse updateContainerAgent(String xAmzTarget, UpdateContainerAgentRequest updateContainerAgentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateContainerAgentResponse> localVarResp = updateContainerAgentWithHttpInfo(xAmzTarget, updateContainerAgentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the Amazon ECS container agent on a specified container instance. Updating the Amazon ECS container agent doesn&#39;t interrupt running tasks or services on the container instance. The process for updating the agent differs depending on whether your container instance was launched with the Amazon ECS-optimized AMI or another operating system.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;UpdateContainerAgent&lt;/code&gt; API isn&#39;t supported for container instances using the Amazon ECS-optimized Amazon Linux 2 (arm64) AMI. To update the container agent, you can update the &lt;code&gt;ecs-init&lt;/code&gt; package. This updates the agent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/agent-update-ecs-ami.html\&quot;&gt;Updating the Amazon ECS container agent&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Agent updates with the &lt;code&gt;UpdateContainerAgent&lt;/code&gt; API operation do not apply to Windows container instances. We recommend that you launch new container instances to update the agent version in your Windows clusters.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The &lt;code&gt;UpdateContainerAgent&lt;/code&gt; API requires an Amazon ECS-optimized AMI or Amazon Linux AMI with the &lt;code&gt;ecs-init&lt;/code&gt; service installed and running. For help updating the Amazon ECS container agent on other operating systems, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html#manually_update_agent\&quot;&gt;Manually updating the Amazon ECS container agent&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateContainerAgentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateContainerAgentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoUpdateAvailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingVersionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateContainerAgentResponse> updateContainerAgentWithHttpInfo(String xAmzTarget, UpdateContainerAgentRequest updateContainerAgentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateContainerAgentValidateBeforeCall(xAmzTarget, updateContainerAgentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateContainerAgentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the Amazon ECS container agent on a specified container instance. Updating the Amazon ECS container agent doesn&#39;t interrupt running tasks or services on the container instance. The process for updating the agent differs depending on whether your container instance was launched with the Amazon ECS-optimized AMI or another operating system.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;UpdateContainerAgent&lt;/code&gt; API isn&#39;t supported for container instances using the Amazon ECS-optimized Amazon Linux 2 (arm64) AMI. To update the container agent, you can update the &lt;code&gt;ecs-init&lt;/code&gt; package. This updates the agent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/agent-update-ecs-ami.html\&quot;&gt;Updating the Amazon ECS container agent&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Agent updates with the &lt;code&gt;UpdateContainerAgent&lt;/code&gt; API operation do not apply to Windows container instances. We recommend that you launch new container instances to update the agent version in your Windows clusters.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The &lt;code&gt;UpdateContainerAgent&lt;/code&gt; API requires an Amazon ECS-optimized AMI or Amazon Linux AMI with the &lt;code&gt;ecs-init&lt;/code&gt; service installed and running. For help updating the Amazon ECS container agent on other operating systems, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html#manually_update_agent\&quot;&gt;Manually updating the Amazon ECS container agent&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateContainerAgentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UpdateInProgressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoUpdateAvailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingVersionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContainerAgentAsync(String xAmzTarget, UpdateContainerAgentRequest updateContainerAgentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateContainerAgentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContainerAgentValidateBeforeCall(xAmzTarget, updateContainerAgentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateContainerAgentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContainerInstancesState
     * @param xAmzTarget  (required)
     * @param updateContainerInstancesStateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContainerInstancesStateCall(String xAmzTarget, UpdateContainerInstancesStateRequest updateContainerInstancesStateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateContainerInstancesStateRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateContainerInstancesState";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContainerInstancesStateValidateBeforeCall(String xAmzTarget, UpdateContainerInstancesStateRequest updateContainerInstancesStateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateContainerInstancesState(Async)");
        }

        // verify the required parameter 'updateContainerInstancesStateRequest' is set
        if (updateContainerInstancesStateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateContainerInstancesStateRequest' when calling updateContainerInstancesState(Async)");
        }

        return updateContainerInstancesStateCall(xAmzTarget, updateContainerInstancesStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the status of an Amazon ECS container instance.&lt;/p&gt; &lt;p&gt;Once a container instance has reached an &lt;code&gt;ACTIVE&lt;/code&gt; state, you can change the status of a container instance to &lt;code&gt;DRAINING&lt;/code&gt; to manually remove an instance from a cluster, for example to perform system updates, update the Docker daemon, or scale down the cluster size.&lt;/p&gt; &lt;important&gt; &lt;p&gt;A container instance can&#39;t be changed to &lt;code&gt;DRAINING&lt;/code&gt; until it has reached an &lt;code&gt;ACTIVE&lt;/code&gt; status. If the instance is in any other status, an error will be received.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;When you set a container instance to &lt;code&gt;DRAINING&lt;/code&gt;, Amazon ECS prevents new tasks from being scheduled for placement on the container instance and replacement service tasks are started on other container instances in the cluster if the resources are available. Service tasks on the container instance that are in the &lt;code&gt;PENDING&lt;/code&gt; state are stopped immediately.&lt;/p&gt; &lt;p&gt;Service tasks on the container instance that are in the &lt;code&gt;RUNNING&lt;/code&gt; state are stopped and replaced according to the service&#39;s deployment configuration parameters, &lt;code&gt;minimumHealthyPercent&lt;/code&gt; and &lt;code&gt;maximumPercent&lt;/code&gt;. You can change the deployment configuration of your service using &lt;a&gt;UpdateService&lt;/a&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;minimumHealthyPercent&lt;/code&gt; is below 100%, the scheduler can ignore &lt;code&gt;desiredCount&lt;/code&gt; temporarily during task replacement. For example, &lt;code&gt;desiredCount&lt;/code&gt; is four tasks, a minimum of 50% allows the scheduler to stop two existing tasks before starting two new tasks. If the minimum is 100%, the service scheduler can&#39;t remove existing tasks until the replacement tasks are considered healthy. Tasks for services that do not use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state. Tasks for services that use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state and are reported as healthy by the load balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;maximumPercent&lt;/code&gt; parameter represents an upper limit on the number of running tasks during task replacement. You can use this to define the replacement batch size. For example, if &lt;code&gt;desiredCount&lt;/code&gt; is four tasks, a maximum of 200% starts four new tasks before stopping the four tasks to be drained, provided that the cluster resources required to do this are available. If the maximum is 100%, then replacement tasks can&#39;t start until the draining tasks have stopped.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Any &lt;code&gt;PENDING&lt;/code&gt; or &lt;code&gt;RUNNING&lt;/code&gt; tasks that do not belong to a service aren&#39;t affected. You must wait for them to finish or stop them manually.&lt;/p&gt; &lt;p&gt;A container instance has completed draining when it has no more &lt;code&gt;RUNNING&lt;/code&gt; tasks. You can verify this using &lt;a&gt;ListTasks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When a container instance has been drained, you can set a container instance to &lt;code&gt;ACTIVE&lt;/code&gt; status and once it has reached that status the Amazon ECS scheduler can begin scheduling tasks on the instance again.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateContainerInstancesStateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateContainerInstancesStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContainerInstancesStateResponse updateContainerInstancesState(String xAmzTarget, UpdateContainerInstancesStateRequest updateContainerInstancesStateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateContainerInstancesStateResponse> localVarResp = updateContainerInstancesStateWithHttpInfo(xAmzTarget, updateContainerInstancesStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the status of an Amazon ECS container instance.&lt;/p&gt; &lt;p&gt;Once a container instance has reached an &lt;code&gt;ACTIVE&lt;/code&gt; state, you can change the status of a container instance to &lt;code&gt;DRAINING&lt;/code&gt; to manually remove an instance from a cluster, for example to perform system updates, update the Docker daemon, or scale down the cluster size.&lt;/p&gt; &lt;important&gt; &lt;p&gt;A container instance can&#39;t be changed to &lt;code&gt;DRAINING&lt;/code&gt; until it has reached an &lt;code&gt;ACTIVE&lt;/code&gt; status. If the instance is in any other status, an error will be received.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;When you set a container instance to &lt;code&gt;DRAINING&lt;/code&gt;, Amazon ECS prevents new tasks from being scheduled for placement on the container instance and replacement service tasks are started on other container instances in the cluster if the resources are available. Service tasks on the container instance that are in the &lt;code&gt;PENDING&lt;/code&gt; state are stopped immediately.&lt;/p&gt; &lt;p&gt;Service tasks on the container instance that are in the &lt;code&gt;RUNNING&lt;/code&gt; state are stopped and replaced according to the service&#39;s deployment configuration parameters, &lt;code&gt;minimumHealthyPercent&lt;/code&gt; and &lt;code&gt;maximumPercent&lt;/code&gt;. You can change the deployment configuration of your service using &lt;a&gt;UpdateService&lt;/a&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;minimumHealthyPercent&lt;/code&gt; is below 100%, the scheduler can ignore &lt;code&gt;desiredCount&lt;/code&gt; temporarily during task replacement. For example, &lt;code&gt;desiredCount&lt;/code&gt; is four tasks, a minimum of 50% allows the scheduler to stop two existing tasks before starting two new tasks. If the minimum is 100%, the service scheduler can&#39;t remove existing tasks until the replacement tasks are considered healthy. Tasks for services that do not use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state. Tasks for services that use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state and are reported as healthy by the load balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;maximumPercent&lt;/code&gt; parameter represents an upper limit on the number of running tasks during task replacement. You can use this to define the replacement batch size. For example, if &lt;code&gt;desiredCount&lt;/code&gt; is four tasks, a maximum of 200% starts four new tasks before stopping the four tasks to be drained, provided that the cluster resources required to do this are available. If the maximum is 100%, then replacement tasks can&#39;t start until the draining tasks have stopped.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Any &lt;code&gt;PENDING&lt;/code&gt; or &lt;code&gt;RUNNING&lt;/code&gt; tasks that do not belong to a service aren&#39;t affected. You must wait for them to finish or stop them manually.&lt;/p&gt; &lt;p&gt;A container instance has completed draining when it has no more &lt;code&gt;RUNNING&lt;/code&gt; tasks. You can verify this using &lt;a&gt;ListTasks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When a container instance has been drained, you can set a container instance to &lt;code&gt;ACTIVE&lt;/code&gt; status and once it has reached that status the Amazon ECS scheduler can begin scheduling tasks on the instance again.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateContainerInstancesStateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateContainerInstancesStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateContainerInstancesStateResponse> updateContainerInstancesStateWithHttpInfo(String xAmzTarget, UpdateContainerInstancesStateRequest updateContainerInstancesStateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateContainerInstancesStateValidateBeforeCall(xAmzTarget, updateContainerInstancesStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateContainerInstancesStateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the status of an Amazon ECS container instance.&lt;/p&gt; &lt;p&gt;Once a container instance has reached an &lt;code&gt;ACTIVE&lt;/code&gt; state, you can change the status of a container instance to &lt;code&gt;DRAINING&lt;/code&gt; to manually remove an instance from a cluster, for example to perform system updates, update the Docker daemon, or scale down the cluster size.&lt;/p&gt; &lt;important&gt; &lt;p&gt;A container instance can&#39;t be changed to &lt;code&gt;DRAINING&lt;/code&gt; until it has reached an &lt;code&gt;ACTIVE&lt;/code&gt; status. If the instance is in any other status, an error will be received.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;When you set a container instance to &lt;code&gt;DRAINING&lt;/code&gt;, Amazon ECS prevents new tasks from being scheduled for placement on the container instance and replacement service tasks are started on other container instances in the cluster if the resources are available. Service tasks on the container instance that are in the &lt;code&gt;PENDING&lt;/code&gt; state are stopped immediately.&lt;/p&gt; &lt;p&gt;Service tasks on the container instance that are in the &lt;code&gt;RUNNING&lt;/code&gt; state are stopped and replaced according to the service&#39;s deployment configuration parameters, &lt;code&gt;minimumHealthyPercent&lt;/code&gt; and &lt;code&gt;maximumPercent&lt;/code&gt;. You can change the deployment configuration of your service using &lt;a&gt;UpdateService&lt;/a&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;minimumHealthyPercent&lt;/code&gt; is below 100%, the scheduler can ignore &lt;code&gt;desiredCount&lt;/code&gt; temporarily during task replacement. For example, &lt;code&gt;desiredCount&lt;/code&gt; is four tasks, a minimum of 50% allows the scheduler to stop two existing tasks before starting two new tasks. If the minimum is 100%, the service scheduler can&#39;t remove existing tasks until the replacement tasks are considered healthy. Tasks for services that do not use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state. Tasks for services that use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state and are reported as healthy by the load balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;maximumPercent&lt;/code&gt; parameter represents an upper limit on the number of running tasks during task replacement. You can use this to define the replacement batch size. For example, if &lt;code&gt;desiredCount&lt;/code&gt; is four tasks, a maximum of 200% starts four new tasks before stopping the four tasks to be drained, provided that the cluster resources required to do this are available. If the maximum is 100%, then replacement tasks can&#39;t start until the draining tasks have stopped.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Any &lt;code&gt;PENDING&lt;/code&gt; or &lt;code&gt;RUNNING&lt;/code&gt; tasks that do not belong to a service aren&#39;t affected. You must wait for them to finish or stop them manually.&lt;/p&gt; &lt;p&gt;A container instance has completed draining when it has no more &lt;code&gt;RUNNING&lt;/code&gt; tasks. You can verify this using &lt;a&gt;ListTasks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When a container instance has been drained, you can set a container instance to &lt;code&gt;ACTIVE&lt;/code&gt; status and once it has reached that status the Amazon ECS scheduler can begin scheduling tasks on the instance again.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateContainerInstancesStateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContainerInstancesStateAsync(String xAmzTarget, UpdateContainerInstancesStateRequest updateContainerInstancesStateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateContainerInstancesStateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContainerInstancesStateValidateBeforeCall(xAmzTarget, updateContainerInstancesStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateContainerInstancesStateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateService
     * @param xAmzTarget  (required)
     * @param updateServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceCall(String xAmzTarget, UpdateServiceRequest updateServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateServiceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateService";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceValidateBeforeCall(String xAmzTarget, UpdateServiceRequest updateServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateService(Async)");
        }

        // verify the required parameter 'updateServiceRequest' is set
        if (updateServiceRequest == null) {
            throw new ApiException("Missing the required parameter 'updateServiceRequest' when calling updateService(Async)");
        }

        return updateServiceCall(xAmzTarget, updateServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the parameters of a service.&lt;/p&gt; &lt;p&gt;For services using the rolling update (&lt;code&gt;ECS&lt;/code&gt;) you can update the desired count, deployment configuration, network configuration, load balancers, service registries, enable ECS managed tags option, propagate tags option, task placement constraints and strategies, and task definition. When you update any of these parameters, Amazon ECS starts new tasks with the new configuration. &lt;/p&gt; &lt;p&gt;For services using the blue/green (&lt;code&gt;CODE_DEPLOY&lt;/code&gt;) deployment controller, only the desired count, deployment configuration, health check grace period, task placement constraints and strategies, enable ECS managed tags option, and propagate tags can be updated using this API. If the network configuration, platform version, task definition, or load balancer need to be updated, create a new CodeDeploy deployment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_CreateDeployment.html\&quot;&gt;CreateDeployment&lt;/a&gt; in the &lt;i&gt;CodeDeploy API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For services using an external deployment controller, you can update only the desired count, task placement constraints and strategies, health check grace period, enable ECS managed tags option, and propagate tags option, using this API. If the launch type, load balancer, network configuration, platform version, or task definition need to be updated, create a new task set For more information, see &lt;a&gt;CreateTaskSet&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can add to or subtract from the number of instantiations of a task definition in a service by specifying the cluster that the service is running in and a new &lt;code&gt;desiredCount&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have updated the Docker image of your application, you can create a new task definition with that image and deploy it to your service. The service scheduler uses the minimum healthy percent and maximum percent parameters (in the service&#39;s deployment configuration) to determine the deployment strategy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If your updated Docker image uses the same tag as what is in the existing task definition for your service (for example, &lt;code&gt;my_image:latest&lt;/code&gt;), you don&#39;t need to create a new revision of your task definition. You can update the service using the &lt;code&gt;forceNewDeployment&lt;/code&gt; option. The new tasks launched by the deployment pull the current image/tag combination from your repository when they start.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can also update the deployment configuration of a service. When a deployment is triggered by updating the task definition of a service, the service scheduler uses the deployment configuration parameters, &lt;code&gt;minimumHealthyPercent&lt;/code&gt; and &lt;code&gt;maximumPercent&lt;/code&gt;, to determine the deployment strategy.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;minimumHealthyPercent&lt;/code&gt; is below 100%, the scheduler can ignore &lt;code&gt;desiredCount&lt;/code&gt; temporarily during a deployment. For example, if &lt;code&gt;desiredCount&lt;/code&gt; is four tasks, a minimum of 50% allows the scheduler to stop two existing tasks before starting two new tasks. Tasks for services that don&#39;t use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state. Tasks for services that use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state and are reported as healthy by the load balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;maximumPercent&lt;/code&gt; parameter represents an upper limit on the number of running tasks during a deployment. You can use it to define the deployment batch size. For example, if &lt;code&gt;desiredCount&lt;/code&gt; is four tasks, a maximum of 200% starts four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When &lt;a&gt;UpdateService&lt;/a&gt; stops a task during a deployment, the equivalent of &lt;code&gt;docker stop&lt;/code&gt; is issued to the containers running in the task. This results in a &lt;code&gt;SIGTERM&lt;/code&gt; and a 30-second timeout. After this, &lt;code&gt;SIGKILL&lt;/code&gt; is sent and the containers are forcibly stopped. If the container handles the &lt;code&gt;SIGTERM&lt;/code&gt; gracefully and exits within 30 seconds from receiving it, no &lt;code&gt;SIGKILL&lt;/code&gt; is sent.&lt;/p&gt; &lt;p&gt;When the service scheduler launches new tasks, it determines task placement in your cluster with the following logic.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Determine which of the container instances in your cluster can support your service&#39;s task definition. For example, they have the required CPU, memory, ports, and container instance attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;By default, the service scheduler attempts to balance tasks across Availability Zones in this manner even though you can choose a different placement strategy.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Sort the valid container instances by the fewest number of running tasks for this service in the same Availability Zone as the instance. For example, if zone A has one running service task and zones B and C each have zero, valid container instances in either zone B or C are considered optimal for placement.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Place the new service task on a valid container instance in an optimal Availability Zone (based on the previous steps), favoring container instances with the fewest number of running tasks for this service.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When the service scheduler stops running tasks, it attempts to maintain balance across the Availability Zones in your cluster using the following logic: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Sort the container instances by the largest number of running tasks for this service in the same Availability Zone as the instance. For example, if zone A has one running service task and zones B and C each have two, container instances in either zone B or C are considered optimal for termination.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stop the task on a container instance in an optimal Availability Zone (based on the previous steps), favoring container instances with the largest number of running tasks for this service.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;You must have a service-linked role when you update any of the following service properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;loadBalancers&lt;/code&gt;,&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;serviceRegistries&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about the role see the &lt;code&gt;CreateService&lt;/code&gt; request parameter &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html#ECS-CreateService-request-role\&quot;&gt; &lt;code&gt;role&lt;/code&gt; &lt;/a&gt;. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateServiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateServiceResponse updateService(String xAmzTarget, UpdateServiceRequest updateServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateServiceResponse> localVarResp = updateServiceWithHttpInfo(xAmzTarget, updateServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the parameters of a service.&lt;/p&gt; &lt;p&gt;For services using the rolling update (&lt;code&gt;ECS&lt;/code&gt;) you can update the desired count, deployment configuration, network configuration, load balancers, service registries, enable ECS managed tags option, propagate tags option, task placement constraints and strategies, and task definition. When you update any of these parameters, Amazon ECS starts new tasks with the new configuration. &lt;/p&gt; &lt;p&gt;For services using the blue/green (&lt;code&gt;CODE_DEPLOY&lt;/code&gt;) deployment controller, only the desired count, deployment configuration, health check grace period, task placement constraints and strategies, enable ECS managed tags option, and propagate tags can be updated using this API. If the network configuration, platform version, task definition, or load balancer need to be updated, create a new CodeDeploy deployment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_CreateDeployment.html\&quot;&gt;CreateDeployment&lt;/a&gt; in the &lt;i&gt;CodeDeploy API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For services using an external deployment controller, you can update only the desired count, task placement constraints and strategies, health check grace period, enable ECS managed tags option, and propagate tags option, using this API. If the launch type, load balancer, network configuration, platform version, or task definition need to be updated, create a new task set For more information, see &lt;a&gt;CreateTaskSet&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can add to or subtract from the number of instantiations of a task definition in a service by specifying the cluster that the service is running in and a new &lt;code&gt;desiredCount&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have updated the Docker image of your application, you can create a new task definition with that image and deploy it to your service. The service scheduler uses the minimum healthy percent and maximum percent parameters (in the service&#39;s deployment configuration) to determine the deployment strategy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If your updated Docker image uses the same tag as what is in the existing task definition for your service (for example, &lt;code&gt;my_image:latest&lt;/code&gt;), you don&#39;t need to create a new revision of your task definition. You can update the service using the &lt;code&gt;forceNewDeployment&lt;/code&gt; option. The new tasks launched by the deployment pull the current image/tag combination from your repository when they start.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can also update the deployment configuration of a service. When a deployment is triggered by updating the task definition of a service, the service scheduler uses the deployment configuration parameters, &lt;code&gt;minimumHealthyPercent&lt;/code&gt; and &lt;code&gt;maximumPercent&lt;/code&gt;, to determine the deployment strategy.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;minimumHealthyPercent&lt;/code&gt; is below 100%, the scheduler can ignore &lt;code&gt;desiredCount&lt;/code&gt; temporarily during a deployment. For example, if &lt;code&gt;desiredCount&lt;/code&gt; is four tasks, a minimum of 50% allows the scheduler to stop two existing tasks before starting two new tasks. Tasks for services that don&#39;t use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state. Tasks for services that use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state and are reported as healthy by the load balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;maximumPercent&lt;/code&gt; parameter represents an upper limit on the number of running tasks during a deployment. You can use it to define the deployment batch size. For example, if &lt;code&gt;desiredCount&lt;/code&gt; is four tasks, a maximum of 200% starts four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When &lt;a&gt;UpdateService&lt;/a&gt; stops a task during a deployment, the equivalent of &lt;code&gt;docker stop&lt;/code&gt; is issued to the containers running in the task. This results in a &lt;code&gt;SIGTERM&lt;/code&gt; and a 30-second timeout. After this, &lt;code&gt;SIGKILL&lt;/code&gt; is sent and the containers are forcibly stopped. If the container handles the &lt;code&gt;SIGTERM&lt;/code&gt; gracefully and exits within 30 seconds from receiving it, no &lt;code&gt;SIGKILL&lt;/code&gt; is sent.&lt;/p&gt; &lt;p&gt;When the service scheduler launches new tasks, it determines task placement in your cluster with the following logic.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Determine which of the container instances in your cluster can support your service&#39;s task definition. For example, they have the required CPU, memory, ports, and container instance attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;By default, the service scheduler attempts to balance tasks across Availability Zones in this manner even though you can choose a different placement strategy.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Sort the valid container instances by the fewest number of running tasks for this service in the same Availability Zone as the instance. For example, if zone A has one running service task and zones B and C each have zero, valid container instances in either zone B or C are considered optimal for placement.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Place the new service task on a valid container instance in an optimal Availability Zone (based on the previous steps), favoring container instances with the fewest number of running tasks for this service.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When the service scheduler stops running tasks, it attempts to maintain balance across the Availability Zones in your cluster using the following logic: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Sort the container instances by the largest number of running tasks for this service in the same Availability Zone as the instance. For example, if zone A has one running service task and zones B and C each have two, container instances in either zone B or C are considered optimal for termination.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stop the task on a container instance in an optimal Availability Zone (based on the previous steps), favoring container instances with the largest number of running tasks for this service.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;You must have a service-linked role when you update any of the following service properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;loadBalancers&lt;/code&gt;,&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;serviceRegistries&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about the role see the &lt;code&gt;CreateService&lt;/code&gt; request parameter &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html#ECS-CreateService-request-role\&quot;&gt; &lt;code&gt;role&lt;/code&gt; &lt;/a&gt;. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateServiceResponse> updateServiceWithHttpInfo(String xAmzTarget, UpdateServiceRequest updateServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateServiceValidateBeforeCall(xAmzTarget, updateServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateServiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the parameters of a service.&lt;/p&gt; &lt;p&gt;For services using the rolling update (&lt;code&gt;ECS&lt;/code&gt;) you can update the desired count, deployment configuration, network configuration, load balancers, service registries, enable ECS managed tags option, propagate tags option, task placement constraints and strategies, and task definition. When you update any of these parameters, Amazon ECS starts new tasks with the new configuration. &lt;/p&gt; &lt;p&gt;For services using the blue/green (&lt;code&gt;CODE_DEPLOY&lt;/code&gt;) deployment controller, only the desired count, deployment configuration, health check grace period, task placement constraints and strategies, enable ECS managed tags option, and propagate tags can be updated using this API. If the network configuration, platform version, task definition, or load balancer need to be updated, create a new CodeDeploy deployment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_CreateDeployment.html\&quot;&gt;CreateDeployment&lt;/a&gt; in the &lt;i&gt;CodeDeploy API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For services using an external deployment controller, you can update only the desired count, task placement constraints and strategies, health check grace period, enable ECS managed tags option, and propagate tags option, using this API. If the launch type, load balancer, network configuration, platform version, or task definition need to be updated, create a new task set For more information, see &lt;a&gt;CreateTaskSet&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can add to or subtract from the number of instantiations of a task definition in a service by specifying the cluster that the service is running in and a new &lt;code&gt;desiredCount&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you have updated the Docker image of your application, you can create a new task definition with that image and deploy it to your service. The service scheduler uses the minimum healthy percent and maximum percent parameters (in the service&#39;s deployment configuration) to determine the deployment strategy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If your updated Docker image uses the same tag as what is in the existing task definition for your service (for example, &lt;code&gt;my_image:latest&lt;/code&gt;), you don&#39;t need to create a new revision of your task definition. You can update the service using the &lt;code&gt;forceNewDeployment&lt;/code&gt; option. The new tasks launched by the deployment pull the current image/tag combination from your repository when they start.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can also update the deployment configuration of a service. When a deployment is triggered by updating the task definition of a service, the service scheduler uses the deployment configuration parameters, &lt;code&gt;minimumHealthyPercent&lt;/code&gt; and &lt;code&gt;maximumPercent&lt;/code&gt;, to determine the deployment strategy.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;minimumHealthyPercent&lt;/code&gt; is below 100%, the scheduler can ignore &lt;code&gt;desiredCount&lt;/code&gt; temporarily during a deployment. For example, if &lt;code&gt;desiredCount&lt;/code&gt; is four tasks, a minimum of 50% allows the scheduler to stop two existing tasks before starting two new tasks. Tasks for services that don&#39;t use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state. Tasks for services that use a load balancer are considered healthy if they&#39;re in the &lt;code&gt;RUNNING&lt;/code&gt; state and are reported as healthy by the load balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;maximumPercent&lt;/code&gt; parameter represents an upper limit on the number of running tasks during a deployment. You can use it to define the deployment batch size. For example, if &lt;code&gt;desiredCount&lt;/code&gt; is four tasks, a maximum of 200% starts four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When &lt;a&gt;UpdateService&lt;/a&gt; stops a task during a deployment, the equivalent of &lt;code&gt;docker stop&lt;/code&gt; is issued to the containers running in the task. This results in a &lt;code&gt;SIGTERM&lt;/code&gt; and a 30-second timeout. After this, &lt;code&gt;SIGKILL&lt;/code&gt; is sent and the containers are forcibly stopped. If the container handles the &lt;code&gt;SIGTERM&lt;/code&gt; gracefully and exits within 30 seconds from receiving it, no &lt;code&gt;SIGKILL&lt;/code&gt; is sent.&lt;/p&gt; &lt;p&gt;When the service scheduler launches new tasks, it determines task placement in your cluster with the following logic.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Determine which of the container instances in your cluster can support your service&#39;s task definition. For example, they have the required CPU, memory, ports, and container instance attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;By default, the service scheduler attempts to balance tasks across Availability Zones in this manner even though you can choose a different placement strategy.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Sort the valid container instances by the fewest number of running tasks for this service in the same Availability Zone as the instance. For example, if zone A has one running service task and zones B and C each have zero, valid container instances in either zone B or C are considered optimal for placement.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Place the new service task on a valid container instance in an optimal Availability Zone (based on the previous steps), favoring container instances with the fewest number of running tasks for this service.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When the service scheduler stops running tasks, it attempts to maintain balance across the Availability Zones in your cluster using the following logic: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Sort the container instances by the largest number of running tasks for this service in the same Availability Zone as the instance. For example, if zone A has one running service task and zones B and C each have two, container instances in either zone B or C are considered optimal for termination.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stop the task on a container instance in an optimal Availability Zone (based on the previous steps), favoring container instances with the largest number of running tasks for this service.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;You must have a service-linked role when you update any of the following service properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;loadBalancers&lt;/code&gt;,&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;serviceRegistries&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about the role see the &lt;code&gt;CreateService&lt;/code&gt; request parameter &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html#ECS-CreateService-request-role\&quot;&gt; &lt;code&gt;role&lt;/code&gt; &lt;/a&gt;. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PlatformUnknownException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PlatformTaskDefinitionIncompatibilityException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NamespaceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceAsync(String xAmzTarget, UpdateServiceRequest updateServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateServiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceValidateBeforeCall(xAmzTarget, updateServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateServiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateServicePrimaryTaskSet
     * @param xAmzTarget  (required)
     * @param updateServicePrimaryTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TaskSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServicePrimaryTaskSetCall(String xAmzTarget, UpdateServicePrimaryTaskSetRequest updateServicePrimaryTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateServicePrimaryTaskSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateServicePrimaryTaskSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServicePrimaryTaskSetValidateBeforeCall(String xAmzTarget, UpdateServicePrimaryTaskSetRequest updateServicePrimaryTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateServicePrimaryTaskSet(Async)");
        }

        // verify the required parameter 'updateServicePrimaryTaskSetRequest' is set
        if (updateServicePrimaryTaskSetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateServicePrimaryTaskSetRequest' when calling updateServicePrimaryTaskSet(Async)");
        }

        return updateServicePrimaryTaskSetCall(xAmzTarget, updateServicePrimaryTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Modifies which task set in a service is the primary task set. Any parameters that are updated on the primary task set in a service will transition to the service. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS Deployment Types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param updateServicePrimaryTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateServicePrimaryTaskSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TaskSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateServicePrimaryTaskSetResponse updateServicePrimaryTaskSet(String xAmzTarget, UpdateServicePrimaryTaskSetRequest updateServicePrimaryTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateServicePrimaryTaskSetResponse> localVarResp = updateServicePrimaryTaskSetWithHttpInfo(xAmzTarget, updateServicePrimaryTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies which task set in a service is the primary task set. Any parameters that are updated on the primary task set in a service will transition to the service. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS Deployment Types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param updateServicePrimaryTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateServicePrimaryTaskSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TaskSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateServicePrimaryTaskSetResponse> updateServicePrimaryTaskSetWithHttpInfo(String xAmzTarget, UpdateServicePrimaryTaskSetRequest updateServicePrimaryTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateServicePrimaryTaskSetValidateBeforeCall(xAmzTarget, updateServicePrimaryTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateServicePrimaryTaskSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies which task set in a service is the primary task set. Any parameters that are updated on the primary task set in a service will transition to the service. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS Deployment Types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param updateServicePrimaryTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TaskSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServicePrimaryTaskSetAsync(String xAmzTarget, UpdateServicePrimaryTaskSetRequest updateServicePrimaryTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateServicePrimaryTaskSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServicePrimaryTaskSetValidateBeforeCall(xAmzTarget, updateServicePrimaryTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateServicePrimaryTaskSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTaskProtection
     * @param xAmzTarget  (required)
     * @param updateTaskProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskProtectionCall(String xAmzTarget, UpdateTaskProtectionRequest updateTaskProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTaskProtectionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateTaskProtection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskProtectionValidateBeforeCall(String xAmzTarget, UpdateTaskProtectionRequest updateTaskProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateTaskProtection(Async)");
        }

        // verify the required parameter 'updateTaskProtectionRequest' is set
        if (updateTaskProtectionRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTaskProtectionRequest' when calling updateTaskProtection(Async)");
        }

        return updateTaskProtectionCall(xAmzTarget, updateTaskProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the protection status of a task. You can set &lt;code&gt;protectionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to protect your task from termination during scale-in events from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-auto-scaling.html\&quot;&gt;Service Autoscaling&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;deployments&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Task-protection, by default, expires after 2 hours at which point Amazon ECS clears the &lt;code&gt;protectionEnabled&lt;/code&gt; property making the task eligible for termination by a subsequent scale-in event.&lt;/p&gt; &lt;p&gt;You can specify a custom expiration period for task protection from 1 minute to up to 2,880 minutes (48 hours). To specify the custom expiration period, set the &lt;code&gt;expiresInMinutes&lt;/code&gt; property. The &lt;code&gt;expiresInMinutes&lt;/code&gt; property is always reset when you invoke this operation for a task that already has &lt;code&gt;protectionEnabled&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. You can keep extending the protection expiration period of a task by invoking this operation repeatedly.&lt;/p&gt; &lt;p&gt;To learn more about Amazon ECS task protection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-scale-in-protection.html\&quot;&gt;Task scale-in protection&lt;/a&gt; in the &lt;i&gt; &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt; &lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is only supported for tasks belonging to an Amazon ECS service. Invoking this operation for a standalone task will result in an &lt;code&gt;TASK_NOT_VALID&lt;/code&gt; failure. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html\&quot;&gt;API failure reasons&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;If you prefer to set task protection from within the container, we recommend using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-scale-in-protection-endpoint.html\&quot;&gt;Task scale-in protection endpoint&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param updateTaskProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateTaskProtectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTaskProtectionResponse updateTaskProtection(String xAmzTarget, UpdateTaskProtectionRequest updateTaskProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateTaskProtectionResponse> localVarResp = updateTaskProtectionWithHttpInfo(xAmzTarget, updateTaskProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the protection status of a task. You can set &lt;code&gt;protectionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to protect your task from termination during scale-in events from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-auto-scaling.html\&quot;&gt;Service Autoscaling&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;deployments&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Task-protection, by default, expires after 2 hours at which point Amazon ECS clears the &lt;code&gt;protectionEnabled&lt;/code&gt; property making the task eligible for termination by a subsequent scale-in event.&lt;/p&gt; &lt;p&gt;You can specify a custom expiration period for task protection from 1 minute to up to 2,880 minutes (48 hours). To specify the custom expiration period, set the &lt;code&gt;expiresInMinutes&lt;/code&gt; property. The &lt;code&gt;expiresInMinutes&lt;/code&gt; property is always reset when you invoke this operation for a task that already has &lt;code&gt;protectionEnabled&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. You can keep extending the protection expiration period of a task by invoking this operation repeatedly.&lt;/p&gt; &lt;p&gt;To learn more about Amazon ECS task protection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-scale-in-protection.html\&quot;&gt;Task scale-in protection&lt;/a&gt; in the &lt;i&gt; &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt; &lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is only supported for tasks belonging to an Amazon ECS service. Invoking this operation for a standalone task will result in an &lt;code&gt;TASK_NOT_VALID&lt;/code&gt; failure. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html\&quot;&gt;API failure reasons&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;If you prefer to set task protection from within the container, we recommend using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-scale-in-protection-endpoint.html\&quot;&gt;Task scale-in protection endpoint&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param updateTaskProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateTaskProtectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTaskProtectionResponse> updateTaskProtectionWithHttpInfo(String xAmzTarget, UpdateTaskProtectionRequest updateTaskProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateTaskProtectionValidateBeforeCall(xAmzTarget, updateTaskProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateTaskProtectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the protection status of a task. You can set &lt;code&gt;protectionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to protect your task from termination during scale-in events from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-auto-scaling.html\&quot;&gt;Service Autoscaling&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;deployments&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Task-protection, by default, expires after 2 hours at which point Amazon ECS clears the &lt;code&gt;protectionEnabled&lt;/code&gt; property making the task eligible for termination by a subsequent scale-in event.&lt;/p&gt; &lt;p&gt;You can specify a custom expiration period for task protection from 1 minute to up to 2,880 minutes (48 hours). To specify the custom expiration period, set the &lt;code&gt;expiresInMinutes&lt;/code&gt; property. The &lt;code&gt;expiresInMinutes&lt;/code&gt; property is always reset when you invoke this operation for a task that already has &lt;code&gt;protectionEnabled&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. You can keep extending the protection expiration period of a task by invoking this operation repeatedly.&lt;/p&gt; &lt;p&gt;To learn more about Amazon ECS task protection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-scale-in-protection.html\&quot;&gt;Task scale-in protection&lt;/a&gt; in the &lt;i&gt; &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt; &lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is only supported for tasks belonging to an Amazon ECS service. Invoking this operation for a standalone task will result in an &lt;code&gt;TASK_NOT_VALID&lt;/code&gt; failure. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html\&quot;&gt;API failure reasons&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;If you prefer to set task protection from within the container, we recommend using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-scale-in-protection-endpoint.html\&quot;&gt;Task scale-in protection endpoint&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param updateTaskProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskProtectionAsync(String xAmzTarget, UpdateTaskProtectionRequest updateTaskProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateTaskProtectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskProtectionValidateBeforeCall(xAmzTarget, updateTaskProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateTaskProtectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTaskSet
     * @param xAmzTarget  (required)
     * @param updateTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TaskSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskSetCall(String xAmzTarget, UpdateTaskSetRequest updateTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTaskSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateTaskSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskSetValidateBeforeCall(String xAmzTarget, UpdateTaskSetRequest updateTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateTaskSet(Async)");
        }

        // verify the required parameter 'updateTaskSetRequest' is set
        if (updateTaskSetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTaskSetRequest' when calling updateTaskSet(Async)");
        }

        return updateTaskSetCall(xAmzTarget, updateTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Modifies a task set. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS Deployment Types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param updateTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateTaskSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TaskSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTaskSetResponse updateTaskSet(String xAmzTarget, UpdateTaskSetRequest updateTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateTaskSetResponse> localVarResp = updateTaskSetWithHttpInfo(xAmzTarget, updateTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies a task set. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS Deployment Types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param updateTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateTaskSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TaskSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTaskSetResponse> updateTaskSetWithHttpInfo(String xAmzTarget, UpdateTaskSetRequest updateTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateTaskSetValidateBeforeCall(xAmzTarget, updateTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateTaskSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies a task set. This is used when a service uses the &lt;code&gt;EXTERNAL&lt;/code&gt; deployment controller type. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\&quot;&gt;Amazon ECS Deployment Types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param updateTaskSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedFeatureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceNotActiveException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TaskSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskSetAsync(String xAmzTarget, UpdateTaskSetRequest updateTaskSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateTaskSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskSetValidateBeforeCall(xAmzTarget, updateTaskSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateTaskSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
