/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationProtocol;
import org.openapitools.client.model.TransportProtocol;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.&lt;/p&gt; &lt;p&gt;If you use containers in a task with the &lt;code&gt;awsvpc&lt;/code&gt; or &lt;code&gt;host&lt;/code&gt; network mode, specify the exposed ports using &lt;code&gt;containerPort&lt;/code&gt;. The &lt;code&gt;hostPort&lt;/code&gt; can be left blank or it must be the same value as the &lt;code&gt;containerPort&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Most fields of this parameter (&lt;code&gt;containerPort&lt;/code&gt;, &lt;code&gt;hostPort&lt;/code&gt;, &lt;code&gt;protocol&lt;/code&gt;) maps to &lt;code&gt;PortBindings&lt;/code&gt; in the &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate\&quot;&gt;Create a container&lt;/a&gt; section of the &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/api/v1.35/\&quot;&gt;Docker Remote API&lt;/a&gt; and the &lt;code&gt;--publish&lt;/code&gt; option to &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/reference/commandline/run/\&quot;&gt; &lt;code&gt;docker run&lt;/code&gt; &lt;/a&gt;. If the network mode of a task definition is set to &lt;code&gt;host&lt;/code&gt;, host ports must either be undefined or match the container port in the port mapping.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t expose the same container port for multiple protocols. If you attempt this, an error is returned.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;After a task reaches the &lt;code&gt;RUNNING&lt;/code&gt; status, manual and automatic host and container port assignments are visible in the &lt;code&gt;networkBindings&lt;/code&gt; section of &lt;a&gt;DescribeTasks&lt;/a&gt; API responses.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PortMapping {
  public static final String SERIALIZED_NAME_CONTAINER_PORT = "containerPort";
  @SerializedName(SERIALIZED_NAME_CONTAINER_PORT)
  private Integer containerPort;

  public static final String SERIALIZED_NAME_HOST_PORT = "hostPort";
  @SerializedName(SERIALIZED_NAME_HOST_PORT)
  private Integer hostPort;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private TransportProtocol protocol;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_APP_PROTOCOL = "appProtocol";
  @SerializedName(SERIALIZED_NAME_APP_PROTOCOL)
  private ApplicationProtocol appProtocol;

  public static final String SERIALIZED_NAME_CONTAINER_PORT_RANGE = "containerPortRange";
  @SerializedName(SERIALIZED_NAME_CONTAINER_PORT_RANGE)
  private String containerPortRange;

  public PortMapping() {
  }

  public PortMapping containerPort(Integer containerPort) {
    this.containerPort = containerPort;
    return this;
  }

  /**
   * Get containerPort
   * @return containerPort
   */
  @javax.annotation.Nullable
  public Integer getContainerPort() {
    return containerPort;
  }

  public void setContainerPort(Integer containerPort) {
    this.containerPort = containerPort;
  }


  public PortMapping hostPort(Integer hostPort) {
    this.hostPort = hostPort;
    return this;
  }

  /**
   * Get hostPort
   * @return hostPort
   */
  @javax.annotation.Nullable
  public Integer getHostPort() {
    return hostPort;
  }

  public void setHostPort(Integer hostPort) {
    this.hostPort = hostPort;
  }


  public PortMapping protocol(TransportProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public TransportProtocol getProtocol() {
    return protocol;
  }

  public void setProtocol(TransportProtocol protocol) {
    this.protocol = protocol;
  }


  public PortMapping name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PortMapping appProtocol(ApplicationProtocol appProtocol) {
    this.appProtocol = appProtocol;
    return this;
  }

  /**
   * Get appProtocol
   * @return appProtocol
   */
  @javax.annotation.Nullable
  public ApplicationProtocol getAppProtocol() {
    return appProtocol;
  }

  public void setAppProtocol(ApplicationProtocol appProtocol) {
    this.appProtocol = appProtocol;
  }


  public PortMapping containerPortRange(String containerPortRange) {
    this.containerPortRange = containerPortRange;
    return this;
  }

  /**
   * Get containerPortRange
   * @return containerPortRange
   */
  @javax.annotation.Nullable
  public String getContainerPortRange() {
    return containerPortRange;
  }

  public void setContainerPortRange(String containerPortRange) {
    this.containerPortRange = containerPortRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortMapping portMapping = (PortMapping) o;
    return Objects.equals(this.containerPort, portMapping.containerPort) &&
        Objects.equals(this.hostPort, portMapping.hostPort) &&
        Objects.equals(this.protocol, portMapping.protocol) &&
        Objects.equals(this.name, portMapping.name) &&
        Objects.equals(this.appProtocol, portMapping.appProtocol) &&
        Objects.equals(this.containerPortRange, portMapping.containerPortRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerPort, hostPort, protocol, name, appProtocol, containerPortRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortMapping {\n");
    sb.append("    containerPort: ").append(toIndentedString(containerPort)).append("\n");
    sb.append("    hostPort: ").append(toIndentedString(hostPort)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    appProtocol: ").append(toIndentedString(appProtocol)).append("\n");
    sb.append("    containerPortRange: ").append(toIndentedString(containerPortRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerPort");
    openapiFields.add("hostPort");
    openapiFields.add("protocol");
    openapiFields.add("name");
    openapiFields.add("appProtocol");
    openapiFields.add("containerPortRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PortMapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PortMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PortMapping is not found in the empty JSON string", PortMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PortMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PortMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containerPort`
      if (jsonObj.get("containerPort") != null && !jsonObj.get("containerPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("containerPort"));
      }
      // validate the optional field `hostPort`
      if (jsonObj.get("hostPort") != null && !jsonObj.get("hostPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("hostPort"));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        TransportProtocol.validateJsonElement(jsonObj.get("protocol"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `appProtocol`
      if (jsonObj.get("appProtocol") != null && !jsonObj.get("appProtocol").isJsonNull()) {
        ApplicationProtocol.validateJsonElement(jsonObj.get("appProtocol"));
      }
      // validate the optional field `containerPortRange`
      if (jsonObj.get("containerPortRange") != null && !jsonObj.get("containerPortRange").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("containerPortRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PortMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PortMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PortMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PortMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<PortMapping>() {
           @Override
           public void write(JsonWriter out, PortMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PortMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PortMapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PortMapping
   * @throws IOException if the JSON string is invalid with respect to PortMapping
   */
  public static PortMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PortMapping.class);
  }

  /**
   * Convert an instance of PortMapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

