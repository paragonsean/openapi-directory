/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AgentUpdateStatus;
import org.openapitools.client.model.ContainerInstanceHealthStatus;
import org.openapitools.client.model.ContainerInstanceVersionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterContainerInstanceResponseContainerInstance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterContainerInstanceResponseContainerInstance {
  public static final String SERIALIZED_NAME_CONTAINER_INSTANCE_ARN = "containerInstanceArn";
  @SerializedName(SERIALIZED_NAME_CONTAINER_INSTANCE_ARN)
  private String containerInstanceArn;

  public static final String SERIALIZED_NAME_EC2_INSTANCE_ID = "ec2InstanceId";
  @SerializedName(SERIALIZED_NAME_EC2_INSTANCE_ID)
  private String ec2InstanceId;

  public static final String SERIALIZED_NAME_CAPACITY_PROVIDER_NAME = "capacityProviderName";
  @SerializedName(SERIALIZED_NAME_CAPACITY_PROVIDER_NAME)
  private String capacityProviderName;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_VERSION_INFO = "versionInfo";
  @SerializedName(SERIALIZED_NAME_VERSION_INFO)
  private ContainerInstanceVersionInfo versionInfo;

  public static final String SERIALIZED_NAME_REMAINING_RESOURCES = "remainingResources";
  @SerializedName(SERIALIZED_NAME_REMAINING_RESOURCES)
  private List remainingResources;

  public static final String SERIALIZED_NAME_REGISTERED_RESOURCES = "registeredResources";
  @SerializedName(SERIALIZED_NAME_REGISTERED_RESOURCES)
  private List registeredResources;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_REASON = "statusReason";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON)
  private String statusReason;

  public static final String SERIALIZED_NAME_AGENT_CONNECTED = "agentConnected";
  @SerializedName(SERIALIZED_NAME_AGENT_CONNECTED)
  private Boolean agentConnected;

  public static final String SERIALIZED_NAME_RUNNING_TASKS_COUNT = "runningTasksCount";
  @SerializedName(SERIALIZED_NAME_RUNNING_TASKS_COUNT)
  private Integer runningTasksCount;

  public static final String SERIALIZED_NAME_PENDING_TASKS_COUNT = "pendingTasksCount";
  @SerializedName(SERIALIZED_NAME_PENDING_TASKS_COUNT)
  private Integer pendingTasksCount;

  public static final String SERIALIZED_NAME_AGENT_UPDATE_STATUS = "agentUpdateStatus";
  @SerializedName(SERIALIZED_NAME_AGENT_UPDATE_STATUS)
  private AgentUpdateStatus agentUpdateStatus;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List attributes;

  public static final String SERIALIZED_NAME_REGISTERED_AT = "registeredAt";
  @SerializedName(SERIALIZED_NAME_REGISTERED_AT)
  private OffsetDateTime registeredAt;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List attachments;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_HEALTH_STATUS = "healthStatus";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATUS)
  private ContainerInstanceHealthStatus healthStatus;

  public RegisterContainerInstanceResponseContainerInstance() {
  }

  public RegisterContainerInstanceResponseContainerInstance containerInstanceArn(String containerInstanceArn) {
    this.containerInstanceArn = containerInstanceArn;
    return this;
  }

  /**
   * Get containerInstanceArn
   * @return containerInstanceArn
   */
  @javax.annotation.Nullable
  public String getContainerInstanceArn() {
    return containerInstanceArn;
  }

  public void setContainerInstanceArn(String containerInstanceArn) {
    this.containerInstanceArn = containerInstanceArn;
  }


  public RegisterContainerInstanceResponseContainerInstance ec2InstanceId(String ec2InstanceId) {
    this.ec2InstanceId = ec2InstanceId;
    return this;
  }

  /**
   * Get ec2InstanceId
   * @return ec2InstanceId
   */
  @javax.annotation.Nullable
  public String getEc2InstanceId() {
    return ec2InstanceId;
  }

  public void setEc2InstanceId(String ec2InstanceId) {
    this.ec2InstanceId = ec2InstanceId;
  }


  public RegisterContainerInstanceResponseContainerInstance capacityProviderName(String capacityProviderName) {
    this.capacityProviderName = capacityProviderName;
    return this;
  }

  /**
   * Get capacityProviderName
   * @return capacityProviderName
   */
  @javax.annotation.Nullable
  public String getCapacityProviderName() {
    return capacityProviderName;
  }

  public void setCapacityProviderName(String capacityProviderName) {
    this.capacityProviderName = capacityProviderName;
  }


  public RegisterContainerInstanceResponseContainerInstance version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public RegisterContainerInstanceResponseContainerInstance versionInfo(ContainerInstanceVersionInfo versionInfo) {
    this.versionInfo = versionInfo;
    return this;
  }

  /**
   * Get versionInfo
   * @return versionInfo
   */
  @javax.annotation.Nullable
  public ContainerInstanceVersionInfo getVersionInfo() {
    return versionInfo;
  }

  public void setVersionInfo(ContainerInstanceVersionInfo versionInfo) {
    this.versionInfo = versionInfo;
  }


  public RegisterContainerInstanceResponseContainerInstance remainingResources(List remainingResources) {
    this.remainingResources = remainingResources;
    return this;
  }

  /**
   * Get remainingResources
   * @return remainingResources
   */
  @javax.annotation.Nullable
  public List getRemainingResources() {
    return remainingResources;
  }

  public void setRemainingResources(List remainingResources) {
    this.remainingResources = remainingResources;
  }


  public RegisterContainerInstanceResponseContainerInstance registeredResources(List registeredResources) {
    this.registeredResources = registeredResources;
    return this;
  }

  /**
   * Get registeredResources
   * @return registeredResources
   */
  @javax.annotation.Nullable
  public List getRegisteredResources() {
    return registeredResources;
  }

  public void setRegisteredResources(List registeredResources) {
    this.registeredResources = registeredResources;
  }


  public RegisterContainerInstanceResponseContainerInstance status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public RegisterContainerInstanceResponseContainerInstance statusReason(String statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * Get statusReason
   * @return statusReason
   */
  @javax.annotation.Nullable
  public String getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(String statusReason) {
    this.statusReason = statusReason;
  }


  public RegisterContainerInstanceResponseContainerInstance agentConnected(Boolean agentConnected) {
    this.agentConnected = agentConnected;
    return this;
  }

  /**
   * Get agentConnected
   * @return agentConnected
   */
  @javax.annotation.Nullable
  public Boolean getAgentConnected() {
    return agentConnected;
  }

  public void setAgentConnected(Boolean agentConnected) {
    this.agentConnected = agentConnected;
  }


  public RegisterContainerInstanceResponseContainerInstance runningTasksCount(Integer runningTasksCount) {
    this.runningTasksCount = runningTasksCount;
    return this;
  }

  /**
   * Get runningTasksCount
   * @return runningTasksCount
   */
  @javax.annotation.Nullable
  public Integer getRunningTasksCount() {
    return runningTasksCount;
  }

  public void setRunningTasksCount(Integer runningTasksCount) {
    this.runningTasksCount = runningTasksCount;
  }


  public RegisterContainerInstanceResponseContainerInstance pendingTasksCount(Integer pendingTasksCount) {
    this.pendingTasksCount = pendingTasksCount;
    return this;
  }

  /**
   * Get pendingTasksCount
   * @return pendingTasksCount
   */
  @javax.annotation.Nullable
  public Integer getPendingTasksCount() {
    return pendingTasksCount;
  }

  public void setPendingTasksCount(Integer pendingTasksCount) {
    this.pendingTasksCount = pendingTasksCount;
  }


  public RegisterContainerInstanceResponseContainerInstance agentUpdateStatus(AgentUpdateStatus agentUpdateStatus) {
    this.agentUpdateStatus = agentUpdateStatus;
    return this;
  }

  /**
   * Get agentUpdateStatus
   * @return agentUpdateStatus
   */
  @javax.annotation.Nullable
  public AgentUpdateStatus getAgentUpdateStatus() {
    return agentUpdateStatus;
  }

  public void setAgentUpdateStatus(AgentUpdateStatus agentUpdateStatus) {
    this.agentUpdateStatus = agentUpdateStatus;
  }


  public RegisterContainerInstanceResponseContainerInstance attributes(List attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public List getAttributes() {
    return attributes;
  }

  public void setAttributes(List attributes) {
    this.attributes = attributes;
  }


  public RegisterContainerInstanceResponseContainerInstance registeredAt(OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
    return this;
  }

  /**
   * Get registeredAt
   * @return registeredAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRegisteredAt() {
    return registeredAt;
  }

  public void setRegisteredAt(OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
  }


  public RegisterContainerInstanceResponseContainerInstance attachments(List attachments) {
    this.attachments = attachments;
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List getAttachments() {
    return attachments;
  }

  public void setAttachments(List attachments) {
    this.attachments = attachments;
  }


  public RegisterContainerInstanceResponseContainerInstance tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public RegisterContainerInstanceResponseContainerInstance healthStatus(ContainerInstanceHealthStatus healthStatus) {
    this.healthStatus = healthStatus;
    return this;
  }

  /**
   * Get healthStatus
   * @return healthStatus
   */
  @javax.annotation.Nullable
  public ContainerInstanceHealthStatus getHealthStatus() {
    return healthStatus;
  }

  public void setHealthStatus(ContainerInstanceHealthStatus healthStatus) {
    this.healthStatus = healthStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterContainerInstanceResponseContainerInstance registerContainerInstanceResponseContainerInstance = (RegisterContainerInstanceResponseContainerInstance) o;
    return Objects.equals(this.containerInstanceArn, registerContainerInstanceResponseContainerInstance.containerInstanceArn) &&
        Objects.equals(this.ec2InstanceId, registerContainerInstanceResponseContainerInstance.ec2InstanceId) &&
        Objects.equals(this.capacityProviderName, registerContainerInstanceResponseContainerInstance.capacityProviderName) &&
        Objects.equals(this.version, registerContainerInstanceResponseContainerInstance.version) &&
        Objects.equals(this.versionInfo, registerContainerInstanceResponseContainerInstance.versionInfo) &&
        Objects.equals(this.remainingResources, registerContainerInstanceResponseContainerInstance.remainingResources) &&
        Objects.equals(this.registeredResources, registerContainerInstanceResponseContainerInstance.registeredResources) &&
        Objects.equals(this.status, registerContainerInstanceResponseContainerInstance.status) &&
        Objects.equals(this.statusReason, registerContainerInstanceResponseContainerInstance.statusReason) &&
        Objects.equals(this.agentConnected, registerContainerInstanceResponseContainerInstance.agentConnected) &&
        Objects.equals(this.runningTasksCount, registerContainerInstanceResponseContainerInstance.runningTasksCount) &&
        Objects.equals(this.pendingTasksCount, registerContainerInstanceResponseContainerInstance.pendingTasksCount) &&
        Objects.equals(this.agentUpdateStatus, registerContainerInstanceResponseContainerInstance.agentUpdateStatus) &&
        Objects.equals(this.attributes, registerContainerInstanceResponseContainerInstance.attributes) &&
        Objects.equals(this.registeredAt, registerContainerInstanceResponseContainerInstance.registeredAt) &&
        Objects.equals(this.attachments, registerContainerInstanceResponseContainerInstance.attachments) &&
        Objects.equals(this.tags, registerContainerInstanceResponseContainerInstance.tags) &&
        Objects.equals(this.healthStatus, registerContainerInstanceResponseContainerInstance.healthStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerInstanceArn, ec2InstanceId, capacityProviderName, version, versionInfo, remainingResources, registeredResources, status, statusReason, agentConnected, runningTasksCount, pendingTasksCount, agentUpdateStatus, attributes, registeredAt, attachments, tags, healthStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterContainerInstanceResponseContainerInstance {\n");
    sb.append("    containerInstanceArn: ").append(toIndentedString(containerInstanceArn)).append("\n");
    sb.append("    ec2InstanceId: ").append(toIndentedString(ec2InstanceId)).append("\n");
    sb.append("    capacityProviderName: ").append(toIndentedString(capacityProviderName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versionInfo: ").append(toIndentedString(versionInfo)).append("\n");
    sb.append("    remainingResources: ").append(toIndentedString(remainingResources)).append("\n");
    sb.append("    registeredResources: ").append(toIndentedString(registeredResources)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("    agentConnected: ").append(toIndentedString(agentConnected)).append("\n");
    sb.append("    runningTasksCount: ").append(toIndentedString(runningTasksCount)).append("\n");
    sb.append("    pendingTasksCount: ").append(toIndentedString(pendingTasksCount)).append("\n");
    sb.append("    agentUpdateStatus: ").append(toIndentedString(agentUpdateStatus)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    registeredAt: ").append(toIndentedString(registeredAt)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    healthStatus: ").append(toIndentedString(healthStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerInstanceArn");
    openapiFields.add("ec2InstanceId");
    openapiFields.add("capacityProviderName");
    openapiFields.add("version");
    openapiFields.add("versionInfo");
    openapiFields.add("remainingResources");
    openapiFields.add("registeredResources");
    openapiFields.add("status");
    openapiFields.add("statusReason");
    openapiFields.add("agentConnected");
    openapiFields.add("runningTasksCount");
    openapiFields.add("pendingTasksCount");
    openapiFields.add("agentUpdateStatus");
    openapiFields.add("attributes");
    openapiFields.add("registeredAt");
    openapiFields.add("attachments");
    openapiFields.add("tags");
    openapiFields.add("healthStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterContainerInstanceResponseContainerInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterContainerInstanceResponseContainerInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterContainerInstanceResponseContainerInstance is not found in the empty JSON string", RegisterContainerInstanceResponseContainerInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterContainerInstanceResponseContainerInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterContainerInstanceResponseContainerInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containerInstanceArn`
      if (jsonObj.get("containerInstanceArn") != null && !jsonObj.get("containerInstanceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("containerInstanceArn"));
      }
      // validate the optional field `ec2InstanceId`
      if (jsonObj.get("ec2InstanceId") != null && !jsonObj.get("ec2InstanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ec2InstanceId"));
      }
      // validate the optional field `capacityProviderName`
      if (jsonObj.get("capacityProviderName") != null && !jsonObj.get("capacityProviderName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("capacityProviderName"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("version"));
      }
      // validate the optional field `versionInfo`
      if (jsonObj.get("versionInfo") != null && !jsonObj.get("versionInfo").isJsonNull()) {
        ContainerInstanceVersionInfo.validateJsonElement(jsonObj.get("versionInfo"));
      }
      // validate the optional field `remainingResources`
      if (jsonObj.get("remainingResources") != null && !jsonObj.get("remainingResources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("remainingResources"));
      }
      // validate the optional field `registeredResources`
      if (jsonObj.get("registeredResources") != null && !jsonObj.get("registeredResources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("registeredResources"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `statusReason`
      if (jsonObj.get("statusReason") != null && !jsonObj.get("statusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusReason"));
      }
      // validate the optional field `agentConnected`
      if (jsonObj.get("agentConnected") != null && !jsonObj.get("agentConnected").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("agentConnected"));
      }
      // validate the optional field `runningTasksCount`
      if (jsonObj.get("runningTasksCount") != null && !jsonObj.get("runningTasksCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("runningTasksCount"));
      }
      // validate the optional field `pendingTasksCount`
      if (jsonObj.get("pendingTasksCount") != null && !jsonObj.get("pendingTasksCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("pendingTasksCount"));
      }
      // validate the optional field `agentUpdateStatus`
      if (jsonObj.get("agentUpdateStatus") != null && !jsonObj.get("agentUpdateStatus").isJsonNull()) {
        AgentUpdateStatus.validateJsonElement(jsonObj.get("agentUpdateStatus"));
      }
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("attributes"));
      }
      // validate the optional field `registeredAt`
      if (jsonObj.get("registeredAt") != null && !jsonObj.get("registeredAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("registeredAt"));
      }
      // validate the optional field `attachments`
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("attachments"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `healthStatus`
      if (jsonObj.get("healthStatus") != null && !jsonObj.get("healthStatus").isJsonNull()) {
        ContainerInstanceHealthStatus.validateJsonElement(jsonObj.get("healthStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterContainerInstanceResponseContainerInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterContainerInstanceResponseContainerInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterContainerInstanceResponseContainerInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterContainerInstanceResponseContainerInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterContainerInstanceResponseContainerInstance>() {
           @Override
           public void write(JsonWriter out, RegisterContainerInstanceResponseContainerInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterContainerInstanceResponseContainerInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterContainerInstanceResponseContainerInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterContainerInstanceResponseContainerInstance
   * @throws IOException if the JSON string is invalid with respect to RegisterContainerInstanceResponseContainerInstance
   */
  public static RegisterContainerInstanceResponseContainerInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterContainerInstanceResponseContainerInstance.class);
  }

  /**
   * Convert an instance of RegisterContainerInstanceResponseContainerInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

