/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ContainerDefinitionFirelensConfiguration;
import org.openapitools.client.model.ContainerDefinitionHealthCheck;
import org.openapitools.client.model.ContainerDefinitionLinuxParameters;
import org.openapitools.client.model.ContainerDefinitionLogConfiguration;
import org.openapitools.client.model.ContainerDefinitionRepositoryCredentials;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container definitions are used in task definitions to describe the different containers that are launched as part of a task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerDefinition {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_REPOSITORY_CREDENTIALS = "repositoryCredentials";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_CREDENTIALS)
  private ContainerDefinitionRepositoryCredentials repositoryCredentials;

  public static final String SERIALIZED_NAME_CPU = "cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private Integer cpu;

  public static final String SERIALIZED_NAME_MEMORY = "memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private Integer memory;

  public static final String SERIALIZED_NAME_MEMORY_RESERVATION = "memoryReservation";
  @SerializedName(SERIALIZED_NAME_MEMORY_RESERVATION)
  private Integer memoryReservation;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List links;

  public static final String SERIALIZED_NAME_PORT_MAPPINGS = "portMappings";
  @SerializedName(SERIALIZED_NAME_PORT_MAPPINGS)
  private List portMappings;

  public static final String SERIALIZED_NAME_ESSENTIAL = "essential";
  @SerializedName(SERIALIZED_NAME_ESSENTIAL)
  private Boolean essential;

  public static final String SERIALIZED_NAME_ENTRY_POINT = "entryPoint";
  @SerializedName(SERIALIZED_NAME_ENTRY_POINT)
  private List entryPoint;

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private List command;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private List environment;

  public static final String SERIALIZED_NAME_ENVIRONMENT_FILES = "environmentFiles";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_FILES)
  private List environmentFiles;

  public static final String SERIALIZED_NAME_MOUNT_POINTS = "mountPoints";
  @SerializedName(SERIALIZED_NAME_MOUNT_POINTS)
  private List mountPoints;

  public static final String SERIALIZED_NAME_VOLUMES_FROM = "volumesFrom";
  @SerializedName(SERIALIZED_NAME_VOLUMES_FROM)
  private List volumesFrom;

  public static final String SERIALIZED_NAME_LINUX_PARAMETERS = "linuxParameters";
  @SerializedName(SERIALIZED_NAME_LINUX_PARAMETERS)
  private ContainerDefinitionLinuxParameters linuxParameters;

  public static final String SERIALIZED_NAME_SECRETS = "secrets";
  @SerializedName(SERIALIZED_NAME_SECRETS)
  private List secrets;

  public static final String SERIALIZED_NAME_DEPENDS_ON = "dependsOn";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON)
  private List dependsOn;

  public static final String SERIALIZED_NAME_START_TIMEOUT = "startTimeout";
  @SerializedName(SERIALIZED_NAME_START_TIMEOUT)
  private Integer startTimeout;

  public static final String SERIALIZED_NAME_STOP_TIMEOUT = "stopTimeout";
  @SerializedName(SERIALIZED_NAME_STOP_TIMEOUT)
  private Integer stopTimeout;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_WORKING_DIRECTORY = "workingDirectory";
  @SerializedName(SERIALIZED_NAME_WORKING_DIRECTORY)
  private String workingDirectory;

  public static final String SERIALIZED_NAME_DISABLE_NETWORKING = "disableNetworking";
  @SerializedName(SERIALIZED_NAME_DISABLE_NETWORKING)
  private Boolean disableNetworking;

  public static final String SERIALIZED_NAME_PRIVILEGED = "privileged";
  @SerializedName(SERIALIZED_NAME_PRIVILEGED)
  private Boolean privileged;

  public static final String SERIALIZED_NAME_READONLY_ROOT_FILESYSTEM = "readonlyRootFilesystem";
  @SerializedName(SERIALIZED_NAME_READONLY_ROOT_FILESYSTEM)
  private Boolean readonlyRootFilesystem;

  public static final String SERIALIZED_NAME_DNS_SERVERS = "dnsServers";
  @SerializedName(SERIALIZED_NAME_DNS_SERVERS)
  private List dnsServers;

  public static final String SERIALIZED_NAME_DNS_SEARCH_DOMAINS = "dnsSearchDomains";
  @SerializedName(SERIALIZED_NAME_DNS_SEARCH_DOMAINS)
  private List dnsSearchDomains;

  public static final String SERIALIZED_NAME_EXTRA_HOSTS = "extraHosts";
  @SerializedName(SERIALIZED_NAME_EXTRA_HOSTS)
  private List extraHosts;

  public static final String SERIALIZED_NAME_DOCKER_SECURITY_OPTIONS = "dockerSecurityOptions";
  @SerializedName(SERIALIZED_NAME_DOCKER_SECURITY_OPTIONS)
  private List dockerSecurityOptions;

  public static final String SERIALIZED_NAME_INTERACTIVE = "interactive";
  @SerializedName(SERIALIZED_NAME_INTERACTIVE)
  private Boolean interactive;

  public static final String SERIALIZED_NAME_PSEUDO_TERMINAL = "pseudoTerminal";
  @SerializedName(SERIALIZED_NAME_PSEUDO_TERMINAL)
  private Boolean pseudoTerminal;

  public static final String SERIALIZED_NAME_DOCKER_LABELS = "dockerLabels";
  @SerializedName(SERIALIZED_NAME_DOCKER_LABELS)
  private Map dockerLabels;

  public static final String SERIALIZED_NAME_ULIMITS = "ulimits";
  @SerializedName(SERIALIZED_NAME_ULIMITS)
  private List ulimits;

  public static final String SERIALIZED_NAME_LOG_CONFIGURATION = "logConfiguration";
  @SerializedName(SERIALIZED_NAME_LOG_CONFIGURATION)
  private ContainerDefinitionLogConfiguration logConfiguration;

  public static final String SERIALIZED_NAME_HEALTH_CHECK = "healthCheck";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK)
  private ContainerDefinitionHealthCheck healthCheck;

  public static final String SERIALIZED_NAME_SYSTEM_CONTROLS = "systemControls";
  @SerializedName(SERIALIZED_NAME_SYSTEM_CONTROLS)
  private List systemControls;

  public static final String SERIALIZED_NAME_RESOURCE_REQUIREMENTS = "resourceRequirements";
  @SerializedName(SERIALIZED_NAME_RESOURCE_REQUIREMENTS)
  private List resourceRequirements;

  public static final String SERIALIZED_NAME_FIRELENS_CONFIGURATION = "firelensConfiguration";
  @SerializedName(SERIALIZED_NAME_FIRELENS_CONFIGURATION)
  private ContainerDefinitionFirelensConfiguration firelensConfiguration;

  public static final String SERIALIZED_NAME_CREDENTIAL_SPECS = "credentialSpecs";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_SPECS)
  private List credentialSpecs;

  public ContainerDefinition() {
  }

  public ContainerDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContainerDefinition image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public ContainerDefinition repositoryCredentials(ContainerDefinitionRepositoryCredentials repositoryCredentials) {
    this.repositoryCredentials = repositoryCredentials;
    return this;
  }

  /**
   * Get repositoryCredentials
   * @return repositoryCredentials
   */
  @javax.annotation.Nullable
  public ContainerDefinitionRepositoryCredentials getRepositoryCredentials() {
    return repositoryCredentials;
  }

  public void setRepositoryCredentials(ContainerDefinitionRepositoryCredentials repositoryCredentials) {
    this.repositoryCredentials = repositoryCredentials;
  }


  public ContainerDefinition cpu(Integer cpu) {
    this.cpu = cpu;
    return this;
  }

  /**
   * Get cpu
   * @return cpu
   */
  @javax.annotation.Nullable
  public Integer getCpu() {
    return cpu;
  }

  public void setCpu(Integer cpu) {
    this.cpu = cpu;
  }


  public ContainerDefinition memory(Integer memory) {
    this.memory = memory;
    return this;
  }

  /**
   * Get memory
   * @return memory
   */
  @javax.annotation.Nullable
  public Integer getMemory() {
    return memory;
  }

  public void setMemory(Integer memory) {
    this.memory = memory;
  }


  public ContainerDefinition memoryReservation(Integer memoryReservation) {
    this.memoryReservation = memoryReservation;
    return this;
  }

  /**
   * Get memoryReservation
   * @return memoryReservation
   */
  @javax.annotation.Nullable
  public Integer getMemoryReservation() {
    return memoryReservation;
  }

  public void setMemoryReservation(Integer memoryReservation) {
    this.memoryReservation = memoryReservation;
  }


  public ContainerDefinition links(List links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List getLinks() {
    return links;
  }

  public void setLinks(List links) {
    this.links = links;
  }


  public ContainerDefinition portMappings(List portMappings) {
    this.portMappings = portMappings;
    return this;
  }

  /**
   * Get portMappings
   * @return portMappings
   */
  @javax.annotation.Nullable
  public List getPortMappings() {
    return portMappings;
  }

  public void setPortMappings(List portMappings) {
    this.portMappings = portMappings;
  }


  public ContainerDefinition essential(Boolean essential) {
    this.essential = essential;
    return this;
  }

  /**
   * Get essential
   * @return essential
   */
  @javax.annotation.Nullable
  public Boolean getEssential() {
    return essential;
  }

  public void setEssential(Boolean essential) {
    this.essential = essential;
  }


  public ContainerDefinition entryPoint(List entryPoint) {
    this.entryPoint = entryPoint;
    return this;
  }

  /**
   * Get entryPoint
   * @return entryPoint
   */
  @javax.annotation.Nullable
  public List getEntryPoint() {
    return entryPoint;
  }

  public void setEntryPoint(List entryPoint) {
    this.entryPoint = entryPoint;
  }


  public ContainerDefinition command(List command) {
    this.command = command;
    return this;
  }

  /**
   * Get command
   * @return command
   */
  @javax.annotation.Nullable
  public List getCommand() {
    return command;
  }

  public void setCommand(List command) {
    this.command = command;
  }


  public ContainerDefinition environment(List environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public List getEnvironment() {
    return environment;
  }

  public void setEnvironment(List environment) {
    this.environment = environment;
  }


  public ContainerDefinition environmentFiles(List environmentFiles) {
    this.environmentFiles = environmentFiles;
    return this;
  }

  /**
   * Get environmentFiles
   * @return environmentFiles
   */
  @javax.annotation.Nullable
  public List getEnvironmentFiles() {
    return environmentFiles;
  }

  public void setEnvironmentFiles(List environmentFiles) {
    this.environmentFiles = environmentFiles;
  }


  public ContainerDefinition mountPoints(List mountPoints) {
    this.mountPoints = mountPoints;
    return this;
  }

  /**
   * Get mountPoints
   * @return mountPoints
   */
  @javax.annotation.Nullable
  public List getMountPoints() {
    return mountPoints;
  }

  public void setMountPoints(List mountPoints) {
    this.mountPoints = mountPoints;
  }


  public ContainerDefinition volumesFrom(List volumesFrom) {
    this.volumesFrom = volumesFrom;
    return this;
  }

  /**
   * Get volumesFrom
   * @return volumesFrom
   */
  @javax.annotation.Nullable
  public List getVolumesFrom() {
    return volumesFrom;
  }

  public void setVolumesFrom(List volumesFrom) {
    this.volumesFrom = volumesFrom;
  }


  public ContainerDefinition linuxParameters(ContainerDefinitionLinuxParameters linuxParameters) {
    this.linuxParameters = linuxParameters;
    return this;
  }

  /**
   * Get linuxParameters
   * @return linuxParameters
   */
  @javax.annotation.Nullable
  public ContainerDefinitionLinuxParameters getLinuxParameters() {
    return linuxParameters;
  }

  public void setLinuxParameters(ContainerDefinitionLinuxParameters linuxParameters) {
    this.linuxParameters = linuxParameters;
  }


  public ContainerDefinition secrets(List secrets) {
    this.secrets = secrets;
    return this;
  }

  /**
   * Get secrets
   * @return secrets
   */
  @javax.annotation.Nullable
  public List getSecrets() {
    return secrets;
  }

  public void setSecrets(List secrets) {
    this.secrets = secrets;
  }


  public ContainerDefinition dependsOn(List dependsOn) {
    this.dependsOn = dependsOn;
    return this;
  }

  /**
   * Get dependsOn
   * @return dependsOn
   */
  @javax.annotation.Nullable
  public List getDependsOn() {
    return dependsOn;
  }

  public void setDependsOn(List dependsOn) {
    this.dependsOn = dependsOn;
  }


  public ContainerDefinition startTimeout(Integer startTimeout) {
    this.startTimeout = startTimeout;
    return this;
  }

  /**
   * Get startTimeout
   * @return startTimeout
   */
  @javax.annotation.Nullable
  public Integer getStartTimeout() {
    return startTimeout;
  }

  public void setStartTimeout(Integer startTimeout) {
    this.startTimeout = startTimeout;
  }


  public ContainerDefinition stopTimeout(Integer stopTimeout) {
    this.stopTimeout = stopTimeout;
    return this;
  }

  /**
   * Get stopTimeout
   * @return stopTimeout
   */
  @javax.annotation.Nullable
  public Integer getStopTimeout() {
    return stopTimeout;
  }

  public void setStopTimeout(Integer stopTimeout) {
    this.stopTimeout = stopTimeout;
  }


  public ContainerDefinition hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Get hostname
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public ContainerDefinition user(String user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public ContainerDefinition workingDirectory(String workingDirectory) {
    this.workingDirectory = workingDirectory;
    return this;
  }

  /**
   * Get workingDirectory
   * @return workingDirectory
   */
  @javax.annotation.Nullable
  public String getWorkingDirectory() {
    return workingDirectory;
  }

  public void setWorkingDirectory(String workingDirectory) {
    this.workingDirectory = workingDirectory;
  }


  public ContainerDefinition disableNetworking(Boolean disableNetworking) {
    this.disableNetworking = disableNetworking;
    return this;
  }

  /**
   * Get disableNetworking
   * @return disableNetworking
   */
  @javax.annotation.Nullable
  public Boolean getDisableNetworking() {
    return disableNetworking;
  }

  public void setDisableNetworking(Boolean disableNetworking) {
    this.disableNetworking = disableNetworking;
  }


  public ContainerDefinition privileged(Boolean privileged) {
    this.privileged = privileged;
    return this;
  }

  /**
   * Get privileged
   * @return privileged
   */
  @javax.annotation.Nullable
  public Boolean getPrivileged() {
    return privileged;
  }

  public void setPrivileged(Boolean privileged) {
    this.privileged = privileged;
  }


  public ContainerDefinition readonlyRootFilesystem(Boolean readonlyRootFilesystem) {
    this.readonlyRootFilesystem = readonlyRootFilesystem;
    return this;
  }

  /**
   * Get readonlyRootFilesystem
   * @return readonlyRootFilesystem
   */
  @javax.annotation.Nullable
  public Boolean getReadonlyRootFilesystem() {
    return readonlyRootFilesystem;
  }

  public void setReadonlyRootFilesystem(Boolean readonlyRootFilesystem) {
    this.readonlyRootFilesystem = readonlyRootFilesystem;
  }


  public ContainerDefinition dnsServers(List dnsServers) {
    this.dnsServers = dnsServers;
    return this;
  }

  /**
   * Get dnsServers
   * @return dnsServers
   */
  @javax.annotation.Nullable
  public List getDnsServers() {
    return dnsServers;
  }

  public void setDnsServers(List dnsServers) {
    this.dnsServers = dnsServers;
  }


  public ContainerDefinition dnsSearchDomains(List dnsSearchDomains) {
    this.dnsSearchDomains = dnsSearchDomains;
    return this;
  }

  /**
   * Get dnsSearchDomains
   * @return dnsSearchDomains
   */
  @javax.annotation.Nullable
  public List getDnsSearchDomains() {
    return dnsSearchDomains;
  }

  public void setDnsSearchDomains(List dnsSearchDomains) {
    this.dnsSearchDomains = dnsSearchDomains;
  }


  public ContainerDefinition extraHosts(List extraHosts) {
    this.extraHosts = extraHosts;
    return this;
  }

  /**
   * Get extraHosts
   * @return extraHosts
   */
  @javax.annotation.Nullable
  public List getExtraHosts() {
    return extraHosts;
  }

  public void setExtraHosts(List extraHosts) {
    this.extraHosts = extraHosts;
  }


  public ContainerDefinition dockerSecurityOptions(List dockerSecurityOptions) {
    this.dockerSecurityOptions = dockerSecurityOptions;
    return this;
  }

  /**
   * Get dockerSecurityOptions
   * @return dockerSecurityOptions
   */
  @javax.annotation.Nullable
  public List getDockerSecurityOptions() {
    return dockerSecurityOptions;
  }

  public void setDockerSecurityOptions(List dockerSecurityOptions) {
    this.dockerSecurityOptions = dockerSecurityOptions;
  }


  public ContainerDefinition interactive(Boolean interactive) {
    this.interactive = interactive;
    return this;
  }

  /**
   * Get interactive
   * @return interactive
   */
  @javax.annotation.Nullable
  public Boolean getInteractive() {
    return interactive;
  }

  public void setInteractive(Boolean interactive) {
    this.interactive = interactive;
  }


  public ContainerDefinition pseudoTerminal(Boolean pseudoTerminal) {
    this.pseudoTerminal = pseudoTerminal;
    return this;
  }

  /**
   * Get pseudoTerminal
   * @return pseudoTerminal
   */
  @javax.annotation.Nullable
  public Boolean getPseudoTerminal() {
    return pseudoTerminal;
  }

  public void setPseudoTerminal(Boolean pseudoTerminal) {
    this.pseudoTerminal = pseudoTerminal;
  }


  public ContainerDefinition dockerLabels(Map dockerLabels) {
    this.dockerLabels = dockerLabels;
    return this;
  }

  /**
   * Get dockerLabels
   * @return dockerLabels
   */
  @javax.annotation.Nullable
  public Map getDockerLabels() {
    return dockerLabels;
  }

  public void setDockerLabels(Map dockerLabels) {
    this.dockerLabels = dockerLabels;
  }


  public ContainerDefinition ulimits(List ulimits) {
    this.ulimits = ulimits;
    return this;
  }

  /**
   * Get ulimits
   * @return ulimits
   */
  @javax.annotation.Nullable
  public List getUlimits() {
    return ulimits;
  }

  public void setUlimits(List ulimits) {
    this.ulimits = ulimits;
  }


  public ContainerDefinition logConfiguration(ContainerDefinitionLogConfiguration logConfiguration) {
    this.logConfiguration = logConfiguration;
    return this;
  }

  /**
   * Get logConfiguration
   * @return logConfiguration
   */
  @javax.annotation.Nullable
  public ContainerDefinitionLogConfiguration getLogConfiguration() {
    return logConfiguration;
  }

  public void setLogConfiguration(ContainerDefinitionLogConfiguration logConfiguration) {
    this.logConfiguration = logConfiguration;
  }


  public ContainerDefinition healthCheck(ContainerDefinitionHealthCheck healthCheck) {
    this.healthCheck = healthCheck;
    return this;
  }

  /**
   * Get healthCheck
   * @return healthCheck
   */
  @javax.annotation.Nullable
  public ContainerDefinitionHealthCheck getHealthCheck() {
    return healthCheck;
  }

  public void setHealthCheck(ContainerDefinitionHealthCheck healthCheck) {
    this.healthCheck = healthCheck;
  }


  public ContainerDefinition systemControls(List systemControls) {
    this.systemControls = systemControls;
    return this;
  }

  /**
   * Get systemControls
   * @return systemControls
   */
  @javax.annotation.Nullable
  public List getSystemControls() {
    return systemControls;
  }

  public void setSystemControls(List systemControls) {
    this.systemControls = systemControls;
  }


  public ContainerDefinition resourceRequirements(List resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
    return this;
  }

  /**
   * Get resourceRequirements
   * @return resourceRequirements
   */
  @javax.annotation.Nullable
  public List getResourceRequirements() {
    return resourceRequirements;
  }

  public void setResourceRequirements(List resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
  }


  public ContainerDefinition firelensConfiguration(ContainerDefinitionFirelensConfiguration firelensConfiguration) {
    this.firelensConfiguration = firelensConfiguration;
    return this;
  }

  /**
   * Get firelensConfiguration
   * @return firelensConfiguration
   */
  @javax.annotation.Nullable
  public ContainerDefinitionFirelensConfiguration getFirelensConfiguration() {
    return firelensConfiguration;
  }

  public void setFirelensConfiguration(ContainerDefinitionFirelensConfiguration firelensConfiguration) {
    this.firelensConfiguration = firelensConfiguration;
  }


  public ContainerDefinition credentialSpecs(List credentialSpecs) {
    this.credentialSpecs = credentialSpecs;
    return this;
  }

  /**
   * Get credentialSpecs
   * @return credentialSpecs
   */
  @javax.annotation.Nullable
  public List getCredentialSpecs() {
    return credentialSpecs;
  }

  public void setCredentialSpecs(List credentialSpecs) {
    this.credentialSpecs = credentialSpecs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerDefinition containerDefinition = (ContainerDefinition) o;
    return Objects.equals(this.name, containerDefinition.name) &&
        Objects.equals(this.image, containerDefinition.image) &&
        Objects.equals(this.repositoryCredentials, containerDefinition.repositoryCredentials) &&
        Objects.equals(this.cpu, containerDefinition.cpu) &&
        Objects.equals(this.memory, containerDefinition.memory) &&
        Objects.equals(this.memoryReservation, containerDefinition.memoryReservation) &&
        Objects.equals(this.links, containerDefinition.links) &&
        Objects.equals(this.portMappings, containerDefinition.portMappings) &&
        Objects.equals(this.essential, containerDefinition.essential) &&
        Objects.equals(this.entryPoint, containerDefinition.entryPoint) &&
        Objects.equals(this.command, containerDefinition.command) &&
        Objects.equals(this.environment, containerDefinition.environment) &&
        Objects.equals(this.environmentFiles, containerDefinition.environmentFiles) &&
        Objects.equals(this.mountPoints, containerDefinition.mountPoints) &&
        Objects.equals(this.volumesFrom, containerDefinition.volumesFrom) &&
        Objects.equals(this.linuxParameters, containerDefinition.linuxParameters) &&
        Objects.equals(this.secrets, containerDefinition.secrets) &&
        Objects.equals(this.dependsOn, containerDefinition.dependsOn) &&
        Objects.equals(this.startTimeout, containerDefinition.startTimeout) &&
        Objects.equals(this.stopTimeout, containerDefinition.stopTimeout) &&
        Objects.equals(this.hostname, containerDefinition.hostname) &&
        Objects.equals(this.user, containerDefinition.user) &&
        Objects.equals(this.workingDirectory, containerDefinition.workingDirectory) &&
        Objects.equals(this.disableNetworking, containerDefinition.disableNetworking) &&
        Objects.equals(this.privileged, containerDefinition.privileged) &&
        Objects.equals(this.readonlyRootFilesystem, containerDefinition.readonlyRootFilesystem) &&
        Objects.equals(this.dnsServers, containerDefinition.dnsServers) &&
        Objects.equals(this.dnsSearchDomains, containerDefinition.dnsSearchDomains) &&
        Objects.equals(this.extraHosts, containerDefinition.extraHosts) &&
        Objects.equals(this.dockerSecurityOptions, containerDefinition.dockerSecurityOptions) &&
        Objects.equals(this.interactive, containerDefinition.interactive) &&
        Objects.equals(this.pseudoTerminal, containerDefinition.pseudoTerminal) &&
        Objects.equals(this.dockerLabels, containerDefinition.dockerLabels) &&
        Objects.equals(this.ulimits, containerDefinition.ulimits) &&
        Objects.equals(this.logConfiguration, containerDefinition.logConfiguration) &&
        Objects.equals(this.healthCheck, containerDefinition.healthCheck) &&
        Objects.equals(this.systemControls, containerDefinition.systemControls) &&
        Objects.equals(this.resourceRequirements, containerDefinition.resourceRequirements) &&
        Objects.equals(this.firelensConfiguration, containerDefinition.firelensConfiguration) &&
        Objects.equals(this.credentialSpecs, containerDefinition.credentialSpecs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, image, repositoryCredentials, cpu, memory, memoryReservation, links, portMappings, essential, entryPoint, command, environment, environmentFiles, mountPoints, volumesFrom, linuxParameters, secrets, dependsOn, startTimeout, stopTimeout, hostname, user, workingDirectory, disableNetworking, privileged, readonlyRootFilesystem, dnsServers, dnsSearchDomains, extraHosts, dockerSecurityOptions, interactive, pseudoTerminal, dockerLabels, ulimits, logConfiguration, healthCheck, systemControls, resourceRequirements, firelensConfiguration, credentialSpecs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerDefinition {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    repositoryCredentials: ").append(toIndentedString(repositoryCredentials)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    memoryReservation: ").append(toIndentedString(memoryReservation)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    portMappings: ").append(toIndentedString(portMappings)).append("\n");
    sb.append("    essential: ").append(toIndentedString(essential)).append("\n");
    sb.append("    entryPoint: ").append(toIndentedString(entryPoint)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    environmentFiles: ").append(toIndentedString(environmentFiles)).append("\n");
    sb.append("    mountPoints: ").append(toIndentedString(mountPoints)).append("\n");
    sb.append("    volumesFrom: ").append(toIndentedString(volumesFrom)).append("\n");
    sb.append("    linuxParameters: ").append(toIndentedString(linuxParameters)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    dependsOn: ").append(toIndentedString(dependsOn)).append("\n");
    sb.append("    startTimeout: ").append(toIndentedString(startTimeout)).append("\n");
    sb.append("    stopTimeout: ").append(toIndentedString(stopTimeout)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    workingDirectory: ").append(toIndentedString(workingDirectory)).append("\n");
    sb.append("    disableNetworking: ").append(toIndentedString(disableNetworking)).append("\n");
    sb.append("    privileged: ").append(toIndentedString(privileged)).append("\n");
    sb.append("    readonlyRootFilesystem: ").append(toIndentedString(readonlyRootFilesystem)).append("\n");
    sb.append("    dnsServers: ").append(toIndentedString(dnsServers)).append("\n");
    sb.append("    dnsSearchDomains: ").append(toIndentedString(dnsSearchDomains)).append("\n");
    sb.append("    extraHosts: ").append(toIndentedString(extraHosts)).append("\n");
    sb.append("    dockerSecurityOptions: ").append(toIndentedString(dockerSecurityOptions)).append("\n");
    sb.append("    interactive: ").append(toIndentedString(interactive)).append("\n");
    sb.append("    pseudoTerminal: ").append(toIndentedString(pseudoTerminal)).append("\n");
    sb.append("    dockerLabels: ").append(toIndentedString(dockerLabels)).append("\n");
    sb.append("    ulimits: ").append(toIndentedString(ulimits)).append("\n");
    sb.append("    logConfiguration: ").append(toIndentedString(logConfiguration)).append("\n");
    sb.append("    healthCheck: ").append(toIndentedString(healthCheck)).append("\n");
    sb.append("    systemControls: ").append(toIndentedString(systemControls)).append("\n");
    sb.append("    resourceRequirements: ").append(toIndentedString(resourceRequirements)).append("\n");
    sb.append("    firelensConfiguration: ").append(toIndentedString(firelensConfiguration)).append("\n");
    sb.append("    credentialSpecs: ").append(toIndentedString(credentialSpecs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("image");
    openapiFields.add("repositoryCredentials");
    openapiFields.add("cpu");
    openapiFields.add("memory");
    openapiFields.add("memoryReservation");
    openapiFields.add("links");
    openapiFields.add("portMappings");
    openapiFields.add("essential");
    openapiFields.add("entryPoint");
    openapiFields.add("command");
    openapiFields.add("environment");
    openapiFields.add("environmentFiles");
    openapiFields.add("mountPoints");
    openapiFields.add("volumesFrom");
    openapiFields.add("linuxParameters");
    openapiFields.add("secrets");
    openapiFields.add("dependsOn");
    openapiFields.add("startTimeout");
    openapiFields.add("stopTimeout");
    openapiFields.add("hostname");
    openapiFields.add("user");
    openapiFields.add("workingDirectory");
    openapiFields.add("disableNetworking");
    openapiFields.add("privileged");
    openapiFields.add("readonlyRootFilesystem");
    openapiFields.add("dnsServers");
    openapiFields.add("dnsSearchDomains");
    openapiFields.add("extraHosts");
    openapiFields.add("dockerSecurityOptions");
    openapiFields.add("interactive");
    openapiFields.add("pseudoTerminal");
    openapiFields.add("dockerLabels");
    openapiFields.add("ulimits");
    openapiFields.add("logConfiguration");
    openapiFields.add("healthCheck");
    openapiFields.add("systemControls");
    openapiFields.add("resourceRequirements");
    openapiFields.add("firelensConfiguration");
    openapiFields.add("credentialSpecs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerDefinition is not found in the empty JSON string", ContainerDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `repositoryCredentials`
      if (jsonObj.get("repositoryCredentials") != null && !jsonObj.get("repositoryCredentials").isJsonNull()) {
        ContainerDefinitionRepositoryCredentials.validateJsonElement(jsonObj.get("repositoryCredentials"));
      }
      // validate the optional field `cpu`
      if (jsonObj.get("cpu") != null && !jsonObj.get("cpu").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("cpu"));
      }
      // validate the optional field `memory`
      if (jsonObj.get("memory") != null && !jsonObj.get("memory").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("memory"));
      }
      // validate the optional field `memoryReservation`
      if (jsonObj.get("memoryReservation") != null && !jsonObj.get("memoryReservation").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("memoryReservation"));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("links"));
      }
      // validate the optional field `portMappings`
      if (jsonObj.get("portMappings") != null && !jsonObj.get("portMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("portMappings"));
      }
      // validate the optional field `essential`
      if (jsonObj.get("essential") != null && !jsonObj.get("essential").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("essential"));
      }
      // validate the optional field `entryPoint`
      if (jsonObj.get("entryPoint") != null && !jsonObj.get("entryPoint").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("entryPoint"));
      }
      // validate the optional field `command`
      if (jsonObj.get("command") != null && !jsonObj.get("command").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("command"));
      }
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("environment"));
      }
      // validate the optional field `environmentFiles`
      if (jsonObj.get("environmentFiles") != null && !jsonObj.get("environmentFiles").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("environmentFiles"));
      }
      // validate the optional field `mountPoints`
      if (jsonObj.get("mountPoints") != null && !jsonObj.get("mountPoints").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("mountPoints"));
      }
      // validate the optional field `volumesFrom`
      if (jsonObj.get("volumesFrom") != null && !jsonObj.get("volumesFrom").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("volumesFrom"));
      }
      // validate the optional field `linuxParameters`
      if (jsonObj.get("linuxParameters") != null && !jsonObj.get("linuxParameters").isJsonNull()) {
        ContainerDefinitionLinuxParameters.validateJsonElement(jsonObj.get("linuxParameters"));
      }
      // validate the optional field `secrets`
      if (jsonObj.get("secrets") != null && !jsonObj.get("secrets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("secrets"));
      }
      // validate the optional field `dependsOn`
      if (jsonObj.get("dependsOn") != null && !jsonObj.get("dependsOn").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("dependsOn"));
      }
      // validate the optional field `startTimeout`
      if (jsonObj.get("startTimeout") != null && !jsonObj.get("startTimeout").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("startTimeout"));
      }
      // validate the optional field `stopTimeout`
      if (jsonObj.get("stopTimeout") != null && !jsonObj.get("stopTimeout").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("stopTimeout"));
      }
      // validate the optional field `hostname`
      if (jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("hostname"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("user"));
      }
      // validate the optional field `workingDirectory`
      if (jsonObj.get("workingDirectory") != null && !jsonObj.get("workingDirectory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("workingDirectory"));
      }
      // validate the optional field `disableNetworking`
      if (jsonObj.get("disableNetworking") != null && !jsonObj.get("disableNetworking").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("disableNetworking"));
      }
      // validate the optional field `privileged`
      if (jsonObj.get("privileged") != null && !jsonObj.get("privileged").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("privileged"));
      }
      // validate the optional field `readonlyRootFilesystem`
      if (jsonObj.get("readonlyRootFilesystem") != null && !jsonObj.get("readonlyRootFilesystem").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("readonlyRootFilesystem"));
      }
      // validate the optional field `dnsServers`
      if (jsonObj.get("dnsServers") != null && !jsonObj.get("dnsServers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("dnsServers"));
      }
      // validate the optional field `dnsSearchDomains`
      if (jsonObj.get("dnsSearchDomains") != null && !jsonObj.get("dnsSearchDomains").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("dnsSearchDomains"));
      }
      // validate the optional field `extraHosts`
      if (jsonObj.get("extraHosts") != null && !jsonObj.get("extraHosts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("extraHosts"));
      }
      // validate the optional field `dockerSecurityOptions`
      if (jsonObj.get("dockerSecurityOptions") != null && !jsonObj.get("dockerSecurityOptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("dockerSecurityOptions"));
      }
      // validate the optional field `interactive`
      if (jsonObj.get("interactive") != null && !jsonObj.get("interactive").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("interactive"));
      }
      // validate the optional field `pseudoTerminal`
      if (jsonObj.get("pseudoTerminal") != null && !jsonObj.get("pseudoTerminal").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("pseudoTerminal"));
      }
      // validate the optional field `dockerLabels`
      if (jsonObj.get("dockerLabels") != null && !jsonObj.get("dockerLabels").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("dockerLabels"));
      }
      // validate the optional field `ulimits`
      if (jsonObj.get("ulimits") != null && !jsonObj.get("ulimits").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ulimits"));
      }
      // validate the optional field `logConfiguration`
      if (jsonObj.get("logConfiguration") != null && !jsonObj.get("logConfiguration").isJsonNull()) {
        ContainerDefinitionLogConfiguration.validateJsonElement(jsonObj.get("logConfiguration"));
      }
      // validate the optional field `healthCheck`
      if (jsonObj.get("healthCheck") != null && !jsonObj.get("healthCheck").isJsonNull()) {
        ContainerDefinitionHealthCheck.validateJsonElement(jsonObj.get("healthCheck"));
      }
      // validate the optional field `systemControls`
      if (jsonObj.get("systemControls") != null && !jsonObj.get("systemControls").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("systemControls"));
      }
      // validate the optional field `resourceRequirements`
      if (jsonObj.get("resourceRequirements") != null && !jsonObj.get("resourceRequirements").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("resourceRequirements"));
      }
      // validate the optional field `firelensConfiguration`
      if (jsonObj.get("firelensConfiguration") != null && !jsonObj.get("firelensConfiguration").isJsonNull()) {
        ContainerDefinitionFirelensConfiguration.validateJsonElement(jsonObj.get("firelensConfiguration"));
      }
      // validate the optional field `credentialSpecs`
      if (jsonObj.get("credentialSpecs") != null && !jsonObj.get("credentialSpecs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("credentialSpecs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerDefinition>() {
           @Override
           public void write(JsonWriter out, ContainerDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerDefinition
   * @throws IOException if the JSON string is invalid with respect to ContainerDefinition
   */
  public static ContainerDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerDefinition.class);
  }

  /**
   * Convert an instance of ContainerDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

