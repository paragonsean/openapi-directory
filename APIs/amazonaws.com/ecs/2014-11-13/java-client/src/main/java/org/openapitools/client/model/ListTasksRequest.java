/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DesiredStatus;
import org.openapitools.client.model.LaunchType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListTasksRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListTasksRequest {
  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_CONTAINER_INSTANCE = "containerInstance";
  @SerializedName(SERIALIZED_NAME_CONTAINER_INSTANCE)
  private String containerInstance;

  public static final String SERIALIZED_NAME_FAMILY = "family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private String family;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_STARTED_BY = "startedBy";
  @SerializedName(SERIALIZED_NAME_STARTED_BY)
  private String startedBy;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_DESIRED_STATUS = "desiredStatus";
  @SerializedName(SERIALIZED_NAME_DESIRED_STATUS)
  private DesiredStatus desiredStatus;

  public static final String SERIALIZED_NAME_LAUNCH_TYPE = "launchType";
  @SerializedName(SERIALIZED_NAME_LAUNCH_TYPE)
  private LaunchType launchType;

  public ListTasksRequest() {
  }

  public ListTasksRequest cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * Get cluster
   * @return cluster
   */
  @javax.annotation.Nullable
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public ListTasksRequest containerInstance(String containerInstance) {
    this.containerInstance = containerInstance;
    return this;
  }

  /**
   * Get containerInstance
   * @return containerInstance
   */
  @javax.annotation.Nullable
  public String getContainerInstance() {
    return containerInstance;
  }

  public void setContainerInstance(String containerInstance) {
    this.containerInstance = containerInstance;
  }


  public ListTasksRequest family(String family) {
    this.family = family;
    return this;
  }

  /**
   * Get family
   * @return family
   */
  @javax.annotation.Nullable
  public String getFamily() {
    return family;
  }

  public void setFamily(String family) {
    this.family = family;
  }


  public ListTasksRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListTasksRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListTasksRequest startedBy(String startedBy) {
    this.startedBy = startedBy;
    return this;
  }

  /**
   * Get startedBy
   * @return startedBy
   */
  @javax.annotation.Nullable
  public String getStartedBy() {
    return startedBy;
  }

  public void setStartedBy(String startedBy) {
    this.startedBy = startedBy;
  }


  public ListTasksRequest serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public ListTasksRequest desiredStatus(DesiredStatus desiredStatus) {
    this.desiredStatus = desiredStatus;
    return this;
  }

  /**
   * Get desiredStatus
   * @return desiredStatus
   */
  @javax.annotation.Nullable
  public DesiredStatus getDesiredStatus() {
    return desiredStatus;
  }

  public void setDesiredStatus(DesiredStatus desiredStatus) {
    this.desiredStatus = desiredStatus;
  }


  public ListTasksRequest launchType(LaunchType launchType) {
    this.launchType = launchType;
    return this;
  }

  /**
   * Get launchType
   * @return launchType
   */
  @javax.annotation.Nullable
  public LaunchType getLaunchType() {
    return launchType;
  }

  public void setLaunchType(LaunchType launchType) {
    this.launchType = launchType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListTasksRequest listTasksRequest = (ListTasksRequest) o;
    return Objects.equals(this.cluster, listTasksRequest.cluster) &&
        Objects.equals(this.containerInstance, listTasksRequest.containerInstance) &&
        Objects.equals(this.family, listTasksRequest.family) &&
        Objects.equals(this.nextToken, listTasksRequest.nextToken) &&
        Objects.equals(this.maxResults, listTasksRequest.maxResults) &&
        Objects.equals(this.startedBy, listTasksRequest.startedBy) &&
        Objects.equals(this.serviceName, listTasksRequest.serviceName) &&
        Objects.equals(this.desiredStatus, listTasksRequest.desiredStatus) &&
        Objects.equals(this.launchType, listTasksRequest.launchType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cluster, containerInstance, family, nextToken, maxResults, startedBy, serviceName, desiredStatus, launchType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListTasksRequest {\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    containerInstance: ").append(toIndentedString(containerInstance)).append("\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    startedBy: ").append(toIndentedString(startedBy)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    desiredStatus: ").append(toIndentedString(desiredStatus)).append("\n");
    sb.append("    launchType: ").append(toIndentedString(launchType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cluster");
    openapiFields.add("containerInstance");
    openapiFields.add("family");
    openapiFields.add("nextToken");
    openapiFields.add("maxResults");
    openapiFields.add("startedBy");
    openapiFields.add("serviceName");
    openapiFields.add("desiredStatus");
    openapiFields.add("launchType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListTasksRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListTasksRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListTasksRequest is not found in the empty JSON string", ListTasksRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListTasksRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListTasksRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cluster`
      if (jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cluster"));
      }
      // validate the optional field `containerInstance`
      if (jsonObj.get("containerInstance") != null && !jsonObj.get("containerInstance").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("containerInstance"));
      }
      // validate the optional field `family`
      if (jsonObj.get("family") != null && !jsonObj.get("family").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("family"));
      }
      // validate the optional field `nextToken`
      if (jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("nextToken"));
      }
      // validate the optional field `maxResults`
      if (jsonObj.get("maxResults") != null && !jsonObj.get("maxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxResults"));
      }
      // validate the optional field `startedBy`
      if (jsonObj.get("startedBy") != null && !jsonObj.get("startedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("startedBy"));
      }
      // validate the optional field `serviceName`
      if (jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("serviceName"));
      }
      // validate the optional field `desiredStatus`
      if (jsonObj.get("desiredStatus") != null && !jsonObj.get("desiredStatus").isJsonNull()) {
        DesiredStatus.validateJsonElement(jsonObj.get("desiredStatus"));
      }
      // validate the optional field `launchType`
      if (jsonObj.get("launchType") != null && !jsonObj.get("launchType").isJsonNull()) {
        LaunchType.validateJsonElement(jsonObj.get("launchType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListTasksRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListTasksRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListTasksRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListTasksRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListTasksRequest>() {
           @Override
           public void write(JsonWriter out, ListTasksRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListTasksRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListTasksRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListTasksRequest
   * @throws IOException if the JSON string is invalid with respect to ListTasksRequest
   */
  public static ListTasksRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTasksRequest.class);
  }

  /**
   * Convert an instance of ListTasksRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

