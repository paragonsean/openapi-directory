/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateServiceRequestDeploymentConfiguration;
import org.openapitools.client.model.CreateServiceRequestServiceConnectConfiguration;
import org.openapitools.client.model.PropagateTags;
import org.openapitools.client.model.UpdateServiceRequestNetworkConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateServiceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateServiceRequest {
  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_DESIRED_COUNT = "desiredCount";
  @SerializedName(SERIALIZED_NAME_DESIRED_COUNT)
  private Integer desiredCount;

  public static final String SERIALIZED_NAME_TASK_DEFINITION = "taskDefinition";
  @SerializedName(SERIALIZED_NAME_TASK_DEFINITION)
  private String taskDefinition;

  public static final String SERIALIZED_NAME_CAPACITY_PROVIDER_STRATEGY = "capacityProviderStrategy";
  @SerializedName(SERIALIZED_NAME_CAPACITY_PROVIDER_STRATEGY)
  private List capacityProviderStrategy;

  public static final String SERIALIZED_NAME_DEPLOYMENT_CONFIGURATION = "deploymentConfiguration";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_CONFIGURATION)
  private CreateServiceRequestDeploymentConfiguration deploymentConfiguration;

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATION = "networkConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATION)
  private UpdateServiceRequestNetworkConfiguration networkConfiguration;

  public static final String SERIALIZED_NAME_PLACEMENT_CONSTRAINTS = "placementConstraints";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_CONSTRAINTS)
  private List placementConstraints;

  public static final String SERIALIZED_NAME_PLACEMENT_STRATEGY = "placementStrategy";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_STRATEGY)
  private List placementStrategy;

  public static final String SERIALIZED_NAME_PLATFORM_VERSION = "platformVersion";
  @SerializedName(SERIALIZED_NAME_PLATFORM_VERSION)
  private String platformVersion;

  public static final String SERIALIZED_NAME_FORCE_NEW_DEPLOYMENT = "forceNewDeployment";
  @SerializedName(SERIALIZED_NAME_FORCE_NEW_DEPLOYMENT)
  private Boolean forceNewDeployment;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_GRACE_PERIOD_SECONDS = "healthCheckGracePeriodSeconds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_GRACE_PERIOD_SECONDS)
  private Integer healthCheckGracePeriodSeconds;

  public static final String SERIALIZED_NAME_ENABLE_EXECUTE_COMMAND = "enableExecuteCommand";
  @SerializedName(SERIALIZED_NAME_ENABLE_EXECUTE_COMMAND)
  private Boolean enableExecuteCommand;

  public static final String SERIALIZED_NAME_ENABLE_E_C_S_MANAGED_TAGS = "enableECSManagedTags";
  @SerializedName(SERIALIZED_NAME_ENABLE_E_C_S_MANAGED_TAGS)
  private Boolean enableECSManagedTags;

  public static final String SERIALIZED_NAME_LOAD_BALANCERS = "loadBalancers";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCERS)
  private List loadBalancers;

  public static final String SERIALIZED_NAME_PROPAGATE_TAGS = "propagateTags";
  @SerializedName(SERIALIZED_NAME_PROPAGATE_TAGS)
  private PropagateTags propagateTags;

  public static final String SERIALIZED_NAME_SERVICE_REGISTRIES = "serviceRegistries";
  @SerializedName(SERIALIZED_NAME_SERVICE_REGISTRIES)
  private List serviceRegistries;

  public static final String SERIALIZED_NAME_SERVICE_CONNECT_CONFIGURATION = "serviceConnectConfiguration";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONNECT_CONFIGURATION)
  private CreateServiceRequestServiceConnectConfiguration serviceConnectConfiguration;

  public UpdateServiceRequest() {
  }

  public UpdateServiceRequest cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * Get cluster
   * @return cluster
   */
  @javax.annotation.Nullable
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public UpdateServiceRequest service(String service) {
    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nonnull
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public UpdateServiceRequest desiredCount(Integer desiredCount) {
    this.desiredCount = desiredCount;
    return this;
  }

  /**
   * Get desiredCount
   * @return desiredCount
   */
  @javax.annotation.Nullable
  public Integer getDesiredCount() {
    return desiredCount;
  }

  public void setDesiredCount(Integer desiredCount) {
    this.desiredCount = desiredCount;
  }


  public UpdateServiceRequest taskDefinition(String taskDefinition) {
    this.taskDefinition = taskDefinition;
    return this;
  }

  /**
   * Get taskDefinition
   * @return taskDefinition
   */
  @javax.annotation.Nullable
  public String getTaskDefinition() {
    return taskDefinition;
  }

  public void setTaskDefinition(String taskDefinition) {
    this.taskDefinition = taskDefinition;
  }


  public UpdateServiceRequest capacityProviderStrategy(List capacityProviderStrategy) {
    this.capacityProviderStrategy = capacityProviderStrategy;
    return this;
  }

  /**
   * Get capacityProviderStrategy
   * @return capacityProviderStrategy
   */
  @javax.annotation.Nullable
  public List getCapacityProviderStrategy() {
    return capacityProviderStrategy;
  }

  public void setCapacityProviderStrategy(List capacityProviderStrategy) {
    this.capacityProviderStrategy = capacityProviderStrategy;
  }


  public UpdateServiceRequest deploymentConfiguration(CreateServiceRequestDeploymentConfiguration deploymentConfiguration) {
    this.deploymentConfiguration = deploymentConfiguration;
    return this;
  }

  /**
   * Get deploymentConfiguration
   * @return deploymentConfiguration
   */
  @javax.annotation.Nullable
  public CreateServiceRequestDeploymentConfiguration getDeploymentConfiguration() {
    return deploymentConfiguration;
  }

  public void setDeploymentConfiguration(CreateServiceRequestDeploymentConfiguration deploymentConfiguration) {
    this.deploymentConfiguration = deploymentConfiguration;
  }


  public UpdateServiceRequest networkConfiguration(UpdateServiceRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
    return this;
  }

  /**
   * Get networkConfiguration
   * @return networkConfiguration
   */
  @javax.annotation.Nullable
  public UpdateServiceRequestNetworkConfiguration getNetworkConfiguration() {
    return networkConfiguration;
  }

  public void setNetworkConfiguration(UpdateServiceRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
  }


  public UpdateServiceRequest placementConstraints(List placementConstraints) {
    this.placementConstraints = placementConstraints;
    return this;
  }

  /**
   * Get placementConstraints
   * @return placementConstraints
   */
  @javax.annotation.Nullable
  public List getPlacementConstraints() {
    return placementConstraints;
  }

  public void setPlacementConstraints(List placementConstraints) {
    this.placementConstraints = placementConstraints;
  }


  public UpdateServiceRequest placementStrategy(List placementStrategy) {
    this.placementStrategy = placementStrategy;
    return this;
  }

  /**
   * Get placementStrategy
   * @return placementStrategy
   */
  @javax.annotation.Nullable
  public List getPlacementStrategy() {
    return placementStrategy;
  }

  public void setPlacementStrategy(List placementStrategy) {
    this.placementStrategy = placementStrategy;
  }


  public UpdateServiceRequest platformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
    return this;
  }

  /**
   * Get platformVersion
   * @return platformVersion
   */
  @javax.annotation.Nullable
  public String getPlatformVersion() {
    return platformVersion;
  }

  public void setPlatformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
  }


  public UpdateServiceRequest forceNewDeployment(Boolean forceNewDeployment) {
    this.forceNewDeployment = forceNewDeployment;
    return this;
  }

  /**
   * Get forceNewDeployment
   * @return forceNewDeployment
   */
  @javax.annotation.Nullable
  public Boolean getForceNewDeployment() {
    return forceNewDeployment;
  }

  public void setForceNewDeployment(Boolean forceNewDeployment) {
    this.forceNewDeployment = forceNewDeployment;
  }


  public UpdateServiceRequest healthCheckGracePeriodSeconds(Integer healthCheckGracePeriodSeconds) {
    this.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds;
    return this;
  }

  /**
   * Get healthCheckGracePeriodSeconds
   * @return healthCheckGracePeriodSeconds
   */
  @javax.annotation.Nullable
  public Integer getHealthCheckGracePeriodSeconds() {
    return healthCheckGracePeriodSeconds;
  }

  public void setHealthCheckGracePeriodSeconds(Integer healthCheckGracePeriodSeconds) {
    this.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds;
  }


  public UpdateServiceRequest enableExecuteCommand(Boolean enableExecuteCommand) {
    this.enableExecuteCommand = enableExecuteCommand;
    return this;
  }

  /**
   * Get enableExecuteCommand
   * @return enableExecuteCommand
   */
  @javax.annotation.Nullable
  public Boolean getEnableExecuteCommand() {
    return enableExecuteCommand;
  }

  public void setEnableExecuteCommand(Boolean enableExecuteCommand) {
    this.enableExecuteCommand = enableExecuteCommand;
  }


  public UpdateServiceRequest enableECSManagedTags(Boolean enableECSManagedTags) {
    this.enableECSManagedTags = enableECSManagedTags;
    return this;
  }

  /**
   * Get enableECSManagedTags
   * @return enableECSManagedTags
   */
  @javax.annotation.Nullable
  public Boolean getEnableECSManagedTags() {
    return enableECSManagedTags;
  }

  public void setEnableECSManagedTags(Boolean enableECSManagedTags) {
    this.enableECSManagedTags = enableECSManagedTags;
  }


  public UpdateServiceRequest loadBalancers(List loadBalancers) {
    this.loadBalancers = loadBalancers;
    return this;
  }

  /**
   * Get loadBalancers
   * @return loadBalancers
   */
  @javax.annotation.Nullable
  public List getLoadBalancers() {
    return loadBalancers;
  }

  public void setLoadBalancers(List loadBalancers) {
    this.loadBalancers = loadBalancers;
  }


  public UpdateServiceRequest propagateTags(PropagateTags propagateTags) {
    this.propagateTags = propagateTags;
    return this;
  }

  /**
   * Get propagateTags
   * @return propagateTags
   */
  @javax.annotation.Nullable
  public PropagateTags getPropagateTags() {
    return propagateTags;
  }

  public void setPropagateTags(PropagateTags propagateTags) {
    this.propagateTags = propagateTags;
  }


  public UpdateServiceRequest serviceRegistries(List serviceRegistries) {
    this.serviceRegistries = serviceRegistries;
    return this;
  }

  /**
   * Get serviceRegistries
   * @return serviceRegistries
   */
  @javax.annotation.Nullable
  public List getServiceRegistries() {
    return serviceRegistries;
  }

  public void setServiceRegistries(List serviceRegistries) {
    this.serviceRegistries = serviceRegistries;
  }


  public UpdateServiceRequest serviceConnectConfiguration(CreateServiceRequestServiceConnectConfiguration serviceConnectConfiguration) {
    this.serviceConnectConfiguration = serviceConnectConfiguration;
    return this;
  }

  /**
   * Get serviceConnectConfiguration
   * @return serviceConnectConfiguration
   */
  @javax.annotation.Nullable
  public CreateServiceRequestServiceConnectConfiguration getServiceConnectConfiguration() {
    return serviceConnectConfiguration;
  }

  public void setServiceConnectConfiguration(CreateServiceRequestServiceConnectConfiguration serviceConnectConfiguration) {
    this.serviceConnectConfiguration = serviceConnectConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateServiceRequest updateServiceRequest = (UpdateServiceRequest) o;
    return Objects.equals(this.cluster, updateServiceRequest.cluster) &&
        Objects.equals(this.service, updateServiceRequest.service) &&
        Objects.equals(this.desiredCount, updateServiceRequest.desiredCount) &&
        Objects.equals(this.taskDefinition, updateServiceRequest.taskDefinition) &&
        Objects.equals(this.capacityProviderStrategy, updateServiceRequest.capacityProviderStrategy) &&
        Objects.equals(this.deploymentConfiguration, updateServiceRequest.deploymentConfiguration) &&
        Objects.equals(this.networkConfiguration, updateServiceRequest.networkConfiguration) &&
        Objects.equals(this.placementConstraints, updateServiceRequest.placementConstraints) &&
        Objects.equals(this.placementStrategy, updateServiceRequest.placementStrategy) &&
        Objects.equals(this.platformVersion, updateServiceRequest.platformVersion) &&
        Objects.equals(this.forceNewDeployment, updateServiceRequest.forceNewDeployment) &&
        Objects.equals(this.healthCheckGracePeriodSeconds, updateServiceRequest.healthCheckGracePeriodSeconds) &&
        Objects.equals(this.enableExecuteCommand, updateServiceRequest.enableExecuteCommand) &&
        Objects.equals(this.enableECSManagedTags, updateServiceRequest.enableECSManagedTags) &&
        Objects.equals(this.loadBalancers, updateServiceRequest.loadBalancers) &&
        Objects.equals(this.propagateTags, updateServiceRequest.propagateTags) &&
        Objects.equals(this.serviceRegistries, updateServiceRequest.serviceRegistries) &&
        Objects.equals(this.serviceConnectConfiguration, updateServiceRequest.serviceConnectConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cluster, service, desiredCount, taskDefinition, capacityProviderStrategy, deploymentConfiguration, networkConfiguration, placementConstraints, placementStrategy, platformVersion, forceNewDeployment, healthCheckGracePeriodSeconds, enableExecuteCommand, enableECSManagedTags, loadBalancers, propagateTags, serviceRegistries, serviceConnectConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateServiceRequest {\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    desiredCount: ").append(toIndentedString(desiredCount)).append("\n");
    sb.append("    taskDefinition: ").append(toIndentedString(taskDefinition)).append("\n");
    sb.append("    capacityProviderStrategy: ").append(toIndentedString(capacityProviderStrategy)).append("\n");
    sb.append("    deploymentConfiguration: ").append(toIndentedString(deploymentConfiguration)).append("\n");
    sb.append("    networkConfiguration: ").append(toIndentedString(networkConfiguration)).append("\n");
    sb.append("    placementConstraints: ").append(toIndentedString(placementConstraints)).append("\n");
    sb.append("    placementStrategy: ").append(toIndentedString(placementStrategy)).append("\n");
    sb.append("    platformVersion: ").append(toIndentedString(platformVersion)).append("\n");
    sb.append("    forceNewDeployment: ").append(toIndentedString(forceNewDeployment)).append("\n");
    sb.append("    healthCheckGracePeriodSeconds: ").append(toIndentedString(healthCheckGracePeriodSeconds)).append("\n");
    sb.append("    enableExecuteCommand: ").append(toIndentedString(enableExecuteCommand)).append("\n");
    sb.append("    enableECSManagedTags: ").append(toIndentedString(enableECSManagedTags)).append("\n");
    sb.append("    loadBalancers: ").append(toIndentedString(loadBalancers)).append("\n");
    sb.append("    propagateTags: ").append(toIndentedString(propagateTags)).append("\n");
    sb.append("    serviceRegistries: ").append(toIndentedString(serviceRegistries)).append("\n");
    sb.append("    serviceConnectConfiguration: ").append(toIndentedString(serviceConnectConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cluster");
    openapiFields.add("service");
    openapiFields.add("desiredCount");
    openapiFields.add("taskDefinition");
    openapiFields.add("capacityProviderStrategy");
    openapiFields.add("deploymentConfiguration");
    openapiFields.add("networkConfiguration");
    openapiFields.add("placementConstraints");
    openapiFields.add("placementStrategy");
    openapiFields.add("platformVersion");
    openapiFields.add("forceNewDeployment");
    openapiFields.add("healthCheckGracePeriodSeconds");
    openapiFields.add("enableExecuteCommand");
    openapiFields.add("enableECSManagedTags");
    openapiFields.add("loadBalancers");
    openapiFields.add("propagateTags");
    openapiFields.add("serviceRegistries");
    openapiFields.add("serviceConnectConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("service");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateServiceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateServiceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateServiceRequest is not found in the empty JSON string", UpdateServiceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateServiceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateServiceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateServiceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cluster`
      if (jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cluster"));
      }
      // validate the required field `service`
      String.validateJsonElement(jsonObj.get("service"));
      // validate the optional field `desiredCount`
      if (jsonObj.get("desiredCount") != null && !jsonObj.get("desiredCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("desiredCount"));
      }
      // validate the optional field `taskDefinition`
      if (jsonObj.get("taskDefinition") != null && !jsonObj.get("taskDefinition").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("taskDefinition"));
      }
      // validate the optional field `capacityProviderStrategy`
      if (jsonObj.get("capacityProviderStrategy") != null && !jsonObj.get("capacityProviderStrategy").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("capacityProviderStrategy"));
      }
      // validate the optional field `deploymentConfiguration`
      if (jsonObj.get("deploymentConfiguration") != null && !jsonObj.get("deploymentConfiguration").isJsonNull()) {
        CreateServiceRequestDeploymentConfiguration.validateJsonElement(jsonObj.get("deploymentConfiguration"));
      }
      // validate the optional field `networkConfiguration`
      if (jsonObj.get("networkConfiguration") != null && !jsonObj.get("networkConfiguration").isJsonNull()) {
        UpdateServiceRequestNetworkConfiguration.validateJsonElement(jsonObj.get("networkConfiguration"));
      }
      // validate the optional field `placementConstraints`
      if (jsonObj.get("placementConstraints") != null && !jsonObj.get("placementConstraints").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("placementConstraints"));
      }
      // validate the optional field `placementStrategy`
      if (jsonObj.get("placementStrategy") != null && !jsonObj.get("placementStrategy").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("placementStrategy"));
      }
      // validate the optional field `platformVersion`
      if (jsonObj.get("platformVersion") != null && !jsonObj.get("platformVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("platformVersion"));
      }
      // validate the optional field `forceNewDeployment`
      if (jsonObj.get("forceNewDeployment") != null && !jsonObj.get("forceNewDeployment").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("forceNewDeployment"));
      }
      // validate the optional field `healthCheckGracePeriodSeconds`
      if (jsonObj.get("healthCheckGracePeriodSeconds") != null && !jsonObj.get("healthCheckGracePeriodSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("healthCheckGracePeriodSeconds"));
      }
      // validate the optional field `enableExecuteCommand`
      if (jsonObj.get("enableExecuteCommand") != null && !jsonObj.get("enableExecuteCommand").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("enableExecuteCommand"));
      }
      // validate the optional field `enableECSManagedTags`
      if (jsonObj.get("enableECSManagedTags") != null && !jsonObj.get("enableECSManagedTags").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("enableECSManagedTags"));
      }
      // validate the optional field `loadBalancers`
      if (jsonObj.get("loadBalancers") != null && !jsonObj.get("loadBalancers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("loadBalancers"));
      }
      // validate the optional field `propagateTags`
      if (jsonObj.get("propagateTags") != null && !jsonObj.get("propagateTags").isJsonNull()) {
        PropagateTags.validateJsonElement(jsonObj.get("propagateTags"));
      }
      // validate the optional field `serviceRegistries`
      if (jsonObj.get("serviceRegistries") != null && !jsonObj.get("serviceRegistries").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("serviceRegistries"));
      }
      // validate the optional field `serviceConnectConfiguration`
      if (jsonObj.get("serviceConnectConfiguration") != null && !jsonObj.get("serviceConnectConfiguration").isJsonNull()) {
        CreateServiceRequestServiceConnectConfiguration.validateJsonElement(jsonObj.get("serviceConnectConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateServiceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateServiceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateServiceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateServiceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateServiceRequest>() {
           @Override
           public void write(JsonWriter out, UpdateServiceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateServiceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateServiceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateServiceRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateServiceRequest
   */
  public static UpdateServiceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateServiceRequest.class);
  }

  /**
   * Convert an instance of UpdateServiceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

