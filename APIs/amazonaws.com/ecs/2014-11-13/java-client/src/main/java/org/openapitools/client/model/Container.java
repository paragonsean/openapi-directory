/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HealthStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Docker container that&#39;s part of a task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Container {
  public static final String SERIALIZED_NAME_CONTAINER_ARN = "containerArn";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ARN)
  private String containerArn;

  public static final String SERIALIZED_NAME_TASK_ARN = "taskArn";
  @SerializedName(SERIALIZED_NAME_TASK_ARN)
  private String taskArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_IMAGE_DIGEST = "imageDigest";
  @SerializedName(SERIALIZED_NAME_IMAGE_DIGEST)
  private String imageDigest;

  public static final String SERIALIZED_NAME_RUNTIME_ID = "runtimeId";
  @SerializedName(SERIALIZED_NAME_RUNTIME_ID)
  private String runtimeId;

  public static final String SERIALIZED_NAME_LAST_STATUS = "lastStatus";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS)
  private String lastStatus;

  public static final String SERIALIZED_NAME_EXIT_CODE = "exitCode";
  @SerializedName(SERIALIZED_NAME_EXIT_CODE)
  private Integer exitCode;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_NETWORK_BINDINGS = "networkBindings";
  @SerializedName(SERIALIZED_NAME_NETWORK_BINDINGS)
  private List networkBindings;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACES = "networkInterfaces";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACES)
  private List networkInterfaces;

  public static final String SERIALIZED_NAME_HEALTH_STATUS = "healthStatus";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATUS)
  private HealthStatus healthStatus;

  public static final String SERIALIZED_NAME_MANAGED_AGENTS = "managedAgents";
  @SerializedName(SERIALIZED_NAME_MANAGED_AGENTS)
  private List managedAgents;

  public static final String SERIALIZED_NAME_CPU = "cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private String cpu;

  public static final String SERIALIZED_NAME_MEMORY = "memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private String memory;

  public static final String SERIALIZED_NAME_MEMORY_RESERVATION = "memoryReservation";
  @SerializedName(SERIALIZED_NAME_MEMORY_RESERVATION)
  private String memoryReservation;

  public static final String SERIALIZED_NAME_GPU_IDS = "gpuIds";
  @SerializedName(SERIALIZED_NAME_GPU_IDS)
  private List gpuIds;

  public Container() {
  }

  public Container containerArn(String containerArn) {
    this.containerArn = containerArn;
    return this;
  }

  /**
   * Get containerArn
   * @return containerArn
   */
  @javax.annotation.Nullable
  public String getContainerArn() {
    return containerArn;
  }

  public void setContainerArn(String containerArn) {
    this.containerArn = containerArn;
  }


  public Container taskArn(String taskArn) {
    this.taskArn = taskArn;
    return this;
  }

  /**
   * Get taskArn
   * @return taskArn
   */
  @javax.annotation.Nullable
  public String getTaskArn() {
    return taskArn;
  }

  public void setTaskArn(String taskArn) {
    this.taskArn = taskArn;
  }


  public Container name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Container image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public Container imageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * Get imageDigest
   * @return imageDigest
   */
  @javax.annotation.Nullable
  public String getImageDigest() {
    return imageDigest;
  }

  public void setImageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
  }


  public Container runtimeId(String runtimeId) {
    this.runtimeId = runtimeId;
    return this;
  }

  /**
   * Get runtimeId
   * @return runtimeId
   */
  @javax.annotation.Nullable
  public String getRuntimeId() {
    return runtimeId;
  }

  public void setRuntimeId(String runtimeId) {
    this.runtimeId = runtimeId;
  }


  public Container lastStatus(String lastStatus) {
    this.lastStatus = lastStatus;
    return this;
  }

  /**
   * Get lastStatus
   * @return lastStatus
   */
  @javax.annotation.Nullable
  public String getLastStatus() {
    return lastStatus;
  }

  public void setLastStatus(String lastStatus) {
    this.lastStatus = lastStatus;
  }


  public Container exitCode(Integer exitCode) {
    this.exitCode = exitCode;
    return this;
  }

  /**
   * Get exitCode
   * @return exitCode
   */
  @javax.annotation.Nullable
  public Integer getExitCode() {
    return exitCode;
  }

  public void setExitCode(Integer exitCode) {
    this.exitCode = exitCode;
  }


  public Container reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public Container networkBindings(List networkBindings) {
    this.networkBindings = networkBindings;
    return this;
  }

  /**
   * Get networkBindings
   * @return networkBindings
   */
  @javax.annotation.Nullable
  public List getNetworkBindings() {
    return networkBindings;
  }

  public void setNetworkBindings(List networkBindings) {
    this.networkBindings = networkBindings;
  }


  public Container networkInterfaces(List networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
    return this;
  }

  /**
   * Get networkInterfaces
   * @return networkInterfaces
   */
  @javax.annotation.Nullable
  public List getNetworkInterfaces() {
    return networkInterfaces;
  }

  public void setNetworkInterfaces(List networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
  }


  public Container healthStatus(HealthStatus healthStatus) {
    this.healthStatus = healthStatus;
    return this;
  }

  /**
   * Get healthStatus
   * @return healthStatus
   */
  @javax.annotation.Nullable
  public HealthStatus getHealthStatus() {
    return healthStatus;
  }

  public void setHealthStatus(HealthStatus healthStatus) {
    this.healthStatus = healthStatus;
  }


  public Container managedAgents(List managedAgents) {
    this.managedAgents = managedAgents;
    return this;
  }

  /**
   * Get managedAgents
   * @return managedAgents
   */
  @javax.annotation.Nullable
  public List getManagedAgents() {
    return managedAgents;
  }

  public void setManagedAgents(List managedAgents) {
    this.managedAgents = managedAgents;
  }


  public Container cpu(String cpu) {
    this.cpu = cpu;
    return this;
  }

  /**
   * Get cpu
   * @return cpu
   */
  @javax.annotation.Nullable
  public String getCpu() {
    return cpu;
  }

  public void setCpu(String cpu) {
    this.cpu = cpu;
  }


  public Container memory(String memory) {
    this.memory = memory;
    return this;
  }

  /**
   * Get memory
   * @return memory
   */
  @javax.annotation.Nullable
  public String getMemory() {
    return memory;
  }

  public void setMemory(String memory) {
    this.memory = memory;
  }


  public Container memoryReservation(String memoryReservation) {
    this.memoryReservation = memoryReservation;
    return this;
  }

  /**
   * Get memoryReservation
   * @return memoryReservation
   */
  @javax.annotation.Nullable
  public String getMemoryReservation() {
    return memoryReservation;
  }

  public void setMemoryReservation(String memoryReservation) {
    this.memoryReservation = memoryReservation;
  }


  public Container gpuIds(List gpuIds) {
    this.gpuIds = gpuIds;
    return this;
  }

  /**
   * Get gpuIds
   * @return gpuIds
   */
  @javax.annotation.Nullable
  public List getGpuIds() {
    return gpuIds;
  }

  public void setGpuIds(List gpuIds) {
    this.gpuIds = gpuIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Container container = (Container) o;
    return Objects.equals(this.containerArn, container.containerArn) &&
        Objects.equals(this.taskArn, container.taskArn) &&
        Objects.equals(this.name, container.name) &&
        Objects.equals(this.image, container.image) &&
        Objects.equals(this.imageDigest, container.imageDigest) &&
        Objects.equals(this.runtimeId, container.runtimeId) &&
        Objects.equals(this.lastStatus, container.lastStatus) &&
        Objects.equals(this.exitCode, container.exitCode) &&
        Objects.equals(this.reason, container.reason) &&
        Objects.equals(this.networkBindings, container.networkBindings) &&
        Objects.equals(this.networkInterfaces, container.networkInterfaces) &&
        Objects.equals(this.healthStatus, container.healthStatus) &&
        Objects.equals(this.managedAgents, container.managedAgents) &&
        Objects.equals(this.cpu, container.cpu) &&
        Objects.equals(this.memory, container.memory) &&
        Objects.equals(this.memoryReservation, container.memoryReservation) &&
        Objects.equals(this.gpuIds, container.gpuIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerArn, taskArn, name, image, imageDigest, runtimeId, lastStatus, exitCode, reason, networkBindings, networkInterfaces, healthStatus, managedAgents, cpu, memory, memoryReservation, gpuIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Container {\n");
    sb.append("    containerArn: ").append(toIndentedString(containerArn)).append("\n");
    sb.append("    taskArn: ").append(toIndentedString(taskArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageDigest: ").append(toIndentedString(imageDigest)).append("\n");
    sb.append("    runtimeId: ").append(toIndentedString(runtimeId)).append("\n");
    sb.append("    lastStatus: ").append(toIndentedString(lastStatus)).append("\n");
    sb.append("    exitCode: ").append(toIndentedString(exitCode)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    networkBindings: ").append(toIndentedString(networkBindings)).append("\n");
    sb.append("    networkInterfaces: ").append(toIndentedString(networkInterfaces)).append("\n");
    sb.append("    healthStatus: ").append(toIndentedString(healthStatus)).append("\n");
    sb.append("    managedAgents: ").append(toIndentedString(managedAgents)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    memoryReservation: ").append(toIndentedString(memoryReservation)).append("\n");
    sb.append("    gpuIds: ").append(toIndentedString(gpuIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerArn");
    openapiFields.add("taskArn");
    openapiFields.add("name");
    openapiFields.add("image");
    openapiFields.add("imageDigest");
    openapiFields.add("runtimeId");
    openapiFields.add("lastStatus");
    openapiFields.add("exitCode");
    openapiFields.add("reason");
    openapiFields.add("networkBindings");
    openapiFields.add("networkInterfaces");
    openapiFields.add("healthStatus");
    openapiFields.add("managedAgents");
    openapiFields.add("cpu");
    openapiFields.add("memory");
    openapiFields.add("memoryReservation");
    openapiFields.add("gpuIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Container
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Container.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Container is not found in the empty JSON string", Container.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Container.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Container` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containerArn`
      if (jsonObj.get("containerArn") != null && !jsonObj.get("containerArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("containerArn"));
      }
      // validate the optional field `taskArn`
      if (jsonObj.get("taskArn") != null && !jsonObj.get("taskArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("taskArn"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `imageDigest`
      if (jsonObj.get("imageDigest") != null && !jsonObj.get("imageDigest").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageDigest"));
      }
      // validate the optional field `runtimeId`
      if (jsonObj.get("runtimeId") != null && !jsonObj.get("runtimeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("runtimeId"));
      }
      // validate the optional field `lastStatus`
      if (jsonObj.get("lastStatus") != null && !jsonObj.get("lastStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lastStatus"));
      }
      // validate the optional field `exitCode`
      if (jsonObj.get("exitCode") != null && !jsonObj.get("exitCode").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("exitCode"));
      }
      // validate the optional field `reason`
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("reason"));
      }
      // validate the optional field `networkBindings`
      if (jsonObj.get("networkBindings") != null && !jsonObj.get("networkBindings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("networkBindings"));
      }
      // validate the optional field `networkInterfaces`
      if (jsonObj.get("networkInterfaces") != null && !jsonObj.get("networkInterfaces").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("networkInterfaces"));
      }
      // validate the optional field `healthStatus`
      if (jsonObj.get("healthStatus") != null && !jsonObj.get("healthStatus").isJsonNull()) {
        HealthStatus.validateJsonElement(jsonObj.get("healthStatus"));
      }
      // validate the optional field `managedAgents`
      if (jsonObj.get("managedAgents") != null && !jsonObj.get("managedAgents").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("managedAgents"));
      }
      // validate the optional field `cpu`
      if (jsonObj.get("cpu") != null && !jsonObj.get("cpu").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cpu"));
      }
      // validate the optional field `memory`
      if (jsonObj.get("memory") != null && !jsonObj.get("memory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("memory"));
      }
      // validate the optional field `memoryReservation`
      if (jsonObj.get("memoryReservation") != null && !jsonObj.get("memoryReservation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("memoryReservation"));
      }
      // validate the optional field `gpuIds`
      if (jsonObj.get("gpuIds") != null && !jsonObj.get("gpuIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("gpuIds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Container.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Container' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Container> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Container.class));

       return (TypeAdapter<T>) new TypeAdapter<Container>() {
           @Override
           public void write(JsonWriter out, Container value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Container read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Container given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Container
   * @throws IOException if the JSON string is invalid with respect to Container
   */
  public static Container fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Container.class);
  }

  /**
   * Convert an instance of Container to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

