/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.LogDriver;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The log configuration for the container. This parameter maps to &lt;code&gt;LogConfig&lt;/code&gt; in the &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate\&quot;&gt;Create a container&lt;/a&gt; section of the &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/api/v1.35/\&quot;&gt;Docker Remote API&lt;/a&gt; and the &lt;code&gt;--log-driver&lt;/code&gt; option to &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/reference/commandline/run/\&quot;&gt; &lt;code&gt;docker run&lt;/code&gt; &lt;/a&gt;.&lt;/p&gt; &lt;p&gt;By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition. For more information about the options for different supported log drivers, see &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/admin/logging/overview/\&quot;&gt;Configure logging drivers&lt;/a&gt; in the Docker documentation.&lt;/p&gt; &lt;p&gt;Understand the following when specifying a log configuration for your containers.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent.&lt;/p&gt; &lt;p&gt;For tasks on Fargate, the supported log drivers are &lt;code&gt;awslogs&lt;/code&gt;, &lt;code&gt;splunk&lt;/code&gt;, and &lt;code&gt;awsfirelens&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For tasks hosted on Amazon EC2 instances, the supported log drivers are &lt;code&gt;awslogs&lt;/code&gt;, &lt;code&gt;fluentd&lt;/code&gt;, &lt;code&gt;gelf&lt;/code&gt;, &lt;code&gt;json-file&lt;/code&gt;, &lt;code&gt;journald&lt;/code&gt;, &lt;code&gt;logentries&lt;/code&gt;,&lt;code&gt;syslog&lt;/code&gt;, &lt;code&gt;splunk&lt;/code&gt;, and &lt;code&gt;awsfirelens&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the &lt;code&gt;ECS_AVAILABLE_LOGGING_DRIVERS&lt;/code&gt; environment variable before containers placed on that instance can use these log configuration options. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html\&quot;&gt;Amazon ECS container agent configuration&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For tasks that are on Fargate, because you don&#39;t have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogConfiguration {
  public static final String SERIALIZED_NAME_LOG_DRIVER = "logDriver";
  @SerializedName(SERIALIZED_NAME_LOG_DRIVER)
  private LogDriver logDriver;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Map options;

  public static final String SERIALIZED_NAME_SECRET_OPTIONS = "secretOptions";
  @SerializedName(SERIALIZED_NAME_SECRET_OPTIONS)
  private List secretOptions;

  public LogConfiguration() {
  }

  public LogConfiguration logDriver(LogDriver logDriver) {
    this.logDriver = logDriver;
    return this;
  }

  /**
   * Get logDriver
   * @return logDriver
   */
  @javax.annotation.Nonnull
  public LogDriver getLogDriver() {
    return logDriver;
  }

  public void setLogDriver(LogDriver logDriver) {
    this.logDriver = logDriver;
  }


  public LogConfiguration options(Map options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public Map getOptions() {
    return options;
  }

  public void setOptions(Map options) {
    this.options = options;
  }


  public LogConfiguration secretOptions(List secretOptions) {
    this.secretOptions = secretOptions;
    return this;
  }

  /**
   * Get secretOptions
   * @return secretOptions
   */
  @javax.annotation.Nullable
  public List getSecretOptions() {
    return secretOptions;
  }

  public void setSecretOptions(List secretOptions) {
    this.secretOptions = secretOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogConfiguration logConfiguration = (LogConfiguration) o;
    return Objects.equals(this.logDriver, logConfiguration.logDriver) &&
        Objects.equals(this.options, logConfiguration.options) &&
        Objects.equals(this.secretOptions, logConfiguration.secretOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logDriver, options, secretOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogConfiguration {\n");
    sb.append("    logDriver: ").append(toIndentedString(logDriver)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    secretOptions: ").append(toIndentedString(secretOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logDriver");
    openapiFields.add("options");
    openapiFields.add("secretOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("logDriver");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogConfiguration is not found in the empty JSON string", LogConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LogConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `logDriver`
      LogDriver.validateJsonElement(jsonObj.get("logDriver"));
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("options"));
      }
      // validate the optional field `secretOptions`
      if (jsonObj.get("secretOptions") != null && !jsonObj.get("secretOptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("secretOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<LogConfiguration>() {
           @Override
           public void write(JsonWriter out, LogConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogConfiguration
   * @throws IOException if the JSON string is invalid with respect to LogConfiguration
   */
  public static LogConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogConfiguration.class);
  }

  /**
   * Convert an instance of LogConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

