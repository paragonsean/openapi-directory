/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateTaskSetRequestNetworkConfiguration;
import org.openapitools.client.model.CreateTaskSetRequestScale;
import org.openapitools.client.model.LaunchType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateTaskSetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateTaskSetRequest {
  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_TASK_DEFINITION = "taskDefinition";
  @SerializedName(SERIALIZED_NAME_TASK_DEFINITION)
  private String taskDefinition;

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATION = "networkConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATION)
  private CreateTaskSetRequestNetworkConfiguration networkConfiguration;

  public static final String SERIALIZED_NAME_LOAD_BALANCERS = "loadBalancers";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCERS)
  private List loadBalancers;

  public static final String SERIALIZED_NAME_SERVICE_REGISTRIES = "serviceRegistries";
  @SerializedName(SERIALIZED_NAME_SERVICE_REGISTRIES)
  private List serviceRegistries;

  public static final String SERIALIZED_NAME_LAUNCH_TYPE = "launchType";
  @SerializedName(SERIALIZED_NAME_LAUNCH_TYPE)
  private LaunchType launchType;

  public static final String SERIALIZED_NAME_CAPACITY_PROVIDER_STRATEGY = "capacityProviderStrategy";
  @SerializedName(SERIALIZED_NAME_CAPACITY_PROVIDER_STRATEGY)
  private List capacityProviderStrategy;

  public static final String SERIALIZED_NAME_PLATFORM_VERSION = "platformVersion";
  @SerializedName(SERIALIZED_NAME_PLATFORM_VERSION)
  private String platformVersion;

  public static final String SERIALIZED_NAME_SCALE = "scale";
  @SerializedName(SERIALIZED_NAME_SCALE)
  private CreateTaskSetRequestScale scale;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public CreateTaskSetRequest() {
  }

  public CreateTaskSetRequest service(String service) {
    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nonnull
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public CreateTaskSetRequest cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * Get cluster
   * @return cluster
   */
  @javax.annotation.Nonnull
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public CreateTaskSetRequest externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public CreateTaskSetRequest taskDefinition(String taskDefinition) {
    this.taskDefinition = taskDefinition;
    return this;
  }

  /**
   * Get taskDefinition
   * @return taskDefinition
   */
  @javax.annotation.Nonnull
  public String getTaskDefinition() {
    return taskDefinition;
  }

  public void setTaskDefinition(String taskDefinition) {
    this.taskDefinition = taskDefinition;
  }


  public CreateTaskSetRequest networkConfiguration(CreateTaskSetRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
    return this;
  }

  /**
   * Get networkConfiguration
   * @return networkConfiguration
   */
  @javax.annotation.Nullable
  public CreateTaskSetRequestNetworkConfiguration getNetworkConfiguration() {
    return networkConfiguration;
  }

  public void setNetworkConfiguration(CreateTaskSetRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
  }


  public CreateTaskSetRequest loadBalancers(List loadBalancers) {
    this.loadBalancers = loadBalancers;
    return this;
  }

  /**
   * Get loadBalancers
   * @return loadBalancers
   */
  @javax.annotation.Nullable
  public List getLoadBalancers() {
    return loadBalancers;
  }

  public void setLoadBalancers(List loadBalancers) {
    this.loadBalancers = loadBalancers;
  }


  public CreateTaskSetRequest serviceRegistries(List serviceRegistries) {
    this.serviceRegistries = serviceRegistries;
    return this;
  }

  /**
   * Get serviceRegistries
   * @return serviceRegistries
   */
  @javax.annotation.Nullable
  public List getServiceRegistries() {
    return serviceRegistries;
  }

  public void setServiceRegistries(List serviceRegistries) {
    this.serviceRegistries = serviceRegistries;
  }


  public CreateTaskSetRequest launchType(LaunchType launchType) {
    this.launchType = launchType;
    return this;
  }

  /**
   * Get launchType
   * @return launchType
   */
  @javax.annotation.Nullable
  public LaunchType getLaunchType() {
    return launchType;
  }

  public void setLaunchType(LaunchType launchType) {
    this.launchType = launchType;
  }


  public CreateTaskSetRequest capacityProviderStrategy(List capacityProviderStrategy) {
    this.capacityProviderStrategy = capacityProviderStrategy;
    return this;
  }

  /**
   * Get capacityProviderStrategy
   * @return capacityProviderStrategy
   */
  @javax.annotation.Nullable
  public List getCapacityProviderStrategy() {
    return capacityProviderStrategy;
  }

  public void setCapacityProviderStrategy(List capacityProviderStrategy) {
    this.capacityProviderStrategy = capacityProviderStrategy;
  }


  public CreateTaskSetRequest platformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
    return this;
  }

  /**
   * Get platformVersion
   * @return platformVersion
   */
  @javax.annotation.Nullable
  public String getPlatformVersion() {
    return platformVersion;
  }

  public void setPlatformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
  }


  public CreateTaskSetRequest scale(CreateTaskSetRequestScale scale) {
    this.scale = scale;
    return this;
  }

  /**
   * Get scale
   * @return scale
   */
  @javax.annotation.Nullable
  public CreateTaskSetRequestScale getScale() {
    return scale;
  }

  public void setScale(CreateTaskSetRequestScale scale) {
    this.scale = scale;
  }


  public CreateTaskSetRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateTaskSetRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTaskSetRequest createTaskSetRequest = (CreateTaskSetRequest) o;
    return Objects.equals(this.service, createTaskSetRequest.service) &&
        Objects.equals(this.cluster, createTaskSetRequest.cluster) &&
        Objects.equals(this.externalId, createTaskSetRequest.externalId) &&
        Objects.equals(this.taskDefinition, createTaskSetRequest.taskDefinition) &&
        Objects.equals(this.networkConfiguration, createTaskSetRequest.networkConfiguration) &&
        Objects.equals(this.loadBalancers, createTaskSetRequest.loadBalancers) &&
        Objects.equals(this.serviceRegistries, createTaskSetRequest.serviceRegistries) &&
        Objects.equals(this.launchType, createTaskSetRequest.launchType) &&
        Objects.equals(this.capacityProviderStrategy, createTaskSetRequest.capacityProviderStrategy) &&
        Objects.equals(this.platformVersion, createTaskSetRequest.platformVersion) &&
        Objects.equals(this.scale, createTaskSetRequest.scale) &&
        Objects.equals(this.clientToken, createTaskSetRequest.clientToken) &&
        Objects.equals(this.tags, createTaskSetRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(service, cluster, externalId, taskDefinition, networkConfiguration, loadBalancers, serviceRegistries, launchType, capacityProviderStrategy, platformVersion, scale, clientToken, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTaskSetRequest {\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    taskDefinition: ").append(toIndentedString(taskDefinition)).append("\n");
    sb.append("    networkConfiguration: ").append(toIndentedString(networkConfiguration)).append("\n");
    sb.append("    loadBalancers: ").append(toIndentedString(loadBalancers)).append("\n");
    sb.append("    serviceRegistries: ").append(toIndentedString(serviceRegistries)).append("\n");
    sb.append("    launchType: ").append(toIndentedString(launchType)).append("\n");
    sb.append("    capacityProviderStrategy: ").append(toIndentedString(capacityProviderStrategy)).append("\n");
    sb.append("    platformVersion: ").append(toIndentedString(platformVersion)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("service");
    openapiFields.add("cluster");
    openapiFields.add("externalId");
    openapiFields.add("taskDefinition");
    openapiFields.add("networkConfiguration");
    openapiFields.add("loadBalancers");
    openapiFields.add("serviceRegistries");
    openapiFields.add("launchType");
    openapiFields.add("capacityProviderStrategy");
    openapiFields.add("platformVersion");
    openapiFields.add("scale");
    openapiFields.add("clientToken");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("service");
    openapiRequiredFields.add("cluster");
    openapiRequiredFields.add("taskDefinition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTaskSetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateTaskSetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTaskSetRequest is not found in the empty JSON string", CreateTaskSetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateTaskSetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateTaskSetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTaskSetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `service`
      String.validateJsonElement(jsonObj.get("service"));
      // validate the required field `cluster`
      String.validateJsonElement(jsonObj.get("cluster"));
      // validate the optional field `externalId`
      if (jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("externalId"));
      }
      // validate the required field `taskDefinition`
      String.validateJsonElement(jsonObj.get("taskDefinition"));
      // validate the optional field `networkConfiguration`
      if (jsonObj.get("networkConfiguration") != null && !jsonObj.get("networkConfiguration").isJsonNull()) {
        CreateTaskSetRequestNetworkConfiguration.validateJsonElement(jsonObj.get("networkConfiguration"));
      }
      // validate the optional field `loadBalancers`
      if (jsonObj.get("loadBalancers") != null && !jsonObj.get("loadBalancers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("loadBalancers"));
      }
      // validate the optional field `serviceRegistries`
      if (jsonObj.get("serviceRegistries") != null && !jsonObj.get("serviceRegistries").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("serviceRegistries"));
      }
      // validate the optional field `launchType`
      if (jsonObj.get("launchType") != null && !jsonObj.get("launchType").isJsonNull()) {
        LaunchType.validateJsonElement(jsonObj.get("launchType"));
      }
      // validate the optional field `capacityProviderStrategy`
      if (jsonObj.get("capacityProviderStrategy") != null && !jsonObj.get("capacityProviderStrategy").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("capacityProviderStrategy"));
      }
      // validate the optional field `platformVersion`
      if (jsonObj.get("platformVersion") != null && !jsonObj.get("platformVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("platformVersion"));
      }
      // validate the optional field `scale`
      if (jsonObj.get("scale") != null && !jsonObj.get("scale").isJsonNull()) {
        CreateTaskSetRequestScale.validateJsonElement(jsonObj.get("scale"));
      }
      // validate the optional field `clientToken`
      if (jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("clientToken"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTaskSetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTaskSetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTaskSetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTaskSetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTaskSetRequest>() {
           @Override
           public void write(JsonWriter out, CreateTaskSetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTaskSetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTaskSetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTaskSetRequest
   * @throws IOException if the JSON string is invalid with respect to CreateTaskSetRequest
   */
  public static CreateTaskSetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTaskSetRequest.class);
  }

  /**
   * Convert an instance of CreateTaskSetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

