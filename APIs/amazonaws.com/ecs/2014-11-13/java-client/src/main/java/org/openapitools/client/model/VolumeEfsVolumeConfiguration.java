/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EFSTransitEncryption;
import org.openapitools.client.model.EFSVolumeConfigurationAuthorizationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VolumeEfsVolumeConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeEfsVolumeConfiguration {
  public static final String SERIALIZED_NAME_FILE_SYSTEM_ID = "fileSystemId";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ID)
  private String fileSystemId;

  public static final String SERIALIZED_NAME_ROOT_DIRECTORY = "rootDirectory";
  @SerializedName(SERIALIZED_NAME_ROOT_DIRECTORY)
  private String rootDirectory;

  public static final String SERIALIZED_NAME_TRANSIT_ENCRYPTION = "transitEncryption";
  @SerializedName(SERIALIZED_NAME_TRANSIT_ENCRYPTION)
  private EFSTransitEncryption transitEncryption;

  public static final String SERIALIZED_NAME_TRANSIT_ENCRYPTION_PORT = "transitEncryptionPort";
  @SerializedName(SERIALIZED_NAME_TRANSIT_ENCRYPTION_PORT)
  private Integer transitEncryptionPort;

  public static final String SERIALIZED_NAME_AUTHORIZATION_CONFIG = "authorizationConfig";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_CONFIG)
  private EFSVolumeConfigurationAuthorizationConfig authorizationConfig;

  public VolumeEfsVolumeConfiguration() {
  }

  public VolumeEfsVolumeConfiguration fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

  /**
   * Get fileSystemId
   * @return fileSystemId
   */
  @javax.annotation.Nonnull
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }


  public VolumeEfsVolumeConfiguration rootDirectory(String rootDirectory) {
    this.rootDirectory = rootDirectory;
    return this;
  }

  /**
   * Get rootDirectory
   * @return rootDirectory
   */
  @javax.annotation.Nullable
  public String getRootDirectory() {
    return rootDirectory;
  }

  public void setRootDirectory(String rootDirectory) {
    this.rootDirectory = rootDirectory;
  }


  public VolumeEfsVolumeConfiguration transitEncryption(EFSTransitEncryption transitEncryption) {
    this.transitEncryption = transitEncryption;
    return this;
  }

  /**
   * Get transitEncryption
   * @return transitEncryption
   */
  @javax.annotation.Nullable
  public EFSTransitEncryption getTransitEncryption() {
    return transitEncryption;
  }

  public void setTransitEncryption(EFSTransitEncryption transitEncryption) {
    this.transitEncryption = transitEncryption;
  }


  public VolumeEfsVolumeConfiguration transitEncryptionPort(Integer transitEncryptionPort) {
    this.transitEncryptionPort = transitEncryptionPort;
    return this;
  }

  /**
   * Get transitEncryptionPort
   * @return transitEncryptionPort
   */
  @javax.annotation.Nullable
  public Integer getTransitEncryptionPort() {
    return transitEncryptionPort;
  }

  public void setTransitEncryptionPort(Integer transitEncryptionPort) {
    this.transitEncryptionPort = transitEncryptionPort;
  }


  public VolumeEfsVolumeConfiguration authorizationConfig(EFSVolumeConfigurationAuthorizationConfig authorizationConfig) {
    this.authorizationConfig = authorizationConfig;
    return this;
  }

  /**
   * Get authorizationConfig
   * @return authorizationConfig
   */
  @javax.annotation.Nullable
  public EFSVolumeConfigurationAuthorizationConfig getAuthorizationConfig() {
    return authorizationConfig;
  }

  public void setAuthorizationConfig(EFSVolumeConfigurationAuthorizationConfig authorizationConfig) {
    this.authorizationConfig = authorizationConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeEfsVolumeConfiguration volumeEfsVolumeConfiguration = (VolumeEfsVolumeConfiguration) o;
    return Objects.equals(this.fileSystemId, volumeEfsVolumeConfiguration.fileSystemId) &&
        Objects.equals(this.rootDirectory, volumeEfsVolumeConfiguration.rootDirectory) &&
        Objects.equals(this.transitEncryption, volumeEfsVolumeConfiguration.transitEncryption) &&
        Objects.equals(this.transitEncryptionPort, volumeEfsVolumeConfiguration.transitEncryptionPort) &&
        Objects.equals(this.authorizationConfig, volumeEfsVolumeConfiguration.authorizationConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileSystemId, rootDirectory, transitEncryption, transitEncryptionPort, authorizationConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeEfsVolumeConfiguration {\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    rootDirectory: ").append(toIndentedString(rootDirectory)).append("\n");
    sb.append("    transitEncryption: ").append(toIndentedString(transitEncryption)).append("\n");
    sb.append("    transitEncryptionPort: ").append(toIndentedString(transitEncryptionPort)).append("\n");
    sb.append("    authorizationConfig: ").append(toIndentedString(authorizationConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileSystemId");
    openapiFields.add("rootDirectory");
    openapiFields.add("transitEncryption");
    openapiFields.add("transitEncryptionPort");
    openapiFields.add("authorizationConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fileSystemId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeEfsVolumeConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeEfsVolumeConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeEfsVolumeConfiguration is not found in the empty JSON string", VolumeEfsVolumeConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeEfsVolumeConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeEfsVolumeConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VolumeEfsVolumeConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `fileSystemId`
      String.validateJsonElement(jsonObj.get("fileSystemId"));
      // validate the optional field `rootDirectory`
      if (jsonObj.get("rootDirectory") != null && !jsonObj.get("rootDirectory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("rootDirectory"));
      }
      // validate the optional field `transitEncryption`
      if (jsonObj.get("transitEncryption") != null && !jsonObj.get("transitEncryption").isJsonNull()) {
        EFSTransitEncryption.validateJsonElement(jsonObj.get("transitEncryption"));
      }
      // validate the optional field `transitEncryptionPort`
      if (jsonObj.get("transitEncryptionPort") != null && !jsonObj.get("transitEncryptionPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("transitEncryptionPort"));
      }
      // validate the optional field `authorizationConfig`
      if (jsonObj.get("authorizationConfig") != null && !jsonObj.get("authorizationConfig").isJsonNull()) {
        EFSVolumeConfigurationAuthorizationConfig.validateJsonElement(jsonObj.get("authorizationConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeEfsVolumeConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeEfsVolumeConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeEfsVolumeConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeEfsVolumeConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeEfsVolumeConfiguration>() {
           @Override
           public void write(JsonWriter out, VolumeEfsVolumeConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeEfsVolumeConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeEfsVolumeConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeEfsVolumeConfiguration
   * @throws IOException if the JSON string is invalid with respect to VolumeEfsVolumeConfiguration
   */
  public static VolumeEfsVolumeConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeEfsVolumeConfiguration.class);
  }

  /**
   * Convert an instance of VolumeEfsVolumeConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

