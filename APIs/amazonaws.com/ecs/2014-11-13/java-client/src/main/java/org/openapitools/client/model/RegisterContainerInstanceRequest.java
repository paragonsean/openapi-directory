/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RegisterContainerInstanceRequestVersionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterContainerInstanceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterContainerInstanceRequest {
  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_INSTANCE_IDENTITY_DOCUMENT = "instanceIdentityDocument";
  @SerializedName(SERIALIZED_NAME_INSTANCE_IDENTITY_DOCUMENT)
  private String instanceIdentityDocument;

  public static final String SERIALIZED_NAME_INSTANCE_IDENTITY_DOCUMENT_SIGNATURE = "instanceIdentityDocumentSignature";
  @SerializedName(SERIALIZED_NAME_INSTANCE_IDENTITY_DOCUMENT_SIGNATURE)
  private String instanceIdentityDocumentSignature;

  public static final String SERIALIZED_NAME_TOTAL_RESOURCES = "totalResources";
  @SerializedName(SERIALIZED_NAME_TOTAL_RESOURCES)
  private List totalResources;

  public static final String SERIALIZED_NAME_VERSION_INFO = "versionInfo";
  @SerializedName(SERIALIZED_NAME_VERSION_INFO)
  private RegisterContainerInstanceRequestVersionInfo versionInfo;

  public static final String SERIALIZED_NAME_CONTAINER_INSTANCE_ARN = "containerInstanceArn";
  @SerializedName(SERIALIZED_NAME_CONTAINER_INSTANCE_ARN)
  private String containerInstanceArn;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List attributes;

  public static final String SERIALIZED_NAME_PLATFORM_DEVICES = "platformDevices";
  @SerializedName(SERIALIZED_NAME_PLATFORM_DEVICES)
  private List platformDevices;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public RegisterContainerInstanceRequest() {
  }

  public RegisterContainerInstanceRequest cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * Get cluster
   * @return cluster
   */
  @javax.annotation.Nullable
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public RegisterContainerInstanceRequest instanceIdentityDocument(String instanceIdentityDocument) {
    this.instanceIdentityDocument = instanceIdentityDocument;
    return this;
  }

  /**
   * Get instanceIdentityDocument
   * @return instanceIdentityDocument
   */
  @javax.annotation.Nullable
  public String getInstanceIdentityDocument() {
    return instanceIdentityDocument;
  }

  public void setInstanceIdentityDocument(String instanceIdentityDocument) {
    this.instanceIdentityDocument = instanceIdentityDocument;
  }


  public RegisterContainerInstanceRequest instanceIdentityDocumentSignature(String instanceIdentityDocumentSignature) {
    this.instanceIdentityDocumentSignature = instanceIdentityDocumentSignature;
    return this;
  }

  /**
   * Get instanceIdentityDocumentSignature
   * @return instanceIdentityDocumentSignature
   */
  @javax.annotation.Nullable
  public String getInstanceIdentityDocumentSignature() {
    return instanceIdentityDocumentSignature;
  }

  public void setInstanceIdentityDocumentSignature(String instanceIdentityDocumentSignature) {
    this.instanceIdentityDocumentSignature = instanceIdentityDocumentSignature;
  }


  public RegisterContainerInstanceRequest totalResources(List totalResources) {
    this.totalResources = totalResources;
    return this;
  }

  /**
   * Get totalResources
   * @return totalResources
   */
  @javax.annotation.Nullable
  public List getTotalResources() {
    return totalResources;
  }

  public void setTotalResources(List totalResources) {
    this.totalResources = totalResources;
  }


  public RegisterContainerInstanceRequest versionInfo(RegisterContainerInstanceRequestVersionInfo versionInfo) {
    this.versionInfo = versionInfo;
    return this;
  }

  /**
   * Get versionInfo
   * @return versionInfo
   */
  @javax.annotation.Nullable
  public RegisterContainerInstanceRequestVersionInfo getVersionInfo() {
    return versionInfo;
  }

  public void setVersionInfo(RegisterContainerInstanceRequestVersionInfo versionInfo) {
    this.versionInfo = versionInfo;
  }


  public RegisterContainerInstanceRequest containerInstanceArn(String containerInstanceArn) {
    this.containerInstanceArn = containerInstanceArn;
    return this;
  }

  /**
   * Get containerInstanceArn
   * @return containerInstanceArn
   */
  @javax.annotation.Nullable
  public String getContainerInstanceArn() {
    return containerInstanceArn;
  }

  public void setContainerInstanceArn(String containerInstanceArn) {
    this.containerInstanceArn = containerInstanceArn;
  }


  public RegisterContainerInstanceRequest attributes(List attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public List getAttributes() {
    return attributes;
  }

  public void setAttributes(List attributes) {
    this.attributes = attributes;
  }


  public RegisterContainerInstanceRequest platformDevices(List platformDevices) {
    this.platformDevices = platformDevices;
    return this;
  }

  /**
   * Get platformDevices
   * @return platformDevices
   */
  @javax.annotation.Nullable
  public List getPlatformDevices() {
    return platformDevices;
  }

  public void setPlatformDevices(List platformDevices) {
    this.platformDevices = platformDevices;
  }


  public RegisterContainerInstanceRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterContainerInstanceRequest registerContainerInstanceRequest = (RegisterContainerInstanceRequest) o;
    return Objects.equals(this.cluster, registerContainerInstanceRequest.cluster) &&
        Objects.equals(this.instanceIdentityDocument, registerContainerInstanceRequest.instanceIdentityDocument) &&
        Objects.equals(this.instanceIdentityDocumentSignature, registerContainerInstanceRequest.instanceIdentityDocumentSignature) &&
        Objects.equals(this.totalResources, registerContainerInstanceRequest.totalResources) &&
        Objects.equals(this.versionInfo, registerContainerInstanceRequest.versionInfo) &&
        Objects.equals(this.containerInstanceArn, registerContainerInstanceRequest.containerInstanceArn) &&
        Objects.equals(this.attributes, registerContainerInstanceRequest.attributes) &&
        Objects.equals(this.platformDevices, registerContainerInstanceRequest.platformDevices) &&
        Objects.equals(this.tags, registerContainerInstanceRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cluster, instanceIdentityDocument, instanceIdentityDocumentSignature, totalResources, versionInfo, containerInstanceArn, attributes, platformDevices, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterContainerInstanceRequest {\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    instanceIdentityDocument: ").append(toIndentedString(instanceIdentityDocument)).append("\n");
    sb.append("    instanceIdentityDocumentSignature: ").append(toIndentedString(instanceIdentityDocumentSignature)).append("\n");
    sb.append("    totalResources: ").append(toIndentedString(totalResources)).append("\n");
    sb.append("    versionInfo: ").append(toIndentedString(versionInfo)).append("\n");
    sb.append("    containerInstanceArn: ").append(toIndentedString(containerInstanceArn)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    platformDevices: ").append(toIndentedString(platformDevices)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cluster");
    openapiFields.add("instanceIdentityDocument");
    openapiFields.add("instanceIdentityDocumentSignature");
    openapiFields.add("totalResources");
    openapiFields.add("versionInfo");
    openapiFields.add("containerInstanceArn");
    openapiFields.add("attributes");
    openapiFields.add("platformDevices");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterContainerInstanceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterContainerInstanceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterContainerInstanceRequest is not found in the empty JSON string", RegisterContainerInstanceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterContainerInstanceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterContainerInstanceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cluster`
      if (jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cluster"));
      }
      // validate the optional field `instanceIdentityDocument`
      if (jsonObj.get("instanceIdentityDocument") != null && !jsonObj.get("instanceIdentityDocument").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("instanceIdentityDocument"));
      }
      // validate the optional field `instanceIdentityDocumentSignature`
      if (jsonObj.get("instanceIdentityDocumentSignature") != null && !jsonObj.get("instanceIdentityDocumentSignature").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("instanceIdentityDocumentSignature"));
      }
      // validate the optional field `totalResources`
      if (jsonObj.get("totalResources") != null && !jsonObj.get("totalResources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("totalResources"));
      }
      // validate the optional field `versionInfo`
      if (jsonObj.get("versionInfo") != null && !jsonObj.get("versionInfo").isJsonNull()) {
        RegisterContainerInstanceRequestVersionInfo.validateJsonElement(jsonObj.get("versionInfo"));
      }
      // validate the optional field `containerInstanceArn`
      if (jsonObj.get("containerInstanceArn") != null && !jsonObj.get("containerInstanceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("containerInstanceArn"));
      }
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("attributes"));
      }
      // validate the optional field `platformDevices`
      if (jsonObj.get("platformDevices") != null && !jsonObj.get("platformDevices").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("platformDevices"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterContainerInstanceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterContainerInstanceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterContainerInstanceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterContainerInstanceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterContainerInstanceRequest>() {
           @Override
           public void write(JsonWriter out, RegisterContainerInstanceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterContainerInstanceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterContainerInstanceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterContainerInstanceRequest
   * @throws IOException if the JSON string is invalid with respect to RegisterContainerInstanceRequest
   */
  public static RegisterContainerInstanceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterContainerInstanceRequest.class);
  }

  /**
   * Convert an instance of RegisterContainerInstanceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

