/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UlimitName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The &lt;code&gt;ulimit&lt;/code&gt; settings to pass to the container.&lt;/p&gt; &lt;p&gt;Amazon ECS tasks hosted on Fargate use the default resource limit values set by the operating system with the exception of the &lt;code&gt;nofile&lt;/code&gt; resource limit parameter which Fargate overrides. The &lt;code&gt;nofile&lt;/code&gt; resource limit sets a restriction on the number of open files that a container can use. The default &lt;code&gt;nofile&lt;/code&gt; soft limit is &lt;code&gt;1024&lt;/code&gt; and the default hard limit is &lt;code&gt;4096&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can specify the &lt;code&gt;ulimit&lt;/code&gt; settings for a container in a task definition.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Ulimit {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private UlimitName name;

  public static final String SERIALIZED_NAME_SOFT_LIMIT = "softLimit";
  @SerializedName(SERIALIZED_NAME_SOFT_LIMIT)
  private Integer softLimit;

  public static final String SERIALIZED_NAME_HARD_LIMIT = "hardLimit";
  @SerializedName(SERIALIZED_NAME_HARD_LIMIT)
  private Integer hardLimit;

  public Ulimit() {
  }

  public Ulimit name(UlimitName name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public UlimitName getName() {
    return name;
  }

  public void setName(UlimitName name) {
    this.name = name;
  }


  public Ulimit softLimit(Integer softLimit) {
    this.softLimit = softLimit;
    return this;
  }

  /**
   * Get softLimit
   * @return softLimit
   */
  @javax.annotation.Nonnull
  public Integer getSoftLimit() {
    return softLimit;
  }

  public void setSoftLimit(Integer softLimit) {
    this.softLimit = softLimit;
  }


  public Ulimit hardLimit(Integer hardLimit) {
    this.hardLimit = hardLimit;
    return this;
  }

  /**
   * Get hardLimit
   * @return hardLimit
   */
  @javax.annotation.Nonnull
  public Integer getHardLimit() {
    return hardLimit;
  }

  public void setHardLimit(Integer hardLimit) {
    this.hardLimit = hardLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ulimit ulimit = (Ulimit) o;
    return Objects.equals(this.name, ulimit.name) &&
        Objects.equals(this.softLimit, ulimit.softLimit) &&
        Objects.equals(this.hardLimit, ulimit.hardLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, softLimit, hardLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ulimit {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    softLimit: ").append(toIndentedString(softLimit)).append("\n");
    sb.append("    hardLimit: ").append(toIndentedString(hardLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("softLimit");
    openapiFields.add("hardLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("softLimit");
    openapiRequiredFields.add("hardLimit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Ulimit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ulimit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ulimit is not found in the empty JSON string", Ulimit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ulimit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ulimit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Ulimit.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `name`
      UlimitName.validateJsonElement(jsonObj.get("name"));
      // validate the required field `softLimit`
      Integer.validateJsonElement(jsonObj.get("softLimit"));
      // validate the required field `hardLimit`
      Integer.validateJsonElement(jsonObj.get("hardLimit"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ulimit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ulimit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ulimit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ulimit.class));

       return (TypeAdapter<T>) new TypeAdapter<Ulimit>() {
           @Override
           public void write(JsonWriter out, Ulimit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ulimit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Ulimit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Ulimit
   * @throws IOException if the JSON string is invalid with respect to Ulimit
   */
  public static Ulimit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ulimit.class);
  }

  /**
   * Convert an instance of Ulimit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

