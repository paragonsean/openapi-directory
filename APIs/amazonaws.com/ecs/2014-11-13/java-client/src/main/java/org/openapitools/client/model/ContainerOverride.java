/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The overrides that are sent to a container. An empty container override can be passed in. An example of an empty container override is &lt;code&gt;{\&quot;containerOverrides\&quot;: [ ] }&lt;/code&gt;. If a non-empty container override is specified, the &lt;code&gt;name&lt;/code&gt; parameter must be included.&lt;/p&gt; &lt;p&gt;You can use Secrets Manager or Amazon Web Services Systems Manager Parameter Store to store the sensitive data. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/secrets-envvar.html\&quot;&gt;Retrieve secrets through environment variables&lt;/a&gt; in the Amazon ECS Developer Guide.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerOverride {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private List command;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private List environment;

  public static final String SERIALIZED_NAME_ENVIRONMENT_FILES = "environmentFiles";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_FILES)
  private List environmentFiles;

  public static final String SERIALIZED_NAME_CPU = "cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private Integer cpu;

  public static final String SERIALIZED_NAME_MEMORY = "memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private Integer memory;

  public static final String SERIALIZED_NAME_MEMORY_RESERVATION = "memoryReservation";
  @SerializedName(SERIALIZED_NAME_MEMORY_RESERVATION)
  private Integer memoryReservation;

  public static final String SERIALIZED_NAME_RESOURCE_REQUIREMENTS = "resourceRequirements";
  @SerializedName(SERIALIZED_NAME_RESOURCE_REQUIREMENTS)
  private List resourceRequirements;

  public ContainerOverride() {
  }

  public ContainerOverride name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContainerOverride command(List command) {
    this.command = command;
    return this;
  }

  /**
   * Get command
   * @return command
   */
  @javax.annotation.Nullable
  public List getCommand() {
    return command;
  }

  public void setCommand(List command) {
    this.command = command;
  }


  public ContainerOverride environment(List environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public List getEnvironment() {
    return environment;
  }

  public void setEnvironment(List environment) {
    this.environment = environment;
  }


  public ContainerOverride environmentFiles(List environmentFiles) {
    this.environmentFiles = environmentFiles;
    return this;
  }

  /**
   * Get environmentFiles
   * @return environmentFiles
   */
  @javax.annotation.Nullable
  public List getEnvironmentFiles() {
    return environmentFiles;
  }

  public void setEnvironmentFiles(List environmentFiles) {
    this.environmentFiles = environmentFiles;
  }


  public ContainerOverride cpu(Integer cpu) {
    this.cpu = cpu;
    return this;
  }

  /**
   * Get cpu
   * @return cpu
   */
  @javax.annotation.Nullable
  public Integer getCpu() {
    return cpu;
  }

  public void setCpu(Integer cpu) {
    this.cpu = cpu;
  }


  public ContainerOverride memory(Integer memory) {
    this.memory = memory;
    return this;
  }

  /**
   * Get memory
   * @return memory
   */
  @javax.annotation.Nullable
  public Integer getMemory() {
    return memory;
  }

  public void setMemory(Integer memory) {
    this.memory = memory;
  }


  public ContainerOverride memoryReservation(Integer memoryReservation) {
    this.memoryReservation = memoryReservation;
    return this;
  }

  /**
   * Get memoryReservation
   * @return memoryReservation
   */
  @javax.annotation.Nullable
  public Integer getMemoryReservation() {
    return memoryReservation;
  }

  public void setMemoryReservation(Integer memoryReservation) {
    this.memoryReservation = memoryReservation;
  }


  public ContainerOverride resourceRequirements(List resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
    return this;
  }

  /**
   * Get resourceRequirements
   * @return resourceRequirements
   */
  @javax.annotation.Nullable
  public List getResourceRequirements() {
    return resourceRequirements;
  }

  public void setResourceRequirements(List resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerOverride containerOverride = (ContainerOverride) o;
    return Objects.equals(this.name, containerOverride.name) &&
        Objects.equals(this.command, containerOverride.command) &&
        Objects.equals(this.environment, containerOverride.environment) &&
        Objects.equals(this.environmentFiles, containerOverride.environmentFiles) &&
        Objects.equals(this.cpu, containerOverride.cpu) &&
        Objects.equals(this.memory, containerOverride.memory) &&
        Objects.equals(this.memoryReservation, containerOverride.memoryReservation) &&
        Objects.equals(this.resourceRequirements, containerOverride.resourceRequirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, command, environment, environmentFiles, cpu, memory, memoryReservation, resourceRequirements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerOverride {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    environmentFiles: ").append(toIndentedString(environmentFiles)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    memoryReservation: ").append(toIndentedString(memoryReservation)).append("\n");
    sb.append("    resourceRequirements: ").append(toIndentedString(resourceRequirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("command");
    openapiFields.add("environment");
    openapiFields.add("environmentFiles");
    openapiFields.add("cpu");
    openapiFields.add("memory");
    openapiFields.add("memoryReservation");
    openapiFields.add("resourceRequirements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerOverride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerOverride is not found in the empty JSON string", ContainerOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `command`
      if (jsonObj.get("command") != null && !jsonObj.get("command").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("command"));
      }
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("environment"));
      }
      // validate the optional field `environmentFiles`
      if (jsonObj.get("environmentFiles") != null && !jsonObj.get("environmentFiles").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("environmentFiles"));
      }
      // validate the optional field `cpu`
      if (jsonObj.get("cpu") != null && !jsonObj.get("cpu").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("cpu"));
      }
      // validate the optional field `memory`
      if (jsonObj.get("memory") != null && !jsonObj.get("memory").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("memory"));
      }
      // validate the optional field `memoryReservation`
      if (jsonObj.get("memoryReservation") != null && !jsonObj.get("memoryReservation").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("memoryReservation"));
      }
      // validate the optional field `resourceRequirements`
      if (jsonObj.get("resourceRequirements") != null && !jsonObj.get("resourceRequirements").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("resourceRequirements"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerOverride>() {
           @Override
           public void write(JsonWriter out, ContainerOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerOverride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerOverride
   * @throws IOException if the JSON string is invalid with respect to ContainerOverride
   */
  public static ContainerOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerOverride.class);
  }

  /**
   * Convert an instance of ContainerOverride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

