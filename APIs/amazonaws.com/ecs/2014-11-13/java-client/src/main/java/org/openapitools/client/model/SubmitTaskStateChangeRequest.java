/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubmitTaskStateChangeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubmitTaskStateChangeRequest {
  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_TASK = "task";
  @SerializedName(SERIALIZED_NAME_TASK)
  private String task;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_CONTAINERS = "containers";
  @SerializedName(SERIALIZED_NAME_CONTAINERS)
  private List containers;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List attachments;

  public static final String SERIALIZED_NAME_MANAGED_AGENTS = "managedAgents";
  @SerializedName(SERIALIZED_NAME_MANAGED_AGENTS)
  private List managedAgents;

  public static final String SERIALIZED_NAME_PULL_STARTED_AT = "pullStartedAt";
  @SerializedName(SERIALIZED_NAME_PULL_STARTED_AT)
  private OffsetDateTime pullStartedAt;

  public static final String SERIALIZED_NAME_PULL_STOPPED_AT = "pullStoppedAt";
  @SerializedName(SERIALIZED_NAME_PULL_STOPPED_AT)
  private OffsetDateTime pullStoppedAt;

  public static final String SERIALIZED_NAME_EXECUTION_STOPPED_AT = "executionStoppedAt";
  @SerializedName(SERIALIZED_NAME_EXECUTION_STOPPED_AT)
  private OffsetDateTime executionStoppedAt;

  public SubmitTaskStateChangeRequest() {
  }

  public SubmitTaskStateChangeRequest cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * Get cluster
   * @return cluster
   */
  @javax.annotation.Nullable
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public SubmitTaskStateChangeRequest task(String task) {
    this.task = task;
    return this;
  }

  /**
   * Get task
   * @return task
   */
  @javax.annotation.Nullable
  public String getTask() {
    return task;
  }

  public void setTask(String task) {
    this.task = task;
  }


  public SubmitTaskStateChangeRequest status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public SubmitTaskStateChangeRequest reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public SubmitTaskStateChangeRequest containers(List containers) {
    this.containers = containers;
    return this;
  }

  /**
   * Get containers
   * @return containers
   */
  @javax.annotation.Nullable
  public List getContainers() {
    return containers;
  }

  public void setContainers(List containers) {
    this.containers = containers;
  }


  public SubmitTaskStateChangeRequest attachments(List attachments) {
    this.attachments = attachments;
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List getAttachments() {
    return attachments;
  }

  public void setAttachments(List attachments) {
    this.attachments = attachments;
  }


  public SubmitTaskStateChangeRequest managedAgents(List managedAgents) {
    this.managedAgents = managedAgents;
    return this;
  }

  /**
   * Get managedAgents
   * @return managedAgents
   */
  @javax.annotation.Nullable
  public List getManagedAgents() {
    return managedAgents;
  }

  public void setManagedAgents(List managedAgents) {
    this.managedAgents = managedAgents;
  }


  public SubmitTaskStateChangeRequest pullStartedAt(OffsetDateTime pullStartedAt) {
    this.pullStartedAt = pullStartedAt;
    return this;
  }

  /**
   * Get pullStartedAt
   * @return pullStartedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPullStartedAt() {
    return pullStartedAt;
  }

  public void setPullStartedAt(OffsetDateTime pullStartedAt) {
    this.pullStartedAt = pullStartedAt;
  }


  public SubmitTaskStateChangeRequest pullStoppedAt(OffsetDateTime pullStoppedAt) {
    this.pullStoppedAt = pullStoppedAt;
    return this;
  }

  /**
   * Get pullStoppedAt
   * @return pullStoppedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPullStoppedAt() {
    return pullStoppedAt;
  }

  public void setPullStoppedAt(OffsetDateTime pullStoppedAt) {
    this.pullStoppedAt = pullStoppedAt;
  }


  public SubmitTaskStateChangeRequest executionStoppedAt(OffsetDateTime executionStoppedAt) {
    this.executionStoppedAt = executionStoppedAt;
    return this;
  }

  /**
   * Get executionStoppedAt
   * @return executionStoppedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExecutionStoppedAt() {
    return executionStoppedAt;
  }

  public void setExecutionStoppedAt(OffsetDateTime executionStoppedAt) {
    this.executionStoppedAt = executionStoppedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmitTaskStateChangeRequest submitTaskStateChangeRequest = (SubmitTaskStateChangeRequest) o;
    return Objects.equals(this.cluster, submitTaskStateChangeRequest.cluster) &&
        Objects.equals(this.task, submitTaskStateChangeRequest.task) &&
        Objects.equals(this.status, submitTaskStateChangeRequest.status) &&
        Objects.equals(this.reason, submitTaskStateChangeRequest.reason) &&
        Objects.equals(this.containers, submitTaskStateChangeRequest.containers) &&
        Objects.equals(this.attachments, submitTaskStateChangeRequest.attachments) &&
        Objects.equals(this.managedAgents, submitTaskStateChangeRequest.managedAgents) &&
        Objects.equals(this.pullStartedAt, submitTaskStateChangeRequest.pullStartedAt) &&
        Objects.equals(this.pullStoppedAt, submitTaskStateChangeRequest.pullStoppedAt) &&
        Objects.equals(this.executionStoppedAt, submitTaskStateChangeRequest.executionStoppedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cluster, task, status, reason, containers, attachments, managedAgents, pullStartedAt, pullStoppedAt, executionStoppedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmitTaskStateChangeRequest {\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    managedAgents: ").append(toIndentedString(managedAgents)).append("\n");
    sb.append("    pullStartedAt: ").append(toIndentedString(pullStartedAt)).append("\n");
    sb.append("    pullStoppedAt: ").append(toIndentedString(pullStoppedAt)).append("\n");
    sb.append("    executionStoppedAt: ").append(toIndentedString(executionStoppedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cluster");
    openapiFields.add("task");
    openapiFields.add("status");
    openapiFields.add("reason");
    openapiFields.add("containers");
    openapiFields.add("attachments");
    openapiFields.add("managedAgents");
    openapiFields.add("pullStartedAt");
    openapiFields.add("pullStoppedAt");
    openapiFields.add("executionStoppedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubmitTaskStateChangeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubmitTaskStateChangeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubmitTaskStateChangeRequest is not found in the empty JSON string", SubmitTaskStateChangeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubmitTaskStateChangeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubmitTaskStateChangeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cluster`
      if (jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cluster"));
      }
      // validate the optional field `task`
      if (jsonObj.get("task") != null && !jsonObj.get("task").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("task"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `reason`
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("reason"));
      }
      // validate the optional field `containers`
      if (jsonObj.get("containers") != null && !jsonObj.get("containers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("containers"));
      }
      // validate the optional field `attachments`
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("attachments"));
      }
      // validate the optional field `managedAgents`
      if (jsonObj.get("managedAgents") != null && !jsonObj.get("managedAgents").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("managedAgents"));
      }
      // validate the optional field `pullStartedAt`
      if (jsonObj.get("pullStartedAt") != null && !jsonObj.get("pullStartedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("pullStartedAt"));
      }
      // validate the optional field `pullStoppedAt`
      if (jsonObj.get("pullStoppedAt") != null && !jsonObj.get("pullStoppedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("pullStoppedAt"));
      }
      // validate the optional field `executionStoppedAt`
      if (jsonObj.get("executionStoppedAt") != null && !jsonObj.get("executionStoppedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("executionStoppedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubmitTaskStateChangeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubmitTaskStateChangeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubmitTaskStateChangeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubmitTaskStateChangeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SubmitTaskStateChangeRequest>() {
           @Override
           public void write(JsonWriter out, SubmitTaskStateChangeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubmitTaskStateChangeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubmitTaskStateChangeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubmitTaskStateChangeRequest
   * @throws IOException if the JSON string is invalid with respect to SubmitTaskStateChangeRequest
   */
  public static SubmitTaskStateChangeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubmitTaskStateChangeRequest.class);
  }

  /**
   * Convert an instance of SubmitTaskStateChangeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

