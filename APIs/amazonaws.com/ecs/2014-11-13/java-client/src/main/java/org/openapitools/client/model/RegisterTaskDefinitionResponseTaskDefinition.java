/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpcMode;
import org.openapitools.client.model.NetworkMode;
import org.openapitools.client.model.PidMode;
import org.openapitools.client.model.TaskDefinitionEphemeralStorage;
import org.openapitools.client.model.TaskDefinitionProxyConfiguration;
import org.openapitools.client.model.TaskDefinitionRuntimePlatform;
import org.openapitools.client.model.TaskDefinitionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterTaskDefinitionResponseTaskDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterTaskDefinitionResponseTaskDefinition {
  public static final String SERIALIZED_NAME_TASK_DEFINITION_ARN = "taskDefinitionArn";
  @SerializedName(SERIALIZED_NAME_TASK_DEFINITION_ARN)
  private String taskDefinitionArn;

  public static final String SERIALIZED_NAME_CONTAINER_DEFINITIONS = "containerDefinitions";
  @SerializedName(SERIALIZED_NAME_CONTAINER_DEFINITIONS)
  private List containerDefinitions;

  public static final String SERIALIZED_NAME_FAMILY = "family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private String family;

  public static final String SERIALIZED_NAME_TASK_ROLE_ARN = "taskRoleArn";
  @SerializedName(SERIALIZED_NAME_TASK_ROLE_ARN)
  private String taskRoleArn;

  public static final String SERIALIZED_NAME_EXECUTION_ROLE_ARN = "executionRoleArn";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ROLE_ARN)
  private String executionRoleArn;

  public static final String SERIALIZED_NAME_NETWORK_MODE = "networkMode";
  @SerializedName(SERIALIZED_NAME_NETWORK_MODE)
  private NetworkMode networkMode;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List volumes;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TaskDefinitionStatus status;

  public static final String SERIALIZED_NAME_REQUIRES_ATTRIBUTES = "requiresAttributes";
  @SerializedName(SERIALIZED_NAME_REQUIRES_ATTRIBUTES)
  private List requiresAttributes;

  public static final String SERIALIZED_NAME_PLACEMENT_CONSTRAINTS = "placementConstraints";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_CONSTRAINTS)
  private List placementConstraints;

  public static final String SERIALIZED_NAME_COMPATIBILITIES = "compatibilities";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITIES)
  private List compatibilities;

  public static final String SERIALIZED_NAME_RUNTIME_PLATFORM = "runtimePlatform";
  @SerializedName(SERIALIZED_NAME_RUNTIME_PLATFORM)
  private TaskDefinitionRuntimePlatform runtimePlatform;

  public static final String SERIALIZED_NAME_REQUIRES_COMPATIBILITIES = "requiresCompatibilities";
  @SerializedName(SERIALIZED_NAME_REQUIRES_COMPATIBILITIES)
  private List requiresCompatibilities;

  public static final String SERIALIZED_NAME_CPU = "cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private String cpu;

  public static final String SERIALIZED_NAME_MEMORY = "memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private String memory;

  public static final String SERIALIZED_NAME_INFERENCE_ACCELERATORS = "inferenceAccelerators";
  @SerializedName(SERIALIZED_NAME_INFERENCE_ACCELERATORS)
  private List inferenceAccelerators;

  public static final String SERIALIZED_NAME_PID_MODE = "pidMode";
  @SerializedName(SERIALIZED_NAME_PID_MODE)
  private PidMode pidMode;

  public static final String SERIALIZED_NAME_IPC_MODE = "ipcMode";
  @SerializedName(SERIALIZED_NAME_IPC_MODE)
  private IpcMode ipcMode;

  public static final String SERIALIZED_NAME_PROXY_CONFIGURATION = "proxyConfiguration";
  @SerializedName(SERIALIZED_NAME_PROXY_CONFIGURATION)
  private TaskDefinitionProxyConfiguration proxyConfiguration;

  public static final String SERIALIZED_NAME_REGISTERED_AT = "registeredAt";
  @SerializedName(SERIALIZED_NAME_REGISTERED_AT)
  private OffsetDateTime registeredAt;

  public static final String SERIALIZED_NAME_DEREGISTERED_AT = "deregisteredAt";
  @SerializedName(SERIALIZED_NAME_DEREGISTERED_AT)
  private OffsetDateTime deregisteredAt;

  public static final String SERIALIZED_NAME_REGISTERED_BY = "registeredBy";
  @SerializedName(SERIALIZED_NAME_REGISTERED_BY)
  private String registeredBy;

  public static final String SERIALIZED_NAME_EPHEMERAL_STORAGE = "ephemeralStorage";
  @SerializedName(SERIALIZED_NAME_EPHEMERAL_STORAGE)
  private TaskDefinitionEphemeralStorage ephemeralStorage;

  public RegisterTaskDefinitionResponseTaskDefinition() {
  }

  public RegisterTaskDefinitionResponseTaskDefinition taskDefinitionArn(String taskDefinitionArn) {
    this.taskDefinitionArn = taskDefinitionArn;
    return this;
  }

  /**
   * Get taskDefinitionArn
   * @return taskDefinitionArn
   */
  @javax.annotation.Nullable
  public String getTaskDefinitionArn() {
    return taskDefinitionArn;
  }

  public void setTaskDefinitionArn(String taskDefinitionArn) {
    this.taskDefinitionArn = taskDefinitionArn;
  }


  public RegisterTaskDefinitionResponseTaskDefinition containerDefinitions(List containerDefinitions) {
    this.containerDefinitions = containerDefinitions;
    return this;
  }

  /**
   * Get containerDefinitions
   * @return containerDefinitions
   */
  @javax.annotation.Nullable
  public List getContainerDefinitions() {
    return containerDefinitions;
  }

  public void setContainerDefinitions(List containerDefinitions) {
    this.containerDefinitions = containerDefinitions;
  }


  public RegisterTaskDefinitionResponseTaskDefinition family(String family) {
    this.family = family;
    return this;
  }

  /**
   * Get family
   * @return family
   */
  @javax.annotation.Nullable
  public String getFamily() {
    return family;
  }

  public void setFamily(String family) {
    this.family = family;
  }


  public RegisterTaskDefinitionResponseTaskDefinition taskRoleArn(String taskRoleArn) {
    this.taskRoleArn = taskRoleArn;
    return this;
  }

  /**
   * Get taskRoleArn
   * @return taskRoleArn
   */
  @javax.annotation.Nullable
  public String getTaskRoleArn() {
    return taskRoleArn;
  }

  public void setTaskRoleArn(String taskRoleArn) {
    this.taskRoleArn = taskRoleArn;
  }


  public RegisterTaskDefinitionResponseTaskDefinition executionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
    return this;
  }

  /**
   * Get executionRoleArn
   * @return executionRoleArn
   */
  @javax.annotation.Nullable
  public String getExecutionRoleArn() {
    return executionRoleArn;
  }

  public void setExecutionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
  }


  public RegisterTaskDefinitionResponseTaskDefinition networkMode(NetworkMode networkMode) {
    this.networkMode = networkMode;
    return this;
  }

  /**
   * Get networkMode
   * @return networkMode
   */
  @javax.annotation.Nullable
  public NetworkMode getNetworkMode() {
    return networkMode;
  }

  public void setNetworkMode(NetworkMode networkMode) {
    this.networkMode = networkMode;
  }


  public RegisterTaskDefinitionResponseTaskDefinition revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * Get revision
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public RegisterTaskDefinitionResponseTaskDefinition volumes(List volumes) {
    this.volumes = volumes;
    return this;
  }

  /**
   * Get volumes
   * @return volumes
   */
  @javax.annotation.Nullable
  public List getVolumes() {
    return volumes;
  }

  public void setVolumes(List volumes) {
    this.volumes = volumes;
  }


  public RegisterTaskDefinitionResponseTaskDefinition status(TaskDefinitionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TaskDefinitionStatus getStatus() {
    return status;
  }

  public void setStatus(TaskDefinitionStatus status) {
    this.status = status;
  }


  public RegisterTaskDefinitionResponseTaskDefinition requiresAttributes(List requiresAttributes) {
    this.requiresAttributes = requiresAttributes;
    return this;
  }

  /**
   * Get requiresAttributes
   * @return requiresAttributes
   */
  @javax.annotation.Nullable
  public List getRequiresAttributes() {
    return requiresAttributes;
  }

  public void setRequiresAttributes(List requiresAttributes) {
    this.requiresAttributes = requiresAttributes;
  }


  public RegisterTaskDefinitionResponseTaskDefinition placementConstraints(List placementConstraints) {
    this.placementConstraints = placementConstraints;
    return this;
  }

  /**
   * Get placementConstraints
   * @return placementConstraints
   */
  @javax.annotation.Nullable
  public List getPlacementConstraints() {
    return placementConstraints;
  }

  public void setPlacementConstraints(List placementConstraints) {
    this.placementConstraints = placementConstraints;
  }


  public RegisterTaskDefinitionResponseTaskDefinition compatibilities(List compatibilities) {
    this.compatibilities = compatibilities;
    return this;
  }

  /**
   * Get compatibilities
   * @return compatibilities
   */
  @javax.annotation.Nullable
  public List getCompatibilities() {
    return compatibilities;
  }

  public void setCompatibilities(List compatibilities) {
    this.compatibilities = compatibilities;
  }


  public RegisterTaskDefinitionResponseTaskDefinition runtimePlatform(TaskDefinitionRuntimePlatform runtimePlatform) {
    this.runtimePlatform = runtimePlatform;
    return this;
  }

  /**
   * Get runtimePlatform
   * @return runtimePlatform
   */
  @javax.annotation.Nullable
  public TaskDefinitionRuntimePlatform getRuntimePlatform() {
    return runtimePlatform;
  }

  public void setRuntimePlatform(TaskDefinitionRuntimePlatform runtimePlatform) {
    this.runtimePlatform = runtimePlatform;
  }


  public RegisterTaskDefinitionResponseTaskDefinition requiresCompatibilities(List requiresCompatibilities) {
    this.requiresCompatibilities = requiresCompatibilities;
    return this;
  }

  /**
   * Get requiresCompatibilities
   * @return requiresCompatibilities
   */
  @javax.annotation.Nullable
  public List getRequiresCompatibilities() {
    return requiresCompatibilities;
  }

  public void setRequiresCompatibilities(List requiresCompatibilities) {
    this.requiresCompatibilities = requiresCompatibilities;
  }


  public RegisterTaskDefinitionResponseTaskDefinition cpu(String cpu) {
    this.cpu = cpu;
    return this;
  }

  /**
   * Get cpu
   * @return cpu
   */
  @javax.annotation.Nullable
  public String getCpu() {
    return cpu;
  }

  public void setCpu(String cpu) {
    this.cpu = cpu;
  }


  public RegisterTaskDefinitionResponseTaskDefinition memory(String memory) {
    this.memory = memory;
    return this;
  }

  /**
   * Get memory
   * @return memory
   */
  @javax.annotation.Nullable
  public String getMemory() {
    return memory;
  }

  public void setMemory(String memory) {
    this.memory = memory;
  }


  public RegisterTaskDefinitionResponseTaskDefinition inferenceAccelerators(List inferenceAccelerators) {
    this.inferenceAccelerators = inferenceAccelerators;
    return this;
  }

  /**
   * Get inferenceAccelerators
   * @return inferenceAccelerators
   */
  @javax.annotation.Nullable
  public List getInferenceAccelerators() {
    return inferenceAccelerators;
  }

  public void setInferenceAccelerators(List inferenceAccelerators) {
    this.inferenceAccelerators = inferenceAccelerators;
  }


  public RegisterTaskDefinitionResponseTaskDefinition pidMode(PidMode pidMode) {
    this.pidMode = pidMode;
    return this;
  }

  /**
   * Get pidMode
   * @return pidMode
   */
  @javax.annotation.Nullable
  public PidMode getPidMode() {
    return pidMode;
  }

  public void setPidMode(PidMode pidMode) {
    this.pidMode = pidMode;
  }


  public RegisterTaskDefinitionResponseTaskDefinition ipcMode(IpcMode ipcMode) {
    this.ipcMode = ipcMode;
    return this;
  }

  /**
   * Get ipcMode
   * @return ipcMode
   */
  @javax.annotation.Nullable
  public IpcMode getIpcMode() {
    return ipcMode;
  }

  public void setIpcMode(IpcMode ipcMode) {
    this.ipcMode = ipcMode;
  }


  public RegisterTaskDefinitionResponseTaskDefinition proxyConfiguration(TaskDefinitionProxyConfiguration proxyConfiguration) {
    this.proxyConfiguration = proxyConfiguration;
    return this;
  }

  /**
   * Get proxyConfiguration
   * @return proxyConfiguration
   */
  @javax.annotation.Nullable
  public TaskDefinitionProxyConfiguration getProxyConfiguration() {
    return proxyConfiguration;
  }

  public void setProxyConfiguration(TaskDefinitionProxyConfiguration proxyConfiguration) {
    this.proxyConfiguration = proxyConfiguration;
  }


  public RegisterTaskDefinitionResponseTaskDefinition registeredAt(OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
    return this;
  }

  /**
   * Get registeredAt
   * @return registeredAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRegisteredAt() {
    return registeredAt;
  }

  public void setRegisteredAt(OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
  }


  public RegisterTaskDefinitionResponseTaskDefinition deregisteredAt(OffsetDateTime deregisteredAt) {
    this.deregisteredAt = deregisteredAt;
    return this;
  }

  /**
   * Get deregisteredAt
   * @return deregisteredAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeregisteredAt() {
    return deregisteredAt;
  }

  public void setDeregisteredAt(OffsetDateTime deregisteredAt) {
    this.deregisteredAt = deregisteredAt;
  }


  public RegisterTaskDefinitionResponseTaskDefinition registeredBy(String registeredBy) {
    this.registeredBy = registeredBy;
    return this;
  }

  /**
   * Get registeredBy
   * @return registeredBy
   */
  @javax.annotation.Nullable
  public String getRegisteredBy() {
    return registeredBy;
  }

  public void setRegisteredBy(String registeredBy) {
    this.registeredBy = registeredBy;
  }


  public RegisterTaskDefinitionResponseTaskDefinition ephemeralStorage(TaskDefinitionEphemeralStorage ephemeralStorage) {
    this.ephemeralStorage = ephemeralStorage;
    return this;
  }

  /**
   * Get ephemeralStorage
   * @return ephemeralStorage
   */
  @javax.annotation.Nullable
  public TaskDefinitionEphemeralStorage getEphemeralStorage() {
    return ephemeralStorage;
  }

  public void setEphemeralStorage(TaskDefinitionEphemeralStorage ephemeralStorage) {
    this.ephemeralStorage = ephemeralStorage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterTaskDefinitionResponseTaskDefinition registerTaskDefinitionResponseTaskDefinition = (RegisterTaskDefinitionResponseTaskDefinition) o;
    return Objects.equals(this.taskDefinitionArn, registerTaskDefinitionResponseTaskDefinition.taskDefinitionArn) &&
        Objects.equals(this.containerDefinitions, registerTaskDefinitionResponseTaskDefinition.containerDefinitions) &&
        Objects.equals(this.family, registerTaskDefinitionResponseTaskDefinition.family) &&
        Objects.equals(this.taskRoleArn, registerTaskDefinitionResponseTaskDefinition.taskRoleArn) &&
        Objects.equals(this.executionRoleArn, registerTaskDefinitionResponseTaskDefinition.executionRoleArn) &&
        Objects.equals(this.networkMode, registerTaskDefinitionResponseTaskDefinition.networkMode) &&
        Objects.equals(this.revision, registerTaskDefinitionResponseTaskDefinition.revision) &&
        Objects.equals(this.volumes, registerTaskDefinitionResponseTaskDefinition.volumes) &&
        Objects.equals(this.status, registerTaskDefinitionResponseTaskDefinition.status) &&
        Objects.equals(this.requiresAttributes, registerTaskDefinitionResponseTaskDefinition.requiresAttributes) &&
        Objects.equals(this.placementConstraints, registerTaskDefinitionResponseTaskDefinition.placementConstraints) &&
        Objects.equals(this.compatibilities, registerTaskDefinitionResponseTaskDefinition.compatibilities) &&
        Objects.equals(this.runtimePlatform, registerTaskDefinitionResponseTaskDefinition.runtimePlatform) &&
        Objects.equals(this.requiresCompatibilities, registerTaskDefinitionResponseTaskDefinition.requiresCompatibilities) &&
        Objects.equals(this.cpu, registerTaskDefinitionResponseTaskDefinition.cpu) &&
        Objects.equals(this.memory, registerTaskDefinitionResponseTaskDefinition.memory) &&
        Objects.equals(this.inferenceAccelerators, registerTaskDefinitionResponseTaskDefinition.inferenceAccelerators) &&
        Objects.equals(this.pidMode, registerTaskDefinitionResponseTaskDefinition.pidMode) &&
        Objects.equals(this.ipcMode, registerTaskDefinitionResponseTaskDefinition.ipcMode) &&
        Objects.equals(this.proxyConfiguration, registerTaskDefinitionResponseTaskDefinition.proxyConfiguration) &&
        Objects.equals(this.registeredAt, registerTaskDefinitionResponseTaskDefinition.registeredAt) &&
        Objects.equals(this.deregisteredAt, registerTaskDefinitionResponseTaskDefinition.deregisteredAt) &&
        Objects.equals(this.registeredBy, registerTaskDefinitionResponseTaskDefinition.registeredBy) &&
        Objects.equals(this.ephemeralStorage, registerTaskDefinitionResponseTaskDefinition.ephemeralStorage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taskDefinitionArn, containerDefinitions, family, taskRoleArn, executionRoleArn, networkMode, revision, volumes, status, requiresAttributes, placementConstraints, compatibilities, runtimePlatform, requiresCompatibilities, cpu, memory, inferenceAccelerators, pidMode, ipcMode, proxyConfiguration, registeredAt, deregisteredAt, registeredBy, ephemeralStorage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterTaskDefinitionResponseTaskDefinition {\n");
    sb.append("    taskDefinitionArn: ").append(toIndentedString(taskDefinitionArn)).append("\n");
    sb.append("    containerDefinitions: ").append(toIndentedString(containerDefinitions)).append("\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    taskRoleArn: ").append(toIndentedString(taskRoleArn)).append("\n");
    sb.append("    executionRoleArn: ").append(toIndentedString(executionRoleArn)).append("\n");
    sb.append("    networkMode: ").append(toIndentedString(networkMode)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    requiresAttributes: ").append(toIndentedString(requiresAttributes)).append("\n");
    sb.append("    placementConstraints: ").append(toIndentedString(placementConstraints)).append("\n");
    sb.append("    compatibilities: ").append(toIndentedString(compatibilities)).append("\n");
    sb.append("    runtimePlatform: ").append(toIndentedString(runtimePlatform)).append("\n");
    sb.append("    requiresCompatibilities: ").append(toIndentedString(requiresCompatibilities)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    inferenceAccelerators: ").append(toIndentedString(inferenceAccelerators)).append("\n");
    sb.append("    pidMode: ").append(toIndentedString(pidMode)).append("\n");
    sb.append("    ipcMode: ").append(toIndentedString(ipcMode)).append("\n");
    sb.append("    proxyConfiguration: ").append(toIndentedString(proxyConfiguration)).append("\n");
    sb.append("    registeredAt: ").append(toIndentedString(registeredAt)).append("\n");
    sb.append("    deregisteredAt: ").append(toIndentedString(deregisteredAt)).append("\n");
    sb.append("    registeredBy: ").append(toIndentedString(registeredBy)).append("\n");
    sb.append("    ephemeralStorage: ").append(toIndentedString(ephemeralStorage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("taskDefinitionArn");
    openapiFields.add("containerDefinitions");
    openapiFields.add("family");
    openapiFields.add("taskRoleArn");
    openapiFields.add("executionRoleArn");
    openapiFields.add("networkMode");
    openapiFields.add("revision");
    openapiFields.add("volumes");
    openapiFields.add("status");
    openapiFields.add("requiresAttributes");
    openapiFields.add("placementConstraints");
    openapiFields.add("compatibilities");
    openapiFields.add("runtimePlatform");
    openapiFields.add("requiresCompatibilities");
    openapiFields.add("cpu");
    openapiFields.add("memory");
    openapiFields.add("inferenceAccelerators");
    openapiFields.add("pidMode");
    openapiFields.add("ipcMode");
    openapiFields.add("proxyConfiguration");
    openapiFields.add("registeredAt");
    openapiFields.add("deregisteredAt");
    openapiFields.add("registeredBy");
    openapiFields.add("ephemeralStorage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterTaskDefinitionResponseTaskDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterTaskDefinitionResponseTaskDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterTaskDefinitionResponseTaskDefinition is not found in the empty JSON string", RegisterTaskDefinitionResponseTaskDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterTaskDefinitionResponseTaskDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterTaskDefinitionResponseTaskDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `taskDefinitionArn`
      if (jsonObj.get("taskDefinitionArn") != null && !jsonObj.get("taskDefinitionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("taskDefinitionArn"));
      }
      // validate the optional field `containerDefinitions`
      if (jsonObj.get("containerDefinitions") != null && !jsonObj.get("containerDefinitions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("containerDefinitions"));
      }
      // validate the optional field `family`
      if (jsonObj.get("family") != null && !jsonObj.get("family").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("family"));
      }
      // validate the optional field `taskRoleArn`
      if (jsonObj.get("taskRoleArn") != null && !jsonObj.get("taskRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("taskRoleArn"));
      }
      // validate the optional field `executionRoleArn`
      if (jsonObj.get("executionRoleArn") != null && !jsonObj.get("executionRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("executionRoleArn"));
      }
      // validate the optional field `networkMode`
      if (jsonObj.get("networkMode") != null && !jsonObj.get("networkMode").isJsonNull()) {
        NetworkMode.validateJsonElement(jsonObj.get("networkMode"));
      }
      // validate the optional field `revision`
      if (jsonObj.get("revision") != null && !jsonObj.get("revision").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("revision"));
      }
      // validate the optional field `volumes`
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("volumes"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        TaskDefinitionStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `requiresAttributes`
      if (jsonObj.get("requiresAttributes") != null && !jsonObj.get("requiresAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("requiresAttributes"));
      }
      // validate the optional field `placementConstraints`
      if (jsonObj.get("placementConstraints") != null && !jsonObj.get("placementConstraints").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("placementConstraints"));
      }
      // validate the optional field `compatibilities`
      if (jsonObj.get("compatibilities") != null && !jsonObj.get("compatibilities").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("compatibilities"));
      }
      // validate the optional field `runtimePlatform`
      if (jsonObj.get("runtimePlatform") != null && !jsonObj.get("runtimePlatform").isJsonNull()) {
        TaskDefinitionRuntimePlatform.validateJsonElement(jsonObj.get("runtimePlatform"));
      }
      // validate the optional field `requiresCompatibilities`
      if (jsonObj.get("requiresCompatibilities") != null && !jsonObj.get("requiresCompatibilities").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("requiresCompatibilities"));
      }
      // validate the optional field `cpu`
      if (jsonObj.get("cpu") != null && !jsonObj.get("cpu").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cpu"));
      }
      // validate the optional field `memory`
      if (jsonObj.get("memory") != null && !jsonObj.get("memory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("memory"));
      }
      // validate the optional field `inferenceAccelerators`
      if (jsonObj.get("inferenceAccelerators") != null && !jsonObj.get("inferenceAccelerators").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("inferenceAccelerators"));
      }
      // validate the optional field `pidMode`
      if (jsonObj.get("pidMode") != null && !jsonObj.get("pidMode").isJsonNull()) {
        PidMode.validateJsonElement(jsonObj.get("pidMode"));
      }
      // validate the optional field `ipcMode`
      if (jsonObj.get("ipcMode") != null && !jsonObj.get("ipcMode").isJsonNull()) {
        IpcMode.validateJsonElement(jsonObj.get("ipcMode"));
      }
      // validate the optional field `proxyConfiguration`
      if (jsonObj.get("proxyConfiguration") != null && !jsonObj.get("proxyConfiguration").isJsonNull()) {
        TaskDefinitionProxyConfiguration.validateJsonElement(jsonObj.get("proxyConfiguration"));
      }
      // validate the optional field `registeredAt`
      if (jsonObj.get("registeredAt") != null && !jsonObj.get("registeredAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("registeredAt"));
      }
      // validate the optional field `deregisteredAt`
      if (jsonObj.get("deregisteredAt") != null && !jsonObj.get("deregisteredAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("deregisteredAt"));
      }
      // validate the optional field `registeredBy`
      if (jsonObj.get("registeredBy") != null && !jsonObj.get("registeredBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("registeredBy"));
      }
      // validate the optional field `ephemeralStorage`
      if (jsonObj.get("ephemeralStorage") != null && !jsonObj.get("ephemeralStorage").isJsonNull()) {
        TaskDefinitionEphemeralStorage.validateJsonElement(jsonObj.get("ephemeralStorage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterTaskDefinitionResponseTaskDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterTaskDefinitionResponseTaskDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterTaskDefinitionResponseTaskDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterTaskDefinitionResponseTaskDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterTaskDefinitionResponseTaskDefinition>() {
           @Override
           public void write(JsonWriter out, RegisterTaskDefinitionResponseTaskDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterTaskDefinitionResponseTaskDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterTaskDefinitionResponseTaskDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterTaskDefinitionResponseTaskDefinition
   * @throws IOException if the JSON string is invalid with respect to RegisterTaskDefinitionResponseTaskDefinition
   */
  public static RegisterTaskDefinitionResponseTaskDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterTaskDefinitionResponseTaskDefinition.class);
  }

  /**
   * Convert an instance of RegisterTaskDefinitionResponseTaskDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

