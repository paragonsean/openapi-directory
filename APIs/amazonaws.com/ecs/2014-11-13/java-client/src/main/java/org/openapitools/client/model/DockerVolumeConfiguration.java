/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.Scope;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This parameter is specified when you&#39;re using Docker volumes. Docker volumes are only supported when you&#39;re using the EC2 launch type. Windows containers only support the use of the &lt;code&gt;local&lt;/code&gt; driver. To use bind mounts, specify a &lt;code&gt;host&lt;/code&gt; instead.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DockerVolumeConfiguration {
  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private Scope scope;

  public static final String SERIALIZED_NAME_AUTOPROVISION = "autoprovision";
  @SerializedName(SERIALIZED_NAME_AUTOPROVISION)
  private Boolean autoprovision;

  public static final String SERIALIZED_NAME_DRIVER = "driver";
  @SerializedName(SERIALIZED_NAME_DRIVER)
  private String driver;

  public static final String SERIALIZED_NAME_DRIVER_OPTS = "driverOpts";
  @SerializedName(SERIALIZED_NAME_DRIVER_OPTS)
  private Map driverOpts;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map labels;

  public DockerVolumeConfiguration() {
  }

  public DockerVolumeConfiguration scope(Scope scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public Scope getScope() {
    return scope;
  }

  public void setScope(Scope scope) {
    this.scope = scope;
  }


  public DockerVolumeConfiguration autoprovision(Boolean autoprovision) {
    this.autoprovision = autoprovision;
    return this;
  }

  /**
   * Get autoprovision
   * @return autoprovision
   */
  @javax.annotation.Nullable
  public Boolean getAutoprovision() {
    return autoprovision;
  }

  public void setAutoprovision(Boolean autoprovision) {
    this.autoprovision = autoprovision;
  }


  public DockerVolumeConfiguration driver(String driver) {
    this.driver = driver;
    return this;
  }

  /**
   * Get driver
   * @return driver
   */
  @javax.annotation.Nullable
  public String getDriver() {
    return driver;
  }

  public void setDriver(String driver) {
    this.driver = driver;
  }


  public DockerVolumeConfiguration driverOpts(Map driverOpts) {
    this.driverOpts = driverOpts;
    return this;
  }

  /**
   * Get driverOpts
   * @return driverOpts
   */
  @javax.annotation.Nullable
  public Map getDriverOpts() {
    return driverOpts;
  }

  public void setDriverOpts(Map driverOpts) {
    this.driverOpts = driverOpts;
  }


  public DockerVolumeConfiguration labels(Map labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public Map getLabels() {
    return labels;
  }

  public void setLabels(Map labels) {
    this.labels = labels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DockerVolumeConfiguration dockerVolumeConfiguration = (DockerVolumeConfiguration) o;
    return Objects.equals(this.scope, dockerVolumeConfiguration.scope) &&
        Objects.equals(this.autoprovision, dockerVolumeConfiguration.autoprovision) &&
        Objects.equals(this.driver, dockerVolumeConfiguration.driver) &&
        Objects.equals(this.driverOpts, dockerVolumeConfiguration.driverOpts) &&
        Objects.equals(this.labels, dockerVolumeConfiguration.labels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scope, autoprovision, driver, driverOpts, labels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DockerVolumeConfiguration {\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    autoprovision: ").append(toIndentedString(autoprovision)).append("\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    driverOpts: ").append(toIndentedString(driverOpts)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scope");
    openapiFields.add("autoprovision");
    openapiFields.add("driver");
    openapiFields.add("driverOpts");
    openapiFields.add("labels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DockerVolumeConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DockerVolumeConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DockerVolumeConfiguration is not found in the empty JSON string", DockerVolumeConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DockerVolumeConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DockerVolumeConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `scope`
      if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) {
        Scope.validateJsonElement(jsonObj.get("scope"));
      }
      // validate the optional field `autoprovision`
      if (jsonObj.get("autoprovision") != null && !jsonObj.get("autoprovision").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("autoprovision"));
      }
      // validate the optional field `driver`
      if (jsonObj.get("driver") != null && !jsonObj.get("driver").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("driver"));
      }
      // validate the optional field `driverOpts`
      if (jsonObj.get("driverOpts") != null && !jsonObj.get("driverOpts").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("driverOpts"));
      }
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("labels"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DockerVolumeConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DockerVolumeConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DockerVolumeConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DockerVolumeConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DockerVolumeConfiguration>() {
           @Override
           public void write(JsonWriter out, DockerVolumeConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DockerVolumeConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DockerVolumeConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DockerVolumeConfiguration
   * @throws IOException if the JSON string is invalid with respect to DockerVolumeConfiguration
   */
  public static DockerVolumeConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DockerVolumeConfiguration.class);
  }

  /**
   * Convert an instance of DockerVolumeConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

