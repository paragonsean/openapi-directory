/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeploymentRolloutState;
import org.openapitools.client.model.DeploymentServiceConnectConfiguration;
import org.openapitools.client.model.LaunchType;
import org.openapitools.client.model.StartTaskRequestNetworkConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of an Amazon ECS service deployment. This is used only when a service uses the &lt;code&gt;ECS&lt;/code&gt; deployment controller type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Deployment {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TASK_DEFINITION = "taskDefinition";
  @SerializedName(SERIALIZED_NAME_TASK_DEFINITION)
  private String taskDefinition;

  public static final String SERIALIZED_NAME_DESIRED_COUNT = "desiredCount";
  @SerializedName(SERIALIZED_NAME_DESIRED_COUNT)
  private Integer desiredCount;

  public static final String SERIALIZED_NAME_PENDING_COUNT = "pendingCount";
  @SerializedName(SERIALIZED_NAME_PENDING_COUNT)
  private Integer pendingCount;

  public static final String SERIALIZED_NAME_RUNNING_COUNT = "runningCount";
  @SerializedName(SERIALIZED_NAME_RUNNING_COUNT)
  private Integer runningCount;

  public static final String SERIALIZED_NAME_FAILED_TASKS = "failedTasks";
  @SerializedName(SERIALIZED_NAME_FAILED_TASKS)
  private Integer failedTasks;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_CAPACITY_PROVIDER_STRATEGY = "capacityProviderStrategy";
  @SerializedName(SERIALIZED_NAME_CAPACITY_PROVIDER_STRATEGY)
  private List capacityProviderStrategy;

  public static final String SERIALIZED_NAME_LAUNCH_TYPE = "launchType";
  @SerializedName(SERIALIZED_NAME_LAUNCH_TYPE)
  private LaunchType launchType;

  public static final String SERIALIZED_NAME_PLATFORM_VERSION = "platformVersion";
  @SerializedName(SERIALIZED_NAME_PLATFORM_VERSION)
  private String platformVersion;

  public static final String SERIALIZED_NAME_PLATFORM_FAMILY = "platformFamily";
  @SerializedName(SERIALIZED_NAME_PLATFORM_FAMILY)
  private String platformFamily;

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATION = "networkConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATION)
  private StartTaskRequestNetworkConfiguration networkConfiguration;

  public static final String SERIALIZED_NAME_ROLLOUT_STATE = "rolloutState";
  @SerializedName(SERIALIZED_NAME_ROLLOUT_STATE)
  private DeploymentRolloutState rolloutState;

  public static final String SERIALIZED_NAME_ROLLOUT_STATE_REASON = "rolloutStateReason";
  @SerializedName(SERIALIZED_NAME_ROLLOUT_STATE_REASON)
  private String rolloutStateReason;

  public static final String SERIALIZED_NAME_SERVICE_CONNECT_CONFIGURATION = "serviceConnectConfiguration";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONNECT_CONFIGURATION)
  private DeploymentServiceConnectConfiguration serviceConnectConfiguration;

  public static final String SERIALIZED_NAME_SERVICE_CONNECT_RESOURCES = "serviceConnectResources";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONNECT_RESOURCES)
  private List serviceConnectResources;

  public Deployment() {
  }

  public Deployment id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Deployment status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Deployment taskDefinition(String taskDefinition) {
    this.taskDefinition = taskDefinition;
    return this;
  }

  /**
   * Get taskDefinition
   * @return taskDefinition
   */
  @javax.annotation.Nullable
  public String getTaskDefinition() {
    return taskDefinition;
  }

  public void setTaskDefinition(String taskDefinition) {
    this.taskDefinition = taskDefinition;
  }


  public Deployment desiredCount(Integer desiredCount) {
    this.desiredCount = desiredCount;
    return this;
  }

  /**
   * Get desiredCount
   * @return desiredCount
   */
  @javax.annotation.Nullable
  public Integer getDesiredCount() {
    return desiredCount;
  }

  public void setDesiredCount(Integer desiredCount) {
    this.desiredCount = desiredCount;
  }


  public Deployment pendingCount(Integer pendingCount) {
    this.pendingCount = pendingCount;
    return this;
  }

  /**
   * Get pendingCount
   * @return pendingCount
   */
  @javax.annotation.Nullable
  public Integer getPendingCount() {
    return pendingCount;
  }

  public void setPendingCount(Integer pendingCount) {
    this.pendingCount = pendingCount;
  }


  public Deployment runningCount(Integer runningCount) {
    this.runningCount = runningCount;
    return this;
  }

  /**
   * Get runningCount
   * @return runningCount
   */
  @javax.annotation.Nullable
  public Integer getRunningCount() {
    return runningCount;
  }

  public void setRunningCount(Integer runningCount) {
    this.runningCount = runningCount;
  }


  public Deployment failedTasks(Integer failedTasks) {
    this.failedTasks = failedTasks;
    return this;
  }

  /**
   * Get failedTasks
   * @return failedTasks
   */
  @javax.annotation.Nullable
  public Integer getFailedTasks() {
    return failedTasks;
  }

  public void setFailedTasks(Integer failedTasks) {
    this.failedTasks = failedTasks;
  }


  public Deployment createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Deployment updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Deployment capacityProviderStrategy(List capacityProviderStrategy) {
    this.capacityProviderStrategy = capacityProviderStrategy;
    return this;
  }

  /**
   * Get capacityProviderStrategy
   * @return capacityProviderStrategy
   */
  @javax.annotation.Nullable
  public List getCapacityProviderStrategy() {
    return capacityProviderStrategy;
  }

  public void setCapacityProviderStrategy(List capacityProviderStrategy) {
    this.capacityProviderStrategy = capacityProviderStrategy;
  }


  public Deployment launchType(LaunchType launchType) {
    this.launchType = launchType;
    return this;
  }

  /**
   * Get launchType
   * @return launchType
   */
  @javax.annotation.Nullable
  public LaunchType getLaunchType() {
    return launchType;
  }

  public void setLaunchType(LaunchType launchType) {
    this.launchType = launchType;
  }


  public Deployment platformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
    return this;
  }

  /**
   * Get platformVersion
   * @return platformVersion
   */
  @javax.annotation.Nullable
  public String getPlatformVersion() {
    return platformVersion;
  }

  public void setPlatformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
  }


  public Deployment platformFamily(String platformFamily) {
    this.platformFamily = platformFamily;
    return this;
  }

  /**
   * Get platformFamily
   * @return platformFamily
   */
  @javax.annotation.Nullable
  public String getPlatformFamily() {
    return platformFamily;
  }

  public void setPlatformFamily(String platformFamily) {
    this.platformFamily = platformFamily;
  }


  public Deployment networkConfiguration(StartTaskRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
    return this;
  }

  /**
   * Get networkConfiguration
   * @return networkConfiguration
   */
  @javax.annotation.Nullable
  public StartTaskRequestNetworkConfiguration getNetworkConfiguration() {
    return networkConfiguration;
  }

  public void setNetworkConfiguration(StartTaskRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
  }


  public Deployment rolloutState(DeploymentRolloutState rolloutState) {
    this.rolloutState = rolloutState;
    return this;
  }

  /**
   * Get rolloutState
   * @return rolloutState
   */
  @javax.annotation.Nullable
  public DeploymentRolloutState getRolloutState() {
    return rolloutState;
  }

  public void setRolloutState(DeploymentRolloutState rolloutState) {
    this.rolloutState = rolloutState;
  }


  public Deployment rolloutStateReason(String rolloutStateReason) {
    this.rolloutStateReason = rolloutStateReason;
    return this;
  }

  /**
   * Get rolloutStateReason
   * @return rolloutStateReason
   */
  @javax.annotation.Nullable
  public String getRolloutStateReason() {
    return rolloutStateReason;
  }

  public void setRolloutStateReason(String rolloutStateReason) {
    this.rolloutStateReason = rolloutStateReason;
  }


  public Deployment serviceConnectConfiguration(DeploymentServiceConnectConfiguration serviceConnectConfiguration) {
    this.serviceConnectConfiguration = serviceConnectConfiguration;
    return this;
  }

  /**
   * Get serviceConnectConfiguration
   * @return serviceConnectConfiguration
   */
  @javax.annotation.Nullable
  public DeploymentServiceConnectConfiguration getServiceConnectConfiguration() {
    return serviceConnectConfiguration;
  }

  public void setServiceConnectConfiguration(DeploymentServiceConnectConfiguration serviceConnectConfiguration) {
    this.serviceConnectConfiguration = serviceConnectConfiguration;
  }


  public Deployment serviceConnectResources(List serviceConnectResources) {
    this.serviceConnectResources = serviceConnectResources;
    return this;
  }

  /**
   * Get serviceConnectResources
   * @return serviceConnectResources
   */
  @javax.annotation.Nullable
  public List getServiceConnectResources() {
    return serviceConnectResources;
  }

  public void setServiceConnectResources(List serviceConnectResources) {
    this.serviceConnectResources = serviceConnectResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Deployment deployment = (Deployment) o;
    return Objects.equals(this.id, deployment.id) &&
        Objects.equals(this.status, deployment.status) &&
        Objects.equals(this.taskDefinition, deployment.taskDefinition) &&
        Objects.equals(this.desiredCount, deployment.desiredCount) &&
        Objects.equals(this.pendingCount, deployment.pendingCount) &&
        Objects.equals(this.runningCount, deployment.runningCount) &&
        Objects.equals(this.failedTasks, deployment.failedTasks) &&
        Objects.equals(this.createdAt, deployment.createdAt) &&
        Objects.equals(this.updatedAt, deployment.updatedAt) &&
        Objects.equals(this.capacityProviderStrategy, deployment.capacityProviderStrategy) &&
        Objects.equals(this.launchType, deployment.launchType) &&
        Objects.equals(this.platformVersion, deployment.platformVersion) &&
        Objects.equals(this.platformFamily, deployment.platformFamily) &&
        Objects.equals(this.networkConfiguration, deployment.networkConfiguration) &&
        Objects.equals(this.rolloutState, deployment.rolloutState) &&
        Objects.equals(this.rolloutStateReason, deployment.rolloutStateReason) &&
        Objects.equals(this.serviceConnectConfiguration, deployment.serviceConnectConfiguration) &&
        Objects.equals(this.serviceConnectResources, deployment.serviceConnectResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, status, taskDefinition, desiredCount, pendingCount, runningCount, failedTasks, createdAt, updatedAt, capacityProviderStrategy, launchType, platformVersion, platformFamily, networkConfiguration, rolloutState, rolloutStateReason, serviceConnectConfiguration, serviceConnectResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Deployment {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taskDefinition: ").append(toIndentedString(taskDefinition)).append("\n");
    sb.append("    desiredCount: ").append(toIndentedString(desiredCount)).append("\n");
    sb.append("    pendingCount: ").append(toIndentedString(pendingCount)).append("\n");
    sb.append("    runningCount: ").append(toIndentedString(runningCount)).append("\n");
    sb.append("    failedTasks: ").append(toIndentedString(failedTasks)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    capacityProviderStrategy: ").append(toIndentedString(capacityProviderStrategy)).append("\n");
    sb.append("    launchType: ").append(toIndentedString(launchType)).append("\n");
    sb.append("    platformVersion: ").append(toIndentedString(platformVersion)).append("\n");
    sb.append("    platformFamily: ").append(toIndentedString(platformFamily)).append("\n");
    sb.append("    networkConfiguration: ").append(toIndentedString(networkConfiguration)).append("\n");
    sb.append("    rolloutState: ").append(toIndentedString(rolloutState)).append("\n");
    sb.append("    rolloutStateReason: ").append(toIndentedString(rolloutStateReason)).append("\n");
    sb.append("    serviceConnectConfiguration: ").append(toIndentedString(serviceConnectConfiguration)).append("\n");
    sb.append("    serviceConnectResources: ").append(toIndentedString(serviceConnectResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("taskDefinition");
    openapiFields.add("desiredCount");
    openapiFields.add("pendingCount");
    openapiFields.add("runningCount");
    openapiFields.add("failedTasks");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("capacityProviderStrategy");
    openapiFields.add("launchType");
    openapiFields.add("platformVersion");
    openapiFields.add("platformFamily");
    openapiFields.add("networkConfiguration");
    openapiFields.add("rolloutState");
    openapiFields.add("rolloutStateReason");
    openapiFields.add("serviceConnectConfiguration");
    openapiFields.add("serviceConnectResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Deployment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Deployment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Deployment is not found in the empty JSON string", Deployment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Deployment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Deployment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `taskDefinition`
      if (jsonObj.get("taskDefinition") != null && !jsonObj.get("taskDefinition").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("taskDefinition"));
      }
      // validate the optional field `desiredCount`
      if (jsonObj.get("desiredCount") != null && !jsonObj.get("desiredCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("desiredCount"));
      }
      // validate the optional field `pendingCount`
      if (jsonObj.get("pendingCount") != null && !jsonObj.get("pendingCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("pendingCount"));
      }
      // validate the optional field `runningCount`
      if (jsonObj.get("runningCount") != null && !jsonObj.get("runningCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("runningCount"));
      }
      // validate the optional field `failedTasks`
      if (jsonObj.get("failedTasks") != null && !jsonObj.get("failedTasks").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("failedTasks"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      }
      // validate the optional field `capacityProviderStrategy`
      if (jsonObj.get("capacityProviderStrategy") != null && !jsonObj.get("capacityProviderStrategy").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("capacityProviderStrategy"));
      }
      // validate the optional field `launchType`
      if (jsonObj.get("launchType") != null && !jsonObj.get("launchType").isJsonNull()) {
        LaunchType.validateJsonElement(jsonObj.get("launchType"));
      }
      // validate the optional field `platformVersion`
      if (jsonObj.get("platformVersion") != null && !jsonObj.get("platformVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("platformVersion"));
      }
      // validate the optional field `platformFamily`
      if (jsonObj.get("platformFamily") != null && !jsonObj.get("platformFamily").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("platformFamily"));
      }
      // validate the optional field `networkConfiguration`
      if (jsonObj.get("networkConfiguration") != null && !jsonObj.get("networkConfiguration").isJsonNull()) {
        StartTaskRequestNetworkConfiguration.validateJsonElement(jsonObj.get("networkConfiguration"));
      }
      // validate the optional field `rolloutState`
      if (jsonObj.get("rolloutState") != null && !jsonObj.get("rolloutState").isJsonNull()) {
        DeploymentRolloutState.validateJsonElement(jsonObj.get("rolloutState"));
      }
      // validate the optional field `rolloutStateReason`
      if (jsonObj.get("rolloutStateReason") != null && !jsonObj.get("rolloutStateReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("rolloutStateReason"));
      }
      // validate the optional field `serviceConnectConfiguration`
      if (jsonObj.get("serviceConnectConfiguration") != null && !jsonObj.get("serviceConnectConfiguration").isJsonNull()) {
        DeploymentServiceConnectConfiguration.validateJsonElement(jsonObj.get("serviceConnectConfiguration"));
      }
      // validate the optional field `serviceConnectResources`
      if (jsonObj.get("serviceConnectResources") != null && !jsonObj.get("serviceConnectResources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("serviceConnectResources"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Deployment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Deployment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Deployment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Deployment.class));

       return (TypeAdapter<T>) new TypeAdapter<Deployment>() {
           @Override
           public void write(JsonWriter out, Deployment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Deployment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Deployment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Deployment
   * @throws IOException if the JSON string is invalid with respect to Deployment
   */
  public static Deployment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Deployment.class);
  }

  /**
   * Convert an instance of Deployment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

