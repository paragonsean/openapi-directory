/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LaunchType;
import org.openapitools.client.model.PropagateTags;
import org.openapitools.client.model.RunTaskRequestNetworkConfiguration;
import org.openapitools.client.model.RunTaskRequestOverrides;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RunTaskRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunTaskRequest {
  public static final String SERIALIZED_NAME_CAPACITY_PROVIDER_STRATEGY = "capacityProviderStrategy";
  @SerializedName(SERIALIZED_NAME_CAPACITY_PROVIDER_STRATEGY)
  private List capacityProviderStrategy;

  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_ENABLE_E_C_S_MANAGED_TAGS = "enableECSManagedTags";
  @SerializedName(SERIALIZED_NAME_ENABLE_E_C_S_MANAGED_TAGS)
  private Boolean enableECSManagedTags;

  public static final String SERIALIZED_NAME_ENABLE_EXECUTE_COMMAND = "enableExecuteCommand";
  @SerializedName(SERIALIZED_NAME_ENABLE_EXECUTE_COMMAND)
  private Boolean enableExecuteCommand;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_LAUNCH_TYPE = "launchType";
  @SerializedName(SERIALIZED_NAME_LAUNCH_TYPE)
  private LaunchType launchType;

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATION = "networkConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATION)
  private RunTaskRequestNetworkConfiguration networkConfiguration;

  public static final String SERIALIZED_NAME_OVERRIDES = "overrides";
  @SerializedName(SERIALIZED_NAME_OVERRIDES)
  private RunTaskRequestOverrides overrides;

  public static final String SERIALIZED_NAME_PLACEMENT_CONSTRAINTS = "placementConstraints";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_CONSTRAINTS)
  private List placementConstraints;

  public static final String SERIALIZED_NAME_PLACEMENT_STRATEGY = "placementStrategy";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_STRATEGY)
  private List placementStrategy;

  public static final String SERIALIZED_NAME_PLATFORM_VERSION = "platformVersion";
  @SerializedName(SERIALIZED_NAME_PLATFORM_VERSION)
  private String platformVersion;

  public static final String SERIALIZED_NAME_PROPAGATE_TAGS = "propagateTags";
  @SerializedName(SERIALIZED_NAME_PROPAGATE_TAGS)
  private PropagateTags propagateTags;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_STARTED_BY = "startedBy";
  @SerializedName(SERIALIZED_NAME_STARTED_BY)
  private String startedBy;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_TASK_DEFINITION = "taskDefinition";
  @SerializedName(SERIALIZED_NAME_TASK_DEFINITION)
  private String taskDefinition;

  public RunTaskRequest() {
  }

  public RunTaskRequest capacityProviderStrategy(List capacityProviderStrategy) {
    this.capacityProviderStrategy = capacityProviderStrategy;
    return this;
  }

  /**
   * Get capacityProviderStrategy
   * @return capacityProviderStrategy
   */
  @javax.annotation.Nullable
  public List getCapacityProviderStrategy() {
    return capacityProviderStrategy;
  }

  public void setCapacityProviderStrategy(List capacityProviderStrategy) {
    this.capacityProviderStrategy = capacityProviderStrategy;
  }


  public RunTaskRequest cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * Get cluster
   * @return cluster
   */
  @javax.annotation.Nullable
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public RunTaskRequest count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public RunTaskRequest enableECSManagedTags(Boolean enableECSManagedTags) {
    this.enableECSManagedTags = enableECSManagedTags;
    return this;
  }

  /**
   * Get enableECSManagedTags
   * @return enableECSManagedTags
   */
  @javax.annotation.Nullable
  public Boolean getEnableECSManagedTags() {
    return enableECSManagedTags;
  }

  public void setEnableECSManagedTags(Boolean enableECSManagedTags) {
    this.enableECSManagedTags = enableECSManagedTags;
  }


  public RunTaskRequest enableExecuteCommand(Boolean enableExecuteCommand) {
    this.enableExecuteCommand = enableExecuteCommand;
    return this;
  }

  /**
   * Get enableExecuteCommand
   * @return enableExecuteCommand
   */
  @javax.annotation.Nullable
  public Boolean getEnableExecuteCommand() {
    return enableExecuteCommand;
  }

  public void setEnableExecuteCommand(Boolean enableExecuteCommand) {
    this.enableExecuteCommand = enableExecuteCommand;
  }


  public RunTaskRequest group(String group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public RunTaskRequest launchType(LaunchType launchType) {
    this.launchType = launchType;
    return this;
  }

  /**
   * Get launchType
   * @return launchType
   */
  @javax.annotation.Nullable
  public LaunchType getLaunchType() {
    return launchType;
  }

  public void setLaunchType(LaunchType launchType) {
    this.launchType = launchType;
  }


  public RunTaskRequest networkConfiguration(RunTaskRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
    return this;
  }

  /**
   * Get networkConfiguration
   * @return networkConfiguration
   */
  @javax.annotation.Nullable
  public RunTaskRequestNetworkConfiguration getNetworkConfiguration() {
    return networkConfiguration;
  }

  public void setNetworkConfiguration(RunTaskRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
  }


  public RunTaskRequest overrides(RunTaskRequestOverrides overrides) {
    this.overrides = overrides;
    return this;
  }

  /**
   * Get overrides
   * @return overrides
   */
  @javax.annotation.Nullable
  public RunTaskRequestOverrides getOverrides() {
    return overrides;
  }

  public void setOverrides(RunTaskRequestOverrides overrides) {
    this.overrides = overrides;
  }


  public RunTaskRequest placementConstraints(List placementConstraints) {
    this.placementConstraints = placementConstraints;
    return this;
  }

  /**
   * Get placementConstraints
   * @return placementConstraints
   */
  @javax.annotation.Nullable
  public List getPlacementConstraints() {
    return placementConstraints;
  }

  public void setPlacementConstraints(List placementConstraints) {
    this.placementConstraints = placementConstraints;
  }


  public RunTaskRequest placementStrategy(List placementStrategy) {
    this.placementStrategy = placementStrategy;
    return this;
  }

  /**
   * Get placementStrategy
   * @return placementStrategy
   */
  @javax.annotation.Nullable
  public List getPlacementStrategy() {
    return placementStrategy;
  }

  public void setPlacementStrategy(List placementStrategy) {
    this.placementStrategy = placementStrategy;
  }


  public RunTaskRequest platformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
    return this;
  }

  /**
   * Get platformVersion
   * @return platformVersion
   */
  @javax.annotation.Nullable
  public String getPlatformVersion() {
    return platformVersion;
  }

  public void setPlatformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
  }


  public RunTaskRequest propagateTags(PropagateTags propagateTags) {
    this.propagateTags = propagateTags;
    return this;
  }

  /**
   * Get propagateTags
   * @return propagateTags
   */
  @javax.annotation.Nullable
  public PropagateTags getPropagateTags() {
    return propagateTags;
  }

  public void setPropagateTags(PropagateTags propagateTags) {
    this.propagateTags = propagateTags;
  }


  public RunTaskRequest referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nullable
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public RunTaskRequest startedBy(String startedBy) {
    this.startedBy = startedBy;
    return this;
  }

  /**
   * Get startedBy
   * @return startedBy
   */
  @javax.annotation.Nullable
  public String getStartedBy() {
    return startedBy;
  }

  public void setStartedBy(String startedBy) {
    this.startedBy = startedBy;
  }


  public RunTaskRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public RunTaskRequest taskDefinition(String taskDefinition) {
    this.taskDefinition = taskDefinition;
    return this;
  }

  /**
   * Get taskDefinition
   * @return taskDefinition
   */
  @javax.annotation.Nonnull
  public String getTaskDefinition() {
    return taskDefinition;
  }

  public void setTaskDefinition(String taskDefinition) {
    this.taskDefinition = taskDefinition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunTaskRequest runTaskRequest = (RunTaskRequest) o;
    return Objects.equals(this.capacityProviderStrategy, runTaskRequest.capacityProviderStrategy) &&
        Objects.equals(this.cluster, runTaskRequest.cluster) &&
        Objects.equals(this.count, runTaskRequest.count) &&
        Objects.equals(this.enableECSManagedTags, runTaskRequest.enableECSManagedTags) &&
        Objects.equals(this.enableExecuteCommand, runTaskRequest.enableExecuteCommand) &&
        Objects.equals(this.group, runTaskRequest.group) &&
        Objects.equals(this.launchType, runTaskRequest.launchType) &&
        Objects.equals(this.networkConfiguration, runTaskRequest.networkConfiguration) &&
        Objects.equals(this.overrides, runTaskRequest.overrides) &&
        Objects.equals(this.placementConstraints, runTaskRequest.placementConstraints) &&
        Objects.equals(this.placementStrategy, runTaskRequest.placementStrategy) &&
        Objects.equals(this.platformVersion, runTaskRequest.platformVersion) &&
        Objects.equals(this.propagateTags, runTaskRequest.propagateTags) &&
        Objects.equals(this.referenceId, runTaskRequest.referenceId) &&
        Objects.equals(this.startedBy, runTaskRequest.startedBy) &&
        Objects.equals(this.tags, runTaskRequest.tags) &&
        Objects.equals(this.taskDefinition, runTaskRequest.taskDefinition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacityProviderStrategy, cluster, count, enableECSManagedTags, enableExecuteCommand, group, launchType, networkConfiguration, overrides, placementConstraints, placementStrategy, platformVersion, propagateTags, referenceId, startedBy, tags, taskDefinition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunTaskRequest {\n");
    sb.append("    capacityProviderStrategy: ").append(toIndentedString(capacityProviderStrategy)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    enableECSManagedTags: ").append(toIndentedString(enableECSManagedTags)).append("\n");
    sb.append("    enableExecuteCommand: ").append(toIndentedString(enableExecuteCommand)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    launchType: ").append(toIndentedString(launchType)).append("\n");
    sb.append("    networkConfiguration: ").append(toIndentedString(networkConfiguration)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    placementConstraints: ").append(toIndentedString(placementConstraints)).append("\n");
    sb.append("    placementStrategy: ").append(toIndentedString(placementStrategy)).append("\n");
    sb.append("    platformVersion: ").append(toIndentedString(platformVersion)).append("\n");
    sb.append("    propagateTags: ").append(toIndentedString(propagateTags)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    startedBy: ").append(toIndentedString(startedBy)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    taskDefinition: ").append(toIndentedString(taskDefinition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacityProviderStrategy");
    openapiFields.add("cluster");
    openapiFields.add("count");
    openapiFields.add("enableECSManagedTags");
    openapiFields.add("enableExecuteCommand");
    openapiFields.add("group");
    openapiFields.add("launchType");
    openapiFields.add("networkConfiguration");
    openapiFields.add("overrides");
    openapiFields.add("placementConstraints");
    openapiFields.add("placementStrategy");
    openapiFields.add("platformVersion");
    openapiFields.add("propagateTags");
    openapiFields.add("referenceId");
    openapiFields.add("startedBy");
    openapiFields.add("tags");
    openapiFields.add("taskDefinition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("taskDefinition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunTaskRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunTaskRequest is not found in the empty JSON string", RunTaskRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunTaskRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunTaskRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RunTaskRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `capacityProviderStrategy`
      if (jsonObj.get("capacityProviderStrategy") != null && !jsonObj.get("capacityProviderStrategy").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("capacityProviderStrategy"));
      }
      // validate the optional field `cluster`
      if (jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cluster"));
      }
      // validate the optional field `count`
      if (jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("count"));
      }
      // validate the optional field `enableECSManagedTags`
      if (jsonObj.get("enableECSManagedTags") != null && !jsonObj.get("enableECSManagedTags").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("enableECSManagedTags"));
      }
      // validate the optional field `enableExecuteCommand`
      if (jsonObj.get("enableExecuteCommand") != null && !jsonObj.get("enableExecuteCommand").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("enableExecuteCommand"));
      }
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("group"));
      }
      // validate the optional field `launchType`
      if (jsonObj.get("launchType") != null && !jsonObj.get("launchType").isJsonNull()) {
        LaunchType.validateJsonElement(jsonObj.get("launchType"));
      }
      // validate the optional field `networkConfiguration`
      if (jsonObj.get("networkConfiguration") != null && !jsonObj.get("networkConfiguration").isJsonNull()) {
        RunTaskRequestNetworkConfiguration.validateJsonElement(jsonObj.get("networkConfiguration"));
      }
      // validate the optional field `overrides`
      if (jsonObj.get("overrides") != null && !jsonObj.get("overrides").isJsonNull()) {
        RunTaskRequestOverrides.validateJsonElement(jsonObj.get("overrides"));
      }
      // validate the optional field `placementConstraints`
      if (jsonObj.get("placementConstraints") != null && !jsonObj.get("placementConstraints").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("placementConstraints"));
      }
      // validate the optional field `placementStrategy`
      if (jsonObj.get("placementStrategy") != null && !jsonObj.get("placementStrategy").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("placementStrategy"));
      }
      // validate the optional field `platformVersion`
      if (jsonObj.get("platformVersion") != null && !jsonObj.get("platformVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("platformVersion"));
      }
      // validate the optional field `propagateTags`
      if (jsonObj.get("propagateTags") != null && !jsonObj.get("propagateTags").isJsonNull()) {
        PropagateTags.validateJsonElement(jsonObj.get("propagateTags"));
      }
      // validate the optional field `referenceId`
      if (jsonObj.get("referenceId") != null && !jsonObj.get("referenceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("referenceId"));
      }
      // validate the optional field `startedBy`
      if (jsonObj.get("startedBy") != null && !jsonObj.get("startedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("startedBy"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the required field `taskDefinition`
      String.validateJsonElement(jsonObj.get("taskDefinition"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RunTaskRequest>() {
           @Override
           public void write(JsonWriter out, RunTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunTaskRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunTaskRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunTaskRequest
   * @throws IOException if the JSON string is invalid with respect to RunTaskRequest
   */
  public static RunTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunTaskRequest.class);
  }

  /**
   * Convert an instance of RunTaskRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

