/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LinuxParametersCapabilities;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Linux-specific options that are applied to the container, such as Linux &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html\&quot;&gt;KernelCapabilities&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinuxParameters {
  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private LinuxParametersCapabilities capabilities;

  public static final String SERIALIZED_NAME_DEVICES = "devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private List devices;

  public static final String SERIALIZED_NAME_INIT_PROCESS_ENABLED = "initProcessEnabled";
  @SerializedName(SERIALIZED_NAME_INIT_PROCESS_ENABLED)
  private Boolean initProcessEnabled;

  public static final String SERIALIZED_NAME_SHARED_MEMORY_SIZE = "sharedMemorySize";
  @SerializedName(SERIALIZED_NAME_SHARED_MEMORY_SIZE)
  private Integer sharedMemorySize;

  public static final String SERIALIZED_NAME_TMPFS = "tmpfs";
  @SerializedName(SERIALIZED_NAME_TMPFS)
  private List tmpfs;

  public static final String SERIALIZED_NAME_MAX_SWAP = "maxSwap";
  @SerializedName(SERIALIZED_NAME_MAX_SWAP)
  private Integer maxSwap;

  public static final String SERIALIZED_NAME_SWAPPINESS = "swappiness";
  @SerializedName(SERIALIZED_NAME_SWAPPINESS)
  private Integer swappiness;

  public LinuxParameters() {
  }

  public LinuxParameters capabilities(LinuxParametersCapabilities capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public LinuxParametersCapabilities getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(LinuxParametersCapabilities capabilities) {
    this.capabilities = capabilities;
  }


  public LinuxParameters devices(List devices) {
    this.devices = devices;
    return this;
  }

  /**
   * Get devices
   * @return devices
   */
  @javax.annotation.Nullable
  public List getDevices() {
    return devices;
  }

  public void setDevices(List devices) {
    this.devices = devices;
  }


  public LinuxParameters initProcessEnabled(Boolean initProcessEnabled) {
    this.initProcessEnabled = initProcessEnabled;
    return this;
  }

  /**
   * Get initProcessEnabled
   * @return initProcessEnabled
   */
  @javax.annotation.Nullable
  public Boolean getInitProcessEnabled() {
    return initProcessEnabled;
  }

  public void setInitProcessEnabled(Boolean initProcessEnabled) {
    this.initProcessEnabled = initProcessEnabled;
  }


  public LinuxParameters sharedMemorySize(Integer sharedMemorySize) {
    this.sharedMemorySize = sharedMemorySize;
    return this;
  }

  /**
   * Get sharedMemorySize
   * @return sharedMemorySize
   */
  @javax.annotation.Nullable
  public Integer getSharedMemorySize() {
    return sharedMemorySize;
  }

  public void setSharedMemorySize(Integer sharedMemorySize) {
    this.sharedMemorySize = sharedMemorySize;
  }


  public LinuxParameters tmpfs(List tmpfs) {
    this.tmpfs = tmpfs;
    return this;
  }

  /**
   * Get tmpfs
   * @return tmpfs
   */
  @javax.annotation.Nullable
  public List getTmpfs() {
    return tmpfs;
  }

  public void setTmpfs(List tmpfs) {
    this.tmpfs = tmpfs;
  }


  public LinuxParameters maxSwap(Integer maxSwap) {
    this.maxSwap = maxSwap;
    return this;
  }

  /**
   * Get maxSwap
   * @return maxSwap
   */
  @javax.annotation.Nullable
  public Integer getMaxSwap() {
    return maxSwap;
  }

  public void setMaxSwap(Integer maxSwap) {
    this.maxSwap = maxSwap;
  }


  public LinuxParameters swappiness(Integer swappiness) {
    this.swappiness = swappiness;
    return this;
  }

  /**
   * Get swappiness
   * @return swappiness
   */
  @javax.annotation.Nullable
  public Integer getSwappiness() {
    return swappiness;
  }

  public void setSwappiness(Integer swappiness) {
    this.swappiness = swappiness;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinuxParameters linuxParameters = (LinuxParameters) o;
    return Objects.equals(this.capabilities, linuxParameters.capabilities) &&
        Objects.equals(this.devices, linuxParameters.devices) &&
        Objects.equals(this.initProcessEnabled, linuxParameters.initProcessEnabled) &&
        Objects.equals(this.sharedMemorySize, linuxParameters.sharedMemorySize) &&
        Objects.equals(this.tmpfs, linuxParameters.tmpfs) &&
        Objects.equals(this.maxSwap, linuxParameters.maxSwap) &&
        Objects.equals(this.swappiness, linuxParameters.swappiness);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilities, devices, initProcessEnabled, sharedMemorySize, tmpfs, maxSwap, swappiness);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinuxParameters {\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    initProcessEnabled: ").append(toIndentedString(initProcessEnabled)).append("\n");
    sb.append("    sharedMemorySize: ").append(toIndentedString(sharedMemorySize)).append("\n");
    sb.append("    tmpfs: ").append(toIndentedString(tmpfs)).append("\n");
    sb.append("    maxSwap: ").append(toIndentedString(maxSwap)).append("\n");
    sb.append("    swappiness: ").append(toIndentedString(swappiness)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capabilities");
    openapiFields.add("devices");
    openapiFields.add("initProcessEnabled");
    openapiFields.add("sharedMemorySize");
    openapiFields.add("tmpfs");
    openapiFields.add("maxSwap");
    openapiFields.add("swappiness");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinuxParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinuxParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinuxParameters is not found in the empty JSON string", LinuxParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinuxParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinuxParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `capabilities`
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull()) {
        LinuxParametersCapabilities.validateJsonElement(jsonObj.get("capabilities"));
      }
      // validate the optional field `devices`
      if (jsonObj.get("devices") != null && !jsonObj.get("devices").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("devices"));
      }
      // validate the optional field `initProcessEnabled`
      if (jsonObj.get("initProcessEnabled") != null && !jsonObj.get("initProcessEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("initProcessEnabled"));
      }
      // validate the optional field `sharedMemorySize`
      if (jsonObj.get("sharedMemorySize") != null && !jsonObj.get("sharedMemorySize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("sharedMemorySize"));
      }
      // validate the optional field `tmpfs`
      if (jsonObj.get("tmpfs") != null && !jsonObj.get("tmpfs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tmpfs"));
      }
      // validate the optional field `maxSwap`
      if (jsonObj.get("maxSwap") != null && !jsonObj.get("maxSwap").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxSwap"));
      }
      // validate the optional field `swappiness`
      if (jsonObj.get("swappiness") != null && !jsonObj.get("swappiness").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("swappiness"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinuxParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinuxParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinuxParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinuxParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<LinuxParameters>() {
           @Override
           public void write(JsonWriter out, LinuxParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinuxParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinuxParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinuxParameters
   * @throws IOException if the JSON string is invalid with respect to LinuxParameters
   */
  public static LinuxParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinuxParameters.class);
  }

  /**
   * Convert an instance of LinuxParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

