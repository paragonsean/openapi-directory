/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SettingName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListAccountSettingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListAccountSettingsRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private SettingName name;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_PRINCIPAL_ARN = "principalArn";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_ARN)
  private String principalArn;

  public static final String SERIALIZED_NAME_EFFECTIVE_SETTINGS = "effectiveSettings";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_SETTINGS)
  private Boolean effectiveSettings;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public ListAccountSettingsRequest() {
  }

  public ListAccountSettingsRequest name(SettingName name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public SettingName getName() {
    return name;
  }

  public void setName(SettingName name) {
    this.name = name;
  }


  public ListAccountSettingsRequest value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public ListAccountSettingsRequest principalArn(String principalArn) {
    this.principalArn = principalArn;
    return this;
  }

  /**
   * Get principalArn
   * @return principalArn
   */
  @javax.annotation.Nullable
  public String getPrincipalArn() {
    return principalArn;
  }

  public void setPrincipalArn(String principalArn) {
    this.principalArn = principalArn;
  }


  public ListAccountSettingsRequest effectiveSettings(Boolean effectiveSettings) {
    this.effectiveSettings = effectiveSettings;
    return this;
  }

  /**
   * Get effectiveSettings
   * @return effectiveSettings
   */
  @javax.annotation.Nullable
  public Boolean getEffectiveSettings() {
    return effectiveSettings;
  }

  public void setEffectiveSettings(Boolean effectiveSettings) {
    this.effectiveSettings = effectiveSettings;
  }


  public ListAccountSettingsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListAccountSettingsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAccountSettingsRequest listAccountSettingsRequest = (ListAccountSettingsRequest) o;
    return Objects.equals(this.name, listAccountSettingsRequest.name) &&
        Objects.equals(this.value, listAccountSettingsRequest.value) &&
        Objects.equals(this.principalArn, listAccountSettingsRequest.principalArn) &&
        Objects.equals(this.effectiveSettings, listAccountSettingsRequest.effectiveSettings) &&
        Objects.equals(this.nextToken, listAccountSettingsRequest.nextToken) &&
        Objects.equals(this.maxResults, listAccountSettingsRequest.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, value, principalArn, effectiveSettings, nextToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAccountSettingsRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    principalArn: ").append(toIndentedString(principalArn)).append("\n");
    sb.append("    effectiveSettings: ").append(toIndentedString(effectiveSettings)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("value");
    openapiFields.add("principalArn");
    openapiFields.add("effectiveSettings");
    openapiFields.add("nextToken");
    openapiFields.add("maxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListAccountSettingsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListAccountSettingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAccountSettingsRequest is not found in the empty JSON string", ListAccountSettingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListAccountSettingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAccountSettingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        SettingName.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `value`
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("value"));
      }
      // validate the optional field `principalArn`
      if (jsonObj.get("principalArn") != null && !jsonObj.get("principalArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("principalArn"));
      }
      // validate the optional field `effectiveSettings`
      if (jsonObj.get("effectiveSettings") != null && !jsonObj.get("effectiveSettings").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("effectiveSettings"));
      }
      // validate the optional field `nextToken`
      if (jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("nextToken"));
      }
      // validate the optional field `maxResults`
      if (jsonObj.get("maxResults") != null && !jsonObj.get("maxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxResults"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAccountSettingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAccountSettingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAccountSettingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAccountSettingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAccountSettingsRequest>() {
           @Override
           public void write(JsonWriter out, ListAccountSettingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAccountSettingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListAccountSettingsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListAccountSettingsRequest
   * @throws IOException if the JSON string is invalid with respect to ListAccountSettingsRequest
   */
  public static ListAccountSettingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAccountSettingsRequest.class);
  }

  /**
   * Convert an instance of ListAccountSettingsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

