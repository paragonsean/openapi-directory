/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The Service Connect resource. Each configuration maps a discovery name to a Cloud Map service name. The data is stored in Cloud Map as part of the Service Connect configuration for each discovery name of this Amazon ECS service.&lt;/p&gt; &lt;p&gt;A task can resolve the &lt;code&gt;dnsName&lt;/code&gt; for each of the &lt;code&gt;clientAliases&lt;/code&gt; of a service. However a task can&#39;t resolve the discovery names. If you want to connect to a service, refer to the &lt;code&gt;ServiceConnectConfiguration&lt;/code&gt; of that service for the list of &lt;code&gt;clientAliases&lt;/code&gt; that you can use.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceConnectServiceResource {
  public static final String SERIALIZED_NAME_DISCOVERY_NAME = "discoveryName";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_NAME)
  private String discoveryName;

  public static final String SERIALIZED_NAME_DISCOVERY_ARN = "discoveryArn";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_ARN)
  private String discoveryArn;

  public ServiceConnectServiceResource() {
  }

  public ServiceConnectServiceResource discoveryName(String discoveryName) {
    this.discoveryName = discoveryName;
    return this;
  }

  /**
   * Get discoveryName
   * @return discoveryName
   */
  @javax.annotation.Nullable
  public String getDiscoveryName() {
    return discoveryName;
  }

  public void setDiscoveryName(String discoveryName) {
    this.discoveryName = discoveryName;
  }


  public ServiceConnectServiceResource discoveryArn(String discoveryArn) {
    this.discoveryArn = discoveryArn;
    return this;
  }

  /**
   * Get discoveryArn
   * @return discoveryArn
   */
  @javax.annotation.Nullable
  public String getDiscoveryArn() {
    return discoveryArn;
  }

  public void setDiscoveryArn(String discoveryArn) {
    this.discoveryArn = discoveryArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceConnectServiceResource serviceConnectServiceResource = (ServiceConnectServiceResource) o;
    return Objects.equals(this.discoveryName, serviceConnectServiceResource.discoveryName) &&
        Objects.equals(this.discoveryArn, serviceConnectServiceResource.discoveryArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discoveryName, discoveryArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceConnectServiceResource {\n");
    sb.append("    discoveryName: ").append(toIndentedString(discoveryName)).append("\n");
    sb.append("    discoveryArn: ").append(toIndentedString(discoveryArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discoveryName");
    openapiFields.add("discoveryArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceConnectServiceResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceConnectServiceResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceConnectServiceResource is not found in the empty JSON string", ServiceConnectServiceResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceConnectServiceResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceConnectServiceResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `discoveryName`
      if (jsonObj.get("discoveryName") != null && !jsonObj.get("discoveryName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("discoveryName"));
      }
      // validate the optional field `discoveryArn`
      if (jsonObj.get("discoveryArn") != null && !jsonObj.get("discoveryArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("discoveryArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceConnectServiceResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceConnectServiceResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceConnectServiceResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceConnectServiceResource.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceConnectServiceResource>() {
           @Override
           public void write(JsonWriter out, ServiceConnectServiceResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceConnectServiceResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceConnectServiceResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceConnectServiceResource
   * @throws IOException if the JSON string is invalid with respect to ServiceConnectServiceResource
   */
  public static ServiceConnectServiceResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceConnectServiceResource.class);
  }

  /**
   * Convert an instance of ServiceConnectServiceResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

