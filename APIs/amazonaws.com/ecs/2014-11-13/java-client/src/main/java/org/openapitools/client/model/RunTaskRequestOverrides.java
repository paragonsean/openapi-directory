/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TaskOverrideEphemeralStorage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RunTaskRequestOverrides
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:17.720344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunTaskRequestOverrides {
  public static final String SERIALIZED_NAME_CONTAINER_OVERRIDES = "containerOverrides";
  @SerializedName(SERIALIZED_NAME_CONTAINER_OVERRIDES)
  private List containerOverrides;

  public static final String SERIALIZED_NAME_CPU = "cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private String cpu;

  public static final String SERIALIZED_NAME_INFERENCE_ACCELERATOR_OVERRIDES = "inferenceAcceleratorOverrides";
  @SerializedName(SERIALIZED_NAME_INFERENCE_ACCELERATOR_OVERRIDES)
  private List inferenceAcceleratorOverrides;

  public static final String SERIALIZED_NAME_EXECUTION_ROLE_ARN = "executionRoleArn";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ROLE_ARN)
  private String executionRoleArn;

  public static final String SERIALIZED_NAME_MEMORY = "memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private String memory;

  public static final String SERIALIZED_NAME_TASK_ROLE_ARN = "taskRoleArn";
  @SerializedName(SERIALIZED_NAME_TASK_ROLE_ARN)
  private String taskRoleArn;

  public static final String SERIALIZED_NAME_EPHEMERAL_STORAGE = "ephemeralStorage";
  @SerializedName(SERIALIZED_NAME_EPHEMERAL_STORAGE)
  private TaskOverrideEphemeralStorage ephemeralStorage;

  public RunTaskRequestOverrides() {
  }

  public RunTaskRequestOverrides containerOverrides(List containerOverrides) {
    this.containerOverrides = containerOverrides;
    return this;
  }

  /**
   * Get containerOverrides
   * @return containerOverrides
   */
  @javax.annotation.Nullable
  public List getContainerOverrides() {
    return containerOverrides;
  }

  public void setContainerOverrides(List containerOverrides) {
    this.containerOverrides = containerOverrides;
  }


  public RunTaskRequestOverrides cpu(String cpu) {
    this.cpu = cpu;
    return this;
  }

  /**
   * Get cpu
   * @return cpu
   */
  @javax.annotation.Nullable
  public String getCpu() {
    return cpu;
  }

  public void setCpu(String cpu) {
    this.cpu = cpu;
  }


  public RunTaskRequestOverrides inferenceAcceleratorOverrides(List inferenceAcceleratorOverrides) {
    this.inferenceAcceleratorOverrides = inferenceAcceleratorOverrides;
    return this;
  }

  /**
   * Get inferenceAcceleratorOverrides
   * @return inferenceAcceleratorOverrides
   */
  @javax.annotation.Nullable
  public List getInferenceAcceleratorOverrides() {
    return inferenceAcceleratorOverrides;
  }

  public void setInferenceAcceleratorOverrides(List inferenceAcceleratorOverrides) {
    this.inferenceAcceleratorOverrides = inferenceAcceleratorOverrides;
  }


  public RunTaskRequestOverrides executionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
    return this;
  }

  /**
   * Get executionRoleArn
   * @return executionRoleArn
   */
  @javax.annotation.Nullable
  public String getExecutionRoleArn() {
    return executionRoleArn;
  }

  public void setExecutionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
  }


  public RunTaskRequestOverrides memory(String memory) {
    this.memory = memory;
    return this;
  }

  /**
   * Get memory
   * @return memory
   */
  @javax.annotation.Nullable
  public String getMemory() {
    return memory;
  }

  public void setMemory(String memory) {
    this.memory = memory;
  }


  public RunTaskRequestOverrides taskRoleArn(String taskRoleArn) {
    this.taskRoleArn = taskRoleArn;
    return this;
  }

  /**
   * Get taskRoleArn
   * @return taskRoleArn
   */
  @javax.annotation.Nullable
  public String getTaskRoleArn() {
    return taskRoleArn;
  }

  public void setTaskRoleArn(String taskRoleArn) {
    this.taskRoleArn = taskRoleArn;
  }


  public RunTaskRequestOverrides ephemeralStorage(TaskOverrideEphemeralStorage ephemeralStorage) {
    this.ephemeralStorage = ephemeralStorage;
    return this;
  }

  /**
   * Get ephemeralStorage
   * @return ephemeralStorage
   */
  @javax.annotation.Nullable
  public TaskOverrideEphemeralStorage getEphemeralStorage() {
    return ephemeralStorage;
  }

  public void setEphemeralStorage(TaskOverrideEphemeralStorage ephemeralStorage) {
    this.ephemeralStorage = ephemeralStorage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunTaskRequestOverrides runTaskRequestOverrides = (RunTaskRequestOverrides) o;
    return Objects.equals(this.containerOverrides, runTaskRequestOverrides.containerOverrides) &&
        Objects.equals(this.cpu, runTaskRequestOverrides.cpu) &&
        Objects.equals(this.inferenceAcceleratorOverrides, runTaskRequestOverrides.inferenceAcceleratorOverrides) &&
        Objects.equals(this.executionRoleArn, runTaskRequestOverrides.executionRoleArn) &&
        Objects.equals(this.memory, runTaskRequestOverrides.memory) &&
        Objects.equals(this.taskRoleArn, runTaskRequestOverrides.taskRoleArn) &&
        Objects.equals(this.ephemeralStorage, runTaskRequestOverrides.ephemeralStorage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerOverrides, cpu, inferenceAcceleratorOverrides, executionRoleArn, memory, taskRoleArn, ephemeralStorage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunTaskRequestOverrides {\n");
    sb.append("    containerOverrides: ").append(toIndentedString(containerOverrides)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    inferenceAcceleratorOverrides: ").append(toIndentedString(inferenceAcceleratorOverrides)).append("\n");
    sb.append("    executionRoleArn: ").append(toIndentedString(executionRoleArn)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    taskRoleArn: ").append(toIndentedString(taskRoleArn)).append("\n");
    sb.append("    ephemeralStorage: ").append(toIndentedString(ephemeralStorage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerOverrides");
    openapiFields.add("cpu");
    openapiFields.add("inferenceAcceleratorOverrides");
    openapiFields.add("executionRoleArn");
    openapiFields.add("memory");
    openapiFields.add("taskRoleArn");
    openapiFields.add("ephemeralStorage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunTaskRequestOverrides
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunTaskRequestOverrides.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunTaskRequestOverrides is not found in the empty JSON string", RunTaskRequestOverrides.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunTaskRequestOverrides.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunTaskRequestOverrides` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containerOverrides`
      if (jsonObj.get("containerOverrides") != null && !jsonObj.get("containerOverrides").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("containerOverrides"));
      }
      // validate the optional field `cpu`
      if (jsonObj.get("cpu") != null && !jsonObj.get("cpu").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cpu"));
      }
      // validate the optional field `inferenceAcceleratorOverrides`
      if (jsonObj.get("inferenceAcceleratorOverrides") != null && !jsonObj.get("inferenceAcceleratorOverrides").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("inferenceAcceleratorOverrides"));
      }
      // validate the optional field `executionRoleArn`
      if (jsonObj.get("executionRoleArn") != null && !jsonObj.get("executionRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("executionRoleArn"));
      }
      // validate the optional field `memory`
      if (jsonObj.get("memory") != null && !jsonObj.get("memory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("memory"));
      }
      // validate the optional field `taskRoleArn`
      if (jsonObj.get("taskRoleArn") != null && !jsonObj.get("taskRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("taskRoleArn"));
      }
      // validate the optional field `ephemeralStorage`
      if (jsonObj.get("ephemeralStorage") != null && !jsonObj.get("ephemeralStorage").isJsonNull()) {
        TaskOverrideEphemeralStorage.validateJsonElement(jsonObj.get("ephemeralStorage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunTaskRequestOverrides.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunTaskRequestOverrides' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunTaskRequestOverrides> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunTaskRequestOverrides.class));

       return (TypeAdapter<T>) new TypeAdapter<RunTaskRequestOverrides>() {
           @Override
           public void write(JsonWriter out, RunTaskRequestOverrides value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunTaskRequestOverrides read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunTaskRequestOverrides given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunTaskRequestOverrides
   * @throws IOException if the JSON string is invalid with respect to RunTaskRequestOverrides
   */
  public static RunTaskRequestOverrides fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunTaskRequestOverrides.class);
  }

  /**
   * Convert an instance of RunTaskRequestOverrides to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

