/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AgentUpdateStatus;
import org.openapitools.client.model.ContainerInstanceHealthStatus;
import org.openapitools.client.model.ContainerInstanceVersionInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ContainerInstance
 */
public class ContainerInstanceTest {
    private final ContainerInstance model = new ContainerInstance();

    /**
     * Model tests for ContainerInstance
     */
    @Test
    public void testContainerInstance() {
        // TODO: test ContainerInstance
    }

    /**
     * Test the property 'containerInstanceArn'
     */
    @Test
    public void containerInstanceArnTest() {
        // TODO: test containerInstanceArn
    }

    /**
     * Test the property 'ec2InstanceId'
     */
    @Test
    public void ec2InstanceIdTest() {
        // TODO: test ec2InstanceId
    }

    /**
     * Test the property 'capacityProviderName'
     */
    @Test
    public void capacityProviderNameTest() {
        // TODO: test capacityProviderName
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

    /**
     * Test the property 'versionInfo'
     */
    @Test
    public void versionInfoTest() {
        // TODO: test versionInfo
    }

    /**
     * Test the property 'remainingResources'
     */
    @Test
    public void remainingResourcesTest() {
        // TODO: test remainingResources
    }

    /**
     * Test the property 'registeredResources'
     */
    @Test
    public void registeredResourcesTest() {
        // TODO: test registeredResources
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'statusReason'
     */
    @Test
    public void statusReasonTest() {
        // TODO: test statusReason
    }

    /**
     * Test the property 'agentConnected'
     */
    @Test
    public void agentConnectedTest() {
        // TODO: test agentConnected
    }

    /**
     * Test the property 'runningTasksCount'
     */
    @Test
    public void runningTasksCountTest() {
        // TODO: test runningTasksCount
    }

    /**
     * Test the property 'pendingTasksCount'
     */
    @Test
    public void pendingTasksCountTest() {
        // TODO: test pendingTasksCount
    }

    /**
     * Test the property 'agentUpdateStatus'
     */
    @Test
    public void agentUpdateStatusTest() {
        // TODO: test agentUpdateStatus
    }

    /**
     * Test the property 'attributes'
     */
    @Test
    public void attributesTest() {
        // TODO: test attributes
    }

    /**
     * Test the property 'registeredAt'
     */
    @Test
    public void registeredAtTest() {
        // TODO: test registeredAt
    }

    /**
     * Test the property 'attachments'
     */
    @Test
    public void attachmentsTest() {
        // TODO: test attachments
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'healthStatus'
     */
    @Test
    public void healthStatusTest() {
        // TODO: test healthStatus
    }

}
