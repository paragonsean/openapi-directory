/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ContainerDefinitionFirelensConfiguration;
import org.openapitools.client.model.ContainerDefinitionHealthCheck;
import org.openapitools.client.model.ContainerDefinitionLinuxParameters;
import org.openapitools.client.model.ContainerDefinitionLogConfiguration;
import org.openapitools.client.model.ContainerDefinitionRepositoryCredentials;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ContainerDefinition
 */
public class ContainerDefinitionTest {
    private final ContainerDefinition model = new ContainerDefinition();

    /**
     * Model tests for ContainerDefinition
     */
    @Test
    public void testContainerDefinition() {
        // TODO: test ContainerDefinition
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'image'
     */
    @Test
    public void imageTest() {
        // TODO: test image
    }

    /**
     * Test the property 'repositoryCredentials'
     */
    @Test
    public void repositoryCredentialsTest() {
        // TODO: test repositoryCredentials
    }

    /**
     * Test the property 'cpu'
     */
    @Test
    public void cpuTest() {
        // TODO: test cpu
    }

    /**
     * Test the property 'memory'
     */
    @Test
    public void memoryTest() {
        // TODO: test memory
    }

    /**
     * Test the property 'memoryReservation'
     */
    @Test
    public void memoryReservationTest() {
        // TODO: test memoryReservation
    }

    /**
     * Test the property 'links'
     */
    @Test
    public void linksTest() {
        // TODO: test links
    }

    /**
     * Test the property 'portMappings'
     */
    @Test
    public void portMappingsTest() {
        // TODO: test portMappings
    }

    /**
     * Test the property 'essential'
     */
    @Test
    public void essentialTest() {
        // TODO: test essential
    }

    /**
     * Test the property 'entryPoint'
     */
    @Test
    public void entryPointTest() {
        // TODO: test entryPoint
    }

    /**
     * Test the property 'command'
     */
    @Test
    public void commandTest() {
        // TODO: test command
    }

    /**
     * Test the property 'environment'
     */
    @Test
    public void environmentTest() {
        // TODO: test environment
    }

    /**
     * Test the property 'environmentFiles'
     */
    @Test
    public void environmentFilesTest() {
        // TODO: test environmentFiles
    }

    /**
     * Test the property 'mountPoints'
     */
    @Test
    public void mountPointsTest() {
        // TODO: test mountPoints
    }

    /**
     * Test the property 'volumesFrom'
     */
    @Test
    public void volumesFromTest() {
        // TODO: test volumesFrom
    }

    /**
     * Test the property 'linuxParameters'
     */
    @Test
    public void linuxParametersTest() {
        // TODO: test linuxParameters
    }

    /**
     * Test the property 'secrets'
     */
    @Test
    public void secretsTest() {
        // TODO: test secrets
    }

    /**
     * Test the property 'dependsOn'
     */
    @Test
    public void dependsOnTest() {
        // TODO: test dependsOn
    }

    /**
     * Test the property 'startTimeout'
     */
    @Test
    public void startTimeoutTest() {
        // TODO: test startTimeout
    }

    /**
     * Test the property 'stopTimeout'
     */
    @Test
    public void stopTimeoutTest() {
        // TODO: test stopTimeout
    }

    /**
     * Test the property 'hostname'
     */
    @Test
    public void hostnameTest() {
        // TODO: test hostname
    }

    /**
     * Test the property 'user'
     */
    @Test
    public void userTest() {
        // TODO: test user
    }

    /**
     * Test the property 'workingDirectory'
     */
    @Test
    public void workingDirectoryTest() {
        // TODO: test workingDirectory
    }

    /**
     * Test the property 'disableNetworking'
     */
    @Test
    public void disableNetworkingTest() {
        // TODO: test disableNetworking
    }

    /**
     * Test the property 'privileged'
     */
    @Test
    public void privilegedTest() {
        // TODO: test privileged
    }

    /**
     * Test the property 'readonlyRootFilesystem'
     */
    @Test
    public void readonlyRootFilesystemTest() {
        // TODO: test readonlyRootFilesystem
    }

    /**
     * Test the property 'dnsServers'
     */
    @Test
    public void dnsServersTest() {
        // TODO: test dnsServers
    }

    /**
     * Test the property 'dnsSearchDomains'
     */
    @Test
    public void dnsSearchDomainsTest() {
        // TODO: test dnsSearchDomains
    }

    /**
     * Test the property 'extraHosts'
     */
    @Test
    public void extraHostsTest() {
        // TODO: test extraHosts
    }

    /**
     * Test the property 'dockerSecurityOptions'
     */
    @Test
    public void dockerSecurityOptionsTest() {
        // TODO: test dockerSecurityOptions
    }

    /**
     * Test the property 'interactive'
     */
    @Test
    public void interactiveTest() {
        // TODO: test interactive
    }

    /**
     * Test the property 'pseudoTerminal'
     */
    @Test
    public void pseudoTerminalTest() {
        // TODO: test pseudoTerminal
    }

    /**
     * Test the property 'dockerLabels'
     */
    @Test
    public void dockerLabelsTest() {
        // TODO: test dockerLabels
    }

    /**
     * Test the property 'ulimits'
     */
    @Test
    public void ulimitsTest() {
        // TODO: test ulimits
    }

    /**
     * Test the property 'logConfiguration'
     */
    @Test
    public void logConfigurationTest() {
        // TODO: test logConfiguration
    }

    /**
     * Test the property 'healthCheck'
     */
    @Test
    public void healthCheckTest() {
        // TODO: test healthCheck
    }

    /**
     * Test the property 'systemControls'
     */
    @Test
    public void systemControlsTest() {
        // TODO: test systemControls
    }

    /**
     * Test the property 'resourceRequirements'
     */
    @Test
    public void resourceRequirementsTest() {
        // TODO: test resourceRequirements
    }

    /**
     * Test the property 'firelensConfiguration'
     */
    @Test
    public void firelensConfigurationTest() {
        // TODO: test firelensConfiguration
    }

    /**
     * Test the property 'credentialSpecs'
     */
    @Test
    public void credentialSpecsTest() {
        // TODO: test credentialSpecs
    }

}
