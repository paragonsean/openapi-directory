/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateServiceRequestDeploymentConfiguration;
import org.openapitools.client.model.CreateServiceRequestDeploymentController;
import org.openapitools.client.model.CreateServiceRequestNetworkConfiguration;
import org.openapitools.client.model.CreateServiceRequestServiceConnectConfiguration;
import org.openapitools.client.model.LaunchType;
import org.openapitools.client.model.PropagateTags;
import org.openapitools.client.model.SchedulingStrategy;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CreateServiceRequest
 */
public class CreateServiceRequestTest {
    private final CreateServiceRequest model = new CreateServiceRequest();

    /**
     * Model tests for CreateServiceRequest
     */
    @Test
    public void testCreateServiceRequest() {
        // TODO: test CreateServiceRequest
    }

    /**
     * Test the property 'cluster'
     */
    @Test
    public void clusterTest() {
        // TODO: test cluster
    }

    /**
     * Test the property 'serviceName'
     */
    @Test
    public void serviceNameTest() {
        // TODO: test serviceName
    }

    /**
     * Test the property 'taskDefinition'
     */
    @Test
    public void taskDefinitionTest() {
        // TODO: test taskDefinition
    }

    /**
     * Test the property 'loadBalancers'
     */
    @Test
    public void loadBalancersTest() {
        // TODO: test loadBalancers
    }

    /**
     * Test the property 'serviceRegistries'
     */
    @Test
    public void serviceRegistriesTest() {
        // TODO: test serviceRegistries
    }

    /**
     * Test the property 'desiredCount'
     */
    @Test
    public void desiredCountTest() {
        // TODO: test desiredCount
    }

    /**
     * Test the property 'clientToken'
     */
    @Test
    public void clientTokenTest() {
        // TODO: test clientToken
    }

    /**
     * Test the property 'launchType'
     */
    @Test
    public void launchTypeTest() {
        // TODO: test launchType
    }

    /**
     * Test the property 'capacityProviderStrategy'
     */
    @Test
    public void capacityProviderStrategyTest() {
        // TODO: test capacityProviderStrategy
    }

    /**
     * Test the property 'platformVersion'
     */
    @Test
    public void platformVersionTest() {
        // TODO: test platformVersion
    }

    /**
     * Test the property 'role'
     */
    @Test
    public void roleTest() {
        // TODO: test role
    }

    /**
     * Test the property 'deploymentConfiguration'
     */
    @Test
    public void deploymentConfigurationTest() {
        // TODO: test deploymentConfiguration
    }

    /**
     * Test the property 'placementConstraints'
     */
    @Test
    public void placementConstraintsTest() {
        // TODO: test placementConstraints
    }

    /**
     * Test the property 'placementStrategy'
     */
    @Test
    public void placementStrategyTest() {
        // TODO: test placementStrategy
    }

    /**
     * Test the property 'networkConfiguration'
     */
    @Test
    public void networkConfigurationTest() {
        // TODO: test networkConfiguration
    }

    /**
     * Test the property 'healthCheckGracePeriodSeconds'
     */
    @Test
    public void healthCheckGracePeriodSecondsTest() {
        // TODO: test healthCheckGracePeriodSeconds
    }

    /**
     * Test the property 'schedulingStrategy'
     */
    @Test
    public void schedulingStrategyTest() {
        // TODO: test schedulingStrategy
    }

    /**
     * Test the property 'deploymentController'
     */
    @Test
    public void deploymentControllerTest() {
        // TODO: test deploymentController
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'enableECSManagedTags'
     */
    @Test
    public void enableECSManagedTagsTest() {
        // TODO: test enableECSManagedTags
    }

    /**
     * Test the property 'propagateTags'
     */
    @Test
    public void propagateTagsTest() {
        // TODO: test propagateTags
    }

    /**
     * Test the property 'enableExecuteCommand'
     */
    @Test
    public void enableExecuteCommandTest() {
        // TODO: test enableExecuteCommand
    }

    /**
     * Test the property 'serviceConnectConfiguration'
     */
    @Test
    public void serviceConnectConfigurationTest() {
        // TODO: test serviceConnectConfiguration
    }

}
