/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeploymentRolloutState;
import org.openapitools.client.model.DeploymentServiceConnectConfiguration;
import org.openapitools.client.model.LaunchType;
import org.openapitools.client.model.StartTaskRequestNetworkConfiguration;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Deployment
 */
public class DeploymentTest {
    private final Deployment model = new Deployment();

    /**
     * Model tests for Deployment
     */
    @Test
    public void testDeployment() {
        // TODO: test Deployment
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'taskDefinition'
     */
    @Test
    public void taskDefinitionTest() {
        // TODO: test taskDefinition
    }

    /**
     * Test the property 'desiredCount'
     */
    @Test
    public void desiredCountTest() {
        // TODO: test desiredCount
    }

    /**
     * Test the property 'pendingCount'
     */
    @Test
    public void pendingCountTest() {
        // TODO: test pendingCount
    }

    /**
     * Test the property 'runningCount'
     */
    @Test
    public void runningCountTest() {
        // TODO: test runningCount
    }

    /**
     * Test the property 'failedTasks'
     */
    @Test
    public void failedTasksTest() {
        // TODO: test failedTasks
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

    /**
     * Test the property 'capacityProviderStrategy'
     */
    @Test
    public void capacityProviderStrategyTest() {
        // TODO: test capacityProviderStrategy
    }

    /**
     * Test the property 'launchType'
     */
    @Test
    public void launchTypeTest() {
        // TODO: test launchType
    }

    /**
     * Test the property 'platformVersion'
     */
    @Test
    public void platformVersionTest() {
        // TODO: test platformVersion
    }

    /**
     * Test the property 'platformFamily'
     */
    @Test
    public void platformFamilyTest() {
        // TODO: test platformFamily
    }

    /**
     * Test the property 'networkConfiguration'
     */
    @Test
    public void networkConfigurationTest() {
        // TODO: test networkConfiguration
    }

    /**
     * Test the property 'rolloutState'
     */
    @Test
    public void rolloutStateTest() {
        // TODO: test rolloutState
    }

    /**
     * Test the property 'rolloutStateReason'
     */
    @Test
    public void rolloutStateReasonTest() {
        // TODO: test rolloutStateReason
    }

    /**
     * Test the property 'serviceConnectConfiguration'
     */
    @Test
    public void serviceConnectConfigurationTest() {
        // TODO: test serviceConnectConfiguration
    }

    /**
     * Test the property 'serviceConnectResources'
     */
    @Test
    public void serviceConnectResourcesTest() {
        // TODO: test serviceConnectResources
    }

}
