/*
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Connectivity;
import org.openapitools.client.model.HealthStatus;
import org.openapitools.client.model.LaunchType;
import org.openapitools.client.model.TaskEphemeralStorage;
import org.openapitools.client.model.TaskOverrides;
import org.openapitools.client.model.TaskStopCode;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Task
 */
public class TaskTest {
    private final Task model = new Task();

    /**
     * Model tests for Task
     */
    @Test
    public void testTask() {
        // TODO: test Task
    }

    /**
     * Test the property 'attachments'
     */
    @Test
    public void attachmentsTest() {
        // TODO: test attachments
    }

    /**
     * Test the property 'attributes'
     */
    @Test
    public void attributesTest() {
        // TODO: test attributes
    }

    /**
     * Test the property 'availabilityZone'
     */
    @Test
    public void availabilityZoneTest() {
        // TODO: test availabilityZone
    }

    /**
     * Test the property 'capacityProviderName'
     */
    @Test
    public void capacityProviderNameTest() {
        // TODO: test capacityProviderName
    }

    /**
     * Test the property 'clusterArn'
     */
    @Test
    public void clusterArnTest() {
        // TODO: test clusterArn
    }

    /**
     * Test the property 'connectivity'
     */
    @Test
    public void connectivityTest() {
        // TODO: test connectivity
    }

    /**
     * Test the property 'connectivityAt'
     */
    @Test
    public void connectivityAtTest() {
        // TODO: test connectivityAt
    }

    /**
     * Test the property 'containerInstanceArn'
     */
    @Test
    public void containerInstanceArnTest() {
        // TODO: test containerInstanceArn
    }

    /**
     * Test the property 'containers'
     */
    @Test
    public void containersTest() {
        // TODO: test containers
    }

    /**
     * Test the property 'cpu'
     */
    @Test
    public void cpuTest() {
        // TODO: test cpu
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'desiredStatus'
     */
    @Test
    public void desiredStatusTest() {
        // TODO: test desiredStatus
    }

    /**
     * Test the property 'enableExecuteCommand'
     */
    @Test
    public void enableExecuteCommandTest() {
        // TODO: test enableExecuteCommand
    }

    /**
     * Test the property 'executionStoppedAt'
     */
    @Test
    public void executionStoppedAtTest() {
        // TODO: test executionStoppedAt
    }

    /**
     * Test the property 'group'
     */
    @Test
    public void groupTest() {
        // TODO: test group
    }

    /**
     * Test the property 'healthStatus'
     */
    @Test
    public void healthStatusTest() {
        // TODO: test healthStatus
    }

    /**
     * Test the property 'inferenceAccelerators'
     */
    @Test
    public void inferenceAcceleratorsTest() {
        // TODO: test inferenceAccelerators
    }

    /**
     * Test the property 'lastStatus'
     */
    @Test
    public void lastStatusTest() {
        // TODO: test lastStatus
    }

    /**
     * Test the property 'launchType'
     */
    @Test
    public void launchTypeTest() {
        // TODO: test launchType
    }

    /**
     * Test the property 'memory'
     */
    @Test
    public void memoryTest() {
        // TODO: test memory
    }

    /**
     * Test the property 'overrides'
     */
    @Test
    public void overridesTest() {
        // TODO: test overrides
    }

    /**
     * Test the property 'platformVersion'
     */
    @Test
    public void platformVersionTest() {
        // TODO: test platformVersion
    }

    /**
     * Test the property 'platformFamily'
     */
    @Test
    public void platformFamilyTest() {
        // TODO: test platformFamily
    }

    /**
     * Test the property 'pullStartedAt'
     */
    @Test
    public void pullStartedAtTest() {
        // TODO: test pullStartedAt
    }

    /**
     * Test the property 'pullStoppedAt'
     */
    @Test
    public void pullStoppedAtTest() {
        // TODO: test pullStoppedAt
    }

    /**
     * Test the property 'startedAt'
     */
    @Test
    public void startedAtTest() {
        // TODO: test startedAt
    }

    /**
     * Test the property 'startedBy'
     */
    @Test
    public void startedByTest() {
        // TODO: test startedBy
    }

    /**
     * Test the property 'stopCode'
     */
    @Test
    public void stopCodeTest() {
        // TODO: test stopCode
    }

    /**
     * Test the property 'stoppedAt'
     */
    @Test
    public void stoppedAtTest() {
        // TODO: test stoppedAt
    }

    /**
     * Test the property 'stoppedReason'
     */
    @Test
    public void stoppedReasonTest() {
        // TODO: test stoppedReason
    }

    /**
     * Test the property 'stoppingAt'
     */
    @Test
    public void stoppingAtTest() {
        // TODO: test stoppingAt
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'taskArn'
     */
    @Test
    public void taskArnTest() {
        // TODO: test taskArn
    }

    /**
     * Test the property 'taskDefinitionArn'
     */
    @Test
    public void taskDefinitionArnTest() {
        // TODO: test taskDefinitionArn
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

    /**
     * Test the property 'ephemeralStorage'
     */
    @Test
    public void ephemeralStorageTest() {
        // TODO: test ephemeralStorage
    }

}
