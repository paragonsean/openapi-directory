# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_override_ephemeral_storage import TaskOverrideEphemeralStorage
from openapi_server import util


class RunTaskRequestOverrides(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_overrides: List=None, cpu: str=None, inference_accelerator_overrides: List=None, execution_role_arn: str=None, memory: str=None, task_role_arn: str=None, ephemeral_storage: TaskOverrideEphemeralStorage=None):
        """RunTaskRequestOverrides - a model defined in OpenAPI

        :param container_overrides: The container_overrides of this RunTaskRequestOverrides.
        :param cpu: The cpu of this RunTaskRequestOverrides.
        :param inference_accelerator_overrides: The inference_accelerator_overrides of this RunTaskRequestOverrides.
        :param execution_role_arn: The execution_role_arn of this RunTaskRequestOverrides.
        :param memory: The memory of this RunTaskRequestOverrides.
        :param task_role_arn: The task_role_arn of this RunTaskRequestOverrides.
        :param ephemeral_storage: The ephemeral_storage of this RunTaskRequestOverrides.
        """
        self.openapi_types = {
            'container_overrides': List,
            'cpu': str,
            'inference_accelerator_overrides': List,
            'execution_role_arn': str,
            'memory': str,
            'task_role_arn': str,
            'ephemeral_storage': TaskOverrideEphemeralStorage
        }

        self.attribute_map = {
            'container_overrides': 'containerOverrides',
            'cpu': 'cpu',
            'inference_accelerator_overrides': 'inferenceAcceleratorOverrides',
            'execution_role_arn': 'executionRoleArn',
            'memory': 'memory',
            'task_role_arn': 'taskRoleArn',
            'ephemeral_storage': 'ephemeralStorage'
        }

        self._container_overrides = container_overrides
        self._cpu = cpu
        self._inference_accelerator_overrides = inference_accelerator_overrides
        self._execution_role_arn = execution_role_arn
        self._memory = memory
        self._task_role_arn = task_role_arn
        self._ephemeral_storage = ephemeral_storage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunTaskRequestOverrides':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunTaskRequest_overrides of this RunTaskRequestOverrides.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_overrides(self):
        """Gets the container_overrides of this RunTaskRequestOverrides.


        :return: The container_overrides of this RunTaskRequestOverrides.
        :rtype: List
        """
        return self._container_overrides

    @container_overrides.setter
    def container_overrides(self, container_overrides):
        """Sets the container_overrides of this RunTaskRequestOverrides.


        :param container_overrides: The container_overrides of this RunTaskRequestOverrides.
        :type container_overrides: List
        """

        self._container_overrides = container_overrides

    @property
    def cpu(self):
        """Gets the cpu of this RunTaskRequestOverrides.


        :return: The cpu of this RunTaskRequestOverrides.
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this RunTaskRequestOverrides.


        :param cpu: The cpu of this RunTaskRequestOverrides.
        :type cpu: str
        """

        self._cpu = cpu

    @property
    def inference_accelerator_overrides(self):
        """Gets the inference_accelerator_overrides of this RunTaskRequestOverrides.


        :return: The inference_accelerator_overrides of this RunTaskRequestOverrides.
        :rtype: List
        """
        return self._inference_accelerator_overrides

    @inference_accelerator_overrides.setter
    def inference_accelerator_overrides(self, inference_accelerator_overrides):
        """Sets the inference_accelerator_overrides of this RunTaskRequestOverrides.


        :param inference_accelerator_overrides: The inference_accelerator_overrides of this RunTaskRequestOverrides.
        :type inference_accelerator_overrides: List
        """

        self._inference_accelerator_overrides = inference_accelerator_overrides

    @property
    def execution_role_arn(self):
        """Gets the execution_role_arn of this RunTaskRequestOverrides.


        :return: The execution_role_arn of this RunTaskRequestOverrides.
        :rtype: str
        """
        return self._execution_role_arn

    @execution_role_arn.setter
    def execution_role_arn(self, execution_role_arn):
        """Sets the execution_role_arn of this RunTaskRequestOverrides.


        :param execution_role_arn: The execution_role_arn of this RunTaskRequestOverrides.
        :type execution_role_arn: str
        """

        self._execution_role_arn = execution_role_arn

    @property
    def memory(self):
        """Gets the memory of this RunTaskRequestOverrides.


        :return: The memory of this RunTaskRequestOverrides.
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this RunTaskRequestOverrides.


        :param memory: The memory of this RunTaskRequestOverrides.
        :type memory: str
        """

        self._memory = memory

    @property
    def task_role_arn(self):
        """Gets the task_role_arn of this RunTaskRequestOverrides.


        :return: The task_role_arn of this RunTaskRequestOverrides.
        :rtype: str
        """
        return self._task_role_arn

    @task_role_arn.setter
    def task_role_arn(self, task_role_arn):
        """Sets the task_role_arn of this RunTaskRequestOverrides.


        :param task_role_arn: The task_role_arn of this RunTaskRequestOverrides.
        :type task_role_arn: str
        """

        self._task_role_arn = task_role_arn

    @property
    def ephemeral_storage(self):
        """Gets the ephemeral_storage of this RunTaskRequestOverrides.


        :return: The ephemeral_storage of this RunTaskRequestOverrides.
        :rtype: TaskOverrideEphemeralStorage
        """
        return self._ephemeral_storage

    @ephemeral_storage.setter
    def ephemeral_storage(self, ephemeral_storage):
        """Sets the ephemeral_storage of this RunTaskRequestOverrides.


        :param ephemeral_storage: The ephemeral_storage of this RunTaskRequestOverrides.
        :type ephemeral_storage: TaskOverrideEphemeralStorage
        """

        self._ephemeral_storage = ephemeral_storage
