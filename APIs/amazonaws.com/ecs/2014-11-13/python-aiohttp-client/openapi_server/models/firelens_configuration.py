# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firelens_configuration_type import FirelensConfigurationType
from openapi_server import util


class FirelensConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: FirelensConfigurationType=None, options: Dict=None):
        """FirelensConfiguration - a model defined in OpenAPI

        :param type: The type of this FirelensConfiguration.
        :param options: The options of this FirelensConfiguration.
        """
        self.openapi_types = {
            'type': FirelensConfigurationType,
            'options': Dict
        }

        self.attribute_map = {
            'type': 'type',
            'options': 'options'
        }

        self._type = type
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirelensConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirelensConfiguration of this FirelensConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this FirelensConfiguration.


        :return: The type of this FirelensConfiguration.
        :rtype: FirelensConfigurationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FirelensConfiguration.


        :param type: The type of this FirelensConfiguration.
        :type type: FirelensConfigurationType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def options(self):
        """Gets the options of this FirelensConfiguration.


        :return: The options of this FirelensConfiguration.
        :rtype: Dict
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FirelensConfiguration.


        :param options: The options of this FirelensConfiguration.
        :type options: Dict
        """

        self._options = options
