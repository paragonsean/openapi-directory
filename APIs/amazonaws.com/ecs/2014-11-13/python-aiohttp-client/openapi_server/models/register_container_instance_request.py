# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.register_container_instance_request_version_info import RegisterContainerInstanceRequestVersionInfo
from openapi_server import util


class RegisterContainerInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, instance_identity_document: str=None, instance_identity_document_signature: str=None, total_resources: List=None, version_info: RegisterContainerInstanceRequestVersionInfo=None, container_instance_arn: str=None, attributes: List=None, platform_devices: List=None, tags: List=None):
        """RegisterContainerInstanceRequest - a model defined in OpenAPI

        :param cluster: The cluster of this RegisterContainerInstanceRequest.
        :param instance_identity_document: The instance_identity_document of this RegisterContainerInstanceRequest.
        :param instance_identity_document_signature: The instance_identity_document_signature of this RegisterContainerInstanceRequest.
        :param total_resources: The total_resources of this RegisterContainerInstanceRequest.
        :param version_info: The version_info of this RegisterContainerInstanceRequest.
        :param container_instance_arn: The container_instance_arn of this RegisterContainerInstanceRequest.
        :param attributes: The attributes of this RegisterContainerInstanceRequest.
        :param platform_devices: The platform_devices of this RegisterContainerInstanceRequest.
        :param tags: The tags of this RegisterContainerInstanceRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'instance_identity_document': str,
            'instance_identity_document_signature': str,
            'total_resources': List,
            'version_info': RegisterContainerInstanceRequestVersionInfo,
            'container_instance_arn': str,
            'attributes': List,
            'platform_devices': List,
            'tags': List
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'instance_identity_document': 'instanceIdentityDocument',
            'instance_identity_document_signature': 'instanceIdentityDocumentSignature',
            'total_resources': 'totalResources',
            'version_info': 'versionInfo',
            'container_instance_arn': 'containerInstanceArn',
            'attributes': 'attributes',
            'platform_devices': 'platformDevices',
            'tags': 'tags'
        }

        self._cluster = cluster
        self._instance_identity_document = instance_identity_document
        self._instance_identity_document_signature = instance_identity_document_signature
        self._total_resources = total_resources
        self._version_info = version_info
        self._container_instance_arn = container_instance_arn
        self._attributes = attributes
        self._platform_devices = platform_devices
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterContainerInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterContainerInstanceRequest of this RegisterContainerInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this RegisterContainerInstanceRequest.


        :return: The cluster of this RegisterContainerInstanceRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this RegisterContainerInstanceRequest.


        :param cluster: The cluster of this RegisterContainerInstanceRequest.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def instance_identity_document(self):
        """Gets the instance_identity_document of this RegisterContainerInstanceRequest.


        :return: The instance_identity_document of this RegisterContainerInstanceRequest.
        :rtype: str
        """
        return self._instance_identity_document

    @instance_identity_document.setter
    def instance_identity_document(self, instance_identity_document):
        """Sets the instance_identity_document of this RegisterContainerInstanceRequest.


        :param instance_identity_document: The instance_identity_document of this RegisterContainerInstanceRequest.
        :type instance_identity_document: str
        """

        self._instance_identity_document = instance_identity_document

    @property
    def instance_identity_document_signature(self):
        """Gets the instance_identity_document_signature of this RegisterContainerInstanceRequest.


        :return: The instance_identity_document_signature of this RegisterContainerInstanceRequest.
        :rtype: str
        """
        return self._instance_identity_document_signature

    @instance_identity_document_signature.setter
    def instance_identity_document_signature(self, instance_identity_document_signature):
        """Sets the instance_identity_document_signature of this RegisterContainerInstanceRequest.


        :param instance_identity_document_signature: The instance_identity_document_signature of this RegisterContainerInstanceRequest.
        :type instance_identity_document_signature: str
        """

        self._instance_identity_document_signature = instance_identity_document_signature

    @property
    def total_resources(self):
        """Gets the total_resources of this RegisterContainerInstanceRequest.


        :return: The total_resources of this RegisterContainerInstanceRequest.
        :rtype: List
        """
        return self._total_resources

    @total_resources.setter
    def total_resources(self, total_resources):
        """Sets the total_resources of this RegisterContainerInstanceRequest.


        :param total_resources: The total_resources of this RegisterContainerInstanceRequest.
        :type total_resources: List
        """

        self._total_resources = total_resources

    @property
    def version_info(self):
        """Gets the version_info of this RegisterContainerInstanceRequest.


        :return: The version_info of this RegisterContainerInstanceRequest.
        :rtype: RegisterContainerInstanceRequestVersionInfo
        """
        return self._version_info

    @version_info.setter
    def version_info(self, version_info):
        """Sets the version_info of this RegisterContainerInstanceRequest.


        :param version_info: The version_info of this RegisterContainerInstanceRequest.
        :type version_info: RegisterContainerInstanceRequestVersionInfo
        """

        self._version_info = version_info

    @property
    def container_instance_arn(self):
        """Gets the container_instance_arn of this RegisterContainerInstanceRequest.


        :return: The container_instance_arn of this RegisterContainerInstanceRequest.
        :rtype: str
        """
        return self._container_instance_arn

    @container_instance_arn.setter
    def container_instance_arn(self, container_instance_arn):
        """Sets the container_instance_arn of this RegisterContainerInstanceRequest.


        :param container_instance_arn: The container_instance_arn of this RegisterContainerInstanceRequest.
        :type container_instance_arn: str
        """

        self._container_instance_arn = container_instance_arn

    @property
    def attributes(self):
        """Gets the attributes of this RegisterContainerInstanceRequest.


        :return: The attributes of this RegisterContainerInstanceRequest.
        :rtype: List
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this RegisterContainerInstanceRequest.


        :param attributes: The attributes of this RegisterContainerInstanceRequest.
        :type attributes: List
        """

        self._attributes = attributes

    @property
    def platform_devices(self):
        """Gets the platform_devices of this RegisterContainerInstanceRequest.


        :return: The platform_devices of this RegisterContainerInstanceRequest.
        :rtype: List
        """
        return self._platform_devices

    @platform_devices.setter
    def platform_devices(self, platform_devices):
        """Sets the platform_devices of this RegisterContainerInstanceRequest.


        :param platform_devices: The platform_devices of this RegisterContainerInstanceRequest.
        :type platform_devices: List
        """

        self._platform_devices = platform_devices

    @property
    def tags(self):
        """Gets the tags of this RegisterContainerInstanceRequest.


        :return: The tags of this RegisterContainerInstanceRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RegisterContainerInstanceRequest.


        :param tags: The tags of this RegisterContainerInstanceRequest.
        :type tags: List
        """

        self._tags = tags
