# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeContainerInstancesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, container_instances: List=None, include: List=None):
        """DescribeContainerInstancesRequest - a model defined in OpenAPI

        :param cluster: The cluster of this DescribeContainerInstancesRequest.
        :param container_instances: The container_instances of this DescribeContainerInstancesRequest.
        :param include: The include of this DescribeContainerInstancesRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'container_instances': List,
            'include': List
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'container_instances': 'containerInstances',
            'include': 'include'
        }

        self._cluster = cluster
        self._container_instances = container_instances
        self._include = include

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeContainerInstancesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeContainerInstancesRequest of this DescribeContainerInstancesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this DescribeContainerInstancesRequest.


        :return: The cluster of this DescribeContainerInstancesRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DescribeContainerInstancesRequest.


        :param cluster: The cluster of this DescribeContainerInstancesRequest.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def container_instances(self):
        """Gets the container_instances of this DescribeContainerInstancesRequest.


        :return: The container_instances of this DescribeContainerInstancesRequest.
        :rtype: List
        """
        return self._container_instances

    @container_instances.setter
    def container_instances(self, container_instances):
        """Sets the container_instances of this DescribeContainerInstancesRequest.


        :param container_instances: The container_instances of this DescribeContainerInstancesRequest.
        :type container_instances: List
        """
        if container_instances is None:
            raise ValueError("Invalid value for `container_instances`, must not be `None`")

        self._container_instances = container_instances

    @property
    def include(self):
        """Gets the include of this DescribeContainerInstancesRequest.


        :return: The include of this DescribeContainerInstancesRequest.
        :rtype: List
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this DescribeContainerInstancesRequest.


        :param include: The include of this DescribeContainerInstancesRequest.
        :type include: List
        """

        self._include = include
