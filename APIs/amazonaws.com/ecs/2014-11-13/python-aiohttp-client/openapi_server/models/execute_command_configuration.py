# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.execute_command_configuration_log_configuration import ExecuteCommandConfigurationLogConfiguration
from openapi_server.models.execute_command_logging import ExecuteCommandLogging
from openapi_server import util


class ExecuteCommandConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kms_key_id: str=None, logging: ExecuteCommandLogging=None, log_configuration: ExecuteCommandConfigurationLogConfiguration=None):
        """ExecuteCommandConfiguration - a model defined in OpenAPI

        :param kms_key_id: The kms_key_id of this ExecuteCommandConfiguration.
        :param logging: The logging of this ExecuteCommandConfiguration.
        :param log_configuration: The log_configuration of this ExecuteCommandConfiguration.
        """
        self.openapi_types = {
            'kms_key_id': str,
            'logging': ExecuteCommandLogging,
            'log_configuration': ExecuteCommandConfigurationLogConfiguration
        }

        self.attribute_map = {
            'kms_key_id': 'kmsKeyId',
            'logging': 'logging',
            'log_configuration': 'logConfiguration'
        }

        self._kms_key_id = kms_key_id
        self._logging = logging
        self._log_configuration = log_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecuteCommandConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecuteCommandConfiguration of this ExecuteCommandConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this ExecuteCommandConfiguration.


        :return: The kms_key_id of this ExecuteCommandConfiguration.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this ExecuteCommandConfiguration.


        :param kms_key_id: The kms_key_id of this ExecuteCommandConfiguration.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def logging(self):
        """Gets the logging of this ExecuteCommandConfiguration.


        :return: The logging of this ExecuteCommandConfiguration.
        :rtype: ExecuteCommandLogging
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this ExecuteCommandConfiguration.


        :param logging: The logging of this ExecuteCommandConfiguration.
        :type logging: ExecuteCommandLogging
        """

        self._logging = logging

    @property
    def log_configuration(self):
        """Gets the log_configuration of this ExecuteCommandConfiguration.


        :return: The log_configuration of this ExecuteCommandConfiguration.
        :rtype: ExecuteCommandConfigurationLogConfiguration
        """
        return self._log_configuration

    @log_configuration.setter
    def log_configuration(self, log_configuration):
        """Sets the log_configuration of this ExecuteCommandConfiguration.


        :param log_configuration: The log_configuration of this ExecuteCommandConfiguration.
        :type log_configuration: ExecuteCommandConfigurationLogConfiguration
        """

        self._log_configuration = log_configuration
