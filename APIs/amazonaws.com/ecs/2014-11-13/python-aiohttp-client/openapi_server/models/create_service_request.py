# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_service_request_deployment_configuration import CreateServiceRequestDeploymentConfiguration
from openapi_server.models.create_service_request_deployment_controller import CreateServiceRequestDeploymentController
from openapi_server.models.create_service_request_network_configuration import CreateServiceRequestNetworkConfiguration
from openapi_server.models.create_service_request_service_connect_configuration import CreateServiceRequestServiceConnectConfiguration
from openapi_server.models.launch_type import LaunchType
from openapi_server.models.propagate_tags import PropagateTags
from openapi_server.models.scheduling_strategy import SchedulingStrategy
from openapi_server import util


class CreateServiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, service_name: str=None, task_definition: str=None, load_balancers: List=None, service_registries: List=None, desired_count: int=None, client_token: str=None, launch_type: LaunchType=None, capacity_provider_strategy: List=None, platform_version: str=None, role: str=None, deployment_configuration: CreateServiceRequestDeploymentConfiguration=None, placement_constraints: List=None, placement_strategy: List=None, network_configuration: CreateServiceRequestNetworkConfiguration=None, health_check_grace_period_seconds: int=None, scheduling_strategy: SchedulingStrategy=None, deployment_controller: CreateServiceRequestDeploymentController=None, tags: List=None, enable_ecs_managed_tags: bool=None, propagate_tags: PropagateTags=None, enable_execute_command: bool=None, service_connect_configuration: CreateServiceRequestServiceConnectConfiguration=None):
        """CreateServiceRequest - a model defined in OpenAPI

        :param cluster: The cluster of this CreateServiceRequest.
        :param service_name: The service_name of this CreateServiceRequest.
        :param task_definition: The task_definition of this CreateServiceRequest.
        :param load_balancers: The load_balancers of this CreateServiceRequest.
        :param service_registries: The service_registries of this CreateServiceRequest.
        :param desired_count: The desired_count of this CreateServiceRequest.
        :param client_token: The client_token of this CreateServiceRequest.
        :param launch_type: The launch_type of this CreateServiceRequest.
        :param capacity_provider_strategy: The capacity_provider_strategy of this CreateServiceRequest.
        :param platform_version: The platform_version of this CreateServiceRequest.
        :param role: The role of this CreateServiceRequest.
        :param deployment_configuration: The deployment_configuration of this CreateServiceRequest.
        :param placement_constraints: The placement_constraints of this CreateServiceRequest.
        :param placement_strategy: The placement_strategy of this CreateServiceRequest.
        :param network_configuration: The network_configuration of this CreateServiceRequest.
        :param health_check_grace_period_seconds: The health_check_grace_period_seconds of this CreateServiceRequest.
        :param scheduling_strategy: The scheduling_strategy of this CreateServiceRequest.
        :param deployment_controller: The deployment_controller of this CreateServiceRequest.
        :param tags: The tags of this CreateServiceRequest.
        :param enable_ecs_managed_tags: The enable_ecs_managed_tags of this CreateServiceRequest.
        :param propagate_tags: The propagate_tags of this CreateServiceRequest.
        :param enable_execute_command: The enable_execute_command of this CreateServiceRequest.
        :param service_connect_configuration: The service_connect_configuration of this CreateServiceRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'service_name': str,
            'task_definition': str,
            'load_balancers': List,
            'service_registries': List,
            'desired_count': int,
            'client_token': str,
            'launch_type': LaunchType,
            'capacity_provider_strategy': List,
            'platform_version': str,
            'role': str,
            'deployment_configuration': CreateServiceRequestDeploymentConfiguration,
            'placement_constraints': List,
            'placement_strategy': List,
            'network_configuration': CreateServiceRequestNetworkConfiguration,
            'health_check_grace_period_seconds': int,
            'scheduling_strategy': SchedulingStrategy,
            'deployment_controller': CreateServiceRequestDeploymentController,
            'tags': List,
            'enable_ecs_managed_tags': bool,
            'propagate_tags': PropagateTags,
            'enable_execute_command': bool,
            'service_connect_configuration': CreateServiceRequestServiceConnectConfiguration
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'service_name': 'serviceName',
            'task_definition': 'taskDefinition',
            'load_balancers': 'loadBalancers',
            'service_registries': 'serviceRegistries',
            'desired_count': 'desiredCount',
            'client_token': 'clientToken',
            'launch_type': 'launchType',
            'capacity_provider_strategy': 'capacityProviderStrategy',
            'platform_version': 'platformVersion',
            'role': 'role',
            'deployment_configuration': 'deploymentConfiguration',
            'placement_constraints': 'placementConstraints',
            'placement_strategy': 'placementStrategy',
            'network_configuration': 'networkConfiguration',
            'health_check_grace_period_seconds': 'healthCheckGracePeriodSeconds',
            'scheduling_strategy': 'schedulingStrategy',
            'deployment_controller': 'deploymentController',
            'tags': 'tags',
            'enable_ecs_managed_tags': 'enableECSManagedTags',
            'propagate_tags': 'propagateTags',
            'enable_execute_command': 'enableExecuteCommand',
            'service_connect_configuration': 'serviceConnectConfiguration'
        }

        self._cluster = cluster
        self._service_name = service_name
        self._task_definition = task_definition
        self._load_balancers = load_balancers
        self._service_registries = service_registries
        self._desired_count = desired_count
        self._client_token = client_token
        self._launch_type = launch_type
        self._capacity_provider_strategy = capacity_provider_strategy
        self._platform_version = platform_version
        self._role = role
        self._deployment_configuration = deployment_configuration
        self._placement_constraints = placement_constraints
        self._placement_strategy = placement_strategy
        self._network_configuration = network_configuration
        self._health_check_grace_period_seconds = health_check_grace_period_seconds
        self._scheduling_strategy = scheduling_strategy
        self._deployment_controller = deployment_controller
        self._tags = tags
        self._enable_ecs_managed_tags = enable_ecs_managed_tags
        self._propagate_tags = propagate_tags
        self._enable_execute_command = enable_execute_command
        self._service_connect_configuration = service_connect_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateServiceRequest of this CreateServiceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this CreateServiceRequest.


        :return: The cluster of this CreateServiceRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this CreateServiceRequest.


        :param cluster: The cluster of this CreateServiceRequest.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def service_name(self):
        """Gets the service_name of this CreateServiceRequest.


        :return: The service_name of this CreateServiceRequest.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this CreateServiceRequest.


        :param service_name: The service_name of this CreateServiceRequest.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name

    @property
    def task_definition(self):
        """Gets the task_definition of this CreateServiceRequest.


        :return: The task_definition of this CreateServiceRequest.
        :rtype: str
        """
        return self._task_definition

    @task_definition.setter
    def task_definition(self, task_definition):
        """Sets the task_definition of this CreateServiceRequest.


        :param task_definition: The task_definition of this CreateServiceRequest.
        :type task_definition: str
        """

        self._task_definition = task_definition

    @property
    def load_balancers(self):
        """Gets the load_balancers of this CreateServiceRequest.


        :return: The load_balancers of this CreateServiceRequest.
        :rtype: List
        """
        return self._load_balancers

    @load_balancers.setter
    def load_balancers(self, load_balancers):
        """Sets the load_balancers of this CreateServiceRequest.


        :param load_balancers: The load_balancers of this CreateServiceRequest.
        :type load_balancers: List
        """

        self._load_balancers = load_balancers

    @property
    def service_registries(self):
        """Gets the service_registries of this CreateServiceRequest.


        :return: The service_registries of this CreateServiceRequest.
        :rtype: List
        """
        return self._service_registries

    @service_registries.setter
    def service_registries(self, service_registries):
        """Sets the service_registries of this CreateServiceRequest.


        :param service_registries: The service_registries of this CreateServiceRequest.
        :type service_registries: List
        """

        self._service_registries = service_registries

    @property
    def desired_count(self):
        """Gets the desired_count of this CreateServiceRequest.


        :return: The desired_count of this CreateServiceRequest.
        :rtype: int
        """
        return self._desired_count

    @desired_count.setter
    def desired_count(self, desired_count):
        """Sets the desired_count of this CreateServiceRequest.


        :param desired_count: The desired_count of this CreateServiceRequest.
        :type desired_count: int
        """

        self._desired_count = desired_count

    @property
    def client_token(self):
        """Gets the client_token of this CreateServiceRequest.


        :return: The client_token of this CreateServiceRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateServiceRequest.


        :param client_token: The client_token of this CreateServiceRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def launch_type(self):
        """Gets the launch_type of this CreateServiceRequest.


        :return: The launch_type of this CreateServiceRequest.
        :rtype: LaunchType
        """
        return self._launch_type

    @launch_type.setter
    def launch_type(self, launch_type):
        """Sets the launch_type of this CreateServiceRequest.


        :param launch_type: The launch_type of this CreateServiceRequest.
        :type launch_type: LaunchType
        """

        self._launch_type = launch_type

    @property
    def capacity_provider_strategy(self):
        """Gets the capacity_provider_strategy of this CreateServiceRequest.


        :return: The capacity_provider_strategy of this CreateServiceRequest.
        :rtype: List
        """
        return self._capacity_provider_strategy

    @capacity_provider_strategy.setter
    def capacity_provider_strategy(self, capacity_provider_strategy):
        """Sets the capacity_provider_strategy of this CreateServiceRequest.


        :param capacity_provider_strategy: The capacity_provider_strategy of this CreateServiceRequest.
        :type capacity_provider_strategy: List
        """

        self._capacity_provider_strategy = capacity_provider_strategy

    @property
    def platform_version(self):
        """Gets the platform_version of this CreateServiceRequest.


        :return: The platform_version of this CreateServiceRequest.
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this CreateServiceRequest.


        :param platform_version: The platform_version of this CreateServiceRequest.
        :type platform_version: str
        """

        self._platform_version = platform_version

    @property
    def role(self):
        """Gets the role of this CreateServiceRequest.


        :return: The role of this CreateServiceRequest.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CreateServiceRequest.


        :param role: The role of this CreateServiceRequest.
        :type role: str
        """

        self._role = role

    @property
    def deployment_configuration(self):
        """Gets the deployment_configuration of this CreateServiceRequest.


        :return: The deployment_configuration of this CreateServiceRequest.
        :rtype: CreateServiceRequestDeploymentConfiguration
        """
        return self._deployment_configuration

    @deployment_configuration.setter
    def deployment_configuration(self, deployment_configuration):
        """Sets the deployment_configuration of this CreateServiceRequest.


        :param deployment_configuration: The deployment_configuration of this CreateServiceRequest.
        :type deployment_configuration: CreateServiceRequestDeploymentConfiguration
        """

        self._deployment_configuration = deployment_configuration

    @property
    def placement_constraints(self):
        """Gets the placement_constraints of this CreateServiceRequest.


        :return: The placement_constraints of this CreateServiceRequest.
        :rtype: List
        """
        return self._placement_constraints

    @placement_constraints.setter
    def placement_constraints(self, placement_constraints):
        """Sets the placement_constraints of this CreateServiceRequest.


        :param placement_constraints: The placement_constraints of this CreateServiceRequest.
        :type placement_constraints: List
        """

        self._placement_constraints = placement_constraints

    @property
    def placement_strategy(self):
        """Gets the placement_strategy of this CreateServiceRequest.


        :return: The placement_strategy of this CreateServiceRequest.
        :rtype: List
        """
        return self._placement_strategy

    @placement_strategy.setter
    def placement_strategy(self, placement_strategy):
        """Sets the placement_strategy of this CreateServiceRequest.


        :param placement_strategy: The placement_strategy of this CreateServiceRequest.
        :type placement_strategy: List
        """

        self._placement_strategy = placement_strategy

    @property
    def network_configuration(self):
        """Gets the network_configuration of this CreateServiceRequest.


        :return: The network_configuration of this CreateServiceRequest.
        :rtype: CreateServiceRequestNetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this CreateServiceRequest.


        :param network_configuration: The network_configuration of this CreateServiceRequest.
        :type network_configuration: CreateServiceRequestNetworkConfiguration
        """

        self._network_configuration = network_configuration

    @property
    def health_check_grace_period_seconds(self):
        """Gets the health_check_grace_period_seconds of this CreateServiceRequest.


        :return: The health_check_grace_period_seconds of this CreateServiceRequest.
        :rtype: int
        """
        return self._health_check_grace_period_seconds

    @health_check_grace_period_seconds.setter
    def health_check_grace_period_seconds(self, health_check_grace_period_seconds):
        """Sets the health_check_grace_period_seconds of this CreateServiceRequest.


        :param health_check_grace_period_seconds: The health_check_grace_period_seconds of this CreateServiceRequest.
        :type health_check_grace_period_seconds: int
        """

        self._health_check_grace_period_seconds = health_check_grace_period_seconds

    @property
    def scheduling_strategy(self):
        """Gets the scheduling_strategy of this CreateServiceRequest.


        :return: The scheduling_strategy of this CreateServiceRequest.
        :rtype: SchedulingStrategy
        """
        return self._scheduling_strategy

    @scheduling_strategy.setter
    def scheduling_strategy(self, scheduling_strategy):
        """Sets the scheduling_strategy of this CreateServiceRequest.


        :param scheduling_strategy: The scheduling_strategy of this CreateServiceRequest.
        :type scheduling_strategy: SchedulingStrategy
        """

        self._scheduling_strategy = scheduling_strategy

    @property
    def deployment_controller(self):
        """Gets the deployment_controller of this CreateServiceRequest.


        :return: The deployment_controller of this CreateServiceRequest.
        :rtype: CreateServiceRequestDeploymentController
        """
        return self._deployment_controller

    @deployment_controller.setter
    def deployment_controller(self, deployment_controller):
        """Sets the deployment_controller of this CreateServiceRequest.


        :param deployment_controller: The deployment_controller of this CreateServiceRequest.
        :type deployment_controller: CreateServiceRequestDeploymentController
        """

        self._deployment_controller = deployment_controller

    @property
    def tags(self):
        """Gets the tags of this CreateServiceRequest.


        :return: The tags of this CreateServiceRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateServiceRequest.


        :param tags: The tags of this CreateServiceRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def enable_ecs_managed_tags(self):
        """Gets the enable_ecs_managed_tags of this CreateServiceRequest.


        :return: The enable_ecs_managed_tags of this CreateServiceRequest.
        :rtype: bool
        """
        return self._enable_ecs_managed_tags

    @enable_ecs_managed_tags.setter
    def enable_ecs_managed_tags(self, enable_ecs_managed_tags):
        """Sets the enable_ecs_managed_tags of this CreateServiceRequest.


        :param enable_ecs_managed_tags: The enable_ecs_managed_tags of this CreateServiceRequest.
        :type enable_ecs_managed_tags: bool
        """

        self._enable_ecs_managed_tags = enable_ecs_managed_tags

    @property
    def propagate_tags(self):
        """Gets the propagate_tags of this CreateServiceRequest.


        :return: The propagate_tags of this CreateServiceRequest.
        :rtype: PropagateTags
        """
        return self._propagate_tags

    @propagate_tags.setter
    def propagate_tags(self, propagate_tags):
        """Sets the propagate_tags of this CreateServiceRequest.


        :param propagate_tags: The propagate_tags of this CreateServiceRequest.
        :type propagate_tags: PropagateTags
        """

        self._propagate_tags = propagate_tags

    @property
    def enable_execute_command(self):
        """Gets the enable_execute_command of this CreateServiceRequest.


        :return: The enable_execute_command of this CreateServiceRequest.
        :rtype: bool
        """
        return self._enable_execute_command

    @enable_execute_command.setter
    def enable_execute_command(self, enable_execute_command):
        """Sets the enable_execute_command of this CreateServiceRequest.


        :param enable_execute_command: The enable_execute_command of this CreateServiceRequest.
        :type enable_execute_command: bool
        """

        self._enable_execute_command = enable_execute_command

    @property
    def service_connect_configuration(self):
        """Gets the service_connect_configuration of this CreateServiceRequest.


        :return: The service_connect_configuration of this CreateServiceRequest.
        :rtype: CreateServiceRequestServiceConnectConfiguration
        """
        return self._service_connect_configuration

    @service_connect_configuration.setter
    def service_connect_configuration(self, service_connect_configuration):
        """Sets the service_connect_configuration of this CreateServiceRequest.


        :param service_connect_configuration: The service_connect_configuration of this CreateServiceRequest.
        :type service_connect_configuration: CreateServiceRequestServiceConnectConfiguration
        """

        self._service_connect_configuration = service_connect_configuration
