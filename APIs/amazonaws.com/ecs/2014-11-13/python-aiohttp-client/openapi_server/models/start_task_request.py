# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.propagate_tags import PropagateTags
from openapi_server.models.start_task_request_network_configuration import StartTaskRequestNetworkConfiguration
from openapi_server.models.start_task_request_overrides import StartTaskRequestOverrides
from openapi_server import util


class StartTaskRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, container_instances: List=None, enable_ecs_managed_tags: bool=None, enable_execute_command: bool=None, group: str=None, network_configuration: StartTaskRequestNetworkConfiguration=None, overrides: StartTaskRequestOverrides=None, propagate_tags: PropagateTags=None, reference_id: str=None, started_by: str=None, tags: List=None, task_definition: str=None):
        """StartTaskRequest - a model defined in OpenAPI

        :param cluster: The cluster of this StartTaskRequest.
        :param container_instances: The container_instances of this StartTaskRequest.
        :param enable_ecs_managed_tags: The enable_ecs_managed_tags of this StartTaskRequest.
        :param enable_execute_command: The enable_execute_command of this StartTaskRequest.
        :param group: The group of this StartTaskRequest.
        :param network_configuration: The network_configuration of this StartTaskRequest.
        :param overrides: The overrides of this StartTaskRequest.
        :param propagate_tags: The propagate_tags of this StartTaskRequest.
        :param reference_id: The reference_id of this StartTaskRequest.
        :param started_by: The started_by of this StartTaskRequest.
        :param tags: The tags of this StartTaskRequest.
        :param task_definition: The task_definition of this StartTaskRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'container_instances': List,
            'enable_ecs_managed_tags': bool,
            'enable_execute_command': bool,
            'group': str,
            'network_configuration': StartTaskRequestNetworkConfiguration,
            'overrides': StartTaskRequestOverrides,
            'propagate_tags': PropagateTags,
            'reference_id': str,
            'started_by': str,
            'tags': List,
            'task_definition': str
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'container_instances': 'containerInstances',
            'enable_ecs_managed_tags': 'enableECSManagedTags',
            'enable_execute_command': 'enableExecuteCommand',
            'group': 'group',
            'network_configuration': 'networkConfiguration',
            'overrides': 'overrides',
            'propagate_tags': 'propagateTags',
            'reference_id': 'referenceId',
            'started_by': 'startedBy',
            'tags': 'tags',
            'task_definition': 'taskDefinition'
        }

        self._cluster = cluster
        self._container_instances = container_instances
        self._enable_ecs_managed_tags = enable_ecs_managed_tags
        self._enable_execute_command = enable_execute_command
        self._group = group
        self._network_configuration = network_configuration
        self._overrides = overrides
        self._propagate_tags = propagate_tags
        self._reference_id = reference_id
        self._started_by = started_by
        self._tags = tags
        self._task_definition = task_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartTaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartTaskRequest of this StartTaskRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this StartTaskRequest.


        :return: The cluster of this StartTaskRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this StartTaskRequest.


        :param cluster: The cluster of this StartTaskRequest.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def container_instances(self):
        """Gets the container_instances of this StartTaskRequest.


        :return: The container_instances of this StartTaskRequest.
        :rtype: List
        """
        return self._container_instances

    @container_instances.setter
    def container_instances(self, container_instances):
        """Sets the container_instances of this StartTaskRequest.


        :param container_instances: The container_instances of this StartTaskRequest.
        :type container_instances: List
        """
        if container_instances is None:
            raise ValueError("Invalid value for `container_instances`, must not be `None`")

        self._container_instances = container_instances

    @property
    def enable_ecs_managed_tags(self):
        """Gets the enable_ecs_managed_tags of this StartTaskRequest.


        :return: The enable_ecs_managed_tags of this StartTaskRequest.
        :rtype: bool
        """
        return self._enable_ecs_managed_tags

    @enable_ecs_managed_tags.setter
    def enable_ecs_managed_tags(self, enable_ecs_managed_tags):
        """Sets the enable_ecs_managed_tags of this StartTaskRequest.


        :param enable_ecs_managed_tags: The enable_ecs_managed_tags of this StartTaskRequest.
        :type enable_ecs_managed_tags: bool
        """

        self._enable_ecs_managed_tags = enable_ecs_managed_tags

    @property
    def enable_execute_command(self):
        """Gets the enable_execute_command of this StartTaskRequest.


        :return: The enable_execute_command of this StartTaskRequest.
        :rtype: bool
        """
        return self._enable_execute_command

    @enable_execute_command.setter
    def enable_execute_command(self, enable_execute_command):
        """Sets the enable_execute_command of this StartTaskRequest.


        :param enable_execute_command: The enable_execute_command of this StartTaskRequest.
        :type enable_execute_command: bool
        """

        self._enable_execute_command = enable_execute_command

    @property
    def group(self):
        """Gets the group of this StartTaskRequest.


        :return: The group of this StartTaskRequest.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this StartTaskRequest.


        :param group: The group of this StartTaskRequest.
        :type group: str
        """

        self._group = group

    @property
    def network_configuration(self):
        """Gets the network_configuration of this StartTaskRequest.


        :return: The network_configuration of this StartTaskRequest.
        :rtype: StartTaskRequestNetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this StartTaskRequest.


        :param network_configuration: The network_configuration of this StartTaskRequest.
        :type network_configuration: StartTaskRequestNetworkConfiguration
        """

        self._network_configuration = network_configuration

    @property
    def overrides(self):
        """Gets the overrides of this StartTaskRequest.


        :return: The overrides of this StartTaskRequest.
        :rtype: StartTaskRequestOverrides
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this StartTaskRequest.


        :param overrides: The overrides of this StartTaskRequest.
        :type overrides: StartTaskRequestOverrides
        """

        self._overrides = overrides

    @property
    def propagate_tags(self):
        """Gets the propagate_tags of this StartTaskRequest.


        :return: The propagate_tags of this StartTaskRequest.
        :rtype: PropagateTags
        """
        return self._propagate_tags

    @propagate_tags.setter
    def propagate_tags(self, propagate_tags):
        """Sets the propagate_tags of this StartTaskRequest.


        :param propagate_tags: The propagate_tags of this StartTaskRequest.
        :type propagate_tags: PropagateTags
        """

        self._propagate_tags = propagate_tags

    @property
    def reference_id(self):
        """Gets the reference_id of this StartTaskRequest.


        :return: The reference_id of this StartTaskRequest.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this StartTaskRequest.


        :param reference_id: The reference_id of this StartTaskRequest.
        :type reference_id: str
        """

        self._reference_id = reference_id

    @property
    def started_by(self):
        """Gets the started_by of this StartTaskRequest.


        :return: The started_by of this StartTaskRequest.
        :rtype: str
        """
        return self._started_by

    @started_by.setter
    def started_by(self, started_by):
        """Sets the started_by of this StartTaskRequest.


        :param started_by: The started_by of this StartTaskRequest.
        :type started_by: str
        """

        self._started_by = started_by

    @property
    def tags(self):
        """Gets the tags of this StartTaskRequest.


        :return: The tags of this StartTaskRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartTaskRequest.


        :param tags: The tags of this StartTaskRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def task_definition(self):
        """Gets the task_definition of this StartTaskRequest.


        :return: The task_definition of this StartTaskRequest.
        :rtype: str
        """
        return self._task_definition

    @task_definition.setter
    def task_definition(self, task_definition):
        """Sets the task_definition of this StartTaskRequest.


        :param task_definition: The task_definition of this StartTaskRequest.
        :type task_definition: str
        """
        if task_definition is None:
            raise ValueError("Invalid value for `task_definition`, must not be `None`")

        self._task_definition = task_definition
