# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExecuteCommandRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, container: str=None, command: str=None, interactive: bool=None, task: str=None):
        """ExecuteCommandRequest - a model defined in OpenAPI

        :param cluster: The cluster of this ExecuteCommandRequest.
        :param container: The container of this ExecuteCommandRequest.
        :param command: The command of this ExecuteCommandRequest.
        :param interactive: The interactive of this ExecuteCommandRequest.
        :param task: The task of this ExecuteCommandRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'container': str,
            'command': str,
            'interactive': bool,
            'task': str
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'container': 'container',
            'command': 'command',
            'interactive': 'interactive',
            'task': 'task'
        }

        self._cluster = cluster
        self._container = container
        self._command = command
        self._interactive = interactive
        self._task = task

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecuteCommandRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecuteCommandRequest of this ExecuteCommandRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this ExecuteCommandRequest.


        :return: The cluster of this ExecuteCommandRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this ExecuteCommandRequest.


        :param cluster: The cluster of this ExecuteCommandRequest.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def container(self):
        """Gets the container of this ExecuteCommandRequest.


        :return: The container of this ExecuteCommandRequest.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this ExecuteCommandRequest.


        :param container: The container of this ExecuteCommandRequest.
        :type container: str
        """

        self._container = container

    @property
    def command(self):
        """Gets the command of this ExecuteCommandRequest.


        :return: The command of this ExecuteCommandRequest.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ExecuteCommandRequest.


        :param command: The command of this ExecuteCommandRequest.
        :type command: str
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")

        self._command = command

    @property
    def interactive(self):
        """Gets the interactive of this ExecuteCommandRequest.


        :return: The interactive of this ExecuteCommandRequest.
        :rtype: bool
        """
        return self._interactive

    @interactive.setter
    def interactive(self, interactive):
        """Sets the interactive of this ExecuteCommandRequest.


        :param interactive: The interactive of this ExecuteCommandRequest.
        :type interactive: bool
        """
        if interactive is None:
            raise ValueError("Invalid value for `interactive`, must not be `None`")

        self._interactive = interactive

    @property
    def task(self):
        """Gets the task of this ExecuteCommandRequest.


        :return: The task of this ExecuteCommandRequest.
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this ExecuteCommandRequest.


        :param task: The task of this ExecuteCommandRequest.
        :type task: str
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")

        self._task = task
