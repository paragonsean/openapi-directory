# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assign_public_ip import AssignPublicIp
from openapi_server import util


class NetworkConfigurationAwsvpcConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subnets: List=None, security_groups: List=None, assign_public_ip: AssignPublicIp=None):
        """NetworkConfigurationAwsvpcConfiguration - a model defined in OpenAPI

        :param subnets: The subnets of this NetworkConfigurationAwsvpcConfiguration.
        :param security_groups: The security_groups of this NetworkConfigurationAwsvpcConfiguration.
        :param assign_public_ip: The assign_public_ip of this NetworkConfigurationAwsvpcConfiguration.
        """
        self.openapi_types = {
            'subnets': List,
            'security_groups': List,
            'assign_public_ip': AssignPublicIp
        }

        self.attribute_map = {
            'subnets': 'subnets',
            'security_groups': 'securityGroups',
            'assign_public_ip': 'assignPublicIp'
        }

        self._subnets = subnets
        self._security_groups = security_groups
        self._assign_public_ip = assign_public_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkConfigurationAwsvpcConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkConfiguration_awsvpcConfiguration of this NetworkConfigurationAwsvpcConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subnets(self):
        """Gets the subnets of this NetworkConfigurationAwsvpcConfiguration.


        :return: The subnets of this NetworkConfigurationAwsvpcConfiguration.
        :rtype: List
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this NetworkConfigurationAwsvpcConfiguration.


        :param subnets: The subnets of this NetworkConfigurationAwsvpcConfiguration.
        :type subnets: List
        """
        if subnets is None:
            raise ValueError("Invalid value for `subnets`, must not be `None`")

        self._subnets = subnets

    @property
    def security_groups(self):
        """Gets the security_groups of this NetworkConfigurationAwsvpcConfiguration.


        :return: The security_groups of this NetworkConfigurationAwsvpcConfiguration.
        :rtype: List
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this NetworkConfigurationAwsvpcConfiguration.


        :param security_groups: The security_groups of this NetworkConfigurationAwsvpcConfiguration.
        :type security_groups: List
        """

        self._security_groups = security_groups

    @property
    def assign_public_ip(self):
        """Gets the assign_public_ip of this NetworkConfigurationAwsvpcConfiguration.


        :return: The assign_public_ip of this NetworkConfigurationAwsvpcConfiguration.
        :rtype: AssignPublicIp
        """
        return self._assign_public_ip

    @assign_public_ip.setter
    def assign_public_ip(self, assign_public_ip):
        """Sets the assign_public_ip of this NetworkConfigurationAwsvpcConfiguration.


        :param assign_public_ip: The assign_public_ip of this NetworkConfigurationAwsvpcConfiguration.
        :type assign_public_ip: AssignPublicIp
        """

        self._assign_public_ip = assign_public_ip
