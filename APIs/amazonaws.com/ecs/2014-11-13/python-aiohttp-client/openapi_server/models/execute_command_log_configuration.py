# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExecuteCommandLogConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_watch_log_group_name: str=None, cloud_watch_encryption_enabled: bool=None, s3_bucket_name: str=None, s3_encryption_enabled: bool=None, s3_key_prefix: str=None):
        """ExecuteCommandLogConfiguration - a model defined in OpenAPI

        :param cloud_watch_log_group_name: The cloud_watch_log_group_name of this ExecuteCommandLogConfiguration.
        :param cloud_watch_encryption_enabled: The cloud_watch_encryption_enabled of this ExecuteCommandLogConfiguration.
        :param s3_bucket_name: The s3_bucket_name of this ExecuteCommandLogConfiguration.
        :param s3_encryption_enabled: The s3_encryption_enabled of this ExecuteCommandLogConfiguration.
        :param s3_key_prefix: The s3_key_prefix of this ExecuteCommandLogConfiguration.
        """
        self.openapi_types = {
            'cloud_watch_log_group_name': str,
            'cloud_watch_encryption_enabled': bool,
            's3_bucket_name': str,
            's3_encryption_enabled': bool,
            's3_key_prefix': str
        }

        self.attribute_map = {
            'cloud_watch_log_group_name': 'cloudWatchLogGroupName',
            'cloud_watch_encryption_enabled': 'cloudWatchEncryptionEnabled',
            's3_bucket_name': 's3BucketName',
            's3_encryption_enabled': 's3EncryptionEnabled',
            's3_key_prefix': 's3KeyPrefix'
        }

        self._cloud_watch_log_group_name = cloud_watch_log_group_name
        self._cloud_watch_encryption_enabled = cloud_watch_encryption_enabled
        self._s3_bucket_name = s3_bucket_name
        self._s3_encryption_enabled = s3_encryption_enabled
        self._s3_key_prefix = s3_key_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecuteCommandLogConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecuteCommandLogConfiguration of this ExecuteCommandLogConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_watch_log_group_name(self):
        """Gets the cloud_watch_log_group_name of this ExecuteCommandLogConfiguration.


        :return: The cloud_watch_log_group_name of this ExecuteCommandLogConfiguration.
        :rtype: str
        """
        return self._cloud_watch_log_group_name

    @cloud_watch_log_group_name.setter
    def cloud_watch_log_group_name(self, cloud_watch_log_group_name):
        """Sets the cloud_watch_log_group_name of this ExecuteCommandLogConfiguration.


        :param cloud_watch_log_group_name: The cloud_watch_log_group_name of this ExecuteCommandLogConfiguration.
        :type cloud_watch_log_group_name: str
        """

        self._cloud_watch_log_group_name = cloud_watch_log_group_name

    @property
    def cloud_watch_encryption_enabled(self):
        """Gets the cloud_watch_encryption_enabled of this ExecuteCommandLogConfiguration.


        :return: The cloud_watch_encryption_enabled of this ExecuteCommandLogConfiguration.
        :rtype: bool
        """
        return self._cloud_watch_encryption_enabled

    @cloud_watch_encryption_enabled.setter
    def cloud_watch_encryption_enabled(self, cloud_watch_encryption_enabled):
        """Sets the cloud_watch_encryption_enabled of this ExecuteCommandLogConfiguration.


        :param cloud_watch_encryption_enabled: The cloud_watch_encryption_enabled of this ExecuteCommandLogConfiguration.
        :type cloud_watch_encryption_enabled: bool
        """

        self._cloud_watch_encryption_enabled = cloud_watch_encryption_enabled

    @property
    def s3_bucket_name(self):
        """Gets the s3_bucket_name of this ExecuteCommandLogConfiguration.


        :return: The s3_bucket_name of this ExecuteCommandLogConfiguration.
        :rtype: str
        """
        return self._s3_bucket_name

    @s3_bucket_name.setter
    def s3_bucket_name(self, s3_bucket_name):
        """Sets the s3_bucket_name of this ExecuteCommandLogConfiguration.


        :param s3_bucket_name: The s3_bucket_name of this ExecuteCommandLogConfiguration.
        :type s3_bucket_name: str
        """

        self._s3_bucket_name = s3_bucket_name

    @property
    def s3_encryption_enabled(self):
        """Gets the s3_encryption_enabled of this ExecuteCommandLogConfiguration.


        :return: The s3_encryption_enabled of this ExecuteCommandLogConfiguration.
        :rtype: bool
        """
        return self._s3_encryption_enabled

    @s3_encryption_enabled.setter
    def s3_encryption_enabled(self, s3_encryption_enabled):
        """Sets the s3_encryption_enabled of this ExecuteCommandLogConfiguration.


        :param s3_encryption_enabled: The s3_encryption_enabled of this ExecuteCommandLogConfiguration.
        :type s3_encryption_enabled: bool
        """

        self._s3_encryption_enabled = s3_encryption_enabled

    @property
    def s3_key_prefix(self):
        """Gets the s3_key_prefix of this ExecuteCommandLogConfiguration.


        :return: The s3_key_prefix of this ExecuteCommandLogConfiguration.
        :rtype: str
        """
        return self._s3_key_prefix

    @s3_key_prefix.setter
    def s3_key_prefix(self, s3_key_prefix):
        """Sets the s3_key_prefix of this ExecuteCommandLogConfiguration.


        :param s3_key_prefix: The s3_key_prefix of this ExecuteCommandLogConfiguration.
        :type s3_key_prefix: str
        """

        self._s3_key_prefix = s3_key_prefix
