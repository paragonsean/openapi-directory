# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteTaskSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, service: str=None, task_set: str=None, force: bool=None):
        """DeleteTaskSetRequest - a model defined in OpenAPI

        :param cluster: The cluster of this DeleteTaskSetRequest.
        :param service: The service of this DeleteTaskSetRequest.
        :param task_set: The task_set of this DeleteTaskSetRequest.
        :param force: The force of this DeleteTaskSetRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'service': str,
            'task_set': str,
            'force': bool
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'service': 'service',
            'task_set': 'taskSet',
            'force': 'force'
        }

        self._cluster = cluster
        self._service = service
        self._task_set = task_set
        self._force = force

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteTaskSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteTaskSetRequest of this DeleteTaskSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this DeleteTaskSetRequest.


        :return: The cluster of this DeleteTaskSetRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DeleteTaskSetRequest.


        :param cluster: The cluster of this DeleteTaskSetRequest.
        :type cluster: str
        """
        if cluster is None:
            raise ValueError("Invalid value for `cluster`, must not be `None`")

        self._cluster = cluster

    @property
    def service(self):
        """Gets the service of this DeleteTaskSetRequest.


        :return: The service of this DeleteTaskSetRequest.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this DeleteTaskSetRequest.


        :param service: The service of this DeleteTaskSetRequest.
        :type service: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def task_set(self):
        """Gets the task_set of this DeleteTaskSetRequest.


        :return: The task_set of this DeleteTaskSetRequest.
        :rtype: str
        """
        return self._task_set

    @task_set.setter
    def task_set(self, task_set):
        """Sets the task_set of this DeleteTaskSetRequest.


        :param task_set: The task_set of this DeleteTaskSetRequest.
        :type task_set: str
        """
        if task_set is None:
            raise ValueError("Invalid value for `task_set`, must not be `None`")

        self._task_set = task_set

    @property
    def force(self):
        """Gets the force of this DeleteTaskSetRequest.


        :return: The force of this DeleteTaskSetRequest.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this DeleteTaskSetRequest.


        :param force: The force of this DeleteTaskSetRequest.
        :type force: bool
        """

        self._force = force
