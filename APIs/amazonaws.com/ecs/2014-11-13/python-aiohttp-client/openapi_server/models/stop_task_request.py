# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StopTaskRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, task: str=None, reason: str=None):
        """StopTaskRequest - a model defined in OpenAPI

        :param cluster: The cluster of this StopTaskRequest.
        :param task: The task of this StopTaskRequest.
        :param reason: The reason of this StopTaskRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'task': str,
            'reason': str
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'task': 'task',
            'reason': 'reason'
        }

        self._cluster = cluster
        self._task = task
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StopTaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StopTaskRequest of this StopTaskRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this StopTaskRequest.


        :return: The cluster of this StopTaskRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this StopTaskRequest.


        :param cluster: The cluster of this StopTaskRequest.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def task(self):
        """Gets the task of this StopTaskRequest.


        :return: The task of this StopTaskRequest.
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this StopTaskRequest.


        :param task: The task of this StopTaskRequest.
        :type task: str
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")

        self._task = task

    @property
    def reason(self):
        """Gets the reason of this StopTaskRequest.


        :return: The reason of this StopTaskRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this StopTaskRequest.


        :param reason: The reason of this StopTaskRequest.
        :type reason: str
        """

        self._reason = reason
