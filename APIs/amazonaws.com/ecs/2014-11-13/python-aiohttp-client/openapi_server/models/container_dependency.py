# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_condition import ContainerCondition
from openapi_server import util


class ContainerDependency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_name: str=None, condition: ContainerCondition=None):
        """ContainerDependency - a model defined in OpenAPI

        :param container_name: The container_name of this ContainerDependency.
        :param condition: The condition of this ContainerDependency.
        """
        self.openapi_types = {
            'container_name': str,
            'condition': ContainerCondition
        }

        self.attribute_map = {
            'container_name': 'containerName',
            'condition': 'condition'
        }

        self._container_name = container_name
        self._condition = condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerDependency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerDependency of this ContainerDependency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_name(self):
        """Gets the container_name of this ContainerDependency.


        :return: The container_name of this ContainerDependency.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this ContainerDependency.


        :param container_name: The container_name of this ContainerDependency.
        :type container_name: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")

        self._container_name = container_name

    @property
    def condition(self):
        """Gets the condition of this ContainerDependency.


        :return: The condition of this ContainerDependency.
        :rtype: ContainerCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ContainerDependency.


        :param condition: The condition of this ContainerDependency.
        :type condition: ContainerCondition
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")

        self._condition = condition
