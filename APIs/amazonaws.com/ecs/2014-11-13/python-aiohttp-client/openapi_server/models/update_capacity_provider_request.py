# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_capacity_provider_request_auto_scaling_group_provider import UpdateCapacityProviderRequestAutoScalingGroupProvider
from openapi_server import util


class UpdateCapacityProviderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, auto_scaling_group_provider: UpdateCapacityProviderRequestAutoScalingGroupProvider=None):
        """UpdateCapacityProviderRequest - a model defined in OpenAPI

        :param name: The name of this UpdateCapacityProviderRequest.
        :param auto_scaling_group_provider: The auto_scaling_group_provider of this UpdateCapacityProviderRequest.
        """
        self.openapi_types = {
            'name': str,
            'auto_scaling_group_provider': UpdateCapacityProviderRequestAutoScalingGroupProvider
        }

        self.attribute_map = {
            'name': 'name',
            'auto_scaling_group_provider': 'autoScalingGroupProvider'
        }

        self._name = name
        self._auto_scaling_group_provider = auto_scaling_group_provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateCapacityProviderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCapacityProviderRequest of this UpdateCapacityProviderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateCapacityProviderRequest.


        :return: The name of this UpdateCapacityProviderRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateCapacityProviderRequest.


        :param name: The name of this UpdateCapacityProviderRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def auto_scaling_group_provider(self):
        """Gets the auto_scaling_group_provider of this UpdateCapacityProviderRequest.


        :return: The auto_scaling_group_provider of this UpdateCapacityProviderRequest.
        :rtype: UpdateCapacityProviderRequestAutoScalingGroupProvider
        """
        return self._auto_scaling_group_provider

    @auto_scaling_group_provider.setter
    def auto_scaling_group_provider(self, auto_scaling_group_provider):
        """Sets the auto_scaling_group_provider of this UpdateCapacityProviderRequest.


        :param auto_scaling_group_provider: The auto_scaling_group_provider of this UpdateCapacityProviderRequest.
        :type auto_scaling_group_provider: UpdateCapacityProviderRequestAutoScalingGroupProvider
        """
        if auto_scaling_group_provider is None:
            raise ValueError("Invalid value for `auto_scaling_group_provider`, must not be `None`")

        self._auto_scaling_group_provider = auto_scaling_group_provider
