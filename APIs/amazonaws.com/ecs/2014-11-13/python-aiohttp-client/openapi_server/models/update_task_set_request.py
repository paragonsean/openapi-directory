# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_task_set_request_scale import CreateTaskSetRequestScale
from openapi_server import util


class UpdateTaskSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, service: str=None, task_set: str=None, scale: CreateTaskSetRequestScale=None):
        """UpdateTaskSetRequest - a model defined in OpenAPI

        :param cluster: The cluster of this UpdateTaskSetRequest.
        :param service: The service of this UpdateTaskSetRequest.
        :param task_set: The task_set of this UpdateTaskSetRequest.
        :param scale: The scale of this UpdateTaskSetRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'service': str,
            'task_set': str,
            'scale': CreateTaskSetRequestScale
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'service': 'service',
            'task_set': 'taskSet',
            'scale': 'scale'
        }

        self._cluster = cluster
        self._service = service
        self._task_set = task_set
        self._scale = scale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTaskSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTaskSetRequest of this UpdateTaskSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this UpdateTaskSetRequest.


        :return: The cluster of this UpdateTaskSetRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this UpdateTaskSetRequest.


        :param cluster: The cluster of this UpdateTaskSetRequest.
        :type cluster: str
        """
        if cluster is None:
            raise ValueError("Invalid value for `cluster`, must not be `None`")

        self._cluster = cluster

    @property
    def service(self):
        """Gets the service of this UpdateTaskSetRequest.


        :return: The service of this UpdateTaskSetRequest.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this UpdateTaskSetRequest.


        :param service: The service of this UpdateTaskSetRequest.
        :type service: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def task_set(self):
        """Gets the task_set of this UpdateTaskSetRequest.


        :return: The task_set of this UpdateTaskSetRequest.
        :rtype: str
        """
        return self._task_set

    @task_set.setter
    def task_set(self, task_set):
        """Sets the task_set of this UpdateTaskSetRequest.


        :param task_set: The task_set of this UpdateTaskSetRequest.
        :type task_set: str
        """
        if task_set is None:
            raise ValueError("Invalid value for `task_set`, must not be `None`")

        self._task_set = task_set

    @property
    def scale(self):
        """Gets the scale of this UpdateTaskSetRequest.


        :return: The scale of this UpdateTaskSetRequest.
        :rtype: CreateTaskSetRequestScale
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this UpdateTaskSetRequest.


        :param scale: The scale of this UpdateTaskSetRequest.
        :type scale: CreateTaskSetRequestScale
        """
        if scale is None:
            raise ValueError("Invalid value for `scale`, must not be `None`")

        self._scale = scale
