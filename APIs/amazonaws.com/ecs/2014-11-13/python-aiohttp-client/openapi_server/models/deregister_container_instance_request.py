# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeregisterContainerInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, container_instance: str=None, force: bool=None):
        """DeregisterContainerInstanceRequest - a model defined in OpenAPI

        :param cluster: The cluster of this DeregisterContainerInstanceRequest.
        :param container_instance: The container_instance of this DeregisterContainerInstanceRequest.
        :param force: The force of this DeregisterContainerInstanceRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'container_instance': str,
            'force': bool
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'container_instance': 'containerInstance',
            'force': 'force'
        }

        self._cluster = cluster
        self._container_instance = container_instance
        self._force = force

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeregisterContainerInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeregisterContainerInstanceRequest of this DeregisterContainerInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this DeregisterContainerInstanceRequest.


        :return: The cluster of this DeregisterContainerInstanceRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DeregisterContainerInstanceRequest.


        :param cluster: The cluster of this DeregisterContainerInstanceRequest.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def container_instance(self):
        """Gets the container_instance of this DeregisterContainerInstanceRequest.


        :return: The container_instance of this DeregisterContainerInstanceRequest.
        :rtype: str
        """
        return self._container_instance

    @container_instance.setter
    def container_instance(self, container_instance):
        """Sets the container_instance of this DeregisterContainerInstanceRequest.


        :param container_instance: The container_instance of this DeregisterContainerInstanceRequest.
        :type container_instance: str
        """
        if container_instance is None:
            raise ValueError("Invalid value for `container_instance`, must not be `None`")

        self._container_instance = container_instance

    @property
    def force(self):
        """Gets the force of this DeregisterContainerInstanceRequest.


        :return: The force of this DeregisterContainerInstanceRequest.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this DeregisterContainerInstanceRequest.


        :param force: The force of this DeregisterContainerInstanceRequest.
        :type force: bool
        """

        self._force = force
