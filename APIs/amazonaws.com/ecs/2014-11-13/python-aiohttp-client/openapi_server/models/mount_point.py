# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MountPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_volume: str=None, container_path: str=None, read_only: bool=None):
        """MountPoint - a model defined in OpenAPI

        :param source_volume: The source_volume of this MountPoint.
        :param container_path: The container_path of this MountPoint.
        :param read_only: The read_only of this MountPoint.
        """
        self.openapi_types = {
            'source_volume': str,
            'container_path': str,
            'read_only': bool
        }

        self.attribute_map = {
            'source_volume': 'sourceVolume',
            'container_path': 'containerPath',
            'read_only': 'readOnly'
        }

        self._source_volume = source_volume
        self._container_path = container_path
        self._read_only = read_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MountPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MountPoint of this MountPoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_volume(self):
        """Gets the source_volume of this MountPoint.


        :return: The source_volume of this MountPoint.
        :rtype: str
        """
        return self._source_volume

    @source_volume.setter
    def source_volume(self, source_volume):
        """Sets the source_volume of this MountPoint.


        :param source_volume: The source_volume of this MountPoint.
        :type source_volume: str
        """

        self._source_volume = source_volume

    @property
    def container_path(self):
        """Gets the container_path of this MountPoint.


        :return: The container_path of this MountPoint.
        :rtype: str
        """
        return self._container_path

    @container_path.setter
    def container_path(self, container_path):
        """Sets the container_path of this MountPoint.


        :param container_path: The container_path of this MountPoint.
        :type container_path: str
        """

        self._container_path = container_path

    @property
    def read_only(self):
        """Gets the read_only of this MountPoint.


        :return: The read_only of this MountPoint.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this MountPoint.


        :param read_only: The read_only of this MountPoint.
        :type read_only: bool
        """

        self._read_only = read_only
