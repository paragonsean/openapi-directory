# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_cluster_request_service_connect_defaults import CreateClusterRequestServiceConnectDefaults
from openapi_server.models.update_cluster_request_configuration import UpdateClusterRequestConfiguration
from openapi_server import util


class UpdateClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, settings: List=None, configuration: UpdateClusterRequestConfiguration=None, service_connect_defaults: CreateClusterRequestServiceConnectDefaults=None):
        """UpdateClusterRequest - a model defined in OpenAPI

        :param cluster: The cluster of this UpdateClusterRequest.
        :param settings: The settings of this UpdateClusterRequest.
        :param configuration: The configuration of this UpdateClusterRequest.
        :param service_connect_defaults: The service_connect_defaults of this UpdateClusterRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'settings': List,
            'configuration': UpdateClusterRequestConfiguration,
            'service_connect_defaults': CreateClusterRequestServiceConnectDefaults
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'settings': 'settings',
            'configuration': 'configuration',
            'service_connect_defaults': 'serviceConnectDefaults'
        }

        self._cluster = cluster
        self._settings = settings
        self._configuration = configuration
        self._service_connect_defaults = service_connect_defaults

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateClusterRequest of this UpdateClusterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this UpdateClusterRequest.


        :return: The cluster of this UpdateClusterRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this UpdateClusterRequest.


        :param cluster: The cluster of this UpdateClusterRequest.
        :type cluster: str
        """
        if cluster is None:
            raise ValueError("Invalid value for `cluster`, must not be `None`")

        self._cluster = cluster

    @property
    def settings(self):
        """Gets the settings of this UpdateClusterRequest.


        :return: The settings of this UpdateClusterRequest.
        :rtype: List
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UpdateClusterRequest.


        :param settings: The settings of this UpdateClusterRequest.
        :type settings: List
        """

        self._settings = settings

    @property
    def configuration(self):
        """Gets the configuration of this UpdateClusterRequest.


        :return: The configuration of this UpdateClusterRequest.
        :rtype: UpdateClusterRequestConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this UpdateClusterRequest.


        :param configuration: The configuration of this UpdateClusterRequest.
        :type configuration: UpdateClusterRequestConfiguration
        """

        self._configuration = configuration

    @property
    def service_connect_defaults(self):
        """Gets the service_connect_defaults of this UpdateClusterRequest.


        :return: The service_connect_defaults of this UpdateClusterRequest.
        :rtype: CreateClusterRequestServiceConnectDefaults
        """
        return self._service_connect_defaults

    @service_connect_defaults.setter
    def service_connect_defaults(self, service_connect_defaults):
        """Sets the service_connect_defaults of this UpdateClusterRequest.


        :param service_connect_defaults: The service_connect_defaults of this UpdateClusterRequest.
        :type service_connect_defaults: CreateClusterRequestServiceConnectDefaults
        """

        self._service_connect_defaults = service_connect_defaults
