# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeTaskSetsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, service: str=None, task_sets: List=None, include: List=None):
        """DescribeTaskSetsRequest - a model defined in OpenAPI

        :param cluster: The cluster of this DescribeTaskSetsRequest.
        :param service: The service of this DescribeTaskSetsRequest.
        :param task_sets: The task_sets of this DescribeTaskSetsRequest.
        :param include: The include of this DescribeTaskSetsRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'service': str,
            'task_sets': List,
            'include': List
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'service': 'service',
            'task_sets': 'taskSets',
            'include': 'include'
        }

        self._cluster = cluster
        self._service = service
        self._task_sets = task_sets
        self._include = include

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeTaskSetsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeTaskSetsRequest of this DescribeTaskSetsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this DescribeTaskSetsRequest.


        :return: The cluster of this DescribeTaskSetsRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DescribeTaskSetsRequest.


        :param cluster: The cluster of this DescribeTaskSetsRequest.
        :type cluster: str
        """
        if cluster is None:
            raise ValueError("Invalid value for `cluster`, must not be `None`")

        self._cluster = cluster

    @property
    def service(self):
        """Gets the service of this DescribeTaskSetsRequest.


        :return: The service of this DescribeTaskSetsRequest.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this DescribeTaskSetsRequest.


        :param service: The service of this DescribeTaskSetsRequest.
        :type service: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def task_sets(self):
        """Gets the task_sets of this DescribeTaskSetsRequest.


        :return: The task_sets of this DescribeTaskSetsRequest.
        :rtype: List
        """
        return self._task_sets

    @task_sets.setter
    def task_sets(self, task_sets):
        """Sets the task_sets of this DescribeTaskSetsRequest.


        :param task_sets: The task_sets of this DescribeTaskSetsRequest.
        :type task_sets: List
        """

        self._task_sets = task_sets

    @property
    def include(self):
        """Gets the include of this DescribeTaskSetsRequest.


        :return: The include of this DescribeTaskSetsRequest.
        :rtype: List
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this DescribeTaskSetsRequest.


        :param include: The include of this DescribeTaskSetsRequest.
        :type include: List
        """

        self._include = include
