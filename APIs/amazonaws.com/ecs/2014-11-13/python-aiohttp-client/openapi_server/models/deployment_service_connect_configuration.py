# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_configuration import LogConfiguration
from openapi_server import util


class DeploymentServiceConnectConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, namespace: str=None, services: List=None, log_configuration: LogConfiguration=None):
        """DeploymentServiceConnectConfiguration - a model defined in OpenAPI

        :param enabled: The enabled of this DeploymentServiceConnectConfiguration.
        :param namespace: The namespace of this DeploymentServiceConnectConfiguration.
        :param services: The services of this DeploymentServiceConnectConfiguration.
        :param log_configuration: The log_configuration of this DeploymentServiceConnectConfiguration.
        """
        self.openapi_types = {
            'enabled': bool,
            'namespace': str,
            'services': List,
            'log_configuration': LogConfiguration
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'namespace': 'namespace',
            'services': 'services',
            'log_configuration': 'logConfiguration'
        }

        self._enabled = enabled
        self._namespace = namespace
        self._services = services
        self._log_configuration = log_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentServiceConnectConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Deployment_serviceConnectConfiguration of this DeploymentServiceConnectConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this DeploymentServiceConnectConfiguration.


        :return: The enabled of this DeploymentServiceConnectConfiguration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DeploymentServiceConnectConfiguration.


        :param enabled: The enabled of this DeploymentServiceConnectConfiguration.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def namespace(self):
        """Gets the namespace of this DeploymentServiceConnectConfiguration.


        :return: The namespace of this DeploymentServiceConnectConfiguration.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DeploymentServiceConnectConfiguration.


        :param namespace: The namespace of this DeploymentServiceConnectConfiguration.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def services(self):
        """Gets the services of this DeploymentServiceConnectConfiguration.


        :return: The services of this DeploymentServiceConnectConfiguration.
        :rtype: List
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this DeploymentServiceConnectConfiguration.


        :param services: The services of this DeploymentServiceConnectConfiguration.
        :type services: List
        """

        self._services = services

    @property
    def log_configuration(self):
        """Gets the log_configuration of this DeploymentServiceConnectConfiguration.


        :return: The log_configuration of this DeploymentServiceConnectConfiguration.
        :rtype: LogConfiguration
        """
        return self._log_configuration

    @log_configuration.setter
    def log_configuration(self, log_configuration):
        """Sets the log_configuration of this DeploymentServiceConnectConfiguration.


        :param log_configuration: The log_configuration of this DeploymentServiceConnectConfiguration.
        :type log_configuration: LogConfiguration
        """

        self._log_configuration = log_configuration
