# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaskDefinitionEphemeralStorage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, size_in_gi_b: int=None):
        """TaskDefinitionEphemeralStorage - a model defined in OpenAPI

        :param size_in_gi_b: The size_in_gi_b of this TaskDefinitionEphemeralStorage.
        """
        self.openapi_types = {
            'size_in_gi_b': int
        }

        self.attribute_map = {
            'size_in_gi_b': 'sizeInGiB'
        }

        self._size_in_gi_b = size_in_gi_b

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskDefinitionEphemeralStorage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskDefinition_ephemeralStorage of this TaskDefinitionEphemeralStorage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def size_in_gi_b(self):
        """Gets the size_in_gi_b of this TaskDefinitionEphemeralStorage.


        :return: The size_in_gi_b of this TaskDefinitionEphemeralStorage.
        :rtype: int
        """
        return self._size_in_gi_b

    @size_in_gi_b.setter
    def size_in_gi_b(self, size_in_gi_b):
        """Sets the size_in_gi_b of this TaskDefinitionEphemeralStorage.


        :param size_in_gi_b: The size_in_gi_b of this TaskDefinitionEphemeralStorage.
        :type size_in_gi_b: int
        """
        if size_in_gi_b is None:
            raise ValueError("Invalid value for `size_in_gi_b`, must not be `None`")

        self._size_in_gi_b = size_in_gi_b
