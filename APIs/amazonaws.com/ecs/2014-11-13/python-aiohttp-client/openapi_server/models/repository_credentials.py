# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepositoryCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credentials_parameter: str=None):
        """RepositoryCredentials - a model defined in OpenAPI

        :param credentials_parameter: The credentials_parameter of this RepositoryCredentials.
        """
        self.openapi_types = {
            'credentials_parameter': str
        }

        self.attribute_map = {
            'credentials_parameter': 'credentialsParameter'
        }

        self._credentials_parameter = credentials_parameter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepositoryCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepositoryCredentials of this RepositoryCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credentials_parameter(self):
        """Gets the credentials_parameter of this RepositoryCredentials.


        :return: The credentials_parameter of this RepositoryCredentials.
        :rtype: str
        """
        return self._credentials_parameter

    @credentials_parameter.setter
    def credentials_parameter(self, credentials_parameter):
        """Sets the credentials_parameter of this RepositoryCredentials.


        :param credentials_parameter: The credentials_parameter of this RepositoryCredentials.
        :type credentials_parameter: str
        """
        if credentials_parameter is None:
            raise ValueError("Invalid value for `credentials_parameter`, must not be `None`")

        self._credentials_parameter = credentials_parameter
