# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ipc_mode import IpcMode
from openapi_server.models.network_mode import NetworkMode
from openapi_server.models.pid_mode import PidMode
from openapi_server.models.register_task_definition_request_ephemeral_storage import RegisterTaskDefinitionRequestEphemeralStorage
from openapi_server.models.register_task_definition_request_proxy_configuration import RegisterTaskDefinitionRequestProxyConfiguration
from openapi_server.models.register_task_definition_request_runtime_platform import RegisterTaskDefinitionRequestRuntimePlatform
from openapi_server import util


class RegisterTaskDefinitionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, family: str=None, task_role_arn: str=None, execution_role_arn: str=None, network_mode: NetworkMode=None, container_definitions: List=None, volumes: List=None, placement_constraints: List=None, requires_compatibilities: List=None, cpu: str=None, memory: str=None, tags: List=None, pid_mode: PidMode=None, ipc_mode: IpcMode=None, proxy_configuration: RegisterTaskDefinitionRequestProxyConfiguration=None, inference_accelerators: List=None, ephemeral_storage: RegisterTaskDefinitionRequestEphemeralStorage=None, runtime_platform: RegisterTaskDefinitionRequestRuntimePlatform=None):
        """RegisterTaskDefinitionRequest - a model defined in OpenAPI

        :param family: The family of this RegisterTaskDefinitionRequest.
        :param task_role_arn: The task_role_arn of this RegisterTaskDefinitionRequest.
        :param execution_role_arn: The execution_role_arn of this RegisterTaskDefinitionRequest.
        :param network_mode: The network_mode of this RegisterTaskDefinitionRequest.
        :param container_definitions: The container_definitions of this RegisterTaskDefinitionRequest.
        :param volumes: The volumes of this RegisterTaskDefinitionRequest.
        :param placement_constraints: The placement_constraints of this RegisterTaskDefinitionRequest.
        :param requires_compatibilities: The requires_compatibilities of this RegisterTaskDefinitionRequest.
        :param cpu: The cpu of this RegisterTaskDefinitionRequest.
        :param memory: The memory of this RegisterTaskDefinitionRequest.
        :param tags: The tags of this RegisterTaskDefinitionRequest.
        :param pid_mode: The pid_mode of this RegisterTaskDefinitionRequest.
        :param ipc_mode: The ipc_mode of this RegisterTaskDefinitionRequest.
        :param proxy_configuration: The proxy_configuration of this RegisterTaskDefinitionRequest.
        :param inference_accelerators: The inference_accelerators of this RegisterTaskDefinitionRequest.
        :param ephemeral_storage: The ephemeral_storage of this RegisterTaskDefinitionRequest.
        :param runtime_platform: The runtime_platform of this RegisterTaskDefinitionRequest.
        """
        self.openapi_types = {
            'family': str,
            'task_role_arn': str,
            'execution_role_arn': str,
            'network_mode': NetworkMode,
            'container_definitions': List,
            'volumes': List,
            'placement_constraints': List,
            'requires_compatibilities': List,
            'cpu': str,
            'memory': str,
            'tags': List,
            'pid_mode': PidMode,
            'ipc_mode': IpcMode,
            'proxy_configuration': RegisterTaskDefinitionRequestProxyConfiguration,
            'inference_accelerators': List,
            'ephemeral_storage': RegisterTaskDefinitionRequestEphemeralStorage,
            'runtime_platform': RegisterTaskDefinitionRequestRuntimePlatform
        }

        self.attribute_map = {
            'family': 'family',
            'task_role_arn': 'taskRoleArn',
            'execution_role_arn': 'executionRoleArn',
            'network_mode': 'networkMode',
            'container_definitions': 'containerDefinitions',
            'volumes': 'volumes',
            'placement_constraints': 'placementConstraints',
            'requires_compatibilities': 'requiresCompatibilities',
            'cpu': 'cpu',
            'memory': 'memory',
            'tags': 'tags',
            'pid_mode': 'pidMode',
            'ipc_mode': 'ipcMode',
            'proxy_configuration': 'proxyConfiguration',
            'inference_accelerators': 'inferenceAccelerators',
            'ephemeral_storage': 'ephemeralStorage',
            'runtime_platform': 'runtimePlatform'
        }

        self._family = family
        self._task_role_arn = task_role_arn
        self._execution_role_arn = execution_role_arn
        self._network_mode = network_mode
        self._container_definitions = container_definitions
        self._volumes = volumes
        self._placement_constraints = placement_constraints
        self._requires_compatibilities = requires_compatibilities
        self._cpu = cpu
        self._memory = memory
        self._tags = tags
        self._pid_mode = pid_mode
        self._ipc_mode = ipc_mode
        self._proxy_configuration = proxy_configuration
        self._inference_accelerators = inference_accelerators
        self._ephemeral_storage = ephemeral_storage
        self._runtime_platform = runtime_platform

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterTaskDefinitionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterTaskDefinitionRequest of this RegisterTaskDefinitionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def family(self):
        """Gets the family of this RegisterTaskDefinitionRequest.


        :return: The family of this RegisterTaskDefinitionRequest.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this RegisterTaskDefinitionRequest.


        :param family: The family of this RegisterTaskDefinitionRequest.
        :type family: str
        """
        if family is None:
            raise ValueError("Invalid value for `family`, must not be `None`")

        self._family = family

    @property
    def task_role_arn(self):
        """Gets the task_role_arn of this RegisterTaskDefinitionRequest.


        :return: The task_role_arn of this RegisterTaskDefinitionRequest.
        :rtype: str
        """
        return self._task_role_arn

    @task_role_arn.setter
    def task_role_arn(self, task_role_arn):
        """Sets the task_role_arn of this RegisterTaskDefinitionRequest.


        :param task_role_arn: The task_role_arn of this RegisterTaskDefinitionRequest.
        :type task_role_arn: str
        """

        self._task_role_arn = task_role_arn

    @property
    def execution_role_arn(self):
        """Gets the execution_role_arn of this RegisterTaskDefinitionRequest.


        :return: The execution_role_arn of this RegisterTaskDefinitionRequest.
        :rtype: str
        """
        return self._execution_role_arn

    @execution_role_arn.setter
    def execution_role_arn(self, execution_role_arn):
        """Sets the execution_role_arn of this RegisterTaskDefinitionRequest.


        :param execution_role_arn: The execution_role_arn of this RegisterTaskDefinitionRequest.
        :type execution_role_arn: str
        """

        self._execution_role_arn = execution_role_arn

    @property
    def network_mode(self):
        """Gets the network_mode of this RegisterTaskDefinitionRequest.


        :return: The network_mode of this RegisterTaskDefinitionRequest.
        :rtype: NetworkMode
        """
        return self._network_mode

    @network_mode.setter
    def network_mode(self, network_mode):
        """Sets the network_mode of this RegisterTaskDefinitionRequest.


        :param network_mode: The network_mode of this RegisterTaskDefinitionRequest.
        :type network_mode: NetworkMode
        """

        self._network_mode = network_mode

    @property
    def container_definitions(self):
        """Gets the container_definitions of this RegisterTaskDefinitionRequest.


        :return: The container_definitions of this RegisterTaskDefinitionRequest.
        :rtype: List
        """
        return self._container_definitions

    @container_definitions.setter
    def container_definitions(self, container_definitions):
        """Sets the container_definitions of this RegisterTaskDefinitionRequest.


        :param container_definitions: The container_definitions of this RegisterTaskDefinitionRequest.
        :type container_definitions: List
        """
        if container_definitions is None:
            raise ValueError("Invalid value for `container_definitions`, must not be `None`")

        self._container_definitions = container_definitions

    @property
    def volumes(self):
        """Gets the volumes of this RegisterTaskDefinitionRequest.


        :return: The volumes of this RegisterTaskDefinitionRequest.
        :rtype: List
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this RegisterTaskDefinitionRequest.


        :param volumes: The volumes of this RegisterTaskDefinitionRequest.
        :type volumes: List
        """

        self._volumes = volumes

    @property
    def placement_constraints(self):
        """Gets the placement_constraints of this RegisterTaskDefinitionRequest.


        :return: The placement_constraints of this RegisterTaskDefinitionRequest.
        :rtype: List
        """
        return self._placement_constraints

    @placement_constraints.setter
    def placement_constraints(self, placement_constraints):
        """Sets the placement_constraints of this RegisterTaskDefinitionRequest.


        :param placement_constraints: The placement_constraints of this RegisterTaskDefinitionRequest.
        :type placement_constraints: List
        """

        self._placement_constraints = placement_constraints

    @property
    def requires_compatibilities(self):
        """Gets the requires_compatibilities of this RegisterTaskDefinitionRequest.


        :return: The requires_compatibilities of this RegisterTaskDefinitionRequest.
        :rtype: List
        """
        return self._requires_compatibilities

    @requires_compatibilities.setter
    def requires_compatibilities(self, requires_compatibilities):
        """Sets the requires_compatibilities of this RegisterTaskDefinitionRequest.


        :param requires_compatibilities: The requires_compatibilities of this RegisterTaskDefinitionRequest.
        :type requires_compatibilities: List
        """

        self._requires_compatibilities = requires_compatibilities

    @property
    def cpu(self):
        """Gets the cpu of this RegisterTaskDefinitionRequest.


        :return: The cpu of this RegisterTaskDefinitionRequest.
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this RegisterTaskDefinitionRequest.


        :param cpu: The cpu of this RegisterTaskDefinitionRequest.
        :type cpu: str
        """

        self._cpu = cpu

    @property
    def memory(self):
        """Gets the memory of this RegisterTaskDefinitionRequest.


        :return: The memory of this RegisterTaskDefinitionRequest.
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this RegisterTaskDefinitionRequest.


        :param memory: The memory of this RegisterTaskDefinitionRequest.
        :type memory: str
        """

        self._memory = memory

    @property
    def tags(self):
        """Gets the tags of this RegisterTaskDefinitionRequest.


        :return: The tags of this RegisterTaskDefinitionRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RegisterTaskDefinitionRequest.


        :param tags: The tags of this RegisterTaskDefinitionRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def pid_mode(self):
        """Gets the pid_mode of this RegisterTaskDefinitionRequest.


        :return: The pid_mode of this RegisterTaskDefinitionRequest.
        :rtype: PidMode
        """
        return self._pid_mode

    @pid_mode.setter
    def pid_mode(self, pid_mode):
        """Sets the pid_mode of this RegisterTaskDefinitionRequest.


        :param pid_mode: The pid_mode of this RegisterTaskDefinitionRequest.
        :type pid_mode: PidMode
        """

        self._pid_mode = pid_mode

    @property
    def ipc_mode(self):
        """Gets the ipc_mode of this RegisterTaskDefinitionRequest.


        :return: The ipc_mode of this RegisterTaskDefinitionRequest.
        :rtype: IpcMode
        """
        return self._ipc_mode

    @ipc_mode.setter
    def ipc_mode(self, ipc_mode):
        """Sets the ipc_mode of this RegisterTaskDefinitionRequest.


        :param ipc_mode: The ipc_mode of this RegisterTaskDefinitionRequest.
        :type ipc_mode: IpcMode
        """

        self._ipc_mode = ipc_mode

    @property
    def proxy_configuration(self):
        """Gets the proxy_configuration of this RegisterTaskDefinitionRequest.


        :return: The proxy_configuration of this RegisterTaskDefinitionRequest.
        :rtype: RegisterTaskDefinitionRequestProxyConfiguration
        """
        return self._proxy_configuration

    @proxy_configuration.setter
    def proxy_configuration(self, proxy_configuration):
        """Sets the proxy_configuration of this RegisterTaskDefinitionRequest.


        :param proxy_configuration: The proxy_configuration of this RegisterTaskDefinitionRequest.
        :type proxy_configuration: RegisterTaskDefinitionRequestProxyConfiguration
        """

        self._proxy_configuration = proxy_configuration

    @property
    def inference_accelerators(self):
        """Gets the inference_accelerators of this RegisterTaskDefinitionRequest.


        :return: The inference_accelerators of this RegisterTaskDefinitionRequest.
        :rtype: List
        """
        return self._inference_accelerators

    @inference_accelerators.setter
    def inference_accelerators(self, inference_accelerators):
        """Sets the inference_accelerators of this RegisterTaskDefinitionRequest.


        :param inference_accelerators: The inference_accelerators of this RegisterTaskDefinitionRequest.
        :type inference_accelerators: List
        """

        self._inference_accelerators = inference_accelerators

    @property
    def ephemeral_storage(self):
        """Gets the ephemeral_storage of this RegisterTaskDefinitionRequest.


        :return: The ephemeral_storage of this RegisterTaskDefinitionRequest.
        :rtype: RegisterTaskDefinitionRequestEphemeralStorage
        """
        return self._ephemeral_storage

    @ephemeral_storage.setter
    def ephemeral_storage(self, ephemeral_storage):
        """Sets the ephemeral_storage of this RegisterTaskDefinitionRequest.


        :param ephemeral_storage: The ephemeral_storage of this RegisterTaskDefinitionRequest.
        :type ephemeral_storage: RegisterTaskDefinitionRequestEphemeralStorage
        """

        self._ephemeral_storage = ephemeral_storage

    @property
    def runtime_platform(self):
        """Gets the runtime_platform of this RegisterTaskDefinitionRequest.


        :return: The runtime_platform of this RegisterTaskDefinitionRequest.
        :rtype: RegisterTaskDefinitionRequestRuntimePlatform
        """
        return self._runtime_platform

    @runtime_platform.setter
    def runtime_platform(self, runtime_platform):
        """Sets the runtime_platform of this RegisterTaskDefinitionRequest.


        :param runtime_platform: The runtime_platform of this RegisterTaskDefinitionRequest.
        :type runtime_platform: RegisterTaskDefinitionRequestRuntimePlatform
        """

        self._runtime_platform = runtime_platform
