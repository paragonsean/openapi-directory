# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scope import Scope
from openapi_server import util


class DockerVolumeConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scope: Scope=None, autoprovision: bool=None, driver: str=None, driver_opts: Dict=None, labels: Dict=None):
        """DockerVolumeConfiguration - a model defined in OpenAPI

        :param scope: The scope of this DockerVolumeConfiguration.
        :param autoprovision: The autoprovision of this DockerVolumeConfiguration.
        :param driver: The driver of this DockerVolumeConfiguration.
        :param driver_opts: The driver_opts of this DockerVolumeConfiguration.
        :param labels: The labels of this DockerVolumeConfiguration.
        """
        self.openapi_types = {
            'scope': Scope,
            'autoprovision': bool,
            'driver': str,
            'driver_opts': Dict,
            'labels': Dict
        }

        self.attribute_map = {
            'scope': 'scope',
            'autoprovision': 'autoprovision',
            'driver': 'driver',
            'driver_opts': 'driverOpts',
            'labels': 'labels'
        }

        self._scope = scope
        self._autoprovision = autoprovision
        self._driver = driver
        self._driver_opts = driver_opts
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DockerVolumeConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DockerVolumeConfiguration of this DockerVolumeConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scope(self):
        """Gets the scope of this DockerVolumeConfiguration.


        :return: The scope of this DockerVolumeConfiguration.
        :rtype: Scope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this DockerVolumeConfiguration.


        :param scope: The scope of this DockerVolumeConfiguration.
        :type scope: Scope
        """

        self._scope = scope

    @property
    def autoprovision(self):
        """Gets the autoprovision of this DockerVolumeConfiguration.


        :return: The autoprovision of this DockerVolumeConfiguration.
        :rtype: bool
        """
        return self._autoprovision

    @autoprovision.setter
    def autoprovision(self, autoprovision):
        """Sets the autoprovision of this DockerVolumeConfiguration.


        :param autoprovision: The autoprovision of this DockerVolumeConfiguration.
        :type autoprovision: bool
        """

        self._autoprovision = autoprovision

    @property
    def driver(self):
        """Gets the driver of this DockerVolumeConfiguration.


        :return: The driver of this DockerVolumeConfiguration.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this DockerVolumeConfiguration.


        :param driver: The driver of this DockerVolumeConfiguration.
        :type driver: str
        """

        self._driver = driver

    @property
    def driver_opts(self):
        """Gets the driver_opts of this DockerVolumeConfiguration.


        :return: The driver_opts of this DockerVolumeConfiguration.
        :rtype: Dict
        """
        return self._driver_opts

    @driver_opts.setter
    def driver_opts(self, driver_opts):
        """Sets the driver_opts of this DockerVolumeConfiguration.


        :param driver_opts: The driver_opts of this DockerVolumeConfiguration.
        :type driver_opts: Dict
        """

        self._driver_opts = driver_opts

    @property
    def labels(self):
        """Gets the labels of this DockerVolumeConfiguration.


        :return: The labels of this DockerVolumeConfiguration.
        :rtype: Dict
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DockerVolumeConfiguration.


        :param labels: The labels of this DockerVolumeConfiguration.
        :type labels: Dict
        """

        self._labels = labels
