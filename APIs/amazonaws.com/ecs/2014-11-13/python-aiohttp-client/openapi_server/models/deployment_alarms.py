# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeploymentAlarms(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alarm_names: List=None, enable: bool=None, rollback: bool=None):
        """DeploymentAlarms - a model defined in OpenAPI

        :param alarm_names: The alarm_names of this DeploymentAlarms.
        :param enable: The enable of this DeploymentAlarms.
        :param rollback: The rollback of this DeploymentAlarms.
        """
        self.openapi_types = {
            'alarm_names': List,
            'enable': bool,
            'rollback': bool
        }

        self.attribute_map = {
            'alarm_names': 'alarmNames',
            'enable': 'enable',
            'rollback': 'rollback'
        }

        self._alarm_names = alarm_names
        self._enable = enable
        self._rollback = rollback

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentAlarms':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentAlarms of this DeploymentAlarms.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alarm_names(self):
        """Gets the alarm_names of this DeploymentAlarms.


        :return: The alarm_names of this DeploymentAlarms.
        :rtype: List
        """
        return self._alarm_names

    @alarm_names.setter
    def alarm_names(self, alarm_names):
        """Sets the alarm_names of this DeploymentAlarms.


        :param alarm_names: The alarm_names of this DeploymentAlarms.
        :type alarm_names: List
        """
        if alarm_names is None:
            raise ValueError("Invalid value for `alarm_names`, must not be `None`")

        self._alarm_names = alarm_names

    @property
    def enable(self):
        """Gets the enable of this DeploymentAlarms.


        :return: The enable of this DeploymentAlarms.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this DeploymentAlarms.


        :param enable: The enable of this DeploymentAlarms.
        :type enable: bool
        """
        if enable is None:
            raise ValueError("Invalid value for `enable`, must not be `None`")

        self._enable = enable

    @property
    def rollback(self):
        """Gets the rollback of this DeploymentAlarms.


        :return: The rollback of this DeploymentAlarms.
        :rtype: bool
        """
        return self._rollback

    @rollback.setter
    def rollback(self, rollback):
        """Sets the rollback of this DeploymentAlarms.


        :param rollback: The rollback of this DeploymentAlarms.
        :type rollback: bool
        """
        if rollback is None:
            raise ValueError("Invalid value for `rollback`, must not be `None`")

        self._rollback = rollback
