# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Secret(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, value_from: str=None):
        """Secret - a model defined in OpenAPI

        :param name: The name of this Secret.
        :param value_from: The value_from of this Secret.
        """
        self.openapi_types = {
            'name': str,
            'value_from': str
        }

        self.attribute_map = {
            'name': 'name',
            'value_from': 'valueFrom'
        }

        self._name = name
        self._value_from = value_from

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Secret':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Secret of this Secret.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Secret.


        :return: The name of this Secret.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Secret.


        :param name: The name of this Secret.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value_from(self):
        """Gets the value_from of this Secret.


        :return: The value_from of this Secret.
        :rtype: str
        """
        return self._value_from

    @value_from.setter
    def value_from(self, value_from):
        """Sets the value_from of this Secret.


        :param value_from: The value_from of this Secret.
        :type value_from: str
        """
        if value_from is None:
            raise ValueError("Invalid value for `value_from`, must not be `None`")

        self._value_from = value_from
