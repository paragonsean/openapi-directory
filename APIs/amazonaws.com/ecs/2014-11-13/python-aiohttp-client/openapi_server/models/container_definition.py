# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_definition_firelens_configuration import ContainerDefinitionFirelensConfiguration
from openapi_server.models.container_definition_health_check import ContainerDefinitionHealthCheck
from openapi_server.models.container_definition_linux_parameters import ContainerDefinitionLinuxParameters
from openapi_server.models.container_definition_log_configuration import ContainerDefinitionLogConfiguration
from openapi_server.models.container_definition_repository_credentials import ContainerDefinitionRepositoryCredentials
from openapi_server import util


class ContainerDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, image: str=None, repository_credentials: ContainerDefinitionRepositoryCredentials=None, cpu: int=None, memory: int=None, memory_reservation: int=None, links: List=None, port_mappings: List=None, essential: bool=None, entry_point: List=None, command: List=None, environment: List=None, environment_files: List=None, mount_points: List=None, volumes_from: List=None, linux_parameters: ContainerDefinitionLinuxParameters=None, secrets: List=None, depends_on: List=None, start_timeout: int=None, stop_timeout: int=None, hostname: str=None, user: str=None, working_directory: str=None, disable_networking: bool=None, privileged: bool=None, readonly_root_filesystem: bool=None, dns_servers: List=None, dns_search_domains: List=None, extra_hosts: List=None, docker_security_options: List=None, interactive: bool=None, pseudo_terminal: bool=None, docker_labels: Dict=None, ulimits: List=None, log_configuration: ContainerDefinitionLogConfiguration=None, health_check: ContainerDefinitionHealthCheck=None, system_controls: List=None, resource_requirements: List=None, firelens_configuration: ContainerDefinitionFirelensConfiguration=None, credential_specs: List=None):
        """ContainerDefinition - a model defined in OpenAPI

        :param name: The name of this ContainerDefinition.
        :param image: The image of this ContainerDefinition.
        :param repository_credentials: The repository_credentials of this ContainerDefinition.
        :param cpu: The cpu of this ContainerDefinition.
        :param memory: The memory of this ContainerDefinition.
        :param memory_reservation: The memory_reservation of this ContainerDefinition.
        :param links: The links of this ContainerDefinition.
        :param port_mappings: The port_mappings of this ContainerDefinition.
        :param essential: The essential of this ContainerDefinition.
        :param entry_point: The entry_point of this ContainerDefinition.
        :param command: The command of this ContainerDefinition.
        :param environment: The environment of this ContainerDefinition.
        :param environment_files: The environment_files of this ContainerDefinition.
        :param mount_points: The mount_points of this ContainerDefinition.
        :param volumes_from: The volumes_from of this ContainerDefinition.
        :param linux_parameters: The linux_parameters of this ContainerDefinition.
        :param secrets: The secrets of this ContainerDefinition.
        :param depends_on: The depends_on of this ContainerDefinition.
        :param start_timeout: The start_timeout of this ContainerDefinition.
        :param stop_timeout: The stop_timeout of this ContainerDefinition.
        :param hostname: The hostname of this ContainerDefinition.
        :param user: The user of this ContainerDefinition.
        :param working_directory: The working_directory of this ContainerDefinition.
        :param disable_networking: The disable_networking of this ContainerDefinition.
        :param privileged: The privileged of this ContainerDefinition.
        :param readonly_root_filesystem: The readonly_root_filesystem of this ContainerDefinition.
        :param dns_servers: The dns_servers of this ContainerDefinition.
        :param dns_search_domains: The dns_search_domains of this ContainerDefinition.
        :param extra_hosts: The extra_hosts of this ContainerDefinition.
        :param docker_security_options: The docker_security_options of this ContainerDefinition.
        :param interactive: The interactive of this ContainerDefinition.
        :param pseudo_terminal: The pseudo_terminal of this ContainerDefinition.
        :param docker_labels: The docker_labels of this ContainerDefinition.
        :param ulimits: The ulimits of this ContainerDefinition.
        :param log_configuration: The log_configuration of this ContainerDefinition.
        :param health_check: The health_check of this ContainerDefinition.
        :param system_controls: The system_controls of this ContainerDefinition.
        :param resource_requirements: The resource_requirements of this ContainerDefinition.
        :param firelens_configuration: The firelens_configuration of this ContainerDefinition.
        :param credential_specs: The credential_specs of this ContainerDefinition.
        """
        self.openapi_types = {
            'name': str,
            'image': str,
            'repository_credentials': ContainerDefinitionRepositoryCredentials,
            'cpu': int,
            'memory': int,
            'memory_reservation': int,
            'links': List,
            'port_mappings': List,
            'essential': bool,
            'entry_point': List,
            'command': List,
            'environment': List,
            'environment_files': List,
            'mount_points': List,
            'volumes_from': List,
            'linux_parameters': ContainerDefinitionLinuxParameters,
            'secrets': List,
            'depends_on': List,
            'start_timeout': int,
            'stop_timeout': int,
            'hostname': str,
            'user': str,
            'working_directory': str,
            'disable_networking': bool,
            'privileged': bool,
            'readonly_root_filesystem': bool,
            'dns_servers': List,
            'dns_search_domains': List,
            'extra_hosts': List,
            'docker_security_options': List,
            'interactive': bool,
            'pseudo_terminal': bool,
            'docker_labels': Dict,
            'ulimits': List,
            'log_configuration': ContainerDefinitionLogConfiguration,
            'health_check': ContainerDefinitionHealthCheck,
            'system_controls': List,
            'resource_requirements': List,
            'firelens_configuration': ContainerDefinitionFirelensConfiguration,
            'credential_specs': List
        }

        self.attribute_map = {
            'name': 'name',
            'image': 'image',
            'repository_credentials': 'repositoryCredentials',
            'cpu': 'cpu',
            'memory': 'memory',
            'memory_reservation': 'memoryReservation',
            'links': 'links',
            'port_mappings': 'portMappings',
            'essential': 'essential',
            'entry_point': 'entryPoint',
            'command': 'command',
            'environment': 'environment',
            'environment_files': 'environmentFiles',
            'mount_points': 'mountPoints',
            'volumes_from': 'volumesFrom',
            'linux_parameters': 'linuxParameters',
            'secrets': 'secrets',
            'depends_on': 'dependsOn',
            'start_timeout': 'startTimeout',
            'stop_timeout': 'stopTimeout',
            'hostname': 'hostname',
            'user': 'user',
            'working_directory': 'workingDirectory',
            'disable_networking': 'disableNetworking',
            'privileged': 'privileged',
            'readonly_root_filesystem': 'readonlyRootFilesystem',
            'dns_servers': 'dnsServers',
            'dns_search_domains': 'dnsSearchDomains',
            'extra_hosts': 'extraHosts',
            'docker_security_options': 'dockerSecurityOptions',
            'interactive': 'interactive',
            'pseudo_terminal': 'pseudoTerminal',
            'docker_labels': 'dockerLabels',
            'ulimits': 'ulimits',
            'log_configuration': 'logConfiguration',
            'health_check': 'healthCheck',
            'system_controls': 'systemControls',
            'resource_requirements': 'resourceRequirements',
            'firelens_configuration': 'firelensConfiguration',
            'credential_specs': 'credentialSpecs'
        }

        self._name = name
        self._image = image
        self._repository_credentials = repository_credentials
        self._cpu = cpu
        self._memory = memory
        self._memory_reservation = memory_reservation
        self._links = links
        self._port_mappings = port_mappings
        self._essential = essential
        self._entry_point = entry_point
        self._command = command
        self._environment = environment
        self._environment_files = environment_files
        self._mount_points = mount_points
        self._volumes_from = volumes_from
        self._linux_parameters = linux_parameters
        self._secrets = secrets
        self._depends_on = depends_on
        self._start_timeout = start_timeout
        self._stop_timeout = stop_timeout
        self._hostname = hostname
        self._user = user
        self._working_directory = working_directory
        self._disable_networking = disable_networking
        self._privileged = privileged
        self._readonly_root_filesystem = readonly_root_filesystem
        self._dns_servers = dns_servers
        self._dns_search_domains = dns_search_domains
        self._extra_hosts = extra_hosts
        self._docker_security_options = docker_security_options
        self._interactive = interactive
        self._pseudo_terminal = pseudo_terminal
        self._docker_labels = docker_labels
        self._ulimits = ulimits
        self._log_configuration = log_configuration
        self._health_check = health_check
        self._system_controls = system_controls
        self._resource_requirements = resource_requirements
        self._firelens_configuration = firelens_configuration
        self._credential_specs = credential_specs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerDefinition of this ContainerDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ContainerDefinition.


        :return: The name of this ContainerDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContainerDefinition.


        :param name: The name of this ContainerDefinition.
        :type name: str
        """

        self._name = name

    @property
    def image(self):
        """Gets the image of this ContainerDefinition.


        :return: The image of this ContainerDefinition.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ContainerDefinition.


        :param image: The image of this ContainerDefinition.
        :type image: str
        """

        self._image = image

    @property
    def repository_credentials(self):
        """Gets the repository_credentials of this ContainerDefinition.


        :return: The repository_credentials of this ContainerDefinition.
        :rtype: ContainerDefinitionRepositoryCredentials
        """
        return self._repository_credentials

    @repository_credentials.setter
    def repository_credentials(self, repository_credentials):
        """Sets the repository_credentials of this ContainerDefinition.


        :param repository_credentials: The repository_credentials of this ContainerDefinition.
        :type repository_credentials: ContainerDefinitionRepositoryCredentials
        """

        self._repository_credentials = repository_credentials

    @property
    def cpu(self):
        """Gets the cpu of this ContainerDefinition.


        :return: The cpu of this ContainerDefinition.
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this ContainerDefinition.


        :param cpu: The cpu of this ContainerDefinition.
        :type cpu: int
        """

        self._cpu = cpu

    @property
    def memory(self):
        """Gets the memory of this ContainerDefinition.


        :return: The memory of this ContainerDefinition.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ContainerDefinition.


        :param memory: The memory of this ContainerDefinition.
        :type memory: int
        """

        self._memory = memory

    @property
    def memory_reservation(self):
        """Gets the memory_reservation of this ContainerDefinition.


        :return: The memory_reservation of this ContainerDefinition.
        :rtype: int
        """
        return self._memory_reservation

    @memory_reservation.setter
    def memory_reservation(self, memory_reservation):
        """Sets the memory_reservation of this ContainerDefinition.


        :param memory_reservation: The memory_reservation of this ContainerDefinition.
        :type memory_reservation: int
        """

        self._memory_reservation = memory_reservation

    @property
    def links(self):
        """Gets the links of this ContainerDefinition.


        :return: The links of this ContainerDefinition.
        :rtype: List
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ContainerDefinition.


        :param links: The links of this ContainerDefinition.
        :type links: List
        """

        self._links = links

    @property
    def port_mappings(self):
        """Gets the port_mappings of this ContainerDefinition.


        :return: The port_mappings of this ContainerDefinition.
        :rtype: List
        """
        return self._port_mappings

    @port_mappings.setter
    def port_mappings(self, port_mappings):
        """Sets the port_mappings of this ContainerDefinition.


        :param port_mappings: The port_mappings of this ContainerDefinition.
        :type port_mappings: List
        """

        self._port_mappings = port_mappings

    @property
    def essential(self):
        """Gets the essential of this ContainerDefinition.


        :return: The essential of this ContainerDefinition.
        :rtype: bool
        """
        return self._essential

    @essential.setter
    def essential(self, essential):
        """Sets the essential of this ContainerDefinition.


        :param essential: The essential of this ContainerDefinition.
        :type essential: bool
        """

        self._essential = essential

    @property
    def entry_point(self):
        """Gets the entry_point of this ContainerDefinition.


        :return: The entry_point of this ContainerDefinition.
        :rtype: List
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """Sets the entry_point of this ContainerDefinition.


        :param entry_point: The entry_point of this ContainerDefinition.
        :type entry_point: List
        """

        self._entry_point = entry_point

    @property
    def command(self):
        """Gets the command of this ContainerDefinition.


        :return: The command of this ContainerDefinition.
        :rtype: List
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ContainerDefinition.


        :param command: The command of this ContainerDefinition.
        :type command: List
        """

        self._command = command

    @property
    def environment(self):
        """Gets the environment of this ContainerDefinition.


        :return: The environment of this ContainerDefinition.
        :rtype: List
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ContainerDefinition.


        :param environment: The environment of this ContainerDefinition.
        :type environment: List
        """

        self._environment = environment

    @property
    def environment_files(self):
        """Gets the environment_files of this ContainerDefinition.


        :return: The environment_files of this ContainerDefinition.
        :rtype: List
        """
        return self._environment_files

    @environment_files.setter
    def environment_files(self, environment_files):
        """Sets the environment_files of this ContainerDefinition.


        :param environment_files: The environment_files of this ContainerDefinition.
        :type environment_files: List
        """

        self._environment_files = environment_files

    @property
    def mount_points(self):
        """Gets the mount_points of this ContainerDefinition.


        :return: The mount_points of this ContainerDefinition.
        :rtype: List
        """
        return self._mount_points

    @mount_points.setter
    def mount_points(self, mount_points):
        """Sets the mount_points of this ContainerDefinition.


        :param mount_points: The mount_points of this ContainerDefinition.
        :type mount_points: List
        """

        self._mount_points = mount_points

    @property
    def volumes_from(self):
        """Gets the volumes_from of this ContainerDefinition.


        :return: The volumes_from of this ContainerDefinition.
        :rtype: List
        """
        return self._volumes_from

    @volumes_from.setter
    def volumes_from(self, volumes_from):
        """Sets the volumes_from of this ContainerDefinition.


        :param volumes_from: The volumes_from of this ContainerDefinition.
        :type volumes_from: List
        """

        self._volumes_from = volumes_from

    @property
    def linux_parameters(self):
        """Gets the linux_parameters of this ContainerDefinition.


        :return: The linux_parameters of this ContainerDefinition.
        :rtype: ContainerDefinitionLinuxParameters
        """
        return self._linux_parameters

    @linux_parameters.setter
    def linux_parameters(self, linux_parameters):
        """Sets the linux_parameters of this ContainerDefinition.


        :param linux_parameters: The linux_parameters of this ContainerDefinition.
        :type linux_parameters: ContainerDefinitionLinuxParameters
        """

        self._linux_parameters = linux_parameters

    @property
    def secrets(self):
        """Gets the secrets of this ContainerDefinition.


        :return: The secrets of this ContainerDefinition.
        :rtype: List
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this ContainerDefinition.


        :param secrets: The secrets of this ContainerDefinition.
        :type secrets: List
        """

        self._secrets = secrets

    @property
    def depends_on(self):
        """Gets the depends_on of this ContainerDefinition.


        :return: The depends_on of this ContainerDefinition.
        :rtype: List
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this ContainerDefinition.


        :param depends_on: The depends_on of this ContainerDefinition.
        :type depends_on: List
        """

        self._depends_on = depends_on

    @property
    def start_timeout(self):
        """Gets the start_timeout of this ContainerDefinition.


        :return: The start_timeout of this ContainerDefinition.
        :rtype: int
        """
        return self._start_timeout

    @start_timeout.setter
    def start_timeout(self, start_timeout):
        """Sets the start_timeout of this ContainerDefinition.


        :param start_timeout: The start_timeout of this ContainerDefinition.
        :type start_timeout: int
        """

        self._start_timeout = start_timeout

    @property
    def stop_timeout(self):
        """Gets the stop_timeout of this ContainerDefinition.


        :return: The stop_timeout of this ContainerDefinition.
        :rtype: int
        """
        return self._stop_timeout

    @stop_timeout.setter
    def stop_timeout(self, stop_timeout):
        """Sets the stop_timeout of this ContainerDefinition.


        :param stop_timeout: The stop_timeout of this ContainerDefinition.
        :type stop_timeout: int
        """

        self._stop_timeout = stop_timeout

    @property
    def hostname(self):
        """Gets the hostname of this ContainerDefinition.


        :return: The hostname of this ContainerDefinition.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ContainerDefinition.


        :param hostname: The hostname of this ContainerDefinition.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def user(self):
        """Gets the user of this ContainerDefinition.


        :return: The user of this ContainerDefinition.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ContainerDefinition.


        :param user: The user of this ContainerDefinition.
        :type user: str
        """

        self._user = user

    @property
    def working_directory(self):
        """Gets the working_directory of this ContainerDefinition.


        :return: The working_directory of this ContainerDefinition.
        :rtype: str
        """
        return self._working_directory

    @working_directory.setter
    def working_directory(self, working_directory):
        """Sets the working_directory of this ContainerDefinition.


        :param working_directory: The working_directory of this ContainerDefinition.
        :type working_directory: str
        """

        self._working_directory = working_directory

    @property
    def disable_networking(self):
        """Gets the disable_networking of this ContainerDefinition.


        :return: The disable_networking of this ContainerDefinition.
        :rtype: bool
        """
        return self._disable_networking

    @disable_networking.setter
    def disable_networking(self, disable_networking):
        """Sets the disable_networking of this ContainerDefinition.


        :param disable_networking: The disable_networking of this ContainerDefinition.
        :type disable_networking: bool
        """

        self._disable_networking = disable_networking

    @property
    def privileged(self):
        """Gets the privileged of this ContainerDefinition.


        :return: The privileged of this ContainerDefinition.
        :rtype: bool
        """
        return self._privileged

    @privileged.setter
    def privileged(self, privileged):
        """Sets the privileged of this ContainerDefinition.


        :param privileged: The privileged of this ContainerDefinition.
        :type privileged: bool
        """

        self._privileged = privileged

    @property
    def readonly_root_filesystem(self):
        """Gets the readonly_root_filesystem of this ContainerDefinition.


        :return: The readonly_root_filesystem of this ContainerDefinition.
        :rtype: bool
        """
        return self._readonly_root_filesystem

    @readonly_root_filesystem.setter
    def readonly_root_filesystem(self, readonly_root_filesystem):
        """Sets the readonly_root_filesystem of this ContainerDefinition.


        :param readonly_root_filesystem: The readonly_root_filesystem of this ContainerDefinition.
        :type readonly_root_filesystem: bool
        """

        self._readonly_root_filesystem = readonly_root_filesystem

    @property
    def dns_servers(self):
        """Gets the dns_servers of this ContainerDefinition.


        :return: The dns_servers of this ContainerDefinition.
        :rtype: List
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this ContainerDefinition.


        :param dns_servers: The dns_servers of this ContainerDefinition.
        :type dns_servers: List
        """

        self._dns_servers = dns_servers

    @property
    def dns_search_domains(self):
        """Gets the dns_search_domains of this ContainerDefinition.


        :return: The dns_search_domains of this ContainerDefinition.
        :rtype: List
        """
        return self._dns_search_domains

    @dns_search_domains.setter
    def dns_search_domains(self, dns_search_domains):
        """Sets the dns_search_domains of this ContainerDefinition.


        :param dns_search_domains: The dns_search_domains of this ContainerDefinition.
        :type dns_search_domains: List
        """

        self._dns_search_domains = dns_search_domains

    @property
    def extra_hosts(self):
        """Gets the extra_hosts of this ContainerDefinition.


        :return: The extra_hosts of this ContainerDefinition.
        :rtype: List
        """
        return self._extra_hosts

    @extra_hosts.setter
    def extra_hosts(self, extra_hosts):
        """Sets the extra_hosts of this ContainerDefinition.


        :param extra_hosts: The extra_hosts of this ContainerDefinition.
        :type extra_hosts: List
        """

        self._extra_hosts = extra_hosts

    @property
    def docker_security_options(self):
        """Gets the docker_security_options of this ContainerDefinition.


        :return: The docker_security_options of this ContainerDefinition.
        :rtype: List
        """
        return self._docker_security_options

    @docker_security_options.setter
    def docker_security_options(self, docker_security_options):
        """Sets the docker_security_options of this ContainerDefinition.


        :param docker_security_options: The docker_security_options of this ContainerDefinition.
        :type docker_security_options: List
        """

        self._docker_security_options = docker_security_options

    @property
    def interactive(self):
        """Gets the interactive of this ContainerDefinition.


        :return: The interactive of this ContainerDefinition.
        :rtype: bool
        """
        return self._interactive

    @interactive.setter
    def interactive(self, interactive):
        """Sets the interactive of this ContainerDefinition.


        :param interactive: The interactive of this ContainerDefinition.
        :type interactive: bool
        """

        self._interactive = interactive

    @property
    def pseudo_terminal(self):
        """Gets the pseudo_terminal of this ContainerDefinition.


        :return: The pseudo_terminal of this ContainerDefinition.
        :rtype: bool
        """
        return self._pseudo_terminal

    @pseudo_terminal.setter
    def pseudo_terminal(self, pseudo_terminal):
        """Sets the pseudo_terminal of this ContainerDefinition.


        :param pseudo_terminal: The pseudo_terminal of this ContainerDefinition.
        :type pseudo_terminal: bool
        """

        self._pseudo_terminal = pseudo_terminal

    @property
    def docker_labels(self):
        """Gets the docker_labels of this ContainerDefinition.


        :return: The docker_labels of this ContainerDefinition.
        :rtype: Dict
        """
        return self._docker_labels

    @docker_labels.setter
    def docker_labels(self, docker_labels):
        """Sets the docker_labels of this ContainerDefinition.


        :param docker_labels: The docker_labels of this ContainerDefinition.
        :type docker_labels: Dict
        """

        self._docker_labels = docker_labels

    @property
    def ulimits(self):
        """Gets the ulimits of this ContainerDefinition.


        :return: The ulimits of this ContainerDefinition.
        :rtype: List
        """
        return self._ulimits

    @ulimits.setter
    def ulimits(self, ulimits):
        """Sets the ulimits of this ContainerDefinition.


        :param ulimits: The ulimits of this ContainerDefinition.
        :type ulimits: List
        """

        self._ulimits = ulimits

    @property
    def log_configuration(self):
        """Gets the log_configuration of this ContainerDefinition.


        :return: The log_configuration of this ContainerDefinition.
        :rtype: ContainerDefinitionLogConfiguration
        """
        return self._log_configuration

    @log_configuration.setter
    def log_configuration(self, log_configuration):
        """Sets the log_configuration of this ContainerDefinition.


        :param log_configuration: The log_configuration of this ContainerDefinition.
        :type log_configuration: ContainerDefinitionLogConfiguration
        """

        self._log_configuration = log_configuration

    @property
    def health_check(self):
        """Gets the health_check of this ContainerDefinition.


        :return: The health_check of this ContainerDefinition.
        :rtype: ContainerDefinitionHealthCheck
        """
        return self._health_check

    @health_check.setter
    def health_check(self, health_check):
        """Sets the health_check of this ContainerDefinition.


        :param health_check: The health_check of this ContainerDefinition.
        :type health_check: ContainerDefinitionHealthCheck
        """

        self._health_check = health_check

    @property
    def system_controls(self):
        """Gets the system_controls of this ContainerDefinition.


        :return: The system_controls of this ContainerDefinition.
        :rtype: List
        """
        return self._system_controls

    @system_controls.setter
    def system_controls(self, system_controls):
        """Sets the system_controls of this ContainerDefinition.


        :param system_controls: The system_controls of this ContainerDefinition.
        :type system_controls: List
        """

        self._system_controls = system_controls

    @property
    def resource_requirements(self):
        """Gets the resource_requirements of this ContainerDefinition.


        :return: The resource_requirements of this ContainerDefinition.
        :rtype: List
        """
        return self._resource_requirements

    @resource_requirements.setter
    def resource_requirements(self, resource_requirements):
        """Sets the resource_requirements of this ContainerDefinition.


        :param resource_requirements: The resource_requirements of this ContainerDefinition.
        :type resource_requirements: List
        """

        self._resource_requirements = resource_requirements

    @property
    def firelens_configuration(self):
        """Gets the firelens_configuration of this ContainerDefinition.


        :return: The firelens_configuration of this ContainerDefinition.
        :rtype: ContainerDefinitionFirelensConfiguration
        """
        return self._firelens_configuration

    @firelens_configuration.setter
    def firelens_configuration(self, firelens_configuration):
        """Sets the firelens_configuration of this ContainerDefinition.


        :param firelens_configuration: The firelens_configuration of this ContainerDefinition.
        :type firelens_configuration: ContainerDefinitionFirelensConfiguration
        """

        self._firelens_configuration = firelens_configuration

    @property
    def credential_specs(self):
        """Gets the credential_specs of this ContainerDefinition.


        :return: The credential_specs of this ContainerDefinition.
        :rtype: List
        """
        return self._credential_specs

    @credential_specs.setter
    def credential_specs(self, credential_specs):
        """Sets the credential_specs of this ContainerDefinition.


        :param credential_specs: The credential_specs of this ContainerDefinition.
        :type credential_specs: List
        """

        self._credential_specs = credential_specs
