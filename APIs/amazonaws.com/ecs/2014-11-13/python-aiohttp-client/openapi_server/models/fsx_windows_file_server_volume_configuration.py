# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fsx_windows_file_server_volume_configuration_authorization_config import FSxWindowsFileServerVolumeConfigurationAuthorizationConfig
from openapi_server import util


class FSxWindowsFileServerVolumeConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_system_id: str=None, root_directory: str=None, authorization_config: FSxWindowsFileServerVolumeConfigurationAuthorizationConfig=None):
        """FSxWindowsFileServerVolumeConfiguration - a model defined in OpenAPI

        :param file_system_id: The file_system_id of this FSxWindowsFileServerVolumeConfiguration.
        :param root_directory: The root_directory of this FSxWindowsFileServerVolumeConfiguration.
        :param authorization_config: The authorization_config of this FSxWindowsFileServerVolumeConfiguration.
        """
        self.openapi_types = {
            'file_system_id': str,
            'root_directory': str,
            'authorization_config': FSxWindowsFileServerVolumeConfigurationAuthorizationConfig
        }

        self.attribute_map = {
            'file_system_id': 'fileSystemId',
            'root_directory': 'rootDirectory',
            'authorization_config': 'authorizationConfig'
        }

        self._file_system_id = file_system_id
        self._root_directory = root_directory
        self._authorization_config = authorization_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FSxWindowsFileServerVolumeConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FSxWindowsFileServerVolumeConfiguration of this FSxWindowsFileServerVolumeConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_system_id(self):
        """Gets the file_system_id of this FSxWindowsFileServerVolumeConfiguration.


        :return: The file_system_id of this FSxWindowsFileServerVolumeConfiguration.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this FSxWindowsFileServerVolumeConfiguration.


        :param file_system_id: The file_system_id of this FSxWindowsFileServerVolumeConfiguration.
        :type file_system_id: str
        """
        if file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")

        self._file_system_id = file_system_id

    @property
    def root_directory(self):
        """Gets the root_directory of this FSxWindowsFileServerVolumeConfiguration.


        :return: The root_directory of this FSxWindowsFileServerVolumeConfiguration.
        :rtype: str
        """
        return self._root_directory

    @root_directory.setter
    def root_directory(self, root_directory):
        """Sets the root_directory of this FSxWindowsFileServerVolumeConfiguration.


        :param root_directory: The root_directory of this FSxWindowsFileServerVolumeConfiguration.
        :type root_directory: str
        """
        if root_directory is None:
            raise ValueError("Invalid value for `root_directory`, must not be `None`")

        self._root_directory = root_directory

    @property
    def authorization_config(self):
        """Gets the authorization_config of this FSxWindowsFileServerVolumeConfiguration.


        :return: The authorization_config of this FSxWindowsFileServerVolumeConfiguration.
        :rtype: FSxWindowsFileServerVolumeConfigurationAuthorizationConfig
        """
        return self._authorization_config

    @authorization_config.setter
    def authorization_config(self, authorization_config):
        """Sets the authorization_config of this FSxWindowsFileServerVolumeConfiguration.


        :param authorization_config: The authorization_config of this FSxWindowsFileServerVolumeConfiguration.
        :type authorization_config: FSxWindowsFileServerVolumeConfigurationAuthorizationConfig
        """
        if authorization_config is None:
            raise ValueError("Invalid value for `authorization_config`, must not be `None`")

        self._authorization_config = authorization_config
