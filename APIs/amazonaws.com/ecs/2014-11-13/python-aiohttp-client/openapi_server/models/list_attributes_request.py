# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target_type import TargetType
from openapi_server import util


class ListAttributesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, target_type: TargetType=None, attribute_name: str=None, attribute_value: str=None, next_token: str=None, max_results: int=None):
        """ListAttributesRequest - a model defined in OpenAPI

        :param cluster: The cluster of this ListAttributesRequest.
        :param target_type: The target_type of this ListAttributesRequest.
        :param attribute_name: The attribute_name of this ListAttributesRequest.
        :param attribute_value: The attribute_value of this ListAttributesRequest.
        :param next_token: The next_token of this ListAttributesRequest.
        :param max_results: The max_results of this ListAttributesRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'target_type': TargetType,
            'attribute_name': str,
            'attribute_value': str,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'target_type': 'targetType',
            'attribute_name': 'attributeName',
            'attribute_value': 'attributeValue',
            'next_token': 'nextToken',
            'max_results': 'maxResults'
        }

        self._cluster = cluster
        self._target_type = target_type
        self._attribute_name = attribute_name
        self._attribute_value = attribute_value
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAttributesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListAttributesRequest of this ListAttributesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this ListAttributesRequest.


        :return: The cluster of this ListAttributesRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this ListAttributesRequest.


        :param cluster: The cluster of this ListAttributesRequest.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def target_type(self):
        """Gets the target_type of this ListAttributesRequest.


        :return: The target_type of this ListAttributesRequest.
        :rtype: TargetType
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this ListAttributesRequest.


        :param target_type: The target_type of this ListAttributesRequest.
        :type target_type: TargetType
        """
        if target_type is None:
            raise ValueError("Invalid value for `target_type`, must not be `None`")

        self._target_type = target_type

    @property
    def attribute_name(self):
        """Gets the attribute_name of this ListAttributesRequest.


        :return: The attribute_name of this ListAttributesRequest.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this ListAttributesRequest.


        :param attribute_name: The attribute_name of this ListAttributesRequest.
        :type attribute_name: str
        """

        self._attribute_name = attribute_name

    @property
    def attribute_value(self):
        """Gets the attribute_value of this ListAttributesRequest.


        :return: The attribute_value of this ListAttributesRequest.
        :rtype: str
        """
        return self._attribute_value

    @attribute_value.setter
    def attribute_value(self, attribute_value):
        """Sets the attribute_value of this ListAttributesRequest.


        :param attribute_value: The attribute_value of this ListAttributesRequest.
        :type attribute_value: str
        """

        self._attribute_value = attribute_value

    @property
    def next_token(self):
        """Gets the next_token of this ListAttributesRequest.


        :return: The next_token of this ListAttributesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListAttributesRequest.


        :param next_token: The next_token of this ListAttributesRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListAttributesRequest.


        :return: The max_results of this ListAttributesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListAttributesRequest.


        :param max_results: The max_results of this ListAttributesRequest.
        :type max_results: int
        """

        self._max_results = max_results
