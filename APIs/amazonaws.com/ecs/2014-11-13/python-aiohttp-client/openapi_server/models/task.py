# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connectivity import Connectivity
from openapi_server.models.health_status import HealthStatus
from openapi_server.models.launch_type import LaunchType
from openapi_server.models.task_ephemeral_storage import TaskEphemeralStorage
from openapi_server.models.task_overrides import TaskOverrides
from openapi_server.models.task_stop_code import TaskStopCode
from openapi_server import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List=None, attributes: List=None, availability_zone: str=None, capacity_provider_name: str=None, cluster_arn: str=None, connectivity: Connectivity=None, connectivity_at: datetime=None, container_instance_arn: str=None, containers: List=None, cpu: str=None, created_at: datetime=None, desired_status: str=None, enable_execute_command: bool=None, execution_stopped_at: datetime=None, group: str=None, health_status: HealthStatus=None, inference_accelerators: List=None, last_status: str=None, launch_type: LaunchType=None, memory: str=None, overrides: TaskOverrides=None, platform_version: str=None, platform_family: str=None, pull_started_at: datetime=None, pull_stopped_at: datetime=None, started_at: datetime=None, started_by: str=None, stop_code: TaskStopCode=None, stopped_at: datetime=None, stopped_reason: str=None, stopping_at: datetime=None, tags: List=None, task_arn: str=None, task_definition_arn: str=None, version: int=None, ephemeral_storage: TaskEphemeralStorage=None):
        """Task - a model defined in OpenAPI

        :param attachments: The attachments of this Task.
        :param attributes: The attributes of this Task.
        :param availability_zone: The availability_zone of this Task.
        :param capacity_provider_name: The capacity_provider_name of this Task.
        :param cluster_arn: The cluster_arn of this Task.
        :param connectivity: The connectivity of this Task.
        :param connectivity_at: The connectivity_at of this Task.
        :param container_instance_arn: The container_instance_arn of this Task.
        :param containers: The containers of this Task.
        :param cpu: The cpu of this Task.
        :param created_at: The created_at of this Task.
        :param desired_status: The desired_status of this Task.
        :param enable_execute_command: The enable_execute_command of this Task.
        :param execution_stopped_at: The execution_stopped_at of this Task.
        :param group: The group of this Task.
        :param health_status: The health_status of this Task.
        :param inference_accelerators: The inference_accelerators of this Task.
        :param last_status: The last_status of this Task.
        :param launch_type: The launch_type of this Task.
        :param memory: The memory of this Task.
        :param overrides: The overrides of this Task.
        :param platform_version: The platform_version of this Task.
        :param platform_family: The platform_family of this Task.
        :param pull_started_at: The pull_started_at of this Task.
        :param pull_stopped_at: The pull_stopped_at of this Task.
        :param started_at: The started_at of this Task.
        :param started_by: The started_by of this Task.
        :param stop_code: The stop_code of this Task.
        :param stopped_at: The stopped_at of this Task.
        :param stopped_reason: The stopped_reason of this Task.
        :param stopping_at: The stopping_at of this Task.
        :param tags: The tags of this Task.
        :param task_arn: The task_arn of this Task.
        :param task_definition_arn: The task_definition_arn of this Task.
        :param version: The version of this Task.
        :param ephemeral_storage: The ephemeral_storage of this Task.
        """
        self.openapi_types = {
            'attachments': List,
            'attributes': List,
            'availability_zone': str,
            'capacity_provider_name': str,
            'cluster_arn': str,
            'connectivity': Connectivity,
            'connectivity_at': datetime,
            'container_instance_arn': str,
            'containers': List,
            'cpu': str,
            'created_at': datetime,
            'desired_status': str,
            'enable_execute_command': bool,
            'execution_stopped_at': datetime,
            'group': str,
            'health_status': HealthStatus,
            'inference_accelerators': List,
            'last_status': str,
            'launch_type': LaunchType,
            'memory': str,
            'overrides': TaskOverrides,
            'platform_version': str,
            'platform_family': str,
            'pull_started_at': datetime,
            'pull_stopped_at': datetime,
            'started_at': datetime,
            'started_by': str,
            'stop_code': TaskStopCode,
            'stopped_at': datetime,
            'stopped_reason': str,
            'stopping_at': datetime,
            'tags': List,
            'task_arn': str,
            'task_definition_arn': str,
            'version': int,
            'ephemeral_storage': TaskEphemeralStorage
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'attributes': 'attributes',
            'availability_zone': 'availabilityZone',
            'capacity_provider_name': 'capacityProviderName',
            'cluster_arn': 'clusterArn',
            'connectivity': 'connectivity',
            'connectivity_at': 'connectivityAt',
            'container_instance_arn': 'containerInstanceArn',
            'containers': 'containers',
            'cpu': 'cpu',
            'created_at': 'createdAt',
            'desired_status': 'desiredStatus',
            'enable_execute_command': 'enableExecuteCommand',
            'execution_stopped_at': 'executionStoppedAt',
            'group': 'group',
            'health_status': 'healthStatus',
            'inference_accelerators': 'inferenceAccelerators',
            'last_status': 'lastStatus',
            'launch_type': 'launchType',
            'memory': 'memory',
            'overrides': 'overrides',
            'platform_version': 'platformVersion',
            'platform_family': 'platformFamily',
            'pull_started_at': 'pullStartedAt',
            'pull_stopped_at': 'pullStoppedAt',
            'started_at': 'startedAt',
            'started_by': 'startedBy',
            'stop_code': 'stopCode',
            'stopped_at': 'stoppedAt',
            'stopped_reason': 'stoppedReason',
            'stopping_at': 'stoppingAt',
            'tags': 'tags',
            'task_arn': 'taskArn',
            'task_definition_arn': 'taskDefinitionArn',
            'version': 'version',
            'ephemeral_storage': 'ephemeralStorage'
        }

        self._attachments = attachments
        self._attributes = attributes
        self._availability_zone = availability_zone
        self._capacity_provider_name = capacity_provider_name
        self._cluster_arn = cluster_arn
        self._connectivity = connectivity
        self._connectivity_at = connectivity_at
        self._container_instance_arn = container_instance_arn
        self._containers = containers
        self._cpu = cpu
        self._created_at = created_at
        self._desired_status = desired_status
        self._enable_execute_command = enable_execute_command
        self._execution_stopped_at = execution_stopped_at
        self._group = group
        self._health_status = health_status
        self._inference_accelerators = inference_accelerators
        self._last_status = last_status
        self._launch_type = launch_type
        self._memory = memory
        self._overrides = overrides
        self._platform_version = platform_version
        self._platform_family = platform_family
        self._pull_started_at = pull_started_at
        self._pull_stopped_at = pull_stopped_at
        self._started_at = started_at
        self._started_by = started_by
        self._stop_code = stop_code
        self._stopped_at = stopped_at
        self._stopped_reason = stopped_reason
        self._stopping_at = stopping_at
        self._tags = tags
        self._task_arn = task_arn
        self._task_definition_arn = task_definition_arn
        self._version = version
        self._ephemeral_storage = ephemeral_storage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task of this Task.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this Task.


        :return: The attachments of this Task.
        :rtype: List
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Task.


        :param attachments: The attachments of this Task.
        :type attachments: List
        """

        self._attachments = attachments

    @property
    def attributes(self):
        """Gets the attributes of this Task.


        :return: The attributes of this Task.
        :rtype: List
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Task.


        :param attributes: The attributes of this Task.
        :type attributes: List
        """

        self._attributes = attributes

    @property
    def availability_zone(self):
        """Gets the availability_zone of this Task.


        :return: The availability_zone of this Task.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this Task.


        :param availability_zone: The availability_zone of this Task.
        :type availability_zone: str
        """

        self._availability_zone = availability_zone

    @property
    def capacity_provider_name(self):
        """Gets the capacity_provider_name of this Task.


        :return: The capacity_provider_name of this Task.
        :rtype: str
        """
        return self._capacity_provider_name

    @capacity_provider_name.setter
    def capacity_provider_name(self, capacity_provider_name):
        """Sets the capacity_provider_name of this Task.


        :param capacity_provider_name: The capacity_provider_name of this Task.
        :type capacity_provider_name: str
        """

        self._capacity_provider_name = capacity_provider_name

    @property
    def cluster_arn(self):
        """Gets the cluster_arn of this Task.


        :return: The cluster_arn of this Task.
        :rtype: str
        """
        return self._cluster_arn

    @cluster_arn.setter
    def cluster_arn(self, cluster_arn):
        """Sets the cluster_arn of this Task.


        :param cluster_arn: The cluster_arn of this Task.
        :type cluster_arn: str
        """

        self._cluster_arn = cluster_arn

    @property
    def connectivity(self):
        """Gets the connectivity of this Task.


        :return: The connectivity of this Task.
        :rtype: Connectivity
        """
        return self._connectivity

    @connectivity.setter
    def connectivity(self, connectivity):
        """Sets the connectivity of this Task.


        :param connectivity: The connectivity of this Task.
        :type connectivity: Connectivity
        """

        self._connectivity = connectivity

    @property
    def connectivity_at(self):
        """Gets the connectivity_at of this Task.


        :return: The connectivity_at of this Task.
        :rtype: datetime
        """
        return self._connectivity_at

    @connectivity_at.setter
    def connectivity_at(self, connectivity_at):
        """Sets the connectivity_at of this Task.


        :param connectivity_at: The connectivity_at of this Task.
        :type connectivity_at: datetime
        """

        self._connectivity_at = connectivity_at

    @property
    def container_instance_arn(self):
        """Gets the container_instance_arn of this Task.


        :return: The container_instance_arn of this Task.
        :rtype: str
        """
        return self._container_instance_arn

    @container_instance_arn.setter
    def container_instance_arn(self, container_instance_arn):
        """Sets the container_instance_arn of this Task.


        :param container_instance_arn: The container_instance_arn of this Task.
        :type container_instance_arn: str
        """

        self._container_instance_arn = container_instance_arn

    @property
    def containers(self):
        """Gets the containers of this Task.


        :return: The containers of this Task.
        :rtype: List
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this Task.


        :param containers: The containers of this Task.
        :type containers: List
        """

        self._containers = containers

    @property
    def cpu(self):
        """Gets the cpu of this Task.


        :return: The cpu of this Task.
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this Task.


        :param cpu: The cpu of this Task.
        :type cpu: str
        """

        self._cpu = cpu

    @property
    def created_at(self):
        """Gets the created_at of this Task.


        :return: The created_at of this Task.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Task.


        :param created_at: The created_at of this Task.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def desired_status(self):
        """Gets the desired_status of this Task.


        :return: The desired_status of this Task.
        :rtype: str
        """
        return self._desired_status

    @desired_status.setter
    def desired_status(self, desired_status):
        """Sets the desired_status of this Task.


        :param desired_status: The desired_status of this Task.
        :type desired_status: str
        """

        self._desired_status = desired_status

    @property
    def enable_execute_command(self):
        """Gets the enable_execute_command of this Task.


        :return: The enable_execute_command of this Task.
        :rtype: bool
        """
        return self._enable_execute_command

    @enable_execute_command.setter
    def enable_execute_command(self, enable_execute_command):
        """Sets the enable_execute_command of this Task.


        :param enable_execute_command: The enable_execute_command of this Task.
        :type enable_execute_command: bool
        """

        self._enable_execute_command = enable_execute_command

    @property
    def execution_stopped_at(self):
        """Gets the execution_stopped_at of this Task.


        :return: The execution_stopped_at of this Task.
        :rtype: datetime
        """
        return self._execution_stopped_at

    @execution_stopped_at.setter
    def execution_stopped_at(self, execution_stopped_at):
        """Sets the execution_stopped_at of this Task.


        :param execution_stopped_at: The execution_stopped_at of this Task.
        :type execution_stopped_at: datetime
        """

        self._execution_stopped_at = execution_stopped_at

    @property
    def group(self):
        """Gets the group of this Task.


        :return: The group of this Task.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Task.


        :param group: The group of this Task.
        :type group: str
        """

        self._group = group

    @property
    def health_status(self):
        """Gets the health_status of this Task.


        :return: The health_status of this Task.
        :rtype: HealthStatus
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this Task.


        :param health_status: The health_status of this Task.
        :type health_status: HealthStatus
        """

        self._health_status = health_status

    @property
    def inference_accelerators(self):
        """Gets the inference_accelerators of this Task.


        :return: The inference_accelerators of this Task.
        :rtype: List
        """
        return self._inference_accelerators

    @inference_accelerators.setter
    def inference_accelerators(self, inference_accelerators):
        """Sets the inference_accelerators of this Task.


        :param inference_accelerators: The inference_accelerators of this Task.
        :type inference_accelerators: List
        """

        self._inference_accelerators = inference_accelerators

    @property
    def last_status(self):
        """Gets the last_status of this Task.


        :return: The last_status of this Task.
        :rtype: str
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status):
        """Sets the last_status of this Task.


        :param last_status: The last_status of this Task.
        :type last_status: str
        """

        self._last_status = last_status

    @property
    def launch_type(self):
        """Gets the launch_type of this Task.


        :return: The launch_type of this Task.
        :rtype: LaunchType
        """
        return self._launch_type

    @launch_type.setter
    def launch_type(self, launch_type):
        """Sets the launch_type of this Task.


        :param launch_type: The launch_type of this Task.
        :type launch_type: LaunchType
        """

        self._launch_type = launch_type

    @property
    def memory(self):
        """Gets the memory of this Task.


        :return: The memory of this Task.
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this Task.


        :param memory: The memory of this Task.
        :type memory: str
        """

        self._memory = memory

    @property
    def overrides(self):
        """Gets the overrides of this Task.


        :return: The overrides of this Task.
        :rtype: TaskOverrides
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this Task.


        :param overrides: The overrides of this Task.
        :type overrides: TaskOverrides
        """

        self._overrides = overrides

    @property
    def platform_version(self):
        """Gets the platform_version of this Task.


        :return: The platform_version of this Task.
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this Task.


        :param platform_version: The platform_version of this Task.
        :type platform_version: str
        """

        self._platform_version = platform_version

    @property
    def platform_family(self):
        """Gets the platform_family of this Task.


        :return: The platform_family of this Task.
        :rtype: str
        """
        return self._platform_family

    @platform_family.setter
    def platform_family(self, platform_family):
        """Sets the platform_family of this Task.


        :param platform_family: The platform_family of this Task.
        :type platform_family: str
        """

        self._platform_family = platform_family

    @property
    def pull_started_at(self):
        """Gets the pull_started_at of this Task.


        :return: The pull_started_at of this Task.
        :rtype: datetime
        """
        return self._pull_started_at

    @pull_started_at.setter
    def pull_started_at(self, pull_started_at):
        """Sets the pull_started_at of this Task.


        :param pull_started_at: The pull_started_at of this Task.
        :type pull_started_at: datetime
        """

        self._pull_started_at = pull_started_at

    @property
    def pull_stopped_at(self):
        """Gets the pull_stopped_at of this Task.


        :return: The pull_stopped_at of this Task.
        :rtype: datetime
        """
        return self._pull_stopped_at

    @pull_stopped_at.setter
    def pull_stopped_at(self, pull_stopped_at):
        """Sets the pull_stopped_at of this Task.


        :param pull_stopped_at: The pull_stopped_at of this Task.
        :type pull_stopped_at: datetime
        """

        self._pull_stopped_at = pull_stopped_at

    @property
    def started_at(self):
        """Gets the started_at of this Task.


        :return: The started_at of this Task.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Task.


        :param started_at: The started_at of this Task.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def started_by(self):
        """Gets the started_by of this Task.


        :return: The started_by of this Task.
        :rtype: str
        """
        return self._started_by

    @started_by.setter
    def started_by(self, started_by):
        """Sets the started_by of this Task.


        :param started_by: The started_by of this Task.
        :type started_by: str
        """

        self._started_by = started_by

    @property
    def stop_code(self):
        """Gets the stop_code of this Task.


        :return: The stop_code of this Task.
        :rtype: TaskStopCode
        """
        return self._stop_code

    @stop_code.setter
    def stop_code(self, stop_code):
        """Sets the stop_code of this Task.


        :param stop_code: The stop_code of this Task.
        :type stop_code: TaskStopCode
        """

        self._stop_code = stop_code

    @property
    def stopped_at(self):
        """Gets the stopped_at of this Task.


        :return: The stopped_at of this Task.
        :rtype: datetime
        """
        return self._stopped_at

    @stopped_at.setter
    def stopped_at(self, stopped_at):
        """Sets the stopped_at of this Task.


        :param stopped_at: The stopped_at of this Task.
        :type stopped_at: datetime
        """

        self._stopped_at = stopped_at

    @property
    def stopped_reason(self):
        """Gets the stopped_reason of this Task.


        :return: The stopped_reason of this Task.
        :rtype: str
        """
        return self._stopped_reason

    @stopped_reason.setter
    def stopped_reason(self, stopped_reason):
        """Sets the stopped_reason of this Task.


        :param stopped_reason: The stopped_reason of this Task.
        :type stopped_reason: str
        """

        self._stopped_reason = stopped_reason

    @property
    def stopping_at(self):
        """Gets the stopping_at of this Task.


        :return: The stopping_at of this Task.
        :rtype: datetime
        """
        return self._stopping_at

    @stopping_at.setter
    def stopping_at(self, stopping_at):
        """Sets the stopping_at of this Task.


        :param stopping_at: The stopping_at of this Task.
        :type stopping_at: datetime
        """

        self._stopping_at = stopping_at

    @property
    def tags(self):
        """Gets the tags of this Task.


        :return: The tags of this Task.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Task.


        :param tags: The tags of this Task.
        :type tags: List
        """

        self._tags = tags

    @property
    def task_arn(self):
        """Gets the task_arn of this Task.


        :return: The task_arn of this Task.
        :rtype: str
        """
        return self._task_arn

    @task_arn.setter
    def task_arn(self, task_arn):
        """Sets the task_arn of this Task.


        :param task_arn: The task_arn of this Task.
        :type task_arn: str
        """

        self._task_arn = task_arn

    @property
    def task_definition_arn(self):
        """Gets the task_definition_arn of this Task.


        :return: The task_definition_arn of this Task.
        :rtype: str
        """
        return self._task_definition_arn

    @task_definition_arn.setter
    def task_definition_arn(self, task_definition_arn):
        """Sets the task_definition_arn of this Task.


        :param task_definition_arn: The task_definition_arn of this Task.
        :type task_definition_arn: str
        """

        self._task_definition_arn = task_definition_arn

    @property
    def version(self):
        """Gets the version of this Task.


        :return: The version of this Task.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Task.


        :param version: The version of this Task.
        :type version: int
        """

        self._version = version

    @property
    def ephemeral_storage(self):
        """Gets the ephemeral_storage of this Task.


        :return: The ephemeral_storage of this Task.
        :rtype: TaskEphemeralStorage
        """
        return self._ephemeral_storage

    @ephemeral_storage.setter
    def ephemeral_storage(self, ephemeral_storage):
        """Sets the ephemeral_storage of this Task.


        :param ephemeral_storage: The ephemeral_storage of this Task.
        :type ephemeral_storage: TaskEphemeralStorage
        """

        self._ephemeral_storage = ephemeral_storage
