# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, type: str=None, status: str=None, details: List=None):
        """Attachment - a model defined in OpenAPI

        :param id: The id of this Attachment.
        :param type: The type of this Attachment.
        :param status: The status of this Attachment.
        :param details: The details of this Attachment.
        """
        self.openapi_types = {
            'id': str,
            'type': str,
            'status': str,
            'details': List
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'status': 'status',
            'details': 'details'
        }

        self._id = id
        self._type = type
        self._status = status
        self._details = details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attachment of this Attachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Attachment.


        :return: The id of this Attachment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attachment.


        :param id: The id of this Attachment.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Attachment.


        :return: The type of this Attachment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Attachment.


        :param type: The type of this Attachment.
        :type type: str
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this Attachment.


        :return: The status of this Attachment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Attachment.


        :param status: The status of this Attachment.
        :type status: str
        """

        self._status = status

    @property
    def details(self):
        """Gets the details of this Attachment.


        :return: The details of this Attachment.
        :rtype: List
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Attachment.


        :param details: The details of this Attachment.
        :type details: List
        """

        self._details = details
