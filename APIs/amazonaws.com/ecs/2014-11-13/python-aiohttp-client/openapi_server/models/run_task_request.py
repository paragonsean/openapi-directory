# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.launch_type import LaunchType
from openapi_server.models.propagate_tags import PropagateTags
from openapi_server.models.run_task_request_network_configuration import RunTaskRequestNetworkConfiguration
from openapi_server.models.run_task_request_overrides import RunTaskRequestOverrides
from openapi_server import util


class RunTaskRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity_provider_strategy: List=None, cluster: str=None, count: int=None, enable_ecs_managed_tags: bool=None, enable_execute_command: bool=None, group: str=None, launch_type: LaunchType=None, network_configuration: RunTaskRequestNetworkConfiguration=None, overrides: RunTaskRequestOverrides=None, placement_constraints: List=None, placement_strategy: List=None, platform_version: str=None, propagate_tags: PropagateTags=None, reference_id: str=None, started_by: str=None, tags: List=None, task_definition: str=None):
        """RunTaskRequest - a model defined in OpenAPI

        :param capacity_provider_strategy: The capacity_provider_strategy of this RunTaskRequest.
        :param cluster: The cluster of this RunTaskRequest.
        :param count: The count of this RunTaskRequest.
        :param enable_ecs_managed_tags: The enable_ecs_managed_tags of this RunTaskRequest.
        :param enable_execute_command: The enable_execute_command of this RunTaskRequest.
        :param group: The group of this RunTaskRequest.
        :param launch_type: The launch_type of this RunTaskRequest.
        :param network_configuration: The network_configuration of this RunTaskRequest.
        :param overrides: The overrides of this RunTaskRequest.
        :param placement_constraints: The placement_constraints of this RunTaskRequest.
        :param placement_strategy: The placement_strategy of this RunTaskRequest.
        :param platform_version: The platform_version of this RunTaskRequest.
        :param propagate_tags: The propagate_tags of this RunTaskRequest.
        :param reference_id: The reference_id of this RunTaskRequest.
        :param started_by: The started_by of this RunTaskRequest.
        :param tags: The tags of this RunTaskRequest.
        :param task_definition: The task_definition of this RunTaskRequest.
        """
        self.openapi_types = {
            'capacity_provider_strategy': List,
            'cluster': str,
            'count': int,
            'enable_ecs_managed_tags': bool,
            'enable_execute_command': bool,
            'group': str,
            'launch_type': LaunchType,
            'network_configuration': RunTaskRequestNetworkConfiguration,
            'overrides': RunTaskRequestOverrides,
            'placement_constraints': List,
            'placement_strategy': List,
            'platform_version': str,
            'propagate_tags': PropagateTags,
            'reference_id': str,
            'started_by': str,
            'tags': List,
            'task_definition': str
        }

        self.attribute_map = {
            'capacity_provider_strategy': 'capacityProviderStrategy',
            'cluster': 'cluster',
            'count': 'count',
            'enable_ecs_managed_tags': 'enableECSManagedTags',
            'enable_execute_command': 'enableExecuteCommand',
            'group': 'group',
            'launch_type': 'launchType',
            'network_configuration': 'networkConfiguration',
            'overrides': 'overrides',
            'placement_constraints': 'placementConstraints',
            'placement_strategy': 'placementStrategy',
            'platform_version': 'platformVersion',
            'propagate_tags': 'propagateTags',
            'reference_id': 'referenceId',
            'started_by': 'startedBy',
            'tags': 'tags',
            'task_definition': 'taskDefinition'
        }

        self._capacity_provider_strategy = capacity_provider_strategy
        self._cluster = cluster
        self._count = count
        self._enable_ecs_managed_tags = enable_ecs_managed_tags
        self._enable_execute_command = enable_execute_command
        self._group = group
        self._launch_type = launch_type
        self._network_configuration = network_configuration
        self._overrides = overrides
        self._placement_constraints = placement_constraints
        self._placement_strategy = placement_strategy
        self._platform_version = platform_version
        self._propagate_tags = propagate_tags
        self._reference_id = reference_id
        self._started_by = started_by
        self._tags = tags
        self._task_definition = task_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunTaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunTaskRequest of this RunTaskRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity_provider_strategy(self):
        """Gets the capacity_provider_strategy of this RunTaskRequest.


        :return: The capacity_provider_strategy of this RunTaskRequest.
        :rtype: List
        """
        return self._capacity_provider_strategy

    @capacity_provider_strategy.setter
    def capacity_provider_strategy(self, capacity_provider_strategy):
        """Sets the capacity_provider_strategy of this RunTaskRequest.


        :param capacity_provider_strategy: The capacity_provider_strategy of this RunTaskRequest.
        :type capacity_provider_strategy: List
        """

        self._capacity_provider_strategy = capacity_provider_strategy

    @property
    def cluster(self):
        """Gets the cluster of this RunTaskRequest.


        :return: The cluster of this RunTaskRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this RunTaskRequest.


        :param cluster: The cluster of this RunTaskRequest.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def count(self):
        """Gets the count of this RunTaskRequest.


        :return: The count of this RunTaskRequest.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this RunTaskRequest.


        :param count: The count of this RunTaskRequest.
        :type count: int
        """

        self._count = count

    @property
    def enable_ecs_managed_tags(self):
        """Gets the enable_ecs_managed_tags of this RunTaskRequest.


        :return: The enable_ecs_managed_tags of this RunTaskRequest.
        :rtype: bool
        """
        return self._enable_ecs_managed_tags

    @enable_ecs_managed_tags.setter
    def enable_ecs_managed_tags(self, enable_ecs_managed_tags):
        """Sets the enable_ecs_managed_tags of this RunTaskRequest.


        :param enable_ecs_managed_tags: The enable_ecs_managed_tags of this RunTaskRequest.
        :type enable_ecs_managed_tags: bool
        """

        self._enable_ecs_managed_tags = enable_ecs_managed_tags

    @property
    def enable_execute_command(self):
        """Gets the enable_execute_command of this RunTaskRequest.


        :return: The enable_execute_command of this RunTaskRequest.
        :rtype: bool
        """
        return self._enable_execute_command

    @enable_execute_command.setter
    def enable_execute_command(self, enable_execute_command):
        """Sets the enable_execute_command of this RunTaskRequest.


        :param enable_execute_command: The enable_execute_command of this RunTaskRequest.
        :type enable_execute_command: bool
        """

        self._enable_execute_command = enable_execute_command

    @property
    def group(self):
        """Gets the group of this RunTaskRequest.


        :return: The group of this RunTaskRequest.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this RunTaskRequest.


        :param group: The group of this RunTaskRequest.
        :type group: str
        """

        self._group = group

    @property
    def launch_type(self):
        """Gets the launch_type of this RunTaskRequest.


        :return: The launch_type of this RunTaskRequest.
        :rtype: LaunchType
        """
        return self._launch_type

    @launch_type.setter
    def launch_type(self, launch_type):
        """Sets the launch_type of this RunTaskRequest.


        :param launch_type: The launch_type of this RunTaskRequest.
        :type launch_type: LaunchType
        """

        self._launch_type = launch_type

    @property
    def network_configuration(self):
        """Gets the network_configuration of this RunTaskRequest.


        :return: The network_configuration of this RunTaskRequest.
        :rtype: RunTaskRequestNetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this RunTaskRequest.


        :param network_configuration: The network_configuration of this RunTaskRequest.
        :type network_configuration: RunTaskRequestNetworkConfiguration
        """

        self._network_configuration = network_configuration

    @property
    def overrides(self):
        """Gets the overrides of this RunTaskRequest.


        :return: The overrides of this RunTaskRequest.
        :rtype: RunTaskRequestOverrides
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this RunTaskRequest.


        :param overrides: The overrides of this RunTaskRequest.
        :type overrides: RunTaskRequestOverrides
        """

        self._overrides = overrides

    @property
    def placement_constraints(self):
        """Gets the placement_constraints of this RunTaskRequest.


        :return: The placement_constraints of this RunTaskRequest.
        :rtype: List
        """
        return self._placement_constraints

    @placement_constraints.setter
    def placement_constraints(self, placement_constraints):
        """Sets the placement_constraints of this RunTaskRequest.


        :param placement_constraints: The placement_constraints of this RunTaskRequest.
        :type placement_constraints: List
        """

        self._placement_constraints = placement_constraints

    @property
    def placement_strategy(self):
        """Gets the placement_strategy of this RunTaskRequest.


        :return: The placement_strategy of this RunTaskRequest.
        :rtype: List
        """
        return self._placement_strategy

    @placement_strategy.setter
    def placement_strategy(self, placement_strategy):
        """Sets the placement_strategy of this RunTaskRequest.


        :param placement_strategy: The placement_strategy of this RunTaskRequest.
        :type placement_strategy: List
        """

        self._placement_strategy = placement_strategy

    @property
    def platform_version(self):
        """Gets the platform_version of this RunTaskRequest.


        :return: The platform_version of this RunTaskRequest.
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this RunTaskRequest.


        :param platform_version: The platform_version of this RunTaskRequest.
        :type platform_version: str
        """

        self._platform_version = platform_version

    @property
    def propagate_tags(self):
        """Gets the propagate_tags of this RunTaskRequest.


        :return: The propagate_tags of this RunTaskRequest.
        :rtype: PropagateTags
        """
        return self._propagate_tags

    @propagate_tags.setter
    def propagate_tags(self, propagate_tags):
        """Sets the propagate_tags of this RunTaskRequest.


        :param propagate_tags: The propagate_tags of this RunTaskRequest.
        :type propagate_tags: PropagateTags
        """

        self._propagate_tags = propagate_tags

    @property
    def reference_id(self):
        """Gets the reference_id of this RunTaskRequest.


        :return: The reference_id of this RunTaskRequest.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this RunTaskRequest.


        :param reference_id: The reference_id of this RunTaskRequest.
        :type reference_id: str
        """

        self._reference_id = reference_id

    @property
    def started_by(self):
        """Gets the started_by of this RunTaskRequest.


        :return: The started_by of this RunTaskRequest.
        :rtype: str
        """
        return self._started_by

    @started_by.setter
    def started_by(self, started_by):
        """Sets the started_by of this RunTaskRequest.


        :param started_by: The started_by of this RunTaskRequest.
        :type started_by: str
        """

        self._started_by = started_by

    @property
    def tags(self):
        """Gets the tags of this RunTaskRequest.


        :return: The tags of this RunTaskRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RunTaskRequest.


        :param tags: The tags of this RunTaskRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def task_definition(self):
        """Gets the task_definition of this RunTaskRequest.


        :return: The task_definition of this RunTaskRequest.
        :rtype: str
        """
        return self._task_definition

    @task_definition.setter
    def task_definition(self, task_definition):
        """Sets the task_definition of this RunTaskRequest.


        :param task_definition: The task_definition of this RunTaskRequest.
        :type task_definition: str
        """
        if task_definition is None:
            raise ValueError("Invalid value for `task_definition`, must not be `None`")

        self._task_definition = task_definition
