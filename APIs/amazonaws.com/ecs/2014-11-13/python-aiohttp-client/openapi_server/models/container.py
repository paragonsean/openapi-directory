# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_status import HealthStatus
from openapi_server import util


class Container(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_arn: str=None, task_arn: str=None, name: str=None, image: str=None, image_digest: str=None, runtime_id: str=None, last_status: str=None, exit_code: int=None, reason: str=None, network_bindings: List=None, network_interfaces: List=None, health_status: HealthStatus=None, managed_agents: List=None, cpu: str=None, memory: str=None, memory_reservation: str=None, gpu_ids: List=None):
        """Container - a model defined in OpenAPI

        :param container_arn: The container_arn of this Container.
        :param task_arn: The task_arn of this Container.
        :param name: The name of this Container.
        :param image: The image of this Container.
        :param image_digest: The image_digest of this Container.
        :param runtime_id: The runtime_id of this Container.
        :param last_status: The last_status of this Container.
        :param exit_code: The exit_code of this Container.
        :param reason: The reason of this Container.
        :param network_bindings: The network_bindings of this Container.
        :param network_interfaces: The network_interfaces of this Container.
        :param health_status: The health_status of this Container.
        :param managed_agents: The managed_agents of this Container.
        :param cpu: The cpu of this Container.
        :param memory: The memory of this Container.
        :param memory_reservation: The memory_reservation of this Container.
        :param gpu_ids: The gpu_ids of this Container.
        """
        self.openapi_types = {
            'container_arn': str,
            'task_arn': str,
            'name': str,
            'image': str,
            'image_digest': str,
            'runtime_id': str,
            'last_status': str,
            'exit_code': int,
            'reason': str,
            'network_bindings': List,
            'network_interfaces': List,
            'health_status': HealthStatus,
            'managed_agents': List,
            'cpu': str,
            'memory': str,
            'memory_reservation': str,
            'gpu_ids': List
        }

        self.attribute_map = {
            'container_arn': 'containerArn',
            'task_arn': 'taskArn',
            'name': 'name',
            'image': 'image',
            'image_digest': 'imageDigest',
            'runtime_id': 'runtimeId',
            'last_status': 'lastStatus',
            'exit_code': 'exitCode',
            'reason': 'reason',
            'network_bindings': 'networkBindings',
            'network_interfaces': 'networkInterfaces',
            'health_status': 'healthStatus',
            'managed_agents': 'managedAgents',
            'cpu': 'cpu',
            'memory': 'memory',
            'memory_reservation': 'memoryReservation',
            'gpu_ids': 'gpuIds'
        }

        self._container_arn = container_arn
        self._task_arn = task_arn
        self._name = name
        self._image = image
        self._image_digest = image_digest
        self._runtime_id = runtime_id
        self._last_status = last_status
        self._exit_code = exit_code
        self._reason = reason
        self._network_bindings = network_bindings
        self._network_interfaces = network_interfaces
        self._health_status = health_status
        self._managed_agents = managed_agents
        self._cpu = cpu
        self._memory = memory
        self._memory_reservation = memory_reservation
        self._gpu_ids = gpu_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Container':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Container of this Container.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_arn(self):
        """Gets the container_arn of this Container.


        :return: The container_arn of this Container.
        :rtype: str
        """
        return self._container_arn

    @container_arn.setter
    def container_arn(self, container_arn):
        """Sets the container_arn of this Container.


        :param container_arn: The container_arn of this Container.
        :type container_arn: str
        """

        self._container_arn = container_arn

    @property
    def task_arn(self):
        """Gets the task_arn of this Container.


        :return: The task_arn of this Container.
        :rtype: str
        """
        return self._task_arn

    @task_arn.setter
    def task_arn(self, task_arn):
        """Sets the task_arn of this Container.


        :param task_arn: The task_arn of this Container.
        :type task_arn: str
        """

        self._task_arn = task_arn

    @property
    def name(self):
        """Gets the name of this Container.


        :return: The name of this Container.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Container.


        :param name: The name of this Container.
        :type name: str
        """

        self._name = name

    @property
    def image(self):
        """Gets the image of this Container.


        :return: The image of this Container.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Container.


        :param image: The image of this Container.
        :type image: str
        """

        self._image = image

    @property
    def image_digest(self):
        """Gets the image_digest of this Container.


        :return: The image_digest of this Container.
        :rtype: str
        """
        return self._image_digest

    @image_digest.setter
    def image_digest(self, image_digest):
        """Sets the image_digest of this Container.


        :param image_digest: The image_digest of this Container.
        :type image_digest: str
        """

        self._image_digest = image_digest

    @property
    def runtime_id(self):
        """Gets the runtime_id of this Container.


        :return: The runtime_id of this Container.
        :rtype: str
        """
        return self._runtime_id

    @runtime_id.setter
    def runtime_id(self, runtime_id):
        """Sets the runtime_id of this Container.


        :param runtime_id: The runtime_id of this Container.
        :type runtime_id: str
        """

        self._runtime_id = runtime_id

    @property
    def last_status(self):
        """Gets the last_status of this Container.


        :return: The last_status of this Container.
        :rtype: str
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status):
        """Sets the last_status of this Container.


        :param last_status: The last_status of this Container.
        :type last_status: str
        """

        self._last_status = last_status

    @property
    def exit_code(self):
        """Gets the exit_code of this Container.


        :return: The exit_code of this Container.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this Container.


        :param exit_code: The exit_code of this Container.
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def reason(self):
        """Gets the reason of this Container.


        :return: The reason of this Container.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Container.


        :param reason: The reason of this Container.
        :type reason: str
        """

        self._reason = reason

    @property
    def network_bindings(self):
        """Gets the network_bindings of this Container.


        :return: The network_bindings of this Container.
        :rtype: List
        """
        return self._network_bindings

    @network_bindings.setter
    def network_bindings(self, network_bindings):
        """Sets the network_bindings of this Container.


        :param network_bindings: The network_bindings of this Container.
        :type network_bindings: List
        """

        self._network_bindings = network_bindings

    @property
    def network_interfaces(self):
        """Gets the network_interfaces of this Container.


        :return: The network_interfaces of this Container.
        :rtype: List
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """Sets the network_interfaces of this Container.


        :param network_interfaces: The network_interfaces of this Container.
        :type network_interfaces: List
        """

        self._network_interfaces = network_interfaces

    @property
    def health_status(self):
        """Gets the health_status of this Container.


        :return: The health_status of this Container.
        :rtype: HealthStatus
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this Container.


        :param health_status: The health_status of this Container.
        :type health_status: HealthStatus
        """

        self._health_status = health_status

    @property
    def managed_agents(self):
        """Gets the managed_agents of this Container.


        :return: The managed_agents of this Container.
        :rtype: List
        """
        return self._managed_agents

    @managed_agents.setter
    def managed_agents(self, managed_agents):
        """Sets the managed_agents of this Container.


        :param managed_agents: The managed_agents of this Container.
        :type managed_agents: List
        """

        self._managed_agents = managed_agents

    @property
    def cpu(self):
        """Gets the cpu of this Container.


        :return: The cpu of this Container.
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this Container.


        :param cpu: The cpu of this Container.
        :type cpu: str
        """

        self._cpu = cpu

    @property
    def memory(self):
        """Gets the memory of this Container.


        :return: The memory of this Container.
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this Container.


        :param memory: The memory of this Container.
        :type memory: str
        """

        self._memory = memory

    @property
    def memory_reservation(self):
        """Gets the memory_reservation of this Container.


        :return: The memory_reservation of this Container.
        :rtype: str
        """
        return self._memory_reservation

    @memory_reservation.setter
    def memory_reservation(self, memory_reservation):
        """Sets the memory_reservation of this Container.


        :param memory_reservation: The memory_reservation of this Container.
        :type memory_reservation: str
        """

        self._memory_reservation = memory_reservation

    @property
    def gpu_ids(self):
        """Gets the gpu_ids of this Container.


        :return: The gpu_ids of this Container.
        :rtype: List
        """
        return self._gpu_ids

    @gpu_ids.setter
    def gpu_ids(self, gpu_ids):
        """Sets the gpu_ids of this Container.


        :param gpu_ids: The gpu_ids of this Container.
        :type gpu_ids: List
        """

        self._gpu_ids = gpu_ids
