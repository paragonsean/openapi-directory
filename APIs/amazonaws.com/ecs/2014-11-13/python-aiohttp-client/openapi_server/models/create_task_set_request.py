# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_task_set_request_network_configuration import CreateTaskSetRequestNetworkConfiguration
from openapi_server.models.create_task_set_request_scale import CreateTaskSetRequestScale
from openapi_server.models.launch_type import LaunchType
from openapi_server import util


class CreateTaskSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service: str=None, cluster: str=None, external_id: str=None, task_definition: str=None, network_configuration: CreateTaskSetRequestNetworkConfiguration=None, load_balancers: List=None, service_registries: List=None, launch_type: LaunchType=None, capacity_provider_strategy: List=None, platform_version: str=None, scale: CreateTaskSetRequestScale=None, client_token: str=None, tags: List=None):
        """CreateTaskSetRequest - a model defined in OpenAPI

        :param service: The service of this CreateTaskSetRequest.
        :param cluster: The cluster of this CreateTaskSetRequest.
        :param external_id: The external_id of this CreateTaskSetRequest.
        :param task_definition: The task_definition of this CreateTaskSetRequest.
        :param network_configuration: The network_configuration of this CreateTaskSetRequest.
        :param load_balancers: The load_balancers of this CreateTaskSetRequest.
        :param service_registries: The service_registries of this CreateTaskSetRequest.
        :param launch_type: The launch_type of this CreateTaskSetRequest.
        :param capacity_provider_strategy: The capacity_provider_strategy of this CreateTaskSetRequest.
        :param platform_version: The platform_version of this CreateTaskSetRequest.
        :param scale: The scale of this CreateTaskSetRequest.
        :param client_token: The client_token of this CreateTaskSetRequest.
        :param tags: The tags of this CreateTaskSetRequest.
        """
        self.openapi_types = {
            'service': str,
            'cluster': str,
            'external_id': str,
            'task_definition': str,
            'network_configuration': CreateTaskSetRequestNetworkConfiguration,
            'load_balancers': List,
            'service_registries': List,
            'launch_type': LaunchType,
            'capacity_provider_strategy': List,
            'platform_version': str,
            'scale': CreateTaskSetRequestScale,
            'client_token': str,
            'tags': List
        }

        self.attribute_map = {
            'service': 'service',
            'cluster': 'cluster',
            'external_id': 'externalId',
            'task_definition': 'taskDefinition',
            'network_configuration': 'networkConfiguration',
            'load_balancers': 'loadBalancers',
            'service_registries': 'serviceRegistries',
            'launch_type': 'launchType',
            'capacity_provider_strategy': 'capacityProviderStrategy',
            'platform_version': 'platformVersion',
            'scale': 'scale',
            'client_token': 'clientToken',
            'tags': 'tags'
        }

        self._service = service
        self._cluster = cluster
        self._external_id = external_id
        self._task_definition = task_definition
        self._network_configuration = network_configuration
        self._load_balancers = load_balancers
        self._service_registries = service_registries
        self._launch_type = launch_type
        self._capacity_provider_strategy = capacity_provider_strategy
        self._platform_version = platform_version
        self._scale = scale
        self._client_token = client_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTaskSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTaskSetRequest of this CreateTaskSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service(self):
        """Gets the service of this CreateTaskSetRequest.


        :return: The service of this CreateTaskSetRequest.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this CreateTaskSetRequest.


        :param service: The service of this CreateTaskSetRequest.
        :type service: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def cluster(self):
        """Gets the cluster of this CreateTaskSetRequest.


        :return: The cluster of this CreateTaskSetRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this CreateTaskSetRequest.


        :param cluster: The cluster of this CreateTaskSetRequest.
        :type cluster: str
        """
        if cluster is None:
            raise ValueError("Invalid value for `cluster`, must not be `None`")

        self._cluster = cluster

    @property
    def external_id(self):
        """Gets the external_id of this CreateTaskSetRequest.


        :return: The external_id of this CreateTaskSetRequest.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CreateTaskSetRequest.


        :param external_id: The external_id of this CreateTaskSetRequest.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def task_definition(self):
        """Gets the task_definition of this CreateTaskSetRequest.


        :return: The task_definition of this CreateTaskSetRequest.
        :rtype: str
        """
        return self._task_definition

    @task_definition.setter
    def task_definition(self, task_definition):
        """Sets the task_definition of this CreateTaskSetRequest.


        :param task_definition: The task_definition of this CreateTaskSetRequest.
        :type task_definition: str
        """
        if task_definition is None:
            raise ValueError("Invalid value for `task_definition`, must not be `None`")

        self._task_definition = task_definition

    @property
    def network_configuration(self):
        """Gets the network_configuration of this CreateTaskSetRequest.


        :return: The network_configuration of this CreateTaskSetRequest.
        :rtype: CreateTaskSetRequestNetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this CreateTaskSetRequest.


        :param network_configuration: The network_configuration of this CreateTaskSetRequest.
        :type network_configuration: CreateTaskSetRequestNetworkConfiguration
        """

        self._network_configuration = network_configuration

    @property
    def load_balancers(self):
        """Gets the load_balancers of this CreateTaskSetRequest.


        :return: The load_balancers of this CreateTaskSetRequest.
        :rtype: List
        """
        return self._load_balancers

    @load_balancers.setter
    def load_balancers(self, load_balancers):
        """Sets the load_balancers of this CreateTaskSetRequest.


        :param load_balancers: The load_balancers of this CreateTaskSetRequest.
        :type load_balancers: List
        """

        self._load_balancers = load_balancers

    @property
    def service_registries(self):
        """Gets the service_registries of this CreateTaskSetRequest.


        :return: The service_registries of this CreateTaskSetRequest.
        :rtype: List
        """
        return self._service_registries

    @service_registries.setter
    def service_registries(self, service_registries):
        """Sets the service_registries of this CreateTaskSetRequest.


        :param service_registries: The service_registries of this CreateTaskSetRequest.
        :type service_registries: List
        """

        self._service_registries = service_registries

    @property
    def launch_type(self):
        """Gets the launch_type of this CreateTaskSetRequest.


        :return: The launch_type of this CreateTaskSetRequest.
        :rtype: LaunchType
        """
        return self._launch_type

    @launch_type.setter
    def launch_type(self, launch_type):
        """Sets the launch_type of this CreateTaskSetRequest.


        :param launch_type: The launch_type of this CreateTaskSetRequest.
        :type launch_type: LaunchType
        """

        self._launch_type = launch_type

    @property
    def capacity_provider_strategy(self):
        """Gets the capacity_provider_strategy of this CreateTaskSetRequest.


        :return: The capacity_provider_strategy of this CreateTaskSetRequest.
        :rtype: List
        """
        return self._capacity_provider_strategy

    @capacity_provider_strategy.setter
    def capacity_provider_strategy(self, capacity_provider_strategy):
        """Sets the capacity_provider_strategy of this CreateTaskSetRequest.


        :param capacity_provider_strategy: The capacity_provider_strategy of this CreateTaskSetRequest.
        :type capacity_provider_strategy: List
        """

        self._capacity_provider_strategy = capacity_provider_strategy

    @property
    def platform_version(self):
        """Gets the platform_version of this CreateTaskSetRequest.


        :return: The platform_version of this CreateTaskSetRequest.
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this CreateTaskSetRequest.


        :param platform_version: The platform_version of this CreateTaskSetRequest.
        :type platform_version: str
        """

        self._platform_version = platform_version

    @property
    def scale(self):
        """Gets the scale of this CreateTaskSetRequest.


        :return: The scale of this CreateTaskSetRequest.
        :rtype: CreateTaskSetRequestScale
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this CreateTaskSetRequest.


        :param scale: The scale of this CreateTaskSetRequest.
        :type scale: CreateTaskSetRequestScale
        """

        self._scale = scale

    @property
    def client_token(self):
        """Gets the client_token of this CreateTaskSetRequest.


        :return: The client_token of this CreateTaskSetRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateTaskSetRequest.


        :param client_token: The client_token of this CreateTaskSetRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateTaskSetRequest.


        :return: The tags of this CreateTaskSetRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateTaskSetRequest.


        :param tags: The tags of this CreateTaskSetRequest.
        :type tags: List
        """

        self._tags = tags
