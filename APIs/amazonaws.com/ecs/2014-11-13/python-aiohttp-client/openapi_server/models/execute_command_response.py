# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.execute_command_response_session import ExecuteCommandResponseSession
from openapi_server import util


class ExecuteCommandResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_arn: str=None, container_arn: str=None, container_name: str=None, interactive: bool=None, session: ExecuteCommandResponseSession=None, task_arn: str=None):
        """ExecuteCommandResponse - a model defined in OpenAPI

        :param cluster_arn: The cluster_arn of this ExecuteCommandResponse.
        :param container_arn: The container_arn of this ExecuteCommandResponse.
        :param container_name: The container_name of this ExecuteCommandResponse.
        :param interactive: The interactive of this ExecuteCommandResponse.
        :param session: The session of this ExecuteCommandResponse.
        :param task_arn: The task_arn of this ExecuteCommandResponse.
        """
        self.openapi_types = {
            'cluster_arn': str,
            'container_arn': str,
            'container_name': str,
            'interactive': bool,
            'session': ExecuteCommandResponseSession,
            'task_arn': str
        }

        self.attribute_map = {
            'cluster_arn': 'clusterArn',
            'container_arn': 'containerArn',
            'container_name': 'containerName',
            'interactive': 'interactive',
            'session': 'session',
            'task_arn': 'taskArn'
        }

        self._cluster_arn = cluster_arn
        self._container_arn = container_arn
        self._container_name = container_name
        self._interactive = interactive
        self._session = session
        self._task_arn = task_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecuteCommandResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecuteCommandResponse of this ExecuteCommandResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_arn(self):
        """Gets the cluster_arn of this ExecuteCommandResponse.


        :return: The cluster_arn of this ExecuteCommandResponse.
        :rtype: str
        """
        return self._cluster_arn

    @cluster_arn.setter
    def cluster_arn(self, cluster_arn):
        """Sets the cluster_arn of this ExecuteCommandResponse.


        :param cluster_arn: The cluster_arn of this ExecuteCommandResponse.
        :type cluster_arn: str
        """

        self._cluster_arn = cluster_arn

    @property
    def container_arn(self):
        """Gets the container_arn of this ExecuteCommandResponse.


        :return: The container_arn of this ExecuteCommandResponse.
        :rtype: str
        """
        return self._container_arn

    @container_arn.setter
    def container_arn(self, container_arn):
        """Sets the container_arn of this ExecuteCommandResponse.


        :param container_arn: The container_arn of this ExecuteCommandResponse.
        :type container_arn: str
        """

        self._container_arn = container_arn

    @property
    def container_name(self):
        """Gets the container_name of this ExecuteCommandResponse.


        :return: The container_name of this ExecuteCommandResponse.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this ExecuteCommandResponse.


        :param container_name: The container_name of this ExecuteCommandResponse.
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def interactive(self):
        """Gets the interactive of this ExecuteCommandResponse.


        :return: The interactive of this ExecuteCommandResponse.
        :rtype: bool
        """
        return self._interactive

    @interactive.setter
    def interactive(self, interactive):
        """Sets the interactive of this ExecuteCommandResponse.


        :param interactive: The interactive of this ExecuteCommandResponse.
        :type interactive: bool
        """

        self._interactive = interactive

    @property
    def session(self):
        """Gets the session of this ExecuteCommandResponse.


        :return: The session of this ExecuteCommandResponse.
        :rtype: ExecuteCommandResponseSession
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this ExecuteCommandResponse.


        :param session: The session of this ExecuteCommandResponse.
        :type session: ExecuteCommandResponseSession
        """

        self._session = session

    @property
    def task_arn(self):
        """Gets the task_arn of this ExecuteCommandResponse.


        :return: The task_arn of this ExecuteCommandResponse.
        :rtype: str
        """
        return self._task_arn

    @task_arn.setter
    def task_arn(self, task_arn):
        """Sets the task_arn of this ExecuteCommandResponse.


        :param task_arn: The task_arn of this ExecuteCommandResponse.
        :type task_arn: str
        """

        self._task_arn = task_arn
