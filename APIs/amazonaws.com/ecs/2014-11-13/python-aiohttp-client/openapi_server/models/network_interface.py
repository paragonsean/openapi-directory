# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment_id: str=None, private_ipv4_address: str=None, ipv6_address: str=None):
        """NetworkInterface - a model defined in OpenAPI

        :param attachment_id: The attachment_id of this NetworkInterface.
        :param private_ipv4_address: The private_ipv4_address of this NetworkInterface.
        :param ipv6_address: The ipv6_address of this NetworkInterface.
        """
        self.openapi_types = {
            'attachment_id': str,
            'private_ipv4_address': str,
            'ipv6_address': str
        }

        self.attribute_map = {
            'attachment_id': 'attachmentId',
            'private_ipv4_address': 'privateIpv4Address',
            'ipv6_address': 'ipv6Address'
        }

        self._attachment_id = attachment_id
        self._private_ipv4_address = private_ipv4_address
        self._ipv6_address = ipv6_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkInterface of this NetworkInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment_id(self):
        """Gets the attachment_id of this NetworkInterface.


        :return: The attachment_id of this NetworkInterface.
        :rtype: str
        """
        return self._attachment_id

    @attachment_id.setter
    def attachment_id(self, attachment_id):
        """Sets the attachment_id of this NetworkInterface.


        :param attachment_id: The attachment_id of this NetworkInterface.
        :type attachment_id: str
        """

        self._attachment_id = attachment_id

    @property
    def private_ipv4_address(self):
        """Gets the private_ipv4_address of this NetworkInterface.


        :return: The private_ipv4_address of this NetworkInterface.
        :rtype: str
        """
        return self._private_ipv4_address

    @private_ipv4_address.setter
    def private_ipv4_address(self, private_ipv4_address):
        """Sets the private_ipv4_address of this NetworkInterface.


        :param private_ipv4_address: The private_ipv4_address of this NetworkInterface.
        :type private_ipv4_address: str
        """

        self._private_ipv4_address = private_ipv4_address

    @property
    def ipv6_address(self):
        """Gets the ipv6_address of this NetworkInterface.


        :return: The ipv6_address of this NetworkInterface.
        :rtype: str
        """
        return self._ipv6_address

    @ipv6_address.setter
    def ipv6_address(self, ipv6_address):
        """Sets the ipv6_address of this NetworkInterface.


        :param ipv6_address: The ipv6_address of this NetworkInterface.
        :type ipv6_address: str
        """

        self._ipv6_address = ipv6_address
