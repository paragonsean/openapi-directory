# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.managed_agent_name import ManagedAgentName
from openapi_server import util


class ManagedAgentStateChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_name: str=None, managed_agent_name: ManagedAgentName=None, status: str=None, reason: str=None):
        """ManagedAgentStateChange - a model defined in OpenAPI

        :param container_name: The container_name of this ManagedAgentStateChange.
        :param managed_agent_name: The managed_agent_name of this ManagedAgentStateChange.
        :param status: The status of this ManagedAgentStateChange.
        :param reason: The reason of this ManagedAgentStateChange.
        """
        self.openapi_types = {
            'container_name': str,
            'managed_agent_name': ManagedAgentName,
            'status': str,
            'reason': str
        }

        self.attribute_map = {
            'container_name': 'containerName',
            'managed_agent_name': 'managedAgentName',
            'status': 'status',
            'reason': 'reason'
        }

        self._container_name = container_name
        self._managed_agent_name = managed_agent_name
        self._status = status
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedAgentStateChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedAgentStateChange of this ManagedAgentStateChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_name(self):
        """Gets the container_name of this ManagedAgentStateChange.


        :return: The container_name of this ManagedAgentStateChange.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this ManagedAgentStateChange.


        :param container_name: The container_name of this ManagedAgentStateChange.
        :type container_name: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")

        self._container_name = container_name

    @property
    def managed_agent_name(self):
        """Gets the managed_agent_name of this ManagedAgentStateChange.


        :return: The managed_agent_name of this ManagedAgentStateChange.
        :rtype: ManagedAgentName
        """
        return self._managed_agent_name

    @managed_agent_name.setter
    def managed_agent_name(self, managed_agent_name):
        """Sets the managed_agent_name of this ManagedAgentStateChange.


        :param managed_agent_name: The managed_agent_name of this ManagedAgentStateChange.
        :type managed_agent_name: ManagedAgentName
        """
        if managed_agent_name is None:
            raise ValueError("Invalid value for `managed_agent_name`, must not be `None`")

        self._managed_agent_name = managed_agent_name

    @property
    def status(self):
        """Gets the status of this ManagedAgentStateChange.


        :return: The status of this ManagedAgentStateChange.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ManagedAgentStateChange.


        :param status: The status of this ManagedAgentStateChange.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def reason(self):
        """Gets the reason of this ManagedAgentStateChange.


        :return: The reason of this ManagedAgentStateChange.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ManagedAgentStateChange.


        :param reason: The reason of this ManagedAgentStateChange.
        :type reason: str
        """

        self._reason = reason
