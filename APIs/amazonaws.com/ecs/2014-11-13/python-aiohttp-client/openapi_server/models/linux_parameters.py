# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.linux_parameters_capabilities import LinuxParametersCapabilities
from openapi_server import util


class LinuxParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: LinuxParametersCapabilities=None, devices: List=None, init_process_enabled: bool=None, shared_memory_size: int=None, tmpfs: List=None, max_swap: int=None, swappiness: int=None):
        """LinuxParameters - a model defined in OpenAPI

        :param capabilities: The capabilities of this LinuxParameters.
        :param devices: The devices of this LinuxParameters.
        :param init_process_enabled: The init_process_enabled of this LinuxParameters.
        :param shared_memory_size: The shared_memory_size of this LinuxParameters.
        :param tmpfs: The tmpfs of this LinuxParameters.
        :param max_swap: The max_swap of this LinuxParameters.
        :param swappiness: The swappiness of this LinuxParameters.
        """
        self.openapi_types = {
            'capabilities': LinuxParametersCapabilities,
            'devices': List,
            'init_process_enabled': bool,
            'shared_memory_size': int,
            'tmpfs': List,
            'max_swap': int,
            'swappiness': int
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'devices': 'devices',
            'init_process_enabled': 'initProcessEnabled',
            'shared_memory_size': 'sharedMemorySize',
            'tmpfs': 'tmpfs',
            'max_swap': 'maxSwap',
            'swappiness': 'swappiness'
        }

        self._capabilities = capabilities
        self._devices = devices
        self._init_process_enabled = init_process_enabled
        self._shared_memory_size = shared_memory_size
        self._tmpfs = tmpfs
        self._max_swap = max_swap
        self._swappiness = swappiness

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinuxParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinuxParameters of this LinuxParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this LinuxParameters.


        :return: The capabilities of this LinuxParameters.
        :rtype: LinuxParametersCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this LinuxParameters.


        :param capabilities: The capabilities of this LinuxParameters.
        :type capabilities: LinuxParametersCapabilities
        """

        self._capabilities = capabilities

    @property
    def devices(self):
        """Gets the devices of this LinuxParameters.


        :return: The devices of this LinuxParameters.
        :rtype: List
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this LinuxParameters.


        :param devices: The devices of this LinuxParameters.
        :type devices: List
        """

        self._devices = devices

    @property
    def init_process_enabled(self):
        """Gets the init_process_enabled of this LinuxParameters.


        :return: The init_process_enabled of this LinuxParameters.
        :rtype: bool
        """
        return self._init_process_enabled

    @init_process_enabled.setter
    def init_process_enabled(self, init_process_enabled):
        """Sets the init_process_enabled of this LinuxParameters.


        :param init_process_enabled: The init_process_enabled of this LinuxParameters.
        :type init_process_enabled: bool
        """

        self._init_process_enabled = init_process_enabled

    @property
    def shared_memory_size(self):
        """Gets the shared_memory_size of this LinuxParameters.


        :return: The shared_memory_size of this LinuxParameters.
        :rtype: int
        """
        return self._shared_memory_size

    @shared_memory_size.setter
    def shared_memory_size(self, shared_memory_size):
        """Sets the shared_memory_size of this LinuxParameters.


        :param shared_memory_size: The shared_memory_size of this LinuxParameters.
        :type shared_memory_size: int
        """

        self._shared_memory_size = shared_memory_size

    @property
    def tmpfs(self):
        """Gets the tmpfs of this LinuxParameters.


        :return: The tmpfs of this LinuxParameters.
        :rtype: List
        """
        return self._tmpfs

    @tmpfs.setter
    def tmpfs(self, tmpfs):
        """Sets the tmpfs of this LinuxParameters.


        :param tmpfs: The tmpfs of this LinuxParameters.
        :type tmpfs: List
        """

        self._tmpfs = tmpfs

    @property
    def max_swap(self):
        """Gets the max_swap of this LinuxParameters.


        :return: The max_swap of this LinuxParameters.
        :rtype: int
        """
        return self._max_swap

    @max_swap.setter
    def max_swap(self, max_swap):
        """Sets the max_swap of this LinuxParameters.


        :param max_swap: The max_swap of this LinuxParameters.
        :type max_swap: int
        """

        self._max_swap = max_swap

    @property
    def swappiness(self):
        """Gets the swappiness of this LinuxParameters.


        :return: The swappiness of this LinuxParameters.
        :rtype: int
        """
        return self._swappiness

    @swappiness.setter
    def swappiness(self, swappiness):
        """Sets the swappiness of this LinuxParameters.


        :param swappiness: The swappiness of this LinuxParameters.
        :type swappiness: int
        """

        self._swappiness = swappiness
