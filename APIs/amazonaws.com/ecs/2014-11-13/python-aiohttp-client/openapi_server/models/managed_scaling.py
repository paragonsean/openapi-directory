# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.managed_scaling_status import ManagedScalingStatus
from openapi_server import util


class ManagedScaling(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: ManagedScalingStatus=None, target_capacity: int=None, minimum_scaling_step_size: int=None, maximum_scaling_step_size: int=None, instance_warmup_period: int=None):
        """ManagedScaling - a model defined in OpenAPI

        :param status: The status of this ManagedScaling.
        :param target_capacity: The target_capacity of this ManagedScaling.
        :param minimum_scaling_step_size: The minimum_scaling_step_size of this ManagedScaling.
        :param maximum_scaling_step_size: The maximum_scaling_step_size of this ManagedScaling.
        :param instance_warmup_period: The instance_warmup_period of this ManagedScaling.
        """
        self.openapi_types = {
            'status': ManagedScalingStatus,
            'target_capacity': int,
            'minimum_scaling_step_size': int,
            'maximum_scaling_step_size': int,
            'instance_warmup_period': int
        }

        self.attribute_map = {
            'status': 'status',
            'target_capacity': 'targetCapacity',
            'minimum_scaling_step_size': 'minimumScalingStepSize',
            'maximum_scaling_step_size': 'maximumScalingStepSize',
            'instance_warmup_period': 'instanceWarmupPeriod'
        }

        self._status = status
        self._target_capacity = target_capacity
        self._minimum_scaling_step_size = minimum_scaling_step_size
        self._maximum_scaling_step_size = maximum_scaling_step_size
        self._instance_warmup_period = instance_warmup_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedScaling':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedScaling of this ManagedScaling.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this ManagedScaling.


        :return: The status of this ManagedScaling.
        :rtype: ManagedScalingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ManagedScaling.


        :param status: The status of this ManagedScaling.
        :type status: ManagedScalingStatus
        """

        self._status = status

    @property
    def target_capacity(self):
        """Gets the target_capacity of this ManagedScaling.


        :return: The target_capacity of this ManagedScaling.
        :rtype: int
        """
        return self._target_capacity

    @target_capacity.setter
    def target_capacity(self, target_capacity):
        """Sets the target_capacity of this ManagedScaling.


        :param target_capacity: The target_capacity of this ManagedScaling.
        :type target_capacity: int
        """

        self._target_capacity = target_capacity

    @property
    def minimum_scaling_step_size(self):
        """Gets the minimum_scaling_step_size of this ManagedScaling.


        :return: The minimum_scaling_step_size of this ManagedScaling.
        :rtype: int
        """
        return self._minimum_scaling_step_size

    @minimum_scaling_step_size.setter
    def minimum_scaling_step_size(self, minimum_scaling_step_size):
        """Sets the minimum_scaling_step_size of this ManagedScaling.


        :param minimum_scaling_step_size: The minimum_scaling_step_size of this ManagedScaling.
        :type minimum_scaling_step_size: int
        """

        self._minimum_scaling_step_size = minimum_scaling_step_size

    @property
    def maximum_scaling_step_size(self):
        """Gets the maximum_scaling_step_size of this ManagedScaling.


        :return: The maximum_scaling_step_size of this ManagedScaling.
        :rtype: int
        """
        return self._maximum_scaling_step_size

    @maximum_scaling_step_size.setter
    def maximum_scaling_step_size(self, maximum_scaling_step_size):
        """Sets the maximum_scaling_step_size of this ManagedScaling.


        :param maximum_scaling_step_size: The maximum_scaling_step_size of this ManagedScaling.
        :type maximum_scaling_step_size: int
        """

        self._maximum_scaling_step_size = maximum_scaling_step_size

    @property
    def instance_warmup_period(self):
        """Gets the instance_warmup_period of this ManagedScaling.


        :return: The instance_warmup_period of this ManagedScaling.
        :rtype: int
        """
        return self._instance_warmup_period

    @instance_warmup_period.setter
    def instance_warmup_period(self, instance_warmup_period):
        """Sets the instance_warmup_period of this ManagedScaling.


        :param instance_warmup_period: The instance_warmup_period of this ManagedScaling.
        :type instance_warmup_period: int
        """

        self._instance_warmup_period = instance_warmup_period
