# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_instance_status import ContainerInstanceStatus
from openapi_server import util


class UpdateContainerInstancesStateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, container_instances: List=None, status: ContainerInstanceStatus=None):
        """UpdateContainerInstancesStateRequest - a model defined in OpenAPI

        :param cluster: The cluster of this UpdateContainerInstancesStateRequest.
        :param container_instances: The container_instances of this UpdateContainerInstancesStateRequest.
        :param status: The status of this UpdateContainerInstancesStateRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'container_instances': List,
            'status': ContainerInstanceStatus
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'container_instances': 'containerInstances',
            'status': 'status'
        }

        self._cluster = cluster
        self._container_instances = container_instances
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateContainerInstancesStateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateContainerInstancesStateRequest of this UpdateContainerInstancesStateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this UpdateContainerInstancesStateRequest.


        :return: The cluster of this UpdateContainerInstancesStateRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this UpdateContainerInstancesStateRequest.


        :param cluster: The cluster of this UpdateContainerInstancesStateRequest.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def container_instances(self):
        """Gets the container_instances of this UpdateContainerInstancesStateRequest.


        :return: The container_instances of this UpdateContainerInstancesStateRequest.
        :rtype: List
        """
        return self._container_instances

    @container_instances.setter
    def container_instances(self, container_instances):
        """Sets the container_instances of this UpdateContainerInstancesStateRequest.


        :param container_instances: The container_instances of this UpdateContainerInstancesStateRequest.
        :type container_instances: List
        """
        if container_instances is None:
            raise ValueError("Invalid value for `container_instances`, must not be `None`")

        self._container_instances = container_instances

    @property
    def status(self):
        """Gets the status of this UpdateContainerInstancesStateRequest.


        :return: The status of this UpdateContainerInstancesStateRequest.
        :rtype: ContainerInstanceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateContainerInstancesStateRequest.


        :param status: The status of this UpdateContainerInstancesStateRequest.
        :type status: ContainerInstanceStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
