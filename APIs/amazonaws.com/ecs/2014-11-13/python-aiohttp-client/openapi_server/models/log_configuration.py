# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_driver import LogDriver
from openapi_server import util


class LogConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_driver: LogDriver=None, options: Dict=None, secret_options: List=None):
        """LogConfiguration - a model defined in OpenAPI

        :param log_driver: The log_driver of this LogConfiguration.
        :param options: The options of this LogConfiguration.
        :param secret_options: The secret_options of this LogConfiguration.
        """
        self.openapi_types = {
            'log_driver': LogDriver,
            'options': Dict,
            'secret_options': List
        }

        self.attribute_map = {
            'log_driver': 'logDriver',
            'options': 'options',
            'secret_options': 'secretOptions'
        }

        self._log_driver = log_driver
        self._options = options
        self._secret_options = secret_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogConfiguration of this LogConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_driver(self):
        """Gets the log_driver of this LogConfiguration.


        :return: The log_driver of this LogConfiguration.
        :rtype: LogDriver
        """
        return self._log_driver

    @log_driver.setter
    def log_driver(self, log_driver):
        """Sets the log_driver of this LogConfiguration.


        :param log_driver: The log_driver of this LogConfiguration.
        :type log_driver: LogDriver
        """
        if log_driver is None:
            raise ValueError("Invalid value for `log_driver`, must not be `None`")

        self._log_driver = log_driver

    @property
    def options(self):
        """Gets the options of this LogConfiguration.


        :return: The options of this LogConfiguration.
        :rtype: Dict
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this LogConfiguration.


        :param options: The options of this LogConfiguration.
        :type options: Dict
        """

        self._options = options

    @property
    def secret_options(self):
        """Gets the secret_options of this LogConfiguration.


        :return: The secret_options of this LogConfiguration.
        :rtype: List
        """
        return self._secret_options

    @secret_options.setter
    def secret_options(self, secret_options):
        """Sets the secret_options of this LogConfiguration.


        :param secret_options: The secret_options of this LogConfiguration.
        :type secret_options: List
        """

        self._secret_options = secret_options
