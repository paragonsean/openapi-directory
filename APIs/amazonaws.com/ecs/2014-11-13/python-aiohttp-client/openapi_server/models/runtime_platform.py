# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cpu_architecture import CPUArchitecture
from openapi_server.models.os_family import OSFamily
from openapi_server import util


class RuntimePlatform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu_architecture: CPUArchitecture=None, operating_system_family: OSFamily=None):
        """RuntimePlatform - a model defined in OpenAPI

        :param cpu_architecture: The cpu_architecture of this RuntimePlatform.
        :param operating_system_family: The operating_system_family of this RuntimePlatform.
        """
        self.openapi_types = {
            'cpu_architecture': CPUArchitecture,
            'operating_system_family': OSFamily
        }

        self.attribute_map = {
            'cpu_architecture': 'cpuArchitecture',
            'operating_system_family': 'operatingSystemFamily'
        }

        self._cpu_architecture = cpu_architecture
        self._operating_system_family = operating_system_family

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuntimePlatform':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuntimePlatform of this RuntimePlatform.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu_architecture(self):
        """Gets the cpu_architecture of this RuntimePlatform.


        :return: The cpu_architecture of this RuntimePlatform.
        :rtype: CPUArchitecture
        """
        return self._cpu_architecture

    @cpu_architecture.setter
    def cpu_architecture(self, cpu_architecture):
        """Sets the cpu_architecture of this RuntimePlatform.


        :param cpu_architecture: The cpu_architecture of this RuntimePlatform.
        :type cpu_architecture: CPUArchitecture
        """

        self._cpu_architecture = cpu_architecture

    @property
    def operating_system_family(self):
        """Gets the operating_system_family of this RuntimePlatform.


        :return: The operating_system_family of this RuntimePlatform.
        :rtype: OSFamily
        """
        return self._operating_system_family

    @operating_system_family.setter
    def operating_system_family(self, operating_system_family):
        """Sets the operating_system_family of this RuntimePlatform.


        :param operating_system_family: The operating_system_family of this RuntimePlatform.
        :type operating_system_family: OSFamily
        """

        self._operating_system_family = operating_system_family
