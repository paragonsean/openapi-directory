# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_path: str=None, container_path: str=None, permissions: List=None):
        """Device - a model defined in OpenAPI

        :param host_path: The host_path of this Device.
        :param container_path: The container_path of this Device.
        :param permissions: The permissions of this Device.
        """
        self.openapi_types = {
            'host_path': str,
            'container_path': str,
            'permissions': List
        }

        self.attribute_map = {
            'host_path': 'hostPath',
            'container_path': 'containerPath',
            'permissions': 'permissions'
        }

        self._host_path = host_path
        self._container_path = container_path
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device of this Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_path(self):
        """Gets the host_path of this Device.


        :return: The host_path of this Device.
        :rtype: str
        """
        return self._host_path

    @host_path.setter
    def host_path(self, host_path):
        """Sets the host_path of this Device.


        :param host_path: The host_path of this Device.
        :type host_path: str
        """
        if host_path is None:
            raise ValueError("Invalid value for `host_path`, must not be `None`")

        self._host_path = host_path

    @property
    def container_path(self):
        """Gets the container_path of this Device.


        :return: The container_path of this Device.
        :rtype: str
        """
        return self._container_path

    @container_path.setter
    def container_path(self, container_path):
        """Sets the container_path of this Device.


        :param container_path: The container_path of this Device.
        :type container_path: str
        """

        self._container_path = container_path

    @property
    def permissions(self):
        """Gets the permissions of this Device.


        :return: The permissions of this Device.
        :rtype: List
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Device.


        :param permissions: The permissions of this Device.
        :type permissions: List
        """

        self._permissions = permissions
