# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target_type import TargetType
from openapi_server import util


class Attribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, value: str=None, target_type: TargetType=None, target_id: str=None):
        """Attribute - a model defined in OpenAPI

        :param name: The name of this Attribute.
        :param value: The value of this Attribute.
        :param target_type: The target_type of this Attribute.
        :param target_id: The target_id of this Attribute.
        """
        self.openapi_types = {
            'name': str,
            'value': str,
            'target_type': TargetType,
            'target_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value',
            'target_type': 'targetType',
            'target_id': 'targetId'
        }

        self._name = name
        self._value = value
        self._target_type = target_type
        self._target_id = target_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attribute of this Attribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Attribute.


        :return: The name of this Attribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attribute.


        :param name: The name of this Attribute.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value(self):
        """Gets the value of this Attribute.


        :return: The value of this Attribute.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Attribute.


        :param value: The value of this Attribute.
        :type value: str
        """

        self._value = value

    @property
    def target_type(self):
        """Gets the target_type of this Attribute.


        :return: The target_type of this Attribute.
        :rtype: TargetType
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this Attribute.


        :param target_type: The target_type of this Attribute.
        :type target_type: TargetType
        """

        self._target_type = target_type

    @property
    def target_id(self):
        """Gets the target_id of this Attribute.


        :return: The target_id of this Attribute.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this Attribute.


        :param target_id: The target_id of this Attribute.
        :type target_id: str
        """

        self._target_id = target_id
