# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeServicesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, services: List=None, include: List=None):
        """DescribeServicesRequest - a model defined in OpenAPI

        :param cluster: The cluster of this DescribeServicesRequest.
        :param services: The services of this DescribeServicesRequest.
        :param include: The include of this DescribeServicesRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'services': List,
            'include': List
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'services': 'services',
            'include': 'include'
        }

        self._cluster = cluster
        self._services = services
        self._include = include

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeServicesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeServicesRequest of this DescribeServicesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this DescribeServicesRequest.


        :return: The cluster of this DescribeServicesRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DescribeServicesRequest.


        :param cluster: The cluster of this DescribeServicesRequest.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def services(self):
        """Gets the services of this DescribeServicesRequest.


        :return: The services of this DescribeServicesRequest.
        :rtype: List
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this DescribeServicesRequest.


        :param services: The services of this DescribeServicesRequest.
        :type services: List
        """
        if services is None:
            raise ValueError("Invalid value for `services`, must not be `None`")

        self._services = services

    @property
    def include(self):
        """Gets the include of this DescribeServicesRequest.


        :return: The include of this DescribeServicesRequest.
        :rtype: List
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this DescribeServicesRequest.


        :param include: The include of this DescribeServicesRequest.
        :type include: List
        """

        self._include = include
