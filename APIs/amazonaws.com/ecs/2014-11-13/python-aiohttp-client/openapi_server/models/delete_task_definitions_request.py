# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteTaskDefinitionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_definitions: List=None):
        """DeleteTaskDefinitionsRequest - a model defined in OpenAPI

        :param task_definitions: The task_definitions of this DeleteTaskDefinitionsRequest.
        """
        self.openapi_types = {
            'task_definitions': List
        }

        self.attribute_map = {
            'task_definitions': 'taskDefinitions'
        }

        self._task_definitions = task_definitions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteTaskDefinitionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteTaskDefinitionsRequest of this DeleteTaskDefinitionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_definitions(self):
        """Gets the task_definitions of this DeleteTaskDefinitionsRequest.


        :return: The task_definitions of this DeleteTaskDefinitionsRequest.
        :rtype: List
        """
        return self._task_definitions

    @task_definitions.setter
    def task_definitions(self, task_definitions):
        """Sets the task_definitions of this DeleteTaskDefinitionsRequest.


        :param task_definitions: The task_definitions of this DeleteTaskDefinitionsRequest.
        :type task_definitions: List
        """
        if task_definitions is None:
            raise ValueError("Invalid value for `task_definitions`, must not be `None`")

        self._task_definitions = task_definitions
