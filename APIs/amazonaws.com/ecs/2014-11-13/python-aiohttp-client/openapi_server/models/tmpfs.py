# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Tmpfs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_path: str=None, size: int=None, mount_options: List=None):
        """Tmpfs - a model defined in OpenAPI

        :param container_path: The container_path of this Tmpfs.
        :param size: The size of this Tmpfs.
        :param mount_options: The mount_options of this Tmpfs.
        """
        self.openapi_types = {
            'container_path': str,
            'size': int,
            'mount_options': List
        }

        self.attribute_map = {
            'container_path': 'containerPath',
            'size': 'size',
            'mount_options': 'mountOptions'
        }

        self._container_path = container_path
        self._size = size
        self._mount_options = mount_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tmpfs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tmpfs of this Tmpfs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_path(self):
        """Gets the container_path of this Tmpfs.


        :return: The container_path of this Tmpfs.
        :rtype: str
        """
        return self._container_path

    @container_path.setter
    def container_path(self, container_path):
        """Sets the container_path of this Tmpfs.


        :param container_path: The container_path of this Tmpfs.
        :type container_path: str
        """
        if container_path is None:
            raise ValueError("Invalid value for `container_path`, must not be `None`")

        self._container_path = container_path

    @property
    def size(self):
        """Gets the size of this Tmpfs.


        :return: The size of this Tmpfs.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Tmpfs.


        :param size: The size of this Tmpfs.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def mount_options(self):
        """Gets the mount_options of this Tmpfs.


        :return: The mount_options of this Tmpfs.
        :rtype: List
        """
        return self._mount_options

    @mount_options.setter
    def mount_options(self, mount_options):
        """Sets the mount_options of this Tmpfs.


        :param mount_options: The mount_options of this Tmpfs.
        :type mount_options: List
        """

        self._mount_options = mount_options
