# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceRegistry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, registry_arn: str=None, port: int=None, container_name: str=None, container_port: int=None):
        """ServiceRegistry - a model defined in OpenAPI

        :param registry_arn: The registry_arn of this ServiceRegistry.
        :param port: The port of this ServiceRegistry.
        :param container_name: The container_name of this ServiceRegistry.
        :param container_port: The container_port of this ServiceRegistry.
        """
        self.openapi_types = {
            'registry_arn': str,
            'port': int,
            'container_name': str,
            'container_port': int
        }

        self.attribute_map = {
            'registry_arn': 'registryArn',
            'port': 'port',
            'container_name': 'containerName',
            'container_port': 'containerPort'
        }

        self._registry_arn = registry_arn
        self._port = port
        self._container_name = container_name
        self._container_port = container_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceRegistry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceRegistry of this ServiceRegistry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def registry_arn(self):
        """Gets the registry_arn of this ServiceRegistry.


        :return: The registry_arn of this ServiceRegistry.
        :rtype: str
        """
        return self._registry_arn

    @registry_arn.setter
    def registry_arn(self, registry_arn):
        """Sets the registry_arn of this ServiceRegistry.


        :param registry_arn: The registry_arn of this ServiceRegistry.
        :type registry_arn: str
        """

        self._registry_arn = registry_arn

    @property
    def port(self):
        """Gets the port of this ServiceRegistry.


        :return: The port of this ServiceRegistry.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ServiceRegistry.


        :param port: The port of this ServiceRegistry.
        :type port: int
        """

        self._port = port

    @property
    def container_name(self):
        """Gets the container_name of this ServiceRegistry.


        :return: The container_name of this ServiceRegistry.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this ServiceRegistry.


        :param container_name: The container_name of this ServiceRegistry.
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def container_port(self):
        """Gets the container_port of this ServiceRegistry.


        :return: The container_port of this ServiceRegistry.
        :rtype: int
        """
        return self._container_port

    @container_port.setter
    def container_port(self, container_port):
        """Sets the container_port of this ServiceRegistry.


        :param container_port: The container_port of this ServiceRegistry.
        :type container_port: int
        """

        self._container_port = container_port
