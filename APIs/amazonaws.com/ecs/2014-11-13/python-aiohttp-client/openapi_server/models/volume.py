# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.volume_docker_volume_configuration import VolumeDockerVolumeConfiguration
from openapi_server.models.volume_efs_volume_configuration import VolumeEfsVolumeConfiguration
from openapi_server.models.volume_fsx_windows_file_server_volume_configuration import VolumeFsxWindowsFileServerVolumeConfiguration
from openapi_server.models.volume_host import VolumeHost
from openapi_server import util


class Volume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, host: VolumeHost=None, docker_volume_configuration: VolumeDockerVolumeConfiguration=None, efs_volume_configuration: VolumeEfsVolumeConfiguration=None, fsx_windows_file_server_volume_configuration: VolumeFsxWindowsFileServerVolumeConfiguration=None):
        """Volume - a model defined in OpenAPI

        :param name: The name of this Volume.
        :param host: The host of this Volume.
        :param docker_volume_configuration: The docker_volume_configuration of this Volume.
        :param efs_volume_configuration: The efs_volume_configuration of this Volume.
        :param fsx_windows_file_server_volume_configuration: The fsx_windows_file_server_volume_configuration of this Volume.
        """
        self.openapi_types = {
            'name': str,
            'host': VolumeHost,
            'docker_volume_configuration': VolumeDockerVolumeConfiguration,
            'efs_volume_configuration': VolumeEfsVolumeConfiguration,
            'fsx_windows_file_server_volume_configuration': VolumeFsxWindowsFileServerVolumeConfiguration
        }

        self.attribute_map = {
            'name': 'name',
            'host': 'host',
            'docker_volume_configuration': 'dockerVolumeConfiguration',
            'efs_volume_configuration': 'efsVolumeConfiguration',
            'fsx_windows_file_server_volume_configuration': 'fsxWindowsFileServerVolumeConfiguration'
        }

        self._name = name
        self._host = host
        self._docker_volume_configuration = docker_volume_configuration
        self._efs_volume_configuration = efs_volume_configuration
        self._fsx_windows_file_server_volume_configuration = fsx_windows_file_server_volume_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Volume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volume of this Volume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Volume.


        :return: The name of this Volume.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Volume.


        :param name: The name of this Volume.
        :type name: str
        """

        self._name = name

    @property
    def host(self):
        """Gets the host of this Volume.


        :return: The host of this Volume.
        :rtype: VolumeHost
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Volume.


        :param host: The host of this Volume.
        :type host: VolumeHost
        """

        self._host = host

    @property
    def docker_volume_configuration(self):
        """Gets the docker_volume_configuration of this Volume.


        :return: The docker_volume_configuration of this Volume.
        :rtype: VolumeDockerVolumeConfiguration
        """
        return self._docker_volume_configuration

    @docker_volume_configuration.setter
    def docker_volume_configuration(self, docker_volume_configuration):
        """Sets the docker_volume_configuration of this Volume.


        :param docker_volume_configuration: The docker_volume_configuration of this Volume.
        :type docker_volume_configuration: VolumeDockerVolumeConfiguration
        """

        self._docker_volume_configuration = docker_volume_configuration

    @property
    def efs_volume_configuration(self):
        """Gets the efs_volume_configuration of this Volume.


        :return: The efs_volume_configuration of this Volume.
        :rtype: VolumeEfsVolumeConfiguration
        """
        return self._efs_volume_configuration

    @efs_volume_configuration.setter
    def efs_volume_configuration(self, efs_volume_configuration):
        """Sets the efs_volume_configuration of this Volume.


        :param efs_volume_configuration: The efs_volume_configuration of this Volume.
        :type efs_volume_configuration: VolumeEfsVolumeConfiguration
        """

        self._efs_volume_configuration = efs_volume_configuration

    @property
    def fsx_windows_file_server_volume_configuration(self):
        """Gets the fsx_windows_file_server_volume_configuration of this Volume.


        :return: The fsx_windows_file_server_volume_configuration of this Volume.
        :rtype: VolumeFsxWindowsFileServerVolumeConfiguration
        """
        return self._fsx_windows_file_server_volume_configuration

    @fsx_windows_file_server_volume_configuration.setter
    def fsx_windows_file_server_volume_configuration(self, fsx_windows_file_server_volume_configuration):
        """Sets the fsx_windows_file_server_volume_configuration of this Volume.


        :param fsx_windows_file_server_volume_configuration: The fsx_windows_file_server_volume_configuration of this Volume.
        :type fsx_windows_file_server_volume_configuration: VolumeFsxWindowsFileServerVolumeConfiguration
        """

        self._fsx_windows_file_server_volume_configuration = fsx_windows_file_server_volume_configuration
