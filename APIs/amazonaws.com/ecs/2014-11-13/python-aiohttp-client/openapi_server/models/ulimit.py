# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ulimit_name import UlimitName
from openapi_server import util


class Ulimit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: UlimitName=None, soft_limit: int=None, hard_limit: int=None):
        """Ulimit - a model defined in OpenAPI

        :param name: The name of this Ulimit.
        :param soft_limit: The soft_limit of this Ulimit.
        :param hard_limit: The hard_limit of this Ulimit.
        """
        self.openapi_types = {
            'name': UlimitName,
            'soft_limit': int,
            'hard_limit': int
        }

        self.attribute_map = {
            'name': 'name',
            'soft_limit': 'softLimit',
            'hard_limit': 'hardLimit'
        }

        self._name = name
        self._soft_limit = soft_limit
        self._hard_limit = hard_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ulimit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ulimit of this Ulimit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Ulimit.


        :return: The name of this Ulimit.
        :rtype: UlimitName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Ulimit.


        :param name: The name of this Ulimit.
        :type name: UlimitName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def soft_limit(self):
        """Gets the soft_limit of this Ulimit.


        :return: The soft_limit of this Ulimit.
        :rtype: int
        """
        return self._soft_limit

    @soft_limit.setter
    def soft_limit(self, soft_limit):
        """Sets the soft_limit of this Ulimit.


        :param soft_limit: The soft_limit of this Ulimit.
        :type soft_limit: int
        """
        if soft_limit is None:
            raise ValueError("Invalid value for `soft_limit`, must not be `None`")

        self._soft_limit = soft_limit

    @property
    def hard_limit(self):
        """Gets the hard_limit of this Ulimit.


        :return: The hard_limit of this Ulimit.
        :rtype: int
        """
        return self._hard_limit

    @hard_limit.setter
    def hard_limit(self, hard_limit):
        """Sets the hard_limit of this Ulimit.


        :param hard_limit: The hard_limit of this Ulimit.
        :type hard_limit: int
        """
        if hard_limit is None:
            raise ValueError("Invalid value for `hard_limit`, must not be `None`")

        self._hard_limit = hard_limit
