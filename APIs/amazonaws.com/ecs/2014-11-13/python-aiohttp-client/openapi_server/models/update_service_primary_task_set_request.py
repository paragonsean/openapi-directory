# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateServicePrimaryTaskSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, service: str=None, primary_task_set: str=None):
        """UpdateServicePrimaryTaskSetRequest - a model defined in OpenAPI

        :param cluster: The cluster of this UpdateServicePrimaryTaskSetRequest.
        :param service: The service of this UpdateServicePrimaryTaskSetRequest.
        :param primary_task_set: The primary_task_set of this UpdateServicePrimaryTaskSetRequest.
        """
        self.openapi_types = {
            'cluster': str,
            'service': str,
            'primary_task_set': str
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'service': 'service',
            'primary_task_set': 'primaryTaskSet'
        }

        self._cluster = cluster
        self._service = service
        self._primary_task_set = primary_task_set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateServicePrimaryTaskSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateServicePrimaryTaskSetRequest of this UpdateServicePrimaryTaskSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this UpdateServicePrimaryTaskSetRequest.


        :return: The cluster of this UpdateServicePrimaryTaskSetRequest.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this UpdateServicePrimaryTaskSetRequest.


        :param cluster: The cluster of this UpdateServicePrimaryTaskSetRequest.
        :type cluster: str
        """
        if cluster is None:
            raise ValueError("Invalid value for `cluster`, must not be `None`")

        self._cluster = cluster

    @property
    def service(self):
        """Gets the service of this UpdateServicePrimaryTaskSetRequest.


        :return: The service of this UpdateServicePrimaryTaskSetRequest.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this UpdateServicePrimaryTaskSetRequest.


        :param service: The service of this UpdateServicePrimaryTaskSetRequest.
        :type service: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def primary_task_set(self):
        """Gets the primary_task_set of this UpdateServicePrimaryTaskSetRequest.


        :return: The primary_task_set of this UpdateServicePrimaryTaskSetRequest.
        :rtype: str
        """
        return self._primary_task_set

    @primary_task_set.setter
    def primary_task_set(self, primary_task_set):
        """Sets the primary_task_set of this UpdateServicePrimaryTaskSetRequest.


        :param primary_task_set: The primary_task_set of this UpdateServicePrimaryTaskSetRequest.
        :type primary_task_set: str
        """
        if primary_task_set is None:
            raise ValueError("Invalid value for `primary_task_set`, must not be `None`")

        self._primary_task_set = primary_task_set
