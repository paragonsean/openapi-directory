/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICluster::OAICluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICluster::OAICluster() {
    this->initializeModel();
}

OAICluster::~OAICluster() {}

void OAICluster::initializeModel() {

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_registered_container_instances_count_isSet = false;
    m_registered_container_instances_count_isValid = false;

    m_running_tasks_count_isSet = false;
    m_running_tasks_count_isValid = false;

    m_pending_tasks_count_isSet = false;
    m_pending_tasks_count_isValid = false;

    m_active_services_count_isSet = false;
    m_active_services_count_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_capacity_providers_isSet = false;
    m_capacity_providers_isValid = false;

    m_default_capacity_provider_strategy_isSet = false;
    m_default_capacity_provider_strategy_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_attachments_status_isSet = false;
    m_attachments_status_isValid = false;

    m_service_connect_defaults_isSet = false;
    m_service_connect_defaults_isValid = false;
}

void OAICluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICluster::fromJsonObject(QJsonObject json) {

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("clusterArn")]);
    m_cluster_arn_isSet = !json[QString("clusterArn")].isNull() && m_cluster_arn_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_registered_container_instances_count_isValid = ::OpenAPI::fromJsonValue(m_registered_container_instances_count, json[QString("registeredContainerInstancesCount")]);
    m_registered_container_instances_count_isSet = !json[QString("registeredContainerInstancesCount")].isNull() && m_registered_container_instances_count_isValid;

    m_running_tasks_count_isValid = ::OpenAPI::fromJsonValue(m_running_tasks_count, json[QString("runningTasksCount")]);
    m_running_tasks_count_isSet = !json[QString("runningTasksCount")].isNull() && m_running_tasks_count_isValid;

    m_pending_tasks_count_isValid = ::OpenAPI::fromJsonValue(m_pending_tasks_count, json[QString("pendingTasksCount")]);
    m_pending_tasks_count_isSet = !json[QString("pendingTasksCount")].isNull() && m_pending_tasks_count_isValid;

    m_active_services_count_isValid = ::OpenAPI::fromJsonValue(m_active_services_count, json[QString("activeServicesCount")]);
    m_active_services_count_isSet = !json[QString("activeServicesCount")].isNull() && m_active_services_count_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_capacity_providers_isValid = ::OpenAPI::fromJsonValue(m_capacity_providers, json[QString("capacityProviders")]);
    m_capacity_providers_isSet = !json[QString("capacityProviders")].isNull() && m_capacity_providers_isValid;

    m_default_capacity_provider_strategy_isValid = ::OpenAPI::fromJsonValue(m_default_capacity_provider_strategy, json[QString("defaultCapacityProviderStrategy")]);
    m_default_capacity_provider_strategy_isSet = !json[QString("defaultCapacityProviderStrategy")].isNull() && m_default_capacity_provider_strategy_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_attachments_status_isValid = ::OpenAPI::fromJsonValue(m_attachments_status, json[QString("attachmentsStatus")]);
    m_attachments_status_isSet = !json[QString("attachmentsStatus")].isNull() && m_attachments_status_isValid;

    m_service_connect_defaults_isValid = ::OpenAPI::fromJsonValue(m_service_connect_defaults, json[QString("serviceConnectDefaults")]);
    m_service_connect_defaults_isSet = !json[QString("serviceConnectDefaults")].isNull() && m_service_connect_defaults_isValid;
}

QString OAICluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICluster::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_arn_isSet) {
        obj.insert(QString("clusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_registered_container_instances_count_isSet) {
        obj.insert(QString("registeredContainerInstancesCount"), ::OpenAPI::toJsonValue(m_registered_container_instances_count));
    }
    if (m_running_tasks_count_isSet) {
        obj.insert(QString("runningTasksCount"), ::OpenAPI::toJsonValue(m_running_tasks_count));
    }
    if (m_pending_tasks_count_isSet) {
        obj.insert(QString("pendingTasksCount"), ::OpenAPI::toJsonValue(m_pending_tasks_count));
    }
    if (m_active_services_count_isSet) {
        obj.insert(QString("activeServicesCount"), ::OpenAPI::toJsonValue(m_active_services_count));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_capacity_providers.isSet()) {
        obj.insert(QString("capacityProviders"), ::OpenAPI::toJsonValue(m_capacity_providers));
    }
    if (m_default_capacity_provider_strategy.isSet()) {
        obj.insert(QString("defaultCapacityProviderStrategy"), ::OpenAPI::toJsonValue(m_default_capacity_provider_strategy));
    }
    if (m_attachments.isSet()) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_attachments_status_isSet) {
        obj.insert(QString("attachmentsStatus"), ::OpenAPI::toJsonValue(m_attachments_status));
    }
    if (m_service_connect_defaults.isSet()) {
        obj.insert(QString("serviceConnectDefaults"), ::OpenAPI::toJsonValue(m_service_connect_defaults));
    }
    return obj;
}

QString OAICluster::getClusterArn() const {
    return m_cluster_arn;
}
void OAICluster::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAICluster::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAICluster::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

QString OAICluster::getClusterName() const {
    return m_cluster_name;
}
void OAICluster::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAICluster::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAICluster::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

OAIUpdateClusterRequest_configuration OAICluster::getConfiguration() const {
    return m_configuration;
}
void OAICluster::setConfiguration(const OAIUpdateClusterRequest_configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAICluster::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAICluster::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAICluster::getStatus() const {
    return m_status;
}
void OAICluster::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICluster::is_status_Set() const{
    return m_status_isSet;
}

bool OAICluster::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAICluster::getRegisteredContainerInstancesCount() const {
    return m_registered_container_instances_count;
}
void OAICluster::setRegisteredContainerInstancesCount(const qint32 &registered_container_instances_count) {
    m_registered_container_instances_count = registered_container_instances_count;
    m_registered_container_instances_count_isSet = true;
}

bool OAICluster::is_registered_container_instances_count_Set() const{
    return m_registered_container_instances_count_isSet;
}

bool OAICluster::is_registered_container_instances_count_Valid() const{
    return m_registered_container_instances_count_isValid;
}

qint32 OAICluster::getRunningTasksCount() const {
    return m_running_tasks_count;
}
void OAICluster::setRunningTasksCount(const qint32 &running_tasks_count) {
    m_running_tasks_count = running_tasks_count;
    m_running_tasks_count_isSet = true;
}

bool OAICluster::is_running_tasks_count_Set() const{
    return m_running_tasks_count_isSet;
}

bool OAICluster::is_running_tasks_count_Valid() const{
    return m_running_tasks_count_isValid;
}

qint32 OAICluster::getPendingTasksCount() const {
    return m_pending_tasks_count;
}
void OAICluster::setPendingTasksCount(const qint32 &pending_tasks_count) {
    m_pending_tasks_count = pending_tasks_count;
    m_pending_tasks_count_isSet = true;
}

bool OAICluster::is_pending_tasks_count_Set() const{
    return m_pending_tasks_count_isSet;
}

bool OAICluster::is_pending_tasks_count_Valid() const{
    return m_pending_tasks_count_isValid;
}

qint32 OAICluster::getActiveServicesCount() const {
    return m_active_services_count;
}
void OAICluster::setActiveServicesCount(const qint32 &active_services_count) {
    m_active_services_count = active_services_count;
    m_active_services_count_isSet = true;
}

bool OAICluster::is_active_services_count_Set() const{
    return m_active_services_count_isSet;
}

bool OAICluster::is_active_services_count_Valid() const{
    return m_active_services_count_isValid;
}

QList OAICluster::getStatistics() const {
    return m_statistics;
}
void OAICluster::setStatistics(const QList &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAICluster::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAICluster::is_statistics_Valid() const{
    return m_statistics_isValid;
}

QList OAICluster::getTags() const {
    return m_tags;
}
void OAICluster::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICluster::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICluster::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAICluster::getSettings() const {
    return m_settings;
}
void OAICluster::setSettings(const QList &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAICluster::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAICluster::is_settings_Valid() const{
    return m_settings_isValid;
}

QList OAICluster::getCapacityProviders() const {
    return m_capacity_providers;
}
void OAICluster::setCapacityProviders(const QList &capacity_providers) {
    m_capacity_providers = capacity_providers;
    m_capacity_providers_isSet = true;
}

bool OAICluster::is_capacity_providers_Set() const{
    return m_capacity_providers_isSet;
}

bool OAICluster::is_capacity_providers_Valid() const{
    return m_capacity_providers_isValid;
}

QList OAICluster::getDefaultCapacityProviderStrategy() const {
    return m_default_capacity_provider_strategy;
}
void OAICluster::setDefaultCapacityProviderStrategy(const QList &default_capacity_provider_strategy) {
    m_default_capacity_provider_strategy = default_capacity_provider_strategy;
    m_default_capacity_provider_strategy_isSet = true;
}

bool OAICluster::is_default_capacity_provider_strategy_Set() const{
    return m_default_capacity_provider_strategy_isSet;
}

bool OAICluster::is_default_capacity_provider_strategy_Valid() const{
    return m_default_capacity_provider_strategy_isValid;
}

QList OAICluster::getAttachments() const {
    return m_attachments;
}
void OAICluster::setAttachments(const QList &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAICluster::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAICluster::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAICluster::getAttachmentsStatus() const {
    return m_attachments_status;
}
void OAICluster::setAttachmentsStatus(const QString &attachments_status) {
    m_attachments_status = attachments_status;
    m_attachments_status_isSet = true;
}

bool OAICluster::is_attachments_status_Set() const{
    return m_attachments_status_isSet;
}

bool OAICluster::is_attachments_status_Valid() const{
    return m_attachments_status_isValid;
}

OAICluster_serviceConnectDefaults OAICluster::getServiceConnectDefaults() const {
    return m_service_connect_defaults;
}
void OAICluster::setServiceConnectDefaults(const OAICluster_serviceConnectDefaults &service_connect_defaults) {
    m_service_connect_defaults = service_connect_defaults;
    m_service_connect_defaults_isSet = true;
}

bool OAICluster::is_service_connect_defaults_Set() const{
    return m_service_connect_defaults_isSet;
}

bool OAICluster::is_service_connect_defaults_Valid() const{
    return m_service_connect_defaults_isValid;
}

bool OAICluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_container_instances_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_tasks_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_tasks_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_services_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_providers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_capacity_provider_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_connect_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
