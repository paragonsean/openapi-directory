/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServiceConnectServiceResource.h
 *
 * &lt;p&gt;The Service Connect resource. Each configuration maps a discovery name to a Cloud Map service name. The data is stored in Cloud Map as part of the Service Connect configuration for each discovery name of this Amazon ECS service.&lt;/p&gt; &lt;p&gt;A task can resolve the &lt;code&gt;dnsName&lt;/code&gt; for each of the &lt;code&gt;clientAliases&lt;/code&gt; of a service. However a task can&#39;t resolve the discovery names. If you want to connect to a service, refer to the &lt;code&gt;ServiceConnectConfiguration&lt;/code&gt; of that service for the list of &lt;code&gt;clientAliases&lt;/code&gt; that you can use.&lt;/p&gt;
 */

#ifndef OAIServiceConnectServiceResource_H
#define OAIServiceConnectServiceResource_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIServiceConnectServiceResource : public OAIObject {
public:
    OAIServiceConnectServiceResource();
    OAIServiceConnectServiceResource(QString json);
    ~OAIServiceConnectServiceResource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDiscoveryName() const;
    void setDiscoveryName(const QString &discovery_name);
    bool is_discovery_name_Set() const;
    bool is_discovery_name_Valid() const;

    QString getDiscoveryArn() const;
    void setDiscoveryArn(const QString &discovery_arn);
    bool is_discovery_arn_Set() const;
    bool is_discovery_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_discovery_name;
    bool m_discovery_name_isSet;
    bool m_discovery_name_isValid;

    QString m_discovery_arn;
    bool m_discovery_arn_isSet;
    bool m_discovery_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServiceConnectServiceResource)

#endif // OAIServiceConnectServiceResource_H
