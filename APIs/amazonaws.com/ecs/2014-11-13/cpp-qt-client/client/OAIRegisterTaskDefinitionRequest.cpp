/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterTaskDefinitionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterTaskDefinitionRequest::OAIRegisterTaskDefinitionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterTaskDefinitionRequest::OAIRegisterTaskDefinitionRequest() {
    this->initializeModel();
}

OAIRegisterTaskDefinitionRequest::~OAIRegisterTaskDefinitionRequest() {}

void OAIRegisterTaskDefinitionRequest::initializeModel() {

    m_family_isSet = false;
    m_family_isValid = false;

    m_task_role_arn_isSet = false;
    m_task_role_arn_isValid = false;

    m_execution_role_arn_isSet = false;
    m_execution_role_arn_isValid = false;

    m_network_mode_isSet = false;
    m_network_mode_isValid = false;

    m_container_definitions_isSet = false;
    m_container_definitions_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_requires_compatibilities_isSet = false;
    m_requires_compatibilities_isValid = false;

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_pid_mode_isSet = false;
    m_pid_mode_isValid = false;

    m_ipc_mode_isSet = false;
    m_ipc_mode_isValid = false;

    m_proxy_configuration_isSet = false;
    m_proxy_configuration_isValid = false;

    m_inference_accelerators_isSet = false;
    m_inference_accelerators_isValid = false;

    m_ephemeral_storage_isSet = false;
    m_ephemeral_storage_isValid = false;

    m_runtime_platform_isSet = false;
    m_runtime_platform_isValid = false;
}

void OAIRegisterTaskDefinitionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterTaskDefinitionRequest::fromJsonObject(QJsonObject json) {

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_task_role_arn_isValid = ::OpenAPI::fromJsonValue(m_task_role_arn, json[QString("taskRoleArn")]);
    m_task_role_arn_isSet = !json[QString("taskRoleArn")].isNull() && m_task_role_arn_isValid;

    m_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_role_arn, json[QString("executionRoleArn")]);
    m_execution_role_arn_isSet = !json[QString("executionRoleArn")].isNull() && m_execution_role_arn_isValid;

    m_network_mode_isValid = ::OpenAPI::fromJsonValue(m_network_mode, json[QString("networkMode")]);
    m_network_mode_isSet = !json[QString("networkMode")].isNull() && m_network_mode_isValid;

    m_container_definitions_isValid = ::OpenAPI::fromJsonValue(m_container_definitions, json[QString("containerDefinitions")]);
    m_container_definitions_isSet = !json[QString("containerDefinitions")].isNull() && m_container_definitions_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("placementConstraints")]);
    m_placement_constraints_isSet = !json[QString("placementConstraints")].isNull() && m_placement_constraints_isValid;

    m_requires_compatibilities_isValid = ::OpenAPI::fromJsonValue(m_requires_compatibilities, json[QString("requiresCompatibilities")]);
    m_requires_compatibilities_isSet = !json[QString("requiresCompatibilities")].isNull() && m_requires_compatibilities_isValid;

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("cpu")]);
    m_cpu_isSet = !json[QString("cpu")].isNull() && m_cpu_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_pid_mode_isValid = ::OpenAPI::fromJsonValue(m_pid_mode, json[QString("pidMode")]);
    m_pid_mode_isSet = !json[QString("pidMode")].isNull() && m_pid_mode_isValid;

    m_ipc_mode_isValid = ::OpenAPI::fromJsonValue(m_ipc_mode, json[QString("ipcMode")]);
    m_ipc_mode_isSet = !json[QString("ipcMode")].isNull() && m_ipc_mode_isValid;

    m_proxy_configuration_isValid = ::OpenAPI::fromJsonValue(m_proxy_configuration, json[QString("proxyConfiguration")]);
    m_proxy_configuration_isSet = !json[QString("proxyConfiguration")].isNull() && m_proxy_configuration_isValid;

    m_inference_accelerators_isValid = ::OpenAPI::fromJsonValue(m_inference_accelerators, json[QString("inferenceAccelerators")]);
    m_inference_accelerators_isSet = !json[QString("inferenceAccelerators")].isNull() && m_inference_accelerators_isValid;

    m_ephemeral_storage_isValid = ::OpenAPI::fromJsonValue(m_ephemeral_storage, json[QString("ephemeralStorage")]);
    m_ephemeral_storage_isSet = !json[QString("ephemeralStorage")].isNull() && m_ephemeral_storage_isValid;

    m_runtime_platform_isValid = ::OpenAPI::fromJsonValue(m_runtime_platform, json[QString("runtimePlatform")]);
    m_runtime_platform_isSet = !json[QString("runtimePlatform")].isNull() && m_runtime_platform_isValid;
}

QString OAIRegisterTaskDefinitionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterTaskDefinitionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_task_role_arn_isSet) {
        obj.insert(QString("taskRoleArn"), ::OpenAPI::toJsonValue(m_task_role_arn));
    }
    if (m_execution_role_arn_isSet) {
        obj.insert(QString("executionRoleArn"), ::OpenAPI::toJsonValue(m_execution_role_arn));
    }
    if (m_network_mode.isSet()) {
        obj.insert(QString("networkMode"), ::OpenAPI::toJsonValue(m_network_mode));
    }
    if (m_container_definitions.isSet()) {
        obj.insert(QString("containerDefinitions"), ::OpenAPI::toJsonValue(m_container_definitions));
    }
    if (m_volumes.isSet()) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    if (m_placement_constraints.isSet()) {
        obj.insert(QString("placementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_requires_compatibilities.isSet()) {
        obj.insert(QString("requiresCompatibilities"), ::OpenAPI::toJsonValue(m_requires_compatibilities));
    }
    if (m_cpu_isSet) {
        obj.insert(QString("cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_pid_mode.isSet()) {
        obj.insert(QString("pidMode"), ::OpenAPI::toJsonValue(m_pid_mode));
    }
    if (m_ipc_mode.isSet()) {
        obj.insert(QString("ipcMode"), ::OpenAPI::toJsonValue(m_ipc_mode));
    }
    if (m_proxy_configuration.isSet()) {
        obj.insert(QString("proxyConfiguration"), ::OpenAPI::toJsonValue(m_proxy_configuration));
    }
    if (m_inference_accelerators.isSet()) {
        obj.insert(QString("inferenceAccelerators"), ::OpenAPI::toJsonValue(m_inference_accelerators));
    }
    if (m_ephemeral_storage.isSet()) {
        obj.insert(QString("ephemeralStorage"), ::OpenAPI::toJsonValue(m_ephemeral_storage));
    }
    if (m_runtime_platform.isSet()) {
        obj.insert(QString("runtimePlatform"), ::OpenAPI::toJsonValue(m_runtime_platform));
    }
    return obj;
}

QString OAIRegisterTaskDefinitionRequest::getFamily() const {
    return m_family;
}
void OAIRegisterTaskDefinitionRequest::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_family_Set() const{
    return m_family_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIRegisterTaskDefinitionRequest::getTaskRoleArn() const {
    return m_task_role_arn;
}
void OAIRegisterTaskDefinitionRequest::setTaskRoleArn(const QString &task_role_arn) {
    m_task_role_arn = task_role_arn;
    m_task_role_arn_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_task_role_arn_Set() const{
    return m_task_role_arn_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_task_role_arn_Valid() const{
    return m_task_role_arn_isValid;
}

QString OAIRegisterTaskDefinitionRequest::getExecutionRoleArn() const {
    return m_execution_role_arn;
}
void OAIRegisterTaskDefinitionRequest::setExecutionRoleArn(const QString &execution_role_arn) {
    m_execution_role_arn = execution_role_arn;
    m_execution_role_arn_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_execution_role_arn_Set() const{
    return m_execution_role_arn_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_execution_role_arn_Valid() const{
    return m_execution_role_arn_isValid;
}

OAINetworkMode OAIRegisterTaskDefinitionRequest::getNetworkMode() const {
    return m_network_mode;
}
void OAIRegisterTaskDefinitionRequest::setNetworkMode(const OAINetworkMode &network_mode) {
    m_network_mode = network_mode;
    m_network_mode_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_network_mode_Set() const{
    return m_network_mode_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_network_mode_Valid() const{
    return m_network_mode_isValid;
}

QList OAIRegisterTaskDefinitionRequest::getContainerDefinitions() const {
    return m_container_definitions;
}
void OAIRegisterTaskDefinitionRequest::setContainerDefinitions(const QList &container_definitions) {
    m_container_definitions = container_definitions;
    m_container_definitions_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_container_definitions_Set() const{
    return m_container_definitions_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_container_definitions_Valid() const{
    return m_container_definitions_isValid;
}

QList OAIRegisterTaskDefinitionRequest::getVolumes() const {
    return m_volumes;
}
void OAIRegisterTaskDefinitionRequest::setVolumes(const QList &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_volumes_Valid() const{
    return m_volumes_isValid;
}

QList OAIRegisterTaskDefinitionRequest::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAIRegisterTaskDefinitionRequest::setPlacementConstraints(const QList &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList OAIRegisterTaskDefinitionRequest::getRequiresCompatibilities() const {
    return m_requires_compatibilities;
}
void OAIRegisterTaskDefinitionRequest::setRequiresCompatibilities(const QList &requires_compatibilities) {
    m_requires_compatibilities = requires_compatibilities;
    m_requires_compatibilities_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_requires_compatibilities_Set() const{
    return m_requires_compatibilities_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_requires_compatibilities_Valid() const{
    return m_requires_compatibilities_isValid;
}

QString OAIRegisterTaskDefinitionRequest::getCpu() const {
    return m_cpu;
}
void OAIRegisterTaskDefinitionRequest::setCpu(const QString &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_cpu_Valid() const{
    return m_cpu_isValid;
}

QString OAIRegisterTaskDefinitionRequest::getMemory() const {
    return m_memory;
}
void OAIRegisterTaskDefinitionRequest::setMemory(const QString &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_memory_Valid() const{
    return m_memory_isValid;
}

QList OAIRegisterTaskDefinitionRequest::getTags() const {
    return m_tags;
}
void OAIRegisterTaskDefinitionRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIPidMode OAIRegisterTaskDefinitionRequest::getPidMode() const {
    return m_pid_mode;
}
void OAIRegisterTaskDefinitionRequest::setPidMode(const OAIPidMode &pid_mode) {
    m_pid_mode = pid_mode;
    m_pid_mode_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_pid_mode_Set() const{
    return m_pid_mode_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_pid_mode_Valid() const{
    return m_pid_mode_isValid;
}

OAIIpcMode OAIRegisterTaskDefinitionRequest::getIpcMode() const {
    return m_ipc_mode;
}
void OAIRegisterTaskDefinitionRequest::setIpcMode(const OAIIpcMode &ipc_mode) {
    m_ipc_mode = ipc_mode;
    m_ipc_mode_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_ipc_mode_Set() const{
    return m_ipc_mode_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_ipc_mode_Valid() const{
    return m_ipc_mode_isValid;
}

OAIRegisterTaskDefinitionRequest_proxyConfiguration OAIRegisterTaskDefinitionRequest::getProxyConfiguration() const {
    return m_proxy_configuration;
}
void OAIRegisterTaskDefinitionRequest::setProxyConfiguration(const OAIRegisterTaskDefinitionRequest_proxyConfiguration &proxy_configuration) {
    m_proxy_configuration = proxy_configuration;
    m_proxy_configuration_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_proxy_configuration_Set() const{
    return m_proxy_configuration_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_proxy_configuration_Valid() const{
    return m_proxy_configuration_isValid;
}

QList OAIRegisterTaskDefinitionRequest::getInferenceAccelerators() const {
    return m_inference_accelerators;
}
void OAIRegisterTaskDefinitionRequest::setInferenceAccelerators(const QList &inference_accelerators) {
    m_inference_accelerators = inference_accelerators;
    m_inference_accelerators_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_inference_accelerators_Set() const{
    return m_inference_accelerators_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_inference_accelerators_Valid() const{
    return m_inference_accelerators_isValid;
}

OAIRegisterTaskDefinitionRequest_ephemeralStorage OAIRegisterTaskDefinitionRequest::getEphemeralStorage() const {
    return m_ephemeral_storage;
}
void OAIRegisterTaskDefinitionRequest::setEphemeralStorage(const OAIRegisterTaskDefinitionRequest_ephemeralStorage &ephemeral_storage) {
    m_ephemeral_storage = ephemeral_storage;
    m_ephemeral_storage_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_ephemeral_storage_Set() const{
    return m_ephemeral_storage_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_ephemeral_storage_Valid() const{
    return m_ephemeral_storage_isValid;
}

OAIRegisterTaskDefinitionRequest_runtimePlatform OAIRegisterTaskDefinitionRequest::getRuntimePlatform() const {
    return m_runtime_platform;
}
void OAIRegisterTaskDefinitionRequest::setRuntimePlatform(const OAIRegisterTaskDefinitionRequest_runtimePlatform &runtime_platform) {
    m_runtime_platform = runtime_platform;
    m_runtime_platform_isSet = true;
}

bool OAIRegisterTaskDefinitionRequest::is_runtime_platform_Set() const{
    return m_runtime_platform_isSet;
}

bool OAIRegisterTaskDefinitionRequest::is_runtime_platform_Valid() const{
    return m_runtime_platform_isValid;
}

bool OAIRegisterTaskDefinitionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_compatibilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipc_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_accelerators.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ephemeral_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterTaskDefinitionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_family_isValid && m_container_definitions_isValid && true;
}

} // namespace OpenAPI
