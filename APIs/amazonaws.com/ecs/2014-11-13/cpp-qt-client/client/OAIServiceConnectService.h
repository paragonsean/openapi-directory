/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServiceConnectService.h
 *
 * The Service Connect service object configuration. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html\&quot;&gt;Service Connect&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.
 */

#ifndef OAIServiceConnectService_H
#define OAIServiceConnectService_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIServiceConnectService : public OAIObject {
public:
    OAIServiceConnectService();
    OAIServiceConnectService(QString json);
    ~OAIServiceConnectService() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPortName() const;
    void setPortName(const QString &port_name);
    bool is_port_name_Set() const;
    bool is_port_name_Valid() const;

    QString getDiscoveryName() const;
    void setDiscoveryName(const QString &discovery_name);
    bool is_discovery_name_Set() const;
    bool is_discovery_name_Valid() const;

    QList getClientAliases() const;
    void setClientAliases(const QList &client_aliases);
    bool is_client_aliases_Set() const;
    bool is_client_aliases_Valid() const;

    qint32 getIngressPortOverride() const;
    void setIngressPortOverride(const qint32 &ingress_port_override);
    bool is_ingress_port_override_Set() const;
    bool is_ingress_port_override_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_port_name;
    bool m_port_name_isSet;
    bool m_port_name_isValid;

    QString m_discovery_name;
    bool m_discovery_name_isSet;
    bool m_discovery_name_isValid;

    QList m_client_aliases;
    bool m_client_aliases_isSet;
    bool m_client_aliases_isValid;

    qint32 m_ingress_port_override;
    bool m_ingress_port_override_isSet;
    bool m_ingress_port_override_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServiceConnectService)

#endif // OAIServiceConnectService_H
