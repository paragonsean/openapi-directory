/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapacityProvider_autoScalingGroupProvider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapacityProvider_autoScalingGroupProvider::OAICapacityProvider_autoScalingGroupProvider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapacityProvider_autoScalingGroupProvider::OAICapacityProvider_autoScalingGroupProvider() {
    this->initializeModel();
}

OAICapacityProvider_autoScalingGroupProvider::~OAICapacityProvider_autoScalingGroupProvider() {}

void OAICapacityProvider_autoScalingGroupProvider::initializeModel() {

    m_auto_scaling_group_arn_isSet = false;
    m_auto_scaling_group_arn_isValid = false;

    m_managed_scaling_isSet = false;
    m_managed_scaling_isValid = false;

    m_managed_termination_protection_isSet = false;
    m_managed_termination_protection_isValid = false;
}

void OAICapacityProvider_autoScalingGroupProvider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapacityProvider_autoScalingGroupProvider::fromJsonObject(QJsonObject json) {

    m_auto_scaling_group_arn_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_arn, json[QString("autoScalingGroupArn")]);
    m_auto_scaling_group_arn_isSet = !json[QString("autoScalingGroupArn")].isNull() && m_auto_scaling_group_arn_isValid;

    m_managed_scaling_isValid = ::OpenAPI::fromJsonValue(m_managed_scaling, json[QString("managedScaling")]);
    m_managed_scaling_isSet = !json[QString("managedScaling")].isNull() && m_managed_scaling_isValid;

    m_managed_termination_protection_isValid = ::OpenAPI::fromJsonValue(m_managed_termination_protection, json[QString("managedTerminationProtection")]);
    m_managed_termination_protection_isSet = !json[QString("managedTerminationProtection")].isNull() && m_managed_termination_protection_isValid;
}

QString OAICapacityProvider_autoScalingGroupProvider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapacityProvider_autoScalingGroupProvider::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_scaling_group_arn_isSet) {
        obj.insert(QString("autoScalingGroupArn"), ::OpenAPI::toJsonValue(m_auto_scaling_group_arn));
    }
    if (m_managed_scaling.isSet()) {
        obj.insert(QString("managedScaling"), ::OpenAPI::toJsonValue(m_managed_scaling));
    }
    if (m_managed_termination_protection.isSet()) {
        obj.insert(QString("managedTerminationProtection"), ::OpenAPI::toJsonValue(m_managed_termination_protection));
    }
    return obj;
}

QString OAICapacityProvider_autoScalingGroupProvider::getAutoScalingGroupArn() const {
    return m_auto_scaling_group_arn;
}
void OAICapacityProvider_autoScalingGroupProvider::setAutoScalingGroupArn(const QString &auto_scaling_group_arn) {
    m_auto_scaling_group_arn = auto_scaling_group_arn;
    m_auto_scaling_group_arn_isSet = true;
}

bool OAICapacityProvider_autoScalingGroupProvider::is_auto_scaling_group_arn_Set() const{
    return m_auto_scaling_group_arn_isSet;
}

bool OAICapacityProvider_autoScalingGroupProvider::is_auto_scaling_group_arn_Valid() const{
    return m_auto_scaling_group_arn_isValid;
}

OAIAutoScalingGroupProvider_managedScaling OAICapacityProvider_autoScalingGroupProvider::getManagedScaling() const {
    return m_managed_scaling;
}
void OAICapacityProvider_autoScalingGroupProvider::setManagedScaling(const OAIAutoScalingGroupProvider_managedScaling &managed_scaling) {
    m_managed_scaling = managed_scaling;
    m_managed_scaling_isSet = true;
}

bool OAICapacityProvider_autoScalingGroupProvider::is_managed_scaling_Set() const{
    return m_managed_scaling_isSet;
}

bool OAICapacityProvider_autoScalingGroupProvider::is_managed_scaling_Valid() const{
    return m_managed_scaling_isValid;
}

OAIManagedTerminationProtection OAICapacityProvider_autoScalingGroupProvider::getManagedTerminationProtection() const {
    return m_managed_termination_protection;
}
void OAICapacityProvider_autoScalingGroupProvider::setManagedTerminationProtection(const OAIManagedTerminationProtection &managed_termination_protection) {
    m_managed_termination_protection = managed_termination_protection;
    m_managed_termination_protection_isSet = true;
}

bool OAICapacityProvider_autoScalingGroupProvider::is_managed_termination_protection_Set() const{
    return m_managed_termination_protection_isSet;
}

bool OAICapacityProvider_autoScalingGroupProvider::is_managed_termination_protection_Valid() const{
    return m_managed_termination_protection_isValid;
}

bool OAICapacityProvider_autoScalingGroupProvider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_scaling_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_scaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_termination_protection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapacityProvider_autoScalingGroupProvider::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_scaling_group_arn_isValid && true;
}

} // namespace OpenAPI
