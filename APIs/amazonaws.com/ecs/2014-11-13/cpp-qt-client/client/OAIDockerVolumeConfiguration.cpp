/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDockerVolumeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDockerVolumeConfiguration::OAIDockerVolumeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDockerVolumeConfiguration::OAIDockerVolumeConfiguration() {
    this->initializeModel();
}

OAIDockerVolumeConfiguration::~OAIDockerVolumeConfiguration() {}

void OAIDockerVolumeConfiguration::initializeModel() {

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_autoprovision_isSet = false;
    m_autoprovision_isValid = false;

    m_driver_isSet = false;
    m_driver_isValid = false;

    m_driver_opts_isSet = false;
    m_driver_opts_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;
}

void OAIDockerVolumeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDockerVolumeConfiguration::fromJsonObject(QJsonObject json) {

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_autoprovision_isValid = ::OpenAPI::fromJsonValue(m_autoprovision, json[QString("autoprovision")]);
    m_autoprovision_isSet = !json[QString("autoprovision")].isNull() && m_autoprovision_isValid;

    m_driver_isValid = ::OpenAPI::fromJsonValue(m_driver, json[QString("driver")]);
    m_driver_isSet = !json[QString("driver")].isNull() && m_driver_isValid;

    m_driver_opts_isValid = ::OpenAPI::fromJsonValue(m_driver_opts, json[QString("driverOpts")]);
    m_driver_opts_isSet = !json[QString("driverOpts")].isNull() && m_driver_opts_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;
}

QString OAIDockerVolumeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDockerVolumeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_autoprovision_isSet) {
        obj.insert(QString("autoprovision"), ::OpenAPI::toJsonValue(m_autoprovision));
    }
    if (m_driver_isSet) {
        obj.insert(QString("driver"), ::OpenAPI::toJsonValue(m_driver));
    }
    if (m_driver_opts.isSet()) {
        obj.insert(QString("driverOpts"), ::OpenAPI::toJsonValue(m_driver_opts));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    return obj;
}

OAIScope OAIDockerVolumeConfiguration::getScope() const {
    return m_scope;
}
void OAIDockerVolumeConfiguration::setScope(const OAIScope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIDockerVolumeConfiguration::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIDockerVolumeConfiguration::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIDockerVolumeConfiguration::getAutoprovision() const {
    return m_autoprovision;
}
void OAIDockerVolumeConfiguration::setAutoprovision(const bool &autoprovision) {
    m_autoprovision = autoprovision;
    m_autoprovision_isSet = true;
}

bool OAIDockerVolumeConfiguration::is_autoprovision_Set() const{
    return m_autoprovision_isSet;
}

bool OAIDockerVolumeConfiguration::is_autoprovision_Valid() const{
    return m_autoprovision_isValid;
}

QString OAIDockerVolumeConfiguration::getDriver() const {
    return m_driver;
}
void OAIDockerVolumeConfiguration::setDriver(const QString &driver) {
    m_driver = driver;
    m_driver_isSet = true;
}

bool OAIDockerVolumeConfiguration::is_driver_Set() const{
    return m_driver_isSet;
}

bool OAIDockerVolumeConfiguration::is_driver_Valid() const{
    return m_driver_isValid;
}

QMap OAIDockerVolumeConfiguration::getDriverOpts() const {
    return m_driver_opts;
}
void OAIDockerVolumeConfiguration::setDriverOpts(const QMap &driver_opts) {
    m_driver_opts = driver_opts;
    m_driver_opts_isSet = true;
}

bool OAIDockerVolumeConfiguration::is_driver_opts_Set() const{
    return m_driver_opts_isSet;
}

bool OAIDockerVolumeConfiguration::is_driver_opts_Valid() const{
    return m_driver_opts_isValid;
}

QMap OAIDockerVolumeConfiguration::getLabels() const {
    return m_labels;
}
void OAIDockerVolumeConfiguration::setLabels(const QMap &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIDockerVolumeConfiguration::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIDockerVolumeConfiguration::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAIDockerVolumeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_autoprovision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_opts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDockerVolumeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
