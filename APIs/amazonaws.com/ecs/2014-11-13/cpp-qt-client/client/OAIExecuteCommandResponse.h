/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExecuteCommandResponse.h
 *
 * 
 */

#ifndef OAIExecuteCommandResponse_H
#define OAIExecuteCommandResponse_H

#include <QJsonObject>

#include "OAIExecuteCommandResponse_session.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExecuteCommandResponse_session;

class OAIExecuteCommandResponse : public OAIObject {
public:
    OAIExecuteCommandResponse();
    OAIExecuteCommandResponse(QString json);
    ~OAIExecuteCommandResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClusterArn() const;
    void setClusterArn(const QString &cluster_arn);
    bool is_cluster_arn_Set() const;
    bool is_cluster_arn_Valid() const;

    QString getContainerArn() const;
    void setContainerArn(const QString &container_arn);
    bool is_container_arn_Set() const;
    bool is_container_arn_Valid() const;

    QString getContainerName() const;
    void setContainerName(const QString &container_name);
    bool is_container_name_Set() const;
    bool is_container_name_Valid() const;

    bool getInteractive() const;
    void setInteractive(const bool &interactive);
    bool is_interactive_Set() const;
    bool is_interactive_Valid() const;

    OAIExecuteCommandResponse_session getSession() const;
    void setSession(const OAIExecuteCommandResponse_session &session);
    bool is_session_Set() const;
    bool is_session_Valid() const;

    QString getTaskArn() const;
    void setTaskArn(const QString &task_arn);
    bool is_task_arn_Set() const;
    bool is_task_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster_arn;
    bool m_cluster_arn_isSet;
    bool m_cluster_arn_isValid;

    QString m_container_arn;
    bool m_container_arn_isSet;
    bool m_container_arn_isValid;

    QString m_container_name;
    bool m_container_name_isSet;
    bool m_container_name_isValid;

    bool m_interactive;
    bool m_interactive_isSet;
    bool m_interactive_isValid;

    OAIExecuteCommandResponse_session m_session;
    bool m_session_isSet;
    bool m_session_isValid;

    QString m_task_arn;
    bool m_task_arn_isSet;
    bool m_task_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExecuteCommandResponse)

#endif // OAIExecuteCommandResponse_H
