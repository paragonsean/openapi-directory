/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstanceHealthCheckResult.h
 *
 * An object representing the result of a container instance health status check.
 */

#ifndef OAIInstanceHealthCheckResult_H
#define OAIInstanceHealthCheckResult_H

#include <QJsonObject>

#include "OAIInstanceHealthCheckState.h"
#include "OAIInstanceHealthCheckType.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInstanceHealthCheckResult : public OAIObject {
public:
    OAIInstanceHealthCheckResult();
    OAIInstanceHealthCheckResult(QString json);
    ~OAIInstanceHealthCheckResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIInstanceHealthCheckType getType() const;
    void setType(const OAIInstanceHealthCheckType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIInstanceHealthCheckState getStatus() const;
    void setStatus(const OAIInstanceHealthCheckState &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getLastUpdated() const;
    void setLastUpdated(const QDateTime &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    QDateTime getLastStatusChange() const;
    void setLastStatusChange(const QDateTime &last_status_change);
    bool is_last_status_change_Set() const;
    bool is_last_status_change_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIInstanceHealthCheckType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIInstanceHealthCheckState m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    QDateTime m_last_status_change;
    bool m_last_status_change_isSet;
    bool m_last_status_change_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstanceHealthCheckResult)

#endif // OAIInstanceHealthCheckResult_H
