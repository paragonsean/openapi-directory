/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubmitTaskStateChangeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubmitTaskStateChangeRequest::OAISubmitTaskStateChangeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubmitTaskStateChangeRequest::OAISubmitTaskStateChangeRequest() {
    this->initializeModel();
}

OAISubmitTaskStateChangeRequest::~OAISubmitTaskStateChangeRequest() {}

void OAISubmitTaskStateChangeRequest::initializeModel() {

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_task_isSet = false;
    m_task_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_managed_agents_isSet = false;
    m_managed_agents_isValid = false;

    m_pull_started_at_isSet = false;
    m_pull_started_at_isValid = false;

    m_pull_stopped_at_isSet = false;
    m_pull_stopped_at_isValid = false;

    m_execution_stopped_at_isSet = false;
    m_execution_stopped_at_isValid = false;
}

void OAISubmitTaskStateChangeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubmitTaskStateChangeRequest::fromJsonObject(QJsonObject json) {

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_task_isValid = ::OpenAPI::fromJsonValue(m_task, json[QString("task")]);
    m_task_isSet = !json[QString("task")].isNull() && m_task_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("containers")]);
    m_containers_isSet = !json[QString("containers")].isNull() && m_containers_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_managed_agents_isValid = ::OpenAPI::fromJsonValue(m_managed_agents, json[QString("managedAgents")]);
    m_managed_agents_isSet = !json[QString("managedAgents")].isNull() && m_managed_agents_isValid;

    m_pull_started_at_isValid = ::OpenAPI::fromJsonValue(m_pull_started_at, json[QString("pullStartedAt")]);
    m_pull_started_at_isSet = !json[QString("pullStartedAt")].isNull() && m_pull_started_at_isValid;

    m_pull_stopped_at_isValid = ::OpenAPI::fromJsonValue(m_pull_stopped_at, json[QString("pullStoppedAt")]);
    m_pull_stopped_at_isSet = !json[QString("pullStoppedAt")].isNull() && m_pull_stopped_at_isValid;

    m_execution_stopped_at_isValid = ::OpenAPI::fromJsonValue(m_execution_stopped_at, json[QString("executionStoppedAt")]);
    m_execution_stopped_at_isSet = !json[QString("executionStoppedAt")].isNull() && m_execution_stopped_at_isValid;
}

QString OAISubmitTaskStateChangeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubmitTaskStateChangeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_task_isSet) {
        obj.insert(QString("task"), ::OpenAPI::toJsonValue(m_task));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_containers.isSet()) {
        obj.insert(QString("containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_attachments.isSet()) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_managed_agents.isSet()) {
        obj.insert(QString("managedAgents"), ::OpenAPI::toJsonValue(m_managed_agents));
    }
    if (m_pull_started_at_isSet) {
        obj.insert(QString("pullStartedAt"), ::OpenAPI::toJsonValue(m_pull_started_at));
    }
    if (m_pull_stopped_at_isSet) {
        obj.insert(QString("pullStoppedAt"), ::OpenAPI::toJsonValue(m_pull_stopped_at));
    }
    if (m_execution_stopped_at_isSet) {
        obj.insert(QString("executionStoppedAt"), ::OpenAPI::toJsonValue(m_execution_stopped_at));
    }
    return obj;
}

QString OAISubmitTaskStateChangeRequest::getCluster() const {
    return m_cluster;
}
void OAISubmitTaskStateChangeRequest::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAISubmitTaskStateChangeRequest::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAISubmitTaskStateChangeRequest::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAISubmitTaskStateChangeRequest::getTask() const {
    return m_task;
}
void OAISubmitTaskStateChangeRequest::setTask(const QString &task) {
    m_task = task;
    m_task_isSet = true;
}

bool OAISubmitTaskStateChangeRequest::is_task_Set() const{
    return m_task_isSet;
}

bool OAISubmitTaskStateChangeRequest::is_task_Valid() const{
    return m_task_isValid;
}

QString OAISubmitTaskStateChangeRequest::getStatus() const {
    return m_status;
}
void OAISubmitTaskStateChangeRequest::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubmitTaskStateChangeRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubmitTaskStateChangeRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISubmitTaskStateChangeRequest::getReason() const {
    return m_reason;
}
void OAISubmitTaskStateChangeRequest::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAISubmitTaskStateChangeRequest::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAISubmitTaskStateChangeRequest::is_reason_Valid() const{
    return m_reason_isValid;
}

QList OAISubmitTaskStateChangeRequest::getContainers() const {
    return m_containers;
}
void OAISubmitTaskStateChangeRequest::setContainers(const QList &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAISubmitTaskStateChangeRequest::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAISubmitTaskStateChangeRequest::is_containers_Valid() const{
    return m_containers_isValid;
}

QList OAISubmitTaskStateChangeRequest::getAttachments() const {
    return m_attachments;
}
void OAISubmitTaskStateChangeRequest::setAttachments(const QList &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAISubmitTaskStateChangeRequest::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAISubmitTaskStateChangeRequest::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QList OAISubmitTaskStateChangeRequest::getManagedAgents() const {
    return m_managed_agents;
}
void OAISubmitTaskStateChangeRequest::setManagedAgents(const QList &managed_agents) {
    m_managed_agents = managed_agents;
    m_managed_agents_isSet = true;
}

bool OAISubmitTaskStateChangeRequest::is_managed_agents_Set() const{
    return m_managed_agents_isSet;
}

bool OAISubmitTaskStateChangeRequest::is_managed_agents_Valid() const{
    return m_managed_agents_isValid;
}

QDateTime OAISubmitTaskStateChangeRequest::getPullStartedAt() const {
    return m_pull_started_at;
}
void OAISubmitTaskStateChangeRequest::setPullStartedAt(const QDateTime &pull_started_at) {
    m_pull_started_at = pull_started_at;
    m_pull_started_at_isSet = true;
}

bool OAISubmitTaskStateChangeRequest::is_pull_started_at_Set() const{
    return m_pull_started_at_isSet;
}

bool OAISubmitTaskStateChangeRequest::is_pull_started_at_Valid() const{
    return m_pull_started_at_isValid;
}

QDateTime OAISubmitTaskStateChangeRequest::getPullStoppedAt() const {
    return m_pull_stopped_at;
}
void OAISubmitTaskStateChangeRequest::setPullStoppedAt(const QDateTime &pull_stopped_at) {
    m_pull_stopped_at = pull_stopped_at;
    m_pull_stopped_at_isSet = true;
}

bool OAISubmitTaskStateChangeRequest::is_pull_stopped_at_Set() const{
    return m_pull_stopped_at_isSet;
}

bool OAISubmitTaskStateChangeRequest::is_pull_stopped_at_Valid() const{
    return m_pull_stopped_at_isValid;
}

QDateTime OAISubmitTaskStateChangeRequest::getExecutionStoppedAt() const {
    return m_execution_stopped_at;
}
void OAISubmitTaskStateChangeRequest::setExecutionStoppedAt(const QDateTime &execution_stopped_at) {
    m_execution_stopped_at = execution_stopped_at;
    m_execution_stopped_at_isSet = true;
}

bool OAISubmitTaskStateChangeRequest::is_execution_stopped_at_Set() const{
    return m_execution_stopped_at_isSet;
}

bool OAISubmitTaskStateChangeRequest::is_execution_stopped_at_Valid() const{
    return m_execution_stopped_at_isValid;
}

bool OAISubmitTaskStateChangeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_containers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_agents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_stopped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_stopped_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubmitTaskStateChangeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
