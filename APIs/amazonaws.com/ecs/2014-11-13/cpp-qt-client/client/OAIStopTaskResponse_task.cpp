/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStopTaskResponse_task.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStopTaskResponse_task::OAIStopTaskResponse_task(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStopTaskResponse_task::OAIStopTaskResponse_task() {
    this->initializeModel();
}

OAIStopTaskResponse_task::~OAIStopTaskResponse_task() {}

void OAIStopTaskResponse_task::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_capacity_provider_name_isSet = false;
    m_capacity_provider_name_isValid = false;

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_connectivity_isSet = false;
    m_connectivity_isValid = false;

    m_connectivity_at_isSet = false;
    m_connectivity_at_isValid = false;

    m_container_instance_arn_isSet = false;
    m_container_instance_arn_isValid = false;

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_desired_status_isSet = false;
    m_desired_status_isValid = false;

    m_enable_execute_command_isSet = false;
    m_enable_execute_command_isValid = false;

    m_execution_stopped_at_isSet = false;
    m_execution_stopped_at_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_inference_accelerators_isSet = false;
    m_inference_accelerators_isValid = false;

    m_last_status_isSet = false;
    m_last_status_isValid = false;

    m_launch_type_isSet = false;
    m_launch_type_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_platform_family_isSet = false;
    m_platform_family_isValid = false;

    m_pull_started_at_isSet = false;
    m_pull_started_at_isValid = false;

    m_pull_stopped_at_isSet = false;
    m_pull_stopped_at_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_started_by_isSet = false;
    m_started_by_isValid = false;

    m_stop_code_isSet = false;
    m_stop_code_isValid = false;

    m_stopped_at_isSet = false;
    m_stopped_at_isValid = false;

    m_stopped_reason_isSet = false;
    m_stopped_reason_isValid = false;

    m_stopping_at_isSet = false;
    m_stopping_at_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_task_arn_isSet = false;
    m_task_arn_isValid = false;

    m_task_definition_arn_isSet = false;
    m_task_definition_arn_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_ephemeral_storage_isSet = false;
    m_ephemeral_storage_isValid = false;
}

void OAIStopTaskResponse_task::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStopTaskResponse_task::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("availabilityZone")]);
    m_availability_zone_isSet = !json[QString("availabilityZone")].isNull() && m_availability_zone_isValid;

    m_capacity_provider_name_isValid = ::OpenAPI::fromJsonValue(m_capacity_provider_name, json[QString("capacityProviderName")]);
    m_capacity_provider_name_isSet = !json[QString("capacityProviderName")].isNull() && m_capacity_provider_name_isValid;

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("clusterArn")]);
    m_cluster_arn_isSet = !json[QString("clusterArn")].isNull() && m_cluster_arn_isValid;

    m_connectivity_isValid = ::OpenAPI::fromJsonValue(m_connectivity, json[QString("connectivity")]);
    m_connectivity_isSet = !json[QString("connectivity")].isNull() && m_connectivity_isValid;

    m_connectivity_at_isValid = ::OpenAPI::fromJsonValue(m_connectivity_at, json[QString("connectivityAt")]);
    m_connectivity_at_isSet = !json[QString("connectivityAt")].isNull() && m_connectivity_at_isValid;

    m_container_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_container_instance_arn, json[QString("containerInstanceArn")]);
    m_container_instance_arn_isSet = !json[QString("containerInstanceArn")].isNull() && m_container_instance_arn_isValid;

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("containers")]);
    m_containers_isSet = !json[QString("containers")].isNull() && m_containers_isValid;

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("cpu")]);
    m_cpu_isSet = !json[QString("cpu")].isNull() && m_cpu_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_desired_status_isValid = ::OpenAPI::fromJsonValue(m_desired_status, json[QString("desiredStatus")]);
    m_desired_status_isSet = !json[QString("desiredStatus")].isNull() && m_desired_status_isValid;

    m_enable_execute_command_isValid = ::OpenAPI::fromJsonValue(m_enable_execute_command, json[QString("enableExecuteCommand")]);
    m_enable_execute_command_isSet = !json[QString("enableExecuteCommand")].isNull() && m_enable_execute_command_isValid;

    m_execution_stopped_at_isValid = ::OpenAPI::fromJsonValue(m_execution_stopped_at, json[QString("executionStoppedAt")]);
    m_execution_stopped_at_isSet = !json[QString("executionStoppedAt")].isNull() && m_execution_stopped_at_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;

    m_inference_accelerators_isValid = ::OpenAPI::fromJsonValue(m_inference_accelerators, json[QString("inferenceAccelerators")]);
    m_inference_accelerators_isSet = !json[QString("inferenceAccelerators")].isNull() && m_inference_accelerators_isValid;

    m_last_status_isValid = ::OpenAPI::fromJsonValue(m_last_status, json[QString("lastStatus")]);
    m_last_status_isSet = !json[QString("lastStatus")].isNull() && m_last_status_isValid;

    m_launch_type_isValid = ::OpenAPI::fromJsonValue(m_launch_type, json[QString("launchType")]);
    m_launch_type_isSet = !json[QString("launchType")].isNull() && m_launch_type_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("platformVersion")]);
    m_platform_version_isSet = !json[QString("platformVersion")].isNull() && m_platform_version_isValid;

    m_platform_family_isValid = ::OpenAPI::fromJsonValue(m_platform_family, json[QString("platformFamily")]);
    m_platform_family_isSet = !json[QString("platformFamily")].isNull() && m_platform_family_isValid;

    m_pull_started_at_isValid = ::OpenAPI::fromJsonValue(m_pull_started_at, json[QString("pullStartedAt")]);
    m_pull_started_at_isSet = !json[QString("pullStartedAt")].isNull() && m_pull_started_at_isValid;

    m_pull_stopped_at_isValid = ::OpenAPI::fromJsonValue(m_pull_stopped_at, json[QString("pullStoppedAt")]);
    m_pull_stopped_at_isSet = !json[QString("pullStoppedAt")].isNull() && m_pull_stopped_at_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_started_by_isValid = ::OpenAPI::fromJsonValue(m_started_by, json[QString("startedBy")]);
    m_started_by_isSet = !json[QString("startedBy")].isNull() && m_started_by_isValid;

    m_stop_code_isValid = ::OpenAPI::fromJsonValue(m_stop_code, json[QString("stopCode")]);
    m_stop_code_isSet = !json[QString("stopCode")].isNull() && m_stop_code_isValid;

    m_stopped_at_isValid = ::OpenAPI::fromJsonValue(m_stopped_at, json[QString("stoppedAt")]);
    m_stopped_at_isSet = !json[QString("stoppedAt")].isNull() && m_stopped_at_isValid;

    m_stopped_reason_isValid = ::OpenAPI::fromJsonValue(m_stopped_reason, json[QString("stoppedReason")]);
    m_stopped_reason_isSet = !json[QString("stoppedReason")].isNull() && m_stopped_reason_isValid;

    m_stopping_at_isValid = ::OpenAPI::fromJsonValue(m_stopping_at, json[QString("stoppingAt")]);
    m_stopping_at_isSet = !json[QString("stoppingAt")].isNull() && m_stopping_at_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_task_arn_isValid = ::OpenAPI::fromJsonValue(m_task_arn, json[QString("taskArn")]);
    m_task_arn_isSet = !json[QString("taskArn")].isNull() && m_task_arn_isValid;

    m_task_definition_arn_isValid = ::OpenAPI::fromJsonValue(m_task_definition_arn, json[QString("taskDefinitionArn")]);
    m_task_definition_arn_isSet = !json[QString("taskDefinitionArn")].isNull() && m_task_definition_arn_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_ephemeral_storage_isValid = ::OpenAPI::fromJsonValue(m_ephemeral_storage, json[QString("ephemeralStorage")]);
    m_ephemeral_storage_isSet = !json[QString("ephemeralStorage")].isNull() && m_ephemeral_storage_isValid;
}

QString OAIStopTaskResponse_task::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStopTaskResponse_task::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.isSet()) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("availabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_capacity_provider_name_isSet) {
        obj.insert(QString("capacityProviderName"), ::OpenAPI::toJsonValue(m_capacity_provider_name));
    }
    if (m_cluster_arn_isSet) {
        obj.insert(QString("clusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_connectivity.isSet()) {
        obj.insert(QString("connectivity"), ::OpenAPI::toJsonValue(m_connectivity));
    }
    if (m_connectivity_at_isSet) {
        obj.insert(QString("connectivityAt"), ::OpenAPI::toJsonValue(m_connectivity_at));
    }
    if (m_container_instance_arn_isSet) {
        obj.insert(QString("containerInstanceArn"), ::OpenAPI::toJsonValue(m_container_instance_arn));
    }
    if (m_containers.isSet()) {
        obj.insert(QString("containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_cpu_isSet) {
        obj.insert(QString("cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_desired_status_isSet) {
        obj.insert(QString("desiredStatus"), ::OpenAPI::toJsonValue(m_desired_status));
    }
    if (m_enable_execute_command_isSet) {
        obj.insert(QString("enableExecuteCommand"), ::OpenAPI::toJsonValue(m_enable_execute_command));
    }
    if (m_execution_stopped_at_isSet) {
        obj.insert(QString("executionStoppedAt"), ::OpenAPI::toJsonValue(m_execution_stopped_at));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_health_status.isSet()) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_inference_accelerators.isSet()) {
        obj.insert(QString("inferenceAccelerators"), ::OpenAPI::toJsonValue(m_inference_accelerators));
    }
    if (m_last_status_isSet) {
        obj.insert(QString("lastStatus"), ::OpenAPI::toJsonValue(m_last_status));
    }
    if (m_launch_type.isSet()) {
        obj.insert(QString("launchType"), ::OpenAPI::toJsonValue(m_launch_type));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_overrides.isSet()) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("platformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_platform_family_isSet) {
        obj.insert(QString("platformFamily"), ::OpenAPI::toJsonValue(m_platform_family));
    }
    if (m_pull_started_at_isSet) {
        obj.insert(QString("pullStartedAt"), ::OpenAPI::toJsonValue(m_pull_started_at));
    }
    if (m_pull_stopped_at_isSet) {
        obj.insert(QString("pullStoppedAt"), ::OpenAPI::toJsonValue(m_pull_stopped_at));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_started_by_isSet) {
        obj.insert(QString("startedBy"), ::OpenAPI::toJsonValue(m_started_by));
    }
    if (m_stop_code.isSet()) {
        obj.insert(QString("stopCode"), ::OpenAPI::toJsonValue(m_stop_code));
    }
    if (m_stopped_at_isSet) {
        obj.insert(QString("stoppedAt"), ::OpenAPI::toJsonValue(m_stopped_at));
    }
    if (m_stopped_reason_isSet) {
        obj.insert(QString("stoppedReason"), ::OpenAPI::toJsonValue(m_stopped_reason));
    }
    if (m_stopping_at_isSet) {
        obj.insert(QString("stoppingAt"), ::OpenAPI::toJsonValue(m_stopping_at));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_task_arn_isSet) {
        obj.insert(QString("taskArn"), ::OpenAPI::toJsonValue(m_task_arn));
    }
    if (m_task_definition_arn_isSet) {
        obj.insert(QString("taskDefinitionArn"), ::OpenAPI::toJsonValue(m_task_definition_arn));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_ephemeral_storage.isSet()) {
        obj.insert(QString("ephemeralStorage"), ::OpenAPI::toJsonValue(m_ephemeral_storage));
    }
    return obj;
}

QList OAIStopTaskResponse_task::getAttachments() const {
    return m_attachments;
}
void OAIStopTaskResponse_task::setAttachments(const QList &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIStopTaskResponse_task::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIStopTaskResponse_task::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QList OAIStopTaskResponse_task::getAttributes() const {
    return m_attributes;
}
void OAIStopTaskResponse_task::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIStopTaskResponse_task::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIStopTaskResponse_task::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIStopTaskResponse_task::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIStopTaskResponse_task::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIStopTaskResponse_task::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIStopTaskResponse_task::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAIStopTaskResponse_task::getCapacityProviderName() const {
    return m_capacity_provider_name;
}
void OAIStopTaskResponse_task::setCapacityProviderName(const QString &capacity_provider_name) {
    m_capacity_provider_name = capacity_provider_name;
    m_capacity_provider_name_isSet = true;
}

bool OAIStopTaskResponse_task::is_capacity_provider_name_Set() const{
    return m_capacity_provider_name_isSet;
}

bool OAIStopTaskResponse_task::is_capacity_provider_name_Valid() const{
    return m_capacity_provider_name_isValid;
}

QString OAIStopTaskResponse_task::getClusterArn() const {
    return m_cluster_arn;
}
void OAIStopTaskResponse_task::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAIStopTaskResponse_task::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAIStopTaskResponse_task::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

OAIConnectivity OAIStopTaskResponse_task::getConnectivity() const {
    return m_connectivity;
}
void OAIStopTaskResponse_task::setConnectivity(const OAIConnectivity &connectivity) {
    m_connectivity = connectivity;
    m_connectivity_isSet = true;
}

bool OAIStopTaskResponse_task::is_connectivity_Set() const{
    return m_connectivity_isSet;
}

bool OAIStopTaskResponse_task::is_connectivity_Valid() const{
    return m_connectivity_isValid;
}

QDateTime OAIStopTaskResponse_task::getConnectivityAt() const {
    return m_connectivity_at;
}
void OAIStopTaskResponse_task::setConnectivityAt(const QDateTime &connectivity_at) {
    m_connectivity_at = connectivity_at;
    m_connectivity_at_isSet = true;
}

bool OAIStopTaskResponse_task::is_connectivity_at_Set() const{
    return m_connectivity_at_isSet;
}

bool OAIStopTaskResponse_task::is_connectivity_at_Valid() const{
    return m_connectivity_at_isValid;
}

QString OAIStopTaskResponse_task::getContainerInstanceArn() const {
    return m_container_instance_arn;
}
void OAIStopTaskResponse_task::setContainerInstanceArn(const QString &container_instance_arn) {
    m_container_instance_arn = container_instance_arn;
    m_container_instance_arn_isSet = true;
}

bool OAIStopTaskResponse_task::is_container_instance_arn_Set() const{
    return m_container_instance_arn_isSet;
}

bool OAIStopTaskResponse_task::is_container_instance_arn_Valid() const{
    return m_container_instance_arn_isValid;
}

QList OAIStopTaskResponse_task::getContainers() const {
    return m_containers;
}
void OAIStopTaskResponse_task::setContainers(const QList &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAIStopTaskResponse_task::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAIStopTaskResponse_task::is_containers_Valid() const{
    return m_containers_isValid;
}

QString OAIStopTaskResponse_task::getCpu() const {
    return m_cpu;
}
void OAIStopTaskResponse_task::setCpu(const QString &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAIStopTaskResponse_task::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAIStopTaskResponse_task::is_cpu_Valid() const{
    return m_cpu_isValid;
}

QDateTime OAIStopTaskResponse_task::getCreatedAt() const {
    return m_created_at;
}
void OAIStopTaskResponse_task::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStopTaskResponse_task::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStopTaskResponse_task::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIStopTaskResponse_task::getDesiredStatus() const {
    return m_desired_status;
}
void OAIStopTaskResponse_task::setDesiredStatus(const QString &desired_status) {
    m_desired_status = desired_status;
    m_desired_status_isSet = true;
}

bool OAIStopTaskResponse_task::is_desired_status_Set() const{
    return m_desired_status_isSet;
}

bool OAIStopTaskResponse_task::is_desired_status_Valid() const{
    return m_desired_status_isValid;
}

bool OAIStopTaskResponse_task::getEnableExecuteCommand() const {
    return m_enable_execute_command;
}
void OAIStopTaskResponse_task::setEnableExecuteCommand(const bool &enable_execute_command) {
    m_enable_execute_command = enable_execute_command;
    m_enable_execute_command_isSet = true;
}

bool OAIStopTaskResponse_task::is_enable_execute_command_Set() const{
    return m_enable_execute_command_isSet;
}

bool OAIStopTaskResponse_task::is_enable_execute_command_Valid() const{
    return m_enable_execute_command_isValid;
}

QDateTime OAIStopTaskResponse_task::getExecutionStoppedAt() const {
    return m_execution_stopped_at;
}
void OAIStopTaskResponse_task::setExecutionStoppedAt(const QDateTime &execution_stopped_at) {
    m_execution_stopped_at = execution_stopped_at;
    m_execution_stopped_at_isSet = true;
}

bool OAIStopTaskResponse_task::is_execution_stopped_at_Set() const{
    return m_execution_stopped_at_isSet;
}

bool OAIStopTaskResponse_task::is_execution_stopped_at_Valid() const{
    return m_execution_stopped_at_isValid;
}

QString OAIStopTaskResponse_task::getGroup() const {
    return m_group;
}
void OAIStopTaskResponse_task::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIStopTaskResponse_task::is_group_Set() const{
    return m_group_isSet;
}

bool OAIStopTaskResponse_task::is_group_Valid() const{
    return m_group_isValid;
}

OAIHealthStatus OAIStopTaskResponse_task::getHealthStatus() const {
    return m_health_status;
}
void OAIStopTaskResponse_task::setHealthStatus(const OAIHealthStatus &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIStopTaskResponse_task::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIStopTaskResponse_task::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QList OAIStopTaskResponse_task::getInferenceAccelerators() const {
    return m_inference_accelerators;
}
void OAIStopTaskResponse_task::setInferenceAccelerators(const QList &inference_accelerators) {
    m_inference_accelerators = inference_accelerators;
    m_inference_accelerators_isSet = true;
}

bool OAIStopTaskResponse_task::is_inference_accelerators_Set() const{
    return m_inference_accelerators_isSet;
}

bool OAIStopTaskResponse_task::is_inference_accelerators_Valid() const{
    return m_inference_accelerators_isValid;
}

QString OAIStopTaskResponse_task::getLastStatus() const {
    return m_last_status;
}
void OAIStopTaskResponse_task::setLastStatus(const QString &last_status) {
    m_last_status = last_status;
    m_last_status_isSet = true;
}

bool OAIStopTaskResponse_task::is_last_status_Set() const{
    return m_last_status_isSet;
}

bool OAIStopTaskResponse_task::is_last_status_Valid() const{
    return m_last_status_isValid;
}

OAILaunchType OAIStopTaskResponse_task::getLaunchType() const {
    return m_launch_type;
}
void OAIStopTaskResponse_task::setLaunchType(const OAILaunchType &launch_type) {
    m_launch_type = launch_type;
    m_launch_type_isSet = true;
}

bool OAIStopTaskResponse_task::is_launch_type_Set() const{
    return m_launch_type_isSet;
}

bool OAIStopTaskResponse_task::is_launch_type_Valid() const{
    return m_launch_type_isValid;
}

QString OAIStopTaskResponse_task::getMemory() const {
    return m_memory;
}
void OAIStopTaskResponse_task::setMemory(const QString &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIStopTaskResponse_task::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIStopTaskResponse_task::is_memory_Valid() const{
    return m_memory_isValid;
}

OAITask_overrides OAIStopTaskResponse_task::getOverrides() const {
    return m_overrides;
}
void OAIStopTaskResponse_task::setOverrides(const OAITask_overrides &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAIStopTaskResponse_task::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAIStopTaskResponse_task::is_overrides_Valid() const{
    return m_overrides_isValid;
}

QString OAIStopTaskResponse_task::getPlatformVersion() const {
    return m_platform_version;
}
void OAIStopTaskResponse_task::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAIStopTaskResponse_task::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAIStopTaskResponse_task::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

QString OAIStopTaskResponse_task::getPlatformFamily() const {
    return m_platform_family;
}
void OAIStopTaskResponse_task::setPlatformFamily(const QString &platform_family) {
    m_platform_family = platform_family;
    m_platform_family_isSet = true;
}

bool OAIStopTaskResponse_task::is_platform_family_Set() const{
    return m_platform_family_isSet;
}

bool OAIStopTaskResponse_task::is_platform_family_Valid() const{
    return m_platform_family_isValid;
}

QDateTime OAIStopTaskResponse_task::getPullStartedAt() const {
    return m_pull_started_at;
}
void OAIStopTaskResponse_task::setPullStartedAt(const QDateTime &pull_started_at) {
    m_pull_started_at = pull_started_at;
    m_pull_started_at_isSet = true;
}

bool OAIStopTaskResponse_task::is_pull_started_at_Set() const{
    return m_pull_started_at_isSet;
}

bool OAIStopTaskResponse_task::is_pull_started_at_Valid() const{
    return m_pull_started_at_isValid;
}

QDateTime OAIStopTaskResponse_task::getPullStoppedAt() const {
    return m_pull_stopped_at;
}
void OAIStopTaskResponse_task::setPullStoppedAt(const QDateTime &pull_stopped_at) {
    m_pull_stopped_at = pull_stopped_at;
    m_pull_stopped_at_isSet = true;
}

bool OAIStopTaskResponse_task::is_pull_stopped_at_Set() const{
    return m_pull_stopped_at_isSet;
}

bool OAIStopTaskResponse_task::is_pull_stopped_at_Valid() const{
    return m_pull_stopped_at_isValid;
}

QDateTime OAIStopTaskResponse_task::getStartedAt() const {
    return m_started_at;
}
void OAIStopTaskResponse_task::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIStopTaskResponse_task::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIStopTaskResponse_task::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIStopTaskResponse_task::getStartedBy() const {
    return m_started_by;
}
void OAIStopTaskResponse_task::setStartedBy(const QString &started_by) {
    m_started_by = started_by;
    m_started_by_isSet = true;
}

bool OAIStopTaskResponse_task::is_started_by_Set() const{
    return m_started_by_isSet;
}

bool OAIStopTaskResponse_task::is_started_by_Valid() const{
    return m_started_by_isValid;
}

OAITaskStopCode OAIStopTaskResponse_task::getStopCode() const {
    return m_stop_code;
}
void OAIStopTaskResponse_task::setStopCode(const OAITaskStopCode &stop_code) {
    m_stop_code = stop_code;
    m_stop_code_isSet = true;
}

bool OAIStopTaskResponse_task::is_stop_code_Set() const{
    return m_stop_code_isSet;
}

bool OAIStopTaskResponse_task::is_stop_code_Valid() const{
    return m_stop_code_isValid;
}

QDateTime OAIStopTaskResponse_task::getStoppedAt() const {
    return m_stopped_at;
}
void OAIStopTaskResponse_task::setStoppedAt(const QDateTime &stopped_at) {
    m_stopped_at = stopped_at;
    m_stopped_at_isSet = true;
}

bool OAIStopTaskResponse_task::is_stopped_at_Set() const{
    return m_stopped_at_isSet;
}

bool OAIStopTaskResponse_task::is_stopped_at_Valid() const{
    return m_stopped_at_isValid;
}

QString OAIStopTaskResponse_task::getStoppedReason() const {
    return m_stopped_reason;
}
void OAIStopTaskResponse_task::setStoppedReason(const QString &stopped_reason) {
    m_stopped_reason = stopped_reason;
    m_stopped_reason_isSet = true;
}

bool OAIStopTaskResponse_task::is_stopped_reason_Set() const{
    return m_stopped_reason_isSet;
}

bool OAIStopTaskResponse_task::is_stopped_reason_Valid() const{
    return m_stopped_reason_isValid;
}

QDateTime OAIStopTaskResponse_task::getStoppingAt() const {
    return m_stopping_at;
}
void OAIStopTaskResponse_task::setStoppingAt(const QDateTime &stopping_at) {
    m_stopping_at = stopping_at;
    m_stopping_at_isSet = true;
}

bool OAIStopTaskResponse_task::is_stopping_at_Set() const{
    return m_stopping_at_isSet;
}

bool OAIStopTaskResponse_task::is_stopping_at_Valid() const{
    return m_stopping_at_isValid;
}

QList OAIStopTaskResponse_task::getTags() const {
    return m_tags;
}
void OAIStopTaskResponse_task::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStopTaskResponse_task::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStopTaskResponse_task::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIStopTaskResponse_task::getTaskArn() const {
    return m_task_arn;
}
void OAIStopTaskResponse_task::setTaskArn(const QString &task_arn) {
    m_task_arn = task_arn;
    m_task_arn_isSet = true;
}

bool OAIStopTaskResponse_task::is_task_arn_Set() const{
    return m_task_arn_isSet;
}

bool OAIStopTaskResponse_task::is_task_arn_Valid() const{
    return m_task_arn_isValid;
}

QString OAIStopTaskResponse_task::getTaskDefinitionArn() const {
    return m_task_definition_arn;
}
void OAIStopTaskResponse_task::setTaskDefinitionArn(const QString &task_definition_arn) {
    m_task_definition_arn = task_definition_arn;
    m_task_definition_arn_isSet = true;
}

bool OAIStopTaskResponse_task::is_task_definition_arn_Set() const{
    return m_task_definition_arn_isSet;
}

bool OAIStopTaskResponse_task::is_task_definition_arn_Valid() const{
    return m_task_definition_arn_isValid;
}

qint32 OAIStopTaskResponse_task::getVersion() const {
    return m_version;
}
void OAIStopTaskResponse_task::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIStopTaskResponse_task::is_version_Set() const{
    return m_version_isSet;
}

bool OAIStopTaskResponse_task::is_version_Valid() const{
    return m_version_isValid;
}

OAITask_ephemeralStorage OAIStopTaskResponse_task::getEphemeralStorage() const {
    return m_ephemeral_storage;
}
void OAIStopTaskResponse_task::setEphemeralStorage(const OAITask_ephemeralStorage &ephemeral_storage) {
    m_ephemeral_storage = ephemeral_storage;
    m_ephemeral_storage_isSet = true;
}

bool OAIStopTaskResponse_task::is_ephemeral_storage_Set() const{
    return m_ephemeral_storage_isSet;
}

bool OAIStopTaskResponse_task::is_ephemeral_storage_Valid() const{
    return m_ephemeral_storage_isValid;
}

bool OAIStopTaskResponse_task::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectivity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectivity_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_containers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_execute_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_stopped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_accelerators.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_stopped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopping_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_definition_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ephemeral_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStopTaskResponse_task::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
