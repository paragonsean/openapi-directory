/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVolume.h
 *
 * A data volume that&#39;s used in a task definition. For tasks that use the Amazon Elastic File System (Amazon EFS), specify an &lt;code&gt;efsVolumeConfiguration&lt;/code&gt;. For Windows tasks that use Amazon FSx for Windows File Server file system, specify a &lt;code&gt;fsxWindowsFileServerVolumeConfiguration&lt;/code&gt;. For tasks that use a Docker volume, specify a &lt;code&gt;DockerVolumeConfiguration&lt;/code&gt;. For tasks that use a bind mount host volume, specify a &lt;code&gt;host&lt;/code&gt; and optional &lt;code&gt;sourcePath&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html\&quot;&gt;Using Data Volumes in Tasks&lt;/a&gt;.
 */

#ifndef OAIVolume_H
#define OAIVolume_H

#include <QJsonObject>

#include "OAIVolume_dockerVolumeConfiguration.h"
#include "OAIVolume_efsVolumeConfiguration.h"
#include "OAIVolume_fsxWindowsFileServerVolumeConfiguration.h"
#include "OAIVolume_host.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVolume_host;
class OAIVolume_dockerVolumeConfiguration;
class OAIVolume_efsVolumeConfiguration;
class OAIVolume_fsxWindowsFileServerVolumeConfiguration;

class OAIVolume : public OAIObject {
public:
    OAIVolume();
    OAIVolume(QString json);
    ~OAIVolume() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIVolume_host getHost() const;
    void setHost(const OAIVolume_host &host);
    bool is_host_Set() const;
    bool is_host_Valid() const;

    OAIVolume_dockerVolumeConfiguration getDockerVolumeConfiguration() const;
    void setDockerVolumeConfiguration(const OAIVolume_dockerVolumeConfiguration &docker_volume_configuration);
    bool is_docker_volume_configuration_Set() const;
    bool is_docker_volume_configuration_Valid() const;

    OAIVolume_efsVolumeConfiguration getEfsVolumeConfiguration() const;
    void setEfsVolumeConfiguration(const OAIVolume_efsVolumeConfiguration &efs_volume_configuration);
    bool is_efs_volume_configuration_Set() const;
    bool is_efs_volume_configuration_Valid() const;

    OAIVolume_fsxWindowsFileServerVolumeConfiguration getFsxWindowsFileServerVolumeConfiguration() const;
    void setFsxWindowsFileServerVolumeConfiguration(const OAIVolume_fsxWindowsFileServerVolumeConfiguration &fsx_windows_file_server_volume_configuration);
    bool is_fsx_windows_file_server_volume_configuration_Set() const;
    bool is_fsx_windows_file_server_volume_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIVolume_host m_host;
    bool m_host_isSet;
    bool m_host_isValid;

    OAIVolume_dockerVolumeConfiguration m_docker_volume_configuration;
    bool m_docker_volume_configuration_isSet;
    bool m_docker_volume_configuration_isValid;

    OAIVolume_efsVolumeConfiguration m_efs_volume_configuration;
    bool m_efs_volume_configuration_isSet;
    bool m_efs_volume_configuration_isValid;

    OAIVolume_fsxWindowsFileServerVolumeConfiguration m_fsx_windows_file_server_volume_configuration;
    bool m_fsx_windows_file_server_volume_configuration_isSet;
    bool m_fsx_windows_file_server_volume_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVolume)

#endif // OAIVolume_H
