/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeTaskDefinitionResponse_taskDefinition.h
 *
 * 
 */

#ifndef OAIDescribeTaskDefinitionResponse_taskDefinition_H
#define OAIDescribeTaskDefinitionResponse_taskDefinition_H

#include <QJsonObject>

#include "OAIIpcMode.h"
#include "OAINetworkMode.h"
#include "OAIPidMode.h"
#include "OAITaskDefinitionStatus.h"
#include "OAITaskDefinition_ephemeralStorage.h"
#include "OAITaskDefinition_proxyConfiguration.h"
#include "OAITaskDefinition_runtimePlatform.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITaskDefinition_runtimePlatform;
class OAITaskDefinition_proxyConfiguration;
class OAITaskDefinition_ephemeralStorage;

class OAIDescribeTaskDefinitionResponse_taskDefinition : public OAIObject {
public:
    OAIDescribeTaskDefinitionResponse_taskDefinition();
    OAIDescribeTaskDefinitionResponse_taskDefinition(QString json);
    ~OAIDescribeTaskDefinitionResponse_taskDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTaskDefinitionArn() const;
    void setTaskDefinitionArn(const QString &task_definition_arn);
    bool is_task_definition_arn_Set() const;
    bool is_task_definition_arn_Valid() const;

    QList getContainerDefinitions() const;
    void setContainerDefinitions(const QList &container_definitions);
    bool is_container_definitions_Set() const;
    bool is_container_definitions_Valid() const;

    QString getFamily() const;
    void setFamily(const QString &family);
    bool is_family_Set() const;
    bool is_family_Valid() const;

    QString getTaskRoleArn() const;
    void setTaskRoleArn(const QString &task_role_arn);
    bool is_task_role_arn_Set() const;
    bool is_task_role_arn_Valid() const;

    QString getExecutionRoleArn() const;
    void setExecutionRoleArn(const QString &execution_role_arn);
    bool is_execution_role_arn_Set() const;
    bool is_execution_role_arn_Valid() const;

    OAINetworkMode getNetworkMode() const;
    void setNetworkMode(const OAINetworkMode &network_mode);
    bool is_network_mode_Set() const;
    bool is_network_mode_Valid() const;

    qint32 getRevision() const;
    void setRevision(const qint32 &revision);
    bool is_revision_Set() const;
    bool is_revision_Valid() const;

    QList getVolumes() const;
    void setVolumes(const QList &volumes);
    bool is_volumes_Set() const;
    bool is_volumes_Valid() const;

    OAITaskDefinitionStatus getStatus() const;
    void setStatus(const OAITaskDefinitionStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList getRequiresAttributes() const;
    void setRequiresAttributes(const QList &requires_attributes);
    bool is_requires_attributes_Set() const;
    bool is_requires_attributes_Valid() const;

    QList getPlacementConstraints() const;
    void setPlacementConstraints(const QList &placement_constraints);
    bool is_placement_constraints_Set() const;
    bool is_placement_constraints_Valid() const;

    QList getCompatibilities() const;
    void setCompatibilities(const QList &compatibilities);
    bool is_compatibilities_Set() const;
    bool is_compatibilities_Valid() const;

    OAITaskDefinition_runtimePlatform getRuntimePlatform() const;
    void setRuntimePlatform(const OAITaskDefinition_runtimePlatform &runtime_platform);
    bool is_runtime_platform_Set() const;
    bool is_runtime_platform_Valid() const;

    QList getRequiresCompatibilities() const;
    void setRequiresCompatibilities(const QList &requires_compatibilities);
    bool is_requires_compatibilities_Set() const;
    bool is_requires_compatibilities_Valid() const;

    QString getCpu() const;
    void setCpu(const QString &cpu);
    bool is_cpu_Set() const;
    bool is_cpu_Valid() const;

    QString getMemory() const;
    void setMemory(const QString &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    QList getInferenceAccelerators() const;
    void setInferenceAccelerators(const QList &inference_accelerators);
    bool is_inference_accelerators_Set() const;
    bool is_inference_accelerators_Valid() const;

    OAIPidMode getPidMode() const;
    void setPidMode(const OAIPidMode &pid_mode);
    bool is_pid_mode_Set() const;
    bool is_pid_mode_Valid() const;

    OAIIpcMode getIpcMode() const;
    void setIpcMode(const OAIIpcMode &ipc_mode);
    bool is_ipc_mode_Set() const;
    bool is_ipc_mode_Valid() const;

    OAITaskDefinition_proxyConfiguration getProxyConfiguration() const;
    void setProxyConfiguration(const OAITaskDefinition_proxyConfiguration &proxy_configuration);
    bool is_proxy_configuration_Set() const;
    bool is_proxy_configuration_Valid() const;

    QDateTime getRegisteredAt() const;
    void setRegisteredAt(const QDateTime &registered_at);
    bool is_registered_at_Set() const;
    bool is_registered_at_Valid() const;

    QDateTime getDeregisteredAt() const;
    void setDeregisteredAt(const QDateTime &deregistered_at);
    bool is_deregistered_at_Set() const;
    bool is_deregistered_at_Valid() const;

    QString getRegisteredBy() const;
    void setRegisteredBy(const QString &registered_by);
    bool is_registered_by_Set() const;
    bool is_registered_by_Valid() const;

    OAITaskDefinition_ephemeralStorage getEphemeralStorage() const;
    void setEphemeralStorage(const OAITaskDefinition_ephemeralStorage &ephemeral_storage);
    bool is_ephemeral_storage_Set() const;
    bool is_ephemeral_storage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_task_definition_arn;
    bool m_task_definition_arn_isSet;
    bool m_task_definition_arn_isValid;

    QList m_container_definitions;
    bool m_container_definitions_isSet;
    bool m_container_definitions_isValid;

    QString m_family;
    bool m_family_isSet;
    bool m_family_isValid;

    QString m_task_role_arn;
    bool m_task_role_arn_isSet;
    bool m_task_role_arn_isValid;

    QString m_execution_role_arn;
    bool m_execution_role_arn_isSet;
    bool m_execution_role_arn_isValid;

    OAINetworkMode m_network_mode;
    bool m_network_mode_isSet;
    bool m_network_mode_isValid;

    qint32 m_revision;
    bool m_revision_isSet;
    bool m_revision_isValid;

    QList m_volumes;
    bool m_volumes_isSet;
    bool m_volumes_isValid;

    OAITaskDefinitionStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList m_requires_attributes;
    bool m_requires_attributes_isSet;
    bool m_requires_attributes_isValid;

    QList m_placement_constraints;
    bool m_placement_constraints_isSet;
    bool m_placement_constraints_isValid;

    QList m_compatibilities;
    bool m_compatibilities_isSet;
    bool m_compatibilities_isValid;

    OAITaskDefinition_runtimePlatform m_runtime_platform;
    bool m_runtime_platform_isSet;
    bool m_runtime_platform_isValid;

    QList m_requires_compatibilities;
    bool m_requires_compatibilities_isSet;
    bool m_requires_compatibilities_isValid;

    QString m_cpu;
    bool m_cpu_isSet;
    bool m_cpu_isValid;

    QString m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    QList m_inference_accelerators;
    bool m_inference_accelerators_isSet;
    bool m_inference_accelerators_isValid;

    OAIPidMode m_pid_mode;
    bool m_pid_mode_isSet;
    bool m_pid_mode_isValid;

    OAIIpcMode m_ipc_mode;
    bool m_ipc_mode_isSet;
    bool m_ipc_mode_isValid;

    OAITaskDefinition_proxyConfiguration m_proxy_configuration;
    bool m_proxy_configuration_isSet;
    bool m_proxy_configuration_isValid;

    QDateTime m_registered_at;
    bool m_registered_at_isSet;
    bool m_registered_at_isValid;

    QDateTime m_deregistered_at;
    bool m_deregistered_at_isSet;
    bool m_deregistered_at_isValid;

    QString m_registered_by;
    bool m_registered_by_isSet;
    bool m_registered_by_isValid;

    OAITaskDefinition_ephemeralStorage m_ephemeral_storage;
    bool m_ephemeral_storage_isSet;
    bool m_ephemeral_storage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeTaskDefinitionResponse_taskDefinition)

#endif // OAIDescribeTaskDefinitionResponse_taskDefinition_H
