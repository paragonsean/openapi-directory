/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResource::OAIResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResource::OAIResource() {
    this->initializeModel();
}

OAIResource::~OAIResource() {}

void OAIResource::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_double_value_isSet = false;
    m_double_value_isValid = false;

    m_long_value_isSet = false;
    m_long_value_isValid = false;

    m_integer_value_isSet = false;
    m_integer_value_isValid = false;

    m_string_set_value_isSet = false;
    m_string_set_value_isValid = false;
}

void OAIResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResource::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_double_value_isValid = ::OpenAPI::fromJsonValue(m_double_value, json[QString("doubleValue")]);
    m_double_value_isSet = !json[QString("doubleValue")].isNull() && m_double_value_isValid;

    m_long_value_isValid = ::OpenAPI::fromJsonValue(m_long_value, json[QString("longValue")]);
    m_long_value_isSet = !json[QString("longValue")].isNull() && m_long_value_isValid;

    m_integer_value_isValid = ::OpenAPI::fromJsonValue(m_integer_value, json[QString("integerValue")]);
    m_integer_value_isSet = !json[QString("integerValue")].isNull() && m_integer_value_isValid;

    m_string_set_value_isValid = ::OpenAPI::fromJsonValue(m_string_set_value, json[QString("stringSetValue")]);
    m_string_set_value_isSet = !json[QString("stringSetValue")].isNull() && m_string_set_value_isValid;
}

QString OAIResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResource::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_double_value_isSet) {
        obj.insert(QString("doubleValue"), ::OpenAPI::toJsonValue(m_double_value));
    }
    if (m_long_value_isSet) {
        obj.insert(QString("longValue"), ::OpenAPI::toJsonValue(m_long_value));
    }
    if (m_integer_value_isSet) {
        obj.insert(QString("integerValue"), ::OpenAPI::toJsonValue(m_integer_value));
    }
    if (m_string_set_value.isSet()) {
        obj.insert(QString("stringSetValue"), ::OpenAPI::toJsonValue(m_string_set_value));
    }
    return obj;
}

QString OAIResource::getName() const {
    return m_name;
}
void OAIResource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIResource::getType() const {
    return m_type;
}
void OAIResource::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResource::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResource::is_type_Valid() const{
    return m_type_isValid;
}

double OAIResource::getDoubleValue() const {
    return m_double_value;
}
void OAIResource::setDoubleValue(const double &double_value) {
    m_double_value = double_value;
    m_double_value_isSet = true;
}

bool OAIResource::is_double_value_Set() const{
    return m_double_value_isSet;
}

bool OAIResource::is_double_value_Valid() const{
    return m_double_value_isValid;
}

qint32 OAIResource::getLongValue() const {
    return m_long_value;
}
void OAIResource::setLongValue(const qint32 &long_value) {
    m_long_value = long_value;
    m_long_value_isSet = true;
}

bool OAIResource::is_long_value_Set() const{
    return m_long_value_isSet;
}

bool OAIResource::is_long_value_Valid() const{
    return m_long_value_isValid;
}

qint32 OAIResource::getIntegerValue() const {
    return m_integer_value;
}
void OAIResource::setIntegerValue(const qint32 &integer_value) {
    m_integer_value = integer_value;
    m_integer_value_isSet = true;
}

bool OAIResource::is_integer_value_Set() const{
    return m_integer_value_isSet;
}

bool OAIResource::is_integer_value_Valid() const{
    return m_integer_value_isValid;
}

QList OAIResource::getStringSetValue() const {
    return m_string_set_value;
}
void OAIResource::setStringSetValue(const QList &string_set_value) {
    m_string_set_value = string_set_value;
    m_string_set_value_isSet = true;
}

bool OAIResource::is_string_set_value_Set() const{
    return m_string_set_value_isSet;
}

bool OAIResource::is_string_set_value_Valid() const{
    return m_string_set_value_isValid;
}

bool OAIResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_set_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
