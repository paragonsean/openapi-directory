/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTasksRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTasksRequest::OAIListTasksRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTasksRequest::OAIListTasksRequest() {
    this->initializeModel();
}

OAIListTasksRequest::~OAIListTasksRequest() {}

void OAIListTasksRequest::initializeModel() {

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_container_instance_isSet = false;
    m_container_instance_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_started_by_isSet = false;
    m_started_by_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_desired_status_isSet = false;
    m_desired_status_isValid = false;

    m_launch_type_isSet = false;
    m_launch_type_isValid = false;
}

void OAIListTasksRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTasksRequest::fromJsonObject(QJsonObject json) {

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_container_instance_isValid = ::OpenAPI::fromJsonValue(m_container_instance, json[QString("containerInstance")]);
    m_container_instance_isSet = !json[QString("containerInstance")].isNull() && m_container_instance_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_started_by_isValid = ::OpenAPI::fromJsonValue(m_started_by, json[QString("startedBy")]);
    m_started_by_isSet = !json[QString("startedBy")].isNull() && m_started_by_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_desired_status_isValid = ::OpenAPI::fromJsonValue(m_desired_status, json[QString("desiredStatus")]);
    m_desired_status_isSet = !json[QString("desiredStatus")].isNull() && m_desired_status_isValid;

    m_launch_type_isValid = ::OpenAPI::fromJsonValue(m_launch_type, json[QString("launchType")]);
    m_launch_type_isSet = !json[QString("launchType")].isNull() && m_launch_type_isValid;
}

QString OAIListTasksRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTasksRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_container_instance_isSet) {
        obj.insert(QString("containerInstance"), ::OpenAPI::toJsonValue(m_container_instance));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_started_by_isSet) {
        obj.insert(QString("startedBy"), ::OpenAPI::toJsonValue(m_started_by));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_desired_status.isSet()) {
        obj.insert(QString("desiredStatus"), ::OpenAPI::toJsonValue(m_desired_status));
    }
    if (m_launch_type.isSet()) {
        obj.insert(QString("launchType"), ::OpenAPI::toJsonValue(m_launch_type));
    }
    return obj;
}

QString OAIListTasksRequest::getCluster() const {
    return m_cluster;
}
void OAIListTasksRequest::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIListTasksRequest::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIListTasksRequest::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIListTasksRequest::getContainerInstance() const {
    return m_container_instance;
}
void OAIListTasksRequest::setContainerInstance(const QString &container_instance) {
    m_container_instance = container_instance;
    m_container_instance_isSet = true;
}

bool OAIListTasksRequest::is_container_instance_Set() const{
    return m_container_instance_isSet;
}

bool OAIListTasksRequest::is_container_instance_Valid() const{
    return m_container_instance_isValid;
}

QString OAIListTasksRequest::getFamily() const {
    return m_family;
}
void OAIListTasksRequest::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIListTasksRequest::is_family_Set() const{
    return m_family_isSet;
}

bool OAIListTasksRequest::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIListTasksRequest::getNextToken() const {
    return m_next_token;
}
void OAIListTasksRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTasksRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTasksRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListTasksRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListTasksRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListTasksRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListTasksRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListTasksRequest::getStartedBy() const {
    return m_started_by;
}
void OAIListTasksRequest::setStartedBy(const QString &started_by) {
    m_started_by = started_by;
    m_started_by_isSet = true;
}

bool OAIListTasksRequest::is_started_by_Set() const{
    return m_started_by_isSet;
}

bool OAIListTasksRequest::is_started_by_Valid() const{
    return m_started_by_isValid;
}

QString OAIListTasksRequest::getServiceName() const {
    return m_service_name;
}
void OAIListTasksRequest::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIListTasksRequest::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIListTasksRequest::is_service_name_Valid() const{
    return m_service_name_isValid;
}

OAIDesiredStatus OAIListTasksRequest::getDesiredStatus() const {
    return m_desired_status;
}
void OAIListTasksRequest::setDesiredStatus(const OAIDesiredStatus &desired_status) {
    m_desired_status = desired_status;
    m_desired_status_isSet = true;
}

bool OAIListTasksRequest::is_desired_status_Set() const{
    return m_desired_status_isSet;
}

bool OAIListTasksRequest::is_desired_status_Valid() const{
    return m_desired_status_isValid;
}

OAILaunchType OAIListTasksRequest::getLaunchType() const {
    return m_launch_type;
}
void OAIListTasksRequest::setLaunchType(const OAILaunchType &launch_type) {
    m_launch_type = launch_type;
    m_launch_type_isSet = true;
}

bool OAIListTasksRequest::is_launch_type_Set() const{
    return m_launch_type_isSet;
}

bool OAIListTasksRequest::is_launch_type_Valid() const{
    return m_launch_type_isValid;
}

bool OAIListTasksRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTasksRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
