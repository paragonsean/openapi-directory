/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeployment.h
 *
 * The details of an Amazon ECS service deployment. This is used only when a service uses the &lt;code&gt;ECS&lt;/code&gt; deployment controller type.
 */

#ifndef OAIDeployment_H
#define OAIDeployment_H

#include <QJsonObject>

#include "OAIDeploymentRolloutState.h"
#include "OAIDeployment_serviceConnectConfiguration.h"
#include "OAILaunchType.h"
#include "OAIStartTaskRequest_networkConfiguration.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStartTaskRequest_networkConfiguration;
class OAIDeployment_serviceConnectConfiguration;

class OAIDeployment : public OAIObject {
public:
    OAIDeployment();
    OAIDeployment(QString json);
    ~OAIDeployment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTaskDefinition() const;
    void setTaskDefinition(const QString &task_definition);
    bool is_task_definition_Set() const;
    bool is_task_definition_Valid() const;

    qint32 getDesiredCount() const;
    void setDesiredCount(const qint32 &desired_count);
    bool is_desired_count_Set() const;
    bool is_desired_count_Valid() const;

    qint32 getPendingCount() const;
    void setPendingCount(const qint32 &pending_count);
    bool is_pending_count_Set() const;
    bool is_pending_count_Valid() const;

    qint32 getRunningCount() const;
    void setRunningCount(const qint32 &running_count);
    bool is_running_count_Set() const;
    bool is_running_count_Valid() const;

    qint32 getFailedTasks() const;
    void setFailedTasks(const qint32 &failed_tasks);
    bool is_failed_tasks_Set() const;
    bool is_failed_tasks_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QList getCapacityProviderStrategy() const;
    void setCapacityProviderStrategy(const QList &capacity_provider_strategy);
    bool is_capacity_provider_strategy_Set() const;
    bool is_capacity_provider_strategy_Valid() const;

    OAILaunchType getLaunchType() const;
    void setLaunchType(const OAILaunchType &launch_type);
    bool is_launch_type_Set() const;
    bool is_launch_type_Valid() const;

    QString getPlatformVersion() const;
    void setPlatformVersion(const QString &platform_version);
    bool is_platform_version_Set() const;
    bool is_platform_version_Valid() const;

    QString getPlatformFamily() const;
    void setPlatformFamily(const QString &platform_family);
    bool is_platform_family_Set() const;
    bool is_platform_family_Valid() const;

    OAIStartTaskRequest_networkConfiguration getNetworkConfiguration() const;
    void setNetworkConfiguration(const OAIStartTaskRequest_networkConfiguration &network_configuration);
    bool is_network_configuration_Set() const;
    bool is_network_configuration_Valid() const;

    OAIDeploymentRolloutState getRolloutState() const;
    void setRolloutState(const OAIDeploymentRolloutState &rollout_state);
    bool is_rollout_state_Set() const;
    bool is_rollout_state_Valid() const;

    QString getRolloutStateReason() const;
    void setRolloutStateReason(const QString &rollout_state_reason);
    bool is_rollout_state_reason_Set() const;
    bool is_rollout_state_reason_Valid() const;

    OAIDeployment_serviceConnectConfiguration getServiceConnectConfiguration() const;
    void setServiceConnectConfiguration(const OAIDeployment_serviceConnectConfiguration &service_connect_configuration);
    bool is_service_connect_configuration_Set() const;
    bool is_service_connect_configuration_Valid() const;

    QList getServiceConnectResources() const;
    void setServiceConnectResources(const QList &service_connect_resources);
    bool is_service_connect_resources_Set() const;
    bool is_service_connect_resources_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_task_definition;
    bool m_task_definition_isSet;
    bool m_task_definition_isValid;

    qint32 m_desired_count;
    bool m_desired_count_isSet;
    bool m_desired_count_isValid;

    qint32 m_pending_count;
    bool m_pending_count_isSet;
    bool m_pending_count_isValid;

    qint32 m_running_count;
    bool m_running_count_isSet;
    bool m_running_count_isValid;

    qint32 m_failed_tasks;
    bool m_failed_tasks_isSet;
    bool m_failed_tasks_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QList m_capacity_provider_strategy;
    bool m_capacity_provider_strategy_isSet;
    bool m_capacity_provider_strategy_isValid;

    OAILaunchType m_launch_type;
    bool m_launch_type_isSet;
    bool m_launch_type_isValid;

    QString m_platform_version;
    bool m_platform_version_isSet;
    bool m_platform_version_isValid;

    QString m_platform_family;
    bool m_platform_family_isSet;
    bool m_platform_family_isValid;

    OAIStartTaskRequest_networkConfiguration m_network_configuration;
    bool m_network_configuration_isSet;
    bool m_network_configuration_isValid;

    OAIDeploymentRolloutState m_rollout_state;
    bool m_rollout_state_isSet;
    bool m_rollout_state_isValid;

    QString m_rollout_state_reason;
    bool m_rollout_state_reason_isSet;
    bool m_rollout_state_reason_isValid;

    OAIDeployment_serviceConnectConfiguration m_service_connect_configuration;
    bool m_service_connect_configuration_isSet;
    bool m_service_connect_configuration_isValid;

    QList m_service_connect_resources;
    bool m_service_connect_resources_isSet;
    bool m_service_connect_resources_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeployment)

#endif // OAIDeployment_H
