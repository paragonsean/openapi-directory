/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerOverride::OAIContainerOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerOverride::OAIContainerOverride() {
    this->initializeModel();
}

OAIContainerOverride::~OAIContainerOverride() {}

void OAIContainerOverride::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_environment_files_isSet = false;
    m_environment_files_isValid = false;

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_memory_reservation_isSet = false;
    m_memory_reservation_isValid = false;

    m_resource_requirements_isSet = false;
    m_resource_requirements_isValid = false;
}

void OAIContainerOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerOverride::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_environment_files_isValid = ::OpenAPI::fromJsonValue(m_environment_files, json[QString("environmentFiles")]);
    m_environment_files_isSet = !json[QString("environmentFiles")].isNull() && m_environment_files_isValid;

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("cpu")]);
    m_cpu_isSet = !json[QString("cpu")].isNull() && m_cpu_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_memory_reservation_isValid = ::OpenAPI::fromJsonValue(m_memory_reservation, json[QString("memoryReservation")]);
    m_memory_reservation_isSet = !json[QString("memoryReservation")].isNull() && m_memory_reservation_isValid;

    m_resource_requirements_isValid = ::OpenAPI::fromJsonValue(m_resource_requirements, json[QString("resourceRequirements")]);
    m_resource_requirements_isSet = !json[QString("resourceRequirements")].isNull() && m_resource_requirements_isValid;
}

QString OAIContainerOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_command.isSet()) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_environment_files.isSet()) {
        obj.insert(QString("environmentFiles"), ::OpenAPI::toJsonValue(m_environment_files));
    }
    if (m_cpu_isSet) {
        obj.insert(QString("cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_memory_reservation_isSet) {
        obj.insert(QString("memoryReservation"), ::OpenAPI::toJsonValue(m_memory_reservation));
    }
    if (m_resource_requirements.isSet()) {
        obj.insert(QString("resourceRequirements"), ::OpenAPI::toJsonValue(m_resource_requirements));
    }
    return obj;
}

QString OAIContainerOverride::getName() const {
    return m_name;
}
void OAIContainerOverride::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContainerOverride::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContainerOverride::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIContainerOverride::getCommand() const {
    return m_command;
}
void OAIContainerOverride::setCommand(const QList &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIContainerOverride::is_command_Set() const{
    return m_command_isSet;
}

bool OAIContainerOverride::is_command_Valid() const{
    return m_command_isValid;
}

QList OAIContainerOverride::getEnvironment() const {
    return m_environment;
}
void OAIContainerOverride::setEnvironment(const QList &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIContainerOverride::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIContainerOverride::is_environment_Valid() const{
    return m_environment_isValid;
}

QList OAIContainerOverride::getEnvironmentFiles() const {
    return m_environment_files;
}
void OAIContainerOverride::setEnvironmentFiles(const QList &environment_files) {
    m_environment_files = environment_files;
    m_environment_files_isSet = true;
}

bool OAIContainerOverride::is_environment_files_Set() const{
    return m_environment_files_isSet;
}

bool OAIContainerOverride::is_environment_files_Valid() const{
    return m_environment_files_isValid;
}

qint32 OAIContainerOverride::getCpu() const {
    return m_cpu;
}
void OAIContainerOverride::setCpu(const qint32 &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAIContainerOverride::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAIContainerOverride::is_cpu_Valid() const{
    return m_cpu_isValid;
}

qint32 OAIContainerOverride::getMemory() const {
    return m_memory;
}
void OAIContainerOverride::setMemory(const qint32 &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIContainerOverride::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIContainerOverride::is_memory_Valid() const{
    return m_memory_isValid;
}

qint32 OAIContainerOverride::getMemoryReservation() const {
    return m_memory_reservation;
}
void OAIContainerOverride::setMemoryReservation(const qint32 &memory_reservation) {
    m_memory_reservation = memory_reservation;
    m_memory_reservation_isSet = true;
}

bool OAIContainerOverride::is_memory_reservation_Set() const{
    return m_memory_reservation_isSet;
}

bool OAIContainerOverride::is_memory_reservation_Valid() const{
    return m_memory_reservation_isValid;
}

QList OAIContainerOverride::getResourceRequirements() const {
    return m_resource_requirements;
}
void OAIContainerOverride::setResourceRequirements(const QList &resource_requirements) {
    m_resource_requirements = resource_requirements;
    m_resource_requirements_isSet = true;
}

bool OAIContainerOverride::is_resource_requirements_Set() const{
    return m_resource_requirements_isSet;
}

bool OAIContainerOverride::is_resource_requirements_Valid() const{
    return m_resource_requirements_isValid;
}

bool OAIContainerOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_files.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_reservation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
