/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerDefinition::OAIContainerDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerDefinition::OAIContainerDefinition() {
    this->initializeModel();
}

OAIContainerDefinition::~OAIContainerDefinition() {}

void OAIContainerDefinition::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_repository_credentials_isSet = false;
    m_repository_credentials_isValid = false;

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_memory_reservation_isSet = false;
    m_memory_reservation_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_port_mappings_isSet = false;
    m_port_mappings_isValid = false;

    m_essential_isSet = false;
    m_essential_isValid = false;

    m_entry_point_isSet = false;
    m_entry_point_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_environment_files_isSet = false;
    m_environment_files_isValid = false;

    m_mount_points_isSet = false;
    m_mount_points_isValid = false;

    m_volumes_from_isSet = false;
    m_volumes_from_isValid = false;

    m_linux_parameters_isSet = false;
    m_linux_parameters_isValid = false;

    m_secrets_isSet = false;
    m_secrets_isValid = false;

    m_depends_on_isSet = false;
    m_depends_on_isValid = false;

    m_start_timeout_isSet = false;
    m_start_timeout_isValid = false;

    m_stop_timeout_isSet = false;
    m_stop_timeout_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_working_directory_isSet = false;
    m_working_directory_isValid = false;

    m_disable_networking_isSet = false;
    m_disable_networking_isValid = false;

    m_privileged_isSet = false;
    m_privileged_isValid = false;

    m_readonly_root_filesystem_isSet = false;
    m_readonly_root_filesystem_isValid = false;

    m_dns_servers_isSet = false;
    m_dns_servers_isValid = false;

    m_dns_search_domains_isSet = false;
    m_dns_search_domains_isValid = false;

    m_extra_hosts_isSet = false;
    m_extra_hosts_isValid = false;

    m_docker_security_options_isSet = false;
    m_docker_security_options_isValid = false;

    m_interactive_isSet = false;
    m_interactive_isValid = false;

    m_pseudo_terminal_isSet = false;
    m_pseudo_terminal_isValid = false;

    m_docker_labels_isSet = false;
    m_docker_labels_isValid = false;

    m_ulimits_isSet = false;
    m_ulimits_isValid = false;

    m_log_configuration_isSet = false;
    m_log_configuration_isValid = false;

    m_health_check_isSet = false;
    m_health_check_isValid = false;

    m_system_controls_isSet = false;
    m_system_controls_isValid = false;

    m_resource_requirements_isSet = false;
    m_resource_requirements_isValid = false;

    m_firelens_configuration_isSet = false;
    m_firelens_configuration_isValid = false;

    m_credential_specs_isSet = false;
    m_credential_specs_isValid = false;
}

void OAIContainerDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerDefinition::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_repository_credentials_isValid = ::OpenAPI::fromJsonValue(m_repository_credentials, json[QString("repositoryCredentials")]);
    m_repository_credentials_isSet = !json[QString("repositoryCredentials")].isNull() && m_repository_credentials_isValid;

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("cpu")]);
    m_cpu_isSet = !json[QString("cpu")].isNull() && m_cpu_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_memory_reservation_isValid = ::OpenAPI::fromJsonValue(m_memory_reservation, json[QString("memoryReservation")]);
    m_memory_reservation_isSet = !json[QString("memoryReservation")].isNull() && m_memory_reservation_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_port_mappings_isValid = ::OpenAPI::fromJsonValue(m_port_mappings, json[QString("portMappings")]);
    m_port_mappings_isSet = !json[QString("portMappings")].isNull() && m_port_mappings_isValid;

    m_essential_isValid = ::OpenAPI::fromJsonValue(m_essential, json[QString("essential")]);
    m_essential_isSet = !json[QString("essential")].isNull() && m_essential_isValid;

    m_entry_point_isValid = ::OpenAPI::fromJsonValue(m_entry_point, json[QString("entryPoint")]);
    m_entry_point_isSet = !json[QString("entryPoint")].isNull() && m_entry_point_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_environment_files_isValid = ::OpenAPI::fromJsonValue(m_environment_files, json[QString("environmentFiles")]);
    m_environment_files_isSet = !json[QString("environmentFiles")].isNull() && m_environment_files_isValid;

    m_mount_points_isValid = ::OpenAPI::fromJsonValue(m_mount_points, json[QString("mountPoints")]);
    m_mount_points_isSet = !json[QString("mountPoints")].isNull() && m_mount_points_isValid;

    m_volumes_from_isValid = ::OpenAPI::fromJsonValue(m_volumes_from, json[QString("volumesFrom")]);
    m_volumes_from_isSet = !json[QString("volumesFrom")].isNull() && m_volumes_from_isValid;

    m_linux_parameters_isValid = ::OpenAPI::fromJsonValue(m_linux_parameters, json[QString("linuxParameters")]);
    m_linux_parameters_isSet = !json[QString("linuxParameters")].isNull() && m_linux_parameters_isValid;

    m_secrets_isValid = ::OpenAPI::fromJsonValue(m_secrets, json[QString("secrets")]);
    m_secrets_isSet = !json[QString("secrets")].isNull() && m_secrets_isValid;

    m_depends_on_isValid = ::OpenAPI::fromJsonValue(m_depends_on, json[QString("dependsOn")]);
    m_depends_on_isSet = !json[QString("dependsOn")].isNull() && m_depends_on_isValid;

    m_start_timeout_isValid = ::OpenAPI::fromJsonValue(m_start_timeout, json[QString("startTimeout")]);
    m_start_timeout_isSet = !json[QString("startTimeout")].isNull() && m_start_timeout_isValid;

    m_stop_timeout_isValid = ::OpenAPI::fromJsonValue(m_stop_timeout, json[QString("stopTimeout")]);
    m_stop_timeout_isSet = !json[QString("stopTimeout")].isNull() && m_stop_timeout_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_working_directory_isValid = ::OpenAPI::fromJsonValue(m_working_directory, json[QString("workingDirectory")]);
    m_working_directory_isSet = !json[QString("workingDirectory")].isNull() && m_working_directory_isValid;

    m_disable_networking_isValid = ::OpenAPI::fromJsonValue(m_disable_networking, json[QString("disableNetworking")]);
    m_disable_networking_isSet = !json[QString("disableNetworking")].isNull() && m_disable_networking_isValid;

    m_privileged_isValid = ::OpenAPI::fromJsonValue(m_privileged, json[QString("privileged")]);
    m_privileged_isSet = !json[QString("privileged")].isNull() && m_privileged_isValid;

    m_readonly_root_filesystem_isValid = ::OpenAPI::fromJsonValue(m_readonly_root_filesystem, json[QString("readonlyRootFilesystem")]);
    m_readonly_root_filesystem_isSet = !json[QString("readonlyRootFilesystem")].isNull() && m_readonly_root_filesystem_isValid;

    m_dns_servers_isValid = ::OpenAPI::fromJsonValue(m_dns_servers, json[QString("dnsServers")]);
    m_dns_servers_isSet = !json[QString("dnsServers")].isNull() && m_dns_servers_isValid;

    m_dns_search_domains_isValid = ::OpenAPI::fromJsonValue(m_dns_search_domains, json[QString("dnsSearchDomains")]);
    m_dns_search_domains_isSet = !json[QString("dnsSearchDomains")].isNull() && m_dns_search_domains_isValid;

    m_extra_hosts_isValid = ::OpenAPI::fromJsonValue(m_extra_hosts, json[QString("extraHosts")]);
    m_extra_hosts_isSet = !json[QString("extraHosts")].isNull() && m_extra_hosts_isValid;

    m_docker_security_options_isValid = ::OpenAPI::fromJsonValue(m_docker_security_options, json[QString("dockerSecurityOptions")]);
    m_docker_security_options_isSet = !json[QString("dockerSecurityOptions")].isNull() && m_docker_security_options_isValid;

    m_interactive_isValid = ::OpenAPI::fromJsonValue(m_interactive, json[QString("interactive")]);
    m_interactive_isSet = !json[QString("interactive")].isNull() && m_interactive_isValid;

    m_pseudo_terminal_isValid = ::OpenAPI::fromJsonValue(m_pseudo_terminal, json[QString("pseudoTerminal")]);
    m_pseudo_terminal_isSet = !json[QString("pseudoTerminal")].isNull() && m_pseudo_terminal_isValid;

    m_docker_labels_isValid = ::OpenAPI::fromJsonValue(m_docker_labels, json[QString("dockerLabels")]);
    m_docker_labels_isSet = !json[QString("dockerLabels")].isNull() && m_docker_labels_isValid;

    m_ulimits_isValid = ::OpenAPI::fromJsonValue(m_ulimits, json[QString("ulimits")]);
    m_ulimits_isSet = !json[QString("ulimits")].isNull() && m_ulimits_isValid;

    m_log_configuration_isValid = ::OpenAPI::fromJsonValue(m_log_configuration, json[QString("logConfiguration")]);
    m_log_configuration_isSet = !json[QString("logConfiguration")].isNull() && m_log_configuration_isValid;

    m_health_check_isValid = ::OpenAPI::fromJsonValue(m_health_check, json[QString("healthCheck")]);
    m_health_check_isSet = !json[QString("healthCheck")].isNull() && m_health_check_isValid;

    m_system_controls_isValid = ::OpenAPI::fromJsonValue(m_system_controls, json[QString("systemControls")]);
    m_system_controls_isSet = !json[QString("systemControls")].isNull() && m_system_controls_isValid;

    m_resource_requirements_isValid = ::OpenAPI::fromJsonValue(m_resource_requirements, json[QString("resourceRequirements")]);
    m_resource_requirements_isSet = !json[QString("resourceRequirements")].isNull() && m_resource_requirements_isValid;

    m_firelens_configuration_isValid = ::OpenAPI::fromJsonValue(m_firelens_configuration, json[QString("firelensConfiguration")]);
    m_firelens_configuration_isSet = !json[QString("firelensConfiguration")].isNull() && m_firelens_configuration_isValid;

    m_credential_specs_isValid = ::OpenAPI::fromJsonValue(m_credential_specs, json[QString("credentialSpecs")]);
    m_credential_specs_isSet = !json[QString("credentialSpecs")].isNull() && m_credential_specs_isValid;
}

QString OAIContainerDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_repository_credentials.isSet()) {
        obj.insert(QString("repositoryCredentials"), ::OpenAPI::toJsonValue(m_repository_credentials));
    }
    if (m_cpu_isSet) {
        obj.insert(QString("cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_memory_reservation_isSet) {
        obj.insert(QString("memoryReservation"), ::OpenAPI::toJsonValue(m_memory_reservation));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_port_mappings.isSet()) {
        obj.insert(QString("portMappings"), ::OpenAPI::toJsonValue(m_port_mappings));
    }
    if (m_essential_isSet) {
        obj.insert(QString("essential"), ::OpenAPI::toJsonValue(m_essential));
    }
    if (m_entry_point.isSet()) {
        obj.insert(QString("entryPoint"), ::OpenAPI::toJsonValue(m_entry_point));
    }
    if (m_command.isSet()) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_environment_files.isSet()) {
        obj.insert(QString("environmentFiles"), ::OpenAPI::toJsonValue(m_environment_files));
    }
    if (m_mount_points.isSet()) {
        obj.insert(QString("mountPoints"), ::OpenAPI::toJsonValue(m_mount_points));
    }
    if (m_volumes_from.isSet()) {
        obj.insert(QString("volumesFrom"), ::OpenAPI::toJsonValue(m_volumes_from));
    }
    if (m_linux_parameters.isSet()) {
        obj.insert(QString("linuxParameters"), ::OpenAPI::toJsonValue(m_linux_parameters));
    }
    if (m_secrets.isSet()) {
        obj.insert(QString("secrets"), ::OpenAPI::toJsonValue(m_secrets));
    }
    if (m_depends_on.isSet()) {
        obj.insert(QString("dependsOn"), ::OpenAPI::toJsonValue(m_depends_on));
    }
    if (m_start_timeout_isSet) {
        obj.insert(QString("startTimeout"), ::OpenAPI::toJsonValue(m_start_timeout));
    }
    if (m_stop_timeout_isSet) {
        obj.insert(QString("stopTimeout"), ::OpenAPI::toJsonValue(m_stop_timeout));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_working_directory_isSet) {
        obj.insert(QString("workingDirectory"), ::OpenAPI::toJsonValue(m_working_directory));
    }
    if (m_disable_networking_isSet) {
        obj.insert(QString("disableNetworking"), ::OpenAPI::toJsonValue(m_disable_networking));
    }
    if (m_privileged_isSet) {
        obj.insert(QString("privileged"), ::OpenAPI::toJsonValue(m_privileged));
    }
    if (m_readonly_root_filesystem_isSet) {
        obj.insert(QString("readonlyRootFilesystem"), ::OpenAPI::toJsonValue(m_readonly_root_filesystem));
    }
    if (m_dns_servers.isSet()) {
        obj.insert(QString("dnsServers"), ::OpenAPI::toJsonValue(m_dns_servers));
    }
    if (m_dns_search_domains.isSet()) {
        obj.insert(QString("dnsSearchDomains"), ::OpenAPI::toJsonValue(m_dns_search_domains));
    }
    if (m_extra_hosts.isSet()) {
        obj.insert(QString("extraHosts"), ::OpenAPI::toJsonValue(m_extra_hosts));
    }
    if (m_docker_security_options.isSet()) {
        obj.insert(QString("dockerSecurityOptions"), ::OpenAPI::toJsonValue(m_docker_security_options));
    }
    if (m_interactive_isSet) {
        obj.insert(QString("interactive"), ::OpenAPI::toJsonValue(m_interactive));
    }
    if (m_pseudo_terminal_isSet) {
        obj.insert(QString("pseudoTerminal"), ::OpenAPI::toJsonValue(m_pseudo_terminal));
    }
    if (m_docker_labels.isSet()) {
        obj.insert(QString("dockerLabels"), ::OpenAPI::toJsonValue(m_docker_labels));
    }
    if (m_ulimits.isSet()) {
        obj.insert(QString("ulimits"), ::OpenAPI::toJsonValue(m_ulimits));
    }
    if (m_log_configuration.isSet()) {
        obj.insert(QString("logConfiguration"), ::OpenAPI::toJsonValue(m_log_configuration));
    }
    if (m_health_check.isSet()) {
        obj.insert(QString("healthCheck"), ::OpenAPI::toJsonValue(m_health_check));
    }
    if (m_system_controls.isSet()) {
        obj.insert(QString("systemControls"), ::OpenAPI::toJsonValue(m_system_controls));
    }
    if (m_resource_requirements.isSet()) {
        obj.insert(QString("resourceRequirements"), ::OpenAPI::toJsonValue(m_resource_requirements));
    }
    if (m_firelens_configuration.isSet()) {
        obj.insert(QString("firelensConfiguration"), ::OpenAPI::toJsonValue(m_firelens_configuration));
    }
    if (m_credential_specs.isSet()) {
        obj.insert(QString("credentialSpecs"), ::OpenAPI::toJsonValue(m_credential_specs));
    }
    return obj;
}

QString OAIContainerDefinition::getName() const {
    return m_name;
}
void OAIContainerDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContainerDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContainerDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContainerDefinition::getImage() const {
    return m_image;
}
void OAIContainerDefinition::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIContainerDefinition::is_image_Set() const{
    return m_image_isSet;
}

bool OAIContainerDefinition::is_image_Valid() const{
    return m_image_isValid;
}

OAIContainerDefinition_repositoryCredentials OAIContainerDefinition::getRepositoryCredentials() const {
    return m_repository_credentials;
}
void OAIContainerDefinition::setRepositoryCredentials(const OAIContainerDefinition_repositoryCredentials &repository_credentials) {
    m_repository_credentials = repository_credentials;
    m_repository_credentials_isSet = true;
}

bool OAIContainerDefinition::is_repository_credentials_Set() const{
    return m_repository_credentials_isSet;
}

bool OAIContainerDefinition::is_repository_credentials_Valid() const{
    return m_repository_credentials_isValid;
}

qint32 OAIContainerDefinition::getCpu() const {
    return m_cpu;
}
void OAIContainerDefinition::setCpu(const qint32 &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAIContainerDefinition::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAIContainerDefinition::is_cpu_Valid() const{
    return m_cpu_isValid;
}

qint32 OAIContainerDefinition::getMemory() const {
    return m_memory;
}
void OAIContainerDefinition::setMemory(const qint32 &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIContainerDefinition::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIContainerDefinition::is_memory_Valid() const{
    return m_memory_isValid;
}

qint32 OAIContainerDefinition::getMemoryReservation() const {
    return m_memory_reservation;
}
void OAIContainerDefinition::setMemoryReservation(const qint32 &memory_reservation) {
    m_memory_reservation = memory_reservation;
    m_memory_reservation_isSet = true;
}

bool OAIContainerDefinition::is_memory_reservation_Set() const{
    return m_memory_reservation_isSet;
}

bool OAIContainerDefinition::is_memory_reservation_Valid() const{
    return m_memory_reservation_isValid;
}

QList OAIContainerDefinition::getLinks() const {
    return m_links;
}
void OAIContainerDefinition::setLinks(const QList &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIContainerDefinition::is_links_Set() const{
    return m_links_isSet;
}

bool OAIContainerDefinition::is_links_Valid() const{
    return m_links_isValid;
}

QList OAIContainerDefinition::getPortMappings() const {
    return m_port_mappings;
}
void OAIContainerDefinition::setPortMappings(const QList &port_mappings) {
    m_port_mappings = port_mappings;
    m_port_mappings_isSet = true;
}

bool OAIContainerDefinition::is_port_mappings_Set() const{
    return m_port_mappings_isSet;
}

bool OAIContainerDefinition::is_port_mappings_Valid() const{
    return m_port_mappings_isValid;
}

bool OAIContainerDefinition::getEssential() const {
    return m_essential;
}
void OAIContainerDefinition::setEssential(const bool &essential) {
    m_essential = essential;
    m_essential_isSet = true;
}

bool OAIContainerDefinition::is_essential_Set() const{
    return m_essential_isSet;
}

bool OAIContainerDefinition::is_essential_Valid() const{
    return m_essential_isValid;
}

QList OAIContainerDefinition::getEntryPoint() const {
    return m_entry_point;
}
void OAIContainerDefinition::setEntryPoint(const QList &entry_point) {
    m_entry_point = entry_point;
    m_entry_point_isSet = true;
}

bool OAIContainerDefinition::is_entry_point_Set() const{
    return m_entry_point_isSet;
}

bool OAIContainerDefinition::is_entry_point_Valid() const{
    return m_entry_point_isValid;
}

QList OAIContainerDefinition::getCommand() const {
    return m_command;
}
void OAIContainerDefinition::setCommand(const QList &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIContainerDefinition::is_command_Set() const{
    return m_command_isSet;
}

bool OAIContainerDefinition::is_command_Valid() const{
    return m_command_isValid;
}

QList OAIContainerDefinition::getEnvironment() const {
    return m_environment;
}
void OAIContainerDefinition::setEnvironment(const QList &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIContainerDefinition::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIContainerDefinition::is_environment_Valid() const{
    return m_environment_isValid;
}

QList OAIContainerDefinition::getEnvironmentFiles() const {
    return m_environment_files;
}
void OAIContainerDefinition::setEnvironmentFiles(const QList &environment_files) {
    m_environment_files = environment_files;
    m_environment_files_isSet = true;
}

bool OAIContainerDefinition::is_environment_files_Set() const{
    return m_environment_files_isSet;
}

bool OAIContainerDefinition::is_environment_files_Valid() const{
    return m_environment_files_isValid;
}

QList OAIContainerDefinition::getMountPoints() const {
    return m_mount_points;
}
void OAIContainerDefinition::setMountPoints(const QList &mount_points) {
    m_mount_points = mount_points;
    m_mount_points_isSet = true;
}

bool OAIContainerDefinition::is_mount_points_Set() const{
    return m_mount_points_isSet;
}

bool OAIContainerDefinition::is_mount_points_Valid() const{
    return m_mount_points_isValid;
}

QList OAIContainerDefinition::getVolumesFrom() const {
    return m_volumes_from;
}
void OAIContainerDefinition::setVolumesFrom(const QList &volumes_from) {
    m_volumes_from = volumes_from;
    m_volumes_from_isSet = true;
}

bool OAIContainerDefinition::is_volumes_from_Set() const{
    return m_volumes_from_isSet;
}

bool OAIContainerDefinition::is_volumes_from_Valid() const{
    return m_volumes_from_isValid;
}

OAIContainerDefinition_linuxParameters OAIContainerDefinition::getLinuxParameters() const {
    return m_linux_parameters;
}
void OAIContainerDefinition::setLinuxParameters(const OAIContainerDefinition_linuxParameters &linux_parameters) {
    m_linux_parameters = linux_parameters;
    m_linux_parameters_isSet = true;
}

bool OAIContainerDefinition::is_linux_parameters_Set() const{
    return m_linux_parameters_isSet;
}

bool OAIContainerDefinition::is_linux_parameters_Valid() const{
    return m_linux_parameters_isValid;
}

QList OAIContainerDefinition::getSecrets() const {
    return m_secrets;
}
void OAIContainerDefinition::setSecrets(const QList &secrets) {
    m_secrets = secrets;
    m_secrets_isSet = true;
}

bool OAIContainerDefinition::is_secrets_Set() const{
    return m_secrets_isSet;
}

bool OAIContainerDefinition::is_secrets_Valid() const{
    return m_secrets_isValid;
}

QList OAIContainerDefinition::getDependsOn() const {
    return m_depends_on;
}
void OAIContainerDefinition::setDependsOn(const QList &depends_on) {
    m_depends_on = depends_on;
    m_depends_on_isSet = true;
}

bool OAIContainerDefinition::is_depends_on_Set() const{
    return m_depends_on_isSet;
}

bool OAIContainerDefinition::is_depends_on_Valid() const{
    return m_depends_on_isValid;
}

qint32 OAIContainerDefinition::getStartTimeout() const {
    return m_start_timeout;
}
void OAIContainerDefinition::setStartTimeout(const qint32 &start_timeout) {
    m_start_timeout = start_timeout;
    m_start_timeout_isSet = true;
}

bool OAIContainerDefinition::is_start_timeout_Set() const{
    return m_start_timeout_isSet;
}

bool OAIContainerDefinition::is_start_timeout_Valid() const{
    return m_start_timeout_isValid;
}

qint32 OAIContainerDefinition::getStopTimeout() const {
    return m_stop_timeout;
}
void OAIContainerDefinition::setStopTimeout(const qint32 &stop_timeout) {
    m_stop_timeout = stop_timeout;
    m_stop_timeout_isSet = true;
}

bool OAIContainerDefinition::is_stop_timeout_Set() const{
    return m_stop_timeout_isSet;
}

bool OAIContainerDefinition::is_stop_timeout_Valid() const{
    return m_stop_timeout_isValid;
}

QString OAIContainerDefinition::getHostname() const {
    return m_hostname;
}
void OAIContainerDefinition::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIContainerDefinition::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIContainerDefinition::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIContainerDefinition::getUser() const {
    return m_user;
}
void OAIContainerDefinition::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIContainerDefinition::is_user_Set() const{
    return m_user_isSet;
}

bool OAIContainerDefinition::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIContainerDefinition::getWorkingDirectory() const {
    return m_working_directory;
}
void OAIContainerDefinition::setWorkingDirectory(const QString &working_directory) {
    m_working_directory = working_directory;
    m_working_directory_isSet = true;
}

bool OAIContainerDefinition::is_working_directory_Set() const{
    return m_working_directory_isSet;
}

bool OAIContainerDefinition::is_working_directory_Valid() const{
    return m_working_directory_isValid;
}

bool OAIContainerDefinition::getDisableNetworking() const {
    return m_disable_networking;
}
void OAIContainerDefinition::setDisableNetworking(const bool &disable_networking) {
    m_disable_networking = disable_networking;
    m_disable_networking_isSet = true;
}

bool OAIContainerDefinition::is_disable_networking_Set() const{
    return m_disable_networking_isSet;
}

bool OAIContainerDefinition::is_disable_networking_Valid() const{
    return m_disable_networking_isValid;
}

bool OAIContainerDefinition::getPrivileged() const {
    return m_privileged;
}
void OAIContainerDefinition::setPrivileged(const bool &privileged) {
    m_privileged = privileged;
    m_privileged_isSet = true;
}

bool OAIContainerDefinition::is_privileged_Set() const{
    return m_privileged_isSet;
}

bool OAIContainerDefinition::is_privileged_Valid() const{
    return m_privileged_isValid;
}

bool OAIContainerDefinition::getReadonlyRootFilesystem() const {
    return m_readonly_root_filesystem;
}
void OAIContainerDefinition::setReadonlyRootFilesystem(const bool &readonly_root_filesystem) {
    m_readonly_root_filesystem = readonly_root_filesystem;
    m_readonly_root_filesystem_isSet = true;
}

bool OAIContainerDefinition::is_readonly_root_filesystem_Set() const{
    return m_readonly_root_filesystem_isSet;
}

bool OAIContainerDefinition::is_readonly_root_filesystem_Valid() const{
    return m_readonly_root_filesystem_isValid;
}

QList OAIContainerDefinition::getDnsServers() const {
    return m_dns_servers;
}
void OAIContainerDefinition::setDnsServers(const QList &dns_servers) {
    m_dns_servers = dns_servers;
    m_dns_servers_isSet = true;
}

bool OAIContainerDefinition::is_dns_servers_Set() const{
    return m_dns_servers_isSet;
}

bool OAIContainerDefinition::is_dns_servers_Valid() const{
    return m_dns_servers_isValid;
}

QList OAIContainerDefinition::getDnsSearchDomains() const {
    return m_dns_search_domains;
}
void OAIContainerDefinition::setDnsSearchDomains(const QList &dns_search_domains) {
    m_dns_search_domains = dns_search_domains;
    m_dns_search_domains_isSet = true;
}

bool OAIContainerDefinition::is_dns_search_domains_Set() const{
    return m_dns_search_domains_isSet;
}

bool OAIContainerDefinition::is_dns_search_domains_Valid() const{
    return m_dns_search_domains_isValid;
}

QList OAIContainerDefinition::getExtraHosts() const {
    return m_extra_hosts;
}
void OAIContainerDefinition::setExtraHosts(const QList &extra_hosts) {
    m_extra_hosts = extra_hosts;
    m_extra_hosts_isSet = true;
}

bool OAIContainerDefinition::is_extra_hosts_Set() const{
    return m_extra_hosts_isSet;
}

bool OAIContainerDefinition::is_extra_hosts_Valid() const{
    return m_extra_hosts_isValid;
}

QList OAIContainerDefinition::getDockerSecurityOptions() const {
    return m_docker_security_options;
}
void OAIContainerDefinition::setDockerSecurityOptions(const QList &docker_security_options) {
    m_docker_security_options = docker_security_options;
    m_docker_security_options_isSet = true;
}

bool OAIContainerDefinition::is_docker_security_options_Set() const{
    return m_docker_security_options_isSet;
}

bool OAIContainerDefinition::is_docker_security_options_Valid() const{
    return m_docker_security_options_isValid;
}

bool OAIContainerDefinition::getInteractive() const {
    return m_interactive;
}
void OAIContainerDefinition::setInteractive(const bool &interactive) {
    m_interactive = interactive;
    m_interactive_isSet = true;
}

bool OAIContainerDefinition::is_interactive_Set() const{
    return m_interactive_isSet;
}

bool OAIContainerDefinition::is_interactive_Valid() const{
    return m_interactive_isValid;
}

bool OAIContainerDefinition::getPseudoTerminal() const {
    return m_pseudo_terminal;
}
void OAIContainerDefinition::setPseudoTerminal(const bool &pseudo_terminal) {
    m_pseudo_terminal = pseudo_terminal;
    m_pseudo_terminal_isSet = true;
}

bool OAIContainerDefinition::is_pseudo_terminal_Set() const{
    return m_pseudo_terminal_isSet;
}

bool OAIContainerDefinition::is_pseudo_terminal_Valid() const{
    return m_pseudo_terminal_isValid;
}

QMap OAIContainerDefinition::getDockerLabels() const {
    return m_docker_labels;
}
void OAIContainerDefinition::setDockerLabels(const QMap &docker_labels) {
    m_docker_labels = docker_labels;
    m_docker_labels_isSet = true;
}

bool OAIContainerDefinition::is_docker_labels_Set() const{
    return m_docker_labels_isSet;
}

bool OAIContainerDefinition::is_docker_labels_Valid() const{
    return m_docker_labels_isValid;
}

QList OAIContainerDefinition::getUlimits() const {
    return m_ulimits;
}
void OAIContainerDefinition::setUlimits(const QList &ulimits) {
    m_ulimits = ulimits;
    m_ulimits_isSet = true;
}

bool OAIContainerDefinition::is_ulimits_Set() const{
    return m_ulimits_isSet;
}

bool OAIContainerDefinition::is_ulimits_Valid() const{
    return m_ulimits_isValid;
}

OAIContainerDefinition_logConfiguration OAIContainerDefinition::getLogConfiguration() const {
    return m_log_configuration;
}
void OAIContainerDefinition::setLogConfiguration(const OAIContainerDefinition_logConfiguration &log_configuration) {
    m_log_configuration = log_configuration;
    m_log_configuration_isSet = true;
}

bool OAIContainerDefinition::is_log_configuration_Set() const{
    return m_log_configuration_isSet;
}

bool OAIContainerDefinition::is_log_configuration_Valid() const{
    return m_log_configuration_isValid;
}

OAIContainerDefinition_healthCheck OAIContainerDefinition::getHealthCheck() const {
    return m_health_check;
}
void OAIContainerDefinition::setHealthCheck(const OAIContainerDefinition_healthCheck &health_check) {
    m_health_check = health_check;
    m_health_check_isSet = true;
}

bool OAIContainerDefinition::is_health_check_Set() const{
    return m_health_check_isSet;
}

bool OAIContainerDefinition::is_health_check_Valid() const{
    return m_health_check_isValid;
}

QList OAIContainerDefinition::getSystemControls() const {
    return m_system_controls;
}
void OAIContainerDefinition::setSystemControls(const QList &system_controls) {
    m_system_controls = system_controls;
    m_system_controls_isSet = true;
}

bool OAIContainerDefinition::is_system_controls_Set() const{
    return m_system_controls_isSet;
}

bool OAIContainerDefinition::is_system_controls_Valid() const{
    return m_system_controls_isValid;
}

QList OAIContainerDefinition::getResourceRequirements() const {
    return m_resource_requirements;
}
void OAIContainerDefinition::setResourceRequirements(const QList &resource_requirements) {
    m_resource_requirements = resource_requirements;
    m_resource_requirements_isSet = true;
}

bool OAIContainerDefinition::is_resource_requirements_Set() const{
    return m_resource_requirements_isSet;
}

bool OAIContainerDefinition::is_resource_requirements_Valid() const{
    return m_resource_requirements_isValid;
}

OAIContainerDefinition_firelensConfiguration OAIContainerDefinition::getFirelensConfiguration() const {
    return m_firelens_configuration;
}
void OAIContainerDefinition::setFirelensConfiguration(const OAIContainerDefinition_firelensConfiguration &firelens_configuration) {
    m_firelens_configuration = firelens_configuration;
    m_firelens_configuration_isSet = true;
}

bool OAIContainerDefinition::is_firelens_configuration_Set() const{
    return m_firelens_configuration_isSet;
}

bool OAIContainerDefinition::is_firelens_configuration_Valid() const{
    return m_firelens_configuration_isValid;
}

QList OAIContainerDefinition::getCredentialSpecs() const {
    return m_credential_specs;
}
void OAIContainerDefinition::setCredentialSpecs(const QList &credential_specs) {
    m_credential_specs = credential_specs;
    m_credential_specs_isSet = true;
}

bool OAIContainerDefinition::is_credential_specs_Set() const{
    return m_credential_specs_isSet;
}

bool OAIContainerDefinition::is_credential_specs_Valid() const{
    return m_credential_specs_isValid;
}

bool OAIContainerDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_reservation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_essential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_files.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_points.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linux_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secrets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_depends_on.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_networking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privileged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readonly_root_filesystem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_servers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_search_domains.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_hosts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_security_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pseudo_terminal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ulimits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_controls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firelens_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credential_specs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
