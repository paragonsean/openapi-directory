/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeTaskSetsRequest.h
 *
 * 
 */

#ifndef OAIDescribeTaskSetsRequest_H
#define OAIDescribeTaskSetsRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeTaskSetsRequest : public OAIObject {
public:
    OAIDescribeTaskSetsRequest();
    OAIDescribeTaskSetsRequest(QString json);
    ~OAIDescribeTaskSetsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCluster() const;
    void setCluster(const QString &cluster);
    bool is_cluster_Set() const;
    bool is_cluster_Valid() const;

    QString getService() const;
    void setService(const QString &service);
    bool is_service_Set() const;
    bool is_service_Valid() const;

    QList getTaskSets() const;
    void setTaskSets(const QList &task_sets);
    bool is_task_sets_Set() const;
    bool is_task_sets_Valid() const;

    QList getInclude() const;
    void setInclude(const QList &include);
    bool is_include_Set() const;
    bool is_include_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster;
    bool m_cluster_isSet;
    bool m_cluster_isValid;

    QString m_service;
    bool m_service_isSet;
    bool m_service_isValid;

    QList m_task_sets;
    bool m_task_sets_isSet;
    bool m_task_sets_isValid;

    QList m_include;
    bool m_include_isSet;
    bool m_include_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeTaskSetsRequest)

#endif // OAIDescribeTaskSetsRequest_H
