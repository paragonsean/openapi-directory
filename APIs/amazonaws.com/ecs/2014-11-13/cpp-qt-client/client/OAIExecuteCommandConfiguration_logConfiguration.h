/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExecuteCommandConfiguration_logConfiguration.h
 *
 * 
 */

#ifndef OAIExecuteCommandConfiguration_logConfiguration_H
#define OAIExecuteCommandConfiguration_logConfiguration_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIExecuteCommandConfiguration_logConfiguration : public OAIObject {
public:
    OAIExecuteCommandConfiguration_logConfiguration();
    OAIExecuteCommandConfiguration_logConfiguration(QString json);
    ~OAIExecuteCommandConfiguration_logConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCloudWatchLogGroupName() const;
    void setCloudWatchLogGroupName(const QString &cloud_watch_log_group_name);
    bool is_cloud_watch_log_group_name_Set() const;
    bool is_cloud_watch_log_group_name_Valid() const;

    bool getCloudWatchEncryptionEnabled() const;
    void setCloudWatchEncryptionEnabled(const bool &cloud_watch_encryption_enabled);
    bool is_cloud_watch_encryption_enabled_Set() const;
    bool is_cloud_watch_encryption_enabled_Valid() const;

    QString getS3BucketName() const;
    void setS3BucketName(const QString &s3_bucket_name);
    bool is_s3_bucket_name_Set() const;
    bool is_s3_bucket_name_Valid() const;

    bool getS3EncryptionEnabled() const;
    void setS3EncryptionEnabled(const bool &s3_encryption_enabled);
    bool is_s3_encryption_enabled_Set() const;
    bool is_s3_encryption_enabled_Valid() const;

    QString getS3KeyPrefix() const;
    void setS3KeyPrefix(const QString &s3_key_prefix);
    bool is_s3_key_prefix_Set() const;
    bool is_s3_key_prefix_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cloud_watch_log_group_name;
    bool m_cloud_watch_log_group_name_isSet;
    bool m_cloud_watch_log_group_name_isValid;

    bool m_cloud_watch_encryption_enabled;
    bool m_cloud_watch_encryption_enabled_isSet;
    bool m_cloud_watch_encryption_enabled_isValid;

    QString m_s3_bucket_name;
    bool m_s3_bucket_name_isSet;
    bool m_s3_bucket_name_isValid;

    bool m_s3_encryption_enabled;
    bool m_s3_encryption_enabled_isSet;
    bool m_s3_encryption_enabled_isValid;

    QString m_s3_key_prefix;
    bool m_s3_key_prefix_isSet;
    bool m_s3_key_prefix_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExecuteCommandConfiguration_logConfiguration)

#endif // OAIExecuteCommandConfiguration_logConfiguration_H
