/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateServiceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateServiceRequest::OAICreateServiceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateServiceRequest::OAICreateServiceRequest() {
    this->initializeModel();
}

OAICreateServiceRequest::~OAICreateServiceRequest() {}

void OAICreateServiceRequest::initializeModel() {

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_task_definition_isSet = false;
    m_task_definition_isValid = false;

    m_load_balancers_isSet = false;
    m_load_balancers_isValid = false;

    m_service_registries_isSet = false;
    m_service_registries_isValid = false;

    m_desired_count_isSet = false;
    m_desired_count_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_launch_type_isSet = false;
    m_launch_type_isValid = false;

    m_capacity_provider_strategy_isSet = false;
    m_capacity_provider_strategy_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_deployment_configuration_isSet = false;
    m_deployment_configuration_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_placement_strategy_isSet = false;
    m_placement_strategy_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_health_check_grace_period_seconds_isSet = false;
    m_health_check_grace_period_seconds_isValid = false;

    m_scheduling_strategy_isSet = false;
    m_scheduling_strategy_isValid = false;

    m_deployment_controller_isSet = false;
    m_deployment_controller_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_enable_ecs_managed_tags_isSet = false;
    m_enable_ecs_managed_tags_isValid = false;

    m_propagate_tags_isSet = false;
    m_propagate_tags_isValid = false;

    m_enable_execute_command_isSet = false;
    m_enable_execute_command_isValid = false;

    m_service_connect_configuration_isSet = false;
    m_service_connect_configuration_isValid = false;
}

void OAICreateServiceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateServiceRequest::fromJsonObject(QJsonObject json) {

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_task_definition_isValid = ::OpenAPI::fromJsonValue(m_task_definition, json[QString("taskDefinition")]);
    m_task_definition_isSet = !json[QString("taskDefinition")].isNull() && m_task_definition_isValid;

    m_load_balancers_isValid = ::OpenAPI::fromJsonValue(m_load_balancers, json[QString("loadBalancers")]);
    m_load_balancers_isSet = !json[QString("loadBalancers")].isNull() && m_load_balancers_isValid;

    m_service_registries_isValid = ::OpenAPI::fromJsonValue(m_service_registries, json[QString("serviceRegistries")]);
    m_service_registries_isSet = !json[QString("serviceRegistries")].isNull() && m_service_registries_isValid;

    m_desired_count_isValid = ::OpenAPI::fromJsonValue(m_desired_count, json[QString("desiredCount")]);
    m_desired_count_isSet = !json[QString("desiredCount")].isNull() && m_desired_count_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_launch_type_isValid = ::OpenAPI::fromJsonValue(m_launch_type, json[QString("launchType")]);
    m_launch_type_isSet = !json[QString("launchType")].isNull() && m_launch_type_isValid;

    m_capacity_provider_strategy_isValid = ::OpenAPI::fromJsonValue(m_capacity_provider_strategy, json[QString("capacityProviderStrategy")]);
    m_capacity_provider_strategy_isSet = !json[QString("capacityProviderStrategy")].isNull() && m_capacity_provider_strategy_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("platformVersion")]);
    m_platform_version_isSet = !json[QString("platformVersion")].isNull() && m_platform_version_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_deployment_configuration_isValid = ::OpenAPI::fromJsonValue(m_deployment_configuration, json[QString("deploymentConfiguration")]);
    m_deployment_configuration_isSet = !json[QString("deploymentConfiguration")].isNull() && m_deployment_configuration_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("placementConstraints")]);
    m_placement_constraints_isSet = !json[QString("placementConstraints")].isNull() && m_placement_constraints_isValid;

    m_placement_strategy_isValid = ::OpenAPI::fromJsonValue(m_placement_strategy, json[QString("placementStrategy")]);
    m_placement_strategy_isSet = !json[QString("placementStrategy")].isNull() && m_placement_strategy_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("networkConfiguration")]);
    m_network_configuration_isSet = !json[QString("networkConfiguration")].isNull() && m_network_configuration_isValid;

    m_health_check_grace_period_seconds_isValid = ::OpenAPI::fromJsonValue(m_health_check_grace_period_seconds, json[QString("healthCheckGracePeriodSeconds")]);
    m_health_check_grace_period_seconds_isSet = !json[QString("healthCheckGracePeriodSeconds")].isNull() && m_health_check_grace_period_seconds_isValid;

    m_scheduling_strategy_isValid = ::OpenAPI::fromJsonValue(m_scheduling_strategy, json[QString("schedulingStrategy")]);
    m_scheduling_strategy_isSet = !json[QString("schedulingStrategy")].isNull() && m_scheduling_strategy_isValid;

    m_deployment_controller_isValid = ::OpenAPI::fromJsonValue(m_deployment_controller, json[QString("deploymentController")]);
    m_deployment_controller_isSet = !json[QString("deploymentController")].isNull() && m_deployment_controller_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_enable_ecs_managed_tags_isValid = ::OpenAPI::fromJsonValue(m_enable_ecs_managed_tags, json[QString("enableECSManagedTags")]);
    m_enable_ecs_managed_tags_isSet = !json[QString("enableECSManagedTags")].isNull() && m_enable_ecs_managed_tags_isValid;

    m_propagate_tags_isValid = ::OpenAPI::fromJsonValue(m_propagate_tags, json[QString("propagateTags")]);
    m_propagate_tags_isSet = !json[QString("propagateTags")].isNull() && m_propagate_tags_isValid;

    m_enable_execute_command_isValid = ::OpenAPI::fromJsonValue(m_enable_execute_command, json[QString("enableExecuteCommand")]);
    m_enable_execute_command_isSet = !json[QString("enableExecuteCommand")].isNull() && m_enable_execute_command_isValid;

    m_service_connect_configuration_isValid = ::OpenAPI::fromJsonValue(m_service_connect_configuration, json[QString("serviceConnectConfiguration")]);
    m_service_connect_configuration_isSet = !json[QString("serviceConnectConfiguration")].isNull() && m_service_connect_configuration_isValid;
}

QString OAICreateServiceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateServiceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_task_definition_isSet) {
        obj.insert(QString("taskDefinition"), ::OpenAPI::toJsonValue(m_task_definition));
    }
    if (m_load_balancers.isSet()) {
        obj.insert(QString("loadBalancers"), ::OpenAPI::toJsonValue(m_load_balancers));
    }
    if (m_service_registries.isSet()) {
        obj.insert(QString("serviceRegistries"), ::OpenAPI::toJsonValue(m_service_registries));
    }
    if (m_desired_count_isSet) {
        obj.insert(QString("desiredCount"), ::OpenAPI::toJsonValue(m_desired_count));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_launch_type.isSet()) {
        obj.insert(QString("launchType"), ::OpenAPI::toJsonValue(m_launch_type));
    }
    if (m_capacity_provider_strategy.isSet()) {
        obj.insert(QString("capacityProviderStrategy"), ::OpenAPI::toJsonValue(m_capacity_provider_strategy));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("platformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_deployment_configuration.isSet()) {
        obj.insert(QString("deploymentConfiguration"), ::OpenAPI::toJsonValue(m_deployment_configuration));
    }
    if (m_placement_constraints.isSet()) {
        obj.insert(QString("placementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_placement_strategy.isSet()) {
        obj.insert(QString("placementStrategy"), ::OpenAPI::toJsonValue(m_placement_strategy));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("networkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_health_check_grace_period_seconds_isSet) {
        obj.insert(QString("healthCheckGracePeriodSeconds"), ::OpenAPI::toJsonValue(m_health_check_grace_period_seconds));
    }
    if (m_scheduling_strategy.isSet()) {
        obj.insert(QString("schedulingStrategy"), ::OpenAPI::toJsonValue(m_scheduling_strategy));
    }
    if (m_deployment_controller.isSet()) {
        obj.insert(QString("deploymentController"), ::OpenAPI::toJsonValue(m_deployment_controller));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_enable_ecs_managed_tags_isSet) {
        obj.insert(QString("enableECSManagedTags"), ::OpenAPI::toJsonValue(m_enable_ecs_managed_tags));
    }
    if (m_propagate_tags.isSet()) {
        obj.insert(QString("propagateTags"), ::OpenAPI::toJsonValue(m_propagate_tags));
    }
    if (m_enable_execute_command_isSet) {
        obj.insert(QString("enableExecuteCommand"), ::OpenAPI::toJsonValue(m_enable_execute_command));
    }
    if (m_service_connect_configuration.isSet()) {
        obj.insert(QString("serviceConnectConfiguration"), ::OpenAPI::toJsonValue(m_service_connect_configuration));
    }
    return obj;
}

QString OAICreateServiceRequest::getCluster() const {
    return m_cluster;
}
void OAICreateServiceRequest::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAICreateServiceRequest::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAICreateServiceRequest::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAICreateServiceRequest::getServiceName() const {
    return m_service_name;
}
void OAICreateServiceRequest::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAICreateServiceRequest::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAICreateServiceRequest::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAICreateServiceRequest::getTaskDefinition() const {
    return m_task_definition;
}
void OAICreateServiceRequest::setTaskDefinition(const QString &task_definition) {
    m_task_definition = task_definition;
    m_task_definition_isSet = true;
}

bool OAICreateServiceRequest::is_task_definition_Set() const{
    return m_task_definition_isSet;
}

bool OAICreateServiceRequest::is_task_definition_Valid() const{
    return m_task_definition_isValid;
}

QList OAICreateServiceRequest::getLoadBalancers() const {
    return m_load_balancers;
}
void OAICreateServiceRequest::setLoadBalancers(const QList &load_balancers) {
    m_load_balancers = load_balancers;
    m_load_balancers_isSet = true;
}

bool OAICreateServiceRequest::is_load_balancers_Set() const{
    return m_load_balancers_isSet;
}

bool OAICreateServiceRequest::is_load_balancers_Valid() const{
    return m_load_balancers_isValid;
}

QList OAICreateServiceRequest::getServiceRegistries() const {
    return m_service_registries;
}
void OAICreateServiceRequest::setServiceRegistries(const QList &service_registries) {
    m_service_registries = service_registries;
    m_service_registries_isSet = true;
}

bool OAICreateServiceRequest::is_service_registries_Set() const{
    return m_service_registries_isSet;
}

bool OAICreateServiceRequest::is_service_registries_Valid() const{
    return m_service_registries_isValid;
}

qint32 OAICreateServiceRequest::getDesiredCount() const {
    return m_desired_count;
}
void OAICreateServiceRequest::setDesiredCount(const qint32 &desired_count) {
    m_desired_count = desired_count;
    m_desired_count_isSet = true;
}

bool OAICreateServiceRequest::is_desired_count_Set() const{
    return m_desired_count_isSet;
}

bool OAICreateServiceRequest::is_desired_count_Valid() const{
    return m_desired_count_isValid;
}

QString OAICreateServiceRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateServiceRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateServiceRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateServiceRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAILaunchType OAICreateServiceRequest::getLaunchType() const {
    return m_launch_type;
}
void OAICreateServiceRequest::setLaunchType(const OAILaunchType &launch_type) {
    m_launch_type = launch_type;
    m_launch_type_isSet = true;
}

bool OAICreateServiceRequest::is_launch_type_Set() const{
    return m_launch_type_isSet;
}

bool OAICreateServiceRequest::is_launch_type_Valid() const{
    return m_launch_type_isValid;
}

QList OAICreateServiceRequest::getCapacityProviderStrategy() const {
    return m_capacity_provider_strategy;
}
void OAICreateServiceRequest::setCapacityProviderStrategy(const QList &capacity_provider_strategy) {
    m_capacity_provider_strategy = capacity_provider_strategy;
    m_capacity_provider_strategy_isSet = true;
}

bool OAICreateServiceRequest::is_capacity_provider_strategy_Set() const{
    return m_capacity_provider_strategy_isSet;
}

bool OAICreateServiceRequest::is_capacity_provider_strategy_Valid() const{
    return m_capacity_provider_strategy_isValid;
}

QString OAICreateServiceRequest::getPlatformVersion() const {
    return m_platform_version;
}
void OAICreateServiceRequest::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAICreateServiceRequest::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAICreateServiceRequest::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

QString OAICreateServiceRequest::getRole() const {
    return m_role;
}
void OAICreateServiceRequest::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAICreateServiceRequest::is_role_Set() const{
    return m_role_isSet;
}

bool OAICreateServiceRequest::is_role_Valid() const{
    return m_role_isValid;
}

OAICreateServiceRequest_deploymentConfiguration OAICreateServiceRequest::getDeploymentConfiguration() const {
    return m_deployment_configuration;
}
void OAICreateServiceRequest::setDeploymentConfiguration(const OAICreateServiceRequest_deploymentConfiguration &deployment_configuration) {
    m_deployment_configuration = deployment_configuration;
    m_deployment_configuration_isSet = true;
}

bool OAICreateServiceRequest::is_deployment_configuration_Set() const{
    return m_deployment_configuration_isSet;
}

bool OAICreateServiceRequest::is_deployment_configuration_Valid() const{
    return m_deployment_configuration_isValid;
}

QList OAICreateServiceRequest::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAICreateServiceRequest::setPlacementConstraints(const QList &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAICreateServiceRequest::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAICreateServiceRequest::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList OAICreateServiceRequest::getPlacementStrategy() const {
    return m_placement_strategy;
}
void OAICreateServiceRequest::setPlacementStrategy(const QList &placement_strategy) {
    m_placement_strategy = placement_strategy;
    m_placement_strategy_isSet = true;
}

bool OAICreateServiceRequest::is_placement_strategy_Set() const{
    return m_placement_strategy_isSet;
}

bool OAICreateServiceRequest::is_placement_strategy_Valid() const{
    return m_placement_strategy_isValid;
}

OAICreateServiceRequest_networkConfiguration OAICreateServiceRequest::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAICreateServiceRequest::setNetworkConfiguration(const OAICreateServiceRequest_networkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAICreateServiceRequest::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAICreateServiceRequest::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

qint32 OAICreateServiceRequest::getHealthCheckGracePeriodSeconds() const {
    return m_health_check_grace_period_seconds;
}
void OAICreateServiceRequest::setHealthCheckGracePeriodSeconds(const qint32 &health_check_grace_period_seconds) {
    m_health_check_grace_period_seconds = health_check_grace_period_seconds;
    m_health_check_grace_period_seconds_isSet = true;
}

bool OAICreateServiceRequest::is_health_check_grace_period_seconds_Set() const{
    return m_health_check_grace_period_seconds_isSet;
}

bool OAICreateServiceRequest::is_health_check_grace_period_seconds_Valid() const{
    return m_health_check_grace_period_seconds_isValid;
}

OAISchedulingStrategy OAICreateServiceRequest::getSchedulingStrategy() const {
    return m_scheduling_strategy;
}
void OAICreateServiceRequest::setSchedulingStrategy(const OAISchedulingStrategy &scheduling_strategy) {
    m_scheduling_strategy = scheduling_strategy;
    m_scheduling_strategy_isSet = true;
}

bool OAICreateServiceRequest::is_scheduling_strategy_Set() const{
    return m_scheduling_strategy_isSet;
}

bool OAICreateServiceRequest::is_scheduling_strategy_Valid() const{
    return m_scheduling_strategy_isValid;
}

OAICreateServiceRequest_deploymentController OAICreateServiceRequest::getDeploymentController() const {
    return m_deployment_controller;
}
void OAICreateServiceRequest::setDeploymentController(const OAICreateServiceRequest_deploymentController &deployment_controller) {
    m_deployment_controller = deployment_controller;
    m_deployment_controller_isSet = true;
}

bool OAICreateServiceRequest::is_deployment_controller_Set() const{
    return m_deployment_controller_isSet;
}

bool OAICreateServiceRequest::is_deployment_controller_Valid() const{
    return m_deployment_controller_isValid;
}

QList OAICreateServiceRequest::getTags() const {
    return m_tags;
}
void OAICreateServiceRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateServiceRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateServiceRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateServiceRequest::getEnableEcsManagedTags() const {
    return m_enable_ecs_managed_tags;
}
void OAICreateServiceRequest::setEnableEcsManagedTags(const bool &enable_ecs_managed_tags) {
    m_enable_ecs_managed_tags = enable_ecs_managed_tags;
    m_enable_ecs_managed_tags_isSet = true;
}

bool OAICreateServiceRequest::is_enable_ecs_managed_tags_Set() const{
    return m_enable_ecs_managed_tags_isSet;
}

bool OAICreateServiceRequest::is_enable_ecs_managed_tags_Valid() const{
    return m_enable_ecs_managed_tags_isValid;
}

OAIPropagateTags OAICreateServiceRequest::getPropagateTags() const {
    return m_propagate_tags;
}
void OAICreateServiceRequest::setPropagateTags(const OAIPropagateTags &propagate_tags) {
    m_propagate_tags = propagate_tags;
    m_propagate_tags_isSet = true;
}

bool OAICreateServiceRequest::is_propagate_tags_Set() const{
    return m_propagate_tags_isSet;
}

bool OAICreateServiceRequest::is_propagate_tags_Valid() const{
    return m_propagate_tags_isValid;
}

bool OAICreateServiceRequest::getEnableExecuteCommand() const {
    return m_enable_execute_command;
}
void OAICreateServiceRequest::setEnableExecuteCommand(const bool &enable_execute_command) {
    m_enable_execute_command = enable_execute_command;
    m_enable_execute_command_isSet = true;
}

bool OAICreateServiceRequest::is_enable_execute_command_Set() const{
    return m_enable_execute_command_isSet;
}

bool OAICreateServiceRequest::is_enable_execute_command_Valid() const{
    return m_enable_execute_command_isValid;
}

OAICreateServiceRequest_serviceConnectConfiguration OAICreateServiceRequest::getServiceConnectConfiguration() const {
    return m_service_connect_configuration;
}
void OAICreateServiceRequest::setServiceConnectConfiguration(const OAICreateServiceRequest_serviceConnectConfiguration &service_connect_configuration) {
    m_service_connect_configuration = service_connect_configuration;
    m_service_connect_configuration_isSet = true;
}

bool OAICreateServiceRequest::is_service_connect_configuration_Set() const{
    return m_service_connect_configuration_isSet;
}

bool OAICreateServiceRequest::is_service_connect_configuration_Valid() const{
    return m_service_connect_configuration_isValid;
}

bool OAICreateServiceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_registries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_provider_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_grace_period_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_controller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ecs_managed_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_propagate_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_execute_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_connect_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateServiceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_name_isValid && true;
}

} // namespace OpenAPI
