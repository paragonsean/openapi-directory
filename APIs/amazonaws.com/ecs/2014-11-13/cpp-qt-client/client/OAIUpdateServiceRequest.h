/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateServiceRequest.h
 *
 * 
 */

#ifndef OAIUpdateServiceRequest_H
#define OAIUpdateServiceRequest_H

#include <QJsonObject>

#include "OAICreateServiceRequest_deploymentConfiguration.h"
#include "OAICreateServiceRequest_serviceConnectConfiguration.h"
#include "OAIPropagateTags.h"
#include "OAIUpdateServiceRequest_networkConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateServiceRequest_deploymentConfiguration;
class OAIUpdateServiceRequest_networkConfiguration;
class OAICreateServiceRequest_serviceConnectConfiguration;

class OAIUpdateServiceRequest : public OAIObject {
public:
    OAIUpdateServiceRequest();
    OAIUpdateServiceRequest(QString json);
    ~OAIUpdateServiceRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCluster() const;
    void setCluster(const QString &cluster);
    bool is_cluster_Set() const;
    bool is_cluster_Valid() const;

    QString getService() const;
    void setService(const QString &service);
    bool is_service_Set() const;
    bool is_service_Valid() const;

    qint32 getDesiredCount() const;
    void setDesiredCount(const qint32 &desired_count);
    bool is_desired_count_Set() const;
    bool is_desired_count_Valid() const;

    QString getTaskDefinition() const;
    void setTaskDefinition(const QString &task_definition);
    bool is_task_definition_Set() const;
    bool is_task_definition_Valid() const;

    QList getCapacityProviderStrategy() const;
    void setCapacityProviderStrategy(const QList &capacity_provider_strategy);
    bool is_capacity_provider_strategy_Set() const;
    bool is_capacity_provider_strategy_Valid() const;

    OAICreateServiceRequest_deploymentConfiguration getDeploymentConfiguration() const;
    void setDeploymentConfiguration(const OAICreateServiceRequest_deploymentConfiguration &deployment_configuration);
    bool is_deployment_configuration_Set() const;
    bool is_deployment_configuration_Valid() const;

    OAIUpdateServiceRequest_networkConfiguration getNetworkConfiguration() const;
    void setNetworkConfiguration(const OAIUpdateServiceRequest_networkConfiguration &network_configuration);
    bool is_network_configuration_Set() const;
    bool is_network_configuration_Valid() const;

    QList getPlacementConstraints() const;
    void setPlacementConstraints(const QList &placement_constraints);
    bool is_placement_constraints_Set() const;
    bool is_placement_constraints_Valid() const;

    QList getPlacementStrategy() const;
    void setPlacementStrategy(const QList &placement_strategy);
    bool is_placement_strategy_Set() const;
    bool is_placement_strategy_Valid() const;

    QString getPlatformVersion() const;
    void setPlatformVersion(const QString &platform_version);
    bool is_platform_version_Set() const;
    bool is_platform_version_Valid() const;

    bool getForceNewDeployment() const;
    void setForceNewDeployment(const bool &force_new_deployment);
    bool is_force_new_deployment_Set() const;
    bool is_force_new_deployment_Valid() const;

    qint32 getHealthCheckGracePeriodSeconds() const;
    void setHealthCheckGracePeriodSeconds(const qint32 &health_check_grace_period_seconds);
    bool is_health_check_grace_period_seconds_Set() const;
    bool is_health_check_grace_period_seconds_Valid() const;

    bool getEnableExecuteCommand() const;
    void setEnableExecuteCommand(const bool &enable_execute_command);
    bool is_enable_execute_command_Set() const;
    bool is_enable_execute_command_Valid() const;

    bool getEnableEcsManagedTags() const;
    void setEnableEcsManagedTags(const bool &enable_ecs_managed_tags);
    bool is_enable_ecs_managed_tags_Set() const;
    bool is_enable_ecs_managed_tags_Valid() const;

    QList getLoadBalancers() const;
    void setLoadBalancers(const QList &load_balancers);
    bool is_load_balancers_Set() const;
    bool is_load_balancers_Valid() const;

    OAIPropagateTags getPropagateTags() const;
    void setPropagateTags(const OAIPropagateTags &propagate_tags);
    bool is_propagate_tags_Set() const;
    bool is_propagate_tags_Valid() const;

    QList getServiceRegistries() const;
    void setServiceRegistries(const QList &service_registries);
    bool is_service_registries_Set() const;
    bool is_service_registries_Valid() const;

    OAICreateServiceRequest_serviceConnectConfiguration getServiceConnectConfiguration() const;
    void setServiceConnectConfiguration(const OAICreateServiceRequest_serviceConnectConfiguration &service_connect_configuration);
    bool is_service_connect_configuration_Set() const;
    bool is_service_connect_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster;
    bool m_cluster_isSet;
    bool m_cluster_isValid;

    QString m_service;
    bool m_service_isSet;
    bool m_service_isValid;

    qint32 m_desired_count;
    bool m_desired_count_isSet;
    bool m_desired_count_isValid;

    QString m_task_definition;
    bool m_task_definition_isSet;
    bool m_task_definition_isValid;

    QList m_capacity_provider_strategy;
    bool m_capacity_provider_strategy_isSet;
    bool m_capacity_provider_strategy_isValid;

    OAICreateServiceRequest_deploymentConfiguration m_deployment_configuration;
    bool m_deployment_configuration_isSet;
    bool m_deployment_configuration_isValid;

    OAIUpdateServiceRequest_networkConfiguration m_network_configuration;
    bool m_network_configuration_isSet;
    bool m_network_configuration_isValid;

    QList m_placement_constraints;
    bool m_placement_constraints_isSet;
    bool m_placement_constraints_isValid;

    QList m_placement_strategy;
    bool m_placement_strategy_isSet;
    bool m_placement_strategy_isValid;

    QString m_platform_version;
    bool m_platform_version_isSet;
    bool m_platform_version_isValid;

    bool m_force_new_deployment;
    bool m_force_new_deployment_isSet;
    bool m_force_new_deployment_isValid;

    qint32 m_health_check_grace_period_seconds;
    bool m_health_check_grace_period_seconds_isSet;
    bool m_health_check_grace_period_seconds_isValid;

    bool m_enable_execute_command;
    bool m_enable_execute_command_isSet;
    bool m_enable_execute_command_isValid;

    bool m_enable_ecs_managed_tags;
    bool m_enable_ecs_managed_tags_isSet;
    bool m_enable_ecs_managed_tags_isValid;

    QList m_load_balancers;
    bool m_load_balancers_isSet;
    bool m_load_balancers_isValid;

    OAIPropagateTags m_propagate_tags;
    bool m_propagate_tags_isSet;
    bool m_propagate_tags_isValid;

    QList m_service_registries;
    bool m_service_registries_isSet;
    bool m_service_registries_isValid;

    OAICreateServiceRequest_serviceConnectConfiguration m_service_connect_configuration;
    bool m_service_connect_configuration_isSet;
    bool m_service_connect_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateServiceRequest)

#endif // OAIUpdateServiceRequest_H
