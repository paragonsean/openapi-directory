/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainer::OAIContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainer::OAIContainer() {
    this->initializeModel();
}

OAIContainer::~OAIContainer() {}

void OAIContainer::initializeModel() {

    m_container_arn_isSet = false;
    m_container_arn_isValid = false;

    m_task_arn_isSet = false;
    m_task_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_runtime_id_isSet = false;
    m_runtime_id_isValid = false;

    m_last_status_isSet = false;
    m_last_status_isValid = false;

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_network_bindings_isSet = false;
    m_network_bindings_isValid = false;

    m_network_interfaces_isSet = false;
    m_network_interfaces_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_managed_agents_isSet = false;
    m_managed_agents_isValid = false;

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_memory_reservation_isSet = false;
    m_memory_reservation_isValid = false;

    m_gpu_ids_isSet = false;
    m_gpu_ids_isValid = false;
}

void OAIContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainer::fromJsonObject(QJsonObject json) {

    m_container_arn_isValid = ::OpenAPI::fromJsonValue(m_container_arn, json[QString("containerArn")]);
    m_container_arn_isSet = !json[QString("containerArn")].isNull() && m_container_arn_isValid;

    m_task_arn_isValid = ::OpenAPI::fromJsonValue(m_task_arn, json[QString("taskArn")]);
    m_task_arn_isSet = !json[QString("taskArn")].isNull() && m_task_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_runtime_id_isValid = ::OpenAPI::fromJsonValue(m_runtime_id, json[QString("runtimeId")]);
    m_runtime_id_isSet = !json[QString("runtimeId")].isNull() && m_runtime_id_isValid;

    m_last_status_isValid = ::OpenAPI::fromJsonValue(m_last_status, json[QString("lastStatus")]);
    m_last_status_isSet = !json[QString("lastStatus")].isNull() && m_last_status_isValid;

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("exitCode")]);
    m_exit_code_isSet = !json[QString("exitCode")].isNull() && m_exit_code_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_network_bindings_isValid = ::OpenAPI::fromJsonValue(m_network_bindings, json[QString("networkBindings")]);
    m_network_bindings_isSet = !json[QString("networkBindings")].isNull() && m_network_bindings_isValid;

    m_network_interfaces_isValid = ::OpenAPI::fromJsonValue(m_network_interfaces, json[QString("networkInterfaces")]);
    m_network_interfaces_isSet = !json[QString("networkInterfaces")].isNull() && m_network_interfaces_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;

    m_managed_agents_isValid = ::OpenAPI::fromJsonValue(m_managed_agents, json[QString("managedAgents")]);
    m_managed_agents_isSet = !json[QString("managedAgents")].isNull() && m_managed_agents_isValid;

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("cpu")]);
    m_cpu_isSet = !json[QString("cpu")].isNull() && m_cpu_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_memory_reservation_isValid = ::OpenAPI::fromJsonValue(m_memory_reservation, json[QString("memoryReservation")]);
    m_memory_reservation_isSet = !json[QString("memoryReservation")].isNull() && m_memory_reservation_isValid;

    m_gpu_ids_isValid = ::OpenAPI::fromJsonValue(m_gpu_ids, json[QString("gpuIds")]);
    m_gpu_ids_isSet = !json[QString("gpuIds")].isNull() && m_gpu_ids_isValid;
}

QString OAIContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainer::asJsonObject() const {
    QJsonObject obj;
    if (m_container_arn_isSet) {
        obj.insert(QString("containerArn"), ::OpenAPI::toJsonValue(m_container_arn));
    }
    if (m_task_arn_isSet) {
        obj.insert(QString("taskArn"), ::OpenAPI::toJsonValue(m_task_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_runtime_id_isSet) {
        obj.insert(QString("runtimeId"), ::OpenAPI::toJsonValue(m_runtime_id));
    }
    if (m_last_status_isSet) {
        obj.insert(QString("lastStatus"), ::OpenAPI::toJsonValue(m_last_status));
    }
    if (m_exit_code_isSet) {
        obj.insert(QString("exitCode"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_network_bindings.isSet()) {
        obj.insert(QString("networkBindings"), ::OpenAPI::toJsonValue(m_network_bindings));
    }
    if (m_network_interfaces.isSet()) {
        obj.insert(QString("networkInterfaces"), ::OpenAPI::toJsonValue(m_network_interfaces));
    }
    if (m_health_status.isSet()) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_managed_agents.isSet()) {
        obj.insert(QString("managedAgents"), ::OpenAPI::toJsonValue(m_managed_agents));
    }
    if (m_cpu_isSet) {
        obj.insert(QString("cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_memory_reservation_isSet) {
        obj.insert(QString("memoryReservation"), ::OpenAPI::toJsonValue(m_memory_reservation));
    }
    if (m_gpu_ids.isSet()) {
        obj.insert(QString("gpuIds"), ::OpenAPI::toJsonValue(m_gpu_ids));
    }
    return obj;
}

QString OAIContainer::getContainerArn() const {
    return m_container_arn;
}
void OAIContainer::setContainerArn(const QString &container_arn) {
    m_container_arn = container_arn;
    m_container_arn_isSet = true;
}

bool OAIContainer::is_container_arn_Set() const{
    return m_container_arn_isSet;
}

bool OAIContainer::is_container_arn_Valid() const{
    return m_container_arn_isValid;
}

QString OAIContainer::getTaskArn() const {
    return m_task_arn;
}
void OAIContainer::setTaskArn(const QString &task_arn) {
    m_task_arn = task_arn;
    m_task_arn_isSet = true;
}

bool OAIContainer::is_task_arn_Set() const{
    return m_task_arn_isSet;
}

bool OAIContainer::is_task_arn_Valid() const{
    return m_task_arn_isValid;
}

QString OAIContainer::getName() const {
    return m_name;
}
void OAIContainer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContainer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContainer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContainer::getImage() const {
    return m_image;
}
void OAIContainer::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIContainer::is_image_Set() const{
    return m_image_isSet;
}

bool OAIContainer::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIContainer::getImageDigest() const {
    return m_image_digest;
}
void OAIContainer::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIContainer::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIContainer::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

QString OAIContainer::getRuntimeId() const {
    return m_runtime_id;
}
void OAIContainer::setRuntimeId(const QString &runtime_id) {
    m_runtime_id = runtime_id;
    m_runtime_id_isSet = true;
}

bool OAIContainer::is_runtime_id_Set() const{
    return m_runtime_id_isSet;
}

bool OAIContainer::is_runtime_id_Valid() const{
    return m_runtime_id_isValid;
}

QString OAIContainer::getLastStatus() const {
    return m_last_status;
}
void OAIContainer::setLastStatus(const QString &last_status) {
    m_last_status = last_status;
    m_last_status_isSet = true;
}

bool OAIContainer::is_last_status_Set() const{
    return m_last_status_isSet;
}

bool OAIContainer::is_last_status_Valid() const{
    return m_last_status_isValid;
}

qint32 OAIContainer::getExitCode() const {
    return m_exit_code;
}
void OAIContainer::setExitCode(const qint32 &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAIContainer::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAIContainer::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

QString OAIContainer::getReason() const {
    return m_reason;
}
void OAIContainer::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIContainer::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIContainer::is_reason_Valid() const{
    return m_reason_isValid;
}

QList OAIContainer::getNetworkBindings() const {
    return m_network_bindings;
}
void OAIContainer::setNetworkBindings(const QList &network_bindings) {
    m_network_bindings = network_bindings;
    m_network_bindings_isSet = true;
}

bool OAIContainer::is_network_bindings_Set() const{
    return m_network_bindings_isSet;
}

bool OAIContainer::is_network_bindings_Valid() const{
    return m_network_bindings_isValid;
}

QList OAIContainer::getNetworkInterfaces() const {
    return m_network_interfaces;
}
void OAIContainer::setNetworkInterfaces(const QList &network_interfaces) {
    m_network_interfaces = network_interfaces;
    m_network_interfaces_isSet = true;
}

bool OAIContainer::is_network_interfaces_Set() const{
    return m_network_interfaces_isSet;
}

bool OAIContainer::is_network_interfaces_Valid() const{
    return m_network_interfaces_isValid;
}

OAIHealthStatus OAIContainer::getHealthStatus() const {
    return m_health_status;
}
void OAIContainer::setHealthStatus(const OAIHealthStatus &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIContainer::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIContainer::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QList OAIContainer::getManagedAgents() const {
    return m_managed_agents;
}
void OAIContainer::setManagedAgents(const QList &managed_agents) {
    m_managed_agents = managed_agents;
    m_managed_agents_isSet = true;
}

bool OAIContainer::is_managed_agents_Set() const{
    return m_managed_agents_isSet;
}

bool OAIContainer::is_managed_agents_Valid() const{
    return m_managed_agents_isValid;
}

QString OAIContainer::getCpu() const {
    return m_cpu;
}
void OAIContainer::setCpu(const QString &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAIContainer::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAIContainer::is_cpu_Valid() const{
    return m_cpu_isValid;
}

QString OAIContainer::getMemory() const {
    return m_memory;
}
void OAIContainer::setMemory(const QString &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIContainer::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIContainer::is_memory_Valid() const{
    return m_memory_isValid;
}

QString OAIContainer::getMemoryReservation() const {
    return m_memory_reservation;
}
void OAIContainer::setMemoryReservation(const QString &memory_reservation) {
    m_memory_reservation = memory_reservation;
    m_memory_reservation_isSet = true;
}

bool OAIContainer::is_memory_reservation_Set() const{
    return m_memory_reservation_isSet;
}

bool OAIContainer::is_memory_reservation_Valid() const{
    return m_memory_reservation_isValid;
}

QList OAIContainer::getGpuIds() const {
    return m_gpu_ids;
}
void OAIContainer::setGpuIds(const QList &gpu_ids) {
    m_gpu_ids = gpu_ids;
    m_gpu_ids_isSet = true;
}

bool OAIContainer::is_gpu_ids_Set() const{
    return m_gpu_ids_isSet;
}

bool OAIContainer::is_gpu_ids_Valid() const{
    return m_gpu_ids_isValid;
}

bool OAIContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_bindings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interfaces.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_agents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_reservation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpu_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
