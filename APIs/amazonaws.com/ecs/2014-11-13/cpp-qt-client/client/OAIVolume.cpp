/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume::OAIVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume::OAIVolume() {
    this->initializeModel();
}

OAIVolume::~OAIVolume() {}

void OAIVolume::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_docker_volume_configuration_isSet = false;
    m_docker_volume_configuration_isValid = false;

    m_efs_volume_configuration_isSet = false;
    m_efs_volume_configuration_isValid = false;

    m_fsx_windows_file_server_volume_configuration_isSet = false;
    m_fsx_windows_file_server_volume_configuration_isValid = false;
}

void OAIVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_docker_volume_configuration_isValid = ::OpenAPI::fromJsonValue(m_docker_volume_configuration, json[QString("dockerVolumeConfiguration")]);
    m_docker_volume_configuration_isSet = !json[QString("dockerVolumeConfiguration")].isNull() && m_docker_volume_configuration_isValid;

    m_efs_volume_configuration_isValid = ::OpenAPI::fromJsonValue(m_efs_volume_configuration, json[QString("efsVolumeConfiguration")]);
    m_efs_volume_configuration_isSet = !json[QString("efsVolumeConfiguration")].isNull() && m_efs_volume_configuration_isValid;

    m_fsx_windows_file_server_volume_configuration_isValid = ::OpenAPI::fromJsonValue(m_fsx_windows_file_server_volume_configuration, json[QString("fsxWindowsFileServerVolumeConfiguration")]);
    m_fsx_windows_file_server_volume_configuration_isSet = !json[QString("fsxWindowsFileServerVolumeConfiguration")].isNull() && m_fsx_windows_file_server_volume_configuration_isValid;
}

QString OAIVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_host.isSet()) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_docker_volume_configuration.isSet()) {
        obj.insert(QString("dockerVolumeConfiguration"), ::OpenAPI::toJsonValue(m_docker_volume_configuration));
    }
    if (m_efs_volume_configuration.isSet()) {
        obj.insert(QString("efsVolumeConfiguration"), ::OpenAPI::toJsonValue(m_efs_volume_configuration));
    }
    if (m_fsx_windows_file_server_volume_configuration.isSet()) {
        obj.insert(QString("fsxWindowsFileServerVolumeConfiguration"), ::OpenAPI::toJsonValue(m_fsx_windows_file_server_volume_configuration));
    }
    return obj;
}

QString OAIVolume::getName() const {
    return m_name;
}
void OAIVolume::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVolume::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVolume::is_name_Valid() const{
    return m_name_isValid;
}

OAIVolume_host OAIVolume::getHost() const {
    return m_host;
}
void OAIVolume::setHost(const OAIVolume_host &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIVolume::is_host_Set() const{
    return m_host_isSet;
}

bool OAIVolume::is_host_Valid() const{
    return m_host_isValid;
}

OAIVolume_dockerVolumeConfiguration OAIVolume::getDockerVolumeConfiguration() const {
    return m_docker_volume_configuration;
}
void OAIVolume::setDockerVolumeConfiguration(const OAIVolume_dockerVolumeConfiguration &docker_volume_configuration) {
    m_docker_volume_configuration = docker_volume_configuration;
    m_docker_volume_configuration_isSet = true;
}

bool OAIVolume::is_docker_volume_configuration_Set() const{
    return m_docker_volume_configuration_isSet;
}

bool OAIVolume::is_docker_volume_configuration_Valid() const{
    return m_docker_volume_configuration_isValid;
}

OAIVolume_efsVolumeConfiguration OAIVolume::getEfsVolumeConfiguration() const {
    return m_efs_volume_configuration;
}
void OAIVolume::setEfsVolumeConfiguration(const OAIVolume_efsVolumeConfiguration &efs_volume_configuration) {
    m_efs_volume_configuration = efs_volume_configuration;
    m_efs_volume_configuration_isSet = true;
}

bool OAIVolume::is_efs_volume_configuration_Set() const{
    return m_efs_volume_configuration_isSet;
}

bool OAIVolume::is_efs_volume_configuration_Valid() const{
    return m_efs_volume_configuration_isValid;
}

OAIVolume_fsxWindowsFileServerVolumeConfiguration OAIVolume::getFsxWindowsFileServerVolumeConfiguration() const {
    return m_fsx_windows_file_server_volume_configuration;
}
void OAIVolume::setFsxWindowsFileServerVolumeConfiguration(const OAIVolume_fsxWindowsFileServerVolumeConfiguration &fsx_windows_file_server_volume_configuration) {
    m_fsx_windows_file_server_volume_configuration = fsx_windows_file_server_volume_configuration;
    m_fsx_windows_file_server_volume_configuration_isSet = true;
}

bool OAIVolume::is_fsx_windows_file_server_volume_configuration_Set() const{
    return m_fsx_windows_file_server_volume_configuration_isSet;
}

bool OAIVolume::is_fsx_windows_file_server_volume_configuration_Valid() const{
    return m_fsx_windows_file_server_volume_configuration_isValid;
}

bool OAIVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_volume_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_efs_volume_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fsx_windows_file_server_volume_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
