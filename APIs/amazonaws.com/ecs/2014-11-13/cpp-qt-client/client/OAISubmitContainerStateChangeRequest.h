/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubmitContainerStateChangeRequest.h
 *
 * 
 */

#ifndef OAISubmitContainerStateChangeRequest_H
#define OAISubmitContainerStateChangeRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISubmitContainerStateChangeRequest : public OAIObject {
public:
    OAISubmitContainerStateChangeRequest();
    OAISubmitContainerStateChangeRequest(QString json);
    ~OAISubmitContainerStateChangeRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCluster() const;
    void setCluster(const QString &cluster);
    bool is_cluster_Set() const;
    bool is_cluster_Valid() const;

    QString getTask() const;
    void setTask(const QString &task);
    bool is_task_Set() const;
    bool is_task_Valid() const;

    QString getContainerName() const;
    void setContainerName(const QString &container_name);
    bool is_container_name_Set() const;
    bool is_container_name_Valid() const;

    QString getRuntimeId() const;
    void setRuntimeId(const QString &runtime_id);
    bool is_runtime_id_Set() const;
    bool is_runtime_id_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getExitCode() const;
    void setExitCode(const qint32 &exit_code);
    bool is_exit_code_Set() const;
    bool is_exit_code_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    QList getNetworkBindings() const;
    void setNetworkBindings(const QList &network_bindings);
    bool is_network_bindings_Set() const;
    bool is_network_bindings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster;
    bool m_cluster_isSet;
    bool m_cluster_isValid;

    QString m_task;
    bool m_task_isSet;
    bool m_task_isValid;

    QString m_container_name;
    bool m_container_name_isSet;
    bool m_container_name_isValid;

    QString m_runtime_id;
    bool m_runtime_id_isSet;
    bool m_runtime_id_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_exit_code;
    bool m_exit_code_isSet;
    bool m_exit_code_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    QList m_network_bindings;
    bool m_network_bindings_isSet;
    bool m_network_bindings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubmitContainerStateChangeRequest)

#endif // OAISubmitContainerStateChangeRequest_H
