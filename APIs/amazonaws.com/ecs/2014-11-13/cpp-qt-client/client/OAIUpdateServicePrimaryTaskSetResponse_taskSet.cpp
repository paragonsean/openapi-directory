/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServicePrimaryTaskSetResponse_taskSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServicePrimaryTaskSetResponse_taskSet::OAIUpdateServicePrimaryTaskSetResponse_taskSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServicePrimaryTaskSetResponse_taskSet::OAIUpdateServicePrimaryTaskSetResponse_taskSet() {
    this->initializeModel();
}

OAIUpdateServicePrimaryTaskSetResponse_taskSet::~OAIUpdateServicePrimaryTaskSetResponse_taskSet() {}

void OAIUpdateServicePrimaryTaskSetResponse_taskSet::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_task_set_arn_isSet = false;
    m_task_set_arn_isValid = false;

    m_service_arn_isSet = false;
    m_service_arn_isValid = false;

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_started_by_isSet = false;
    m_started_by_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_definition_isSet = false;
    m_task_definition_isValid = false;

    m_computed_desired_count_isSet = false;
    m_computed_desired_count_isValid = false;

    m_pending_count_isSet = false;
    m_pending_count_isValid = false;

    m_running_count_isSet = false;
    m_running_count_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_launch_type_isSet = false;
    m_launch_type_isValid = false;

    m_capacity_provider_strategy_isSet = false;
    m_capacity_provider_strategy_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_platform_family_isSet = false;
    m_platform_family_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_load_balancers_isSet = false;
    m_load_balancers_isValid = false;

    m_service_registries_isSet = false;
    m_service_registries_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;

    m_stability_status_isSet = false;
    m_stability_status_isValid = false;

    m_stability_status_at_isSet = false;
    m_stability_status_at_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIUpdateServicePrimaryTaskSetResponse_taskSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServicePrimaryTaskSetResponse_taskSet::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_task_set_arn_isValid = ::OpenAPI::fromJsonValue(m_task_set_arn, json[QString("taskSetArn")]);
    m_task_set_arn_isSet = !json[QString("taskSetArn")].isNull() && m_task_set_arn_isValid;

    m_service_arn_isValid = ::OpenAPI::fromJsonValue(m_service_arn, json[QString("serviceArn")]);
    m_service_arn_isSet = !json[QString("serviceArn")].isNull() && m_service_arn_isValid;

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("clusterArn")]);
    m_cluster_arn_isSet = !json[QString("clusterArn")].isNull() && m_cluster_arn_isValid;

    m_started_by_isValid = ::OpenAPI::fromJsonValue(m_started_by, json[QString("startedBy")]);
    m_started_by_isSet = !json[QString("startedBy")].isNull() && m_started_by_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_definition_isValid = ::OpenAPI::fromJsonValue(m_task_definition, json[QString("taskDefinition")]);
    m_task_definition_isSet = !json[QString("taskDefinition")].isNull() && m_task_definition_isValid;

    m_computed_desired_count_isValid = ::OpenAPI::fromJsonValue(m_computed_desired_count, json[QString("computedDesiredCount")]);
    m_computed_desired_count_isSet = !json[QString("computedDesiredCount")].isNull() && m_computed_desired_count_isValid;

    m_pending_count_isValid = ::OpenAPI::fromJsonValue(m_pending_count, json[QString("pendingCount")]);
    m_pending_count_isSet = !json[QString("pendingCount")].isNull() && m_pending_count_isValid;

    m_running_count_isValid = ::OpenAPI::fromJsonValue(m_running_count, json[QString("runningCount")]);
    m_running_count_isSet = !json[QString("runningCount")].isNull() && m_running_count_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_launch_type_isValid = ::OpenAPI::fromJsonValue(m_launch_type, json[QString("launchType")]);
    m_launch_type_isSet = !json[QString("launchType")].isNull() && m_launch_type_isValid;

    m_capacity_provider_strategy_isValid = ::OpenAPI::fromJsonValue(m_capacity_provider_strategy, json[QString("capacityProviderStrategy")]);
    m_capacity_provider_strategy_isSet = !json[QString("capacityProviderStrategy")].isNull() && m_capacity_provider_strategy_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("platformVersion")]);
    m_platform_version_isSet = !json[QString("platformVersion")].isNull() && m_platform_version_isValid;

    m_platform_family_isValid = ::OpenAPI::fromJsonValue(m_platform_family, json[QString("platformFamily")]);
    m_platform_family_isSet = !json[QString("platformFamily")].isNull() && m_platform_family_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("networkConfiguration")]);
    m_network_configuration_isSet = !json[QString("networkConfiguration")].isNull() && m_network_configuration_isValid;

    m_load_balancers_isValid = ::OpenAPI::fromJsonValue(m_load_balancers, json[QString("loadBalancers")]);
    m_load_balancers_isSet = !json[QString("loadBalancers")].isNull() && m_load_balancers_isValid;

    m_service_registries_isValid = ::OpenAPI::fromJsonValue(m_service_registries, json[QString("serviceRegistries")]);
    m_service_registries_isSet = !json[QString("serviceRegistries")].isNull() && m_service_registries_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("scale")]);
    m_scale_isSet = !json[QString("scale")].isNull() && m_scale_isValid;

    m_stability_status_isValid = ::OpenAPI::fromJsonValue(m_stability_status, json[QString("stabilityStatus")]);
    m_stability_status_isSet = !json[QString("stabilityStatus")].isNull() && m_stability_status_isValid;

    m_stability_status_at_isValid = ::OpenAPI::fromJsonValue(m_stability_status_at, json[QString("stabilityStatusAt")]);
    m_stability_status_at_isSet = !json[QString("stabilityStatusAt")].isNull() && m_stability_status_at_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIUpdateServicePrimaryTaskSetResponse_taskSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServicePrimaryTaskSetResponse_taskSet::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_task_set_arn_isSet) {
        obj.insert(QString("taskSetArn"), ::OpenAPI::toJsonValue(m_task_set_arn));
    }
    if (m_service_arn_isSet) {
        obj.insert(QString("serviceArn"), ::OpenAPI::toJsonValue(m_service_arn));
    }
    if (m_cluster_arn_isSet) {
        obj.insert(QString("clusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_started_by_isSet) {
        obj.insert(QString("startedBy"), ::OpenAPI::toJsonValue(m_started_by));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_definition_isSet) {
        obj.insert(QString("taskDefinition"), ::OpenAPI::toJsonValue(m_task_definition));
    }
    if (m_computed_desired_count_isSet) {
        obj.insert(QString("computedDesiredCount"), ::OpenAPI::toJsonValue(m_computed_desired_count));
    }
    if (m_pending_count_isSet) {
        obj.insert(QString("pendingCount"), ::OpenAPI::toJsonValue(m_pending_count));
    }
    if (m_running_count_isSet) {
        obj.insert(QString("runningCount"), ::OpenAPI::toJsonValue(m_running_count));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_launch_type.isSet()) {
        obj.insert(QString("launchType"), ::OpenAPI::toJsonValue(m_launch_type));
    }
    if (m_capacity_provider_strategy.isSet()) {
        obj.insert(QString("capacityProviderStrategy"), ::OpenAPI::toJsonValue(m_capacity_provider_strategy));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("platformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_platform_family_isSet) {
        obj.insert(QString("platformFamily"), ::OpenAPI::toJsonValue(m_platform_family));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("networkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_load_balancers.isSet()) {
        obj.insert(QString("loadBalancers"), ::OpenAPI::toJsonValue(m_load_balancers));
    }
    if (m_service_registries.isSet()) {
        obj.insert(QString("serviceRegistries"), ::OpenAPI::toJsonValue(m_service_registries));
    }
    if (m_scale.isSet()) {
        obj.insert(QString("scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    if (m_stability_status.isSet()) {
        obj.insert(QString("stabilityStatus"), ::OpenAPI::toJsonValue(m_stability_status));
    }
    if (m_stability_status_at_isSet) {
        obj.insert(QString("stabilityStatusAt"), ::OpenAPI::toJsonValue(m_stability_status_at));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIUpdateServicePrimaryTaskSetResponse_taskSet::getId() const {
    return m_id;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateServicePrimaryTaskSetResponse_taskSet::getTaskSetArn() const {
    return m_task_set_arn;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setTaskSetArn(const QString &task_set_arn) {
    m_task_set_arn = task_set_arn;
    m_task_set_arn_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_task_set_arn_Set() const{
    return m_task_set_arn_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_task_set_arn_Valid() const{
    return m_task_set_arn_isValid;
}

QString OAIUpdateServicePrimaryTaskSetResponse_taskSet::getServiceArn() const {
    return m_service_arn;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setServiceArn(const QString &service_arn) {
    m_service_arn = service_arn;
    m_service_arn_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_service_arn_Set() const{
    return m_service_arn_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_service_arn_Valid() const{
    return m_service_arn_isValid;
}

QString OAIUpdateServicePrimaryTaskSetResponse_taskSet::getClusterArn() const {
    return m_cluster_arn;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

QString OAIUpdateServicePrimaryTaskSetResponse_taskSet::getStartedBy() const {
    return m_started_by;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setStartedBy(const QString &started_by) {
    m_started_by = started_by;
    m_started_by_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_started_by_Set() const{
    return m_started_by_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_started_by_Valid() const{
    return m_started_by_isValid;
}

QString OAIUpdateServicePrimaryTaskSetResponse_taskSet::getExternalId() const {
    return m_external_id;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIUpdateServicePrimaryTaskSetResponse_taskSet::getStatus() const {
    return m_status;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUpdateServicePrimaryTaskSetResponse_taskSet::getTaskDefinition() const {
    return m_task_definition;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setTaskDefinition(const QString &task_definition) {
    m_task_definition = task_definition;
    m_task_definition_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_task_definition_Set() const{
    return m_task_definition_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_task_definition_Valid() const{
    return m_task_definition_isValid;
}

qint32 OAIUpdateServicePrimaryTaskSetResponse_taskSet::getComputedDesiredCount() const {
    return m_computed_desired_count;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setComputedDesiredCount(const qint32 &computed_desired_count) {
    m_computed_desired_count = computed_desired_count;
    m_computed_desired_count_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_computed_desired_count_Set() const{
    return m_computed_desired_count_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_computed_desired_count_Valid() const{
    return m_computed_desired_count_isValid;
}

qint32 OAIUpdateServicePrimaryTaskSetResponse_taskSet::getPendingCount() const {
    return m_pending_count;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setPendingCount(const qint32 &pending_count) {
    m_pending_count = pending_count;
    m_pending_count_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_pending_count_Set() const{
    return m_pending_count_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_pending_count_Valid() const{
    return m_pending_count_isValid;
}

qint32 OAIUpdateServicePrimaryTaskSetResponse_taskSet::getRunningCount() const {
    return m_running_count;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setRunningCount(const qint32 &running_count) {
    m_running_count = running_count;
    m_running_count_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_running_count_Set() const{
    return m_running_count_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_running_count_Valid() const{
    return m_running_count_isValid;
}

QDateTime OAIUpdateServicePrimaryTaskSetResponse_taskSet::getCreatedAt() const {
    return m_created_at;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIUpdateServicePrimaryTaskSetResponse_taskSet::getUpdatedAt() const {
    return m_updated_at;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAILaunchType OAIUpdateServicePrimaryTaskSetResponse_taskSet::getLaunchType() const {
    return m_launch_type;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setLaunchType(const OAILaunchType &launch_type) {
    m_launch_type = launch_type;
    m_launch_type_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_launch_type_Set() const{
    return m_launch_type_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_launch_type_Valid() const{
    return m_launch_type_isValid;
}

QList OAIUpdateServicePrimaryTaskSetResponse_taskSet::getCapacityProviderStrategy() const {
    return m_capacity_provider_strategy;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setCapacityProviderStrategy(const QList &capacity_provider_strategy) {
    m_capacity_provider_strategy = capacity_provider_strategy;
    m_capacity_provider_strategy_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_capacity_provider_strategy_Set() const{
    return m_capacity_provider_strategy_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_capacity_provider_strategy_Valid() const{
    return m_capacity_provider_strategy_isValid;
}

QString OAIUpdateServicePrimaryTaskSetResponse_taskSet::getPlatformVersion() const {
    return m_platform_version;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

QString OAIUpdateServicePrimaryTaskSetResponse_taskSet::getPlatformFamily() const {
    return m_platform_family;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setPlatformFamily(const QString &platform_family) {
    m_platform_family = platform_family;
    m_platform_family_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_platform_family_Set() const{
    return m_platform_family_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_platform_family_Valid() const{
    return m_platform_family_isValid;
}

OAITaskSet_networkConfiguration OAIUpdateServicePrimaryTaskSetResponse_taskSet::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setNetworkConfiguration(const OAITaskSet_networkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

QList OAIUpdateServicePrimaryTaskSetResponse_taskSet::getLoadBalancers() const {
    return m_load_balancers;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setLoadBalancers(const QList &load_balancers) {
    m_load_balancers = load_balancers;
    m_load_balancers_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_load_balancers_Set() const{
    return m_load_balancers_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_load_balancers_Valid() const{
    return m_load_balancers_isValid;
}

QList OAIUpdateServicePrimaryTaskSetResponse_taskSet::getServiceRegistries() const {
    return m_service_registries;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setServiceRegistries(const QList &service_registries) {
    m_service_registries = service_registries;
    m_service_registries_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_service_registries_Set() const{
    return m_service_registries_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_service_registries_Valid() const{
    return m_service_registries_isValid;
}

OAITaskSet_scale OAIUpdateServicePrimaryTaskSetResponse_taskSet::getScale() const {
    return m_scale;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setScale(const OAITaskSet_scale &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_scale_Valid() const{
    return m_scale_isValid;
}

OAIStabilityStatus OAIUpdateServicePrimaryTaskSetResponse_taskSet::getStabilityStatus() const {
    return m_stability_status;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setStabilityStatus(const OAIStabilityStatus &stability_status) {
    m_stability_status = stability_status;
    m_stability_status_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_stability_status_Set() const{
    return m_stability_status_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_stability_status_Valid() const{
    return m_stability_status_isValid;
}

QDateTime OAIUpdateServicePrimaryTaskSetResponse_taskSet::getStabilityStatusAt() const {
    return m_stability_status_at;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setStabilityStatusAt(const QDateTime &stability_status_at) {
    m_stability_status_at = stability_status_at;
    m_stability_status_at_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_stability_status_at_Set() const{
    return m_stability_status_at_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_stability_status_at_Valid() const{
    return m_stability_status_at_isValid;
}

QList OAIUpdateServicePrimaryTaskSetResponse_taskSet::getTags() const {
    return m_tags;
}
void OAIUpdateServicePrimaryTaskSetResponse_taskSet::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_set_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_computed_desired_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_provider_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_registries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stability_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stability_status_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServicePrimaryTaskSetResponse_taskSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
