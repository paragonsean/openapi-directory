/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISystemControl.h
 *
 * &lt;p&gt;A list of namespaced kernel parameters to set in the container. This parameter maps to &lt;code&gt;Sysctls&lt;/code&gt; in the &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate\&quot;&gt;Create a container&lt;/a&gt; section of the &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/api/v1.35/\&quot;&gt;Docker Remote API&lt;/a&gt; and the &lt;code&gt;--sysctl&lt;/code&gt; option to &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/reference/run/#security-configuration\&quot;&gt;docker run&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;We don&#39;t recommend that you specify network-related &lt;code&gt;systemControls&lt;/code&gt; parameters for multiple containers in a single task. This task also uses either the &lt;code&gt;awsvpc&lt;/code&gt; or &lt;code&gt;host&lt;/code&gt; network mode. It does it for the following reasons.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For tasks that use the &lt;code&gt;awsvpc&lt;/code&gt; network mode, if you set &lt;code&gt;systemControls&lt;/code&gt; for any container, it applies to all containers in the task. If you set different &lt;code&gt;systemControls&lt;/code&gt; for multiple containers in a single task, the container that&#39;s started last determines which &lt;code&gt;systemControls&lt;/code&gt; take effect.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For tasks that use the &lt;code&gt;host&lt;/code&gt; network mode, the &lt;code&gt;systemControls&lt;/code&gt; parameter applies to the container instance&#39;s kernel parameter and that of all containers of any tasks running on that container instance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAISystemControl_H
#define OAISystemControl_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISystemControl : public OAIObject {
public:
    OAISystemControl();
    OAISystemControl(QString json);
    ~OAISystemControl() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISystemControl)

#endif // OAISystemControl_H
