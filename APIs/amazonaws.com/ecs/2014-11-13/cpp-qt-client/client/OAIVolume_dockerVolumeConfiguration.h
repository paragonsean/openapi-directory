/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVolume_dockerVolumeConfiguration.h
 *
 * 
 */

#ifndef OAIVolume_dockerVolumeConfiguration_H
#define OAIVolume_dockerVolumeConfiguration_H

#include <QJsonObject>

#include "OAIScope.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVolume_dockerVolumeConfiguration : public OAIObject {
public:
    OAIVolume_dockerVolumeConfiguration();
    OAIVolume_dockerVolumeConfiguration(QString json);
    ~OAIVolume_dockerVolumeConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIScope getScope() const;
    void setScope(const OAIScope &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    bool getAutoprovision() const;
    void setAutoprovision(const bool &autoprovision);
    bool is_autoprovision_Set() const;
    bool is_autoprovision_Valid() const;

    QString getDriver() const;
    void setDriver(const QString &driver);
    bool is_driver_Set() const;
    bool is_driver_Valid() const;

    QMap getDriverOpts() const;
    void setDriverOpts(const QMap &driver_opts);
    bool is_driver_opts_Set() const;
    bool is_driver_opts_Valid() const;

    QMap getLabels() const;
    void setLabels(const QMap &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIScope m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    bool m_autoprovision;
    bool m_autoprovision_isSet;
    bool m_autoprovision_isValid;

    QString m_driver;
    bool m_driver_isSet;
    bool m_driver_isValid;

    QMap m_driver_opts;
    bool m_driver_opts_isSet;
    bool m_driver_opts_isValid;

    QMap m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVolume_dockerVolumeConfiguration)

#endif // OAIVolume_dockerVolumeConfiguration_H
