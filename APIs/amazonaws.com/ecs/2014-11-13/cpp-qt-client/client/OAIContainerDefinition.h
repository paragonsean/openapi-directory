/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainerDefinition.h
 *
 * Container definitions are used in task definitions to describe the different containers that are launched as part of a task.
 */

#ifndef OAIContainerDefinition_H
#define OAIContainerDefinition_H

#include <QJsonObject>

#include "OAIContainerDefinition_firelensConfiguration.h"
#include "OAIContainerDefinition_healthCheck.h"
#include "OAIContainerDefinition_linuxParameters.h"
#include "OAIContainerDefinition_logConfiguration.h"
#include "OAIContainerDefinition_repositoryCredentials.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContainerDefinition_repositoryCredentials;
class OAIContainerDefinition_linuxParameters;
class OAIContainerDefinition_logConfiguration;
class OAIContainerDefinition_healthCheck;
class OAIContainerDefinition_firelensConfiguration;

class OAIContainerDefinition : public OAIObject {
public:
    OAIContainerDefinition();
    OAIContainerDefinition(QString json);
    ~OAIContainerDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    OAIContainerDefinition_repositoryCredentials getRepositoryCredentials() const;
    void setRepositoryCredentials(const OAIContainerDefinition_repositoryCredentials &repository_credentials);
    bool is_repository_credentials_Set() const;
    bool is_repository_credentials_Valid() const;

    qint32 getCpu() const;
    void setCpu(const qint32 &cpu);
    bool is_cpu_Set() const;
    bool is_cpu_Valid() const;

    qint32 getMemory() const;
    void setMemory(const qint32 &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    qint32 getMemoryReservation() const;
    void setMemoryReservation(const qint32 &memory_reservation);
    bool is_memory_reservation_Set() const;
    bool is_memory_reservation_Valid() const;

    QList getLinks() const;
    void setLinks(const QList &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QList getPortMappings() const;
    void setPortMappings(const QList &port_mappings);
    bool is_port_mappings_Set() const;
    bool is_port_mappings_Valid() const;

    bool getEssential() const;
    void setEssential(const bool &essential);
    bool is_essential_Set() const;
    bool is_essential_Valid() const;

    QList getEntryPoint() const;
    void setEntryPoint(const QList &entry_point);
    bool is_entry_point_Set() const;
    bool is_entry_point_Valid() const;

    QList getCommand() const;
    void setCommand(const QList &command);
    bool is_command_Set() const;
    bool is_command_Valid() const;

    QList getEnvironment() const;
    void setEnvironment(const QList &environment);
    bool is_environment_Set() const;
    bool is_environment_Valid() const;

    QList getEnvironmentFiles() const;
    void setEnvironmentFiles(const QList &environment_files);
    bool is_environment_files_Set() const;
    bool is_environment_files_Valid() const;

    QList getMountPoints() const;
    void setMountPoints(const QList &mount_points);
    bool is_mount_points_Set() const;
    bool is_mount_points_Valid() const;

    QList getVolumesFrom() const;
    void setVolumesFrom(const QList &volumes_from);
    bool is_volumes_from_Set() const;
    bool is_volumes_from_Valid() const;

    OAIContainerDefinition_linuxParameters getLinuxParameters() const;
    void setLinuxParameters(const OAIContainerDefinition_linuxParameters &linux_parameters);
    bool is_linux_parameters_Set() const;
    bool is_linux_parameters_Valid() const;

    QList getSecrets() const;
    void setSecrets(const QList &secrets);
    bool is_secrets_Set() const;
    bool is_secrets_Valid() const;

    QList getDependsOn() const;
    void setDependsOn(const QList &depends_on);
    bool is_depends_on_Set() const;
    bool is_depends_on_Valid() const;

    qint32 getStartTimeout() const;
    void setStartTimeout(const qint32 &start_timeout);
    bool is_start_timeout_Set() const;
    bool is_start_timeout_Valid() const;

    qint32 getStopTimeout() const;
    void setStopTimeout(const qint32 &stop_timeout);
    bool is_stop_timeout_Set() const;
    bool is_stop_timeout_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getWorkingDirectory() const;
    void setWorkingDirectory(const QString &working_directory);
    bool is_working_directory_Set() const;
    bool is_working_directory_Valid() const;

    bool getDisableNetworking() const;
    void setDisableNetworking(const bool &disable_networking);
    bool is_disable_networking_Set() const;
    bool is_disable_networking_Valid() const;

    bool getPrivileged() const;
    void setPrivileged(const bool &privileged);
    bool is_privileged_Set() const;
    bool is_privileged_Valid() const;

    bool getReadonlyRootFilesystem() const;
    void setReadonlyRootFilesystem(const bool &readonly_root_filesystem);
    bool is_readonly_root_filesystem_Set() const;
    bool is_readonly_root_filesystem_Valid() const;

    QList getDnsServers() const;
    void setDnsServers(const QList &dns_servers);
    bool is_dns_servers_Set() const;
    bool is_dns_servers_Valid() const;

    QList getDnsSearchDomains() const;
    void setDnsSearchDomains(const QList &dns_search_domains);
    bool is_dns_search_domains_Set() const;
    bool is_dns_search_domains_Valid() const;

    QList getExtraHosts() const;
    void setExtraHosts(const QList &extra_hosts);
    bool is_extra_hosts_Set() const;
    bool is_extra_hosts_Valid() const;

    QList getDockerSecurityOptions() const;
    void setDockerSecurityOptions(const QList &docker_security_options);
    bool is_docker_security_options_Set() const;
    bool is_docker_security_options_Valid() const;

    bool getInteractive() const;
    void setInteractive(const bool &interactive);
    bool is_interactive_Set() const;
    bool is_interactive_Valid() const;

    bool getPseudoTerminal() const;
    void setPseudoTerminal(const bool &pseudo_terminal);
    bool is_pseudo_terminal_Set() const;
    bool is_pseudo_terminal_Valid() const;

    QMap getDockerLabels() const;
    void setDockerLabels(const QMap &docker_labels);
    bool is_docker_labels_Set() const;
    bool is_docker_labels_Valid() const;

    QList getUlimits() const;
    void setUlimits(const QList &ulimits);
    bool is_ulimits_Set() const;
    bool is_ulimits_Valid() const;

    OAIContainerDefinition_logConfiguration getLogConfiguration() const;
    void setLogConfiguration(const OAIContainerDefinition_logConfiguration &log_configuration);
    bool is_log_configuration_Set() const;
    bool is_log_configuration_Valid() const;

    OAIContainerDefinition_healthCheck getHealthCheck() const;
    void setHealthCheck(const OAIContainerDefinition_healthCheck &health_check);
    bool is_health_check_Set() const;
    bool is_health_check_Valid() const;

    QList getSystemControls() const;
    void setSystemControls(const QList &system_controls);
    bool is_system_controls_Set() const;
    bool is_system_controls_Valid() const;

    QList getResourceRequirements() const;
    void setResourceRequirements(const QList &resource_requirements);
    bool is_resource_requirements_Set() const;
    bool is_resource_requirements_Valid() const;

    OAIContainerDefinition_firelensConfiguration getFirelensConfiguration() const;
    void setFirelensConfiguration(const OAIContainerDefinition_firelensConfiguration &firelens_configuration);
    bool is_firelens_configuration_Set() const;
    bool is_firelens_configuration_Valid() const;

    QList getCredentialSpecs() const;
    void setCredentialSpecs(const QList &credential_specs);
    bool is_credential_specs_Set() const;
    bool is_credential_specs_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    OAIContainerDefinition_repositoryCredentials m_repository_credentials;
    bool m_repository_credentials_isSet;
    bool m_repository_credentials_isValid;

    qint32 m_cpu;
    bool m_cpu_isSet;
    bool m_cpu_isValid;

    qint32 m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    qint32 m_memory_reservation;
    bool m_memory_reservation_isSet;
    bool m_memory_reservation_isValid;

    QList m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QList m_port_mappings;
    bool m_port_mappings_isSet;
    bool m_port_mappings_isValid;

    bool m_essential;
    bool m_essential_isSet;
    bool m_essential_isValid;

    QList m_entry_point;
    bool m_entry_point_isSet;
    bool m_entry_point_isValid;

    QList m_command;
    bool m_command_isSet;
    bool m_command_isValid;

    QList m_environment;
    bool m_environment_isSet;
    bool m_environment_isValid;

    QList m_environment_files;
    bool m_environment_files_isSet;
    bool m_environment_files_isValid;

    QList m_mount_points;
    bool m_mount_points_isSet;
    bool m_mount_points_isValid;

    QList m_volumes_from;
    bool m_volumes_from_isSet;
    bool m_volumes_from_isValid;

    OAIContainerDefinition_linuxParameters m_linux_parameters;
    bool m_linux_parameters_isSet;
    bool m_linux_parameters_isValid;

    QList m_secrets;
    bool m_secrets_isSet;
    bool m_secrets_isValid;

    QList m_depends_on;
    bool m_depends_on_isSet;
    bool m_depends_on_isValid;

    qint32 m_start_timeout;
    bool m_start_timeout_isSet;
    bool m_start_timeout_isValid;

    qint32 m_stop_timeout;
    bool m_stop_timeout_isSet;
    bool m_stop_timeout_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_working_directory;
    bool m_working_directory_isSet;
    bool m_working_directory_isValid;

    bool m_disable_networking;
    bool m_disable_networking_isSet;
    bool m_disable_networking_isValid;

    bool m_privileged;
    bool m_privileged_isSet;
    bool m_privileged_isValid;

    bool m_readonly_root_filesystem;
    bool m_readonly_root_filesystem_isSet;
    bool m_readonly_root_filesystem_isValid;

    QList m_dns_servers;
    bool m_dns_servers_isSet;
    bool m_dns_servers_isValid;

    QList m_dns_search_domains;
    bool m_dns_search_domains_isSet;
    bool m_dns_search_domains_isValid;

    QList m_extra_hosts;
    bool m_extra_hosts_isSet;
    bool m_extra_hosts_isValid;

    QList m_docker_security_options;
    bool m_docker_security_options_isSet;
    bool m_docker_security_options_isValid;

    bool m_interactive;
    bool m_interactive_isSet;
    bool m_interactive_isValid;

    bool m_pseudo_terminal;
    bool m_pseudo_terminal_isSet;
    bool m_pseudo_terminal_isValid;

    QMap m_docker_labels;
    bool m_docker_labels_isSet;
    bool m_docker_labels_isValid;

    QList m_ulimits;
    bool m_ulimits_isSet;
    bool m_ulimits_isValid;

    OAIContainerDefinition_logConfiguration m_log_configuration;
    bool m_log_configuration_isSet;
    bool m_log_configuration_isValid;

    OAIContainerDefinition_healthCheck m_health_check;
    bool m_health_check_isSet;
    bool m_health_check_isValid;

    QList m_system_controls;
    bool m_system_controls_isSet;
    bool m_system_controls_isValid;

    QList m_resource_requirements;
    bool m_resource_requirements_isSet;
    bool m_resource_requirements_isValid;

    OAIContainerDefinition_firelensConfiguration m_firelens_configuration;
    bool m_firelens_configuration_isSet;
    bool m_firelens_configuration_isValid;

    QList m_credential_specs;
    bool m_credential_specs_isSet;
    bool m_credential_specs_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainerDefinition)

#endif // OAIContainerDefinition_H
