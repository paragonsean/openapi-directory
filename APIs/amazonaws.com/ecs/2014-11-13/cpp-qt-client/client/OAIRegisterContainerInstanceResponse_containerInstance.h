/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRegisterContainerInstanceResponse_containerInstance.h
 *
 * 
 */

#ifndef OAIRegisterContainerInstanceResponse_containerInstance_H
#define OAIRegisterContainerInstanceResponse_containerInstance_H

#include <QJsonObject>

#include "OAIAgentUpdateStatus.h"
#include "OAIContainerInstance_healthStatus.h"
#include "OAIContainerInstance_versionInfo.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContainerInstance_versionInfo;
class OAIContainerInstance_healthStatus;

class OAIRegisterContainerInstanceResponse_containerInstance : public OAIObject {
public:
    OAIRegisterContainerInstanceResponse_containerInstance();
    OAIRegisterContainerInstanceResponse_containerInstance(QString json);
    ~OAIRegisterContainerInstanceResponse_containerInstance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContainerInstanceArn() const;
    void setContainerInstanceArn(const QString &container_instance_arn);
    bool is_container_instance_arn_Set() const;
    bool is_container_instance_arn_Valid() const;

    QString getEc2InstanceId() const;
    void setEc2InstanceId(const QString &ec2_instance_id);
    bool is_ec2_instance_id_Set() const;
    bool is_ec2_instance_id_Valid() const;

    QString getCapacityProviderName() const;
    void setCapacityProviderName(const QString &capacity_provider_name);
    bool is_capacity_provider_name_Set() const;
    bool is_capacity_provider_name_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    OAIContainerInstance_versionInfo getVersionInfo() const;
    void setVersionInfo(const OAIContainerInstance_versionInfo &version_info);
    bool is_version_info_Set() const;
    bool is_version_info_Valid() const;

    QList getRemainingResources() const;
    void setRemainingResources(const QList &remaining_resources);
    bool is_remaining_resources_Set() const;
    bool is_remaining_resources_Valid() const;

    QList getRegisteredResources() const;
    void setRegisteredResources(const QList &registered_resources);
    bool is_registered_resources_Set() const;
    bool is_registered_resources_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusReason() const;
    void setStatusReason(const QString &status_reason);
    bool is_status_reason_Set() const;
    bool is_status_reason_Valid() const;

    bool getAgentConnected() const;
    void setAgentConnected(const bool &agent_connected);
    bool is_agent_connected_Set() const;
    bool is_agent_connected_Valid() const;

    qint32 getRunningTasksCount() const;
    void setRunningTasksCount(const qint32 &running_tasks_count);
    bool is_running_tasks_count_Set() const;
    bool is_running_tasks_count_Valid() const;

    qint32 getPendingTasksCount() const;
    void setPendingTasksCount(const qint32 &pending_tasks_count);
    bool is_pending_tasks_count_Set() const;
    bool is_pending_tasks_count_Valid() const;

    OAIAgentUpdateStatus getAgentUpdateStatus() const;
    void setAgentUpdateStatus(const OAIAgentUpdateStatus &agent_update_status);
    bool is_agent_update_status_Set() const;
    bool is_agent_update_status_Valid() const;

    QList getAttributes() const;
    void setAttributes(const QList &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QDateTime getRegisteredAt() const;
    void setRegisteredAt(const QDateTime &registered_at);
    bool is_registered_at_Set() const;
    bool is_registered_at_Valid() const;

    QList getAttachments() const;
    void setAttachments(const QList &attachments);
    bool is_attachments_Set() const;
    bool is_attachments_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIContainerInstance_healthStatus getHealthStatus() const;
    void setHealthStatus(const OAIContainerInstance_healthStatus &health_status);
    bool is_health_status_Set() const;
    bool is_health_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_container_instance_arn;
    bool m_container_instance_arn_isSet;
    bool m_container_instance_arn_isValid;

    QString m_ec2_instance_id;
    bool m_ec2_instance_id_isSet;
    bool m_ec2_instance_id_isValid;

    QString m_capacity_provider_name;
    bool m_capacity_provider_name_isSet;
    bool m_capacity_provider_name_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    OAIContainerInstance_versionInfo m_version_info;
    bool m_version_info_isSet;
    bool m_version_info_isValid;

    QList m_remaining_resources;
    bool m_remaining_resources_isSet;
    bool m_remaining_resources_isValid;

    QList m_registered_resources;
    bool m_registered_resources_isSet;
    bool m_registered_resources_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_reason;
    bool m_status_reason_isSet;
    bool m_status_reason_isValid;

    bool m_agent_connected;
    bool m_agent_connected_isSet;
    bool m_agent_connected_isValid;

    qint32 m_running_tasks_count;
    bool m_running_tasks_count_isSet;
    bool m_running_tasks_count_isValid;

    qint32 m_pending_tasks_count;
    bool m_pending_tasks_count_isSet;
    bool m_pending_tasks_count_isValid;

    OAIAgentUpdateStatus m_agent_update_status;
    bool m_agent_update_status_isSet;
    bool m_agent_update_status_isValid;

    QList m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QDateTime m_registered_at;
    bool m_registered_at_isSet;
    bool m_registered_at_isValid;

    QList m_attachments;
    bool m_attachments_isSet;
    bool m_attachments_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIContainerInstance_healthStatus m_health_status;
    bool m_health_status_isSet;
    bool m_health_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRegisterContainerInstanceResponse_containerInstance)

#endif // OAIRegisterContainerInstanceResponse_containerInstance_H
