/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateClusterRequest.h
 *
 * 
 */

#ifndef OAIUpdateClusterRequest_H
#define OAIUpdateClusterRequest_H

#include <QJsonObject>

#include "OAICreateClusterRequest_serviceConnectDefaults.h"
#include "OAIUpdateClusterRequest_configuration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateClusterRequest_configuration;
class OAICreateClusterRequest_serviceConnectDefaults;

class OAIUpdateClusterRequest : public OAIObject {
public:
    OAIUpdateClusterRequest();
    OAIUpdateClusterRequest(QString json);
    ~OAIUpdateClusterRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCluster() const;
    void setCluster(const QString &cluster);
    bool is_cluster_Set() const;
    bool is_cluster_Valid() const;

    QList getSettings() const;
    void setSettings(const QList &settings);
    bool is_settings_Set() const;
    bool is_settings_Valid() const;

    OAIUpdateClusterRequest_configuration getConfiguration() const;
    void setConfiguration(const OAIUpdateClusterRequest_configuration &configuration);
    bool is_configuration_Set() const;
    bool is_configuration_Valid() const;

    OAICreateClusterRequest_serviceConnectDefaults getServiceConnectDefaults() const;
    void setServiceConnectDefaults(const OAICreateClusterRequest_serviceConnectDefaults &service_connect_defaults);
    bool is_service_connect_defaults_Set() const;
    bool is_service_connect_defaults_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster;
    bool m_cluster_isSet;
    bool m_cluster_isValid;

    QList m_settings;
    bool m_settings_isSet;
    bool m_settings_isValid;

    OAIUpdateClusterRequest_configuration m_configuration;
    bool m_configuration_isSet;
    bool m_configuration_isValid;

    OAICreateClusterRequest_serviceConnectDefaults m_service_connect_defaults;
    bool m_service_connect_defaults_isSet;
    bool m_service_connect_defaults_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateClusterRequest)

#endif // OAIUpdateClusterRequest_H
