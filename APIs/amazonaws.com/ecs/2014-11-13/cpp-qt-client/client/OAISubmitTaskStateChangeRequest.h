/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubmitTaskStateChangeRequest.h
 *
 * 
 */

#ifndef OAISubmitTaskStateChangeRequest_H
#define OAISubmitTaskStateChangeRequest_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISubmitTaskStateChangeRequest : public OAIObject {
public:
    OAISubmitTaskStateChangeRequest();
    OAISubmitTaskStateChangeRequest(QString json);
    ~OAISubmitTaskStateChangeRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCluster() const;
    void setCluster(const QString &cluster);
    bool is_cluster_Set() const;
    bool is_cluster_Valid() const;

    QString getTask() const;
    void setTask(const QString &task);
    bool is_task_Set() const;
    bool is_task_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    QList getContainers() const;
    void setContainers(const QList &containers);
    bool is_containers_Set() const;
    bool is_containers_Valid() const;

    QList getAttachments() const;
    void setAttachments(const QList &attachments);
    bool is_attachments_Set() const;
    bool is_attachments_Valid() const;

    QList getManagedAgents() const;
    void setManagedAgents(const QList &managed_agents);
    bool is_managed_agents_Set() const;
    bool is_managed_agents_Valid() const;

    QDateTime getPullStartedAt() const;
    void setPullStartedAt(const QDateTime &pull_started_at);
    bool is_pull_started_at_Set() const;
    bool is_pull_started_at_Valid() const;

    QDateTime getPullStoppedAt() const;
    void setPullStoppedAt(const QDateTime &pull_stopped_at);
    bool is_pull_stopped_at_Set() const;
    bool is_pull_stopped_at_Valid() const;

    QDateTime getExecutionStoppedAt() const;
    void setExecutionStoppedAt(const QDateTime &execution_stopped_at);
    bool is_execution_stopped_at_Set() const;
    bool is_execution_stopped_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster;
    bool m_cluster_isSet;
    bool m_cluster_isValid;

    QString m_task;
    bool m_task_isSet;
    bool m_task_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    QList m_containers;
    bool m_containers_isSet;
    bool m_containers_isValid;

    QList m_attachments;
    bool m_attachments_isSet;
    bool m_attachments_isValid;

    QList m_managed_agents;
    bool m_managed_agents_isSet;
    bool m_managed_agents_isValid;

    QDateTime m_pull_started_at;
    bool m_pull_started_at_isSet;
    bool m_pull_started_at_isValid;

    QDateTime m_pull_stopped_at;
    bool m_pull_stopped_at_isSet;
    bool m_pull_stopped_at_isValid;

    QDateTime m_execution_stopped_at;
    bool m_execution_stopped_at_isSet;
    bool m_execution_stopped_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubmitTaskStateChangeRequest)

#endif // OAISubmitTaskStateChangeRequest_H
