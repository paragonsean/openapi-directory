/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerDefinition_linuxParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerDefinition_linuxParameters::OAIContainerDefinition_linuxParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerDefinition_linuxParameters::OAIContainerDefinition_linuxParameters() {
    this->initializeModel();
}

OAIContainerDefinition_linuxParameters::~OAIContainerDefinition_linuxParameters() {}

void OAIContainerDefinition_linuxParameters::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_devices_isSet = false;
    m_devices_isValid = false;

    m_init_process_enabled_isSet = false;
    m_init_process_enabled_isValid = false;

    m_shared_memory_size_isSet = false;
    m_shared_memory_size_isValid = false;

    m_tmpfs_isSet = false;
    m_tmpfs_isValid = false;

    m_max_swap_isSet = false;
    m_max_swap_isValid = false;

    m_swappiness_isSet = false;
    m_swappiness_isValid = false;
}

void OAIContainerDefinition_linuxParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerDefinition_linuxParameters::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_devices_isValid = ::OpenAPI::fromJsonValue(m_devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;

    m_init_process_enabled_isValid = ::OpenAPI::fromJsonValue(m_init_process_enabled, json[QString("initProcessEnabled")]);
    m_init_process_enabled_isSet = !json[QString("initProcessEnabled")].isNull() && m_init_process_enabled_isValid;

    m_shared_memory_size_isValid = ::OpenAPI::fromJsonValue(m_shared_memory_size, json[QString("sharedMemorySize")]);
    m_shared_memory_size_isSet = !json[QString("sharedMemorySize")].isNull() && m_shared_memory_size_isValid;

    m_tmpfs_isValid = ::OpenAPI::fromJsonValue(m_tmpfs, json[QString("tmpfs")]);
    m_tmpfs_isSet = !json[QString("tmpfs")].isNull() && m_tmpfs_isValid;

    m_max_swap_isValid = ::OpenAPI::fromJsonValue(m_max_swap, json[QString("maxSwap")]);
    m_max_swap_isSet = !json[QString("maxSwap")].isNull() && m_max_swap_isValid;

    m_swappiness_isValid = ::OpenAPI::fromJsonValue(m_swappiness, json[QString("swappiness")]);
    m_swappiness_isSet = !json[QString("swappiness")].isNull() && m_swappiness_isValid;
}

QString OAIContainerDefinition_linuxParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerDefinition_linuxParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities.isSet()) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_devices.isSet()) {
        obj.insert(QString("devices"), ::OpenAPI::toJsonValue(m_devices));
    }
    if (m_init_process_enabled_isSet) {
        obj.insert(QString("initProcessEnabled"), ::OpenAPI::toJsonValue(m_init_process_enabled));
    }
    if (m_shared_memory_size_isSet) {
        obj.insert(QString("sharedMemorySize"), ::OpenAPI::toJsonValue(m_shared_memory_size));
    }
    if (m_tmpfs.isSet()) {
        obj.insert(QString("tmpfs"), ::OpenAPI::toJsonValue(m_tmpfs));
    }
    if (m_max_swap_isSet) {
        obj.insert(QString("maxSwap"), ::OpenAPI::toJsonValue(m_max_swap));
    }
    if (m_swappiness_isSet) {
        obj.insert(QString("swappiness"), ::OpenAPI::toJsonValue(m_swappiness));
    }
    return obj;
}

OAILinuxParameters_capabilities OAIContainerDefinition_linuxParameters::getCapabilities() const {
    return m_capabilities;
}
void OAIContainerDefinition_linuxParameters::setCapabilities(const OAILinuxParameters_capabilities &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIContainerDefinition_linuxParameters::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIContainerDefinition_linuxParameters::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QList OAIContainerDefinition_linuxParameters::getDevices() const {
    return m_devices;
}
void OAIContainerDefinition_linuxParameters::setDevices(const QList &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAIContainerDefinition_linuxParameters::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAIContainerDefinition_linuxParameters::is_devices_Valid() const{
    return m_devices_isValid;
}

bool OAIContainerDefinition_linuxParameters::getInitProcessEnabled() const {
    return m_init_process_enabled;
}
void OAIContainerDefinition_linuxParameters::setInitProcessEnabled(const bool &init_process_enabled) {
    m_init_process_enabled = init_process_enabled;
    m_init_process_enabled_isSet = true;
}

bool OAIContainerDefinition_linuxParameters::is_init_process_enabled_Set() const{
    return m_init_process_enabled_isSet;
}

bool OAIContainerDefinition_linuxParameters::is_init_process_enabled_Valid() const{
    return m_init_process_enabled_isValid;
}

qint32 OAIContainerDefinition_linuxParameters::getSharedMemorySize() const {
    return m_shared_memory_size;
}
void OAIContainerDefinition_linuxParameters::setSharedMemorySize(const qint32 &shared_memory_size) {
    m_shared_memory_size = shared_memory_size;
    m_shared_memory_size_isSet = true;
}

bool OAIContainerDefinition_linuxParameters::is_shared_memory_size_Set() const{
    return m_shared_memory_size_isSet;
}

bool OAIContainerDefinition_linuxParameters::is_shared_memory_size_Valid() const{
    return m_shared_memory_size_isValid;
}

QList OAIContainerDefinition_linuxParameters::getTmpfs() const {
    return m_tmpfs;
}
void OAIContainerDefinition_linuxParameters::setTmpfs(const QList &tmpfs) {
    m_tmpfs = tmpfs;
    m_tmpfs_isSet = true;
}

bool OAIContainerDefinition_linuxParameters::is_tmpfs_Set() const{
    return m_tmpfs_isSet;
}

bool OAIContainerDefinition_linuxParameters::is_tmpfs_Valid() const{
    return m_tmpfs_isValid;
}

qint32 OAIContainerDefinition_linuxParameters::getMaxSwap() const {
    return m_max_swap;
}
void OAIContainerDefinition_linuxParameters::setMaxSwap(const qint32 &max_swap) {
    m_max_swap = max_swap;
    m_max_swap_isSet = true;
}

bool OAIContainerDefinition_linuxParameters::is_max_swap_Set() const{
    return m_max_swap_isSet;
}

bool OAIContainerDefinition_linuxParameters::is_max_swap_Valid() const{
    return m_max_swap_isValid;
}

qint32 OAIContainerDefinition_linuxParameters::getSwappiness() const {
    return m_swappiness;
}
void OAIContainerDefinition_linuxParameters::setSwappiness(const qint32 &swappiness) {
    m_swappiness = swappiness;
    m_swappiness_isSet = true;
}

bool OAIContainerDefinition_linuxParameters::is_swappiness_Set() const{
    return m_swappiness_isSet;
}

bool OAIContainerDefinition_linuxParameters::is_swappiness_Valid() const{
    return m_swappiness_isValid;
}

bool OAIContainerDefinition_linuxParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_devices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_init_process_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_memory_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tmpfs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_swap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swappiness_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerDefinition_linuxParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
