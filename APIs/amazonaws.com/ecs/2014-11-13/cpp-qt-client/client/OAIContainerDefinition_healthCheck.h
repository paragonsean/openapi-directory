/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainerDefinition_healthCheck.h
 *
 * 
 */

#ifndef OAIContainerDefinition_healthCheck_H
#define OAIContainerDefinition_healthCheck_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIContainerDefinition_healthCheck : public OAIObject {
public:
    OAIContainerDefinition_healthCheck();
    OAIContainerDefinition_healthCheck(QString json);
    ~OAIContainerDefinition_healthCheck() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getCommand() const;
    void setCommand(const QList &command);
    bool is_command_Set() const;
    bool is_command_Valid() const;

    qint32 getInterval() const;
    void setInterval(const qint32 &interval);
    bool is_interval_Set() const;
    bool is_interval_Valid() const;

    qint32 getTimeout() const;
    void setTimeout(const qint32 &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    qint32 getRetries() const;
    void setRetries(const qint32 &retries);
    bool is_retries_Set() const;
    bool is_retries_Valid() const;

    qint32 getStartPeriod() const;
    void setStartPeriod(const qint32 &start_period);
    bool is_start_period_Set() const;
    bool is_start_period_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_command;
    bool m_command_isSet;
    bool m_command_isValid;

    qint32 m_interval;
    bool m_interval_isSet;
    bool m_interval_isValid;

    qint32 m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    qint32 m_retries;
    bool m_retries_isSet;
    bool m_retries_isValid;

    qint32 m_start_period;
    bool m_start_period_isSet;
    bool m_start_period_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainerDefinition_healthCheck)

#endif // OAIContainerDefinition_healthCheck_H
