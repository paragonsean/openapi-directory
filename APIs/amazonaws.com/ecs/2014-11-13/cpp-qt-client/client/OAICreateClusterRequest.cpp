/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateClusterRequest::OAICreateClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateClusterRequest::OAICreateClusterRequest() {
    this->initializeModel();
}

OAICreateClusterRequest::~OAICreateClusterRequest() {}

void OAICreateClusterRequest::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_capacity_providers_isSet = false;
    m_capacity_providers_isValid = false;

    m_default_capacity_provider_strategy_isSet = false;
    m_default_capacity_provider_strategy_isValid = false;

    m_service_connect_defaults_isSet = false;
    m_service_connect_defaults_isValid = false;
}

void OAICreateClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateClusterRequest::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_capacity_providers_isValid = ::OpenAPI::fromJsonValue(m_capacity_providers, json[QString("capacityProviders")]);
    m_capacity_providers_isSet = !json[QString("capacityProviders")].isNull() && m_capacity_providers_isValid;

    m_default_capacity_provider_strategy_isValid = ::OpenAPI::fromJsonValue(m_default_capacity_provider_strategy, json[QString("defaultCapacityProviderStrategy")]);
    m_default_capacity_provider_strategy_isSet = !json[QString("defaultCapacityProviderStrategy")].isNull() && m_default_capacity_provider_strategy_isValid;

    m_service_connect_defaults_isValid = ::OpenAPI::fromJsonValue(m_service_connect_defaults, json[QString("serviceConnectDefaults")]);
    m_service_connect_defaults_isSet = !json[QString("serviceConnectDefaults")].isNull() && m_service_connect_defaults_isValid;
}

QString OAICreateClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_capacity_providers.isSet()) {
        obj.insert(QString("capacityProviders"), ::OpenAPI::toJsonValue(m_capacity_providers));
    }
    if (m_default_capacity_provider_strategy.isSet()) {
        obj.insert(QString("defaultCapacityProviderStrategy"), ::OpenAPI::toJsonValue(m_default_capacity_provider_strategy));
    }
    if (m_service_connect_defaults.isSet()) {
        obj.insert(QString("serviceConnectDefaults"), ::OpenAPI::toJsonValue(m_service_connect_defaults));
    }
    return obj;
}

QString OAICreateClusterRequest::getClusterName() const {
    return m_cluster_name;
}
void OAICreateClusterRequest::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAICreateClusterRequest::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAICreateClusterRequest::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QList OAICreateClusterRequest::getTags() const {
    return m_tags;
}
void OAICreateClusterRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateClusterRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateClusterRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAICreateClusterRequest::getSettings() const {
    return m_settings;
}
void OAICreateClusterRequest::setSettings(const QList &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAICreateClusterRequest::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAICreateClusterRequest::is_settings_Valid() const{
    return m_settings_isValid;
}

OAICreateClusterRequest_configuration OAICreateClusterRequest::getConfiguration() const {
    return m_configuration;
}
void OAICreateClusterRequest::setConfiguration(const OAICreateClusterRequest_configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAICreateClusterRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAICreateClusterRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QList OAICreateClusterRequest::getCapacityProviders() const {
    return m_capacity_providers;
}
void OAICreateClusterRequest::setCapacityProviders(const QList &capacity_providers) {
    m_capacity_providers = capacity_providers;
    m_capacity_providers_isSet = true;
}

bool OAICreateClusterRequest::is_capacity_providers_Set() const{
    return m_capacity_providers_isSet;
}

bool OAICreateClusterRequest::is_capacity_providers_Valid() const{
    return m_capacity_providers_isValid;
}

QList OAICreateClusterRequest::getDefaultCapacityProviderStrategy() const {
    return m_default_capacity_provider_strategy;
}
void OAICreateClusterRequest::setDefaultCapacityProviderStrategy(const QList &default_capacity_provider_strategy) {
    m_default_capacity_provider_strategy = default_capacity_provider_strategy;
    m_default_capacity_provider_strategy_isSet = true;
}

bool OAICreateClusterRequest::is_default_capacity_provider_strategy_Set() const{
    return m_default_capacity_provider_strategy_isSet;
}

bool OAICreateClusterRequest::is_default_capacity_provider_strategy_Valid() const{
    return m_default_capacity_provider_strategy_isValid;
}

OAICreateClusterRequest_serviceConnectDefaults OAICreateClusterRequest::getServiceConnectDefaults() const {
    return m_service_connect_defaults;
}
void OAICreateClusterRequest::setServiceConnectDefaults(const OAICreateClusterRequest_serviceConnectDefaults &service_connect_defaults) {
    m_service_connect_defaults = service_connect_defaults;
    m_service_connect_defaults_isSet = true;
}

bool OAICreateClusterRequest::is_service_connect_defaults_Set() const{
    return m_service_connect_defaults_isSet;
}

bool OAICreateClusterRequest::is_service_connect_defaults_Valid() const{
    return m_service_connect_defaults_isValid;
}

bool OAICreateClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_providers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_capacity_provider_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_connect_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
