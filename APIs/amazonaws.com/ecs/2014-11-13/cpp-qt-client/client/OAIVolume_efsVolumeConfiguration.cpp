/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume_efsVolumeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume_efsVolumeConfiguration::OAIVolume_efsVolumeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume_efsVolumeConfiguration::OAIVolume_efsVolumeConfiguration() {
    this->initializeModel();
}

OAIVolume_efsVolumeConfiguration::~OAIVolume_efsVolumeConfiguration() {}

void OAIVolume_efsVolumeConfiguration::initializeModel() {

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_root_directory_isSet = false;
    m_root_directory_isValid = false;

    m_transit_encryption_isSet = false;
    m_transit_encryption_isValid = false;

    m_transit_encryption_port_isSet = false;
    m_transit_encryption_port_isValid = false;

    m_authorization_config_isSet = false;
    m_authorization_config_isValid = false;
}

void OAIVolume_efsVolumeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume_efsVolumeConfiguration::fromJsonObject(QJsonObject json) {

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("fileSystemId")]);
    m_file_system_id_isSet = !json[QString("fileSystemId")].isNull() && m_file_system_id_isValid;

    m_root_directory_isValid = ::OpenAPI::fromJsonValue(m_root_directory, json[QString("rootDirectory")]);
    m_root_directory_isSet = !json[QString("rootDirectory")].isNull() && m_root_directory_isValid;

    m_transit_encryption_isValid = ::OpenAPI::fromJsonValue(m_transit_encryption, json[QString("transitEncryption")]);
    m_transit_encryption_isSet = !json[QString("transitEncryption")].isNull() && m_transit_encryption_isValid;

    m_transit_encryption_port_isValid = ::OpenAPI::fromJsonValue(m_transit_encryption_port, json[QString("transitEncryptionPort")]);
    m_transit_encryption_port_isSet = !json[QString("transitEncryptionPort")].isNull() && m_transit_encryption_port_isValid;

    m_authorization_config_isValid = ::OpenAPI::fromJsonValue(m_authorization_config, json[QString("authorizationConfig")]);
    m_authorization_config_isSet = !json[QString("authorizationConfig")].isNull() && m_authorization_config_isValid;
}

QString OAIVolume_efsVolumeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume_efsVolumeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_file_system_id_isSet) {
        obj.insert(QString("fileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_root_directory_isSet) {
        obj.insert(QString("rootDirectory"), ::OpenAPI::toJsonValue(m_root_directory));
    }
    if (m_transit_encryption.isSet()) {
        obj.insert(QString("transitEncryption"), ::OpenAPI::toJsonValue(m_transit_encryption));
    }
    if (m_transit_encryption_port_isSet) {
        obj.insert(QString("transitEncryptionPort"), ::OpenAPI::toJsonValue(m_transit_encryption_port));
    }
    if (m_authorization_config.isSet()) {
        obj.insert(QString("authorizationConfig"), ::OpenAPI::toJsonValue(m_authorization_config));
    }
    return obj;
}

QString OAIVolume_efsVolumeConfiguration::getFileSystemId() const {
    return m_file_system_id;
}
void OAIVolume_efsVolumeConfiguration::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIVolume_efsVolumeConfiguration::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIVolume_efsVolumeConfiguration::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAIVolume_efsVolumeConfiguration::getRootDirectory() const {
    return m_root_directory;
}
void OAIVolume_efsVolumeConfiguration::setRootDirectory(const QString &root_directory) {
    m_root_directory = root_directory;
    m_root_directory_isSet = true;
}

bool OAIVolume_efsVolumeConfiguration::is_root_directory_Set() const{
    return m_root_directory_isSet;
}

bool OAIVolume_efsVolumeConfiguration::is_root_directory_Valid() const{
    return m_root_directory_isValid;
}

OAIEFSTransitEncryption OAIVolume_efsVolumeConfiguration::getTransitEncryption() const {
    return m_transit_encryption;
}
void OAIVolume_efsVolumeConfiguration::setTransitEncryption(const OAIEFSTransitEncryption &transit_encryption) {
    m_transit_encryption = transit_encryption;
    m_transit_encryption_isSet = true;
}

bool OAIVolume_efsVolumeConfiguration::is_transit_encryption_Set() const{
    return m_transit_encryption_isSet;
}

bool OAIVolume_efsVolumeConfiguration::is_transit_encryption_Valid() const{
    return m_transit_encryption_isValid;
}

qint32 OAIVolume_efsVolumeConfiguration::getTransitEncryptionPort() const {
    return m_transit_encryption_port;
}
void OAIVolume_efsVolumeConfiguration::setTransitEncryptionPort(const qint32 &transit_encryption_port) {
    m_transit_encryption_port = transit_encryption_port;
    m_transit_encryption_port_isSet = true;
}

bool OAIVolume_efsVolumeConfiguration::is_transit_encryption_port_Set() const{
    return m_transit_encryption_port_isSet;
}

bool OAIVolume_efsVolumeConfiguration::is_transit_encryption_port_Valid() const{
    return m_transit_encryption_port_isValid;
}

OAIEFSVolumeConfiguration_authorizationConfig OAIVolume_efsVolumeConfiguration::getAuthorizationConfig() const {
    return m_authorization_config;
}
void OAIVolume_efsVolumeConfiguration::setAuthorizationConfig(const OAIEFSVolumeConfiguration_authorizationConfig &authorization_config) {
    m_authorization_config = authorization_config;
    m_authorization_config_isSet = true;
}

bool OAIVolume_efsVolumeConfiguration::is_authorization_config_Set() const{
    return m_authorization_config_isSet;
}

bool OAIVolume_efsVolumeConfiguration::is_authorization_config_Valid() const{
    return m_authorization_config_isValid;
}

bool OAIVolume_efsVolumeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_encryption_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume_efsVolumeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_system_id_isValid && true;
}

} // namespace OpenAPI
