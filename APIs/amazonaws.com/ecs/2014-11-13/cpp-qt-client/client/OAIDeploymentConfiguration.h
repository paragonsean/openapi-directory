/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeploymentConfiguration.h
 *
 * Optional deployment parameters that control how many tasks run during a deployment and the ordering of stopping and starting tasks.
 */

#ifndef OAIDeploymentConfiguration_H
#define OAIDeploymentConfiguration_H

#include <QJsonObject>

#include "OAIDeploymentConfiguration_alarms.h"
#include "OAIDeploymentConfiguration_deploymentCircuitBreaker.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeploymentConfiguration_deploymentCircuitBreaker;
class OAIDeploymentConfiguration_alarms;

class OAIDeploymentConfiguration : public OAIObject {
public:
    OAIDeploymentConfiguration();
    OAIDeploymentConfiguration(QString json);
    ~OAIDeploymentConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDeploymentConfiguration_deploymentCircuitBreaker getDeploymentCircuitBreaker() const;
    void setDeploymentCircuitBreaker(const OAIDeploymentConfiguration_deploymentCircuitBreaker &deployment_circuit_breaker);
    bool is_deployment_circuit_breaker_Set() const;
    bool is_deployment_circuit_breaker_Valid() const;

    qint32 getMaximumPercent() const;
    void setMaximumPercent(const qint32 &maximum_percent);
    bool is_maximum_percent_Set() const;
    bool is_maximum_percent_Valid() const;

    qint32 getMinimumHealthyPercent() const;
    void setMinimumHealthyPercent(const qint32 &minimum_healthy_percent);
    bool is_minimum_healthy_percent_Set() const;
    bool is_minimum_healthy_percent_Valid() const;

    OAIDeploymentConfiguration_alarms getAlarms() const;
    void setAlarms(const OAIDeploymentConfiguration_alarms &alarms);
    bool is_alarms_Set() const;
    bool is_alarms_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDeploymentConfiguration_deploymentCircuitBreaker m_deployment_circuit_breaker;
    bool m_deployment_circuit_breaker_isSet;
    bool m_deployment_circuit_breaker_isValid;

    qint32 m_maximum_percent;
    bool m_maximum_percent_isSet;
    bool m_maximum_percent_isValid;

    qint32 m_minimum_healthy_percent;
    bool m_minimum_healthy_percent_isSet;
    bool m_minimum_healthy_percent_isValid;

    OAIDeploymentConfiguration_alarms m_alarms;
    bool m_alarms_isSet;
    bool m_alarms_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeploymentConfiguration)

#endif // OAIDeploymentConfiguration_H
