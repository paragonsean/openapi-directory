/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTaskDefinitionResponse_taskDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTaskDefinitionResponse_taskDefinition::OAIDescribeTaskDefinitionResponse_taskDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTaskDefinitionResponse_taskDefinition::OAIDescribeTaskDefinitionResponse_taskDefinition() {
    this->initializeModel();
}

OAIDescribeTaskDefinitionResponse_taskDefinition::~OAIDescribeTaskDefinitionResponse_taskDefinition() {}

void OAIDescribeTaskDefinitionResponse_taskDefinition::initializeModel() {

    m_task_definition_arn_isSet = false;
    m_task_definition_arn_isValid = false;

    m_container_definitions_isSet = false;
    m_container_definitions_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_task_role_arn_isSet = false;
    m_task_role_arn_isValid = false;

    m_execution_role_arn_isSet = false;
    m_execution_role_arn_isValid = false;

    m_network_mode_isSet = false;
    m_network_mode_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_requires_attributes_isSet = false;
    m_requires_attributes_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_compatibilities_isSet = false;
    m_compatibilities_isValid = false;

    m_runtime_platform_isSet = false;
    m_runtime_platform_isValid = false;

    m_requires_compatibilities_isSet = false;
    m_requires_compatibilities_isValid = false;

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_inference_accelerators_isSet = false;
    m_inference_accelerators_isValid = false;

    m_pid_mode_isSet = false;
    m_pid_mode_isValid = false;

    m_ipc_mode_isSet = false;
    m_ipc_mode_isValid = false;

    m_proxy_configuration_isSet = false;
    m_proxy_configuration_isValid = false;

    m_registered_at_isSet = false;
    m_registered_at_isValid = false;

    m_deregistered_at_isSet = false;
    m_deregistered_at_isValid = false;

    m_registered_by_isSet = false;
    m_registered_by_isValid = false;

    m_ephemeral_storage_isSet = false;
    m_ephemeral_storage_isValid = false;
}

void OAIDescribeTaskDefinitionResponse_taskDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTaskDefinitionResponse_taskDefinition::fromJsonObject(QJsonObject json) {

    m_task_definition_arn_isValid = ::OpenAPI::fromJsonValue(m_task_definition_arn, json[QString("taskDefinitionArn")]);
    m_task_definition_arn_isSet = !json[QString("taskDefinitionArn")].isNull() && m_task_definition_arn_isValid;

    m_container_definitions_isValid = ::OpenAPI::fromJsonValue(m_container_definitions, json[QString("containerDefinitions")]);
    m_container_definitions_isSet = !json[QString("containerDefinitions")].isNull() && m_container_definitions_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_task_role_arn_isValid = ::OpenAPI::fromJsonValue(m_task_role_arn, json[QString("taskRoleArn")]);
    m_task_role_arn_isSet = !json[QString("taskRoleArn")].isNull() && m_task_role_arn_isValid;

    m_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_role_arn, json[QString("executionRoleArn")]);
    m_execution_role_arn_isSet = !json[QString("executionRoleArn")].isNull() && m_execution_role_arn_isValid;

    m_network_mode_isValid = ::OpenAPI::fromJsonValue(m_network_mode, json[QString("networkMode")]);
    m_network_mode_isSet = !json[QString("networkMode")].isNull() && m_network_mode_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_requires_attributes_isValid = ::OpenAPI::fromJsonValue(m_requires_attributes, json[QString("requiresAttributes")]);
    m_requires_attributes_isSet = !json[QString("requiresAttributes")].isNull() && m_requires_attributes_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("placementConstraints")]);
    m_placement_constraints_isSet = !json[QString("placementConstraints")].isNull() && m_placement_constraints_isValid;

    m_compatibilities_isValid = ::OpenAPI::fromJsonValue(m_compatibilities, json[QString("compatibilities")]);
    m_compatibilities_isSet = !json[QString("compatibilities")].isNull() && m_compatibilities_isValid;

    m_runtime_platform_isValid = ::OpenAPI::fromJsonValue(m_runtime_platform, json[QString("runtimePlatform")]);
    m_runtime_platform_isSet = !json[QString("runtimePlatform")].isNull() && m_runtime_platform_isValid;

    m_requires_compatibilities_isValid = ::OpenAPI::fromJsonValue(m_requires_compatibilities, json[QString("requiresCompatibilities")]);
    m_requires_compatibilities_isSet = !json[QString("requiresCompatibilities")].isNull() && m_requires_compatibilities_isValid;

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("cpu")]);
    m_cpu_isSet = !json[QString("cpu")].isNull() && m_cpu_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_inference_accelerators_isValid = ::OpenAPI::fromJsonValue(m_inference_accelerators, json[QString("inferenceAccelerators")]);
    m_inference_accelerators_isSet = !json[QString("inferenceAccelerators")].isNull() && m_inference_accelerators_isValid;

    m_pid_mode_isValid = ::OpenAPI::fromJsonValue(m_pid_mode, json[QString("pidMode")]);
    m_pid_mode_isSet = !json[QString("pidMode")].isNull() && m_pid_mode_isValid;

    m_ipc_mode_isValid = ::OpenAPI::fromJsonValue(m_ipc_mode, json[QString("ipcMode")]);
    m_ipc_mode_isSet = !json[QString("ipcMode")].isNull() && m_ipc_mode_isValid;

    m_proxy_configuration_isValid = ::OpenAPI::fromJsonValue(m_proxy_configuration, json[QString("proxyConfiguration")]);
    m_proxy_configuration_isSet = !json[QString("proxyConfiguration")].isNull() && m_proxy_configuration_isValid;

    m_registered_at_isValid = ::OpenAPI::fromJsonValue(m_registered_at, json[QString("registeredAt")]);
    m_registered_at_isSet = !json[QString("registeredAt")].isNull() && m_registered_at_isValid;

    m_deregistered_at_isValid = ::OpenAPI::fromJsonValue(m_deregistered_at, json[QString("deregisteredAt")]);
    m_deregistered_at_isSet = !json[QString("deregisteredAt")].isNull() && m_deregistered_at_isValid;

    m_registered_by_isValid = ::OpenAPI::fromJsonValue(m_registered_by, json[QString("registeredBy")]);
    m_registered_by_isSet = !json[QString("registeredBy")].isNull() && m_registered_by_isValid;

    m_ephemeral_storage_isValid = ::OpenAPI::fromJsonValue(m_ephemeral_storage, json[QString("ephemeralStorage")]);
    m_ephemeral_storage_isSet = !json[QString("ephemeralStorage")].isNull() && m_ephemeral_storage_isValid;
}

QString OAIDescribeTaskDefinitionResponse_taskDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTaskDefinitionResponse_taskDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_task_definition_arn_isSet) {
        obj.insert(QString("taskDefinitionArn"), ::OpenAPI::toJsonValue(m_task_definition_arn));
    }
    if (m_container_definitions.isSet()) {
        obj.insert(QString("containerDefinitions"), ::OpenAPI::toJsonValue(m_container_definitions));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_task_role_arn_isSet) {
        obj.insert(QString("taskRoleArn"), ::OpenAPI::toJsonValue(m_task_role_arn));
    }
    if (m_execution_role_arn_isSet) {
        obj.insert(QString("executionRoleArn"), ::OpenAPI::toJsonValue(m_execution_role_arn));
    }
    if (m_network_mode.isSet()) {
        obj.insert(QString("networkMode"), ::OpenAPI::toJsonValue(m_network_mode));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_volumes.isSet()) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_requires_attributes.isSet()) {
        obj.insert(QString("requiresAttributes"), ::OpenAPI::toJsonValue(m_requires_attributes));
    }
    if (m_placement_constraints.isSet()) {
        obj.insert(QString("placementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_compatibilities.isSet()) {
        obj.insert(QString("compatibilities"), ::OpenAPI::toJsonValue(m_compatibilities));
    }
    if (m_runtime_platform.isSet()) {
        obj.insert(QString("runtimePlatform"), ::OpenAPI::toJsonValue(m_runtime_platform));
    }
    if (m_requires_compatibilities.isSet()) {
        obj.insert(QString("requiresCompatibilities"), ::OpenAPI::toJsonValue(m_requires_compatibilities));
    }
    if (m_cpu_isSet) {
        obj.insert(QString("cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_inference_accelerators.isSet()) {
        obj.insert(QString("inferenceAccelerators"), ::OpenAPI::toJsonValue(m_inference_accelerators));
    }
    if (m_pid_mode.isSet()) {
        obj.insert(QString("pidMode"), ::OpenAPI::toJsonValue(m_pid_mode));
    }
    if (m_ipc_mode.isSet()) {
        obj.insert(QString("ipcMode"), ::OpenAPI::toJsonValue(m_ipc_mode));
    }
    if (m_proxy_configuration.isSet()) {
        obj.insert(QString("proxyConfiguration"), ::OpenAPI::toJsonValue(m_proxy_configuration));
    }
    if (m_registered_at_isSet) {
        obj.insert(QString("registeredAt"), ::OpenAPI::toJsonValue(m_registered_at));
    }
    if (m_deregistered_at_isSet) {
        obj.insert(QString("deregisteredAt"), ::OpenAPI::toJsonValue(m_deregistered_at));
    }
    if (m_registered_by_isSet) {
        obj.insert(QString("registeredBy"), ::OpenAPI::toJsonValue(m_registered_by));
    }
    if (m_ephemeral_storage.isSet()) {
        obj.insert(QString("ephemeralStorage"), ::OpenAPI::toJsonValue(m_ephemeral_storage));
    }
    return obj;
}

QString OAIDescribeTaskDefinitionResponse_taskDefinition::getTaskDefinitionArn() const {
    return m_task_definition_arn;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setTaskDefinitionArn(const QString &task_definition_arn) {
    m_task_definition_arn = task_definition_arn;
    m_task_definition_arn_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_task_definition_arn_Set() const{
    return m_task_definition_arn_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_task_definition_arn_Valid() const{
    return m_task_definition_arn_isValid;
}

QList OAIDescribeTaskDefinitionResponse_taskDefinition::getContainerDefinitions() const {
    return m_container_definitions;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setContainerDefinitions(const QList &container_definitions) {
    m_container_definitions = container_definitions;
    m_container_definitions_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_container_definitions_Set() const{
    return m_container_definitions_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_container_definitions_Valid() const{
    return m_container_definitions_isValid;
}

QString OAIDescribeTaskDefinitionResponse_taskDefinition::getFamily() const {
    return m_family;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_family_Set() const{
    return m_family_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIDescribeTaskDefinitionResponse_taskDefinition::getTaskRoleArn() const {
    return m_task_role_arn;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setTaskRoleArn(const QString &task_role_arn) {
    m_task_role_arn = task_role_arn;
    m_task_role_arn_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_task_role_arn_Set() const{
    return m_task_role_arn_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_task_role_arn_Valid() const{
    return m_task_role_arn_isValid;
}

QString OAIDescribeTaskDefinitionResponse_taskDefinition::getExecutionRoleArn() const {
    return m_execution_role_arn;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setExecutionRoleArn(const QString &execution_role_arn) {
    m_execution_role_arn = execution_role_arn;
    m_execution_role_arn_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_execution_role_arn_Set() const{
    return m_execution_role_arn_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_execution_role_arn_Valid() const{
    return m_execution_role_arn_isValid;
}

OAINetworkMode OAIDescribeTaskDefinitionResponse_taskDefinition::getNetworkMode() const {
    return m_network_mode;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setNetworkMode(const OAINetworkMode &network_mode) {
    m_network_mode = network_mode;
    m_network_mode_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_network_mode_Set() const{
    return m_network_mode_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_network_mode_Valid() const{
    return m_network_mode_isValid;
}

qint32 OAIDescribeTaskDefinitionResponse_taskDefinition::getRevision() const {
    return m_revision;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_revision_Valid() const{
    return m_revision_isValid;
}

QList OAIDescribeTaskDefinitionResponse_taskDefinition::getVolumes() const {
    return m_volumes;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setVolumes(const QList &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_volumes_Valid() const{
    return m_volumes_isValid;
}

OAITaskDefinitionStatus OAIDescribeTaskDefinitionResponse_taskDefinition::getStatus() const {
    return m_status;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setStatus(const OAITaskDefinitionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIDescribeTaskDefinitionResponse_taskDefinition::getRequiresAttributes() const {
    return m_requires_attributes;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setRequiresAttributes(const QList &requires_attributes) {
    m_requires_attributes = requires_attributes;
    m_requires_attributes_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_requires_attributes_Set() const{
    return m_requires_attributes_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_requires_attributes_Valid() const{
    return m_requires_attributes_isValid;
}

QList OAIDescribeTaskDefinitionResponse_taskDefinition::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setPlacementConstraints(const QList &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList OAIDescribeTaskDefinitionResponse_taskDefinition::getCompatibilities() const {
    return m_compatibilities;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setCompatibilities(const QList &compatibilities) {
    m_compatibilities = compatibilities;
    m_compatibilities_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_compatibilities_Set() const{
    return m_compatibilities_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_compatibilities_Valid() const{
    return m_compatibilities_isValid;
}

OAITaskDefinition_runtimePlatform OAIDescribeTaskDefinitionResponse_taskDefinition::getRuntimePlatform() const {
    return m_runtime_platform;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setRuntimePlatform(const OAITaskDefinition_runtimePlatform &runtime_platform) {
    m_runtime_platform = runtime_platform;
    m_runtime_platform_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_runtime_platform_Set() const{
    return m_runtime_platform_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_runtime_platform_Valid() const{
    return m_runtime_platform_isValid;
}

QList OAIDescribeTaskDefinitionResponse_taskDefinition::getRequiresCompatibilities() const {
    return m_requires_compatibilities;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setRequiresCompatibilities(const QList &requires_compatibilities) {
    m_requires_compatibilities = requires_compatibilities;
    m_requires_compatibilities_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_requires_compatibilities_Set() const{
    return m_requires_compatibilities_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_requires_compatibilities_Valid() const{
    return m_requires_compatibilities_isValid;
}

QString OAIDescribeTaskDefinitionResponse_taskDefinition::getCpu() const {
    return m_cpu;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setCpu(const QString &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_cpu_Valid() const{
    return m_cpu_isValid;
}

QString OAIDescribeTaskDefinitionResponse_taskDefinition::getMemory() const {
    return m_memory;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setMemory(const QString &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_memory_Valid() const{
    return m_memory_isValid;
}

QList OAIDescribeTaskDefinitionResponse_taskDefinition::getInferenceAccelerators() const {
    return m_inference_accelerators;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setInferenceAccelerators(const QList &inference_accelerators) {
    m_inference_accelerators = inference_accelerators;
    m_inference_accelerators_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_inference_accelerators_Set() const{
    return m_inference_accelerators_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_inference_accelerators_Valid() const{
    return m_inference_accelerators_isValid;
}

OAIPidMode OAIDescribeTaskDefinitionResponse_taskDefinition::getPidMode() const {
    return m_pid_mode;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setPidMode(const OAIPidMode &pid_mode) {
    m_pid_mode = pid_mode;
    m_pid_mode_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_pid_mode_Set() const{
    return m_pid_mode_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_pid_mode_Valid() const{
    return m_pid_mode_isValid;
}

OAIIpcMode OAIDescribeTaskDefinitionResponse_taskDefinition::getIpcMode() const {
    return m_ipc_mode;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setIpcMode(const OAIIpcMode &ipc_mode) {
    m_ipc_mode = ipc_mode;
    m_ipc_mode_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_ipc_mode_Set() const{
    return m_ipc_mode_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_ipc_mode_Valid() const{
    return m_ipc_mode_isValid;
}

OAITaskDefinition_proxyConfiguration OAIDescribeTaskDefinitionResponse_taskDefinition::getProxyConfiguration() const {
    return m_proxy_configuration;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setProxyConfiguration(const OAITaskDefinition_proxyConfiguration &proxy_configuration) {
    m_proxy_configuration = proxy_configuration;
    m_proxy_configuration_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_proxy_configuration_Set() const{
    return m_proxy_configuration_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_proxy_configuration_Valid() const{
    return m_proxy_configuration_isValid;
}

QDateTime OAIDescribeTaskDefinitionResponse_taskDefinition::getRegisteredAt() const {
    return m_registered_at;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setRegisteredAt(const QDateTime &registered_at) {
    m_registered_at = registered_at;
    m_registered_at_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_registered_at_Set() const{
    return m_registered_at_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_registered_at_Valid() const{
    return m_registered_at_isValid;
}

QDateTime OAIDescribeTaskDefinitionResponse_taskDefinition::getDeregisteredAt() const {
    return m_deregistered_at;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setDeregisteredAt(const QDateTime &deregistered_at) {
    m_deregistered_at = deregistered_at;
    m_deregistered_at_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_deregistered_at_Set() const{
    return m_deregistered_at_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_deregistered_at_Valid() const{
    return m_deregistered_at_isValid;
}

QString OAIDescribeTaskDefinitionResponse_taskDefinition::getRegisteredBy() const {
    return m_registered_by;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setRegisteredBy(const QString &registered_by) {
    m_registered_by = registered_by;
    m_registered_by_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_registered_by_Set() const{
    return m_registered_by_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_registered_by_Valid() const{
    return m_registered_by_isValid;
}

OAITaskDefinition_ephemeralStorage OAIDescribeTaskDefinitionResponse_taskDefinition::getEphemeralStorage() const {
    return m_ephemeral_storage;
}
void OAIDescribeTaskDefinitionResponse_taskDefinition::setEphemeralStorage(const OAITaskDefinition_ephemeralStorage &ephemeral_storage) {
    m_ephemeral_storage = ephemeral_storage;
    m_ephemeral_storage_isSet = true;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_ephemeral_storage_Set() const{
    return m_ephemeral_storage_isSet;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::is_ephemeral_storage_Valid() const{
    return m_ephemeral_storage_isValid;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_definition_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_compatibilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_accelerators.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipc_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deregistered_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ephemeral_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTaskDefinitionResponse_taskDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
