/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubmitContainerStateChangeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubmitContainerStateChangeRequest::OAISubmitContainerStateChangeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubmitContainerStateChangeRequest::OAISubmitContainerStateChangeRequest() {
    this->initializeModel();
}

OAISubmitContainerStateChangeRequest::~OAISubmitContainerStateChangeRequest() {}

void OAISubmitContainerStateChangeRequest::initializeModel() {

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_task_isSet = false;
    m_task_isValid = false;

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_runtime_id_isSet = false;
    m_runtime_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_network_bindings_isSet = false;
    m_network_bindings_isValid = false;
}

void OAISubmitContainerStateChangeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubmitContainerStateChangeRequest::fromJsonObject(QJsonObject json) {

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_task_isValid = ::OpenAPI::fromJsonValue(m_task, json[QString("task")]);
    m_task_isSet = !json[QString("task")].isNull() && m_task_isValid;

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_runtime_id_isValid = ::OpenAPI::fromJsonValue(m_runtime_id, json[QString("runtimeId")]);
    m_runtime_id_isSet = !json[QString("runtimeId")].isNull() && m_runtime_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("exitCode")]);
    m_exit_code_isSet = !json[QString("exitCode")].isNull() && m_exit_code_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_network_bindings_isValid = ::OpenAPI::fromJsonValue(m_network_bindings, json[QString("networkBindings")]);
    m_network_bindings_isSet = !json[QString("networkBindings")].isNull() && m_network_bindings_isValid;
}

QString OAISubmitContainerStateChangeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubmitContainerStateChangeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_task_isSet) {
        obj.insert(QString("task"), ::OpenAPI::toJsonValue(m_task));
    }
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_runtime_id_isSet) {
        obj.insert(QString("runtimeId"), ::OpenAPI::toJsonValue(m_runtime_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_exit_code_isSet) {
        obj.insert(QString("exitCode"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_network_bindings.isSet()) {
        obj.insert(QString("networkBindings"), ::OpenAPI::toJsonValue(m_network_bindings));
    }
    return obj;
}

QString OAISubmitContainerStateChangeRequest::getCluster() const {
    return m_cluster;
}
void OAISubmitContainerStateChangeRequest::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAISubmitContainerStateChangeRequest::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAISubmitContainerStateChangeRequest::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAISubmitContainerStateChangeRequest::getTask() const {
    return m_task;
}
void OAISubmitContainerStateChangeRequest::setTask(const QString &task) {
    m_task = task;
    m_task_isSet = true;
}

bool OAISubmitContainerStateChangeRequest::is_task_Set() const{
    return m_task_isSet;
}

bool OAISubmitContainerStateChangeRequest::is_task_Valid() const{
    return m_task_isValid;
}

QString OAISubmitContainerStateChangeRequest::getContainerName() const {
    return m_container_name;
}
void OAISubmitContainerStateChangeRequest::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAISubmitContainerStateChangeRequest::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAISubmitContainerStateChangeRequest::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAISubmitContainerStateChangeRequest::getRuntimeId() const {
    return m_runtime_id;
}
void OAISubmitContainerStateChangeRequest::setRuntimeId(const QString &runtime_id) {
    m_runtime_id = runtime_id;
    m_runtime_id_isSet = true;
}

bool OAISubmitContainerStateChangeRequest::is_runtime_id_Set() const{
    return m_runtime_id_isSet;
}

bool OAISubmitContainerStateChangeRequest::is_runtime_id_Valid() const{
    return m_runtime_id_isValid;
}

QString OAISubmitContainerStateChangeRequest::getStatus() const {
    return m_status;
}
void OAISubmitContainerStateChangeRequest::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubmitContainerStateChangeRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubmitContainerStateChangeRequest::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAISubmitContainerStateChangeRequest::getExitCode() const {
    return m_exit_code;
}
void OAISubmitContainerStateChangeRequest::setExitCode(const qint32 &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAISubmitContainerStateChangeRequest::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAISubmitContainerStateChangeRequest::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

QString OAISubmitContainerStateChangeRequest::getReason() const {
    return m_reason;
}
void OAISubmitContainerStateChangeRequest::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAISubmitContainerStateChangeRequest::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAISubmitContainerStateChangeRequest::is_reason_Valid() const{
    return m_reason_isValid;
}

QList OAISubmitContainerStateChangeRequest::getNetworkBindings() const {
    return m_network_bindings;
}
void OAISubmitContainerStateChangeRequest::setNetworkBindings(const QList &network_bindings) {
    m_network_bindings = network_bindings;
    m_network_bindings_isSet = true;
}

bool OAISubmitContainerStateChangeRequest::is_network_bindings_Set() const{
    return m_network_bindings_isSet;
}

bool OAISubmitContainerStateChangeRequest::is_network_bindings_Valid() const{
    return m_network_bindings_isValid;
}

bool OAISubmitContainerStateChangeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_bindings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubmitContainerStateChangeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
