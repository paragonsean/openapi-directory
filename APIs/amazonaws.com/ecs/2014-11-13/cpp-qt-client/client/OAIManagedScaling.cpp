/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedScaling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedScaling::OAIManagedScaling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedScaling::OAIManagedScaling() {
    this->initializeModel();
}

OAIManagedScaling::~OAIManagedScaling() {}

void OAIManagedScaling::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_capacity_isSet = false;
    m_target_capacity_isValid = false;

    m_minimum_scaling_step_size_isSet = false;
    m_minimum_scaling_step_size_isValid = false;

    m_maximum_scaling_step_size_isSet = false;
    m_maximum_scaling_step_size_isValid = false;

    m_instance_warmup_period_isSet = false;
    m_instance_warmup_period_isValid = false;
}

void OAIManagedScaling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedScaling::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_capacity_isValid = ::OpenAPI::fromJsonValue(m_target_capacity, json[QString("targetCapacity")]);
    m_target_capacity_isSet = !json[QString("targetCapacity")].isNull() && m_target_capacity_isValid;

    m_minimum_scaling_step_size_isValid = ::OpenAPI::fromJsonValue(m_minimum_scaling_step_size, json[QString("minimumScalingStepSize")]);
    m_minimum_scaling_step_size_isSet = !json[QString("minimumScalingStepSize")].isNull() && m_minimum_scaling_step_size_isValid;

    m_maximum_scaling_step_size_isValid = ::OpenAPI::fromJsonValue(m_maximum_scaling_step_size, json[QString("maximumScalingStepSize")]);
    m_maximum_scaling_step_size_isSet = !json[QString("maximumScalingStepSize")].isNull() && m_maximum_scaling_step_size_isValid;

    m_instance_warmup_period_isValid = ::OpenAPI::fromJsonValue(m_instance_warmup_period, json[QString("instanceWarmupPeriod")]);
    m_instance_warmup_period_isSet = !json[QString("instanceWarmupPeriod")].isNull() && m_instance_warmup_period_isValid;
}

QString OAIManagedScaling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedScaling::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_capacity_isSet) {
        obj.insert(QString("targetCapacity"), ::OpenAPI::toJsonValue(m_target_capacity));
    }
    if (m_minimum_scaling_step_size_isSet) {
        obj.insert(QString("minimumScalingStepSize"), ::OpenAPI::toJsonValue(m_minimum_scaling_step_size));
    }
    if (m_maximum_scaling_step_size_isSet) {
        obj.insert(QString("maximumScalingStepSize"), ::OpenAPI::toJsonValue(m_maximum_scaling_step_size));
    }
    if (m_instance_warmup_period_isSet) {
        obj.insert(QString("instanceWarmupPeriod"), ::OpenAPI::toJsonValue(m_instance_warmup_period));
    }
    return obj;
}

OAIManagedScalingStatus OAIManagedScaling::getStatus() const {
    return m_status;
}
void OAIManagedScaling::setStatus(const OAIManagedScalingStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIManagedScaling::is_status_Set() const{
    return m_status_isSet;
}

bool OAIManagedScaling::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIManagedScaling::getTargetCapacity() const {
    return m_target_capacity;
}
void OAIManagedScaling::setTargetCapacity(const qint32 &target_capacity) {
    m_target_capacity = target_capacity;
    m_target_capacity_isSet = true;
}

bool OAIManagedScaling::is_target_capacity_Set() const{
    return m_target_capacity_isSet;
}

bool OAIManagedScaling::is_target_capacity_Valid() const{
    return m_target_capacity_isValid;
}

qint32 OAIManagedScaling::getMinimumScalingStepSize() const {
    return m_minimum_scaling_step_size;
}
void OAIManagedScaling::setMinimumScalingStepSize(const qint32 &minimum_scaling_step_size) {
    m_minimum_scaling_step_size = minimum_scaling_step_size;
    m_minimum_scaling_step_size_isSet = true;
}

bool OAIManagedScaling::is_minimum_scaling_step_size_Set() const{
    return m_minimum_scaling_step_size_isSet;
}

bool OAIManagedScaling::is_minimum_scaling_step_size_Valid() const{
    return m_minimum_scaling_step_size_isValid;
}

qint32 OAIManagedScaling::getMaximumScalingStepSize() const {
    return m_maximum_scaling_step_size;
}
void OAIManagedScaling::setMaximumScalingStepSize(const qint32 &maximum_scaling_step_size) {
    m_maximum_scaling_step_size = maximum_scaling_step_size;
    m_maximum_scaling_step_size_isSet = true;
}

bool OAIManagedScaling::is_maximum_scaling_step_size_Set() const{
    return m_maximum_scaling_step_size_isSet;
}

bool OAIManagedScaling::is_maximum_scaling_step_size_Valid() const{
    return m_maximum_scaling_step_size_isValid;
}

qint32 OAIManagedScaling::getInstanceWarmupPeriod() const {
    return m_instance_warmup_period;
}
void OAIManagedScaling::setInstanceWarmupPeriod(const qint32 &instance_warmup_period) {
    m_instance_warmup_period = instance_warmup_period;
    m_instance_warmup_period_isSet = true;
}

bool OAIManagedScaling::is_instance_warmup_period_Set() const{
    return m_instance_warmup_period_isSet;
}

bool OAIManagedScaling::is_instance_warmup_period_Valid() const{
    return m_instance_warmup_period_isValid;
}

bool OAIManagedScaling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_scaling_step_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_scaling_step_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_warmup_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedScaling::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
