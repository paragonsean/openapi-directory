/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRegisterTaskDefinitionRequest.h
 *
 * 
 */

#ifndef OAIRegisterTaskDefinitionRequest_H
#define OAIRegisterTaskDefinitionRequest_H

#include <QJsonObject>

#include "OAIIpcMode.h"
#include "OAINetworkMode.h"
#include "OAIPidMode.h"
#include "OAIRegisterTaskDefinitionRequest_ephemeralStorage.h"
#include "OAIRegisterTaskDefinitionRequest_proxyConfiguration.h"
#include "OAIRegisterTaskDefinitionRequest_runtimePlatform.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRegisterTaskDefinitionRequest_proxyConfiguration;
class OAIRegisterTaskDefinitionRequest_ephemeralStorage;
class OAIRegisterTaskDefinitionRequest_runtimePlatform;

class OAIRegisterTaskDefinitionRequest : public OAIObject {
public:
    OAIRegisterTaskDefinitionRequest();
    OAIRegisterTaskDefinitionRequest(QString json);
    ~OAIRegisterTaskDefinitionRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFamily() const;
    void setFamily(const QString &family);
    bool is_family_Set() const;
    bool is_family_Valid() const;

    QString getTaskRoleArn() const;
    void setTaskRoleArn(const QString &task_role_arn);
    bool is_task_role_arn_Set() const;
    bool is_task_role_arn_Valid() const;

    QString getExecutionRoleArn() const;
    void setExecutionRoleArn(const QString &execution_role_arn);
    bool is_execution_role_arn_Set() const;
    bool is_execution_role_arn_Valid() const;

    OAINetworkMode getNetworkMode() const;
    void setNetworkMode(const OAINetworkMode &network_mode);
    bool is_network_mode_Set() const;
    bool is_network_mode_Valid() const;

    QList getContainerDefinitions() const;
    void setContainerDefinitions(const QList &container_definitions);
    bool is_container_definitions_Set() const;
    bool is_container_definitions_Valid() const;

    QList getVolumes() const;
    void setVolumes(const QList &volumes);
    bool is_volumes_Set() const;
    bool is_volumes_Valid() const;

    QList getPlacementConstraints() const;
    void setPlacementConstraints(const QList &placement_constraints);
    bool is_placement_constraints_Set() const;
    bool is_placement_constraints_Valid() const;

    QList getRequiresCompatibilities() const;
    void setRequiresCompatibilities(const QList &requires_compatibilities);
    bool is_requires_compatibilities_Set() const;
    bool is_requires_compatibilities_Valid() const;

    QString getCpu() const;
    void setCpu(const QString &cpu);
    bool is_cpu_Set() const;
    bool is_cpu_Valid() const;

    QString getMemory() const;
    void setMemory(const QString &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIPidMode getPidMode() const;
    void setPidMode(const OAIPidMode &pid_mode);
    bool is_pid_mode_Set() const;
    bool is_pid_mode_Valid() const;

    OAIIpcMode getIpcMode() const;
    void setIpcMode(const OAIIpcMode &ipc_mode);
    bool is_ipc_mode_Set() const;
    bool is_ipc_mode_Valid() const;

    OAIRegisterTaskDefinitionRequest_proxyConfiguration getProxyConfiguration() const;
    void setProxyConfiguration(const OAIRegisterTaskDefinitionRequest_proxyConfiguration &proxy_configuration);
    bool is_proxy_configuration_Set() const;
    bool is_proxy_configuration_Valid() const;

    QList getInferenceAccelerators() const;
    void setInferenceAccelerators(const QList &inference_accelerators);
    bool is_inference_accelerators_Set() const;
    bool is_inference_accelerators_Valid() const;

    OAIRegisterTaskDefinitionRequest_ephemeralStorage getEphemeralStorage() const;
    void setEphemeralStorage(const OAIRegisterTaskDefinitionRequest_ephemeralStorage &ephemeral_storage);
    bool is_ephemeral_storage_Set() const;
    bool is_ephemeral_storage_Valid() const;

    OAIRegisterTaskDefinitionRequest_runtimePlatform getRuntimePlatform() const;
    void setRuntimePlatform(const OAIRegisterTaskDefinitionRequest_runtimePlatform &runtime_platform);
    bool is_runtime_platform_Set() const;
    bool is_runtime_platform_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_family;
    bool m_family_isSet;
    bool m_family_isValid;

    QString m_task_role_arn;
    bool m_task_role_arn_isSet;
    bool m_task_role_arn_isValid;

    QString m_execution_role_arn;
    bool m_execution_role_arn_isSet;
    bool m_execution_role_arn_isValid;

    OAINetworkMode m_network_mode;
    bool m_network_mode_isSet;
    bool m_network_mode_isValid;

    QList m_container_definitions;
    bool m_container_definitions_isSet;
    bool m_container_definitions_isValid;

    QList m_volumes;
    bool m_volumes_isSet;
    bool m_volumes_isValid;

    QList m_placement_constraints;
    bool m_placement_constraints_isSet;
    bool m_placement_constraints_isValid;

    QList m_requires_compatibilities;
    bool m_requires_compatibilities_isSet;
    bool m_requires_compatibilities_isValid;

    QString m_cpu;
    bool m_cpu_isSet;
    bool m_cpu_isValid;

    QString m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIPidMode m_pid_mode;
    bool m_pid_mode_isSet;
    bool m_pid_mode_isValid;

    OAIIpcMode m_ipc_mode;
    bool m_ipc_mode_isSet;
    bool m_ipc_mode_isValid;

    OAIRegisterTaskDefinitionRequest_proxyConfiguration m_proxy_configuration;
    bool m_proxy_configuration_isSet;
    bool m_proxy_configuration_isValid;

    QList m_inference_accelerators;
    bool m_inference_accelerators_isSet;
    bool m_inference_accelerators_isValid;

    OAIRegisterTaskDefinitionRequest_ephemeralStorage m_ephemeral_storage;
    bool m_ephemeral_storage_isSet;
    bool m_ephemeral_storage_isValid;

    OAIRegisterTaskDefinitionRequest_runtimePlatform m_runtime_platform;
    bool m_runtime_platform_isSet;
    bool m_runtime_platform_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRegisterTaskDefinitionRequest)

#endif // OAIRegisterTaskDefinitionRequest_H
