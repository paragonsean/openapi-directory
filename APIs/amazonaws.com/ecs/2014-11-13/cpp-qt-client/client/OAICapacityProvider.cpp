/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapacityProvider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapacityProvider::OAICapacityProvider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapacityProvider::OAICapacityProvider() {
    this->initializeModel();
}

OAICapacityProvider::~OAICapacityProvider() {}

void OAICapacityProvider::initializeModel() {

    m_capacity_provider_arn_isSet = false;
    m_capacity_provider_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_auto_scaling_group_provider_isSet = false;
    m_auto_scaling_group_provider_isValid = false;

    m_update_status_isSet = false;
    m_update_status_isValid = false;

    m_update_status_reason_isSet = false;
    m_update_status_reason_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICapacityProvider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapacityProvider::fromJsonObject(QJsonObject json) {

    m_capacity_provider_arn_isValid = ::OpenAPI::fromJsonValue(m_capacity_provider_arn, json[QString("capacityProviderArn")]);
    m_capacity_provider_arn_isSet = !json[QString("capacityProviderArn")].isNull() && m_capacity_provider_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_auto_scaling_group_provider_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_provider, json[QString("autoScalingGroupProvider")]);
    m_auto_scaling_group_provider_isSet = !json[QString("autoScalingGroupProvider")].isNull() && m_auto_scaling_group_provider_isValid;

    m_update_status_isValid = ::OpenAPI::fromJsonValue(m_update_status, json[QString("updateStatus")]);
    m_update_status_isSet = !json[QString("updateStatus")].isNull() && m_update_status_isValid;

    m_update_status_reason_isValid = ::OpenAPI::fromJsonValue(m_update_status_reason, json[QString("updateStatusReason")]);
    m_update_status_reason_isSet = !json[QString("updateStatusReason")].isNull() && m_update_status_reason_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICapacityProvider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapacityProvider::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_provider_arn_isSet) {
        obj.insert(QString("capacityProviderArn"), ::OpenAPI::toJsonValue(m_capacity_provider_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_auto_scaling_group_provider.isSet()) {
        obj.insert(QString("autoScalingGroupProvider"), ::OpenAPI::toJsonValue(m_auto_scaling_group_provider));
    }
    if (m_update_status.isSet()) {
        obj.insert(QString("updateStatus"), ::OpenAPI::toJsonValue(m_update_status));
    }
    if (m_update_status_reason_isSet) {
        obj.insert(QString("updateStatusReason"), ::OpenAPI::toJsonValue(m_update_status_reason));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICapacityProvider::getCapacityProviderArn() const {
    return m_capacity_provider_arn;
}
void OAICapacityProvider::setCapacityProviderArn(const QString &capacity_provider_arn) {
    m_capacity_provider_arn = capacity_provider_arn;
    m_capacity_provider_arn_isSet = true;
}

bool OAICapacityProvider::is_capacity_provider_arn_Set() const{
    return m_capacity_provider_arn_isSet;
}

bool OAICapacityProvider::is_capacity_provider_arn_Valid() const{
    return m_capacity_provider_arn_isValid;
}

QString OAICapacityProvider::getName() const {
    return m_name;
}
void OAICapacityProvider::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICapacityProvider::is_name_Set() const{
    return m_name_isSet;
}

bool OAICapacityProvider::is_name_Valid() const{
    return m_name_isValid;
}

OAICapacityProviderStatus OAICapacityProvider::getStatus() const {
    return m_status;
}
void OAICapacityProvider::setStatus(const OAICapacityProviderStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICapacityProvider::is_status_Set() const{
    return m_status_isSet;
}

bool OAICapacityProvider::is_status_Valid() const{
    return m_status_isValid;
}

OAICapacityProvider_autoScalingGroupProvider OAICapacityProvider::getAutoScalingGroupProvider() const {
    return m_auto_scaling_group_provider;
}
void OAICapacityProvider::setAutoScalingGroupProvider(const OAICapacityProvider_autoScalingGroupProvider &auto_scaling_group_provider) {
    m_auto_scaling_group_provider = auto_scaling_group_provider;
    m_auto_scaling_group_provider_isSet = true;
}

bool OAICapacityProvider::is_auto_scaling_group_provider_Set() const{
    return m_auto_scaling_group_provider_isSet;
}

bool OAICapacityProvider::is_auto_scaling_group_provider_Valid() const{
    return m_auto_scaling_group_provider_isValid;
}

OAICapacityProviderUpdateStatus OAICapacityProvider::getUpdateStatus() const {
    return m_update_status;
}
void OAICapacityProvider::setUpdateStatus(const OAICapacityProviderUpdateStatus &update_status) {
    m_update_status = update_status;
    m_update_status_isSet = true;
}

bool OAICapacityProvider::is_update_status_Set() const{
    return m_update_status_isSet;
}

bool OAICapacityProvider::is_update_status_Valid() const{
    return m_update_status_isValid;
}

QString OAICapacityProvider::getUpdateStatusReason() const {
    return m_update_status_reason;
}
void OAICapacityProvider::setUpdateStatusReason(const QString &update_status_reason) {
    m_update_status_reason = update_status_reason;
    m_update_status_reason_isSet = true;
}

bool OAICapacityProvider::is_update_status_reason_Set() const{
    return m_update_status_reason_isSet;
}

bool OAICapacityProvider::is_update_status_reason_Valid() const{
    return m_update_status_reason_isValid;
}

QList OAICapacityProvider::getTags() const {
    return m_tags;
}
void OAICapacityProvider::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICapacityProvider::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICapacityProvider::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICapacityProvider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_provider_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_group_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapacityProvider::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
