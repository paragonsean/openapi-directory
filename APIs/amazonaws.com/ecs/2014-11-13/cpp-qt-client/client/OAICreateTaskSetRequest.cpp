/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTaskSetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTaskSetRequest::OAICreateTaskSetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTaskSetRequest::OAICreateTaskSetRequest() {
    this->initializeModel();
}

OAICreateTaskSetRequest::~OAICreateTaskSetRequest() {}

void OAICreateTaskSetRequest::initializeModel() {

    m_service_isSet = false;
    m_service_isValid = false;

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_task_definition_isSet = false;
    m_task_definition_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_load_balancers_isSet = false;
    m_load_balancers_isValid = false;

    m_service_registries_isSet = false;
    m_service_registries_isValid = false;

    m_launch_type_isSet = false;
    m_launch_type_isValid = false;

    m_capacity_provider_strategy_isSet = false;
    m_capacity_provider_strategy_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateTaskSetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTaskSetRequest::fromJsonObject(QJsonObject json) {

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_task_definition_isValid = ::OpenAPI::fromJsonValue(m_task_definition, json[QString("taskDefinition")]);
    m_task_definition_isSet = !json[QString("taskDefinition")].isNull() && m_task_definition_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("networkConfiguration")]);
    m_network_configuration_isSet = !json[QString("networkConfiguration")].isNull() && m_network_configuration_isValid;

    m_load_balancers_isValid = ::OpenAPI::fromJsonValue(m_load_balancers, json[QString("loadBalancers")]);
    m_load_balancers_isSet = !json[QString("loadBalancers")].isNull() && m_load_balancers_isValid;

    m_service_registries_isValid = ::OpenAPI::fromJsonValue(m_service_registries, json[QString("serviceRegistries")]);
    m_service_registries_isSet = !json[QString("serviceRegistries")].isNull() && m_service_registries_isValid;

    m_launch_type_isValid = ::OpenAPI::fromJsonValue(m_launch_type, json[QString("launchType")]);
    m_launch_type_isSet = !json[QString("launchType")].isNull() && m_launch_type_isValid;

    m_capacity_provider_strategy_isValid = ::OpenAPI::fromJsonValue(m_capacity_provider_strategy, json[QString("capacityProviderStrategy")]);
    m_capacity_provider_strategy_isSet = !json[QString("capacityProviderStrategy")].isNull() && m_capacity_provider_strategy_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("platformVersion")]);
    m_platform_version_isSet = !json[QString("platformVersion")].isNull() && m_platform_version_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("scale")]);
    m_scale_isSet = !json[QString("scale")].isNull() && m_scale_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateTaskSetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTaskSetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_task_definition_isSet) {
        obj.insert(QString("taskDefinition"), ::OpenAPI::toJsonValue(m_task_definition));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("networkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_load_balancers.isSet()) {
        obj.insert(QString("loadBalancers"), ::OpenAPI::toJsonValue(m_load_balancers));
    }
    if (m_service_registries.isSet()) {
        obj.insert(QString("serviceRegistries"), ::OpenAPI::toJsonValue(m_service_registries));
    }
    if (m_launch_type.isSet()) {
        obj.insert(QString("launchType"), ::OpenAPI::toJsonValue(m_launch_type));
    }
    if (m_capacity_provider_strategy.isSet()) {
        obj.insert(QString("capacityProviderStrategy"), ::OpenAPI::toJsonValue(m_capacity_provider_strategy));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("platformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_scale.isSet()) {
        obj.insert(QString("scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateTaskSetRequest::getService() const {
    return m_service;
}
void OAICreateTaskSetRequest::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAICreateTaskSetRequest::is_service_Set() const{
    return m_service_isSet;
}

bool OAICreateTaskSetRequest::is_service_Valid() const{
    return m_service_isValid;
}

QString OAICreateTaskSetRequest::getCluster() const {
    return m_cluster;
}
void OAICreateTaskSetRequest::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAICreateTaskSetRequest::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAICreateTaskSetRequest::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAICreateTaskSetRequest::getExternalId() const {
    return m_external_id;
}
void OAICreateTaskSetRequest::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAICreateTaskSetRequest::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAICreateTaskSetRequest::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAICreateTaskSetRequest::getTaskDefinition() const {
    return m_task_definition;
}
void OAICreateTaskSetRequest::setTaskDefinition(const QString &task_definition) {
    m_task_definition = task_definition;
    m_task_definition_isSet = true;
}

bool OAICreateTaskSetRequest::is_task_definition_Set() const{
    return m_task_definition_isSet;
}

bool OAICreateTaskSetRequest::is_task_definition_Valid() const{
    return m_task_definition_isValid;
}

OAICreateTaskSetRequest_networkConfiguration OAICreateTaskSetRequest::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAICreateTaskSetRequest::setNetworkConfiguration(const OAICreateTaskSetRequest_networkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAICreateTaskSetRequest::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAICreateTaskSetRequest::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

QList OAICreateTaskSetRequest::getLoadBalancers() const {
    return m_load_balancers;
}
void OAICreateTaskSetRequest::setLoadBalancers(const QList &load_balancers) {
    m_load_balancers = load_balancers;
    m_load_balancers_isSet = true;
}

bool OAICreateTaskSetRequest::is_load_balancers_Set() const{
    return m_load_balancers_isSet;
}

bool OAICreateTaskSetRequest::is_load_balancers_Valid() const{
    return m_load_balancers_isValid;
}

QList OAICreateTaskSetRequest::getServiceRegistries() const {
    return m_service_registries;
}
void OAICreateTaskSetRequest::setServiceRegistries(const QList &service_registries) {
    m_service_registries = service_registries;
    m_service_registries_isSet = true;
}

bool OAICreateTaskSetRequest::is_service_registries_Set() const{
    return m_service_registries_isSet;
}

bool OAICreateTaskSetRequest::is_service_registries_Valid() const{
    return m_service_registries_isValid;
}

OAILaunchType OAICreateTaskSetRequest::getLaunchType() const {
    return m_launch_type;
}
void OAICreateTaskSetRequest::setLaunchType(const OAILaunchType &launch_type) {
    m_launch_type = launch_type;
    m_launch_type_isSet = true;
}

bool OAICreateTaskSetRequest::is_launch_type_Set() const{
    return m_launch_type_isSet;
}

bool OAICreateTaskSetRequest::is_launch_type_Valid() const{
    return m_launch_type_isValid;
}

QList OAICreateTaskSetRequest::getCapacityProviderStrategy() const {
    return m_capacity_provider_strategy;
}
void OAICreateTaskSetRequest::setCapacityProviderStrategy(const QList &capacity_provider_strategy) {
    m_capacity_provider_strategy = capacity_provider_strategy;
    m_capacity_provider_strategy_isSet = true;
}

bool OAICreateTaskSetRequest::is_capacity_provider_strategy_Set() const{
    return m_capacity_provider_strategy_isSet;
}

bool OAICreateTaskSetRequest::is_capacity_provider_strategy_Valid() const{
    return m_capacity_provider_strategy_isValid;
}

QString OAICreateTaskSetRequest::getPlatformVersion() const {
    return m_platform_version;
}
void OAICreateTaskSetRequest::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAICreateTaskSetRequest::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAICreateTaskSetRequest::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

OAICreateTaskSetRequest_scale OAICreateTaskSetRequest::getScale() const {
    return m_scale;
}
void OAICreateTaskSetRequest::setScale(const OAICreateTaskSetRequest_scale &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAICreateTaskSetRequest::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAICreateTaskSetRequest::is_scale_Valid() const{
    return m_scale_isValid;
}

QString OAICreateTaskSetRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateTaskSetRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateTaskSetRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateTaskSetRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList OAICreateTaskSetRequest::getTags() const {
    return m_tags;
}
void OAICreateTaskSetRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateTaskSetRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateTaskSetRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateTaskSetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_registries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_provider_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTaskSetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_isValid && m_cluster_isValid && m_task_definition_isValid && true;
}

} // namespace OpenAPI
