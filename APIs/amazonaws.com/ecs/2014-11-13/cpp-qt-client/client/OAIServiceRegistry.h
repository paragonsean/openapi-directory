/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServiceRegistry.h
 *
 * &lt;p&gt;The details for the service registry.&lt;/p&gt; &lt;p&gt;Each service may be associated with one service registry. Multiple service registries for each service are not supported.&lt;/p&gt; &lt;p&gt;When you add, update, or remove the service registries configuration, Amazon ECS starts a new deployment. New tasks are registered and deregistered to the updated service registry configuration.&lt;/p&gt;
 */

#ifndef OAIServiceRegistry_H
#define OAIServiceRegistry_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIServiceRegistry : public OAIObject {
public:
    OAIServiceRegistry();
    OAIServiceRegistry(QString json);
    ~OAIServiceRegistry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRegistryArn() const;
    void setRegistryArn(const QString &registry_arn);
    bool is_registry_arn_Set() const;
    bool is_registry_arn_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getContainerName() const;
    void setContainerName(const QString &container_name);
    bool is_container_name_Set() const;
    bool is_container_name_Valid() const;

    qint32 getContainerPort() const;
    void setContainerPort(const qint32 &container_port);
    bool is_container_port_Set() const;
    bool is_container_port_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_registry_arn;
    bool m_registry_arn_isSet;
    bool m_registry_arn_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_container_name;
    bool m_container_name_isSet;
    bool m_container_name_isValid;

    qint32 m_container_port;
    bool m_container_port_isSet;
    bool m_container_port_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServiceRegistry)

#endif // OAIServiceRegistry_H
