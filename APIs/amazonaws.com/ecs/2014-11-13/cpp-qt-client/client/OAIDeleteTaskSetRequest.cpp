/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteTaskSetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteTaskSetRequest::OAIDeleteTaskSetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteTaskSetRequest::OAIDeleteTaskSetRequest() {
    this->initializeModel();
}

OAIDeleteTaskSetRequest::~OAIDeleteTaskSetRequest() {}

void OAIDeleteTaskSetRequest::initializeModel() {

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_task_set_isSet = false;
    m_task_set_isValid = false;

    m_force_isSet = false;
    m_force_isValid = false;
}

void OAIDeleteTaskSetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteTaskSetRequest::fromJsonObject(QJsonObject json) {

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_task_set_isValid = ::OpenAPI::fromJsonValue(m_task_set, json[QString("taskSet")]);
    m_task_set_isSet = !json[QString("taskSet")].isNull() && m_task_set_isValid;

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("force")]);
    m_force_isSet = !json[QString("force")].isNull() && m_force_isValid;
}

QString OAIDeleteTaskSetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteTaskSetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_task_set_isSet) {
        obj.insert(QString("taskSet"), ::OpenAPI::toJsonValue(m_task_set));
    }
    if (m_force_isSet) {
        obj.insert(QString("force"), ::OpenAPI::toJsonValue(m_force));
    }
    return obj;
}

QString OAIDeleteTaskSetRequest::getCluster() const {
    return m_cluster;
}
void OAIDeleteTaskSetRequest::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIDeleteTaskSetRequest::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIDeleteTaskSetRequest::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIDeleteTaskSetRequest::getService() const {
    return m_service;
}
void OAIDeleteTaskSetRequest::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIDeleteTaskSetRequest::is_service_Set() const{
    return m_service_isSet;
}

bool OAIDeleteTaskSetRequest::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIDeleteTaskSetRequest::getTaskSet() const {
    return m_task_set;
}
void OAIDeleteTaskSetRequest::setTaskSet(const QString &task_set) {
    m_task_set = task_set;
    m_task_set_isSet = true;
}

bool OAIDeleteTaskSetRequest::is_task_set_Set() const{
    return m_task_set_isSet;
}

bool OAIDeleteTaskSetRequest::is_task_set_Valid() const{
    return m_task_set_isValid;
}

bool OAIDeleteTaskSetRequest::getForce() const {
    return m_force;
}
void OAIDeleteTaskSetRequest::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAIDeleteTaskSetRequest::is_force_Set() const{
    return m_force_isSet;
}

bool OAIDeleteTaskSetRequest::is_force_Valid() const{
    return m_force_isValid;
}

bool OAIDeleteTaskSetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteTaskSetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_isValid && m_service_isValid && m_task_set_isValid && true;
}

} // namespace OpenAPI
