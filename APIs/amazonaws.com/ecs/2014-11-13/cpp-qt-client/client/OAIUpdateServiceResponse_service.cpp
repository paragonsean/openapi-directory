/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServiceResponse_service.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServiceResponse_service::OAIUpdateServiceResponse_service(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServiceResponse_service::OAIUpdateServiceResponse_service() {
    this->initializeModel();
}

OAIUpdateServiceResponse_service::~OAIUpdateServiceResponse_service() {}

void OAIUpdateServiceResponse_service::initializeModel() {

    m_service_arn_isSet = false;
    m_service_arn_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_load_balancers_isSet = false;
    m_load_balancers_isValid = false;

    m_service_registries_isSet = false;
    m_service_registries_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_desired_count_isSet = false;
    m_desired_count_isValid = false;

    m_running_count_isSet = false;
    m_running_count_isValid = false;

    m_pending_count_isSet = false;
    m_pending_count_isValid = false;

    m_launch_type_isSet = false;
    m_launch_type_isValid = false;

    m_capacity_provider_strategy_isSet = false;
    m_capacity_provider_strategy_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_platform_family_isSet = false;
    m_platform_family_isValid = false;

    m_task_definition_isSet = false;
    m_task_definition_isValid = false;

    m_deployment_configuration_isSet = false;
    m_deployment_configuration_isValid = false;

    m_task_sets_isSet = false;
    m_task_sets_isValid = false;

    m_deployments_isSet = false;
    m_deployments_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_placement_strategy_isSet = false;
    m_placement_strategy_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_health_check_grace_period_seconds_isSet = false;
    m_health_check_grace_period_seconds_isValid = false;

    m_scheduling_strategy_isSet = false;
    m_scheduling_strategy_isValid = false;

    m_deployment_controller_isSet = false;
    m_deployment_controller_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_enable_ecs_managed_tags_isSet = false;
    m_enable_ecs_managed_tags_isValid = false;

    m_propagate_tags_isSet = false;
    m_propagate_tags_isValid = false;

    m_enable_execute_command_isSet = false;
    m_enable_execute_command_isValid = false;
}

void OAIUpdateServiceResponse_service::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServiceResponse_service::fromJsonObject(QJsonObject json) {

    m_service_arn_isValid = ::OpenAPI::fromJsonValue(m_service_arn, json[QString("serviceArn")]);
    m_service_arn_isSet = !json[QString("serviceArn")].isNull() && m_service_arn_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("clusterArn")]);
    m_cluster_arn_isSet = !json[QString("clusterArn")].isNull() && m_cluster_arn_isValid;

    m_load_balancers_isValid = ::OpenAPI::fromJsonValue(m_load_balancers, json[QString("loadBalancers")]);
    m_load_balancers_isSet = !json[QString("loadBalancers")].isNull() && m_load_balancers_isValid;

    m_service_registries_isValid = ::OpenAPI::fromJsonValue(m_service_registries, json[QString("serviceRegistries")]);
    m_service_registries_isSet = !json[QString("serviceRegistries")].isNull() && m_service_registries_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_desired_count_isValid = ::OpenAPI::fromJsonValue(m_desired_count, json[QString("desiredCount")]);
    m_desired_count_isSet = !json[QString("desiredCount")].isNull() && m_desired_count_isValid;

    m_running_count_isValid = ::OpenAPI::fromJsonValue(m_running_count, json[QString("runningCount")]);
    m_running_count_isSet = !json[QString("runningCount")].isNull() && m_running_count_isValid;

    m_pending_count_isValid = ::OpenAPI::fromJsonValue(m_pending_count, json[QString("pendingCount")]);
    m_pending_count_isSet = !json[QString("pendingCount")].isNull() && m_pending_count_isValid;

    m_launch_type_isValid = ::OpenAPI::fromJsonValue(m_launch_type, json[QString("launchType")]);
    m_launch_type_isSet = !json[QString("launchType")].isNull() && m_launch_type_isValid;

    m_capacity_provider_strategy_isValid = ::OpenAPI::fromJsonValue(m_capacity_provider_strategy, json[QString("capacityProviderStrategy")]);
    m_capacity_provider_strategy_isSet = !json[QString("capacityProviderStrategy")].isNull() && m_capacity_provider_strategy_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("platformVersion")]);
    m_platform_version_isSet = !json[QString("platformVersion")].isNull() && m_platform_version_isValid;

    m_platform_family_isValid = ::OpenAPI::fromJsonValue(m_platform_family, json[QString("platformFamily")]);
    m_platform_family_isSet = !json[QString("platformFamily")].isNull() && m_platform_family_isValid;

    m_task_definition_isValid = ::OpenAPI::fromJsonValue(m_task_definition, json[QString("taskDefinition")]);
    m_task_definition_isSet = !json[QString("taskDefinition")].isNull() && m_task_definition_isValid;

    m_deployment_configuration_isValid = ::OpenAPI::fromJsonValue(m_deployment_configuration, json[QString("deploymentConfiguration")]);
    m_deployment_configuration_isSet = !json[QString("deploymentConfiguration")].isNull() && m_deployment_configuration_isValid;

    m_task_sets_isValid = ::OpenAPI::fromJsonValue(m_task_sets, json[QString("taskSets")]);
    m_task_sets_isSet = !json[QString("taskSets")].isNull() && m_task_sets_isValid;

    m_deployments_isValid = ::OpenAPI::fromJsonValue(m_deployments, json[QString("deployments")]);
    m_deployments_isSet = !json[QString("deployments")].isNull() && m_deployments_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("placementConstraints")]);
    m_placement_constraints_isSet = !json[QString("placementConstraints")].isNull() && m_placement_constraints_isValid;

    m_placement_strategy_isValid = ::OpenAPI::fromJsonValue(m_placement_strategy, json[QString("placementStrategy")]);
    m_placement_strategy_isSet = !json[QString("placementStrategy")].isNull() && m_placement_strategy_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("networkConfiguration")]);
    m_network_configuration_isSet = !json[QString("networkConfiguration")].isNull() && m_network_configuration_isValid;

    m_health_check_grace_period_seconds_isValid = ::OpenAPI::fromJsonValue(m_health_check_grace_period_seconds, json[QString("healthCheckGracePeriodSeconds")]);
    m_health_check_grace_period_seconds_isSet = !json[QString("healthCheckGracePeriodSeconds")].isNull() && m_health_check_grace_period_seconds_isValid;

    m_scheduling_strategy_isValid = ::OpenAPI::fromJsonValue(m_scheduling_strategy, json[QString("schedulingStrategy")]);
    m_scheduling_strategy_isSet = !json[QString("schedulingStrategy")].isNull() && m_scheduling_strategy_isValid;

    m_deployment_controller_isValid = ::OpenAPI::fromJsonValue(m_deployment_controller, json[QString("deploymentController")]);
    m_deployment_controller_isSet = !json[QString("deploymentController")].isNull() && m_deployment_controller_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_enable_ecs_managed_tags_isValid = ::OpenAPI::fromJsonValue(m_enable_ecs_managed_tags, json[QString("enableECSManagedTags")]);
    m_enable_ecs_managed_tags_isSet = !json[QString("enableECSManagedTags")].isNull() && m_enable_ecs_managed_tags_isValid;

    m_propagate_tags_isValid = ::OpenAPI::fromJsonValue(m_propagate_tags, json[QString("propagateTags")]);
    m_propagate_tags_isSet = !json[QString("propagateTags")].isNull() && m_propagate_tags_isValid;

    m_enable_execute_command_isValid = ::OpenAPI::fromJsonValue(m_enable_execute_command, json[QString("enableExecuteCommand")]);
    m_enable_execute_command_isSet = !json[QString("enableExecuteCommand")].isNull() && m_enable_execute_command_isValid;
}

QString OAIUpdateServiceResponse_service::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServiceResponse_service::asJsonObject() const {
    QJsonObject obj;
    if (m_service_arn_isSet) {
        obj.insert(QString("serviceArn"), ::OpenAPI::toJsonValue(m_service_arn));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_cluster_arn_isSet) {
        obj.insert(QString("clusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_load_balancers.isSet()) {
        obj.insert(QString("loadBalancers"), ::OpenAPI::toJsonValue(m_load_balancers));
    }
    if (m_service_registries.isSet()) {
        obj.insert(QString("serviceRegistries"), ::OpenAPI::toJsonValue(m_service_registries));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_desired_count_isSet) {
        obj.insert(QString("desiredCount"), ::OpenAPI::toJsonValue(m_desired_count));
    }
    if (m_running_count_isSet) {
        obj.insert(QString("runningCount"), ::OpenAPI::toJsonValue(m_running_count));
    }
    if (m_pending_count_isSet) {
        obj.insert(QString("pendingCount"), ::OpenAPI::toJsonValue(m_pending_count));
    }
    if (m_launch_type.isSet()) {
        obj.insert(QString("launchType"), ::OpenAPI::toJsonValue(m_launch_type));
    }
    if (m_capacity_provider_strategy.isSet()) {
        obj.insert(QString("capacityProviderStrategy"), ::OpenAPI::toJsonValue(m_capacity_provider_strategy));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("platformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_platform_family_isSet) {
        obj.insert(QString("platformFamily"), ::OpenAPI::toJsonValue(m_platform_family));
    }
    if (m_task_definition_isSet) {
        obj.insert(QString("taskDefinition"), ::OpenAPI::toJsonValue(m_task_definition));
    }
    if (m_deployment_configuration.isSet()) {
        obj.insert(QString("deploymentConfiguration"), ::OpenAPI::toJsonValue(m_deployment_configuration));
    }
    if (m_task_sets.isSet()) {
        obj.insert(QString("taskSets"), ::OpenAPI::toJsonValue(m_task_sets));
    }
    if (m_deployments.isSet()) {
        obj.insert(QString("deployments"), ::OpenAPI::toJsonValue(m_deployments));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_events.isSet()) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_placement_constraints.isSet()) {
        obj.insert(QString("placementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_placement_strategy.isSet()) {
        obj.insert(QString("placementStrategy"), ::OpenAPI::toJsonValue(m_placement_strategy));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("networkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_health_check_grace_period_seconds_isSet) {
        obj.insert(QString("healthCheckGracePeriodSeconds"), ::OpenAPI::toJsonValue(m_health_check_grace_period_seconds));
    }
    if (m_scheduling_strategy.isSet()) {
        obj.insert(QString("schedulingStrategy"), ::OpenAPI::toJsonValue(m_scheduling_strategy));
    }
    if (m_deployment_controller.isSet()) {
        obj.insert(QString("deploymentController"), ::OpenAPI::toJsonValue(m_deployment_controller));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_enable_ecs_managed_tags_isSet) {
        obj.insert(QString("enableECSManagedTags"), ::OpenAPI::toJsonValue(m_enable_ecs_managed_tags));
    }
    if (m_propagate_tags.isSet()) {
        obj.insert(QString("propagateTags"), ::OpenAPI::toJsonValue(m_propagate_tags));
    }
    if (m_enable_execute_command_isSet) {
        obj.insert(QString("enableExecuteCommand"), ::OpenAPI::toJsonValue(m_enable_execute_command));
    }
    return obj;
}

QString OAIUpdateServiceResponse_service::getServiceArn() const {
    return m_service_arn;
}
void OAIUpdateServiceResponse_service::setServiceArn(const QString &service_arn) {
    m_service_arn = service_arn;
    m_service_arn_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_service_arn_Set() const{
    return m_service_arn_isSet;
}

bool OAIUpdateServiceResponse_service::is_service_arn_Valid() const{
    return m_service_arn_isValid;
}

QString OAIUpdateServiceResponse_service::getServiceName() const {
    return m_service_name;
}
void OAIUpdateServiceResponse_service::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIUpdateServiceResponse_service::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIUpdateServiceResponse_service::getClusterArn() const {
    return m_cluster_arn;
}
void OAIUpdateServiceResponse_service::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAIUpdateServiceResponse_service::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

QList OAIUpdateServiceResponse_service::getLoadBalancers() const {
    return m_load_balancers;
}
void OAIUpdateServiceResponse_service::setLoadBalancers(const QList &load_balancers) {
    m_load_balancers = load_balancers;
    m_load_balancers_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_load_balancers_Set() const{
    return m_load_balancers_isSet;
}

bool OAIUpdateServiceResponse_service::is_load_balancers_Valid() const{
    return m_load_balancers_isValid;
}

QList OAIUpdateServiceResponse_service::getServiceRegistries() const {
    return m_service_registries;
}
void OAIUpdateServiceResponse_service::setServiceRegistries(const QList &service_registries) {
    m_service_registries = service_registries;
    m_service_registries_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_service_registries_Set() const{
    return m_service_registries_isSet;
}

bool OAIUpdateServiceResponse_service::is_service_registries_Valid() const{
    return m_service_registries_isValid;
}

QString OAIUpdateServiceResponse_service::getStatus() const {
    return m_status;
}
void OAIUpdateServiceResponse_service::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateServiceResponse_service::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIUpdateServiceResponse_service::getDesiredCount() const {
    return m_desired_count;
}
void OAIUpdateServiceResponse_service::setDesiredCount(const qint32 &desired_count) {
    m_desired_count = desired_count;
    m_desired_count_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_desired_count_Set() const{
    return m_desired_count_isSet;
}

bool OAIUpdateServiceResponse_service::is_desired_count_Valid() const{
    return m_desired_count_isValid;
}

qint32 OAIUpdateServiceResponse_service::getRunningCount() const {
    return m_running_count;
}
void OAIUpdateServiceResponse_service::setRunningCount(const qint32 &running_count) {
    m_running_count = running_count;
    m_running_count_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_running_count_Set() const{
    return m_running_count_isSet;
}

bool OAIUpdateServiceResponse_service::is_running_count_Valid() const{
    return m_running_count_isValid;
}

qint32 OAIUpdateServiceResponse_service::getPendingCount() const {
    return m_pending_count;
}
void OAIUpdateServiceResponse_service::setPendingCount(const qint32 &pending_count) {
    m_pending_count = pending_count;
    m_pending_count_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_pending_count_Set() const{
    return m_pending_count_isSet;
}

bool OAIUpdateServiceResponse_service::is_pending_count_Valid() const{
    return m_pending_count_isValid;
}

OAILaunchType OAIUpdateServiceResponse_service::getLaunchType() const {
    return m_launch_type;
}
void OAIUpdateServiceResponse_service::setLaunchType(const OAILaunchType &launch_type) {
    m_launch_type = launch_type;
    m_launch_type_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_launch_type_Set() const{
    return m_launch_type_isSet;
}

bool OAIUpdateServiceResponse_service::is_launch_type_Valid() const{
    return m_launch_type_isValid;
}

QList OAIUpdateServiceResponse_service::getCapacityProviderStrategy() const {
    return m_capacity_provider_strategy;
}
void OAIUpdateServiceResponse_service::setCapacityProviderStrategy(const QList &capacity_provider_strategy) {
    m_capacity_provider_strategy = capacity_provider_strategy;
    m_capacity_provider_strategy_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_capacity_provider_strategy_Set() const{
    return m_capacity_provider_strategy_isSet;
}

bool OAIUpdateServiceResponse_service::is_capacity_provider_strategy_Valid() const{
    return m_capacity_provider_strategy_isValid;
}

QString OAIUpdateServiceResponse_service::getPlatformVersion() const {
    return m_platform_version;
}
void OAIUpdateServiceResponse_service::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAIUpdateServiceResponse_service::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

QString OAIUpdateServiceResponse_service::getPlatformFamily() const {
    return m_platform_family;
}
void OAIUpdateServiceResponse_service::setPlatformFamily(const QString &platform_family) {
    m_platform_family = platform_family;
    m_platform_family_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_platform_family_Set() const{
    return m_platform_family_isSet;
}

bool OAIUpdateServiceResponse_service::is_platform_family_Valid() const{
    return m_platform_family_isValid;
}

QString OAIUpdateServiceResponse_service::getTaskDefinition() const {
    return m_task_definition;
}
void OAIUpdateServiceResponse_service::setTaskDefinition(const QString &task_definition) {
    m_task_definition = task_definition;
    m_task_definition_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_task_definition_Set() const{
    return m_task_definition_isSet;
}

bool OAIUpdateServiceResponse_service::is_task_definition_Valid() const{
    return m_task_definition_isValid;
}

OAICreateServiceRequest_deploymentConfiguration OAIUpdateServiceResponse_service::getDeploymentConfiguration() const {
    return m_deployment_configuration;
}
void OAIUpdateServiceResponse_service::setDeploymentConfiguration(const OAICreateServiceRequest_deploymentConfiguration &deployment_configuration) {
    m_deployment_configuration = deployment_configuration;
    m_deployment_configuration_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_deployment_configuration_Set() const{
    return m_deployment_configuration_isSet;
}

bool OAIUpdateServiceResponse_service::is_deployment_configuration_Valid() const{
    return m_deployment_configuration_isValid;
}

QList OAIUpdateServiceResponse_service::getTaskSets() const {
    return m_task_sets;
}
void OAIUpdateServiceResponse_service::setTaskSets(const QList &task_sets) {
    m_task_sets = task_sets;
    m_task_sets_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_task_sets_Set() const{
    return m_task_sets_isSet;
}

bool OAIUpdateServiceResponse_service::is_task_sets_Valid() const{
    return m_task_sets_isValid;
}

QList OAIUpdateServiceResponse_service::getDeployments() const {
    return m_deployments;
}
void OAIUpdateServiceResponse_service::setDeployments(const QList &deployments) {
    m_deployments = deployments;
    m_deployments_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_deployments_Set() const{
    return m_deployments_isSet;
}

bool OAIUpdateServiceResponse_service::is_deployments_Valid() const{
    return m_deployments_isValid;
}

QString OAIUpdateServiceResponse_service::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateServiceResponse_service::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateServiceResponse_service::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAIUpdateServiceResponse_service::getEvents() const {
    return m_events;
}
void OAIUpdateServiceResponse_service::setEvents(const QList &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_events_Set() const{
    return m_events_isSet;
}

bool OAIUpdateServiceResponse_service::is_events_Valid() const{
    return m_events_isValid;
}

QDateTime OAIUpdateServiceResponse_service::getCreatedAt() const {
    return m_created_at;
}
void OAIUpdateServiceResponse_service::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUpdateServiceResponse_service::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList OAIUpdateServiceResponse_service::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAIUpdateServiceResponse_service::setPlacementConstraints(const QList &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAIUpdateServiceResponse_service::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList OAIUpdateServiceResponse_service::getPlacementStrategy() const {
    return m_placement_strategy;
}
void OAIUpdateServiceResponse_service::setPlacementStrategy(const QList &placement_strategy) {
    m_placement_strategy = placement_strategy;
    m_placement_strategy_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_placement_strategy_Set() const{
    return m_placement_strategy_isSet;
}

bool OAIUpdateServiceResponse_service::is_placement_strategy_Valid() const{
    return m_placement_strategy_isValid;
}

OAIStartTaskRequest_networkConfiguration OAIUpdateServiceResponse_service::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIUpdateServiceResponse_service::setNetworkConfiguration(const OAIStartTaskRequest_networkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIUpdateServiceResponse_service::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

qint32 OAIUpdateServiceResponse_service::getHealthCheckGracePeriodSeconds() const {
    return m_health_check_grace_period_seconds;
}
void OAIUpdateServiceResponse_service::setHealthCheckGracePeriodSeconds(const qint32 &health_check_grace_period_seconds) {
    m_health_check_grace_period_seconds = health_check_grace_period_seconds;
    m_health_check_grace_period_seconds_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_health_check_grace_period_seconds_Set() const{
    return m_health_check_grace_period_seconds_isSet;
}

bool OAIUpdateServiceResponse_service::is_health_check_grace_period_seconds_Valid() const{
    return m_health_check_grace_period_seconds_isValid;
}

OAISchedulingStrategy OAIUpdateServiceResponse_service::getSchedulingStrategy() const {
    return m_scheduling_strategy;
}
void OAIUpdateServiceResponse_service::setSchedulingStrategy(const OAISchedulingStrategy &scheduling_strategy) {
    m_scheduling_strategy = scheduling_strategy;
    m_scheduling_strategy_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_scheduling_strategy_Set() const{
    return m_scheduling_strategy_isSet;
}

bool OAIUpdateServiceResponse_service::is_scheduling_strategy_Valid() const{
    return m_scheduling_strategy_isValid;
}

OAIService_deploymentController OAIUpdateServiceResponse_service::getDeploymentController() const {
    return m_deployment_controller;
}
void OAIUpdateServiceResponse_service::setDeploymentController(const OAIService_deploymentController &deployment_controller) {
    m_deployment_controller = deployment_controller;
    m_deployment_controller_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_deployment_controller_Set() const{
    return m_deployment_controller_isSet;
}

bool OAIUpdateServiceResponse_service::is_deployment_controller_Valid() const{
    return m_deployment_controller_isValid;
}

QList OAIUpdateServiceResponse_service::getTags() const {
    return m_tags;
}
void OAIUpdateServiceResponse_service::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateServiceResponse_service::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIUpdateServiceResponse_service::getCreatedBy() const {
    return m_created_by;
}
void OAIUpdateServiceResponse_service::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIUpdateServiceResponse_service::is_created_by_Valid() const{
    return m_created_by_isValid;
}

bool OAIUpdateServiceResponse_service::getEnableEcsManagedTags() const {
    return m_enable_ecs_managed_tags;
}
void OAIUpdateServiceResponse_service::setEnableEcsManagedTags(const bool &enable_ecs_managed_tags) {
    m_enable_ecs_managed_tags = enable_ecs_managed_tags;
    m_enable_ecs_managed_tags_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_enable_ecs_managed_tags_Set() const{
    return m_enable_ecs_managed_tags_isSet;
}

bool OAIUpdateServiceResponse_service::is_enable_ecs_managed_tags_Valid() const{
    return m_enable_ecs_managed_tags_isValid;
}

OAIPropagateTags OAIUpdateServiceResponse_service::getPropagateTags() const {
    return m_propagate_tags;
}
void OAIUpdateServiceResponse_service::setPropagateTags(const OAIPropagateTags &propagate_tags) {
    m_propagate_tags = propagate_tags;
    m_propagate_tags_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_propagate_tags_Set() const{
    return m_propagate_tags_isSet;
}

bool OAIUpdateServiceResponse_service::is_propagate_tags_Valid() const{
    return m_propagate_tags_isValid;
}

bool OAIUpdateServiceResponse_service::getEnableExecuteCommand() const {
    return m_enable_execute_command;
}
void OAIUpdateServiceResponse_service::setEnableExecuteCommand(const bool &enable_execute_command) {
    m_enable_execute_command = enable_execute_command;
    m_enable_execute_command_isSet = true;
}

bool OAIUpdateServiceResponse_service::is_enable_execute_command_Set() const{
    return m_enable_execute_command_isSet;
}

bool OAIUpdateServiceResponse_service::is_enable_execute_command_Valid() const{
    return m_enable_execute_command_isValid;
}

bool OAIUpdateServiceResponse_service::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_registries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_provider_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_grace_period_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_controller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ecs_managed_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_propagate_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_execute_command_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServiceResponse_service::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
