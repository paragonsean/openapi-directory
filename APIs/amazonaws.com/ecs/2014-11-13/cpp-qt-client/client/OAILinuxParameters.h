/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILinuxParameters.h
 *
 * The Linux-specific options that are applied to the container, such as Linux &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html\&quot;&gt;KernelCapabilities&lt;/a&gt;.
 */

#ifndef OAILinuxParameters_H
#define OAILinuxParameters_H

#include <QJsonObject>

#include "OAILinuxParameters_capabilities.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILinuxParameters_capabilities;

class OAILinuxParameters : public OAIObject {
public:
    OAILinuxParameters();
    OAILinuxParameters(QString json);
    ~OAILinuxParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAILinuxParameters_capabilities getCapabilities() const;
    void setCapabilities(const OAILinuxParameters_capabilities &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    QList getDevices() const;
    void setDevices(const QList &devices);
    bool is_devices_Set() const;
    bool is_devices_Valid() const;

    bool getInitProcessEnabled() const;
    void setInitProcessEnabled(const bool &init_process_enabled);
    bool is_init_process_enabled_Set() const;
    bool is_init_process_enabled_Valid() const;

    qint32 getSharedMemorySize() const;
    void setSharedMemorySize(const qint32 &shared_memory_size);
    bool is_shared_memory_size_Set() const;
    bool is_shared_memory_size_Valid() const;

    QList getTmpfs() const;
    void setTmpfs(const QList &tmpfs);
    bool is_tmpfs_Set() const;
    bool is_tmpfs_Valid() const;

    qint32 getMaxSwap() const;
    void setMaxSwap(const qint32 &max_swap);
    bool is_max_swap_Set() const;
    bool is_max_swap_Valid() const;

    qint32 getSwappiness() const;
    void setSwappiness(const qint32 &swappiness);
    bool is_swappiness_Set() const;
    bool is_swappiness_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAILinuxParameters_capabilities m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    QList m_devices;
    bool m_devices_isSet;
    bool m_devices_isValid;

    bool m_init_process_enabled;
    bool m_init_process_enabled_isSet;
    bool m_init_process_enabled_isValid;

    qint32 m_shared_memory_size;
    bool m_shared_memory_size_isSet;
    bool m_shared_memory_size_isValid;

    QList m_tmpfs;
    bool m_tmpfs_isSet;
    bool m_tmpfs_isValid;

    qint32 m_max_swap;
    bool m_max_swap_isSet;
    bool m_max_swap_isValid;

    qint32 m_swappiness;
    bool m_swappiness_isSet;
    bool m_swappiness_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILinuxParameters)

#endif // OAILinuxParameters_H
