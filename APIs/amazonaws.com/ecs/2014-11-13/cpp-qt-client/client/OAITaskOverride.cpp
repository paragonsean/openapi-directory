/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskOverride::OAITaskOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskOverride::OAITaskOverride() {
    this->initializeModel();
}

OAITaskOverride::~OAITaskOverride() {}

void OAITaskOverride::initializeModel() {

    m_container_overrides_isSet = false;
    m_container_overrides_isValid = false;

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_inference_accelerator_overrides_isSet = false;
    m_inference_accelerator_overrides_isValid = false;

    m_execution_role_arn_isSet = false;
    m_execution_role_arn_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_task_role_arn_isSet = false;
    m_task_role_arn_isValid = false;

    m_ephemeral_storage_isSet = false;
    m_ephemeral_storage_isValid = false;
}

void OAITaskOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskOverride::fromJsonObject(QJsonObject json) {

    m_container_overrides_isValid = ::OpenAPI::fromJsonValue(m_container_overrides, json[QString("containerOverrides")]);
    m_container_overrides_isSet = !json[QString("containerOverrides")].isNull() && m_container_overrides_isValid;

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("cpu")]);
    m_cpu_isSet = !json[QString("cpu")].isNull() && m_cpu_isValid;

    m_inference_accelerator_overrides_isValid = ::OpenAPI::fromJsonValue(m_inference_accelerator_overrides, json[QString("inferenceAcceleratorOverrides")]);
    m_inference_accelerator_overrides_isSet = !json[QString("inferenceAcceleratorOverrides")].isNull() && m_inference_accelerator_overrides_isValid;

    m_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_role_arn, json[QString("executionRoleArn")]);
    m_execution_role_arn_isSet = !json[QString("executionRoleArn")].isNull() && m_execution_role_arn_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_task_role_arn_isValid = ::OpenAPI::fromJsonValue(m_task_role_arn, json[QString("taskRoleArn")]);
    m_task_role_arn_isSet = !json[QString("taskRoleArn")].isNull() && m_task_role_arn_isValid;

    m_ephemeral_storage_isValid = ::OpenAPI::fromJsonValue(m_ephemeral_storage, json[QString("ephemeralStorage")]);
    m_ephemeral_storage_isSet = !json[QString("ephemeralStorage")].isNull() && m_ephemeral_storage_isValid;
}

QString OAITaskOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_container_overrides.isSet()) {
        obj.insert(QString("containerOverrides"), ::OpenAPI::toJsonValue(m_container_overrides));
    }
    if (m_cpu_isSet) {
        obj.insert(QString("cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_inference_accelerator_overrides.isSet()) {
        obj.insert(QString("inferenceAcceleratorOverrides"), ::OpenAPI::toJsonValue(m_inference_accelerator_overrides));
    }
    if (m_execution_role_arn_isSet) {
        obj.insert(QString("executionRoleArn"), ::OpenAPI::toJsonValue(m_execution_role_arn));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_task_role_arn_isSet) {
        obj.insert(QString("taskRoleArn"), ::OpenAPI::toJsonValue(m_task_role_arn));
    }
    if (m_ephemeral_storage.isSet()) {
        obj.insert(QString("ephemeralStorage"), ::OpenAPI::toJsonValue(m_ephemeral_storage));
    }
    return obj;
}

QList OAITaskOverride::getContainerOverrides() const {
    return m_container_overrides;
}
void OAITaskOverride::setContainerOverrides(const QList &container_overrides) {
    m_container_overrides = container_overrides;
    m_container_overrides_isSet = true;
}

bool OAITaskOverride::is_container_overrides_Set() const{
    return m_container_overrides_isSet;
}

bool OAITaskOverride::is_container_overrides_Valid() const{
    return m_container_overrides_isValid;
}

QString OAITaskOverride::getCpu() const {
    return m_cpu;
}
void OAITaskOverride::setCpu(const QString &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAITaskOverride::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAITaskOverride::is_cpu_Valid() const{
    return m_cpu_isValid;
}

QList OAITaskOverride::getInferenceAcceleratorOverrides() const {
    return m_inference_accelerator_overrides;
}
void OAITaskOverride::setInferenceAcceleratorOverrides(const QList &inference_accelerator_overrides) {
    m_inference_accelerator_overrides = inference_accelerator_overrides;
    m_inference_accelerator_overrides_isSet = true;
}

bool OAITaskOverride::is_inference_accelerator_overrides_Set() const{
    return m_inference_accelerator_overrides_isSet;
}

bool OAITaskOverride::is_inference_accelerator_overrides_Valid() const{
    return m_inference_accelerator_overrides_isValid;
}

QString OAITaskOverride::getExecutionRoleArn() const {
    return m_execution_role_arn;
}
void OAITaskOverride::setExecutionRoleArn(const QString &execution_role_arn) {
    m_execution_role_arn = execution_role_arn;
    m_execution_role_arn_isSet = true;
}

bool OAITaskOverride::is_execution_role_arn_Set() const{
    return m_execution_role_arn_isSet;
}

bool OAITaskOverride::is_execution_role_arn_Valid() const{
    return m_execution_role_arn_isValid;
}

QString OAITaskOverride::getMemory() const {
    return m_memory;
}
void OAITaskOverride::setMemory(const QString &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAITaskOverride::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAITaskOverride::is_memory_Valid() const{
    return m_memory_isValid;
}

QString OAITaskOverride::getTaskRoleArn() const {
    return m_task_role_arn;
}
void OAITaskOverride::setTaskRoleArn(const QString &task_role_arn) {
    m_task_role_arn = task_role_arn;
    m_task_role_arn_isSet = true;
}

bool OAITaskOverride::is_task_role_arn_Set() const{
    return m_task_role_arn_isSet;
}

bool OAITaskOverride::is_task_role_arn_Valid() const{
    return m_task_role_arn_isValid;
}

OAITaskOverride_ephemeralStorage OAITaskOverride::getEphemeralStorage() const {
    return m_ephemeral_storage;
}
void OAITaskOverride::setEphemeralStorage(const OAITaskOverride_ephemeralStorage &ephemeral_storage) {
    m_ephemeral_storage = ephemeral_storage;
    m_ephemeral_storage_isSet = true;
}

bool OAITaskOverride::is_ephemeral_storage_Set() const{
    return m_ephemeral_storage_isSet;
}

bool OAITaskOverride::is_ephemeral_storage_Valid() const{
    return m_ephemeral_storage_isValid;
}

bool OAITaskOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_accelerator_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ephemeral_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
