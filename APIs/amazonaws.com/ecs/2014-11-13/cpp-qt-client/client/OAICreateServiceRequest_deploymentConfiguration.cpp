/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateServiceRequest_deploymentConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateServiceRequest_deploymentConfiguration::OAICreateServiceRequest_deploymentConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateServiceRequest_deploymentConfiguration::OAICreateServiceRequest_deploymentConfiguration() {
    this->initializeModel();
}

OAICreateServiceRequest_deploymentConfiguration::~OAICreateServiceRequest_deploymentConfiguration() {}

void OAICreateServiceRequest_deploymentConfiguration::initializeModel() {

    m_deployment_circuit_breaker_isSet = false;
    m_deployment_circuit_breaker_isValid = false;

    m_maximum_percent_isSet = false;
    m_maximum_percent_isValid = false;

    m_minimum_healthy_percent_isSet = false;
    m_minimum_healthy_percent_isValid = false;

    m_alarms_isSet = false;
    m_alarms_isValid = false;
}

void OAICreateServiceRequest_deploymentConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateServiceRequest_deploymentConfiguration::fromJsonObject(QJsonObject json) {

    m_deployment_circuit_breaker_isValid = ::OpenAPI::fromJsonValue(m_deployment_circuit_breaker, json[QString("deploymentCircuitBreaker")]);
    m_deployment_circuit_breaker_isSet = !json[QString("deploymentCircuitBreaker")].isNull() && m_deployment_circuit_breaker_isValid;

    m_maximum_percent_isValid = ::OpenAPI::fromJsonValue(m_maximum_percent, json[QString("maximumPercent")]);
    m_maximum_percent_isSet = !json[QString("maximumPercent")].isNull() && m_maximum_percent_isValid;

    m_minimum_healthy_percent_isValid = ::OpenAPI::fromJsonValue(m_minimum_healthy_percent, json[QString("minimumHealthyPercent")]);
    m_minimum_healthy_percent_isSet = !json[QString("minimumHealthyPercent")].isNull() && m_minimum_healthy_percent_isValid;

    m_alarms_isValid = ::OpenAPI::fromJsonValue(m_alarms, json[QString("alarms")]);
    m_alarms_isSet = !json[QString("alarms")].isNull() && m_alarms_isValid;
}

QString OAICreateServiceRequest_deploymentConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateServiceRequest_deploymentConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_circuit_breaker.isSet()) {
        obj.insert(QString("deploymentCircuitBreaker"), ::OpenAPI::toJsonValue(m_deployment_circuit_breaker));
    }
    if (m_maximum_percent_isSet) {
        obj.insert(QString("maximumPercent"), ::OpenAPI::toJsonValue(m_maximum_percent));
    }
    if (m_minimum_healthy_percent_isSet) {
        obj.insert(QString("minimumHealthyPercent"), ::OpenAPI::toJsonValue(m_minimum_healthy_percent));
    }
    if (m_alarms.isSet()) {
        obj.insert(QString("alarms"), ::OpenAPI::toJsonValue(m_alarms));
    }
    return obj;
}

OAIDeploymentConfiguration_deploymentCircuitBreaker OAICreateServiceRequest_deploymentConfiguration::getDeploymentCircuitBreaker() const {
    return m_deployment_circuit_breaker;
}
void OAICreateServiceRequest_deploymentConfiguration::setDeploymentCircuitBreaker(const OAIDeploymentConfiguration_deploymentCircuitBreaker &deployment_circuit_breaker) {
    m_deployment_circuit_breaker = deployment_circuit_breaker;
    m_deployment_circuit_breaker_isSet = true;
}

bool OAICreateServiceRequest_deploymentConfiguration::is_deployment_circuit_breaker_Set() const{
    return m_deployment_circuit_breaker_isSet;
}

bool OAICreateServiceRequest_deploymentConfiguration::is_deployment_circuit_breaker_Valid() const{
    return m_deployment_circuit_breaker_isValid;
}

qint32 OAICreateServiceRequest_deploymentConfiguration::getMaximumPercent() const {
    return m_maximum_percent;
}
void OAICreateServiceRequest_deploymentConfiguration::setMaximumPercent(const qint32 &maximum_percent) {
    m_maximum_percent = maximum_percent;
    m_maximum_percent_isSet = true;
}

bool OAICreateServiceRequest_deploymentConfiguration::is_maximum_percent_Set() const{
    return m_maximum_percent_isSet;
}

bool OAICreateServiceRequest_deploymentConfiguration::is_maximum_percent_Valid() const{
    return m_maximum_percent_isValid;
}

qint32 OAICreateServiceRequest_deploymentConfiguration::getMinimumHealthyPercent() const {
    return m_minimum_healthy_percent;
}
void OAICreateServiceRequest_deploymentConfiguration::setMinimumHealthyPercent(const qint32 &minimum_healthy_percent) {
    m_minimum_healthy_percent = minimum_healthy_percent;
    m_minimum_healthy_percent_isSet = true;
}

bool OAICreateServiceRequest_deploymentConfiguration::is_minimum_healthy_percent_Set() const{
    return m_minimum_healthy_percent_isSet;
}

bool OAICreateServiceRequest_deploymentConfiguration::is_minimum_healthy_percent_Valid() const{
    return m_minimum_healthy_percent_isValid;
}

OAIDeploymentConfiguration_alarms OAICreateServiceRequest_deploymentConfiguration::getAlarms() const {
    return m_alarms;
}
void OAICreateServiceRequest_deploymentConfiguration::setAlarms(const OAIDeploymentConfiguration_alarms &alarms) {
    m_alarms = alarms;
    m_alarms_isSet = true;
}

bool OAICreateServiceRequest_deploymentConfiguration::is_alarms_Set() const{
    return m_alarms_isSet;
}

bool OAICreateServiceRequest_deploymentConfiguration::is_alarms_Valid() const{
    return m_alarms_isValid;
}

bool OAICreateServiceRequest_deploymentConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_circuit_breaker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_healthy_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateServiceRequest_deploymentConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
