/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHealthCheck.h
 *
 * &lt;p&gt;An object representing a container health check. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image (such as those specified in a parent image or from the image&#39;s Dockerfile). This configuration maps to the &lt;code&gt;HEALTHCHECK&lt;/code&gt; parameter of &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/reference/run/\&quot;&gt;docker run&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon ECS container agent only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor Docker health checks that are embedded in a container image and not specified in the container definition. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can view the health status of both individual containers and a task with the DescribeTasks API operation or when viewing the task details in the console.&lt;/p&gt; &lt;p&gt;The health check is designed to make sure that your containers survive agent restarts, upgrades, or temporary unavailability.&lt;/p&gt; &lt;p&gt;The following describes the possible &lt;code&gt;healthStatus&lt;/code&gt; values for a container:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HEALTHY&lt;/code&gt;-The container health check has passed successfully.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UNHEALTHY&lt;/code&gt;-The container health check has failed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UNKNOWN&lt;/code&gt;-The container health check is being evaluated or there&#39;s no container health check defined.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following describes the possible &lt;code&gt;healthStatus&lt;/code&gt; values for a task. The container health check status of non-essential containers don&#39;t have an effect on the health status of a task.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HEALTHY&lt;/code&gt;-All essential containers within the task have passed their health checks.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UNHEALTHY&lt;/code&gt;-One or more essential containers have failed their health check.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UNKNOWN&lt;/code&gt;-The essential containers within the task are still having their health checks evaluated, there are only nonessential containers with health checks defined, or there are no container health checks defined.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If a task is run manually, and not as part of a service, the task will continue its lifecycle regardless of its health status. For tasks that are part of a service, if the task reports as unhealthy then the task will be stopped and the service scheduler will replace it.&lt;/p&gt; &lt;p&gt;The following are notes about container health check support:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;When the Amazon ECS agent cannot connect to the Amazon ECS service, the service reports the container as &lt;code&gt;UNHEALTHY&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The health check statuses are the \&quot;last heard from\&quot; response from the Amazon ECS agent. There are no assumptions made about the status of the container health checks.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Container health checks require version 1.17.0 or greater of the Amazon ECS container agent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html\&quot;&gt;Updating the Amazon ECS container agent&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Container health checks are supported for Fargate tasks if you&#39;re using platform version &lt;code&gt;1.1.0&lt;/code&gt; or greater. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html\&quot;&gt;Fargate platform versions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Container health checks aren&#39;t supported for tasks that are part of a service that&#39;s configured to use a Classic Load Balancer.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAIHealthCheck_H
#define OAIHealthCheck_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHealthCheck : public OAIObject {
public:
    OAIHealthCheck();
    OAIHealthCheck(QString json);
    ~OAIHealthCheck() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getCommand() const;
    void setCommand(const QList &command);
    bool is_command_Set() const;
    bool is_command_Valid() const;

    qint32 getInterval() const;
    void setInterval(const qint32 &interval);
    bool is_interval_Set() const;
    bool is_interval_Valid() const;

    qint32 getTimeout() const;
    void setTimeout(const qint32 &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    qint32 getRetries() const;
    void setRetries(const qint32 &retries);
    bool is_retries_Set() const;
    bool is_retries_Valid() const;

    qint32 getStartPeriod() const;
    void setStartPeriod(const qint32 &start_period);
    bool is_start_period_Set() const;
    bool is_start_period_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_command;
    bool m_command_isSet;
    bool m_command_isValid;

    qint32 m_interval;
    bool m_interval_isSet;
    bool m_interval_isValid;

    qint32 m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    qint32 m_retries;
    bool m_retries_isSet;
    bool m_retries_isValid;

    qint32 m_start_period;
    bool m_start_period_isSet;
    bool m_start_period_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHealthCheck)

#endif // OAIHealthCheck_H
