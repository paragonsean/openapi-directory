/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListAccountSettingsRequest.h
 *
 * 
 */

#ifndef OAIListAccountSettingsRequest_H
#define OAIListAccountSettingsRequest_H

#include <QJsonObject>

#include "OAISettingName.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListAccountSettingsRequest : public OAIObject {
public:
    OAIListAccountSettingsRequest();
    OAIListAccountSettingsRequest(QString json);
    ~OAIListAccountSettingsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISettingName getName() const;
    void setName(const OAISettingName &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    QString getPrincipalArn() const;
    void setPrincipalArn(const QString &principal_arn);
    bool is_principal_arn_Set() const;
    bool is_principal_arn_Valid() const;

    bool getEffectiveSettings() const;
    void setEffectiveSettings(const bool &effective_settings);
    bool is_effective_settings_Set() const;
    bool is_effective_settings_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISettingName m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    QString m_principal_arn;
    bool m_principal_arn_isSet;
    bool m_principal_arn_isValid;

    bool m_effective_settings;
    bool m_effective_settings_isSet;
    bool m_effective_settings_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListAccountSettingsRequest)

#endif // OAIListAccountSettingsRequest_H
