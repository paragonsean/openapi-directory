/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeploymentCircuitBreaker.h
 *
 * &lt;note&gt; &lt;p&gt;The deployment circuit breaker can only be used for services using the rolling update (&lt;code&gt;ECS&lt;/code&gt;) deployment type.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The &lt;b&gt;deployment circuit breaker&lt;/b&gt; determines whether a service deployment will fail if the service can&#39;t reach a steady state. If it is turned on, a service deployment will transition to a failed state and stop launching new tasks. You can also configure Amazon ECS to roll back your service to the last completed deployment after a failure. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html\&quot;&gt;Rolling update&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about API failure reasons, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html\&quot;&gt;API failure reasons&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
 */

#ifndef OAIDeploymentCircuitBreaker_H
#define OAIDeploymentCircuitBreaker_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDeploymentCircuitBreaker : public OAIObject {
public:
    OAIDeploymentCircuitBreaker();
    OAIDeploymentCircuitBreaker(QString json);
    ~OAIDeploymentCircuitBreaker() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getEnable() const;
    void setEnable(const bool &enable);
    bool is_enable_Set() const;
    bool is_enable_Valid() const;

    bool getRollback() const;
    void setRollback(const bool &rollback);
    bool is_rollback_Set() const;
    bool is_rollback_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enable;
    bool m_enable_isSet;
    bool m_enable_isValid;

    bool m_rollback;
    bool m_rollback_isSet;
    bool m_rollback_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeploymentCircuitBreaker)

#endif // OAIDeploymentCircuitBreaker_H
