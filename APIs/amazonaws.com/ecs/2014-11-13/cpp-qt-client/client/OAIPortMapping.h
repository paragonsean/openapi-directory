/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPortMapping.h
 *
 * &lt;p&gt;Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.&lt;/p&gt; &lt;p&gt;If you use containers in a task with the &lt;code&gt;awsvpc&lt;/code&gt; or &lt;code&gt;host&lt;/code&gt; network mode, specify the exposed ports using &lt;code&gt;containerPort&lt;/code&gt;. The &lt;code&gt;hostPort&lt;/code&gt; can be left blank or it must be the same value as the &lt;code&gt;containerPort&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Most fields of this parameter (&lt;code&gt;containerPort&lt;/code&gt;, &lt;code&gt;hostPort&lt;/code&gt;, &lt;code&gt;protocol&lt;/code&gt;) maps to &lt;code&gt;PortBindings&lt;/code&gt; in the &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate\&quot;&gt;Create a container&lt;/a&gt; section of the &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/api/v1.35/\&quot;&gt;Docker Remote API&lt;/a&gt; and the &lt;code&gt;--publish&lt;/code&gt; option to &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/reference/commandline/run/\&quot;&gt; &lt;code&gt;docker run&lt;/code&gt; &lt;/a&gt;. If the network mode of a task definition is set to &lt;code&gt;host&lt;/code&gt;, host ports must either be undefined or match the container port in the port mapping.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t expose the same container port for multiple protocols. If you attempt this, an error is returned.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;After a task reaches the &lt;code&gt;RUNNING&lt;/code&gt; status, manual and automatic host and container port assignments are visible in the &lt;code&gt;networkBindings&lt;/code&gt; section of &lt;a&gt;DescribeTasks&lt;/a&gt; API responses.&lt;/p&gt;
 */

#ifndef OAIPortMapping_H
#define OAIPortMapping_H

#include <QJsonObject>

#include "OAIApplicationProtocol.h"
#include "OAITransportProtocol.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPortMapping : public OAIObject {
public:
    OAIPortMapping();
    OAIPortMapping(QString json);
    ~OAIPortMapping() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getContainerPort() const;
    void setContainerPort(const qint32 &container_port);
    bool is_container_port_Set() const;
    bool is_container_port_Valid() const;

    qint32 getHostPort() const;
    void setHostPort(const qint32 &host_port);
    bool is_host_port_Set() const;
    bool is_host_port_Valid() const;

    OAITransportProtocol getProtocol() const;
    void setProtocol(const OAITransportProtocol &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIApplicationProtocol getAppProtocol() const;
    void setAppProtocol(const OAIApplicationProtocol &app_protocol);
    bool is_app_protocol_Set() const;
    bool is_app_protocol_Valid() const;

    QString getContainerPortRange() const;
    void setContainerPortRange(const QString &container_port_range);
    bool is_container_port_range_Set() const;
    bool is_container_port_range_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_container_port;
    bool m_container_port_isSet;
    bool m_container_port_isValid;

    qint32 m_host_port;
    bool m_host_port_isSet;
    bool m_host_port_isValid;

    OAITransportProtocol m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIApplicationProtocol m_app_protocol;
    bool m_app_protocol_isSet;
    bool m_app_protocol_isValid;

    QString m_container_port_range;
    bool m_container_port_range_isSet;
    bool m_container_port_range_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPortMapping)

#endif // OAIPortMapping_H
