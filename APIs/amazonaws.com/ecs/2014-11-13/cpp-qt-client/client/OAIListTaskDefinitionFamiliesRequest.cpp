/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTaskDefinitionFamiliesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTaskDefinitionFamiliesRequest::OAIListTaskDefinitionFamiliesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTaskDefinitionFamiliesRequest::OAIListTaskDefinitionFamiliesRequest() {
    this->initializeModel();
}

OAIListTaskDefinitionFamiliesRequest::~OAIListTaskDefinitionFamiliesRequest() {}

void OAIListTaskDefinitionFamiliesRequest::initializeModel() {

    m_family_prefix_isSet = false;
    m_family_prefix_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListTaskDefinitionFamiliesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTaskDefinitionFamiliesRequest::fromJsonObject(QJsonObject json) {

    m_family_prefix_isValid = ::OpenAPI::fromJsonValue(m_family_prefix, json[QString("familyPrefix")]);
    m_family_prefix_isSet = !json[QString("familyPrefix")].isNull() && m_family_prefix_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIListTaskDefinitionFamiliesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTaskDefinitionFamiliesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_family_prefix_isSet) {
        obj.insert(QString("familyPrefix"), ::OpenAPI::toJsonValue(m_family_prefix));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListTaskDefinitionFamiliesRequest::getFamilyPrefix() const {
    return m_family_prefix;
}
void OAIListTaskDefinitionFamiliesRequest::setFamilyPrefix(const QString &family_prefix) {
    m_family_prefix = family_prefix;
    m_family_prefix_isSet = true;
}

bool OAIListTaskDefinitionFamiliesRequest::is_family_prefix_Set() const{
    return m_family_prefix_isSet;
}

bool OAIListTaskDefinitionFamiliesRequest::is_family_prefix_Valid() const{
    return m_family_prefix_isValid;
}

OAITaskDefinitionFamilyStatus OAIListTaskDefinitionFamiliesRequest::getStatus() const {
    return m_status;
}
void OAIListTaskDefinitionFamiliesRequest::setStatus(const OAITaskDefinitionFamilyStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListTaskDefinitionFamiliesRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListTaskDefinitionFamiliesRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIListTaskDefinitionFamiliesRequest::getNextToken() const {
    return m_next_token;
}
void OAIListTaskDefinitionFamiliesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTaskDefinitionFamiliesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTaskDefinitionFamiliesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListTaskDefinitionFamiliesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListTaskDefinitionFamiliesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListTaskDefinitionFamiliesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListTaskDefinitionFamiliesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListTaskDefinitionFamiliesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_family_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTaskDefinitionFamiliesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
