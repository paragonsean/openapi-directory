/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResource.h
 *
 * Describes the resources available for a container instance.
 */

#ifndef OAIResource_H
#define OAIResource_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIResource : public OAIObject {
public:
    OAIResource();
    OAIResource(QString json);
    ~OAIResource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    double getDoubleValue() const;
    void setDoubleValue(const double &double_value);
    bool is_double_value_Set() const;
    bool is_double_value_Valid() const;

    qint32 getLongValue() const;
    void setLongValue(const qint32 &long_value);
    bool is_long_value_Set() const;
    bool is_long_value_Valid() const;

    qint32 getIntegerValue() const;
    void setIntegerValue(const qint32 &integer_value);
    bool is_integer_value_Set() const;
    bool is_integer_value_Valid() const;

    QList getStringSetValue() const;
    void setStringSetValue(const QList &string_set_value);
    bool is_string_set_value_Set() const;
    bool is_string_set_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    double m_double_value;
    bool m_double_value_isSet;
    bool m_double_value_isValid;

    qint32 m_long_value;
    bool m_long_value_isSet;
    bool m_long_value_isValid;

    qint32 m_integer_value;
    bool m_integer_value_isSet;
    bool m_integer_value_isValid;

    QList m_string_set_value;
    bool m_string_set_value_isSet;
    bool m_string_set_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResource)

#endif // OAIResource_H
