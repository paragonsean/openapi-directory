/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServiceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServiceRequest::OAIUpdateServiceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServiceRequest::OAIUpdateServiceRequest() {
    this->initializeModel();
}

OAIUpdateServiceRequest::~OAIUpdateServiceRequest() {}

void OAIUpdateServiceRequest::initializeModel() {

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_desired_count_isSet = false;
    m_desired_count_isValid = false;

    m_task_definition_isSet = false;
    m_task_definition_isValid = false;

    m_capacity_provider_strategy_isSet = false;
    m_capacity_provider_strategy_isValid = false;

    m_deployment_configuration_isSet = false;
    m_deployment_configuration_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_placement_strategy_isSet = false;
    m_placement_strategy_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_force_new_deployment_isSet = false;
    m_force_new_deployment_isValid = false;

    m_health_check_grace_period_seconds_isSet = false;
    m_health_check_grace_period_seconds_isValid = false;

    m_enable_execute_command_isSet = false;
    m_enable_execute_command_isValid = false;

    m_enable_ecs_managed_tags_isSet = false;
    m_enable_ecs_managed_tags_isValid = false;

    m_load_balancers_isSet = false;
    m_load_balancers_isValid = false;

    m_propagate_tags_isSet = false;
    m_propagate_tags_isValid = false;

    m_service_registries_isSet = false;
    m_service_registries_isValid = false;

    m_service_connect_configuration_isSet = false;
    m_service_connect_configuration_isValid = false;
}

void OAIUpdateServiceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServiceRequest::fromJsonObject(QJsonObject json) {

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_desired_count_isValid = ::OpenAPI::fromJsonValue(m_desired_count, json[QString("desiredCount")]);
    m_desired_count_isSet = !json[QString("desiredCount")].isNull() && m_desired_count_isValid;

    m_task_definition_isValid = ::OpenAPI::fromJsonValue(m_task_definition, json[QString("taskDefinition")]);
    m_task_definition_isSet = !json[QString("taskDefinition")].isNull() && m_task_definition_isValid;

    m_capacity_provider_strategy_isValid = ::OpenAPI::fromJsonValue(m_capacity_provider_strategy, json[QString("capacityProviderStrategy")]);
    m_capacity_provider_strategy_isSet = !json[QString("capacityProviderStrategy")].isNull() && m_capacity_provider_strategy_isValid;

    m_deployment_configuration_isValid = ::OpenAPI::fromJsonValue(m_deployment_configuration, json[QString("deploymentConfiguration")]);
    m_deployment_configuration_isSet = !json[QString("deploymentConfiguration")].isNull() && m_deployment_configuration_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("networkConfiguration")]);
    m_network_configuration_isSet = !json[QString("networkConfiguration")].isNull() && m_network_configuration_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("placementConstraints")]);
    m_placement_constraints_isSet = !json[QString("placementConstraints")].isNull() && m_placement_constraints_isValid;

    m_placement_strategy_isValid = ::OpenAPI::fromJsonValue(m_placement_strategy, json[QString("placementStrategy")]);
    m_placement_strategy_isSet = !json[QString("placementStrategy")].isNull() && m_placement_strategy_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("platformVersion")]);
    m_platform_version_isSet = !json[QString("platformVersion")].isNull() && m_platform_version_isValid;

    m_force_new_deployment_isValid = ::OpenAPI::fromJsonValue(m_force_new_deployment, json[QString("forceNewDeployment")]);
    m_force_new_deployment_isSet = !json[QString("forceNewDeployment")].isNull() && m_force_new_deployment_isValid;

    m_health_check_grace_period_seconds_isValid = ::OpenAPI::fromJsonValue(m_health_check_grace_period_seconds, json[QString("healthCheckGracePeriodSeconds")]);
    m_health_check_grace_period_seconds_isSet = !json[QString("healthCheckGracePeriodSeconds")].isNull() && m_health_check_grace_period_seconds_isValid;

    m_enable_execute_command_isValid = ::OpenAPI::fromJsonValue(m_enable_execute_command, json[QString("enableExecuteCommand")]);
    m_enable_execute_command_isSet = !json[QString("enableExecuteCommand")].isNull() && m_enable_execute_command_isValid;

    m_enable_ecs_managed_tags_isValid = ::OpenAPI::fromJsonValue(m_enable_ecs_managed_tags, json[QString("enableECSManagedTags")]);
    m_enable_ecs_managed_tags_isSet = !json[QString("enableECSManagedTags")].isNull() && m_enable_ecs_managed_tags_isValid;

    m_load_balancers_isValid = ::OpenAPI::fromJsonValue(m_load_balancers, json[QString("loadBalancers")]);
    m_load_balancers_isSet = !json[QString("loadBalancers")].isNull() && m_load_balancers_isValid;

    m_propagate_tags_isValid = ::OpenAPI::fromJsonValue(m_propagate_tags, json[QString("propagateTags")]);
    m_propagate_tags_isSet = !json[QString("propagateTags")].isNull() && m_propagate_tags_isValid;

    m_service_registries_isValid = ::OpenAPI::fromJsonValue(m_service_registries, json[QString("serviceRegistries")]);
    m_service_registries_isSet = !json[QString("serviceRegistries")].isNull() && m_service_registries_isValid;

    m_service_connect_configuration_isValid = ::OpenAPI::fromJsonValue(m_service_connect_configuration, json[QString("serviceConnectConfiguration")]);
    m_service_connect_configuration_isSet = !json[QString("serviceConnectConfiguration")].isNull() && m_service_connect_configuration_isValid;
}

QString OAIUpdateServiceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServiceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_desired_count_isSet) {
        obj.insert(QString("desiredCount"), ::OpenAPI::toJsonValue(m_desired_count));
    }
    if (m_task_definition_isSet) {
        obj.insert(QString("taskDefinition"), ::OpenAPI::toJsonValue(m_task_definition));
    }
    if (m_capacity_provider_strategy.isSet()) {
        obj.insert(QString("capacityProviderStrategy"), ::OpenAPI::toJsonValue(m_capacity_provider_strategy));
    }
    if (m_deployment_configuration.isSet()) {
        obj.insert(QString("deploymentConfiguration"), ::OpenAPI::toJsonValue(m_deployment_configuration));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("networkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_placement_constraints.isSet()) {
        obj.insert(QString("placementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_placement_strategy.isSet()) {
        obj.insert(QString("placementStrategy"), ::OpenAPI::toJsonValue(m_placement_strategy));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("platformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_force_new_deployment_isSet) {
        obj.insert(QString("forceNewDeployment"), ::OpenAPI::toJsonValue(m_force_new_deployment));
    }
    if (m_health_check_grace_period_seconds_isSet) {
        obj.insert(QString("healthCheckGracePeriodSeconds"), ::OpenAPI::toJsonValue(m_health_check_grace_period_seconds));
    }
    if (m_enable_execute_command_isSet) {
        obj.insert(QString("enableExecuteCommand"), ::OpenAPI::toJsonValue(m_enable_execute_command));
    }
    if (m_enable_ecs_managed_tags_isSet) {
        obj.insert(QString("enableECSManagedTags"), ::OpenAPI::toJsonValue(m_enable_ecs_managed_tags));
    }
    if (m_load_balancers.isSet()) {
        obj.insert(QString("loadBalancers"), ::OpenAPI::toJsonValue(m_load_balancers));
    }
    if (m_propagate_tags.isSet()) {
        obj.insert(QString("propagateTags"), ::OpenAPI::toJsonValue(m_propagate_tags));
    }
    if (m_service_registries.isSet()) {
        obj.insert(QString("serviceRegistries"), ::OpenAPI::toJsonValue(m_service_registries));
    }
    if (m_service_connect_configuration.isSet()) {
        obj.insert(QString("serviceConnectConfiguration"), ::OpenAPI::toJsonValue(m_service_connect_configuration));
    }
    return obj;
}

QString OAIUpdateServiceRequest::getCluster() const {
    return m_cluster;
}
void OAIUpdateServiceRequest::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIUpdateServiceRequest::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIUpdateServiceRequest::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIUpdateServiceRequest::getService() const {
    return m_service;
}
void OAIUpdateServiceRequest::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIUpdateServiceRequest::is_service_Set() const{
    return m_service_isSet;
}

bool OAIUpdateServiceRequest::is_service_Valid() const{
    return m_service_isValid;
}

qint32 OAIUpdateServiceRequest::getDesiredCount() const {
    return m_desired_count;
}
void OAIUpdateServiceRequest::setDesiredCount(const qint32 &desired_count) {
    m_desired_count = desired_count;
    m_desired_count_isSet = true;
}

bool OAIUpdateServiceRequest::is_desired_count_Set() const{
    return m_desired_count_isSet;
}

bool OAIUpdateServiceRequest::is_desired_count_Valid() const{
    return m_desired_count_isValid;
}

QString OAIUpdateServiceRequest::getTaskDefinition() const {
    return m_task_definition;
}
void OAIUpdateServiceRequest::setTaskDefinition(const QString &task_definition) {
    m_task_definition = task_definition;
    m_task_definition_isSet = true;
}

bool OAIUpdateServiceRequest::is_task_definition_Set() const{
    return m_task_definition_isSet;
}

bool OAIUpdateServiceRequest::is_task_definition_Valid() const{
    return m_task_definition_isValid;
}

QList OAIUpdateServiceRequest::getCapacityProviderStrategy() const {
    return m_capacity_provider_strategy;
}
void OAIUpdateServiceRequest::setCapacityProviderStrategy(const QList &capacity_provider_strategy) {
    m_capacity_provider_strategy = capacity_provider_strategy;
    m_capacity_provider_strategy_isSet = true;
}

bool OAIUpdateServiceRequest::is_capacity_provider_strategy_Set() const{
    return m_capacity_provider_strategy_isSet;
}

bool OAIUpdateServiceRequest::is_capacity_provider_strategy_Valid() const{
    return m_capacity_provider_strategy_isValid;
}

OAICreateServiceRequest_deploymentConfiguration OAIUpdateServiceRequest::getDeploymentConfiguration() const {
    return m_deployment_configuration;
}
void OAIUpdateServiceRequest::setDeploymentConfiguration(const OAICreateServiceRequest_deploymentConfiguration &deployment_configuration) {
    m_deployment_configuration = deployment_configuration;
    m_deployment_configuration_isSet = true;
}

bool OAIUpdateServiceRequest::is_deployment_configuration_Set() const{
    return m_deployment_configuration_isSet;
}

bool OAIUpdateServiceRequest::is_deployment_configuration_Valid() const{
    return m_deployment_configuration_isValid;
}

OAIUpdateServiceRequest_networkConfiguration OAIUpdateServiceRequest::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIUpdateServiceRequest::setNetworkConfiguration(const OAIUpdateServiceRequest_networkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIUpdateServiceRequest::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIUpdateServiceRequest::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

QList OAIUpdateServiceRequest::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAIUpdateServiceRequest::setPlacementConstraints(const QList &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAIUpdateServiceRequest::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAIUpdateServiceRequest::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList OAIUpdateServiceRequest::getPlacementStrategy() const {
    return m_placement_strategy;
}
void OAIUpdateServiceRequest::setPlacementStrategy(const QList &placement_strategy) {
    m_placement_strategy = placement_strategy;
    m_placement_strategy_isSet = true;
}

bool OAIUpdateServiceRequest::is_placement_strategy_Set() const{
    return m_placement_strategy_isSet;
}

bool OAIUpdateServiceRequest::is_placement_strategy_Valid() const{
    return m_placement_strategy_isValid;
}

QString OAIUpdateServiceRequest::getPlatformVersion() const {
    return m_platform_version;
}
void OAIUpdateServiceRequest::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAIUpdateServiceRequest::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAIUpdateServiceRequest::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

bool OAIUpdateServiceRequest::getForceNewDeployment() const {
    return m_force_new_deployment;
}
void OAIUpdateServiceRequest::setForceNewDeployment(const bool &force_new_deployment) {
    m_force_new_deployment = force_new_deployment;
    m_force_new_deployment_isSet = true;
}

bool OAIUpdateServiceRequest::is_force_new_deployment_Set() const{
    return m_force_new_deployment_isSet;
}

bool OAIUpdateServiceRequest::is_force_new_deployment_Valid() const{
    return m_force_new_deployment_isValid;
}

qint32 OAIUpdateServiceRequest::getHealthCheckGracePeriodSeconds() const {
    return m_health_check_grace_period_seconds;
}
void OAIUpdateServiceRequest::setHealthCheckGracePeriodSeconds(const qint32 &health_check_grace_period_seconds) {
    m_health_check_grace_period_seconds = health_check_grace_period_seconds;
    m_health_check_grace_period_seconds_isSet = true;
}

bool OAIUpdateServiceRequest::is_health_check_grace_period_seconds_Set() const{
    return m_health_check_grace_period_seconds_isSet;
}

bool OAIUpdateServiceRequest::is_health_check_grace_period_seconds_Valid() const{
    return m_health_check_grace_period_seconds_isValid;
}

bool OAIUpdateServiceRequest::getEnableExecuteCommand() const {
    return m_enable_execute_command;
}
void OAIUpdateServiceRequest::setEnableExecuteCommand(const bool &enable_execute_command) {
    m_enable_execute_command = enable_execute_command;
    m_enable_execute_command_isSet = true;
}

bool OAIUpdateServiceRequest::is_enable_execute_command_Set() const{
    return m_enable_execute_command_isSet;
}

bool OAIUpdateServiceRequest::is_enable_execute_command_Valid() const{
    return m_enable_execute_command_isValid;
}

bool OAIUpdateServiceRequest::getEnableEcsManagedTags() const {
    return m_enable_ecs_managed_tags;
}
void OAIUpdateServiceRequest::setEnableEcsManagedTags(const bool &enable_ecs_managed_tags) {
    m_enable_ecs_managed_tags = enable_ecs_managed_tags;
    m_enable_ecs_managed_tags_isSet = true;
}

bool OAIUpdateServiceRequest::is_enable_ecs_managed_tags_Set() const{
    return m_enable_ecs_managed_tags_isSet;
}

bool OAIUpdateServiceRequest::is_enable_ecs_managed_tags_Valid() const{
    return m_enable_ecs_managed_tags_isValid;
}

QList OAIUpdateServiceRequest::getLoadBalancers() const {
    return m_load_balancers;
}
void OAIUpdateServiceRequest::setLoadBalancers(const QList &load_balancers) {
    m_load_balancers = load_balancers;
    m_load_balancers_isSet = true;
}

bool OAIUpdateServiceRequest::is_load_balancers_Set() const{
    return m_load_balancers_isSet;
}

bool OAIUpdateServiceRequest::is_load_balancers_Valid() const{
    return m_load_balancers_isValid;
}

OAIPropagateTags OAIUpdateServiceRequest::getPropagateTags() const {
    return m_propagate_tags;
}
void OAIUpdateServiceRequest::setPropagateTags(const OAIPropagateTags &propagate_tags) {
    m_propagate_tags = propagate_tags;
    m_propagate_tags_isSet = true;
}

bool OAIUpdateServiceRequest::is_propagate_tags_Set() const{
    return m_propagate_tags_isSet;
}

bool OAIUpdateServiceRequest::is_propagate_tags_Valid() const{
    return m_propagate_tags_isValid;
}

QList OAIUpdateServiceRequest::getServiceRegistries() const {
    return m_service_registries;
}
void OAIUpdateServiceRequest::setServiceRegistries(const QList &service_registries) {
    m_service_registries = service_registries;
    m_service_registries_isSet = true;
}

bool OAIUpdateServiceRequest::is_service_registries_Set() const{
    return m_service_registries_isSet;
}

bool OAIUpdateServiceRequest::is_service_registries_Valid() const{
    return m_service_registries_isValid;
}

OAICreateServiceRequest_serviceConnectConfiguration OAIUpdateServiceRequest::getServiceConnectConfiguration() const {
    return m_service_connect_configuration;
}
void OAIUpdateServiceRequest::setServiceConnectConfiguration(const OAICreateServiceRequest_serviceConnectConfiguration &service_connect_configuration) {
    m_service_connect_configuration = service_connect_configuration;
    m_service_connect_configuration_isSet = true;
}

bool OAIUpdateServiceRequest::is_service_connect_configuration_Set() const{
    return m_service_connect_configuration_isSet;
}

bool OAIUpdateServiceRequest::is_service_connect_configuration_Valid() const{
    return m_service_connect_configuration_isValid;
}

bool OAIUpdateServiceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_provider_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_new_deployment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_grace_period_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_execute_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ecs_managed_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_propagate_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_registries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_connect_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServiceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_isValid && true;
}

} // namespace OpenAPI
