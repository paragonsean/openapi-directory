/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAccountSettingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAccountSettingsRequest::OAIListAccountSettingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAccountSettingsRequest::OAIListAccountSettingsRequest() {
    this->initializeModel();
}

OAIListAccountSettingsRequest::~OAIListAccountSettingsRequest() {}

void OAIListAccountSettingsRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_principal_arn_isSet = false;
    m_principal_arn_isValid = false;

    m_effective_settings_isSet = false;
    m_effective_settings_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListAccountSettingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAccountSettingsRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_principal_arn_isValid = ::OpenAPI::fromJsonValue(m_principal_arn, json[QString("principalArn")]);
    m_principal_arn_isSet = !json[QString("principalArn")].isNull() && m_principal_arn_isValid;

    m_effective_settings_isValid = ::OpenAPI::fromJsonValue(m_effective_settings, json[QString("effectiveSettings")]);
    m_effective_settings_isSet = !json[QString("effectiveSettings")].isNull() && m_effective_settings_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIListAccountSettingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAccountSettingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_principal_arn_isSet) {
        obj.insert(QString("principalArn"), ::OpenAPI::toJsonValue(m_principal_arn));
    }
    if (m_effective_settings_isSet) {
        obj.insert(QString("effectiveSettings"), ::OpenAPI::toJsonValue(m_effective_settings));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

OAISettingName OAIListAccountSettingsRequest::getName() const {
    return m_name;
}
void OAIListAccountSettingsRequest::setName(const OAISettingName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIListAccountSettingsRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIListAccountSettingsRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIListAccountSettingsRequest::getValue() const {
    return m_value;
}
void OAIListAccountSettingsRequest::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIListAccountSettingsRequest::is_value_Set() const{
    return m_value_isSet;
}

bool OAIListAccountSettingsRequest::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIListAccountSettingsRequest::getPrincipalArn() const {
    return m_principal_arn;
}
void OAIListAccountSettingsRequest::setPrincipalArn(const QString &principal_arn) {
    m_principal_arn = principal_arn;
    m_principal_arn_isSet = true;
}

bool OAIListAccountSettingsRequest::is_principal_arn_Set() const{
    return m_principal_arn_isSet;
}

bool OAIListAccountSettingsRequest::is_principal_arn_Valid() const{
    return m_principal_arn_isValid;
}

bool OAIListAccountSettingsRequest::getEffectiveSettings() const {
    return m_effective_settings;
}
void OAIListAccountSettingsRequest::setEffectiveSettings(const bool &effective_settings) {
    m_effective_settings = effective_settings;
    m_effective_settings_isSet = true;
}

bool OAIListAccountSettingsRequest::is_effective_settings_Set() const{
    return m_effective_settings_isSet;
}

bool OAIListAccountSettingsRequest::is_effective_settings_Valid() const{
    return m_effective_settings_isValid;
}

QString OAIListAccountSettingsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListAccountSettingsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAccountSettingsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAccountSettingsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListAccountSettingsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListAccountSettingsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListAccountSettingsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListAccountSettingsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListAccountSettingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAccountSettingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
