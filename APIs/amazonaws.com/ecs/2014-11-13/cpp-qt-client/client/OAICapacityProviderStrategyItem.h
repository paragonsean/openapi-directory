/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICapacityProviderStrategyItem.h
 *
 * &lt;p&gt;The details of a capacity provider strategy. A capacity provider strategy can be set when using the &lt;a&gt;RunTask&lt;/a&gt; or &lt;a&gt;CreateCluster&lt;/a&gt; APIs or as the default capacity provider strategy for a cluster with the &lt;a&gt;CreateCluster&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;Only capacity providers that are already associated with a cluster and have an &lt;code&gt;ACTIVE&lt;/code&gt; or &lt;code&gt;UPDATING&lt;/code&gt; status can be used in a capacity provider strategy. The &lt;a&gt;PutClusterCapacityProviders&lt;/a&gt; API is used to associate a capacity provider with a cluster.&lt;/p&gt; &lt;p&gt;If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New Auto Scaling group capacity providers can be created with the &lt;a&gt;CreateCapacityProvider&lt;/a&gt; API operation.&lt;/p&gt; &lt;p&gt;To use a Fargate capacity provider, specify either the &lt;code&gt;FARGATE&lt;/code&gt; or &lt;code&gt;FARGATE_SPOT&lt;/code&gt; capacity providers. The Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used in a capacity provider strategy.&lt;/p&gt; &lt;p&gt;A capacity provider strategy may contain a maximum of 6 capacity providers.&lt;/p&gt;
 */

#ifndef OAICapacityProviderStrategyItem_H
#define OAICapacityProviderStrategyItem_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICapacityProviderStrategyItem : public OAIObject {
public:
    OAICapacityProviderStrategyItem();
    OAICapacityProviderStrategyItem(QString json);
    ~OAICapacityProviderStrategyItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCapacityProvider() const;
    void setCapacityProvider(const QString &capacity_provider);
    bool is_capacity_provider_Set() const;
    bool is_capacity_provider_Valid() const;

    qint32 getWeight() const;
    void setWeight(const qint32 &weight);
    bool is_weight_Set() const;
    bool is_weight_Valid() const;

    qint32 getBase() const;
    void setBase(const qint32 &base);
    bool is_base_Set() const;
    bool is_base_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_capacity_provider;
    bool m_capacity_provider_isSet;
    bool m_capacity_provider_isValid;

    qint32 m_weight;
    bool m_weight_isSet;
    bool m_weight_isValid;

    qint32 m_base;
    bool m_base_isSet;
    bool m_base_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICapacityProviderStrategyItem)

#endif // OAICapacityProviderStrategyItem_H
