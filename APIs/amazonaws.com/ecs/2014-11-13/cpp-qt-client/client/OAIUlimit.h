/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUlimit.h
 *
 * &lt;p&gt;The &lt;code&gt;ulimit&lt;/code&gt; settings to pass to the container.&lt;/p&gt; &lt;p&gt;Amazon ECS tasks hosted on Fargate use the default resource limit values set by the operating system with the exception of the &lt;code&gt;nofile&lt;/code&gt; resource limit parameter which Fargate overrides. The &lt;code&gt;nofile&lt;/code&gt; resource limit sets a restriction on the number of open files that a container can use. The default &lt;code&gt;nofile&lt;/code&gt; soft limit is &lt;code&gt;1024&lt;/code&gt; and the default hard limit is &lt;code&gt;4096&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can specify the &lt;code&gt;ulimit&lt;/code&gt; settings for a container in a task definition.&lt;/p&gt;
 */

#ifndef OAIUlimit_H
#define OAIUlimit_H

#include <QJsonObject>

#include "OAIUlimitName.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUlimit : public OAIObject {
public:
    OAIUlimit();
    OAIUlimit(QString json);
    ~OAIUlimit() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIUlimitName getName() const;
    void setName(const OAIUlimitName &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getSoftLimit() const;
    void setSoftLimit(const qint32 &soft_limit);
    bool is_soft_limit_Set() const;
    bool is_soft_limit_Valid() const;

    qint32 getHardLimit() const;
    void setHardLimit(const qint32 &hard_limit);
    bool is_hard_limit_Set() const;
    bool is_hard_limit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIUlimitName m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_soft_limit;
    bool m_soft_limit_isSet;
    bool m_soft_limit_isValid;

    qint32 m_hard_limit;
    bool m_hard_limit_isSet;
    bool m_hard_limit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUlimit)

#endif // OAIUlimit_H
