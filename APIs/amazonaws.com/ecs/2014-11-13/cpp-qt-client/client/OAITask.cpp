/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITask::OAITask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITask::OAITask() {
    this->initializeModel();
}

OAITask::~OAITask() {}

void OAITask::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_capacity_provider_name_isSet = false;
    m_capacity_provider_name_isValid = false;

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_connectivity_isSet = false;
    m_connectivity_isValid = false;

    m_connectivity_at_isSet = false;
    m_connectivity_at_isValid = false;

    m_container_instance_arn_isSet = false;
    m_container_instance_arn_isValid = false;

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_desired_status_isSet = false;
    m_desired_status_isValid = false;

    m_enable_execute_command_isSet = false;
    m_enable_execute_command_isValid = false;

    m_execution_stopped_at_isSet = false;
    m_execution_stopped_at_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_inference_accelerators_isSet = false;
    m_inference_accelerators_isValid = false;

    m_last_status_isSet = false;
    m_last_status_isValid = false;

    m_launch_type_isSet = false;
    m_launch_type_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_platform_family_isSet = false;
    m_platform_family_isValid = false;

    m_pull_started_at_isSet = false;
    m_pull_started_at_isValid = false;

    m_pull_stopped_at_isSet = false;
    m_pull_stopped_at_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_started_by_isSet = false;
    m_started_by_isValid = false;

    m_stop_code_isSet = false;
    m_stop_code_isValid = false;

    m_stopped_at_isSet = false;
    m_stopped_at_isValid = false;

    m_stopped_reason_isSet = false;
    m_stopped_reason_isValid = false;

    m_stopping_at_isSet = false;
    m_stopping_at_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_task_arn_isSet = false;
    m_task_arn_isValid = false;

    m_task_definition_arn_isSet = false;
    m_task_definition_arn_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_ephemeral_storage_isSet = false;
    m_ephemeral_storage_isValid = false;
}

void OAITask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITask::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("availabilityZone")]);
    m_availability_zone_isSet = !json[QString("availabilityZone")].isNull() && m_availability_zone_isValid;

    m_capacity_provider_name_isValid = ::OpenAPI::fromJsonValue(m_capacity_provider_name, json[QString("capacityProviderName")]);
    m_capacity_provider_name_isSet = !json[QString("capacityProviderName")].isNull() && m_capacity_provider_name_isValid;

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("clusterArn")]);
    m_cluster_arn_isSet = !json[QString("clusterArn")].isNull() && m_cluster_arn_isValid;

    m_connectivity_isValid = ::OpenAPI::fromJsonValue(m_connectivity, json[QString("connectivity")]);
    m_connectivity_isSet = !json[QString("connectivity")].isNull() && m_connectivity_isValid;

    m_connectivity_at_isValid = ::OpenAPI::fromJsonValue(m_connectivity_at, json[QString("connectivityAt")]);
    m_connectivity_at_isSet = !json[QString("connectivityAt")].isNull() && m_connectivity_at_isValid;

    m_container_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_container_instance_arn, json[QString("containerInstanceArn")]);
    m_container_instance_arn_isSet = !json[QString("containerInstanceArn")].isNull() && m_container_instance_arn_isValid;

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("containers")]);
    m_containers_isSet = !json[QString("containers")].isNull() && m_containers_isValid;

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("cpu")]);
    m_cpu_isSet = !json[QString("cpu")].isNull() && m_cpu_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_desired_status_isValid = ::OpenAPI::fromJsonValue(m_desired_status, json[QString("desiredStatus")]);
    m_desired_status_isSet = !json[QString("desiredStatus")].isNull() && m_desired_status_isValid;

    m_enable_execute_command_isValid = ::OpenAPI::fromJsonValue(m_enable_execute_command, json[QString("enableExecuteCommand")]);
    m_enable_execute_command_isSet = !json[QString("enableExecuteCommand")].isNull() && m_enable_execute_command_isValid;

    m_execution_stopped_at_isValid = ::OpenAPI::fromJsonValue(m_execution_stopped_at, json[QString("executionStoppedAt")]);
    m_execution_stopped_at_isSet = !json[QString("executionStoppedAt")].isNull() && m_execution_stopped_at_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;

    m_inference_accelerators_isValid = ::OpenAPI::fromJsonValue(m_inference_accelerators, json[QString("inferenceAccelerators")]);
    m_inference_accelerators_isSet = !json[QString("inferenceAccelerators")].isNull() && m_inference_accelerators_isValid;

    m_last_status_isValid = ::OpenAPI::fromJsonValue(m_last_status, json[QString("lastStatus")]);
    m_last_status_isSet = !json[QString("lastStatus")].isNull() && m_last_status_isValid;

    m_launch_type_isValid = ::OpenAPI::fromJsonValue(m_launch_type, json[QString("launchType")]);
    m_launch_type_isSet = !json[QString("launchType")].isNull() && m_launch_type_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("platformVersion")]);
    m_platform_version_isSet = !json[QString("platformVersion")].isNull() && m_platform_version_isValid;

    m_platform_family_isValid = ::OpenAPI::fromJsonValue(m_platform_family, json[QString("platformFamily")]);
    m_platform_family_isSet = !json[QString("platformFamily")].isNull() && m_platform_family_isValid;

    m_pull_started_at_isValid = ::OpenAPI::fromJsonValue(m_pull_started_at, json[QString("pullStartedAt")]);
    m_pull_started_at_isSet = !json[QString("pullStartedAt")].isNull() && m_pull_started_at_isValid;

    m_pull_stopped_at_isValid = ::OpenAPI::fromJsonValue(m_pull_stopped_at, json[QString("pullStoppedAt")]);
    m_pull_stopped_at_isSet = !json[QString("pullStoppedAt")].isNull() && m_pull_stopped_at_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_started_by_isValid = ::OpenAPI::fromJsonValue(m_started_by, json[QString("startedBy")]);
    m_started_by_isSet = !json[QString("startedBy")].isNull() && m_started_by_isValid;

    m_stop_code_isValid = ::OpenAPI::fromJsonValue(m_stop_code, json[QString("stopCode")]);
    m_stop_code_isSet = !json[QString("stopCode")].isNull() && m_stop_code_isValid;

    m_stopped_at_isValid = ::OpenAPI::fromJsonValue(m_stopped_at, json[QString("stoppedAt")]);
    m_stopped_at_isSet = !json[QString("stoppedAt")].isNull() && m_stopped_at_isValid;

    m_stopped_reason_isValid = ::OpenAPI::fromJsonValue(m_stopped_reason, json[QString("stoppedReason")]);
    m_stopped_reason_isSet = !json[QString("stoppedReason")].isNull() && m_stopped_reason_isValid;

    m_stopping_at_isValid = ::OpenAPI::fromJsonValue(m_stopping_at, json[QString("stoppingAt")]);
    m_stopping_at_isSet = !json[QString("stoppingAt")].isNull() && m_stopping_at_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_task_arn_isValid = ::OpenAPI::fromJsonValue(m_task_arn, json[QString("taskArn")]);
    m_task_arn_isSet = !json[QString("taskArn")].isNull() && m_task_arn_isValid;

    m_task_definition_arn_isValid = ::OpenAPI::fromJsonValue(m_task_definition_arn, json[QString("taskDefinitionArn")]);
    m_task_definition_arn_isSet = !json[QString("taskDefinitionArn")].isNull() && m_task_definition_arn_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_ephemeral_storage_isValid = ::OpenAPI::fromJsonValue(m_ephemeral_storage, json[QString("ephemeralStorage")]);
    m_ephemeral_storage_isSet = !json[QString("ephemeralStorage")].isNull() && m_ephemeral_storage_isValid;
}

QString OAITask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITask::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.isSet()) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("availabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_capacity_provider_name_isSet) {
        obj.insert(QString("capacityProviderName"), ::OpenAPI::toJsonValue(m_capacity_provider_name));
    }
    if (m_cluster_arn_isSet) {
        obj.insert(QString("clusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_connectivity.isSet()) {
        obj.insert(QString("connectivity"), ::OpenAPI::toJsonValue(m_connectivity));
    }
    if (m_connectivity_at_isSet) {
        obj.insert(QString("connectivityAt"), ::OpenAPI::toJsonValue(m_connectivity_at));
    }
    if (m_container_instance_arn_isSet) {
        obj.insert(QString("containerInstanceArn"), ::OpenAPI::toJsonValue(m_container_instance_arn));
    }
    if (m_containers.isSet()) {
        obj.insert(QString("containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_cpu_isSet) {
        obj.insert(QString("cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_desired_status_isSet) {
        obj.insert(QString("desiredStatus"), ::OpenAPI::toJsonValue(m_desired_status));
    }
    if (m_enable_execute_command_isSet) {
        obj.insert(QString("enableExecuteCommand"), ::OpenAPI::toJsonValue(m_enable_execute_command));
    }
    if (m_execution_stopped_at_isSet) {
        obj.insert(QString("executionStoppedAt"), ::OpenAPI::toJsonValue(m_execution_stopped_at));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_health_status.isSet()) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_inference_accelerators.isSet()) {
        obj.insert(QString("inferenceAccelerators"), ::OpenAPI::toJsonValue(m_inference_accelerators));
    }
    if (m_last_status_isSet) {
        obj.insert(QString("lastStatus"), ::OpenAPI::toJsonValue(m_last_status));
    }
    if (m_launch_type.isSet()) {
        obj.insert(QString("launchType"), ::OpenAPI::toJsonValue(m_launch_type));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_overrides.isSet()) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("platformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_platform_family_isSet) {
        obj.insert(QString("platformFamily"), ::OpenAPI::toJsonValue(m_platform_family));
    }
    if (m_pull_started_at_isSet) {
        obj.insert(QString("pullStartedAt"), ::OpenAPI::toJsonValue(m_pull_started_at));
    }
    if (m_pull_stopped_at_isSet) {
        obj.insert(QString("pullStoppedAt"), ::OpenAPI::toJsonValue(m_pull_stopped_at));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_started_by_isSet) {
        obj.insert(QString("startedBy"), ::OpenAPI::toJsonValue(m_started_by));
    }
    if (m_stop_code.isSet()) {
        obj.insert(QString("stopCode"), ::OpenAPI::toJsonValue(m_stop_code));
    }
    if (m_stopped_at_isSet) {
        obj.insert(QString("stoppedAt"), ::OpenAPI::toJsonValue(m_stopped_at));
    }
    if (m_stopped_reason_isSet) {
        obj.insert(QString("stoppedReason"), ::OpenAPI::toJsonValue(m_stopped_reason));
    }
    if (m_stopping_at_isSet) {
        obj.insert(QString("stoppingAt"), ::OpenAPI::toJsonValue(m_stopping_at));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_task_arn_isSet) {
        obj.insert(QString("taskArn"), ::OpenAPI::toJsonValue(m_task_arn));
    }
    if (m_task_definition_arn_isSet) {
        obj.insert(QString("taskDefinitionArn"), ::OpenAPI::toJsonValue(m_task_definition_arn));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_ephemeral_storage.isSet()) {
        obj.insert(QString("ephemeralStorage"), ::OpenAPI::toJsonValue(m_ephemeral_storage));
    }
    return obj;
}

QList OAITask::getAttachments() const {
    return m_attachments;
}
void OAITask::setAttachments(const QList &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAITask::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAITask::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QList OAITask::getAttributes() const {
    return m_attributes;
}
void OAITask::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAITask::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAITask::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAITask::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAITask::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAITask::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAITask::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAITask::getCapacityProviderName() const {
    return m_capacity_provider_name;
}
void OAITask::setCapacityProviderName(const QString &capacity_provider_name) {
    m_capacity_provider_name = capacity_provider_name;
    m_capacity_provider_name_isSet = true;
}

bool OAITask::is_capacity_provider_name_Set() const{
    return m_capacity_provider_name_isSet;
}

bool OAITask::is_capacity_provider_name_Valid() const{
    return m_capacity_provider_name_isValid;
}

QString OAITask::getClusterArn() const {
    return m_cluster_arn;
}
void OAITask::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAITask::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAITask::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

OAIConnectivity OAITask::getConnectivity() const {
    return m_connectivity;
}
void OAITask::setConnectivity(const OAIConnectivity &connectivity) {
    m_connectivity = connectivity;
    m_connectivity_isSet = true;
}

bool OAITask::is_connectivity_Set() const{
    return m_connectivity_isSet;
}

bool OAITask::is_connectivity_Valid() const{
    return m_connectivity_isValid;
}

QDateTime OAITask::getConnectivityAt() const {
    return m_connectivity_at;
}
void OAITask::setConnectivityAt(const QDateTime &connectivity_at) {
    m_connectivity_at = connectivity_at;
    m_connectivity_at_isSet = true;
}

bool OAITask::is_connectivity_at_Set() const{
    return m_connectivity_at_isSet;
}

bool OAITask::is_connectivity_at_Valid() const{
    return m_connectivity_at_isValid;
}

QString OAITask::getContainerInstanceArn() const {
    return m_container_instance_arn;
}
void OAITask::setContainerInstanceArn(const QString &container_instance_arn) {
    m_container_instance_arn = container_instance_arn;
    m_container_instance_arn_isSet = true;
}

bool OAITask::is_container_instance_arn_Set() const{
    return m_container_instance_arn_isSet;
}

bool OAITask::is_container_instance_arn_Valid() const{
    return m_container_instance_arn_isValid;
}

QList OAITask::getContainers() const {
    return m_containers;
}
void OAITask::setContainers(const QList &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAITask::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAITask::is_containers_Valid() const{
    return m_containers_isValid;
}

QString OAITask::getCpu() const {
    return m_cpu;
}
void OAITask::setCpu(const QString &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAITask::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAITask::is_cpu_Valid() const{
    return m_cpu_isValid;
}

QDateTime OAITask::getCreatedAt() const {
    return m_created_at;
}
void OAITask::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITask::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITask::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITask::getDesiredStatus() const {
    return m_desired_status;
}
void OAITask::setDesiredStatus(const QString &desired_status) {
    m_desired_status = desired_status;
    m_desired_status_isSet = true;
}

bool OAITask::is_desired_status_Set() const{
    return m_desired_status_isSet;
}

bool OAITask::is_desired_status_Valid() const{
    return m_desired_status_isValid;
}

bool OAITask::getEnableExecuteCommand() const {
    return m_enable_execute_command;
}
void OAITask::setEnableExecuteCommand(const bool &enable_execute_command) {
    m_enable_execute_command = enable_execute_command;
    m_enable_execute_command_isSet = true;
}

bool OAITask::is_enable_execute_command_Set() const{
    return m_enable_execute_command_isSet;
}

bool OAITask::is_enable_execute_command_Valid() const{
    return m_enable_execute_command_isValid;
}

QDateTime OAITask::getExecutionStoppedAt() const {
    return m_execution_stopped_at;
}
void OAITask::setExecutionStoppedAt(const QDateTime &execution_stopped_at) {
    m_execution_stopped_at = execution_stopped_at;
    m_execution_stopped_at_isSet = true;
}

bool OAITask::is_execution_stopped_at_Set() const{
    return m_execution_stopped_at_isSet;
}

bool OAITask::is_execution_stopped_at_Valid() const{
    return m_execution_stopped_at_isValid;
}

QString OAITask::getGroup() const {
    return m_group;
}
void OAITask::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAITask::is_group_Set() const{
    return m_group_isSet;
}

bool OAITask::is_group_Valid() const{
    return m_group_isValid;
}

OAIHealthStatus OAITask::getHealthStatus() const {
    return m_health_status;
}
void OAITask::setHealthStatus(const OAIHealthStatus &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAITask::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAITask::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QList OAITask::getInferenceAccelerators() const {
    return m_inference_accelerators;
}
void OAITask::setInferenceAccelerators(const QList &inference_accelerators) {
    m_inference_accelerators = inference_accelerators;
    m_inference_accelerators_isSet = true;
}

bool OAITask::is_inference_accelerators_Set() const{
    return m_inference_accelerators_isSet;
}

bool OAITask::is_inference_accelerators_Valid() const{
    return m_inference_accelerators_isValid;
}

QString OAITask::getLastStatus() const {
    return m_last_status;
}
void OAITask::setLastStatus(const QString &last_status) {
    m_last_status = last_status;
    m_last_status_isSet = true;
}

bool OAITask::is_last_status_Set() const{
    return m_last_status_isSet;
}

bool OAITask::is_last_status_Valid() const{
    return m_last_status_isValid;
}

OAILaunchType OAITask::getLaunchType() const {
    return m_launch_type;
}
void OAITask::setLaunchType(const OAILaunchType &launch_type) {
    m_launch_type = launch_type;
    m_launch_type_isSet = true;
}

bool OAITask::is_launch_type_Set() const{
    return m_launch_type_isSet;
}

bool OAITask::is_launch_type_Valid() const{
    return m_launch_type_isValid;
}

QString OAITask::getMemory() const {
    return m_memory;
}
void OAITask::setMemory(const QString &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAITask::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAITask::is_memory_Valid() const{
    return m_memory_isValid;
}

OAITask_overrides OAITask::getOverrides() const {
    return m_overrides;
}
void OAITask::setOverrides(const OAITask_overrides &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAITask::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAITask::is_overrides_Valid() const{
    return m_overrides_isValid;
}

QString OAITask::getPlatformVersion() const {
    return m_platform_version;
}
void OAITask::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAITask::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAITask::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

QString OAITask::getPlatformFamily() const {
    return m_platform_family;
}
void OAITask::setPlatformFamily(const QString &platform_family) {
    m_platform_family = platform_family;
    m_platform_family_isSet = true;
}

bool OAITask::is_platform_family_Set() const{
    return m_platform_family_isSet;
}

bool OAITask::is_platform_family_Valid() const{
    return m_platform_family_isValid;
}

QDateTime OAITask::getPullStartedAt() const {
    return m_pull_started_at;
}
void OAITask::setPullStartedAt(const QDateTime &pull_started_at) {
    m_pull_started_at = pull_started_at;
    m_pull_started_at_isSet = true;
}

bool OAITask::is_pull_started_at_Set() const{
    return m_pull_started_at_isSet;
}

bool OAITask::is_pull_started_at_Valid() const{
    return m_pull_started_at_isValid;
}

QDateTime OAITask::getPullStoppedAt() const {
    return m_pull_stopped_at;
}
void OAITask::setPullStoppedAt(const QDateTime &pull_stopped_at) {
    m_pull_stopped_at = pull_stopped_at;
    m_pull_stopped_at_isSet = true;
}

bool OAITask::is_pull_stopped_at_Set() const{
    return m_pull_stopped_at_isSet;
}

bool OAITask::is_pull_stopped_at_Valid() const{
    return m_pull_stopped_at_isValid;
}

QDateTime OAITask::getStartedAt() const {
    return m_started_at;
}
void OAITask::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAITask::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAITask::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAITask::getStartedBy() const {
    return m_started_by;
}
void OAITask::setStartedBy(const QString &started_by) {
    m_started_by = started_by;
    m_started_by_isSet = true;
}

bool OAITask::is_started_by_Set() const{
    return m_started_by_isSet;
}

bool OAITask::is_started_by_Valid() const{
    return m_started_by_isValid;
}

OAITaskStopCode OAITask::getStopCode() const {
    return m_stop_code;
}
void OAITask::setStopCode(const OAITaskStopCode &stop_code) {
    m_stop_code = stop_code;
    m_stop_code_isSet = true;
}

bool OAITask::is_stop_code_Set() const{
    return m_stop_code_isSet;
}

bool OAITask::is_stop_code_Valid() const{
    return m_stop_code_isValid;
}

QDateTime OAITask::getStoppedAt() const {
    return m_stopped_at;
}
void OAITask::setStoppedAt(const QDateTime &stopped_at) {
    m_stopped_at = stopped_at;
    m_stopped_at_isSet = true;
}

bool OAITask::is_stopped_at_Set() const{
    return m_stopped_at_isSet;
}

bool OAITask::is_stopped_at_Valid() const{
    return m_stopped_at_isValid;
}

QString OAITask::getStoppedReason() const {
    return m_stopped_reason;
}
void OAITask::setStoppedReason(const QString &stopped_reason) {
    m_stopped_reason = stopped_reason;
    m_stopped_reason_isSet = true;
}

bool OAITask::is_stopped_reason_Set() const{
    return m_stopped_reason_isSet;
}

bool OAITask::is_stopped_reason_Valid() const{
    return m_stopped_reason_isValid;
}

QDateTime OAITask::getStoppingAt() const {
    return m_stopping_at;
}
void OAITask::setStoppingAt(const QDateTime &stopping_at) {
    m_stopping_at = stopping_at;
    m_stopping_at_isSet = true;
}

bool OAITask::is_stopping_at_Set() const{
    return m_stopping_at_isSet;
}

bool OAITask::is_stopping_at_Valid() const{
    return m_stopping_at_isValid;
}

QList OAITask::getTags() const {
    return m_tags;
}
void OAITask::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITask::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITask::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAITask::getTaskArn() const {
    return m_task_arn;
}
void OAITask::setTaskArn(const QString &task_arn) {
    m_task_arn = task_arn;
    m_task_arn_isSet = true;
}

bool OAITask::is_task_arn_Set() const{
    return m_task_arn_isSet;
}

bool OAITask::is_task_arn_Valid() const{
    return m_task_arn_isValid;
}

QString OAITask::getTaskDefinitionArn() const {
    return m_task_definition_arn;
}
void OAITask::setTaskDefinitionArn(const QString &task_definition_arn) {
    m_task_definition_arn = task_definition_arn;
    m_task_definition_arn_isSet = true;
}

bool OAITask::is_task_definition_arn_Set() const{
    return m_task_definition_arn_isSet;
}

bool OAITask::is_task_definition_arn_Valid() const{
    return m_task_definition_arn_isValid;
}

qint32 OAITask::getVersion() const {
    return m_version;
}
void OAITask::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAITask::is_version_Set() const{
    return m_version_isSet;
}

bool OAITask::is_version_Valid() const{
    return m_version_isValid;
}

OAITask_ephemeralStorage OAITask::getEphemeralStorage() const {
    return m_ephemeral_storage;
}
void OAITask::setEphemeralStorage(const OAITask_ephemeralStorage &ephemeral_storage) {
    m_ephemeral_storage = ephemeral_storage;
    m_ephemeral_storage_isSet = true;
}

bool OAITask::is_ephemeral_storage_Set() const{
    return m_ephemeral_storage_isSet;
}

bool OAITask::is_ephemeral_storage_Valid() const{
    return m_ephemeral_storage_isValid;
}

bool OAITask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectivity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectivity_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_containers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_execute_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_stopped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_accelerators.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_stopped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopping_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_definition_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ephemeral_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
