/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainer.h
 *
 * A Docker container that&#39;s part of a task.
 */

#ifndef OAIContainer_H
#define OAIContainer_H

#include <QJsonObject>

#include "OAIHealthStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIContainer : public OAIObject {
public:
    OAIContainer();
    OAIContainer(QString json);
    ~OAIContainer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContainerArn() const;
    void setContainerArn(const QString &container_arn);
    bool is_container_arn_Set() const;
    bool is_container_arn_Valid() const;

    QString getTaskArn() const;
    void setTaskArn(const QString &task_arn);
    bool is_task_arn_Set() const;
    bool is_task_arn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getImageDigest() const;
    void setImageDigest(const QString &image_digest);
    bool is_image_digest_Set() const;
    bool is_image_digest_Valid() const;

    QString getRuntimeId() const;
    void setRuntimeId(const QString &runtime_id);
    bool is_runtime_id_Set() const;
    bool is_runtime_id_Valid() const;

    QString getLastStatus() const;
    void setLastStatus(const QString &last_status);
    bool is_last_status_Set() const;
    bool is_last_status_Valid() const;

    qint32 getExitCode() const;
    void setExitCode(const qint32 &exit_code);
    bool is_exit_code_Set() const;
    bool is_exit_code_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    QList getNetworkBindings() const;
    void setNetworkBindings(const QList &network_bindings);
    bool is_network_bindings_Set() const;
    bool is_network_bindings_Valid() const;

    QList getNetworkInterfaces() const;
    void setNetworkInterfaces(const QList &network_interfaces);
    bool is_network_interfaces_Set() const;
    bool is_network_interfaces_Valid() const;

    OAIHealthStatus getHealthStatus() const;
    void setHealthStatus(const OAIHealthStatus &health_status);
    bool is_health_status_Set() const;
    bool is_health_status_Valid() const;

    QList getManagedAgents() const;
    void setManagedAgents(const QList &managed_agents);
    bool is_managed_agents_Set() const;
    bool is_managed_agents_Valid() const;

    QString getCpu() const;
    void setCpu(const QString &cpu);
    bool is_cpu_Set() const;
    bool is_cpu_Valid() const;

    QString getMemory() const;
    void setMemory(const QString &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    QString getMemoryReservation() const;
    void setMemoryReservation(const QString &memory_reservation);
    bool is_memory_reservation_Set() const;
    bool is_memory_reservation_Valid() const;

    QList getGpuIds() const;
    void setGpuIds(const QList &gpu_ids);
    bool is_gpu_ids_Set() const;
    bool is_gpu_ids_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_container_arn;
    bool m_container_arn_isSet;
    bool m_container_arn_isValid;

    QString m_task_arn;
    bool m_task_arn_isSet;
    bool m_task_arn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_image_digest;
    bool m_image_digest_isSet;
    bool m_image_digest_isValid;

    QString m_runtime_id;
    bool m_runtime_id_isSet;
    bool m_runtime_id_isValid;

    QString m_last_status;
    bool m_last_status_isSet;
    bool m_last_status_isValid;

    qint32 m_exit_code;
    bool m_exit_code_isSet;
    bool m_exit_code_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    QList m_network_bindings;
    bool m_network_bindings_isSet;
    bool m_network_bindings_isValid;

    QList m_network_interfaces;
    bool m_network_interfaces_isSet;
    bool m_network_interfaces_isValid;

    OAIHealthStatus m_health_status;
    bool m_health_status_isSet;
    bool m_health_status_isValid;

    QList m_managed_agents;
    bool m_managed_agents_isSet;
    bool m_managed_agents_isValid;

    QString m_cpu;
    bool m_cpu_isSet;
    bool m_cpu_isValid;

    QString m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    QString m_memory_reservation;
    bool m_memory_reservation_isSet;
    bool m_memory_reservation_isValid;

    QList m_gpu_ids;
    bool m_gpu_ids_isSet;
    bool m_gpu_ids_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainer)

#endif // OAIContainer_H
