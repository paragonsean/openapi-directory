/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunTaskRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunTaskRequest::OAIRunTaskRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunTaskRequest::OAIRunTaskRequest() {
    this->initializeModel();
}

OAIRunTaskRequest::~OAIRunTaskRequest() {}

void OAIRunTaskRequest::initializeModel() {

    m_capacity_provider_strategy_isSet = false;
    m_capacity_provider_strategy_isValid = false;

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_enable_ecs_managed_tags_isSet = false;
    m_enable_ecs_managed_tags_isValid = false;

    m_enable_execute_command_isSet = false;
    m_enable_execute_command_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_launch_type_isSet = false;
    m_launch_type_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_placement_strategy_isSet = false;
    m_placement_strategy_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_propagate_tags_isSet = false;
    m_propagate_tags_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_started_by_isSet = false;
    m_started_by_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_task_definition_isSet = false;
    m_task_definition_isValid = false;
}

void OAIRunTaskRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunTaskRequest::fromJsonObject(QJsonObject json) {

    m_capacity_provider_strategy_isValid = ::OpenAPI::fromJsonValue(m_capacity_provider_strategy, json[QString("capacityProviderStrategy")]);
    m_capacity_provider_strategy_isSet = !json[QString("capacityProviderStrategy")].isNull() && m_capacity_provider_strategy_isValid;

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_enable_ecs_managed_tags_isValid = ::OpenAPI::fromJsonValue(m_enable_ecs_managed_tags, json[QString("enableECSManagedTags")]);
    m_enable_ecs_managed_tags_isSet = !json[QString("enableECSManagedTags")].isNull() && m_enable_ecs_managed_tags_isValid;

    m_enable_execute_command_isValid = ::OpenAPI::fromJsonValue(m_enable_execute_command, json[QString("enableExecuteCommand")]);
    m_enable_execute_command_isSet = !json[QString("enableExecuteCommand")].isNull() && m_enable_execute_command_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_launch_type_isValid = ::OpenAPI::fromJsonValue(m_launch_type, json[QString("launchType")]);
    m_launch_type_isSet = !json[QString("launchType")].isNull() && m_launch_type_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("networkConfiguration")]);
    m_network_configuration_isSet = !json[QString("networkConfiguration")].isNull() && m_network_configuration_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("placementConstraints")]);
    m_placement_constraints_isSet = !json[QString("placementConstraints")].isNull() && m_placement_constraints_isValid;

    m_placement_strategy_isValid = ::OpenAPI::fromJsonValue(m_placement_strategy, json[QString("placementStrategy")]);
    m_placement_strategy_isSet = !json[QString("placementStrategy")].isNull() && m_placement_strategy_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("platformVersion")]);
    m_platform_version_isSet = !json[QString("platformVersion")].isNull() && m_platform_version_isValid;

    m_propagate_tags_isValid = ::OpenAPI::fromJsonValue(m_propagate_tags, json[QString("propagateTags")]);
    m_propagate_tags_isSet = !json[QString("propagateTags")].isNull() && m_propagate_tags_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_started_by_isValid = ::OpenAPI::fromJsonValue(m_started_by, json[QString("startedBy")]);
    m_started_by_isSet = !json[QString("startedBy")].isNull() && m_started_by_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_task_definition_isValid = ::OpenAPI::fromJsonValue(m_task_definition, json[QString("taskDefinition")]);
    m_task_definition_isSet = !json[QString("taskDefinition")].isNull() && m_task_definition_isValid;
}

QString OAIRunTaskRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunTaskRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_provider_strategy.isSet()) {
        obj.insert(QString("capacityProviderStrategy"), ::OpenAPI::toJsonValue(m_capacity_provider_strategy));
    }
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_enable_ecs_managed_tags_isSet) {
        obj.insert(QString("enableECSManagedTags"), ::OpenAPI::toJsonValue(m_enable_ecs_managed_tags));
    }
    if (m_enable_execute_command_isSet) {
        obj.insert(QString("enableExecuteCommand"), ::OpenAPI::toJsonValue(m_enable_execute_command));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_launch_type.isSet()) {
        obj.insert(QString("launchType"), ::OpenAPI::toJsonValue(m_launch_type));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("networkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_overrides.isSet()) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_placement_constraints.isSet()) {
        obj.insert(QString("placementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_placement_strategy.isSet()) {
        obj.insert(QString("placementStrategy"), ::OpenAPI::toJsonValue(m_placement_strategy));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("platformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_propagate_tags.isSet()) {
        obj.insert(QString("propagateTags"), ::OpenAPI::toJsonValue(m_propagate_tags));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_started_by_isSet) {
        obj.insert(QString("startedBy"), ::OpenAPI::toJsonValue(m_started_by));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_task_definition_isSet) {
        obj.insert(QString("taskDefinition"), ::OpenAPI::toJsonValue(m_task_definition));
    }
    return obj;
}

QList OAIRunTaskRequest::getCapacityProviderStrategy() const {
    return m_capacity_provider_strategy;
}
void OAIRunTaskRequest::setCapacityProviderStrategy(const QList &capacity_provider_strategy) {
    m_capacity_provider_strategy = capacity_provider_strategy;
    m_capacity_provider_strategy_isSet = true;
}

bool OAIRunTaskRequest::is_capacity_provider_strategy_Set() const{
    return m_capacity_provider_strategy_isSet;
}

bool OAIRunTaskRequest::is_capacity_provider_strategy_Valid() const{
    return m_capacity_provider_strategy_isValid;
}

QString OAIRunTaskRequest::getCluster() const {
    return m_cluster;
}
void OAIRunTaskRequest::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIRunTaskRequest::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIRunTaskRequest::is_cluster_Valid() const{
    return m_cluster_isValid;
}

qint32 OAIRunTaskRequest::getCount() const {
    return m_count;
}
void OAIRunTaskRequest::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIRunTaskRequest::is_count_Set() const{
    return m_count_isSet;
}

bool OAIRunTaskRequest::is_count_Valid() const{
    return m_count_isValid;
}

bool OAIRunTaskRequest::getEnableEcsManagedTags() const {
    return m_enable_ecs_managed_tags;
}
void OAIRunTaskRequest::setEnableEcsManagedTags(const bool &enable_ecs_managed_tags) {
    m_enable_ecs_managed_tags = enable_ecs_managed_tags;
    m_enable_ecs_managed_tags_isSet = true;
}

bool OAIRunTaskRequest::is_enable_ecs_managed_tags_Set() const{
    return m_enable_ecs_managed_tags_isSet;
}

bool OAIRunTaskRequest::is_enable_ecs_managed_tags_Valid() const{
    return m_enable_ecs_managed_tags_isValid;
}

bool OAIRunTaskRequest::getEnableExecuteCommand() const {
    return m_enable_execute_command;
}
void OAIRunTaskRequest::setEnableExecuteCommand(const bool &enable_execute_command) {
    m_enable_execute_command = enable_execute_command;
    m_enable_execute_command_isSet = true;
}

bool OAIRunTaskRequest::is_enable_execute_command_Set() const{
    return m_enable_execute_command_isSet;
}

bool OAIRunTaskRequest::is_enable_execute_command_Valid() const{
    return m_enable_execute_command_isValid;
}

QString OAIRunTaskRequest::getGroup() const {
    return m_group;
}
void OAIRunTaskRequest::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIRunTaskRequest::is_group_Set() const{
    return m_group_isSet;
}

bool OAIRunTaskRequest::is_group_Valid() const{
    return m_group_isValid;
}

OAILaunchType OAIRunTaskRequest::getLaunchType() const {
    return m_launch_type;
}
void OAIRunTaskRequest::setLaunchType(const OAILaunchType &launch_type) {
    m_launch_type = launch_type;
    m_launch_type_isSet = true;
}

bool OAIRunTaskRequest::is_launch_type_Set() const{
    return m_launch_type_isSet;
}

bool OAIRunTaskRequest::is_launch_type_Valid() const{
    return m_launch_type_isValid;
}

OAIRunTaskRequest_networkConfiguration OAIRunTaskRequest::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIRunTaskRequest::setNetworkConfiguration(const OAIRunTaskRequest_networkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIRunTaskRequest::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIRunTaskRequest::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

OAIRunTaskRequest_overrides OAIRunTaskRequest::getOverrides() const {
    return m_overrides;
}
void OAIRunTaskRequest::setOverrides(const OAIRunTaskRequest_overrides &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAIRunTaskRequest::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAIRunTaskRequest::is_overrides_Valid() const{
    return m_overrides_isValid;
}

QList OAIRunTaskRequest::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAIRunTaskRequest::setPlacementConstraints(const QList &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAIRunTaskRequest::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAIRunTaskRequest::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList OAIRunTaskRequest::getPlacementStrategy() const {
    return m_placement_strategy;
}
void OAIRunTaskRequest::setPlacementStrategy(const QList &placement_strategy) {
    m_placement_strategy = placement_strategy;
    m_placement_strategy_isSet = true;
}

bool OAIRunTaskRequest::is_placement_strategy_Set() const{
    return m_placement_strategy_isSet;
}

bool OAIRunTaskRequest::is_placement_strategy_Valid() const{
    return m_placement_strategy_isValid;
}

QString OAIRunTaskRequest::getPlatformVersion() const {
    return m_platform_version;
}
void OAIRunTaskRequest::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAIRunTaskRequest::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAIRunTaskRequest::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

OAIPropagateTags OAIRunTaskRequest::getPropagateTags() const {
    return m_propagate_tags;
}
void OAIRunTaskRequest::setPropagateTags(const OAIPropagateTags &propagate_tags) {
    m_propagate_tags = propagate_tags;
    m_propagate_tags_isSet = true;
}

bool OAIRunTaskRequest::is_propagate_tags_Set() const{
    return m_propagate_tags_isSet;
}

bool OAIRunTaskRequest::is_propagate_tags_Valid() const{
    return m_propagate_tags_isValid;
}

QString OAIRunTaskRequest::getReferenceId() const {
    return m_reference_id;
}
void OAIRunTaskRequest::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIRunTaskRequest::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIRunTaskRequest::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QString OAIRunTaskRequest::getStartedBy() const {
    return m_started_by;
}
void OAIRunTaskRequest::setStartedBy(const QString &started_by) {
    m_started_by = started_by;
    m_started_by_isSet = true;
}

bool OAIRunTaskRequest::is_started_by_Set() const{
    return m_started_by_isSet;
}

bool OAIRunTaskRequest::is_started_by_Valid() const{
    return m_started_by_isValid;
}

QList OAIRunTaskRequest::getTags() const {
    return m_tags;
}
void OAIRunTaskRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRunTaskRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRunTaskRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIRunTaskRequest::getTaskDefinition() const {
    return m_task_definition;
}
void OAIRunTaskRequest::setTaskDefinition(const QString &task_definition) {
    m_task_definition = task_definition;
    m_task_definition_isSet = true;
}

bool OAIRunTaskRequest::is_task_definition_Set() const{
    return m_task_definition_isSet;
}

bool OAIRunTaskRequest::is_task_definition_Valid() const{
    return m_task_definition_isValid;
}

bool OAIRunTaskRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_provider_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ecs_managed_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_execute_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_propagate_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_definition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunTaskRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_task_definition_isValid && true;
}

} // namespace OpenAPI
