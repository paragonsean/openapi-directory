/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecuteCommandResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecuteCommandResponse::OAIExecuteCommandResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecuteCommandResponse::OAIExecuteCommandResponse() {
    this->initializeModel();
}

OAIExecuteCommandResponse::~OAIExecuteCommandResponse() {}

void OAIExecuteCommandResponse::initializeModel() {

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_container_arn_isSet = false;
    m_container_arn_isValid = false;

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_interactive_isSet = false;
    m_interactive_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;

    m_task_arn_isSet = false;
    m_task_arn_isValid = false;
}

void OAIExecuteCommandResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecuteCommandResponse::fromJsonObject(QJsonObject json) {

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("clusterArn")]);
    m_cluster_arn_isSet = !json[QString("clusterArn")].isNull() && m_cluster_arn_isValid;

    m_container_arn_isValid = ::OpenAPI::fromJsonValue(m_container_arn, json[QString("containerArn")]);
    m_container_arn_isSet = !json[QString("containerArn")].isNull() && m_container_arn_isValid;

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_interactive_isValid = ::OpenAPI::fromJsonValue(m_interactive, json[QString("interactive")]);
    m_interactive_isSet = !json[QString("interactive")].isNull() && m_interactive_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;

    m_task_arn_isValid = ::OpenAPI::fromJsonValue(m_task_arn, json[QString("taskArn")]);
    m_task_arn_isSet = !json[QString("taskArn")].isNull() && m_task_arn_isValid;
}

QString OAIExecuteCommandResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecuteCommandResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_arn_isSet) {
        obj.insert(QString("clusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_container_arn_isSet) {
        obj.insert(QString("containerArn"), ::OpenAPI::toJsonValue(m_container_arn));
    }
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_interactive_isSet) {
        obj.insert(QString("interactive"), ::OpenAPI::toJsonValue(m_interactive));
    }
    if (m_session.isSet()) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_task_arn_isSet) {
        obj.insert(QString("taskArn"), ::OpenAPI::toJsonValue(m_task_arn));
    }
    return obj;
}

QString OAIExecuteCommandResponse::getClusterArn() const {
    return m_cluster_arn;
}
void OAIExecuteCommandResponse::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAIExecuteCommandResponse::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAIExecuteCommandResponse::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

QString OAIExecuteCommandResponse::getContainerArn() const {
    return m_container_arn;
}
void OAIExecuteCommandResponse::setContainerArn(const QString &container_arn) {
    m_container_arn = container_arn;
    m_container_arn_isSet = true;
}

bool OAIExecuteCommandResponse::is_container_arn_Set() const{
    return m_container_arn_isSet;
}

bool OAIExecuteCommandResponse::is_container_arn_Valid() const{
    return m_container_arn_isValid;
}

QString OAIExecuteCommandResponse::getContainerName() const {
    return m_container_name;
}
void OAIExecuteCommandResponse::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAIExecuteCommandResponse::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAIExecuteCommandResponse::is_container_name_Valid() const{
    return m_container_name_isValid;
}

bool OAIExecuteCommandResponse::getInteractive() const {
    return m_interactive;
}
void OAIExecuteCommandResponse::setInteractive(const bool &interactive) {
    m_interactive = interactive;
    m_interactive_isSet = true;
}

bool OAIExecuteCommandResponse::is_interactive_Set() const{
    return m_interactive_isSet;
}

bool OAIExecuteCommandResponse::is_interactive_Valid() const{
    return m_interactive_isValid;
}

OAIExecuteCommandResponse_session OAIExecuteCommandResponse::getSession() const {
    return m_session;
}
void OAIExecuteCommandResponse::setSession(const OAIExecuteCommandResponse_session &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIExecuteCommandResponse::is_session_Set() const{
    return m_session_isSet;
}

bool OAIExecuteCommandResponse::is_session_Valid() const{
    return m_session_isValid;
}

QString OAIExecuteCommandResponse::getTaskArn() const {
    return m_task_arn;
}
void OAIExecuteCommandResponse::setTaskArn(const QString &task_arn) {
    m_task_arn = task_arn;
    m_task_arn_isSet = true;
}

bool OAIExecuteCommandResponse::is_task_arn_Set() const{
    return m_task_arn_isSet;
}

bool OAIExecuteCommandResponse::is_task_arn_Valid() const{
    return m_task_arn_isValid;
}

bool OAIExecuteCommandResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecuteCommandResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
