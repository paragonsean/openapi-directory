/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateServicePrimaryTaskSetResponse_taskSet.h
 *
 * 
 */

#ifndef OAIUpdateServicePrimaryTaskSetResponse_taskSet_H
#define OAIUpdateServicePrimaryTaskSetResponse_taskSet_H

#include <QJsonObject>

#include "OAILaunchType.h"
#include "OAIStabilityStatus.h"
#include "OAITaskSet_networkConfiguration.h"
#include "OAITaskSet_scale.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITaskSet_networkConfiguration;
class OAITaskSet_scale;

class OAIUpdateServicePrimaryTaskSetResponse_taskSet : public OAIObject {
public:
    OAIUpdateServicePrimaryTaskSetResponse_taskSet();
    OAIUpdateServicePrimaryTaskSetResponse_taskSet(QString json);
    ~OAIUpdateServicePrimaryTaskSetResponse_taskSet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getTaskSetArn() const;
    void setTaskSetArn(const QString &task_set_arn);
    bool is_task_set_arn_Set() const;
    bool is_task_set_arn_Valid() const;

    QString getServiceArn() const;
    void setServiceArn(const QString &service_arn);
    bool is_service_arn_Set() const;
    bool is_service_arn_Valid() const;

    QString getClusterArn() const;
    void setClusterArn(const QString &cluster_arn);
    bool is_cluster_arn_Set() const;
    bool is_cluster_arn_Valid() const;

    QString getStartedBy() const;
    void setStartedBy(const QString &started_by);
    bool is_started_by_Set() const;
    bool is_started_by_Valid() const;

    QString getExternalId() const;
    void setExternalId(const QString &external_id);
    bool is_external_id_Set() const;
    bool is_external_id_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTaskDefinition() const;
    void setTaskDefinition(const QString &task_definition);
    bool is_task_definition_Set() const;
    bool is_task_definition_Valid() const;

    qint32 getComputedDesiredCount() const;
    void setComputedDesiredCount(const qint32 &computed_desired_count);
    bool is_computed_desired_count_Set() const;
    bool is_computed_desired_count_Valid() const;

    qint32 getPendingCount() const;
    void setPendingCount(const qint32 &pending_count);
    bool is_pending_count_Set() const;
    bool is_pending_count_Valid() const;

    qint32 getRunningCount() const;
    void setRunningCount(const qint32 &running_count);
    bool is_running_count_Set() const;
    bool is_running_count_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    OAILaunchType getLaunchType() const;
    void setLaunchType(const OAILaunchType &launch_type);
    bool is_launch_type_Set() const;
    bool is_launch_type_Valid() const;

    QList getCapacityProviderStrategy() const;
    void setCapacityProviderStrategy(const QList &capacity_provider_strategy);
    bool is_capacity_provider_strategy_Set() const;
    bool is_capacity_provider_strategy_Valid() const;

    QString getPlatformVersion() const;
    void setPlatformVersion(const QString &platform_version);
    bool is_platform_version_Set() const;
    bool is_platform_version_Valid() const;

    QString getPlatformFamily() const;
    void setPlatformFamily(const QString &platform_family);
    bool is_platform_family_Set() const;
    bool is_platform_family_Valid() const;

    OAITaskSet_networkConfiguration getNetworkConfiguration() const;
    void setNetworkConfiguration(const OAITaskSet_networkConfiguration &network_configuration);
    bool is_network_configuration_Set() const;
    bool is_network_configuration_Valid() const;

    QList getLoadBalancers() const;
    void setLoadBalancers(const QList &load_balancers);
    bool is_load_balancers_Set() const;
    bool is_load_balancers_Valid() const;

    QList getServiceRegistries() const;
    void setServiceRegistries(const QList &service_registries);
    bool is_service_registries_Set() const;
    bool is_service_registries_Valid() const;

    OAITaskSet_scale getScale() const;
    void setScale(const OAITaskSet_scale &scale);
    bool is_scale_Set() const;
    bool is_scale_Valid() const;

    OAIStabilityStatus getStabilityStatus() const;
    void setStabilityStatus(const OAIStabilityStatus &stability_status);
    bool is_stability_status_Set() const;
    bool is_stability_status_Valid() const;

    QDateTime getStabilityStatusAt() const;
    void setStabilityStatusAt(const QDateTime &stability_status_at);
    bool is_stability_status_at_Set() const;
    bool is_stability_status_at_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_task_set_arn;
    bool m_task_set_arn_isSet;
    bool m_task_set_arn_isValid;

    QString m_service_arn;
    bool m_service_arn_isSet;
    bool m_service_arn_isValid;

    QString m_cluster_arn;
    bool m_cluster_arn_isSet;
    bool m_cluster_arn_isValid;

    QString m_started_by;
    bool m_started_by_isSet;
    bool m_started_by_isValid;

    QString m_external_id;
    bool m_external_id_isSet;
    bool m_external_id_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_task_definition;
    bool m_task_definition_isSet;
    bool m_task_definition_isValid;

    qint32 m_computed_desired_count;
    bool m_computed_desired_count_isSet;
    bool m_computed_desired_count_isValid;

    qint32 m_pending_count;
    bool m_pending_count_isSet;
    bool m_pending_count_isValid;

    qint32 m_running_count;
    bool m_running_count_isSet;
    bool m_running_count_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    OAILaunchType m_launch_type;
    bool m_launch_type_isSet;
    bool m_launch_type_isValid;

    QList m_capacity_provider_strategy;
    bool m_capacity_provider_strategy_isSet;
    bool m_capacity_provider_strategy_isValid;

    QString m_platform_version;
    bool m_platform_version_isSet;
    bool m_platform_version_isValid;

    QString m_platform_family;
    bool m_platform_family_isSet;
    bool m_platform_family_isValid;

    OAITaskSet_networkConfiguration m_network_configuration;
    bool m_network_configuration_isSet;
    bool m_network_configuration_isValid;

    QList m_load_balancers;
    bool m_load_balancers_isSet;
    bool m_load_balancers_isValid;

    QList m_service_registries;
    bool m_service_registries_isSet;
    bool m_service_registries_isValid;

    OAITaskSet_scale m_scale;
    bool m_scale_isSet;
    bool m_scale_isValid;

    OAIStabilityStatus m_stability_status;
    bool m_stability_status_isSet;
    bool m_stability_status_isValid;

    QDateTime m_stability_status_at;
    bool m_stability_status_at_isSet;
    bool m_stability_status_at_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateServicePrimaryTaskSetResponse_taskSet)

#endif // OAIUpdateServicePrimaryTaskSetResponse_taskSet_H
