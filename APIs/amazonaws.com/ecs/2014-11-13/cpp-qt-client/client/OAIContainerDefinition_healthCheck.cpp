/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerDefinition_healthCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerDefinition_healthCheck::OAIContainerDefinition_healthCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerDefinition_healthCheck::OAIContainerDefinition_healthCheck() {
    this->initializeModel();
}

OAIContainerDefinition_healthCheck::~OAIContainerDefinition_healthCheck() {}

void OAIContainerDefinition_healthCheck::initializeModel() {

    m_command_isSet = false;
    m_command_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_retries_isSet = false;
    m_retries_isValid = false;

    m_start_period_isSet = false;
    m_start_period_isValid = false;
}

void OAIContainerDefinition_healthCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerDefinition_healthCheck::fromJsonObject(QJsonObject json) {

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_retries_isValid = ::OpenAPI::fromJsonValue(m_retries, json[QString("retries")]);
    m_retries_isSet = !json[QString("retries")].isNull() && m_retries_isValid;

    m_start_period_isValid = ::OpenAPI::fromJsonValue(m_start_period, json[QString("startPeriod")]);
    m_start_period_isSet = !json[QString("startPeriod")].isNull() && m_start_period_isValid;
}

QString OAIContainerDefinition_healthCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerDefinition_healthCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_command.isSet()) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_retries_isSet) {
        obj.insert(QString("retries"), ::OpenAPI::toJsonValue(m_retries));
    }
    if (m_start_period_isSet) {
        obj.insert(QString("startPeriod"), ::OpenAPI::toJsonValue(m_start_period));
    }
    return obj;
}

QList OAIContainerDefinition_healthCheck::getCommand() const {
    return m_command;
}
void OAIContainerDefinition_healthCheck::setCommand(const QList &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIContainerDefinition_healthCheck::is_command_Set() const{
    return m_command_isSet;
}

bool OAIContainerDefinition_healthCheck::is_command_Valid() const{
    return m_command_isValid;
}

qint32 OAIContainerDefinition_healthCheck::getInterval() const {
    return m_interval;
}
void OAIContainerDefinition_healthCheck::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIContainerDefinition_healthCheck::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIContainerDefinition_healthCheck::is_interval_Valid() const{
    return m_interval_isValid;
}

qint32 OAIContainerDefinition_healthCheck::getTimeout() const {
    return m_timeout;
}
void OAIContainerDefinition_healthCheck::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIContainerDefinition_healthCheck::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIContainerDefinition_healthCheck::is_timeout_Valid() const{
    return m_timeout_isValid;
}

qint32 OAIContainerDefinition_healthCheck::getRetries() const {
    return m_retries;
}
void OAIContainerDefinition_healthCheck::setRetries(const qint32 &retries) {
    m_retries = retries;
    m_retries_isSet = true;
}

bool OAIContainerDefinition_healthCheck::is_retries_Set() const{
    return m_retries_isSet;
}

bool OAIContainerDefinition_healthCheck::is_retries_Valid() const{
    return m_retries_isValid;
}

qint32 OAIContainerDefinition_healthCheck::getStartPeriod() const {
    return m_start_period;
}
void OAIContainerDefinition_healthCheck::setStartPeriod(const qint32 &start_period) {
    m_start_period = start_period;
    m_start_period_isSet = true;
}

bool OAIContainerDefinition_healthCheck::is_start_period_Set() const{
    return m_start_period_isSet;
}

bool OAIContainerDefinition_healthCheck::is_start_period_Valid() const{
    return m_start_period_isValid;
}

bool OAIContainerDefinition_healthCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerDefinition_healthCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_command_isValid && true;
}

} // namespace OpenAPI
