/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVolume_efsVolumeConfiguration.h
 *
 * 
 */

#ifndef OAIVolume_efsVolumeConfiguration_H
#define OAIVolume_efsVolumeConfiguration_H

#include <QJsonObject>

#include "OAIEFSTransitEncryption.h"
#include "OAIEFSVolumeConfiguration_authorizationConfig.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEFSVolumeConfiguration_authorizationConfig;

class OAIVolume_efsVolumeConfiguration : public OAIObject {
public:
    OAIVolume_efsVolumeConfiguration();
    OAIVolume_efsVolumeConfiguration(QString json);
    ~OAIVolume_efsVolumeConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFileSystemId() const;
    void setFileSystemId(const QString &file_system_id);
    bool is_file_system_id_Set() const;
    bool is_file_system_id_Valid() const;

    QString getRootDirectory() const;
    void setRootDirectory(const QString &root_directory);
    bool is_root_directory_Set() const;
    bool is_root_directory_Valid() const;

    OAIEFSTransitEncryption getTransitEncryption() const;
    void setTransitEncryption(const OAIEFSTransitEncryption &transit_encryption);
    bool is_transit_encryption_Set() const;
    bool is_transit_encryption_Valid() const;

    qint32 getTransitEncryptionPort() const;
    void setTransitEncryptionPort(const qint32 &transit_encryption_port);
    bool is_transit_encryption_port_Set() const;
    bool is_transit_encryption_port_Valid() const;

    OAIEFSVolumeConfiguration_authorizationConfig getAuthorizationConfig() const;
    void setAuthorizationConfig(const OAIEFSVolumeConfiguration_authorizationConfig &authorization_config);
    bool is_authorization_config_Set() const;
    bool is_authorization_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_file_system_id;
    bool m_file_system_id_isSet;
    bool m_file_system_id_isValid;

    QString m_root_directory;
    bool m_root_directory_isSet;
    bool m_root_directory_isValid;

    OAIEFSTransitEncryption m_transit_encryption;
    bool m_transit_encryption_isSet;
    bool m_transit_encryption_isValid;

    qint32 m_transit_encryption_port;
    bool m_transit_encryption_port_isSet;
    bool m_transit_encryption_port_isValid;

    OAIEFSVolumeConfiguration_authorizationConfig m_authorization_config;
    bool m_authorization_config_isSet;
    bool m_authorization_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVolume_efsVolumeConfiguration)

#endif // OAIVolume_efsVolumeConfiguration_H
