/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogDriver.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogDriver::OAILogDriver(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogDriver::OAILogDriver() {
    this->initializeModel();
}

OAILogDriver::~OAILogDriver() {}

void OAILogDriver::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILogDriver::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILogDriver::fromJson(QString jsonString) {
    
    if ( jsonString.compare("json-file", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogDriver::JSON_FILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("syslog", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogDriver::SYSLOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("journald", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogDriver::JOURNALD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("gelf", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogDriver::GELF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fluentd", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogDriver::FLUENTD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("awslogs", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogDriver::AWSLOGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("splunk", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogDriver::SPLUNK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("awsfirelens", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogDriver::AWSFIRELENS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILogDriver::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILogDriver::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILogDriver::JSON_FILE:
            val = "json-file";
            break;
        case eOAILogDriver::SYSLOG:
            val = "syslog";
            break;
        case eOAILogDriver::JOURNALD:
            val = "journald";
            break;
        case eOAILogDriver::GELF:
            val = "gelf";
            break;
        case eOAILogDriver::FLUENTD:
            val = "fluentd";
            break;
        case eOAILogDriver::AWSLOGS:
            val = "awslogs";
            break;
        case eOAILogDriver::SPLUNK:
            val = "splunk";
            break;
        case eOAILogDriver::AWSFIRELENS:
            val = "awsfirelens";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILogDriver::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILogDriver::eOAILogDriver OAILogDriver::getValue() const {
    return m_value;
}

void OAILogDriver::setValue(const OAILogDriver::eOAILogDriver& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILogDriver::isSet() const {
    
    return m_value_isSet;
}

bool OAILogDriver::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
