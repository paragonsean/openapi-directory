/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateClusterRequest::OAIUpdateClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateClusterRequest::OAIUpdateClusterRequest() {
    this->initializeModel();
}

OAIUpdateClusterRequest::~OAIUpdateClusterRequest() {}

void OAIUpdateClusterRequest::initializeModel() {

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_service_connect_defaults_isSet = false;
    m_service_connect_defaults_isValid = false;
}

void OAIUpdateClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateClusterRequest::fromJsonObject(QJsonObject json) {

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_service_connect_defaults_isValid = ::OpenAPI::fromJsonValue(m_service_connect_defaults, json[QString("serviceConnectDefaults")]);
    m_service_connect_defaults_isSet = !json[QString("serviceConnectDefaults")].isNull() && m_service_connect_defaults_isValid;
}

QString OAIUpdateClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_service_connect_defaults.isSet()) {
        obj.insert(QString("serviceConnectDefaults"), ::OpenAPI::toJsonValue(m_service_connect_defaults));
    }
    return obj;
}

QString OAIUpdateClusterRequest::getCluster() const {
    return m_cluster;
}
void OAIUpdateClusterRequest::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIUpdateClusterRequest::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIUpdateClusterRequest::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QList OAIUpdateClusterRequest::getSettings() const {
    return m_settings;
}
void OAIUpdateClusterRequest::setSettings(const QList &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIUpdateClusterRequest::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIUpdateClusterRequest::is_settings_Valid() const{
    return m_settings_isValid;
}

OAIUpdateClusterRequest_configuration OAIUpdateClusterRequest::getConfiguration() const {
    return m_configuration;
}
void OAIUpdateClusterRequest::setConfiguration(const OAIUpdateClusterRequest_configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIUpdateClusterRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIUpdateClusterRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

OAICreateClusterRequest_serviceConnectDefaults OAIUpdateClusterRequest::getServiceConnectDefaults() const {
    return m_service_connect_defaults;
}
void OAIUpdateClusterRequest::setServiceConnectDefaults(const OAICreateClusterRequest_serviceConnectDefaults &service_connect_defaults) {
    m_service_connect_defaults = service_connect_defaults;
    m_service_connect_defaults_isSet = true;
}

bool OAIUpdateClusterRequest::is_service_connect_defaults_Set() const{
    return m_service_connect_defaults_isSet;
}

bool OAIUpdateClusterRequest::is_service_connect_defaults_Valid() const{
    return m_service_connect_defaults_isValid;
}

bool OAIUpdateClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_connect_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_isValid && true;
}

} // namespace OpenAPI
