/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceConnectService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceConnectService::OAIServiceConnectService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceConnectService::OAIServiceConnectService() {
    this->initializeModel();
}

OAIServiceConnectService::~OAIServiceConnectService() {}

void OAIServiceConnectService::initializeModel() {

    m_port_name_isSet = false;
    m_port_name_isValid = false;

    m_discovery_name_isSet = false;
    m_discovery_name_isValid = false;

    m_client_aliases_isSet = false;
    m_client_aliases_isValid = false;

    m_ingress_port_override_isSet = false;
    m_ingress_port_override_isValid = false;
}

void OAIServiceConnectService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceConnectService::fromJsonObject(QJsonObject json) {

    m_port_name_isValid = ::OpenAPI::fromJsonValue(m_port_name, json[QString("portName")]);
    m_port_name_isSet = !json[QString("portName")].isNull() && m_port_name_isValid;

    m_discovery_name_isValid = ::OpenAPI::fromJsonValue(m_discovery_name, json[QString("discoveryName")]);
    m_discovery_name_isSet = !json[QString("discoveryName")].isNull() && m_discovery_name_isValid;

    m_client_aliases_isValid = ::OpenAPI::fromJsonValue(m_client_aliases, json[QString("clientAliases")]);
    m_client_aliases_isSet = !json[QString("clientAliases")].isNull() && m_client_aliases_isValid;

    m_ingress_port_override_isValid = ::OpenAPI::fromJsonValue(m_ingress_port_override, json[QString("ingressPortOverride")]);
    m_ingress_port_override_isSet = !json[QString("ingressPortOverride")].isNull() && m_ingress_port_override_isValid;
}

QString OAIServiceConnectService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceConnectService::asJsonObject() const {
    QJsonObject obj;
    if (m_port_name_isSet) {
        obj.insert(QString("portName"), ::OpenAPI::toJsonValue(m_port_name));
    }
    if (m_discovery_name_isSet) {
        obj.insert(QString("discoveryName"), ::OpenAPI::toJsonValue(m_discovery_name));
    }
    if (m_client_aliases.isSet()) {
        obj.insert(QString("clientAliases"), ::OpenAPI::toJsonValue(m_client_aliases));
    }
    if (m_ingress_port_override_isSet) {
        obj.insert(QString("ingressPortOverride"), ::OpenAPI::toJsonValue(m_ingress_port_override));
    }
    return obj;
}

QString OAIServiceConnectService::getPortName() const {
    return m_port_name;
}
void OAIServiceConnectService::setPortName(const QString &port_name) {
    m_port_name = port_name;
    m_port_name_isSet = true;
}

bool OAIServiceConnectService::is_port_name_Set() const{
    return m_port_name_isSet;
}

bool OAIServiceConnectService::is_port_name_Valid() const{
    return m_port_name_isValid;
}

QString OAIServiceConnectService::getDiscoveryName() const {
    return m_discovery_name;
}
void OAIServiceConnectService::setDiscoveryName(const QString &discovery_name) {
    m_discovery_name = discovery_name;
    m_discovery_name_isSet = true;
}

bool OAIServiceConnectService::is_discovery_name_Set() const{
    return m_discovery_name_isSet;
}

bool OAIServiceConnectService::is_discovery_name_Valid() const{
    return m_discovery_name_isValid;
}

QList OAIServiceConnectService::getClientAliases() const {
    return m_client_aliases;
}
void OAIServiceConnectService::setClientAliases(const QList &client_aliases) {
    m_client_aliases = client_aliases;
    m_client_aliases_isSet = true;
}

bool OAIServiceConnectService::is_client_aliases_Set() const{
    return m_client_aliases_isSet;
}

bool OAIServiceConnectService::is_client_aliases_Valid() const{
    return m_client_aliases_isValid;
}

qint32 OAIServiceConnectService::getIngressPortOverride() const {
    return m_ingress_port_override;
}
void OAIServiceConnectService::setIngressPortOverride(const qint32 &ingress_port_override) {
    m_ingress_port_override = ingress_port_override;
    m_ingress_port_override_isSet = true;
}

bool OAIServiceConnectService::is_ingress_port_override_Set() const{
    return m_ingress_port_override_isSet;
}

bool OAIServiceConnectService::is_ingress_port_override_Valid() const{
    return m_ingress_port_override_isValid;
}

bool OAIServiceConnectService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_port_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_aliases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_port_override_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceConnectService::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_port_name_isValid && true;
}

} // namespace OpenAPI
