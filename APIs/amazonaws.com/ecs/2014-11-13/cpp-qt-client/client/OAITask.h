/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITask.h
 *
 * Details on a task in a cluster.
 */

#ifndef OAITask_H
#define OAITask_H

#include <QJsonObject>

#include "OAIConnectivity.h"
#include "OAIHealthStatus.h"
#include "OAILaunchType.h"
#include "OAITaskStopCode.h"
#include "OAITask_ephemeralStorage.h"
#include "OAITask_overrides.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITask_overrides;
class OAITask_ephemeralStorage;

class OAITask : public OAIObject {
public:
    OAITask();
    OAITask(QString json);
    ~OAITask() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getAttachments() const;
    void setAttachments(const QList &attachments);
    bool is_attachments_Set() const;
    bool is_attachments_Valid() const;

    QList getAttributes() const;
    void setAttributes(const QList &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QString getAvailabilityZone() const;
    void setAvailabilityZone(const QString &availability_zone);
    bool is_availability_zone_Set() const;
    bool is_availability_zone_Valid() const;

    QString getCapacityProviderName() const;
    void setCapacityProviderName(const QString &capacity_provider_name);
    bool is_capacity_provider_name_Set() const;
    bool is_capacity_provider_name_Valid() const;

    QString getClusterArn() const;
    void setClusterArn(const QString &cluster_arn);
    bool is_cluster_arn_Set() const;
    bool is_cluster_arn_Valid() const;

    OAIConnectivity getConnectivity() const;
    void setConnectivity(const OAIConnectivity &connectivity);
    bool is_connectivity_Set() const;
    bool is_connectivity_Valid() const;

    QDateTime getConnectivityAt() const;
    void setConnectivityAt(const QDateTime &connectivity_at);
    bool is_connectivity_at_Set() const;
    bool is_connectivity_at_Valid() const;

    QString getContainerInstanceArn() const;
    void setContainerInstanceArn(const QString &container_instance_arn);
    bool is_container_instance_arn_Set() const;
    bool is_container_instance_arn_Valid() const;

    QList getContainers() const;
    void setContainers(const QList &containers);
    bool is_containers_Set() const;
    bool is_containers_Valid() const;

    QString getCpu() const;
    void setCpu(const QString &cpu);
    bool is_cpu_Set() const;
    bool is_cpu_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDesiredStatus() const;
    void setDesiredStatus(const QString &desired_status);
    bool is_desired_status_Set() const;
    bool is_desired_status_Valid() const;

    bool getEnableExecuteCommand() const;
    void setEnableExecuteCommand(const bool &enable_execute_command);
    bool is_enable_execute_command_Set() const;
    bool is_enable_execute_command_Valid() const;

    QDateTime getExecutionStoppedAt() const;
    void setExecutionStoppedAt(const QDateTime &execution_stopped_at);
    bool is_execution_stopped_at_Set() const;
    bool is_execution_stopped_at_Valid() const;

    QString getGroup() const;
    void setGroup(const QString &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    OAIHealthStatus getHealthStatus() const;
    void setHealthStatus(const OAIHealthStatus &health_status);
    bool is_health_status_Set() const;
    bool is_health_status_Valid() const;

    QList getInferenceAccelerators() const;
    void setInferenceAccelerators(const QList &inference_accelerators);
    bool is_inference_accelerators_Set() const;
    bool is_inference_accelerators_Valid() const;

    QString getLastStatus() const;
    void setLastStatus(const QString &last_status);
    bool is_last_status_Set() const;
    bool is_last_status_Valid() const;

    OAILaunchType getLaunchType() const;
    void setLaunchType(const OAILaunchType &launch_type);
    bool is_launch_type_Set() const;
    bool is_launch_type_Valid() const;

    QString getMemory() const;
    void setMemory(const QString &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    OAITask_overrides getOverrides() const;
    void setOverrides(const OAITask_overrides &overrides);
    bool is_overrides_Set() const;
    bool is_overrides_Valid() const;

    QString getPlatformVersion() const;
    void setPlatformVersion(const QString &platform_version);
    bool is_platform_version_Set() const;
    bool is_platform_version_Valid() const;

    QString getPlatformFamily() const;
    void setPlatformFamily(const QString &platform_family);
    bool is_platform_family_Set() const;
    bool is_platform_family_Valid() const;

    QDateTime getPullStartedAt() const;
    void setPullStartedAt(const QDateTime &pull_started_at);
    bool is_pull_started_at_Set() const;
    bool is_pull_started_at_Valid() const;

    QDateTime getPullStoppedAt() const;
    void setPullStoppedAt(const QDateTime &pull_stopped_at);
    bool is_pull_stopped_at_Set() const;
    bool is_pull_stopped_at_Valid() const;

    QDateTime getStartedAt() const;
    void setStartedAt(const QDateTime &started_at);
    bool is_started_at_Set() const;
    bool is_started_at_Valid() const;

    QString getStartedBy() const;
    void setStartedBy(const QString &started_by);
    bool is_started_by_Set() const;
    bool is_started_by_Valid() const;

    OAITaskStopCode getStopCode() const;
    void setStopCode(const OAITaskStopCode &stop_code);
    bool is_stop_code_Set() const;
    bool is_stop_code_Valid() const;

    QDateTime getStoppedAt() const;
    void setStoppedAt(const QDateTime &stopped_at);
    bool is_stopped_at_Set() const;
    bool is_stopped_at_Valid() const;

    QString getStoppedReason() const;
    void setStoppedReason(const QString &stopped_reason);
    bool is_stopped_reason_Set() const;
    bool is_stopped_reason_Valid() const;

    QDateTime getStoppingAt() const;
    void setStoppingAt(const QDateTime &stopping_at);
    bool is_stopping_at_Set() const;
    bool is_stopping_at_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getTaskArn() const;
    void setTaskArn(const QString &task_arn);
    bool is_task_arn_Set() const;
    bool is_task_arn_Valid() const;

    QString getTaskDefinitionArn() const;
    void setTaskDefinitionArn(const QString &task_definition_arn);
    bool is_task_definition_arn_Set() const;
    bool is_task_definition_arn_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    OAITask_ephemeralStorage getEphemeralStorage() const;
    void setEphemeralStorage(const OAITask_ephemeralStorage &ephemeral_storage);
    bool is_ephemeral_storage_Set() const;
    bool is_ephemeral_storage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_attachments;
    bool m_attachments_isSet;
    bool m_attachments_isValid;

    QList m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QString m_availability_zone;
    bool m_availability_zone_isSet;
    bool m_availability_zone_isValid;

    QString m_capacity_provider_name;
    bool m_capacity_provider_name_isSet;
    bool m_capacity_provider_name_isValid;

    QString m_cluster_arn;
    bool m_cluster_arn_isSet;
    bool m_cluster_arn_isValid;

    OAIConnectivity m_connectivity;
    bool m_connectivity_isSet;
    bool m_connectivity_isValid;

    QDateTime m_connectivity_at;
    bool m_connectivity_at_isSet;
    bool m_connectivity_at_isValid;

    QString m_container_instance_arn;
    bool m_container_instance_arn_isSet;
    bool m_container_instance_arn_isValid;

    QList m_containers;
    bool m_containers_isSet;
    bool m_containers_isValid;

    QString m_cpu;
    bool m_cpu_isSet;
    bool m_cpu_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_desired_status;
    bool m_desired_status_isSet;
    bool m_desired_status_isValid;

    bool m_enable_execute_command;
    bool m_enable_execute_command_isSet;
    bool m_enable_execute_command_isValid;

    QDateTime m_execution_stopped_at;
    bool m_execution_stopped_at_isSet;
    bool m_execution_stopped_at_isValid;

    QString m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    OAIHealthStatus m_health_status;
    bool m_health_status_isSet;
    bool m_health_status_isValid;

    QList m_inference_accelerators;
    bool m_inference_accelerators_isSet;
    bool m_inference_accelerators_isValid;

    QString m_last_status;
    bool m_last_status_isSet;
    bool m_last_status_isValid;

    OAILaunchType m_launch_type;
    bool m_launch_type_isSet;
    bool m_launch_type_isValid;

    QString m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    OAITask_overrides m_overrides;
    bool m_overrides_isSet;
    bool m_overrides_isValid;

    QString m_platform_version;
    bool m_platform_version_isSet;
    bool m_platform_version_isValid;

    QString m_platform_family;
    bool m_platform_family_isSet;
    bool m_platform_family_isValid;

    QDateTime m_pull_started_at;
    bool m_pull_started_at_isSet;
    bool m_pull_started_at_isValid;

    QDateTime m_pull_stopped_at;
    bool m_pull_stopped_at_isSet;
    bool m_pull_stopped_at_isValid;

    QDateTime m_started_at;
    bool m_started_at_isSet;
    bool m_started_at_isValid;

    QString m_started_by;
    bool m_started_by_isSet;
    bool m_started_by_isValid;

    OAITaskStopCode m_stop_code;
    bool m_stop_code_isSet;
    bool m_stop_code_isValid;

    QDateTime m_stopped_at;
    bool m_stopped_at_isSet;
    bool m_stopped_at_isValid;

    QString m_stopped_reason;
    bool m_stopped_reason_isSet;
    bool m_stopped_reason_isValid;

    QDateTime m_stopping_at;
    bool m_stopping_at_isSet;
    bool m_stopping_at_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_task_arn;
    bool m_task_arn_isSet;
    bool m_task_arn_isValid;

    QString m_task_definition_arn;
    bool m_task_definition_arn_isSet;
    bool m_task_definition_arn_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    OAITask_ephemeralStorage m_ephemeral_storage;
    bool m_ephemeral_storage_isSet;
    bool m_ephemeral_storage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITask)

#endif // OAITask_H
