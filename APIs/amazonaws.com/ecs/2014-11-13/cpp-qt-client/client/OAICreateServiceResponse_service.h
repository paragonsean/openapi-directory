/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateServiceResponse_service.h
 *
 * 
 */

#ifndef OAICreateServiceResponse_service_H
#define OAICreateServiceResponse_service_H

#include <QJsonObject>

#include "OAICreateServiceRequest_deploymentConfiguration.h"
#include "OAILaunchType.h"
#include "OAIPropagateTags.h"
#include "OAISchedulingStrategy.h"
#include "OAIService_deploymentController.h"
#include "OAIStartTaskRequest_networkConfiguration.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateServiceRequest_deploymentConfiguration;
class OAIStartTaskRequest_networkConfiguration;
class OAIService_deploymentController;

class OAICreateServiceResponse_service : public OAIObject {
public:
    OAICreateServiceResponse_service();
    OAICreateServiceResponse_service(QString json);
    ~OAICreateServiceResponse_service() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getServiceArn() const;
    void setServiceArn(const QString &service_arn);
    bool is_service_arn_Set() const;
    bool is_service_arn_Valid() const;

    QString getServiceName() const;
    void setServiceName(const QString &service_name);
    bool is_service_name_Set() const;
    bool is_service_name_Valid() const;

    QString getClusterArn() const;
    void setClusterArn(const QString &cluster_arn);
    bool is_cluster_arn_Set() const;
    bool is_cluster_arn_Valid() const;

    QList getLoadBalancers() const;
    void setLoadBalancers(const QList &load_balancers);
    bool is_load_balancers_Set() const;
    bool is_load_balancers_Valid() const;

    QList getServiceRegistries() const;
    void setServiceRegistries(const QList &service_registries);
    bool is_service_registries_Set() const;
    bool is_service_registries_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getDesiredCount() const;
    void setDesiredCount(const qint32 &desired_count);
    bool is_desired_count_Set() const;
    bool is_desired_count_Valid() const;

    qint32 getRunningCount() const;
    void setRunningCount(const qint32 &running_count);
    bool is_running_count_Set() const;
    bool is_running_count_Valid() const;

    qint32 getPendingCount() const;
    void setPendingCount(const qint32 &pending_count);
    bool is_pending_count_Set() const;
    bool is_pending_count_Valid() const;

    OAILaunchType getLaunchType() const;
    void setLaunchType(const OAILaunchType &launch_type);
    bool is_launch_type_Set() const;
    bool is_launch_type_Valid() const;

    QList getCapacityProviderStrategy() const;
    void setCapacityProviderStrategy(const QList &capacity_provider_strategy);
    bool is_capacity_provider_strategy_Set() const;
    bool is_capacity_provider_strategy_Valid() const;

    QString getPlatformVersion() const;
    void setPlatformVersion(const QString &platform_version);
    bool is_platform_version_Set() const;
    bool is_platform_version_Valid() const;

    QString getPlatformFamily() const;
    void setPlatformFamily(const QString &platform_family);
    bool is_platform_family_Set() const;
    bool is_platform_family_Valid() const;

    QString getTaskDefinition() const;
    void setTaskDefinition(const QString &task_definition);
    bool is_task_definition_Set() const;
    bool is_task_definition_Valid() const;

    OAICreateServiceRequest_deploymentConfiguration getDeploymentConfiguration() const;
    void setDeploymentConfiguration(const OAICreateServiceRequest_deploymentConfiguration &deployment_configuration);
    bool is_deployment_configuration_Set() const;
    bool is_deployment_configuration_Valid() const;

    QList getTaskSets() const;
    void setTaskSets(const QList &task_sets);
    bool is_task_sets_Set() const;
    bool is_task_sets_Valid() const;

    QList getDeployments() const;
    void setDeployments(const QList &deployments);
    bool is_deployments_Set() const;
    bool is_deployments_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QList getEvents() const;
    void setEvents(const QList &events);
    bool is_events_Set() const;
    bool is_events_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QList getPlacementConstraints() const;
    void setPlacementConstraints(const QList &placement_constraints);
    bool is_placement_constraints_Set() const;
    bool is_placement_constraints_Valid() const;

    QList getPlacementStrategy() const;
    void setPlacementStrategy(const QList &placement_strategy);
    bool is_placement_strategy_Set() const;
    bool is_placement_strategy_Valid() const;

    OAIStartTaskRequest_networkConfiguration getNetworkConfiguration() const;
    void setNetworkConfiguration(const OAIStartTaskRequest_networkConfiguration &network_configuration);
    bool is_network_configuration_Set() const;
    bool is_network_configuration_Valid() const;

    qint32 getHealthCheckGracePeriodSeconds() const;
    void setHealthCheckGracePeriodSeconds(const qint32 &health_check_grace_period_seconds);
    bool is_health_check_grace_period_seconds_Set() const;
    bool is_health_check_grace_period_seconds_Valid() const;

    OAISchedulingStrategy getSchedulingStrategy() const;
    void setSchedulingStrategy(const OAISchedulingStrategy &scheduling_strategy);
    bool is_scheduling_strategy_Set() const;
    bool is_scheduling_strategy_Valid() const;

    OAIService_deploymentController getDeploymentController() const;
    void setDeploymentController(const OAIService_deploymentController &deployment_controller);
    bool is_deployment_controller_Set() const;
    bool is_deployment_controller_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getCreatedBy() const;
    void setCreatedBy(const QString &created_by);
    bool is_created_by_Set() const;
    bool is_created_by_Valid() const;

    bool getEnableEcsManagedTags() const;
    void setEnableEcsManagedTags(const bool &enable_ecs_managed_tags);
    bool is_enable_ecs_managed_tags_Set() const;
    bool is_enable_ecs_managed_tags_Valid() const;

    OAIPropagateTags getPropagateTags() const;
    void setPropagateTags(const OAIPropagateTags &propagate_tags);
    bool is_propagate_tags_Set() const;
    bool is_propagate_tags_Valid() const;

    bool getEnableExecuteCommand() const;
    void setEnableExecuteCommand(const bool &enable_execute_command);
    bool is_enable_execute_command_Set() const;
    bool is_enable_execute_command_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_service_arn;
    bool m_service_arn_isSet;
    bool m_service_arn_isValid;

    QString m_service_name;
    bool m_service_name_isSet;
    bool m_service_name_isValid;

    QString m_cluster_arn;
    bool m_cluster_arn_isSet;
    bool m_cluster_arn_isValid;

    QList m_load_balancers;
    bool m_load_balancers_isSet;
    bool m_load_balancers_isValid;

    QList m_service_registries;
    bool m_service_registries_isSet;
    bool m_service_registries_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_desired_count;
    bool m_desired_count_isSet;
    bool m_desired_count_isValid;

    qint32 m_running_count;
    bool m_running_count_isSet;
    bool m_running_count_isValid;

    qint32 m_pending_count;
    bool m_pending_count_isSet;
    bool m_pending_count_isValid;

    OAILaunchType m_launch_type;
    bool m_launch_type_isSet;
    bool m_launch_type_isValid;

    QList m_capacity_provider_strategy;
    bool m_capacity_provider_strategy_isSet;
    bool m_capacity_provider_strategy_isValid;

    QString m_platform_version;
    bool m_platform_version_isSet;
    bool m_platform_version_isValid;

    QString m_platform_family;
    bool m_platform_family_isSet;
    bool m_platform_family_isValid;

    QString m_task_definition;
    bool m_task_definition_isSet;
    bool m_task_definition_isValid;

    OAICreateServiceRequest_deploymentConfiguration m_deployment_configuration;
    bool m_deployment_configuration_isSet;
    bool m_deployment_configuration_isValid;

    QList m_task_sets;
    bool m_task_sets_isSet;
    bool m_task_sets_isValid;

    QList m_deployments;
    bool m_deployments_isSet;
    bool m_deployments_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QList m_events;
    bool m_events_isSet;
    bool m_events_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QList m_placement_constraints;
    bool m_placement_constraints_isSet;
    bool m_placement_constraints_isValid;

    QList m_placement_strategy;
    bool m_placement_strategy_isSet;
    bool m_placement_strategy_isValid;

    OAIStartTaskRequest_networkConfiguration m_network_configuration;
    bool m_network_configuration_isSet;
    bool m_network_configuration_isValid;

    qint32 m_health_check_grace_period_seconds;
    bool m_health_check_grace_period_seconds_isSet;
    bool m_health_check_grace_period_seconds_isValid;

    OAISchedulingStrategy m_scheduling_strategy;
    bool m_scheduling_strategy_isSet;
    bool m_scheduling_strategy_isValid;

    OAIService_deploymentController m_deployment_controller;
    bool m_deployment_controller_isSet;
    bool m_deployment_controller_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_created_by;
    bool m_created_by_isSet;
    bool m_created_by_isValid;

    bool m_enable_ecs_managed_tags;
    bool m_enable_ecs_managed_tags_isSet;
    bool m_enable_ecs_managed_tags_isValid;

    OAIPropagateTags m_propagate_tags;
    bool m_propagate_tags_isSet;
    bool m_propagate_tags_isValid;

    bool m_enable_execute_command;
    bool m_enable_execute_command_isSet;
    bool m_enable_execute_command_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateServiceResponse_service)

#endif // OAICreateServiceResponse_service_H
