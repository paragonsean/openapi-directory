/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutClusterCapacityProvidersResponse_cluster.h
 *
 * 
 */

#ifndef OAIPutClusterCapacityProvidersResponse_cluster_H
#define OAIPutClusterCapacityProvidersResponse_cluster_H

#include <QJsonObject>

#include "OAICluster_serviceConnectDefaults.h"
#include "OAIUpdateClusterRequest_configuration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateClusterRequest_configuration;
class OAICluster_serviceConnectDefaults;

class OAIPutClusterCapacityProvidersResponse_cluster : public OAIObject {
public:
    OAIPutClusterCapacityProvidersResponse_cluster();
    OAIPutClusterCapacityProvidersResponse_cluster(QString json);
    ~OAIPutClusterCapacityProvidersResponse_cluster() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClusterArn() const;
    void setClusterArn(const QString &cluster_arn);
    bool is_cluster_arn_Set() const;
    bool is_cluster_arn_Valid() const;

    QString getClusterName() const;
    void setClusterName(const QString &cluster_name);
    bool is_cluster_name_Set() const;
    bool is_cluster_name_Valid() const;

    OAIUpdateClusterRequest_configuration getConfiguration() const;
    void setConfiguration(const OAIUpdateClusterRequest_configuration &configuration);
    bool is_configuration_Set() const;
    bool is_configuration_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getRegisteredContainerInstancesCount() const;
    void setRegisteredContainerInstancesCount(const qint32 &registered_container_instances_count);
    bool is_registered_container_instances_count_Set() const;
    bool is_registered_container_instances_count_Valid() const;

    qint32 getRunningTasksCount() const;
    void setRunningTasksCount(const qint32 &running_tasks_count);
    bool is_running_tasks_count_Set() const;
    bool is_running_tasks_count_Valid() const;

    qint32 getPendingTasksCount() const;
    void setPendingTasksCount(const qint32 &pending_tasks_count);
    bool is_pending_tasks_count_Set() const;
    bool is_pending_tasks_count_Valid() const;

    qint32 getActiveServicesCount() const;
    void setActiveServicesCount(const qint32 &active_services_count);
    bool is_active_services_count_Set() const;
    bool is_active_services_count_Valid() const;

    QList getStatistics() const;
    void setStatistics(const QList &statistics);
    bool is_statistics_Set() const;
    bool is_statistics_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QList getSettings() const;
    void setSettings(const QList &settings);
    bool is_settings_Set() const;
    bool is_settings_Valid() const;

    QList getCapacityProviders() const;
    void setCapacityProviders(const QList &capacity_providers);
    bool is_capacity_providers_Set() const;
    bool is_capacity_providers_Valid() const;

    QList getDefaultCapacityProviderStrategy() const;
    void setDefaultCapacityProviderStrategy(const QList &default_capacity_provider_strategy);
    bool is_default_capacity_provider_strategy_Set() const;
    bool is_default_capacity_provider_strategy_Valid() const;

    QList getAttachments() const;
    void setAttachments(const QList &attachments);
    bool is_attachments_Set() const;
    bool is_attachments_Valid() const;

    QString getAttachmentsStatus() const;
    void setAttachmentsStatus(const QString &attachments_status);
    bool is_attachments_status_Set() const;
    bool is_attachments_status_Valid() const;

    OAICluster_serviceConnectDefaults getServiceConnectDefaults() const;
    void setServiceConnectDefaults(const OAICluster_serviceConnectDefaults &service_connect_defaults);
    bool is_service_connect_defaults_Set() const;
    bool is_service_connect_defaults_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster_arn;
    bool m_cluster_arn_isSet;
    bool m_cluster_arn_isValid;

    QString m_cluster_name;
    bool m_cluster_name_isSet;
    bool m_cluster_name_isValid;

    OAIUpdateClusterRequest_configuration m_configuration;
    bool m_configuration_isSet;
    bool m_configuration_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_registered_container_instances_count;
    bool m_registered_container_instances_count_isSet;
    bool m_registered_container_instances_count_isValid;

    qint32 m_running_tasks_count;
    bool m_running_tasks_count_isSet;
    bool m_running_tasks_count_isValid;

    qint32 m_pending_tasks_count;
    bool m_pending_tasks_count_isSet;
    bool m_pending_tasks_count_isValid;

    qint32 m_active_services_count;
    bool m_active_services_count_isSet;
    bool m_active_services_count_isValid;

    QList m_statistics;
    bool m_statistics_isSet;
    bool m_statistics_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QList m_settings;
    bool m_settings_isSet;
    bool m_settings_isValid;

    QList m_capacity_providers;
    bool m_capacity_providers_isSet;
    bool m_capacity_providers_isValid;

    QList m_default_capacity_provider_strategy;
    bool m_default_capacity_provider_strategy_isSet;
    bool m_default_capacity_provider_strategy_isValid;

    QList m_attachments;
    bool m_attachments_isSet;
    bool m_attachments_isValid;

    QString m_attachments_status;
    bool m_attachments_status_isSet;
    bool m_attachments_status_isValid;

    OAICluster_serviceConnectDefaults m_service_connect_defaults;
    bool m_service_connect_defaults_isSet;
    bool m_service_connect_defaults_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutClusterCapacityProvidersResponse_cluster)

#endif // OAIPutClusterCapacityProvidersResponse_cluster_H
