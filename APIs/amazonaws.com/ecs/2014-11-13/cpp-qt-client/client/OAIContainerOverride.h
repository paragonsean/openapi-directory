/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainerOverride.h
 *
 * &lt;p&gt;The overrides that are sent to a container. An empty container override can be passed in. An example of an empty container override is &lt;code&gt;{\&quot;containerOverrides\&quot;: [ ] }&lt;/code&gt;. If a non-empty container override is specified, the &lt;code&gt;name&lt;/code&gt; parameter must be included.&lt;/p&gt; &lt;p&gt;You can use Secrets Manager or Amazon Web Services Systems Manager Parameter Store to store the sensitive data. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/secrets-envvar.html\&quot;&gt;Retrieve secrets through environment variables&lt;/a&gt; in the Amazon ECS Developer Guide.&lt;/p&gt;
 */

#ifndef OAIContainerOverride_H
#define OAIContainerOverride_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIContainerOverride : public OAIObject {
public:
    OAIContainerOverride();
    OAIContainerOverride(QString json);
    ~OAIContainerOverride() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getCommand() const;
    void setCommand(const QList &command);
    bool is_command_Set() const;
    bool is_command_Valid() const;

    QList getEnvironment() const;
    void setEnvironment(const QList &environment);
    bool is_environment_Set() const;
    bool is_environment_Valid() const;

    QList getEnvironmentFiles() const;
    void setEnvironmentFiles(const QList &environment_files);
    bool is_environment_files_Set() const;
    bool is_environment_files_Valid() const;

    qint32 getCpu() const;
    void setCpu(const qint32 &cpu);
    bool is_cpu_Set() const;
    bool is_cpu_Valid() const;

    qint32 getMemory() const;
    void setMemory(const qint32 &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    qint32 getMemoryReservation() const;
    void setMemoryReservation(const qint32 &memory_reservation);
    bool is_memory_reservation_Set() const;
    bool is_memory_reservation_Valid() const;

    QList getResourceRequirements() const;
    void setResourceRequirements(const QList &resource_requirements);
    bool is_resource_requirements_Set() const;
    bool is_resource_requirements_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_command;
    bool m_command_isSet;
    bool m_command_isValid;

    QList m_environment;
    bool m_environment_isSet;
    bool m_environment_isValid;

    QList m_environment_files;
    bool m_environment_files_isSet;
    bool m_environment_files_isValid;

    qint32 m_cpu;
    bool m_cpu_isSet;
    bool m_cpu_isValid;

    qint32 m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    qint32 m_memory_reservation;
    bool m_memory_reservation_isSet;
    bool m_memory_reservation_isValid;

    QList m_resource_requirements;
    bool m_resource_requirements_isSet;
    bool m_resource_requirements_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainerOverride)

#endif // OAIContainerOverride_H
