/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIManagedScaling.h
 *
 * &lt;p&gt;The managed scaling settings for the Auto Scaling group capacity provider.&lt;/p&gt; &lt;p&gt;When managed scaling is turned on, Amazon ECS manages the scale-in and scale-out actions of the Auto Scaling group. Amazon ECS manages a target tracking scaling policy using an Amazon ECS managed CloudWatch metric with the specified &lt;code&gt;targetCapacity&lt;/code&gt; value as the target value for the metric. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/asg-capacity-providers.html#asg-capacity-providers-managed-scaling\&quot;&gt;Using managed scaling&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If managed scaling is off, the user must manage the scaling of the Auto Scaling group.&lt;/p&gt;
 */

#ifndef OAIManagedScaling_H
#define OAIManagedScaling_H

#include <QJsonObject>

#include "OAIManagedScalingStatus.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIManagedScaling : public OAIObject {
public:
    OAIManagedScaling();
    OAIManagedScaling(QString json);
    ~OAIManagedScaling() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIManagedScalingStatus getStatus() const;
    void setStatus(const OAIManagedScalingStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getTargetCapacity() const;
    void setTargetCapacity(const qint32 &target_capacity);
    bool is_target_capacity_Set() const;
    bool is_target_capacity_Valid() const;

    qint32 getMinimumScalingStepSize() const;
    void setMinimumScalingStepSize(const qint32 &minimum_scaling_step_size);
    bool is_minimum_scaling_step_size_Set() const;
    bool is_minimum_scaling_step_size_Valid() const;

    qint32 getMaximumScalingStepSize() const;
    void setMaximumScalingStepSize(const qint32 &maximum_scaling_step_size);
    bool is_maximum_scaling_step_size_Set() const;
    bool is_maximum_scaling_step_size_Valid() const;

    qint32 getInstanceWarmupPeriod() const;
    void setInstanceWarmupPeriod(const qint32 &instance_warmup_period);
    bool is_instance_warmup_period_Set() const;
    bool is_instance_warmup_period_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIManagedScalingStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_target_capacity;
    bool m_target_capacity_isSet;
    bool m_target_capacity_isValid;

    qint32 m_minimum_scaling_step_size;
    bool m_minimum_scaling_step_size_isSet;
    bool m_minimum_scaling_step_size_isValid;

    qint32 m_maximum_scaling_step_size;
    bool m_maximum_scaling_step_size_isSet;
    bool m_maximum_scaling_step_size_isValid;

    qint32 m_instance_warmup_period;
    bool m_instance_warmup_period_isSet;
    bool m_instance_warmup_period_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIManagedScaling)

#endif // OAIManagedScaling_H
