/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetting::OAISetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetting::OAISetting() {
    this->initializeModel();
}

OAISetting::~OAISetting() {}

void OAISetting::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_principal_arn_isSet = false;
    m_principal_arn_isValid = false;
}

void OAISetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetting::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_principal_arn_isValid = ::OpenAPI::fromJsonValue(m_principal_arn, json[QString("principalArn")]);
    m_principal_arn_isSet = !json[QString("principalArn")].isNull() && m_principal_arn_isValid;
}

QString OAISetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetting::asJsonObject() const {
    QJsonObject obj;
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_principal_arn_isSet) {
        obj.insert(QString("principalArn"), ::OpenAPI::toJsonValue(m_principal_arn));
    }
    return obj;
}

OAISettingName OAISetting::getName() const {
    return m_name;
}
void OAISetting::setName(const OAISettingName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISetting::is_name_Set() const{
    return m_name_isSet;
}

bool OAISetting::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISetting::getValue() const {
    return m_value;
}
void OAISetting::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISetting::is_value_Set() const{
    return m_value_isSet;
}

bool OAISetting::is_value_Valid() const{
    return m_value_isValid;
}

QString OAISetting::getPrincipalArn() const {
    return m_principal_arn;
}
void OAISetting::setPrincipalArn(const QString &principal_arn) {
    m_principal_arn = principal_arn;
    m_principal_arn_isSet = true;
}

bool OAISetting::is_principal_arn_Set() const{
    return m_principal_arn_isSet;
}

bool OAISetting::is_principal_arn_Valid() const{
    return m_principal_arn_isValid;
}

bool OAISetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
