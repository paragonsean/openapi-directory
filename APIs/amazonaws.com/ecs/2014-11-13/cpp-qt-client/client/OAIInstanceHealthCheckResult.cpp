/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceHealthCheckResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceHealthCheckResult::OAIInstanceHealthCheckResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceHealthCheckResult::OAIInstanceHealthCheckResult() {
    this->initializeModel();
}

OAIInstanceHealthCheckResult::~OAIInstanceHealthCheckResult() {}

void OAIInstanceHealthCheckResult::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_last_status_change_isSet = false;
    m_last_status_change_isValid = false;
}

void OAIInstanceHealthCheckResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceHealthCheckResult::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_last_status_change_isValid = ::OpenAPI::fromJsonValue(m_last_status_change, json[QString("lastStatusChange")]);
    m_last_status_change_isSet = !json[QString("lastStatusChange")].isNull() && m_last_status_change_isValid;
}

QString OAIInstanceHealthCheckResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceHealthCheckResult::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_last_status_change_isSet) {
        obj.insert(QString("lastStatusChange"), ::OpenAPI::toJsonValue(m_last_status_change));
    }
    return obj;
}

OAIInstanceHealthCheckType OAIInstanceHealthCheckResult::getType() const {
    return m_type;
}
void OAIInstanceHealthCheckResult::setType(const OAIInstanceHealthCheckType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInstanceHealthCheckResult::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInstanceHealthCheckResult::is_type_Valid() const{
    return m_type_isValid;
}

OAIInstanceHealthCheckState OAIInstanceHealthCheckResult::getStatus() const {
    return m_status;
}
void OAIInstanceHealthCheckResult::setStatus(const OAIInstanceHealthCheckState &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInstanceHealthCheckResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInstanceHealthCheckResult::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIInstanceHealthCheckResult::getLastUpdated() const {
    return m_last_updated;
}
void OAIInstanceHealthCheckResult::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIInstanceHealthCheckResult::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIInstanceHealthCheckResult::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QDateTime OAIInstanceHealthCheckResult::getLastStatusChange() const {
    return m_last_status_change;
}
void OAIInstanceHealthCheckResult::setLastStatusChange(const QDateTime &last_status_change) {
    m_last_status_change = last_status_change;
    m_last_status_change_isSet = true;
}

bool OAIInstanceHealthCheckResult::is_last_status_change_Set() const{
    return m_last_status_change_isSet;
}

bool OAIInstanceHealthCheckResult::is_last_status_change_Valid() const{
    return m_last_status_change_isValid;
}

bool OAIInstanceHealthCheckResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_change_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceHealthCheckResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
