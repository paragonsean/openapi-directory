/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterContainerInstanceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterContainerInstanceRequest::OAIRegisterContainerInstanceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterContainerInstanceRequest::OAIRegisterContainerInstanceRequest() {
    this->initializeModel();
}

OAIRegisterContainerInstanceRequest::~OAIRegisterContainerInstanceRequest() {}

void OAIRegisterContainerInstanceRequest::initializeModel() {

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_instance_identity_document_isSet = false;
    m_instance_identity_document_isValid = false;

    m_instance_identity_document_signature_isSet = false;
    m_instance_identity_document_signature_isValid = false;

    m_total_resources_isSet = false;
    m_total_resources_isValid = false;

    m_version_info_isSet = false;
    m_version_info_isValid = false;

    m_container_instance_arn_isSet = false;
    m_container_instance_arn_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_platform_devices_isSet = false;
    m_platform_devices_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIRegisterContainerInstanceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterContainerInstanceRequest::fromJsonObject(QJsonObject json) {

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_instance_identity_document_isValid = ::OpenAPI::fromJsonValue(m_instance_identity_document, json[QString("instanceIdentityDocument")]);
    m_instance_identity_document_isSet = !json[QString("instanceIdentityDocument")].isNull() && m_instance_identity_document_isValid;

    m_instance_identity_document_signature_isValid = ::OpenAPI::fromJsonValue(m_instance_identity_document_signature, json[QString("instanceIdentityDocumentSignature")]);
    m_instance_identity_document_signature_isSet = !json[QString("instanceIdentityDocumentSignature")].isNull() && m_instance_identity_document_signature_isValid;

    m_total_resources_isValid = ::OpenAPI::fromJsonValue(m_total_resources, json[QString("totalResources")]);
    m_total_resources_isSet = !json[QString("totalResources")].isNull() && m_total_resources_isValid;

    m_version_info_isValid = ::OpenAPI::fromJsonValue(m_version_info, json[QString("versionInfo")]);
    m_version_info_isSet = !json[QString("versionInfo")].isNull() && m_version_info_isValid;

    m_container_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_container_instance_arn, json[QString("containerInstanceArn")]);
    m_container_instance_arn_isSet = !json[QString("containerInstanceArn")].isNull() && m_container_instance_arn_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_platform_devices_isValid = ::OpenAPI::fromJsonValue(m_platform_devices, json[QString("platformDevices")]);
    m_platform_devices_isSet = !json[QString("platformDevices")].isNull() && m_platform_devices_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIRegisterContainerInstanceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterContainerInstanceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_instance_identity_document_isSet) {
        obj.insert(QString("instanceIdentityDocument"), ::OpenAPI::toJsonValue(m_instance_identity_document));
    }
    if (m_instance_identity_document_signature_isSet) {
        obj.insert(QString("instanceIdentityDocumentSignature"), ::OpenAPI::toJsonValue(m_instance_identity_document_signature));
    }
    if (m_total_resources.isSet()) {
        obj.insert(QString("totalResources"), ::OpenAPI::toJsonValue(m_total_resources));
    }
    if (m_version_info.isSet()) {
        obj.insert(QString("versionInfo"), ::OpenAPI::toJsonValue(m_version_info));
    }
    if (m_container_instance_arn_isSet) {
        obj.insert(QString("containerInstanceArn"), ::OpenAPI::toJsonValue(m_container_instance_arn));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_platform_devices.isSet()) {
        obj.insert(QString("platformDevices"), ::OpenAPI::toJsonValue(m_platform_devices));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIRegisterContainerInstanceRequest::getCluster() const {
    return m_cluster;
}
void OAIRegisterContainerInstanceRequest::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIRegisterContainerInstanceRequest::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIRegisterContainerInstanceRequest::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIRegisterContainerInstanceRequest::getInstanceIdentityDocument() const {
    return m_instance_identity_document;
}
void OAIRegisterContainerInstanceRequest::setInstanceIdentityDocument(const QString &instance_identity_document) {
    m_instance_identity_document = instance_identity_document;
    m_instance_identity_document_isSet = true;
}

bool OAIRegisterContainerInstanceRequest::is_instance_identity_document_Set() const{
    return m_instance_identity_document_isSet;
}

bool OAIRegisterContainerInstanceRequest::is_instance_identity_document_Valid() const{
    return m_instance_identity_document_isValid;
}

QString OAIRegisterContainerInstanceRequest::getInstanceIdentityDocumentSignature() const {
    return m_instance_identity_document_signature;
}
void OAIRegisterContainerInstanceRequest::setInstanceIdentityDocumentSignature(const QString &instance_identity_document_signature) {
    m_instance_identity_document_signature = instance_identity_document_signature;
    m_instance_identity_document_signature_isSet = true;
}

bool OAIRegisterContainerInstanceRequest::is_instance_identity_document_signature_Set() const{
    return m_instance_identity_document_signature_isSet;
}

bool OAIRegisterContainerInstanceRequest::is_instance_identity_document_signature_Valid() const{
    return m_instance_identity_document_signature_isValid;
}

QList OAIRegisterContainerInstanceRequest::getTotalResources() const {
    return m_total_resources;
}
void OAIRegisterContainerInstanceRequest::setTotalResources(const QList &total_resources) {
    m_total_resources = total_resources;
    m_total_resources_isSet = true;
}

bool OAIRegisterContainerInstanceRequest::is_total_resources_Set() const{
    return m_total_resources_isSet;
}

bool OAIRegisterContainerInstanceRequest::is_total_resources_Valid() const{
    return m_total_resources_isValid;
}

OAIRegisterContainerInstanceRequest_versionInfo OAIRegisterContainerInstanceRequest::getVersionInfo() const {
    return m_version_info;
}
void OAIRegisterContainerInstanceRequest::setVersionInfo(const OAIRegisterContainerInstanceRequest_versionInfo &version_info) {
    m_version_info = version_info;
    m_version_info_isSet = true;
}

bool OAIRegisterContainerInstanceRequest::is_version_info_Set() const{
    return m_version_info_isSet;
}

bool OAIRegisterContainerInstanceRequest::is_version_info_Valid() const{
    return m_version_info_isValid;
}

QString OAIRegisterContainerInstanceRequest::getContainerInstanceArn() const {
    return m_container_instance_arn;
}
void OAIRegisterContainerInstanceRequest::setContainerInstanceArn(const QString &container_instance_arn) {
    m_container_instance_arn = container_instance_arn;
    m_container_instance_arn_isSet = true;
}

bool OAIRegisterContainerInstanceRequest::is_container_instance_arn_Set() const{
    return m_container_instance_arn_isSet;
}

bool OAIRegisterContainerInstanceRequest::is_container_instance_arn_Valid() const{
    return m_container_instance_arn_isValid;
}

QList OAIRegisterContainerInstanceRequest::getAttributes() const {
    return m_attributes;
}
void OAIRegisterContainerInstanceRequest::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIRegisterContainerInstanceRequest::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIRegisterContainerInstanceRequest::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList OAIRegisterContainerInstanceRequest::getPlatformDevices() const {
    return m_platform_devices;
}
void OAIRegisterContainerInstanceRequest::setPlatformDevices(const QList &platform_devices) {
    m_platform_devices = platform_devices;
    m_platform_devices_isSet = true;
}

bool OAIRegisterContainerInstanceRequest::is_platform_devices_Set() const{
    return m_platform_devices_isSet;
}

bool OAIRegisterContainerInstanceRequest::is_platform_devices_Valid() const{
    return m_platform_devices_isValid;
}

QList OAIRegisterContainerInstanceRequest::getTags() const {
    return m_tags;
}
void OAIRegisterContainerInstanceRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRegisterContainerInstanceRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRegisterContainerInstanceRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIRegisterContainerInstanceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_identity_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_identity_document_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_devices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterContainerInstanceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
