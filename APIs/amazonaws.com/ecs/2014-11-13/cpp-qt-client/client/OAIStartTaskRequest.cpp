/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartTaskRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartTaskRequest::OAIStartTaskRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartTaskRequest::OAIStartTaskRequest() {
    this->initializeModel();
}

OAIStartTaskRequest::~OAIStartTaskRequest() {}

void OAIStartTaskRequest::initializeModel() {

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_container_instances_isSet = false;
    m_container_instances_isValid = false;

    m_enable_ecs_managed_tags_isSet = false;
    m_enable_ecs_managed_tags_isValid = false;

    m_enable_execute_command_isSet = false;
    m_enable_execute_command_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_propagate_tags_isSet = false;
    m_propagate_tags_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_started_by_isSet = false;
    m_started_by_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_task_definition_isSet = false;
    m_task_definition_isValid = false;
}

void OAIStartTaskRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartTaskRequest::fromJsonObject(QJsonObject json) {

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_container_instances_isValid = ::OpenAPI::fromJsonValue(m_container_instances, json[QString("containerInstances")]);
    m_container_instances_isSet = !json[QString("containerInstances")].isNull() && m_container_instances_isValid;

    m_enable_ecs_managed_tags_isValid = ::OpenAPI::fromJsonValue(m_enable_ecs_managed_tags, json[QString("enableECSManagedTags")]);
    m_enable_ecs_managed_tags_isSet = !json[QString("enableECSManagedTags")].isNull() && m_enable_ecs_managed_tags_isValid;

    m_enable_execute_command_isValid = ::OpenAPI::fromJsonValue(m_enable_execute_command, json[QString("enableExecuteCommand")]);
    m_enable_execute_command_isSet = !json[QString("enableExecuteCommand")].isNull() && m_enable_execute_command_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("networkConfiguration")]);
    m_network_configuration_isSet = !json[QString("networkConfiguration")].isNull() && m_network_configuration_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;

    m_propagate_tags_isValid = ::OpenAPI::fromJsonValue(m_propagate_tags, json[QString("propagateTags")]);
    m_propagate_tags_isSet = !json[QString("propagateTags")].isNull() && m_propagate_tags_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_started_by_isValid = ::OpenAPI::fromJsonValue(m_started_by, json[QString("startedBy")]);
    m_started_by_isSet = !json[QString("startedBy")].isNull() && m_started_by_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_task_definition_isValid = ::OpenAPI::fromJsonValue(m_task_definition, json[QString("taskDefinition")]);
    m_task_definition_isSet = !json[QString("taskDefinition")].isNull() && m_task_definition_isValid;
}

QString OAIStartTaskRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartTaskRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_container_instances.isSet()) {
        obj.insert(QString("containerInstances"), ::OpenAPI::toJsonValue(m_container_instances));
    }
    if (m_enable_ecs_managed_tags_isSet) {
        obj.insert(QString("enableECSManagedTags"), ::OpenAPI::toJsonValue(m_enable_ecs_managed_tags));
    }
    if (m_enable_execute_command_isSet) {
        obj.insert(QString("enableExecuteCommand"), ::OpenAPI::toJsonValue(m_enable_execute_command));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("networkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_overrides.isSet()) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_propagate_tags.isSet()) {
        obj.insert(QString("propagateTags"), ::OpenAPI::toJsonValue(m_propagate_tags));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_started_by_isSet) {
        obj.insert(QString("startedBy"), ::OpenAPI::toJsonValue(m_started_by));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_task_definition_isSet) {
        obj.insert(QString("taskDefinition"), ::OpenAPI::toJsonValue(m_task_definition));
    }
    return obj;
}

QString OAIStartTaskRequest::getCluster() const {
    return m_cluster;
}
void OAIStartTaskRequest::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIStartTaskRequest::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIStartTaskRequest::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QList OAIStartTaskRequest::getContainerInstances() const {
    return m_container_instances;
}
void OAIStartTaskRequest::setContainerInstances(const QList &container_instances) {
    m_container_instances = container_instances;
    m_container_instances_isSet = true;
}

bool OAIStartTaskRequest::is_container_instances_Set() const{
    return m_container_instances_isSet;
}

bool OAIStartTaskRequest::is_container_instances_Valid() const{
    return m_container_instances_isValid;
}

bool OAIStartTaskRequest::getEnableEcsManagedTags() const {
    return m_enable_ecs_managed_tags;
}
void OAIStartTaskRequest::setEnableEcsManagedTags(const bool &enable_ecs_managed_tags) {
    m_enable_ecs_managed_tags = enable_ecs_managed_tags;
    m_enable_ecs_managed_tags_isSet = true;
}

bool OAIStartTaskRequest::is_enable_ecs_managed_tags_Set() const{
    return m_enable_ecs_managed_tags_isSet;
}

bool OAIStartTaskRequest::is_enable_ecs_managed_tags_Valid() const{
    return m_enable_ecs_managed_tags_isValid;
}

bool OAIStartTaskRequest::getEnableExecuteCommand() const {
    return m_enable_execute_command;
}
void OAIStartTaskRequest::setEnableExecuteCommand(const bool &enable_execute_command) {
    m_enable_execute_command = enable_execute_command;
    m_enable_execute_command_isSet = true;
}

bool OAIStartTaskRequest::is_enable_execute_command_Set() const{
    return m_enable_execute_command_isSet;
}

bool OAIStartTaskRequest::is_enable_execute_command_Valid() const{
    return m_enable_execute_command_isValid;
}

QString OAIStartTaskRequest::getGroup() const {
    return m_group;
}
void OAIStartTaskRequest::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIStartTaskRequest::is_group_Set() const{
    return m_group_isSet;
}

bool OAIStartTaskRequest::is_group_Valid() const{
    return m_group_isValid;
}

OAIStartTaskRequest_networkConfiguration OAIStartTaskRequest::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIStartTaskRequest::setNetworkConfiguration(const OAIStartTaskRequest_networkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIStartTaskRequest::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIStartTaskRequest::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

OAIStartTaskRequest_overrides OAIStartTaskRequest::getOverrides() const {
    return m_overrides;
}
void OAIStartTaskRequest::setOverrides(const OAIStartTaskRequest_overrides &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAIStartTaskRequest::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAIStartTaskRequest::is_overrides_Valid() const{
    return m_overrides_isValid;
}

OAIPropagateTags OAIStartTaskRequest::getPropagateTags() const {
    return m_propagate_tags;
}
void OAIStartTaskRequest::setPropagateTags(const OAIPropagateTags &propagate_tags) {
    m_propagate_tags = propagate_tags;
    m_propagate_tags_isSet = true;
}

bool OAIStartTaskRequest::is_propagate_tags_Set() const{
    return m_propagate_tags_isSet;
}

bool OAIStartTaskRequest::is_propagate_tags_Valid() const{
    return m_propagate_tags_isValid;
}

QString OAIStartTaskRequest::getReferenceId() const {
    return m_reference_id;
}
void OAIStartTaskRequest::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIStartTaskRequest::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIStartTaskRequest::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QString OAIStartTaskRequest::getStartedBy() const {
    return m_started_by;
}
void OAIStartTaskRequest::setStartedBy(const QString &started_by) {
    m_started_by = started_by;
    m_started_by_isSet = true;
}

bool OAIStartTaskRequest::is_started_by_Set() const{
    return m_started_by_isSet;
}

bool OAIStartTaskRequest::is_started_by_Valid() const{
    return m_started_by_isValid;
}

QList OAIStartTaskRequest::getTags() const {
    return m_tags;
}
void OAIStartTaskRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartTaskRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartTaskRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIStartTaskRequest::getTaskDefinition() const {
    return m_task_definition;
}
void OAIStartTaskRequest::setTaskDefinition(const QString &task_definition) {
    m_task_definition = task_definition;
    m_task_definition_isSet = true;
}

bool OAIStartTaskRequest::is_task_definition_Set() const{
    return m_task_definition_isSet;
}

bool OAIStartTaskRequest::is_task_definition_Valid() const{
    return m_task_definition_isValid;
}

bool OAIStartTaskRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ecs_managed_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_execute_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_propagate_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_definition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartTaskRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_container_instances_isValid && m_task_definition_isValid && true;
}

} // namespace OpenAPI
