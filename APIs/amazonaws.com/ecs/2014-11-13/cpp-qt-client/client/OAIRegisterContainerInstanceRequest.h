/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRegisterContainerInstanceRequest.h
 *
 * 
 */

#ifndef OAIRegisterContainerInstanceRequest_H
#define OAIRegisterContainerInstanceRequest_H

#include <QJsonObject>

#include "OAIRegisterContainerInstanceRequest_versionInfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRegisterContainerInstanceRequest_versionInfo;

class OAIRegisterContainerInstanceRequest : public OAIObject {
public:
    OAIRegisterContainerInstanceRequest();
    OAIRegisterContainerInstanceRequest(QString json);
    ~OAIRegisterContainerInstanceRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCluster() const;
    void setCluster(const QString &cluster);
    bool is_cluster_Set() const;
    bool is_cluster_Valid() const;

    QString getInstanceIdentityDocument() const;
    void setInstanceIdentityDocument(const QString &instance_identity_document);
    bool is_instance_identity_document_Set() const;
    bool is_instance_identity_document_Valid() const;

    QString getInstanceIdentityDocumentSignature() const;
    void setInstanceIdentityDocumentSignature(const QString &instance_identity_document_signature);
    bool is_instance_identity_document_signature_Set() const;
    bool is_instance_identity_document_signature_Valid() const;

    QList getTotalResources() const;
    void setTotalResources(const QList &total_resources);
    bool is_total_resources_Set() const;
    bool is_total_resources_Valid() const;

    OAIRegisterContainerInstanceRequest_versionInfo getVersionInfo() const;
    void setVersionInfo(const OAIRegisterContainerInstanceRequest_versionInfo &version_info);
    bool is_version_info_Set() const;
    bool is_version_info_Valid() const;

    QString getContainerInstanceArn() const;
    void setContainerInstanceArn(const QString &container_instance_arn);
    bool is_container_instance_arn_Set() const;
    bool is_container_instance_arn_Valid() const;

    QList getAttributes() const;
    void setAttributes(const QList &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QList getPlatformDevices() const;
    void setPlatformDevices(const QList &platform_devices);
    bool is_platform_devices_Set() const;
    bool is_platform_devices_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster;
    bool m_cluster_isSet;
    bool m_cluster_isValid;

    QString m_instance_identity_document;
    bool m_instance_identity_document_isSet;
    bool m_instance_identity_document_isValid;

    QString m_instance_identity_document_signature;
    bool m_instance_identity_document_signature_isSet;
    bool m_instance_identity_document_signature_isValid;

    QList m_total_resources;
    bool m_total_resources_isSet;
    bool m_total_resources_isValid;

    OAIRegisterContainerInstanceRequest_versionInfo m_version_info;
    bool m_version_info_isSet;
    bool m_version_info_isValid;

    QString m_container_instance_arn;
    bool m_container_instance_arn_isSet;
    bool m_container_instance_arn_isValid;

    QList m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QList m_platform_devices;
    bool m_platform_devices_isSet;
    bool m_platform_devices_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRegisterContainerInstanceRequest)

#endif // OAIRegisterContainerInstanceRequest_H
