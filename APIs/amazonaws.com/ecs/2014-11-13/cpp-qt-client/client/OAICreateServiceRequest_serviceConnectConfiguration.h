/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateServiceRequest_serviceConnectConfiguration.h
 *
 * 
 */

#ifndef OAICreateServiceRequest_serviceConnectConfiguration_H
#define OAICreateServiceRequest_serviceConnectConfiguration_H

#include <QJsonObject>

#include "OAILogConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILogConfiguration;

class OAICreateServiceRequest_serviceConnectConfiguration : public OAIObject {
public:
    OAICreateServiceRequest_serviceConnectConfiguration();
    OAICreateServiceRequest_serviceConnectConfiguration(QString json);
    ~OAICreateServiceRequest_serviceConnectConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    QList getServices() const;
    void setServices(const QList &services);
    bool is_services_Set() const;
    bool is_services_Valid() const;

    OAILogConfiguration getLogConfiguration() const;
    void setLogConfiguration(const OAILogConfiguration &log_configuration);
    bool is_log_configuration_Set() const;
    bool is_log_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    QList m_services;
    bool m_services_isSet;
    bool m_services_isValid;

    OAILogConfiguration m_log_configuration;
    bool m_log_configuration_isSet;
    bool m_log_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateServiceRequest_serviceConnectConfiguration)

#endif // OAICreateServiceRequest_serviceConnectConfiguration_H
