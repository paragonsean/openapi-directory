/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProxyConfiguration.h
 *
 * &lt;p&gt;The configuration details for the App Mesh proxy.&lt;/p&gt; &lt;p&gt;For tasks that use the EC2 launch type, the container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the &lt;code&gt;ecs-init&lt;/code&gt; package to use a proxy configuration. If your container instances are launched from the Amazon ECS optimized AMI version &lt;code&gt;20190301&lt;/code&gt; or later, then they contain the required versions of the container agent and &lt;code&gt;ecs-init&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html\&quot;&gt;Amazon ECS-optimized Linux AMI&lt;/a&gt; &lt;/p&gt;
 */

#ifndef OAIProxyConfiguration_H
#define OAIProxyConfiguration_H

#include <QJsonObject>

#include "OAIProxyConfigurationType.h"
#include <QJsonValue>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIProxyConfiguration : public OAIObject {
public:
    OAIProxyConfiguration();
    OAIProxyConfiguration(QString json);
    ~OAIProxyConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIProxyConfigurationType getType() const;
    void setType(const OAIProxyConfigurationType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getContainerName() const;
    void setContainerName(const QString &container_name);
    bool is_container_name_Set() const;
    bool is_container_name_Valid() const;

    QJsonValue getProperties() const;
    void setProperties(const QJsonValue &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIProxyConfigurationType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_container_name;
    bool m_container_name_isSet;
    bool m_container_name_isValid;

    QJsonValue m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProxyConfiguration)

#endif // OAIProxyConfiguration_H
