/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterContainerInstanceResponse_containerInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterContainerInstanceResponse_containerInstance::OAIRegisterContainerInstanceResponse_containerInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterContainerInstanceResponse_containerInstance::OAIRegisterContainerInstanceResponse_containerInstance() {
    this->initializeModel();
}

OAIRegisterContainerInstanceResponse_containerInstance::~OAIRegisterContainerInstanceResponse_containerInstance() {}

void OAIRegisterContainerInstanceResponse_containerInstance::initializeModel() {

    m_container_instance_arn_isSet = false;
    m_container_instance_arn_isValid = false;

    m_ec2_instance_id_isSet = false;
    m_ec2_instance_id_isValid = false;

    m_capacity_provider_name_isSet = false;
    m_capacity_provider_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_version_info_isSet = false;
    m_version_info_isValid = false;

    m_remaining_resources_isSet = false;
    m_remaining_resources_isValid = false;

    m_registered_resources_isSet = false;
    m_registered_resources_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_agent_connected_isSet = false;
    m_agent_connected_isValid = false;

    m_running_tasks_count_isSet = false;
    m_running_tasks_count_isValid = false;

    m_pending_tasks_count_isSet = false;
    m_pending_tasks_count_isValid = false;

    m_agent_update_status_isSet = false;
    m_agent_update_status_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_registered_at_isSet = false;
    m_registered_at_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;
}

void OAIRegisterContainerInstanceResponse_containerInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterContainerInstanceResponse_containerInstance::fromJsonObject(QJsonObject json) {

    m_container_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_container_instance_arn, json[QString("containerInstanceArn")]);
    m_container_instance_arn_isSet = !json[QString("containerInstanceArn")].isNull() && m_container_instance_arn_isValid;

    m_ec2_instance_id_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_id, json[QString("ec2InstanceId")]);
    m_ec2_instance_id_isSet = !json[QString("ec2InstanceId")].isNull() && m_ec2_instance_id_isValid;

    m_capacity_provider_name_isValid = ::OpenAPI::fromJsonValue(m_capacity_provider_name, json[QString("capacityProviderName")]);
    m_capacity_provider_name_isSet = !json[QString("capacityProviderName")].isNull() && m_capacity_provider_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_version_info_isValid = ::OpenAPI::fromJsonValue(m_version_info, json[QString("versionInfo")]);
    m_version_info_isSet = !json[QString("versionInfo")].isNull() && m_version_info_isValid;

    m_remaining_resources_isValid = ::OpenAPI::fromJsonValue(m_remaining_resources, json[QString("remainingResources")]);
    m_remaining_resources_isSet = !json[QString("remainingResources")].isNull() && m_remaining_resources_isValid;

    m_registered_resources_isValid = ::OpenAPI::fromJsonValue(m_registered_resources, json[QString("registeredResources")]);
    m_registered_resources_isSet = !json[QString("registeredResources")].isNull() && m_registered_resources_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;

    m_agent_connected_isValid = ::OpenAPI::fromJsonValue(m_agent_connected, json[QString("agentConnected")]);
    m_agent_connected_isSet = !json[QString("agentConnected")].isNull() && m_agent_connected_isValid;

    m_running_tasks_count_isValid = ::OpenAPI::fromJsonValue(m_running_tasks_count, json[QString("runningTasksCount")]);
    m_running_tasks_count_isSet = !json[QString("runningTasksCount")].isNull() && m_running_tasks_count_isValid;

    m_pending_tasks_count_isValid = ::OpenAPI::fromJsonValue(m_pending_tasks_count, json[QString("pendingTasksCount")]);
    m_pending_tasks_count_isSet = !json[QString("pendingTasksCount")].isNull() && m_pending_tasks_count_isValid;

    m_agent_update_status_isValid = ::OpenAPI::fromJsonValue(m_agent_update_status, json[QString("agentUpdateStatus")]);
    m_agent_update_status_isSet = !json[QString("agentUpdateStatus")].isNull() && m_agent_update_status_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_registered_at_isValid = ::OpenAPI::fromJsonValue(m_registered_at, json[QString("registeredAt")]);
    m_registered_at_isSet = !json[QString("registeredAt")].isNull() && m_registered_at_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;
}

QString OAIRegisterContainerInstanceResponse_containerInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterContainerInstanceResponse_containerInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_container_instance_arn_isSet) {
        obj.insert(QString("containerInstanceArn"), ::OpenAPI::toJsonValue(m_container_instance_arn));
    }
    if (m_ec2_instance_id_isSet) {
        obj.insert(QString("ec2InstanceId"), ::OpenAPI::toJsonValue(m_ec2_instance_id));
    }
    if (m_capacity_provider_name_isSet) {
        obj.insert(QString("capacityProviderName"), ::OpenAPI::toJsonValue(m_capacity_provider_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_version_info.isSet()) {
        obj.insert(QString("versionInfo"), ::OpenAPI::toJsonValue(m_version_info));
    }
    if (m_remaining_resources.isSet()) {
        obj.insert(QString("remainingResources"), ::OpenAPI::toJsonValue(m_remaining_resources));
    }
    if (m_registered_resources.isSet()) {
        obj.insert(QString("registeredResources"), ::OpenAPI::toJsonValue(m_registered_resources));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_agent_connected_isSet) {
        obj.insert(QString("agentConnected"), ::OpenAPI::toJsonValue(m_agent_connected));
    }
    if (m_running_tasks_count_isSet) {
        obj.insert(QString("runningTasksCount"), ::OpenAPI::toJsonValue(m_running_tasks_count));
    }
    if (m_pending_tasks_count_isSet) {
        obj.insert(QString("pendingTasksCount"), ::OpenAPI::toJsonValue(m_pending_tasks_count));
    }
    if (m_agent_update_status.isSet()) {
        obj.insert(QString("agentUpdateStatus"), ::OpenAPI::toJsonValue(m_agent_update_status));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_registered_at_isSet) {
        obj.insert(QString("registeredAt"), ::OpenAPI::toJsonValue(m_registered_at));
    }
    if (m_attachments.isSet()) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_health_status.isSet()) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    return obj;
}

QString OAIRegisterContainerInstanceResponse_containerInstance::getContainerInstanceArn() const {
    return m_container_instance_arn;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setContainerInstanceArn(const QString &container_instance_arn) {
    m_container_instance_arn = container_instance_arn;
    m_container_instance_arn_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_container_instance_arn_Set() const{
    return m_container_instance_arn_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_container_instance_arn_Valid() const{
    return m_container_instance_arn_isValid;
}

QString OAIRegisterContainerInstanceResponse_containerInstance::getEc2InstanceId() const {
    return m_ec2_instance_id;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setEc2InstanceId(const QString &ec2_instance_id) {
    m_ec2_instance_id = ec2_instance_id;
    m_ec2_instance_id_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_ec2_instance_id_Set() const{
    return m_ec2_instance_id_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_ec2_instance_id_Valid() const{
    return m_ec2_instance_id_isValid;
}

QString OAIRegisterContainerInstanceResponse_containerInstance::getCapacityProviderName() const {
    return m_capacity_provider_name;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setCapacityProviderName(const QString &capacity_provider_name) {
    m_capacity_provider_name = capacity_provider_name;
    m_capacity_provider_name_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_capacity_provider_name_Set() const{
    return m_capacity_provider_name_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_capacity_provider_name_Valid() const{
    return m_capacity_provider_name_isValid;
}

qint32 OAIRegisterContainerInstanceResponse_containerInstance::getVersion() const {
    return m_version;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_version_Valid() const{
    return m_version_isValid;
}

OAIContainerInstance_versionInfo OAIRegisterContainerInstanceResponse_containerInstance::getVersionInfo() const {
    return m_version_info;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setVersionInfo(const OAIContainerInstance_versionInfo &version_info) {
    m_version_info = version_info;
    m_version_info_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_version_info_Set() const{
    return m_version_info_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_version_info_Valid() const{
    return m_version_info_isValid;
}

QList OAIRegisterContainerInstanceResponse_containerInstance::getRemainingResources() const {
    return m_remaining_resources;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setRemainingResources(const QList &remaining_resources) {
    m_remaining_resources = remaining_resources;
    m_remaining_resources_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_remaining_resources_Set() const{
    return m_remaining_resources_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_remaining_resources_Valid() const{
    return m_remaining_resources_isValid;
}

QList OAIRegisterContainerInstanceResponse_containerInstance::getRegisteredResources() const {
    return m_registered_resources;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setRegisteredResources(const QList &registered_resources) {
    m_registered_resources = registered_resources;
    m_registered_resources_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_registered_resources_Set() const{
    return m_registered_resources_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_registered_resources_Valid() const{
    return m_registered_resources_isValid;
}

QString OAIRegisterContainerInstanceResponse_containerInstance::getStatus() const {
    return m_status;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRegisterContainerInstanceResponse_containerInstance::getStatusReason() const {
    return m_status_reason;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::getAgentConnected() const {
    return m_agent_connected;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setAgentConnected(const bool &agent_connected) {
    m_agent_connected = agent_connected;
    m_agent_connected_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_agent_connected_Set() const{
    return m_agent_connected_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_agent_connected_Valid() const{
    return m_agent_connected_isValid;
}

qint32 OAIRegisterContainerInstanceResponse_containerInstance::getRunningTasksCount() const {
    return m_running_tasks_count;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setRunningTasksCount(const qint32 &running_tasks_count) {
    m_running_tasks_count = running_tasks_count;
    m_running_tasks_count_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_running_tasks_count_Set() const{
    return m_running_tasks_count_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_running_tasks_count_Valid() const{
    return m_running_tasks_count_isValid;
}

qint32 OAIRegisterContainerInstanceResponse_containerInstance::getPendingTasksCount() const {
    return m_pending_tasks_count;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setPendingTasksCount(const qint32 &pending_tasks_count) {
    m_pending_tasks_count = pending_tasks_count;
    m_pending_tasks_count_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_pending_tasks_count_Set() const{
    return m_pending_tasks_count_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_pending_tasks_count_Valid() const{
    return m_pending_tasks_count_isValid;
}

OAIAgentUpdateStatus OAIRegisterContainerInstanceResponse_containerInstance::getAgentUpdateStatus() const {
    return m_agent_update_status;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setAgentUpdateStatus(const OAIAgentUpdateStatus &agent_update_status) {
    m_agent_update_status = agent_update_status;
    m_agent_update_status_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_agent_update_status_Set() const{
    return m_agent_update_status_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_agent_update_status_Valid() const{
    return m_agent_update_status_isValid;
}

QList OAIRegisterContainerInstanceResponse_containerInstance::getAttributes() const {
    return m_attributes;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QDateTime OAIRegisterContainerInstanceResponse_containerInstance::getRegisteredAt() const {
    return m_registered_at;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setRegisteredAt(const QDateTime &registered_at) {
    m_registered_at = registered_at;
    m_registered_at_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_registered_at_Set() const{
    return m_registered_at_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_registered_at_Valid() const{
    return m_registered_at_isValid;
}

QList OAIRegisterContainerInstanceResponse_containerInstance::getAttachments() const {
    return m_attachments;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setAttachments(const QList &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QList OAIRegisterContainerInstanceResponse_containerInstance::getTags() const {
    return m_tags;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIContainerInstance_healthStatus OAIRegisterContainerInstanceResponse_containerInstance::getHealthStatus() const {
    return m_health_status;
}
void OAIRegisterContainerInstanceResponse_containerInstance::setHealthStatus(const OAIContainerInstance_healthStatus &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::is_health_status_Valid() const{
    return m_health_status_isValid;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_connected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_tasks_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_tasks_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_update_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterContainerInstanceResponse_containerInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
