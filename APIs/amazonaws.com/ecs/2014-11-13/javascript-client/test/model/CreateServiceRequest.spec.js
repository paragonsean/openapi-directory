/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2ContainerService);
  }
}(this, function(expect, AmazonEc2ContainerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2ContainerService.CreateServiceRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateServiceRequest', function() {
    it('should create an instance of CreateServiceRequest', function() {
      // uncomment below and update the code to test CreateServiceRequest
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be.a(AmazonEc2ContainerService.CreateServiceRequest);
    });

    it('should have the property cluster (base name: "cluster")', function() {
      // uncomment below and update the code to test the property cluster
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property serviceName (base name: "serviceName")', function() {
      // uncomment below and update the code to test the property serviceName
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property taskDefinition (base name: "taskDefinition")', function() {
      // uncomment below and update the code to test the property taskDefinition
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancers (base name: "loadBalancers")', function() {
      // uncomment below and update the code to test the property loadBalancers
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property serviceRegistries (base name: "serviceRegistries")', function() {
      // uncomment below and update the code to test the property serviceRegistries
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property desiredCount (base name: "desiredCount")', function() {
      // uncomment below and update the code to test the property desiredCount
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property clientToken (base name: "clientToken")', function() {
      // uncomment below and update the code to test the property clientToken
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property launchType (base name: "launchType")', function() {
      // uncomment below and update the code to test the property launchType
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property capacityProviderStrategy (base name: "capacityProviderStrategy")', function() {
      // uncomment below and update the code to test the property capacityProviderStrategy
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property platformVersion (base name: "platformVersion")', function() {
      // uncomment below and update the code to test the property platformVersion
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property role (base name: "role")', function() {
      // uncomment below and update the code to test the property role
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property deploymentConfiguration (base name: "deploymentConfiguration")', function() {
      // uncomment below and update the code to test the property deploymentConfiguration
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property placementConstraints (base name: "placementConstraints")', function() {
      // uncomment below and update the code to test the property placementConstraints
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property placementStrategy (base name: "placementStrategy")', function() {
      // uncomment below and update the code to test the property placementStrategy
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property networkConfiguration (base name: "networkConfiguration")', function() {
      // uncomment below and update the code to test the property networkConfiguration
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property healthCheckGracePeriodSeconds (base name: "healthCheckGracePeriodSeconds")', function() {
      // uncomment below and update the code to test the property healthCheckGracePeriodSeconds
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property schedulingStrategy (base name: "schedulingStrategy")', function() {
      // uncomment below and update the code to test the property schedulingStrategy
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property deploymentController (base name: "deploymentController")', function() {
      // uncomment below and update the code to test the property deploymentController
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property enableECSManagedTags (base name: "enableECSManagedTags")', function() {
      // uncomment below and update the code to test the property enableECSManagedTags
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property propagateTags (base name: "propagateTags")', function() {
      // uncomment below and update the code to test the property propagateTags
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property enableExecuteCommand (base name: "enableExecuteCommand")', function() {
      // uncomment below and update the code to test the property enableExecuteCommand
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

    it('should have the property serviceConnectConfiguration (base name: "serviceConnectConfiguration")', function() {
      // uncomment below and update the code to test the property serviceConnectConfiguration
      //var instance = new AmazonEc2ContainerService.CreateServiceRequest();
      //expect(instance).to.be();
    });

  });

}));
