/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2ContainerService);
  }
}(this, function(expect, AmazonEc2ContainerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeregisterContainerInstanceResponseContainerInstance', function() {
    it('should create an instance of DeregisterContainerInstanceResponseContainerInstance', function() {
      // uncomment below and update the code to test DeregisterContainerInstanceResponseContainerInstance
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be.a(AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance);
    });

    it('should have the property containerInstanceArn (base name: "containerInstanceArn")', function() {
      // uncomment below and update the code to test the property containerInstanceArn
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property ec2InstanceId (base name: "ec2InstanceId")', function() {
      // uncomment below and update the code to test the property ec2InstanceId
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property capacityProviderName (base name: "capacityProviderName")', function() {
      // uncomment below and update the code to test the property capacityProviderName
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property versionInfo (base name: "versionInfo")', function() {
      // uncomment below and update the code to test the property versionInfo
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property remainingResources (base name: "remainingResources")', function() {
      // uncomment below and update the code to test the property remainingResources
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property registeredResources (base name: "registeredResources")', function() {
      // uncomment below and update the code to test the property registeredResources
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property statusReason (base name: "statusReason")', function() {
      // uncomment below and update the code to test the property statusReason
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property agentConnected (base name: "agentConnected")', function() {
      // uncomment below and update the code to test the property agentConnected
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property runningTasksCount (base name: "runningTasksCount")', function() {
      // uncomment below and update the code to test the property runningTasksCount
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property pendingTasksCount (base name: "pendingTasksCount")', function() {
      // uncomment below and update the code to test the property pendingTasksCount
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property agentUpdateStatus (base name: "agentUpdateStatus")', function() {
      // uncomment below and update the code to test the property agentUpdateStatus
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property attributes (base name: "attributes")', function() {
      // uncomment below and update the code to test the property attributes
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property registeredAt (base name: "registeredAt")', function() {
      // uncomment below and update the code to test the property registeredAt
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property attachments (base name: "attachments")', function() {
      // uncomment below and update the code to test the property attachments
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

    it('should have the property healthStatus (base name: "healthStatus")', function() {
      // uncomment below and update the code to test the property healthStatus
      //var instance = new AmazonEc2ContainerService.DeregisterContainerInstanceResponseContainerInstance();
      //expect(instance).to.be();
    });

  });

}));
