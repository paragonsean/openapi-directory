/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2ContainerService);
  }
}(this, function(expect, AmazonEc2ContainerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateTaskSetResponseTaskSet', function() {
    it('should create an instance of CreateTaskSetResponseTaskSet', function() {
      // uncomment below and update the code to test CreateTaskSetResponseTaskSet
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be.a(AmazonEc2ContainerService.CreateTaskSetResponseTaskSet);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property taskSetArn (base name: "taskSetArn")', function() {
      // uncomment below and update the code to test the property taskSetArn
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property serviceArn (base name: "serviceArn")', function() {
      // uncomment below and update the code to test the property serviceArn
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property clusterArn (base name: "clusterArn")', function() {
      // uncomment below and update the code to test the property clusterArn
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property startedBy (base name: "startedBy")', function() {
      // uncomment below and update the code to test the property startedBy
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property taskDefinition (base name: "taskDefinition")', function() {
      // uncomment below and update the code to test the property taskDefinition
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property computedDesiredCount (base name: "computedDesiredCount")', function() {
      // uncomment below and update the code to test the property computedDesiredCount
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property pendingCount (base name: "pendingCount")', function() {
      // uncomment below and update the code to test the property pendingCount
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property runningCount (base name: "runningCount")', function() {
      // uncomment below and update the code to test the property runningCount
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property launchType (base name: "launchType")', function() {
      // uncomment below and update the code to test the property launchType
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property capacityProviderStrategy (base name: "capacityProviderStrategy")', function() {
      // uncomment below and update the code to test the property capacityProviderStrategy
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property platformVersion (base name: "platformVersion")', function() {
      // uncomment below and update the code to test the property platformVersion
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property platformFamily (base name: "platformFamily")', function() {
      // uncomment below and update the code to test the property platformFamily
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property networkConfiguration (base name: "networkConfiguration")', function() {
      // uncomment below and update the code to test the property networkConfiguration
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancers (base name: "loadBalancers")', function() {
      // uncomment below and update the code to test the property loadBalancers
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property serviceRegistries (base name: "serviceRegistries")', function() {
      // uncomment below and update the code to test the property serviceRegistries
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property scale (base name: "scale")', function() {
      // uncomment below and update the code to test the property scale
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property stabilityStatus (base name: "stabilityStatus")', function() {
      // uncomment below and update the code to test the property stabilityStatus
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property stabilityStatusAt (base name: "stabilityStatusAt")', function() {
      // uncomment below and update the code to test the property stabilityStatusAt
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonEc2ContainerService.CreateTaskSetResponseTaskSet();
      //expect(instance).to.be();
    });

  });

}));
