/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2ContainerService);
  }
}(this, function(expect, AmazonEc2ContainerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2ContainerService.ContainerDefinition();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ContainerDefinition', function() {
    it('should create an instance of ContainerDefinition', function() {
      // uncomment below and update the code to test ContainerDefinition
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be.a(AmazonEc2ContainerService.ContainerDefinition);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "image")', function() {
      // uncomment below and update the code to test the property image
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property repositoryCredentials (base name: "repositoryCredentials")', function() {
      // uncomment below and update the code to test the property repositoryCredentials
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property cpu (base name: "cpu")', function() {
      // uncomment below and update the code to test the property cpu
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property memory (base name: "memory")', function() {
      // uncomment below and update the code to test the property memory
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property memoryReservation (base name: "memoryReservation")', function() {
      // uncomment below and update the code to test the property memoryReservation
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property links (base name: "links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property portMappings (base name: "portMappings")', function() {
      // uncomment below and update the code to test the property portMappings
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property essential (base name: "essential")', function() {
      // uncomment below and update the code to test the property essential
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property entryPoint (base name: "entryPoint")', function() {
      // uncomment below and update the code to test the property entryPoint
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property command (base name: "command")', function() {
      // uncomment below and update the code to test the property command
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property environment (base name: "environment")', function() {
      // uncomment below and update the code to test the property environment
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property environmentFiles (base name: "environmentFiles")', function() {
      // uncomment below and update the code to test the property environmentFiles
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property mountPoints (base name: "mountPoints")', function() {
      // uncomment below and update the code to test the property mountPoints
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property volumesFrom (base name: "volumesFrom")', function() {
      // uncomment below and update the code to test the property volumesFrom
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property linuxParameters (base name: "linuxParameters")', function() {
      // uncomment below and update the code to test the property linuxParameters
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property secrets (base name: "secrets")', function() {
      // uncomment below and update the code to test the property secrets
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property dependsOn (base name: "dependsOn")', function() {
      // uncomment below and update the code to test the property dependsOn
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property startTimeout (base name: "startTimeout")', function() {
      // uncomment below and update the code to test the property startTimeout
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property stopTimeout (base name: "stopTimeout")', function() {
      // uncomment below and update the code to test the property stopTimeout
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property hostname (base name: "hostname")', function() {
      // uncomment below and update the code to test the property hostname
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property workingDirectory (base name: "workingDirectory")', function() {
      // uncomment below and update the code to test the property workingDirectory
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property disableNetworking (base name: "disableNetworking")', function() {
      // uncomment below and update the code to test the property disableNetworking
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property privileged (base name: "privileged")', function() {
      // uncomment below and update the code to test the property privileged
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property readonlyRootFilesystem (base name: "readonlyRootFilesystem")', function() {
      // uncomment below and update the code to test the property readonlyRootFilesystem
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property dnsServers (base name: "dnsServers")', function() {
      // uncomment below and update the code to test the property dnsServers
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property dnsSearchDomains (base name: "dnsSearchDomains")', function() {
      // uncomment below and update the code to test the property dnsSearchDomains
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property extraHosts (base name: "extraHosts")', function() {
      // uncomment below and update the code to test the property extraHosts
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property dockerSecurityOptions (base name: "dockerSecurityOptions")', function() {
      // uncomment below and update the code to test the property dockerSecurityOptions
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property interactive (base name: "interactive")', function() {
      // uncomment below and update the code to test the property interactive
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property pseudoTerminal (base name: "pseudoTerminal")', function() {
      // uncomment below and update the code to test the property pseudoTerminal
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property dockerLabels (base name: "dockerLabels")', function() {
      // uncomment below and update the code to test the property dockerLabels
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property ulimits (base name: "ulimits")', function() {
      // uncomment below and update the code to test the property ulimits
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property logConfiguration (base name: "logConfiguration")', function() {
      // uncomment below and update the code to test the property logConfiguration
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property healthCheck (base name: "healthCheck")', function() {
      // uncomment below and update the code to test the property healthCheck
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property systemControls (base name: "systemControls")', function() {
      // uncomment below and update the code to test the property systemControls
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property resourceRequirements (base name: "resourceRequirements")', function() {
      // uncomment below and update the code to test the property resourceRequirements
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property firelensConfiguration (base name: "firelensConfiguration")', function() {
      // uncomment below and update the code to test the property firelensConfiguration
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

    it('should have the property credentialSpecs (base name: "credentialSpecs")', function() {
      // uncomment below and update the code to test the property credentialSpecs
      //var instance = new AmazonEc2ContainerService.ContainerDefinition();
      //expect(instance).to.be();
    });

  });

}));
