/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2ContainerService);
  }
}(this, function(expect, AmazonEc2ContainerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2ContainerService.Task();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Task', function() {
    it('should create an instance of Task', function() {
      // uncomment below and update the code to test Task
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be.a(AmazonEc2ContainerService.Task);
    });

    it('should have the property attachments (base name: "attachments")', function() {
      // uncomment below and update the code to test the property attachments
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property attributes (base name: "attributes")', function() {
      // uncomment below and update the code to test the property attributes
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property availabilityZone (base name: "availabilityZone")', function() {
      // uncomment below and update the code to test the property availabilityZone
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property capacityProviderName (base name: "capacityProviderName")', function() {
      // uncomment below and update the code to test the property capacityProviderName
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property clusterArn (base name: "clusterArn")', function() {
      // uncomment below and update the code to test the property clusterArn
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property connectivity (base name: "connectivity")', function() {
      // uncomment below and update the code to test the property connectivity
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property connectivityAt (base name: "connectivityAt")', function() {
      // uncomment below and update the code to test the property connectivityAt
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property containerInstanceArn (base name: "containerInstanceArn")', function() {
      // uncomment below and update the code to test the property containerInstanceArn
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property containers (base name: "containers")', function() {
      // uncomment below and update the code to test the property containers
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property cpu (base name: "cpu")', function() {
      // uncomment below and update the code to test the property cpu
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property desiredStatus (base name: "desiredStatus")', function() {
      // uncomment below and update the code to test the property desiredStatus
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property enableExecuteCommand (base name: "enableExecuteCommand")', function() {
      // uncomment below and update the code to test the property enableExecuteCommand
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property executionStoppedAt (base name: "executionStoppedAt")', function() {
      // uncomment below and update the code to test the property executionStoppedAt
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property group (base name: "group")', function() {
      // uncomment below and update the code to test the property group
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property healthStatus (base name: "healthStatus")', function() {
      // uncomment below and update the code to test the property healthStatus
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property inferenceAccelerators (base name: "inferenceAccelerators")', function() {
      // uncomment below and update the code to test the property inferenceAccelerators
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property lastStatus (base name: "lastStatus")', function() {
      // uncomment below and update the code to test the property lastStatus
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property launchType (base name: "launchType")', function() {
      // uncomment below and update the code to test the property launchType
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property memory (base name: "memory")', function() {
      // uncomment below and update the code to test the property memory
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property overrides (base name: "overrides")', function() {
      // uncomment below and update the code to test the property overrides
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property platformVersion (base name: "platformVersion")', function() {
      // uncomment below and update the code to test the property platformVersion
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property platformFamily (base name: "platformFamily")', function() {
      // uncomment below and update the code to test the property platformFamily
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property pullStartedAt (base name: "pullStartedAt")', function() {
      // uncomment below and update the code to test the property pullStartedAt
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property pullStoppedAt (base name: "pullStoppedAt")', function() {
      // uncomment below and update the code to test the property pullStoppedAt
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property startedAt (base name: "startedAt")', function() {
      // uncomment below and update the code to test the property startedAt
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property startedBy (base name: "startedBy")', function() {
      // uncomment below and update the code to test the property startedBy
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property stopCode (base name: "stopCode")', function() {
      // uncomment below and update the code to test the property stopCode
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property stoppedAt (base name: "stoppedAt")', function() {
      // uncomment below and update the code to test the property stoppedAt
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property stoppedReason (base name: "stoppedReason")', function() {
      // uncomment below and update the code to test the property stoppedReason
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property stoppingAt (base name: "stoppingAt")', function() {
      // uncomment below and update the code to test the property stoppingAt
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property taskArn (base name: "taskArn")', function() {
      // uncomment below and update the code to test the property taskArn
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property taskDefinitionArn (base name: "taskDefinitionArn")', function() {
      // uncomment below and update the code to test the property taskDefinitionArn
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

    it('should have the property ephemeralStorage (base name: "ephemeralStorage")', function() {
      // uncomment below and update the code to test the property ephemeralStorage
      //var instance = new AmazonEc2ContainerService.Task();
      //expect(instance).to.be();
    });

  });

}));
