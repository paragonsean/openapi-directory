/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2ContainerService);
  }
}(this, function(expect, AmazonEc2ContainerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2ContainerService.LoadBalancer();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LoadBalancer', function() {
    it('should create an instance of LoadBalancer', function() {
      // uncomment below and update the code to test LoadBalancer
      //var instance = new AmazonEc2ContainerService.LoadBalancer();
      //expect(instance).to.be.a(AmazonEc2ContainerService.LoadBalancer);
    });

    it('should have the property targetGroupArn (base name: "targetGroupArn")', function() {
      // uncomment below and update the code to test the property targetGroupArn
      //var instance = new AmazonEc2ContainerService.LoadBalancer();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancerName (base name: "loadBalancerName")', function() {
      // uncomment below and update the code to test the property loadBalancerName
      //var instance = new AmazonEc2ContainerService.LoadBalancer();
      //expect(instance).to.be();
    });

    it('should have the property containerName (base name: "containerName")', function() {
      // uncomment below and update the code to test the property containerName
      //var instance = new AmazonEc2ContainerService.LoadBalancer();
      //expect(instance).to.be();
    });

    it('should have the property containerPort (base name: "containerPort")', function() {
      // uncomment below and update the code to test the property containerPort
      //var instance = new AmazonEc2ContainerService.LoadBalancer();
      //expect(instance).to.be();
    });

  });

}));
