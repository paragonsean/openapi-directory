/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2ContainerService);
  }
}(this, function(expect, AmazonEc2ContainerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2ContainerService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createCapacityProvider', function() {
      it('should call createCapacityProvider successfully', function(done) {
        //uncomment below and update the code to test createCapacityProvider
        //instance.createCapacityProvider(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCluster', function() {
      it('should call createCluster successfully', function(done) {
        //uncomment below and update the code to test createCluster
        //instance.createCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createService', function() {
      it('should call createService successfully', function(done) {
        //uncomment below and update the code to test createService
        //instance.createService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTaskSet', function() {
      it('should call createTaskSet successfully', function(done) {
        //uncomment below and update the code to test createTaskSet
        //instance.createTaskSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAccountSetting', function() {
      it('should call deleteAccountSetting successfully', function(done) {
        //uncomment below and update the code to test deleteAccountSetting
        //instance.deleteAccountSetting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAttributes', function() {
      it('should call deleteAttributes successfully', function(done) {
        //uncomment below and update the code to test deleteAttributes
        //instance.deleteAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCapacityProvider', function() {
      it('should call deleteCapacityProvider successfully', function(done) {
        //uncomment below and update the code to test deleteCapacityProvider
        //instance.deleteCapacityProvider(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCluster', function() {
      it('should call deleteCluster successfully', function(done) {
        //uncomment below and update the code to test deleteCluster
        //instance.deleteCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteService', function() {
      it('should call deleteService successfully', function(done) {
        //uncomment below and update the code to test deleteService
        //instance.deleteService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTaskDefinitions', function() {
      it('should call deleteTaskDefinitions successfully', function(done) {
        //uncomment below and update the code to test deleteTaskDefinitions
        //instance.deleteTaskDefinitions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTaskSet', function() {
      it('should call deleteTaskSet successfully', function(done) {
        //uncomment below and update the code to test deleteTaskSet
        //instance.deleteTaskSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterContainerInstance', function() {
      it('should call deregisterContainerInstance successfully', function(done) {
        //uncomment below and update the code to test deregisterContainerInstance
        //instance.deregisterContainerInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterTaskDefinition', function() {
      it('should call deregisterTaskDefinition successfully', function(done) {
        //uncomment below and update the code to test deregisterTaskDefinition
        //instance.deregisterTaskDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCapacityProviders', function() {
      it('should call describeCapacityProviders successfully', function(done) {
        //uncomment below and update the code to test describeCapacityProviders
        //instance.describeCapacityProviders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeClusters', function() {
      it('should call describeClusters successfully', function(done) {
        //uncomment below and update the code to test describeClusters
        //instance.describeClusters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeContainerInstances', function() {
      it('should call describeContainerInstances successfully', function(done) {
        //uncomment below and update the code to test describeContainerInstances
        //instance.describeContainerInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeServices', function() {
      it('should call describeServices successfully', function(done) {
        //uncomment below and update the code to test describeServices
        //instance.describeServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTaskDefinition', function() {
      it('should call describeTaskDefinition successfully', function(done) {
        //uncomment below and update the code to test describeTaskDefinition
        //instance.describeTaskDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTaskSets', function() {
      it('should call describeTaskSets successfully', function(done) {
        //uncomment below and update the code to test describeTaskSets
        //instance.describeTaskSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTasks', function() {
      it('should call describeTasks successfully', function(done) {
        //uncomment below and update the code to test describeTasks
        //instance.describeTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('discoverPollEndpoint', function() {
      it('should call discoverPollEndpoint successfully', function(done) {
        //uncomment below and update the code to test discoverPollEndpoint
        //instance.discoverPollEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('executeCommand', function() {
      it('should call executeCommand successfully', function(done) {
        //uncomment below and update the code to test executeCommand
        //instance.executeCommand(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTaskProtection', function() {
      it('should call getTaskProtection successfully', function(done) {
        //uncomment below and update the code to test getTaskProtection
        //instance.getTaskProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccountSettings', function() {
      it('should call listAccountSettings successfully', function(done) {
        //uncomment below and update the code to test listAccountSettings
        //instance.listAccountSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAttributes', function() {
      it('should call listAttributes successfully', function(done) {
        //uncomment below and update the code to test listAttributes
        //instance.listAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClusters', function() {
      it('should call listClusters successfully', function(done) {
        //uncomment below and update the code to test listClusters
        //instance.listClusters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listContainerInstances', function() {
      it('should call listContainerInstances successfully', function(done) {
        //uncomment below and update the code to test listContainerInstances
        //instance.listContainerInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServices', function() {
      it('should call listServices successfully', function(done) {
        //uncomment below and update the code to test listServices
        //instance.listServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServicesByNamespace', function() {
      it('should call listServicesByNamespace successfully', function(done) {
        //uncomment below and update the code to test listServicesByNamespace
        //instance.listServicesByNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTaskDefinitionFamilies', function() {
      it('should call listTaskDefinitionFamilies successfully', function(done) {
        //uncomment below and update the code to test listTaskDefinitionFamilies
        //instance.listTaskDefinitionFamilies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTaskDefinitions', function() {
      it('should call listTaskDefinitions successfully', function(done) {
        //uncomment below and update the code to test listTaskDefinitions
        //instance.listTaskDefinitions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTasks', function() {
      it('should call listTasks successfully', function(done) {
        //uncomment below and update the code to test listTasks
        //instance.listTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putAccountSetting', function() {
      it('should call putAccountSetting successfully', function(done) {
        //uncomment below and update the code to test putAccountSetting
        //instance.putAccountSetting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putAccountSettingDefault', function() {
      it('should call putAccountSettingDefault successfully', function(done) {
        //uncomment below and update the code to test putAccountSettingDefault
        //instance.putAccountSettingDefault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putAttributes', function() {
      it('should call putAttributes successfully', function(done) {
        //uncomment below and update the code to test putAttributes
        //instance.putAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putClusterCapacityProviders', function() {
      it('should call putClusterCapacityProviders successfully', function(done) {
        //uncomment below and update the code to test putClusterCapacityProviders
        //instance.putClusterCapacityProviders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerContainerInstance', function() {
      it('should call registerContainerInstance successfully', function(done) {
        //uncomment below and update the code to test registerContainerInstance
        //instance.registerContainerInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerTaskDefinition', function() {
      it('should call registerTaskDefinition successfully', function(done) {
        //uncomment below and update the code to test registerTaskDefinition
        //instance.registerTaskDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runTask', function() {
      it('should call runTask successfully', function(done) {
        //uncomment below and update the code to test runTask
        //instance.runTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startTask', function() {
      it('should call startTask successfully', function(done) {
        //uncomment below and update the code to test startTask
        //instance.startTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopTask', function() {
      it('should call stopTask successfully', function(done) {
        //uncomment below and update the code to test stopTask
        //instance.stopTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitAttachmentStateChanges', function() {
      it('should call submitAttachmentStateChanges successfully', function(done) {
        //uncomment below and update the code to test submitAttachmentStateChanges
        //instance.submitAttachmentStateChanges(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitContainerStateChange', function() {
      it('should call submitContainerStateChange successfully', function(done) {
        //uncomment below and update the code to test submitContainerStateChange
        //instance.submitContainerStateChange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitTaskStateChange', function() {
      it('should call submitTaskStateChange successfully', function(done) {
        //uncomment below and update the code to test submitTaskStateChange
        //instance.submitTaskStateChange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCapacityProvider', function() {
      it('should call updateCapacityProvider successfully', function(done) {
        //uncomment below and update the code to test updateCapacityProvider
        //instance.updateCapacityProvider(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCluster', function() {
      it('should call updateCluster successfully', function(done) {
        //uncomment below and update the code to test updateCluster
        //instance.updateCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateClusterSettings', function() {
      it('should call updateClusterSettings successfully', function(done) {
        //uncomment below and update the code to test updateClusterSettings
        //instance.updateClusterSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContainerAgent', function() {
      it('should call updateContainerAgent successfully', function(done) {
        //uncomment below and update the code to test updateContainerAgent
        //instance.updateContainerAgent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContainerInstancesState', function() {
      it('should call updateContainerInstancesState successfully', function(done) {
        //uncomment below and update the code to test updateContainerInstancesState
        //instance.updateContainerInstancesState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateService', function() {
      it('should call updateService successfully', function(done) {
        //uncomment below and update the code to test updateService
        //instance.updateService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateServicePrimaryTaskSet', function() {
      it('should call updateServicePrimaryTaskSet successfully', function(done) {
        //uncomment below and update the code to test updateServicePrimaryTaskSet
        //instance.updateServicePrimaryTaskSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTaskProtection', function() {
      it('should call updateTaskProtection successfully', function(done) {
        //uncomment below and update the code to test updateTaskProtection
        //instance.updateTaskProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTaskSet', function() {
      it('should call updateTaskSet successfully', function(done) {
        //uncomment below and update the code to test updateTaskSet
        //instance.updateTaskSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
