/**
 * Amazon EC2 Container Service
 * <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service. It makes it easy to run, stop, and manage Docker containers. You can host your cluster on a serverless infrastructure that's managed by Amazon ECS by launching your services or tasks on Fargate. For more control, you can host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances that you manage.</p> <p>Amazon ECS makes it easy to launch and stop container-based applications with simple API calls. This makes it easy to get the state of your cluster from a centralized service, and gives you access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule the placement of containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you don't need to operate your own cluster management and configuration management systems. You also don't need to worry about scaling your management infrastructure.</p>
 *
 * The version of the OpenAPI document: 2014-11-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogDriver from './LogDriver';

/**
 * The LogConfiguration model module.
 * @module model/LogConfiguration
 * @version 2014-11-13
 */
class LogConfiguration {
    /**
     * Constructs a new <code>LogConfiguration</code>.
     * &lt;p&gt;The log configuration for the container. This parameter maps to &lt;code&gt;LogConfig&lt;/code&gt; in the &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate\&quot;&gt;Create a container&lt;/a&gt; section of the &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/api/v1.35/\&quot;&gt;Docker Remote API&lt;/a&gt; and the &lt;code&gt;--log-driver&lt;/code&gt; option to &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/reference/commandline/run/\&quot;&gt; &lt;code&gt;docker run&lt;/code&gt; &lt;/a&gt;.&lt;/p&gt; &lt;p&gt;By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition. For more information about the options for different supported log drivers, see &lt;a href&#x3D;\&quot;https://docs.docker.com/engine/admin/logging/overview/\&quot;&gt;Configure logging drivers&lt;/a&gt; in the Docker documentation.&lt;/p&gt; &lt;p&gt;Understand the following when specifying a log configuration for your containers.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent.&lt;/p&gt; &lt;p&gt;For tasks on Fargate, the supported log drivers are &lt;code&gt;awslogs&lt;/code&gt;, &lt;code&gt;splunk&lt;/code&gt;, and &lt;code&gt;awsfirelens&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For tasks hosted on Amazon EC2 instances, the supported log drivers are &lt;code&gt;awslogs&lt;/code&gt;, &lt;code&gt;fluentd&lt;/code&gt;, &lt;code&gt;gelf&lt;/code&gt;, &lt;code&gt;json-file&lt;/code&gt;, &lt;code&gt;journald&lt;/code&gt;, &lt;code&gt;logentries&lt;/code&gt;,&lt;code&gt;syslog&lt;/code&gt;, &lt;code&gt;splunk&lt;/code&gt;, and &lt;code&gt;awsfirelens&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the &lt;code&gt;ECS_AVAILABLE_LOGGING_DRIVERS&lt;/code&gt; environment variable before containers placed on that instance can use these log configuration options. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html\&quot;&gt;Amazon ECS container agent configuration&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For tasks that are on Fargate, because you don&#39;t have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @alias module:model/LogConfiguration
     * @param logDriver {module:model/LogDriver} 
     */
    constructor(logDriver) { 
        
        LogConfiguration.initialize(this, logDriver);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, logDriver) { 
        obj['logDriver'] = logDriver;
    }

    /**
     * Constructs a <code>LogConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogConfiguration} obj Optional instance to populate.
     * @return {module:model/LogConfiguration} The populated <code>LogConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogConfiguration();

            if (data.hasOwnProperty('logDriver')) {
                obj['logDriver'] = ApiClient.convertToType(data['logDriver'], LogDriver);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], Object);
            }
            if (data.hasOwnProperty('secretOptions')) {
                obj['secretOptions'] = ApiClient.convertToType(data['secretOptions'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `logDriver`
        if (data['logDriver']) { // data not null
          LogDriver.validateJSON(data['logDriver']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          Object.validateJSON(data['options']);
        }
        // validate the optional field `secretOptions`
        if (data['secretOptions']) { // data not null
          Array.validateJSON(data['secretOptions']);
        }

        return true;
    }


}

LogConfiguration.RequiredProperties = ["logDriver"];

/**
 * @member {module:model/LogDriver} logDriver
 */
LogConfiguration.prototype['logDriver'] = undefined;

/**
 * @member {Object} options
 */
LogConfiguration.prototype['options'] = undefined;

/**
 * @member {Array} secretOptions
 */
LogConfiguration.prototype['secretOptions'] = undefined;






export default LogConfiguration;

