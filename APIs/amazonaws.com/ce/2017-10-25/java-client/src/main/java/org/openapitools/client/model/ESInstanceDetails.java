/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about the Amazon OpenSearch Service instances that Amazon Web Services recommends that you purchase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ESInstanceDetails {
  public static final String SERIALIZED_NAME_INSTANCE_CLASS = "InstanceClass";
  @SerializedName(SERIALIZED_NAME_INSTANCE_CLASS)
  private String instanceClass;

  public static final String SERIALIZED_NAME_INSTANCE_SIZE = "InstanceSize";
  @SerializedName(SERIALIZED_NAME_INSTANCE_SIZE)
  private String instanceSize;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_CURRENT_GENERATION = "CurrentGeneration";
  @SerializedName(SERIALIZED_NAME_CURRENT_GENERATION)
  private Boolean currentGeneration;

  public static final String SERIALIZED_NAME_SIZE_FLEX_ELIGIBLE = "SizeFlexEligible";
  @SerializedName(SERIALIZED_NAME_SIZE_FLEX_ELIGIBLE)
  private Boolean sizeFlexEligible;

  public ESInstanceDetails() {
  }

  public ESInstanceDetails instanceClass(String instanceClass) {
    this.instanceClass = instanceClass;
    return this;
  }

  /**
   * Get instanceClass
   * @return instanceClass
   */
  @javax.annotation.Nullable
  public String getInstanceClass() {
    return instanceClass;
  }

  public void setInstanceClass(String instanceClass) {
    this.instanceClass = instanceClass;
  }


  public ESInstanceDetails instanceSize(String instanceSize) {
    this.instanceSize = instanceSize;
    return this;
  }

  /**
   * Get instanceSize
   * @return instanceSize
   */
  @javax.annotation.Nullable
  public String getInstanceSize() {
    return instanceSize;
  }

  public void setInstanceSize(String instanceSize) {
    this.instanceSize = instanceSize;
  }


  public ESInstanceDetails region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public ESInstanceDetails currentGeneration(Boolean currentGeneration) {
    this.currentGeneration = currentGeneration;
    return this;
  }

  /**
   * Get currentGeneration
   * @return currentGeneration
   */
  @javax.annotation.Nullable
  public Boolean getCurrentGeneration() {
    return currentGeneration;
  }

  public void setCurrentGeneration(Boolean currentGeneration) {
    this.currentGeneration = currentGeneration;
  }


  public ESInstanceDetails sizeFlexEligible(Boolean sizeFlexEligible) {
    this.sizeFlexEligible = sizeFlexEligible;
    return this;
  }

  /**
   * Get sizeFlexEligible
   * @return sizeFlexEligible
   */
  @javax.annotation.Nullable
  public Boolean getSizeFlexEligible() {
    return sizeFlexEligible;
  }

  public void setSizeFlexEligible(Boolean sizeFlexEligible) {
    this.sizeFlexEligible = sizeFlexEligible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ESInstanceDetails esInstanceDetails = (ESInstanceDetails) o;
    return Objects.equals(this.instanceClass, esInstanceDetails.instanceClass) &&
        Objects.equals(this.instanceSize, esInstanceDetails.instanceSize) &&
        Objects.equals(this.region, esInstanceDetails.region) &&
        Objects.equals(this.currentGeneration, esInstanceDetails.currentGeneration) &&
        Objects.equals(this.sizeFlexEligible, esInstanceDetails.sizeFlexEligible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceClass, instanceSize, region, currentGeneration, sizeFlexEligible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ESInstanceDetails {\n");
    sb.append("    instanceClass: ").append(toIndentedString(instanceClass)).append("\n");
    sb.append("    instanceSize: ").append(toIndentedString(instanceSize)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    currentGeneration: ").append(toIndentedString(currentGeneration)).append("\n");
    sb.append("    sizeFlexEligible: ").append(toIndentedString(sizeFlexEligible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InstanceClass");
    openapiFields.add("InstanceSize");
    openapiFields.add("Region");
    openapiFields.add("CurrentGeneration");
    openapiFields.add("SizeFlexEligible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ESInstanceDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ESInstanceDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ESInstanceDetails is not found in the empty JSON string", ESInstanceDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ESInstanceDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ESInstanceDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InstanceClass`
      if (jsonObj.get("InstanceClass") != null && !jsonObj.get("InstanceClass").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceClass"));
      }
      // validate the optional field `InstanceSize`
      if (jsonObj.get("InstanceSize") != null && !jsonObj.get("InstanceSize").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceSize"));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Region"));
      }
      // validate the optional field `CurrentGeneration`
      if (jsonObj.get("CurrentGeneration") != null && !jsonObj.get("CurrentGeneration").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CurrentGeneration"));
      }
      // validate the optional field `SizeFlexEligible`
      if (jsonObj.get("SizeFlexEligible") != null && !jsonObj.get("SizeFlexEligible").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SizeFlexEligible"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ESInstanceDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ESInstanceDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ESInstanceDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ESInstanceDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ESInstanceDetails>() {
           @Override
           public void write(JsonWriter out, ESInstanceDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ESInstanceDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ESInstanceDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ESInstanceDetails
   * @throws IOException if the JSON string is invalid with respect to ESInstanceDetails
   */
  public static ESInstanceDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ESInstanceDetails.class);
  }

  /**
   * Convert an instance of ESInstanceDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

