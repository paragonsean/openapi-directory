/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateAnomalyMonitorRequestAnomalyMonitor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAnomalyMonitorRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAnomalyMonitorRequest {
  public static final String SERIALIZED_NAME_ANOMALY_MONITOR = "AnomalyMonitor";
  @SerializedName(SERIALIZED_NAME_ANOMALY_MONITOR)
  private CreateAnomalyMonitorRequestAnomalyMonitor anomalyMonitor;

  public static final String SERIALIZED_NAME_RESOURCE_TAGS = "ResourceTags";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TAGS)
  private List resourceTags;

  public CreateAnomalyMonitorRequest() {
  }

  public CreateAnomalyMonitorRequest anomalyMonitor(CreateAnomalyMonitorRequestAnomalyMonitor anomalyMonitor) {
    this.anomalyMonitor = anomalyMonitor;
    return this;
  }

  /**
   * Get anomalyMonitor
   * @return anomalyMonitor
   */
  @javax.annotation.Nonnull
  public CreateAnomalyMonitorRequestAnomalyMonitor getAnomalyMonitor() {
    return anomalyMonitor;
  }

  public void setAnomalyMonitor(CreateAnomalyMonitorRequestAnomalyMonitor anomalyMonitor) {
    this.anomalyMonitor = anomalyMonitor;
  }


  public CreateAnomalyMonitorRequest resourceTags(List resourceTags) {
    this.resourceTags = resourceTags;
    return this;
  }

  /**
   * Get resourceTags
   * @return resourceTags
   */
  @javax.annotation.Nullable
  public List getResourceTags() {
    return resourceTags;
  }

  public void setResourceTags(List resourceTags) {
    this.resourceTags = resourceTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnomalyMonitorRequest createAnomalyMonitorRequest = (CreateAnomalyMonitorRequest) o;
    return Objects.equals(this.anomalyMonitor, createAnomalyMonitorRequest.anomalyMonitor) &&
        Objects.equals(this.resourceTags, createAnomalyMonitorRequest.resourceTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anomalyMonitor, resourceTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnomalyMonitorRequest {\n");
    sb.append("    anomalyMonitor: ").append(toIndentedString(anomalyMonitor)).append("\n");
    sb.append("    resourceTags: ").append(toIndentedString(resourceTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnomalyMonitor");
    openapiFields.add("ResourceTags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AnomalyMonitor");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAnomalyMonitorRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAnomalyMonitorRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnomalyMonitorRequest is not found in the empty JSON string", CreateAnomalyMonitorRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAnomalyMonitorRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnomalyMonitorRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAnomalyMonitorRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AnomalyMonitor`
      CreateAnomalyMonitorRequestAnomalyMonitor.validateJsonElement(jsonObj.get("AnomalyMonitor"));
      // validate the optional field `ResourceTags`
      if (jsonObj.get("ResourceTags") != null && !jsonObj.get("ResourceTags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResourceTags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnomalyMonitorRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnomalyMonitorRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnomalyMonitorRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnomalyMonitorRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnomalyMonitorRequest>() {
           @Override
           public void write(JsonWriter out, CreateAnomalyMonitorRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnomalyMonitorRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAnomalyMonitorRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAnomalyMonitorRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAnomalyMonitorRequest
   */
  public static CreateAnomalyMonitorRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnomalyMonitorRequest.class);
  }

  /**
   * Convert an instance of CreateAnomalyMonitorRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

