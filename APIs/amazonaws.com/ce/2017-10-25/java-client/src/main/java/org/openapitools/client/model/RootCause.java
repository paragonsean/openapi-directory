/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The combination of Amazon Web Service, linked account, linked account name, Region, and usage type where a cost anomaly is observed. The linked account name will only be available when the account name can be identified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RootCause {
  public static final String SERIALIZED_NAME_SERVICE = "Service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_LINKED_ACCOUNT = "LinkedAccount";
  @SerializedName(SERIALIZED_NAME_LINKED_ACCOUNT)
  private String linkedAccount;

  public static final String SERIALIZED_NAME_USAGE_TYPE = "UsageType";
  @SerializedName(SERIALIZED_NAME_USAGE_TYPE)
  private String usageType;

  public static final String SERIALIZED_NAME_LINKED_ACCOUNT_NAME = "LinkedAccountName";
  @SerializedName(SERIALIZED_NAME_LINKED_ACCOUNT_NAME)
  private String linkedAccountName;

  public RootCause() {
  }

  public RootCause service(String service) {
    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public RootCause region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public RootCause linkedAccount(String linkedAccount) {
    this.linkedAccount = linkedAccount;
    return this;
  }

  /**
   * Get linkedAccount
   * @return linkedAccount
   */
  @javax.annotation.Nullable
  public String getLinkedAccount() {
    return linkedAccount;
  }

  public void setLinkedAccount(String linkedAccount) {
    this.linkedAccount = linkedAccount;
  }


  public RootCause usageType(String usageType) {
    this.usageType = usageType;
    return this;
  }

  /**
   * Get usageType
   * @return usageType
   */
  @javax.annotation.Nullable
  public String getUsageType() {
    return usageType;
  }

  public void setUsageType(String usageType) {
    this.usageType = usageType;
  }


  public RootCause linkedAccountName(String linkedAccountName) {
    this.linkedAccountName = linkedAccountName;
    return this;
  }

  /**
   * Get linkedAccountName
   * @return linkedAccountName
   */
  @javax.annotation.Nullable
  public String getLinkedAccountName() {
    return linkedAccountName;
  }

  public void setLinkedAccountName(String linkedAccountName) {
    this.linkedAccountName = linkedAccountName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RootCause rootCause = (RootCause) o;
    return Objects.equals(this.service, rootCause.service) &&
        Objects.equals(this.region, rootCause.region) &&
        Objects.equals(this.linkedAccount, rootCause.linkedAccount) &&
        Objects.equals(this.usageType, rootCause.usageType) &&
        Objects.equals(this.linkedAccountName, rootCause.linkedAccountName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(service, region, linkedAccount, usageType, linkedAccountName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RootCause {\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    linkedAccount: ").append(toIndentedString(linkedAccount)).append("\n");
    sb.append("    usageType: ").append(toIndentedString(usageType)).append("\n");
    sb.append("    linkedAccountName: ").append(toIndentedString(linkedAccountName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Service");
    openapiFields.add("Region");
    openapiFields.add("LinkedAccount");
    openapiFields.add("UsageType");
    openapiFields.add("LinkedAccountName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RootCause
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RootCause.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RootCause is not found in the empty JSON string", RootCause.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RootCause.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RootCause` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Service`
      if (jsonObj.get("Service") != null && !jsonObj.get("Service").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Service"));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Region"));
      }
      // validate the optional field `LinkedAccount`
      if (jsonObj.get("LinkedAccount") != null && !jsonObj.get("LinkedAccount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LinkedAccount"));
      }
      // validate the optional field `UsageType`
      if (jsonObj.get("UsageType") != null && !jsonObj.get("UsageType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UsageType"));
      }
      // validate the optional field `LinkedAccountName`
      if (jsonObj.get("LinkedAccountName") != null && !jsonObj.get("LinkedAccountName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LinkedAccountName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RootCause.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RootCause' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RootCause> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RootCause.class));

       return (TypeAdapter<T>) new TypeAdapter<RootCause>() {
           @Override
           public void write(JsonWriter out, RootCause value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RootCause read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RootCause given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RootCause
   * @throws IOException if the JSON string is invalid with respect to RootCause
   */
  public static RootCause fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RootCause.class);
  }

  /**
   * Convert an instance of RootCause to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

