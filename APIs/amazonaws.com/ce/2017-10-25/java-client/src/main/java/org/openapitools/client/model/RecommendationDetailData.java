/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountScope;
import org.openapitools.client.model.LookbackPeriodInDays;
import org.openapitools.client.model.PaymentOption;
import org.openapitools.client.model.SupportedSavingsPlansType;
import org.openapitools.client.model.TermInYears;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details and metrics for the given recommendation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationDetailData {
  public static final String SERIALIZED_NAME_ACCOUNT_SCOPE = "AccountScope";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SCOPE)
  private AccountScope accountScope;

  public static final String SERIALIZED_NAME_LOOKBACK_PERIOD_IN_DAYS = "LookbackPeriodInDays";
  @SerializedName(SERIALIZED_NAME_LOOKBACK_PERIOD_IN_DAYS)
  private LookbackPeriodInDays lookbackPeriodInDays;

  public static final String SERIALIZED_NAME_SAVINGS_PLANS_TYPE = "SavingsPlansType";
  @SerializedName(SERIALIZED_NAME_SAVINGS_PLANS_TYPE)
  private SupportedSavingsPlansType savingsPlansType;

  public static final String SERIALIZED_NAME_TERM_IN_YEARS = "TermInYears";
  @SerializedName(SERIALIZED_NAME_TERM_IN_YEARS)
  private TermInYears termInYears;

  public static final String SERIALIZED_NAME_PAYMENT_OPTION = "PaymentOption";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTION)
  private PaymentOption paymentOption;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_INSTANCE_FAMILY = "InstanceFamily";
  @SerializedName(SERIALIZED_NAME_INSTANCE_FAMILY)
  private String instanceFamily;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_OFFERING_ID = "OfferingId";
  @SerializedName(SERIALIZED_NAME_OFFERING_ID)
  private String offeringId;

  public static final String SERIALIZED_NAME_GENERATION_TIMESTAMP = "GenerationTimestamp";
  @SerializedName(SERIALIZED_NAME_GENERATION_TIMESTAMP)
  private String generationTimestamp;

  public static final String SERIALIZED_NAME_LATEST_USAGE_TIMESTAMP = "LatestUsageTimestamp";
  @SerializedName(SERIALIZED_NAME_LATEST_USAGE_TIMESTAMP)
  private String latestUsageTimestamp;

  public static final String SERIALIZED_NAME_CURRENT_AVERAGE_HOURLY_ON_DEMAND_SPEND = "CurrentAverageHourlyOnDemandSpend";
  @SerializedName(SERIALIZED_NAME_CURRENT_AVERAGE_HOURLY_ON_DEMAND_SPEND)
  private String currentAverageHourlyOnDemandSpend;

  public static final String SERIALIZED_NAME_CURRENT_MAXIMUM_HOURLY_ON_DEMAND_SPEND = "CurrentMaximumHourlyOnDemandSpend";
  @SerializedName(SERIALIZED_NAME_CURRENT_MAXIMUM_HOURLY_ON_DEMAND_SPEND)
  private String currentMaximumHourlyOnDemandSpend;

  public static final String SERIALIZED_NAME_CURRENT_MINIMUM_HOURLY_ON_DEMAND_SPEND = "CurrentMinimumHourlyOnDemandSpend";
  @SerializedName(SERIALIZED_NAME_CURRENT_MINIMUM_HOURLY_ON_DEMAND_SPEND)
  private String currentMinimumHourlyOnDemandSpend;

  public static final String SERIALIZED_NAME_ESTIMATED_AVERAGE_UTILIZATION = "EstimatedAverageUtilization";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_AVERAGE_UTILIZATION)
  private String estimatedAverageUtilization;

  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_SAVINGS_AMOUNT = "EstimatedMonthlySavingsAmount";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_SAVINGS_AMOUNT)
  private String estimatedMonthlySavingsAmount;

  public static final String SERIALIZED_NAME_ESTIMATED_ON_DEMAND_COST = "EstimatedOnDemandCost";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_ON_DEMAND_COST)
  private String estimatedOnDemandCost;

  public static final String SERIALIZED_NAME_ESTIMATED_ON_DEMAND_COST_WITH_CURRENT_COMMITMENT = "EstimatedOnDemandCostWithCurrentCommitment";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_ON_DEMAND_COST_WITH_CURRENT_COMMITMENT)
  private String estimatedOnDemandCostWithCurrentCommitment;

  public static final String SERIALIZED_NAME_ESTIMATED_R_O_I = "EstimatedROI";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_R_O_I)
  private String estimatedROI;

  public static final String SERIALIZED_NAME_ESTIMATED_S_P_COST = "EstimatedSPCost";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_S_P_COST)
  private String estimatedSPCost;

  public static final String SERIALIZED_NAME_ESTIMATED_SAVINGS_AMOUNT = "EstimatedSavingsAmount";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_SAVINGS_AMOUNT)
  private String estimatedSavingsAmount;

  public static final String SERIALIZED_NAME_ESTIMATED_SAVINGS_PERCENTAGE = "EstimatedSavingsPercentage";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_SAVINGS_PERCENTAGE)
  private String estimatedSavingsPercentage;

  public static final String SERIALIZED_NAME_EXISTING_HOURLY_COMMITMENT = "ExistingHourlyCommitment";
  @SerializedName(SERIALIZED_NAME_EXISTING_HOURLY_COMMITMENT)
  private String existingHourlyCommitment;

  public static final String SERIALIZED_NAME_HOURLY_COMMITMENT_TO_PURCHASE = "HourlyCommitmentToPurchase";
  @SerializedName(SERIALIZED_NAME_HOURLY_COMMITMENT_TO_PURCHASE)
  private String hourlyCommitmentToPurchase;

  public static final String SERIALIZED_NAME_UPFRONT_COST = "UpfrontCost";
  @SerializedName(SERIALIZED_NAME_UPFRONT_COST)
  private String upfrontCost;

  public static final String SERIALIZED_NAME_CURRENT_AVERAGE_COVERAGE = "CurrentAverageCoverage";
  @SerializedName(SERIALIZED_NAME_CURRENT_AVERAGE_COVERAGE)
  private String currentAverageCoverage;

  public static final String SERIALIZED_NAME_ESTIMATED_AVERAGE_COVERAGE = "EstimatedAverageCoverage";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_AVERAGE_COVERAGE)
  private String estimatedAverageCoverage;

  public static final String SERIALIZED_NAME_METRICS_OVER_LOOKBACK_PERIOD = "MetricsOverLookbackPeriod";
  @SerializedName(SERIALIZED_NAME_METRICS_OVER_LOOKBACK_PERIOD)
  private List metricsOverLookbackPeriod;

  public RecommendationDetailData() {
  }

  public RecommendationDetailData accountScope(AccountScope accountScope) {
    this.accountScope = accountScope;
    return this;
  }

  /**
   * Get accountScope
   * @return accountScope
   */
  @javax.annotation.Nullable
  public AccountScope getAccountScope() {
    return accountScope;
  }

  public void setAccountScope(AccountScope accountScope) {
    this.accountScope = accountScope;
  }


  public RecommendationDetailData lookbackPeriodInDays(LookbackPeriodInDays lookbackPeriodInDays) {
    this.lookbackPeriodInDays = lookbackPeriodInDays;
    return this;
  }

  /**
   * Get lookbackPeriodInDays
   * @return lookbackPeriodInDays
   */
  @javax.annotation.Nullable
  public LookbackPeriodInDays getLookbackPeriodInDays() {
    return lookbackPeriodInDays;
  }

  public void setLookbackPeriodInDays(LookbackPeriodInDays lookbackPeriodInDays) {
    this.lookbackPeriodInDays = lookbackPeriodInDays;
  }


  public RecommendationDetailData savingsPlansType(SupportedSavingsPlansType savingsPlansType) {
    this.savingsPlansType = savingsPlansType;
    return this;
  }

  /**
   * Get savingsPlansType
   * @return savingsPlansType
   */
  @javax.annotation.Nullable
  public SupportedSavingsPlansType getSavingsPlansType() {
    return savingsPlansType;
  }

  public void setSavingsPlansType(SupportedSavingsPlansType savingsPlansType) {
    this.savingsPlansType = savingsPlansType;
  }


  public RecommendationDetailData termInYears(TermInYears termInYears) {
    this.termInYears = termInYears;
    return this;
  }

  /**
   * Get termInYears
   * @return termInYears
   */
  @javax.annotation.Nullable
  public TermInYears getTermInYears() {
    return termInYears;
  }

  public void setTermInYears(TermInYears termInYears) {
    this.termInYears = termInYears;
  }


  public RecommendationDetailData paymentOption(PaymentOption paymentOption) {
    this.paymentOption = paymentOption;
    return this;
  }

  /**
   * Get paymentOption
   * @return paymentOption
   */
  @javax.annotation.Nullable
  public PaymentOption getPaymentOption() {
    return paymentOption;
  }

  public void setPaymentOption(PaymentOption paymentOption) {
    this.paymentOption = paymentOption;
  }


  public RecommendationDetailData accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public RecommendationDetailData currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public RecommendationDetailData instanceFamily(String instanceFamily) {
    this.instanceFamily = instanceFamily;
    return this;
  }

  /**
   * Get instanceFamily
   * @return instanceFamily
   */
  @javax.annotation.Nullable
  public String getInstanceFamily() {
    return instanceFamily;
  }

  public void setInstanceFamily(String instanceFamily) {
    this.instanceFamily = instanceFamily;
  }


  public RecommendationDetailData region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public RecommendationDetailData offeringId(String offeringId) {
    this.offeringId = offeringId;
    return this;
  }

  /**
   * Get offeringId
   * @return offeringId
   */
  @javax.annotation.Nullable
  public String getOfferingId() {
    return offeringId;
  }

  public void setOfferingId(String offeringId) {
    this.offeringId = offeringId;
  }


  public RecommendationDetailData generationTimestamp(String generationTimestamp) {
    this.generationTimestamp = generationTimestamp;
    return this;
  }

  /**
   * The period of time that you want the usage and costs for.
   * @return generationTimestamp
   */
  @javax.annotation.Nullable
  public String getGenerationTimestamp() {
    return generationTimestamp;
  }

  public void setGenerationTimestamp(String generationTimestamp) {
    this.generationTimestamp = generationTimestamp;
  }


  public RecommendationDetailData latestUsageTimestamp(String latestUsageTimestamp) {
    this.latestUsageTimestamp = latestUsageTimestamp;
    return this;
  }

  /**
   * The period of time that you want the usage and costs for.
   * @return latestUsageTimestamp
   */
  @javax.annotation.Nullable
  public String getLatestUsageTimestamp() {
    return latestUsageTimestamp;
  }

  public void setLatestUsageTimestamp(String latestUsageTimestamp) {
    this.latestUsageTimestamp = latestUsageTimestamp;
  }


  public RecommendationDetailData currentAverageHourlyOnDemandSpend(String currentAverageHourlyOnDemandSpend) {
    this.currentAverageHourlyOnDemandSpend = currentAverageHourlyOnDemandSpend;
    return this;
  }

  /**
   * Get currentAverageHourlyOnDemandSpend
   * @return currentAverageHourlyOnDemandSpend
   */
  @javax.annotation.Nullable
  public String getCurrentAverageHourlyOnDemandSpend() {
    return currentAverageHourlyOnDemandSpend;
  }

  public void setCurrentAverageHourlyOnDemandSpend(String currentAverageHourlyOnDemandSpend) {
    this.currentAverageHourlyOnDemandSpend = currentAverageHourlyOnDemandSpend;
  }


  public RecommendationDetailData currentMaximumHourlyOnDemandSpend(String currentMaximumHourlyOnDemandSpend) {
    this.currentMaximumHourlyOnDemandSpend = currentMaximumHourlyOnDemandSpend;
    return this;
  }

  /**
   * Get currentMaximumHourlyOnDemandSpend
   * @return currentMaximumHourlyOnDemandSpend
   */
  @javax.annotation.Nullable
  public String getCurrentMaximumHourlyOnDemandSpend() {
    return currentMaximumHourlyOnDemandSpend;
  }

  public void setCurrentMaximumHourlyOnDemandSpend(String currentMaximumHourlyOnDemandSpend) {
    this.currentMaximumHourlyOnDemandSpend = currentMaximumHourlyOnDemandSpend;
  }


  public RecommendationDetailData currentMinimumHourlyOnDemandSpend(String currentMinimumHourlyOnDemandSpend) {
    this.currentMinimumHourlyOnDemandSpend = currentMinimumHourlyOnDemandSpend;
    return this;
  }

  /**
   * Get currentMinimumHourlyOnDemandSpend
   * @return currentMinimumHourlyOnDemandSpend
   */
  @javax.annotation.Nullable
  public String getCurrentMinimumHourlyOnDemandSpend() {
    return currentMinimumHourlyOnDemandSpend;
  }

  public void setCurrentMinimumHourlyOnDemandSpend(String currentMinimumHourlyOnDemandSpend) {
    this.currentMinimumHourlyOnDemandSpend = currentMinimumHourlyOnDemandSpend;
  }


  public RecommendationDetailData estimatedAverageUtilization(String estimatedAverageUtilization) {
    this.estimatedAverageUtilization = estimatedAverageUtilization;
    return this;
  }

  /**
   * Get estimatedAverageUtilization
   * @return estimatedAverageUtilization
   */
  @javax.annotation.Nullable
  public String getEstimatedAverageUtilization() {
    return estimatedAverageUtilization;
  }

  public void setEstimatedAverageUtilization(String estimatedAverageUtilization) {
    this.estimatedAverageUtilization = estimatedAverageUtilization;
  }


  public RecommendationDetailData estimatedMonthlySavingsAmount(String estimatedMonthlySavingsAmount) {
    this.estimatedMonthlySavingsAmount = estimatedMonthlySavingsAmount;
    return this;
  }

  /**
   * Get estimatedMonthlySavingsAmount
   * @return estimatedMonthlySavingsAmount
   */
  @javax.annotation.Nullable
  public String getEstimatedMonthlySavingsAmount() {
    return estimatedMonthlySavingsAmount;
  }

  public void setEstimatedMonthlySavingsAmount(String estimatedMonthlySavingsAmount) {
    this.estimatedMonthlySavingsAmount = estimatedMonthlySavingsAmount;
  }


  public RecommendationDetailData estimatedOnDemandCost(String estimatedOnDemandCost) {
    this.estimatedOnDemandCost = estimatedOnDemandCost;
    return this;
  }

  /**
   * Get estimatedOnDemandCost
   * @return estimatedOnDemandCost
   */
  @javax.annotation.Nullable
  public String getEstimatedOnDemandCost() {
    return estimatedOnDemandCost;
  }

  public void setEstimatedOnDemandCost(String estimatedOnDemandCost) {
    this.estimatedOnDemandCost = estimatedOnDemandCost;
  }


  public RecommendationDetailData estimatedOnDemandCostWithCurrentCommitment(String estimatedOnDemandCostWithCurrentCommitment) {
    this.estimatedOnDemandCostWithCurrentCommitment = estimatedOnDemandCostWithCurrentCommitment;
    return this;
  }

  /**
   * Get estimatedOnDemandCostWithCurrentCommitment
   * @return estimatedOnDemandCostWithCurrentCommitment
   */
  @javax.annotation.Nullable
  public String getEstimatedOnDemandCostWithCurrentCommitment() {
    return estimatedOnDemandCostWithCurrentCommitment;
  }

  public void setEstimatedOnDemandCostWithCurrentCommitment(String estimatedOnDemandCostWithCurrentCommitment) {
    this.estimatedOnDemandCostWithCurrentCommitment = estimatedOnDemandCostWithCurrentCommitment;
  }


  public RecommendationDetailData estimatedROI(String estimatedROI) {
    this.estimatedROI = estimatedROI;
    return this;
  }

  /**
   * Get estimatedROI
   * @return estimatedROI
   */
  @javax.annotation.Nullable
  public String getEstimatedROI() {
    return estimatedROI;
  }

  public void setEstimatedROI(String estimatedROI) {
    this.estimatedROI = estimatedROI;
  }


  public RecommendationDetailData estimatedSPCost(String estimatedSPCost) {
    this.estimatedSPCost = estimatedSPCost;
    return this;
  }

  /**
   * Get estimatedSPCost
   * @return estimatedSPCost
   */
  @javax.annotation.Nullable
  public String getEstimatedSPCost() {
    return estimatedSPCost;
  }

  public void setEstimatedSPCost(String estimatedSPCost) {
    this.estimatedSPCost = estimatedSPCost;
  }


  public RecommendationDetailData estimatedSavingsAmount(String estimatedSavingsAmount) {
    this.estimatedSavingsAmount = estimatedSavingsAmount;
    return this;
  }

  /**
   * Get estimatedSavingsAmount
   * @return estimatedSavingsAmount
   */
  @javax.annotation.Nullable
  public String getEstimatedSavingsAmount() {
    return estimatedSavingsAmount;
  }

  public void setEstimatedSavingsAmount(String estimatedSavingsAmount) {
    this.estimatedSavingsAmount = estimatedSavingsAmount;
  }


  public RecommendationDetailData estimatedSavingsPercentage(String estimatedSavingsPercentage) {
    this.estimatedSavingsPercentage = estimatedSavingsPercentage;
    return this;
  }

  /**
   * Get estimatedSavingsPercentage
   * @return estimatedSavingsPercentage
   */
  @javax.annotation.Nullable
  public String getEstimatedSavingsPercentage() {
    return estimatedSavingsPercentage;
  }

  public void setEstimatedSavingsPercentage(String estimatedSavingsPercentage) {
    this.estimatedSavingsPercentage = estimatedSavingsPercentage;
  }


  public RecommendationDetailData existingHourlyCommitment(String existingHourlyCommitment) {
    this.existingHourlyCommitment = existingHourlyCommitment;
    return this;
  }

  /**
   * Get existingHourlyCommitment
   * @return existingHourlyCommitment
   */
  @javax.annotation.Nullable
  public String getExistingHourlyCommitment() {
    return existingHourlyCommitment;
  }

  public void setExistingHourlyCommitment(String existingHourlyCommitment) {
    this.existingHourlyCommitment = existingHourlyCommitment;
  }


  public RecommendationDetailData hourlyCommitmentToPurchase(String hourlyCommitmentToPurchase) {
    this.hourlyCommitmentToPurchase = hourlyCommitmentToPurchase;
    return this;
  }

  /**
   * Get hourlyCommitmentToPurchase
   * @return hourlyCommitmentToPurchase
   */
  @javax.annotation.Nullable
  public String getHourlyCommitmentToPurchase() {
    return hourlyCommitmentToPurchase;
  }

  public void setHourlyCommitmentToPurchase(String hourlyCommitmentToPurchase) {
    this.hourlyCommitmentToPurchase = hourlyCommitmentToPurchase;
  }


  public RecommendationDetailData upfrontCost(String upfrontCost) {
    this.upfrontCost = upfrontCost;
    return this;
  }

  /**
   * Get upfrontCost
   * @return upfrontCost
   */
  @javax.annotation.Nullable
  public String getUpfrontCost() {
    return upfrontCost;
  }

  public void setUpfrontCost(String upfrontCost) {
    this.upfrontCost = upfrontCost;
  }


  public RecommendationDetailData currentAverageCoverage(String currentAverageCoverage) {
    this.currentAverageCoverage = currentAverageCoverage;
    return this;
  }

  /**
   * Get currentAverageCoverage
   * @return currentAverageCoverage
   */
  @javax.annotation.Nullable
  public String getCurrentAverageCoverage() {
    return currentAverageCoverage;
  }

  public void setCurrentAverageCoverage(String currentAverageCoverage) {
    this.currentAverageCoverage = currentAverageCoverage;
  }


  public RecommendationDetailData estimatedAverageCoverage(String estimatedAverageCoverage) {
    this.estimatedAverageCoverage = estimatedAverageCoverage;
    return this;
  }

  /**
   * Get estimatedAverageCoverage
   * @return estimatedAverageCoverage
   */
  @javax.annotation.Nullable
  public String getEstimatedAverageCoverage() {
    return estimatedAverageCoverage;
  }

  public void setEstimatedAverageCoverage(String estimatedAverageCoverage) {
    this.estimatedAverageCoverage = estimatedAverageCoverage;
  }


  public RecommendationDetailData metricsOverLookbackPeriod(List metricsOverLookbackPeriod) {
    this.metricsOverLookbackPeriod = metricsOverLookbackPeriod;
    return this;
  }

  /**
   * Get metricsOverLookbackPeriod
   * @return metricsOverLookbackPeriod
   */
  @javax.annotation.Nullable
  public List getMetricsOverLookbackPeriod() {
    return metricsOverLookbackPeriod;
  }

  public void setMetricsOverLookbackPeriod(List metricsOverLookbackPeriod) {
    this.metricsOverLookbackPeriod = metricsOverLookbackPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationDetailData recommendationDetailData = (RecommendationDetailData) o;
    return Objects.equals(this.accountScope, recommendationDetailData.accountScope) &&
        Objects.equals(this.lookbackPeriodInDays, recommendationDetailData.lookbackPeriodInDays) &&
        Objects.equals(this.savingsPlansType, recommendationDetailData.savingsPlansType) &&
        Objects.equals(this.termInYears, recommendationDetailData.termInYears) &&
        Objects.equals(this.paymentOption, recommendationDetailData.paymentOption) &&
        Objects.equals(this.accountId, recommendationDetailData.accountId) &&
        Objects.equals(this.currencyCode, recommendationDetailData.currencyCode) &&
        Objects.equals(this.instanceFamily, recommendationDetailData.instanceFamily) &&
        Objects.equals(this.region, recommendationDetailData.region) &&
        Objects.equals(this.offeringId, recommendationDetailData.offeringId) &&
        Objects.equals(this.generationTimestamp, recommendationDetailData.generationTimestamp) &&
        Objects.equals(this.latestUsageTimestamp, recommendationDetailData.latestUsageTimestamp) &&
        Objects.equals(this.currentAverageHourlyOnDemandSpend, recommendationDetailData.currentAverageHourlyOnDemandSpend) &&
        Objects.equals(this.currentMaximumHourlyOnDemandSpend, recommendationDetailData.currentMaximumHourlyOnDemandSpend) &&
        Objects.equals(this.currentMinimumHourlyOnDemandSpend, recommendationDetailData.currentMinimumHourlyOnDemandSpend) &&
        Objects.equals(this.estimatedAverageUtilization, recommendationDetailData.estimatedAverageUtilization) &&
        Objects.equals(this.estimatedMonthlySavingsAmount, recommendationDetailData.estimatedMonthlySavingsAmount) &&
        Objects.equals(this.estimatedOnDemandCost, recommendationDetailData.estimatedOnDemandCost) &&
        Objects.equals(this.estimatedOnDemandCostWithCurrentCommitment, recommendationDetailData.estimatedOnDemandCostWithCurrentCommitment) &&
        Objects.equals(this.estimatedROI, recommendationDetailData.estimatedROI) &&
        Objects.equals(this.estimatedSPCost, recommendationDetailData.estimatedSPCost) &&
        Objects.equals(this.estimatedSavingsAmount, recommendationDetailData.estimatedSavingsAmount) &&
        Objects.equals(this.estimatedSavingsPercentage, recommendationDetailData.estimatedSavingsPercentage) &&
        Objects.equals(this.existingHourlyCommitment, recommendationDetailData.existingHourlyCommitment) &&
        Objects.equals(this.hourlyCommitmentToPurchase, recommendationDetailData.hourlyCommitmentToPurchase) &&
        Objects.equals(this.upfrontCost, recommendationDetailData.upfrontCost) &&
        Objects.equals(this.currentAverageCoverage, recommendationDetailData.currentAverageCoverage) &&
        Objects.equals(this.estimatedAverageCoverage, recommendationDetailData.estimatedAverageCoverage) &&
        Objects.equals(this.metricsOverLookbackPeriod, recommendationDetailData.metricsOverLookbackPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountScope, lookbackPeriodInDays, savingsPlansType, termInYears, paymentOption, accountId, currencyCode, instanceFamily, region, offeringId, generationTimestamp, latestUsageTimestamp, currentAverageHourlyOnDemandSpend, currentMaximumHourlyOnDemandSpend, currentMinimumHourlyOnDemandSpend, estimatedAverageUtilization, estimatedMonthlySavingsAmount, estimatedOnDemandCost, estimatedOnDemandCostWithCurrentCommitment, estimatedROI, estimatedSPCost, estimatedSavingsAmount, estimatedSavingsPercentage, existingHourlyCommitment, hourlyCommitmentToPurchase, upfrontCost, currentAverageCoverage, estimatedAverageCoverage, metricsOverLookbackPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationDetailData {\n");
    sb.append("    accountScope: ").append(toIndentedString(accountScope)).append("\n");
    sb.append("    lookbackPeriodInDays: ").append(toIndentedString(lookbackPeriodInDays)).append("\n");
    sb.append("    savingsPlansType: ").append(toIndentedString(savingsPlansType)).append("\n");
    sb.append("    termInYears: ").append(toIndentedString(termInYears)).append("\n");
    sb.append("    paymentOption: ").append(toIndentedString(paymentOption)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    instanceFamily: ").append(toIndentedString(instanceFamily)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    offeringId: ").append(toIndentedString(offeringId)).append("\n");
    sb.append("    generationTimestamp: ").append(toIndentedString(generationTimestamp)).append("\n");
    sb.append("    latestUsageTimestamp: ").append(toIndentedString(latestUsageTimestamp)).append("\n");
    sb.append("    currentAverageHourlyOnDemandSpend: ").append(toIndentedString(currentAverageHourlyOnDemandSpend)).append("\n");
    sb.append("    currentMaximumHourlyOnDemandSpend: ").append(toIndentedString(currentMaximumHourlyOnDemandSpend)).append("\n");
    sb.append("    currentMinimumHourlyOnDemandSpend: ").append(toIndentedString(currentMinimumHourlyOnDemandSpend)).append("\n");
    sb.append("    estimatedAverageUtilization: ").append(toIndentedString(estimatedAverageUtilization)).append("\n");
    sb.append("    estimatedMonthlySavingsAmount: ").append(toIndentedString(estimatedMonthlySavingsAmount)).append("\n");
    sb.append("    estimatedOnDemandCost: ").append(toIndentedString(estimatedOnDemandCost)).append("\n");
    sb.append("    estimatedOnDemandCostWithCurrentCommitment: ").append(toIndentedString(estimatedOnDemandCostWithCurrentCommitment)).append("\n");
    sb.append("    estimatedROI: ").append(toIndentedString(estimatedROI)).append("\n");
    sb.append("    estimatedSPCost: ").append(toIndentedString(estimatedSPCost)).append("\n");
    sb.append("    estimatedSavingsAmount: ").append(toIndentedString(estimatedSavingsAmount)).append("\n");
    sb.append("    estimatedSavingsPercentage: ").append(toIndentedString(estimatedSavingsPercentage)).append("\n");
    sb.append("    existingHourlyCommitment: ").append(toIndentedString(existingHourlyCommitment)).append("\n");
    sb.append("    hourlyCommitmentToPurchase: ").append(toIndentedString(hourlyCommitmentToPurchase)).append("\n");
    sb.append("    upfrontCost: ").append(toIndentedString(upfrontCost)).append("\n");
    sb.append("    currentAverageCoverage: ").append(toIndentedString(currentAverageCoverage)).append("\n");
    sb.append("    estimatedAverageCoverage: ").append(toIndentedString(estimatedAverageCoverage)).append("\n");
    sb.append("    metricsOverLookbackPeriod: ").append(toIndentedString(metricsOverLookbackPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountScope");
    openapiFields.add("LookbackPeriodInDays");
    openapiFields.add("SavingsPlansType");
    openapiFields.add("TermInYears");
    openapiFields.add("PaymentOption");
    openapiFields.add("AccountId");
    openapiFields.add("CurrencyCode");
    openapiFields.add("InstanceFamily");
    openapiFields.add("Region");
    openapiFields.add("OfferingId");
    openapiFields.add("GenerationTimestamp");
    openapiFields.add("LatestUsageTimestamp");
    openapiFields.add("CurrentAverageHourlyOnDemandSpend");
    openapiFields.add("CurrentMaximumHourlyOnDemandSpend");
    openapiFields.add("CurrentMinimumHourlyOnDemandSpend");
    openapiFields.add("EstimatedAverageUtilization");
    openapiFields.add("EstimatedMonthlySavingsAmount");
    openapiFields.add("EstimatedOnDemandCost");
    openapiFields.add("EstimatedOnDemandCostWithCurrentCommitment");
    openapiFields.add("EstimatedROI");
    openapiFields.add("EstimatedSPCost");
    openapiFields.add("EstimatedSavingsAmount");
    openapiFields.add("EstimatedSavingsPercentage");
    openapiFields.add("ExistingHourlyCommitment");
    openapiFields.add("HourlyCommitmentToPurchase");
    openapiFields.add("UpfrontCost");
    openapiFields.add("CurrentAverageCoverage");
    openapiFields.add("EstimatedAverageCoverage");
    openapiFields.add("MetricsOverLookbackPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationDetailData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationDetailData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationDetailData is not found in the empty JSON string", RecommendationDetailData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationDetailData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationDetailData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AccountScope`
      if (jsonObj.get("AccountScope") != null && !jsonObj.get("AccountScope").isJsonNull()) {
        AccountScope.validateJsonElement(jsonObj.get("AccountScope"));
      }
      // validate the optional field `LookbackPeriodInDays`
      if (jsonObj.get("LookbackPeriodInDays") != null && !jsonObj.get("LookbackPeriodInDays").isJsonNull()) {
        LookbackPeriodInDays.validateJsonElement(jsonObj.get("LookbackPeriodInDays"));
      }
      // validate the optional field `SavingsPlansType`
      if (jsonObj.get("SavingsPlansType") != null && !jsonObj.get("SavingsPlansType").isJsonNull()) {
        SupportedSavingsPlansType.validateJsonElement(jsonObj.get("SavingsPlansType"));
      }
      // validate the optional field `TermInYears`
      if (jsonObj.get("TermInYears") != null && !jsonObj.get("TermInYears").isJsonNull()) {
        TermInYears.validateJsonElement(jsonObj.get("TermInYears"));
      }
      // validate the optional field `PaymentOption`
      if (jsonObj.get("PaymentOption") != null && !jsonObj.get("PaymentOption").isJsonNull()) {
        PaymentOption.validateJsonElement(jsonObj.get("PaymentOption"));
      }
      // validate the optional field `AccountId`
      if (jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccountId"));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      // validate the optional field `InstanceFamily`
      if (jsonObj.get("InstanceFamily") != null && !jsonObj.get("InstanceFamily").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceFamily"));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Region"));
      }
      // validate the optional field `OfferingId`
      if (jsonObj.get("OfferingId") != null && !jsonObj.get("OfferingId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OfferingId"));
      }
      if ((jsonObj.get("GenerationTimestamp") != null && !jsonObj.get("GenerationTimestamp").isJsonNull()) && !jsonObj.get("GenerationTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GenerationTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GenerationTimestamp").toString()));
      }
      if ((jsonObj.get("LatestUsageTimestamp") != null && !jsonObj.get("LatestUsageTimestamp").isJsonNull()) && !jsonObj.get("LatestUsageTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LatestUsageTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LatestUsageTimestamp").toString()));
      }
      // validate the optional field `CurrentAverageHourlyOnDemandSpend`
      if (jsonObj.get("CurrentAverageHourlyOnDemandSpend") != null && !jsonObj.get("CurrentAverageHourlyOnDemandSpend").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentAverageHourlyOnDemandSpend"));
      }
      // validate the optional field `CurrentMaximumHourlyOnDemandSpend`
      if (jsonObj.get("CurrentMaximumHourlyOnDemandSpend") != null && !jsonObj.get("CurrentMaximumHourlyOnDemandSpend").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentMaximumHourlyOnDemandSpend"));
      }
      // validate the optional field `CurrentMinimumHourlyOnDemandSpend`
      if (jsonObj.get("CurrentMinimumHourlyOnDemandSpend") != null && !jsonObj.get("CurrentMinimumHourlyOnDemandSpend").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentMinimumHourlyOnDemandSpend"));
      }
      // validate the optional field `EstimatedAverageUtilization`
      if (jsonObj.get("EstimatedAverageUtilization") != null && !jsonObj.get("EstimatedAverageUtilization").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedAverageUtilization"));
      }
      // validate the optional field `EstimatedMonthlySavingsAmount`
      if (jsonObj.get("EstimatedMonthlySavingsAmount") != null && !jsonObj.get("EstimatedMonthlySavingsAmount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedMonthlySavingsAmount"));
      }
      // validate the optional field `EstimatedOnDemandCost`
      if (jsonObj.get("EstimatedOnDemandCost") != null && !jsonObj.get("EstimatedOnDemandCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedOnDemandCost"));
      }
      // validate the optional field `EstimatedOnDemandCostWithCurrentCommitment`
      if (jsonObj.get("EstimatedOnDemandCostWithCurrentCommitment") != null && !jsonObj.get("EstimatedOnDemandCostWithCurrentCommitment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedOnDemandCostWithCurrentCommitment"));
      }
      // validate the optional field `EstimatedROI`
      if (jsonObj.get("EstimatedROI") != null && !jsonObj.get("EstimatedROI").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedROI"));
      }
      // validate the optional field `EstimatedSPCost`
      if (jsonObj.get("EstimatedSPCost") != null && !jsonObj.get("EstimatedSPCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedSPCost"));
      }
      // validate the optional field `EstimatedSavingsAmount`
      if (jsonObj.get("EstimatedSavingsAmount") != null && !jsonObj.get("EstimatedSavingsAmount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedSavingsAmount"));
      }
      // validate the optional field `EstimatedSavingsPercentage`
      if (jsonObj.get("EstimatedSavingsPercentage") != null && !jsonObj.get("EstimatedSavingsPercentage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedSavingsPercentage"));
      }
      // validate the optional field `ExistingHourlyCommitment`
      if (jsonObj.get("ExistingHourlyCommitment") != null && !jsonObj.get("ExistingHourlyCommitment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExistingHourlyCommitment"));
      }
      // validate the optional field `HourlyCommitmentToPurchase`
      if (jsonObj.get("HourlyCommitmentToPurchase") != null && !jsonObj.get("HourlyCommitmentToPurchase").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HourlyCommitmentToPurchase"));
      }
      // validate the optional field `UpfrontCost`
      if (jsonObj.get("UpfrontCost") != null && !jsonObj.get("UpfrontCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UpfrontCost"));
      }
      // validate the optional field `CurrentAverageCoverage`
      if (jsonObj.get("CurrentAverageCoverage") != null && !jsonObj.get("CurrentAverageCoverage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentAverageCoverage"));
      }
      // validate the optional field `EstimatedAverageCoverage`
      if (jsonObj.get("EstimatedAverageCoverage") != null && !jsonObj.get("EstimatedAverageCoverage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedAverageCoverage"));
      }
      // validate the optional field `MetricsOverLookbackPeriod`
      if (jsonObj.get("MetricsOverLookbackPeriod") != null && !jsonObj.get("MetricsOverLookbackPeriod").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MetricsOverLookbackPeriod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationDetailData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationDetailData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationDetailData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationDetailData.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationDetailData>() {
           @Override
           public void write(JsonWriter out, RecommendationDetailData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationDetailData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationDetailData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationDetailData
   * @throws IOException if the JSON string is invalid with respect to RecommendationDetailData
   */
  public static RecommendationDetailData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationDetailData.class);
  }

  /**
   * Convert an instance of RecommendationDetailData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

