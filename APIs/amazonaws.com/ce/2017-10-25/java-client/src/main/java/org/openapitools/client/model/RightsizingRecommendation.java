/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RightsizingRecommendationCurrentInstance;
import org.openapitools.client.model.RightsizingRecommendationModifyRecommendationDetail;
import org.openapitools.client.model.RightsizingRecommendationTerminateRecommendationDetail;
import org.openapitools.client.model.RightsizingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Recommendations to rightsize resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RightsizingRecommendation {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CURRENT_INSTANCE = "CurrentInstance";
  @SerializedName(SERIALIZED_NAME_CURRENT_INSTANCE)
  private RightsizingRecommendationCurrentInstance currentInstance;

  public static final String SERIALIZED_NAME_RIGHTSIZING_TYPE = "RightsizingType";
  @SerializedName(SERIALIZED_NAME_RIGHTSIZING_TYPE)
  private RightsizingType rightsizingType;

  public static final String SERIALIZED_NAME_MODIFY_RECOMMENDATION_DETAIL = "ModifyRecommendationDetail";
  @SerializedName(SERIALIZED_NAME_MODIFY_RECOMMENDATION_DETAIL)
  private RightsizingRecommendationModifyRecommendationDetail modifyRecommendationDetail;

  public static final String SERIALIZED_NAME_TERMINATE_RECOMMENDATION_DETAIL = "TerminateRecommendationDetail";
  @SerializedName(SERIALIZED_NAME_TERMINATE_RECOMMENDATION_DETAIL)
  private RightsizingRecommendationTerminateRecommendationDetail terminateRecommendationDetail;

  public static final String SERIALIZED_NAME_FINDING_REASON_CODES = "FindingReasonCodes";
  @SerializedName(SERIALIZED_NAME_FINDING_REASON_CODES)
  private List findingReasonCodes;

  public RightsizingRecommendation() {
  }

  public RightsizingRecommendation accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public RightsizingRecommendation currentInstance(RightsizingRecommendationCurrentInstance currentInstance) {
    this.currentInstance = currentInstance;
    return this;
  }

  /**
   * Get currentInstance
   * @return currentInstance
   */
  @javax.annotation.Nullable
  public RightsizingRecommendationCurrentInstance getCurrentInstance() {
    return currentInstance;
  }

  public void setCurrentInstance(RightsizingRecommendationCurrentInstance currentInstance) {
    this.currentInstance = currentInstance;
  }


  public RightsizingRecommendation rightsizingType(RightsizingType rightsizingType) {
    this.rightsizingType = rightsizingType;
    return this;
  }

  /**
   * Get rightsizingType
   * @return rightsizingType
   */
  @javax.annotation.Nullable
  public RightsizingType getRightsizingType() {
    return rightsizingType;
  }

  public void setRightsizingType(RightsizingType rightsizingType) {
    this.rightsizingType = rightsizingType;
  }


  public RightsizingRecommendation modifyRecommendationDetail(RightsizingRecommendationModifyRecommendationDetail modifyRecommendationDetail) {
    this.modifyRecommendationDetail = modifyRecommendationDetail;
    return this;
  }

  /**
   * Get modifyRecommendationDetail
   * @return modifyRecommendationDetail
   */
  @javax.annotation.Nullable
  public RightsizingRecommendationModifyRecommendationDetail getModifyRecommendationDetail() {
    return modifyRecommendationDetail;
  }

  public void setModifyRecommendationDetail(RightsizingRecommendationModifyRecommendationDetail modifyRecommendationDetail) {
    this.modifyRecommendationDetail = modifyRecommendationDetail;
  }


  public RightsizingRecommendation terminateRecommendationDetail(RightsizingRecommendationTerminateRecommendationDetail terminateRecommendationDetail) {
    this.terminateRecommendationDetail = terminateRecommendationDetail;
    return this;
  }

  /**
   * Get terminateRecommendationDetail
   * @return terminateRecommendationDetail
   */
  @javax.annotation.Nullable
  public RightsizingRecommendationTerminateRecommendationDetail getTerminateRecommendationDetail() {
    return terminateRecommendationDetail;
  }

  public void setTerminateRecommendationDetail(RightsizingRecommendationTerminateRecommendationDetail terminateRecommendationDetail) {
    this.terminateRecommendationDetail = terminateRecommendationDetail;
  }


  public RightsizingRecommendation findingReasonCodes(List findingReasonCodes) {
    this.findingReasonCodes = findingReasonCodes;
    return this;
  }

  /**
   * Get findingReasonCodes
   * @return findingReasonCodes
   */
  @javax.annotation.Nullable
  public List getFindingReasonCodes() {
    return findingReasonCodes;
  }

  public void setFindingReasonCodes(List findingReasonCodes) {
    this.findingReasonCodes = findingReasonCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RightsizingRecommendation rightsizingRecommendation = (RightsizingRecommendation) o;
    return Objects.equals(this.accountId, rightsizingRecommendation.accountId) &&
        Objects.equals(this.currentInstance, rightsizingRecommendation.currentInstance) &&
        Objects.equals(this.rightsizingType, rightsizingRecommendation.rightsizingType) &&
        Objects.equals(this.modifyRecommendationDetail, rightsizingRecommendation.modifyRecommendationDetail) &&
        Objects.equals(this.terminateRecommendationDetail, rightsizingRecommendation.terminateRecommendationDetail) &&
        Objects.equals(this.findingReasonCodes, rightsizingRecommendation.findingReasonCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, currentInstance, rightsizingType, modifyRecommendationDetail, terminateRecommendationDetail, findingReasonCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RightsizingRecommendation {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    currentInstance: ").append(toIndentedString(currentInstance)).append("\n");
    sb.append("    rightsizingType: ").append(toIndentedString(rightsizingType)).append("\n");
    sb.append("    modifyRecommendationDetail: ").append(toIndentedString(modifyRecommendationDetail)).append("\n");
    sb.append("    terminateRecommendationDetail: ").append(toIndentedString(terminateRecommendationDetail)).append("\n");
    sb.append("    findingReasonCodes: ").append(toIndentedString(findingReasonCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountId");
    openapiFields.add("CurrentInstance");
    openapiFields.add("RightsizingType");
    openapiFields.add("ModifyRecommendationDetail");
    openapiFields.add("TerminateRecommendationDetail");
    openapiFields.add("FindingReasonCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RightsizingRecommendation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RightsizingRecommendation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RightsizingRecommendation is not found in the empty JSON string", RightsizingRecommendation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RightsizingRecommendation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RightsizingRecommendation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AccountId`
      if (jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccountId"));
      }
      // validate the optional field `CurrentInstance`
      if (jsonObj.get("CurrentInstance") != null && !jsonObj.get("CurrentInstance").isJsonNull()) {
        RightsizingRecommendationCurrentInstance.validateJsonElement(jsonObj.get("CurrentInstance"));
      }
      // validate the optional field `RightsizingType`
      if (jsonObj.get("RightsizingType") != null && !jsonObj.get("RightsizingType").isJsonNull()) {
        RightsizingType.validateJsonElement(jsonObj.get("RightsizingType"));
      }
      // validate the optional field `ModifyRecommendationDetail`
      if (jsonObj.get("ModifyRecommendationDetail") != null && !jsonObj.get("ModifyRecommendationDetail").isJsonNull()) {
        RightsizingRecommendationModifyRecommendationDetail.validateJsonElement(jsonObj.get("ModifyRecommendationDetail"));
      }
      // validate the optional field `TerminateRecommendationDetail`
      if (jsonObj.get("TerminateRecommendationDetail") != null && !jsonObj.get("TerminateRecommendationDetail").isJsonNull()) {
        RightsizingRecommendationTerminateRecommendationDetail.validateJsonElement(jsonObj.get("TerminateRecommendationDetail"));
      }
      // validate the optional field `FindingReasonCodes`
      if (jsonObj.get("FindingReasonCodes") != null && !jsonObj.get("FindingReasonCodes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FindingReasonCodes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RightsizingRecommendation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RightsizingRecommendation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RightsizingRecommendation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RightsizingRecommendation.class));

       return (TypeAdapter<T>) new TypeAdapter<RightsizingRecommendation>() {
           @Override
           public void write(JsonWriter out, RightsizingRecommendation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RightsizingRecommendation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RightsizingRecommendation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RightsizingRecommendation
   * @throws IOException if the JSON string is invalid with respect to RightsizingRecommendation
   */
  public static RightsizingRecommendation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RightsizingRecommendation.class);
  }

  /**
   * Convert an instance of RightsizingRecommendation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

