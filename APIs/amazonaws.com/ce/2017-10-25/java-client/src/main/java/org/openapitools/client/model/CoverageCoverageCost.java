/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CoverageCoverageCost
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CoverageCoverageCost {
  public static final String SERIALIZED_NAME_ON_DEMAND_COST = "OnDemandCost";
  @SerializedName(SERIALIZED_NAME_ON_DEMAND_COST)
  private String onDemandCost;

  public CoverageCoverageCost() {
  }

  public CoverageCoverageCost onDemandCost(String onDemandCost) {
    this.onDemandCost = onDemandCost;
    return this;
  }

  /**
   * Get onDemandCost
   * @return onDemandCost
   */
  @javax.annotation.Nullable
  public String getOnDemandCost() {
    return onDemandCost;
  }

  public void setOnDemandCost(String onDemandCost) {
    this.onDemandCost = onDemandCost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoverageCoverageCost coverageCoverageCost = (CoverageCoverageCost) o;
    return Objects.equals(this.onDemandCost, coverageCoverageCost.onDemandCost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onDemandCost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoverageCoverageCost {\n");
    sb.append("    onDemandCost: ").append(toIndentedString(onDemandCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OnDemandCost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CoverageCoverageCost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoverageCoverageCost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoverageCoverageCost is not found in the empty JSON string", CoverageCoverageCost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoverageCoverageCost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoverageCoverageCost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `OnDemandCost`
      if (jsonObj.get("OnDemandCost") != null && !jsonObj.get("OnDemandCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OnDemandCost"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoverageCoverageCost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoverageCoverageCost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoverageCoverageCost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoverageCoverageCost.class));

       return (TypeAdapter<T>) new TypeAdapter<CoverageCoverageCost>() {
           @Override
           public void write(JsonWriter out, CoverageCoverageCost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoverageCoverageCost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CoverageCoverageCost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CoverageCoverageCost
   * @throws IOException if the JSON string is invalid with respect to CoverageCoverageCost
   */
  public static CoverageCoverageCost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoverageCoverageCost.class);
  }

  /**
   * Convert an instance of CoverageCoverageCost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

