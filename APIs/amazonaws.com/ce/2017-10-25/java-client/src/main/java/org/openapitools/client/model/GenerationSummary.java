/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GenerationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The summary of the Savings Plans recommendation generation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GenerationSummary {
  public static final String SERIALIZED_NAME_RECOMMENDATION_ID = "RecommendationId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_ID)
  private String recommendationId;

  public static final String SERIALIZED_NAME_GENERATION_STATUS = "GenerationStatus";
  @SerializedName(SERIALIZED_NAME_GENERATION_STATUS)
  private GenerationStatus generationStatus;

  public static final String SERIALIZED_NAME_GENERATION_STARTED_TIME = "GenerationStartedTime";
  @SerializedName(SERIALIZED_NAME_GENERATION_STARTED_TIME)
  private String generationStartedTime;

  public static final String SERIALIZED_NAME_GENERATION_COMPLETION_TIME = "GenerationCompletionTime";
  @SerializedName(SERIALIZED_NAME_GENERATION_COMPLETION_TIME)
  private String generationCompletionTime;

  public static final String SERIALIZED_NAME_ESTIMATED_COMPLETION_TIME = "EstimatedCompletionTime";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_COMPLETION_TIME)
  private String estimatedCompletionTime;

  public GenerationSummary() {
  }

  public GenerationSummary recommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
    return this;
  }

  /**
   * Get recommendationId
   * @return recommendationId
   */
  @javax.annotation.Nullable
  public String getRecommendationId() {
    return recommendationId;
  }

  public void setRecommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
  }


  public GenerationSummary generationStatus(GenerationStatus generationStatus) {
    this.generationStatus = generationStatus;
    return this;
  }

  /**
   * Get generationStatus
   * @return generationStatus
   */
  @javax.annotation.Nullable
  public GenerationStatus getGenerationStatus() {
    return generationStatus;
  }

  public void setGenerationStatus(GenerationStatus generationStatus) {
    this.generationStatus = generationStatus;
  }


  public GenerationSummary generationStartedTime(String generationStartedTime) {
    this.generationStartedTime = generationStartedTime;
    return this;
  }

  /**
   * Get generationStartedTime
   * @return generationStartedTime
   */
  @javax.annotation.Nullable
  public String getGenerationStartedTime() {
    return generationStartedTime;
  }

  public void setGenerationStartedTime(String generationStartedTime) {
    this.generationStartedTime = generationStartedTime;
  }


  public GenerationSummary generationCompletionTime(String generationCompletionTime) {
    this.generationCompletionTime = generationCompletionTime;
    return this;
  }

  /**
   * Get generationCompletionTime
   * @return generationCompletionTime
   */
  @javax.annotation.Nullable
  public String getGenerationCompletionTime() {
    return generationCompletionTime;
  }

  public void setGenerationCompletionTime(String generationCompletionTime) {
    this.generationCompletionTime = generationCompletionTime;
  }


  public GenerationSummary estimatedCompletionTime(String estimatedCompletionTime) {
    this.estimatedCompletionTime = estimatedCompletionTime;
    return this;
  }

  /**
   * Get estimatedCompletionTime
   * @return estimatedCompletionTime
   */
  @javax.annotation.Nullable
  public String getEstimatedCompletionTime() {
    return estimatedCompletionTime;
  }

  public void setEstimatedCompletionTime(String estimatedCompletionTime) {
    this.estimatedCompletionTime = estimatedCompletionTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerationSummary generationSummary = (GenerationSummary) o;
    return Objects.equals(this.recommendationId, generationSummary.recommendationId) &&
        Objects.equals(this.generationStatus, generationSummary.generationStatus) &&
        Objects.equals(this.generationStartedTime, generationSummary.generationStartedTime) &&
        Objects.equals(this.generationCompletionTime, generationSummary.generationCompletionTime) &&
        Objects.equals(this.estimatedCompletionTime, generationSummary.estimatedCompletionTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recommendationId, generationStatus, generationStartedTime, generationCompletionTime, estimatedCompletionTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerationSummary {\n");
    sb.append("    recommendationId: ").append(toIndentedString(recommendationId)).append("\n");
    sb.append("    generationStatus: ").append(toIndentedString(generationStatus)).append("\n");
    sb.append("    generationStartedTime: ").append(toIndentedString(generationStartedTime)).append("\n");
    sb.append("    generationCompletionTime: ").append(toIndentedString(generationCompletionTime)).append("\n");
    sb.append("    estimatedCompletionTime: ").append(toIndentedString(estimatedCompletionTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RecommendationId");
    openapiFields.add("GenerationStatus");
    openapiFields.add("GenerationStartedTime");
    openapiFields.add("GenerationCompletionTime");
    openapiFields.add("EstimatedCompletionTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenerationSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenerationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerationSummary is not found in the empty JSON string", GenerationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerationSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RecommendationId`
      if (jsonObj.get("RecommendationId") != null && !jsonObj.get("RecommendationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecommendationId"));
      }
      // validate the optional field `GenerationStatus`
      if (jsonObj.get("GenerationStatus") != null && !jsonObj.get("GenerationStatus").isJsonNull()) {
        GenerationStatus.validateJsonElement(jsonObj.get("GenerationStatus"));
      }
      // validate the optional field `GenerationStartedTime`
      if (jsonObj.get("GenerationStartedTime") != null && !jsonObj.get("GenerationStartedTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GenerationStartedTime"));
      }
      // validate the optional field `GenerationCompletionTime`
      if (jsonObj.get("GenerationCompletionTime") != null && !jsonObj.get("GenerationCompletionTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GenerationCompletionTime"));
      }
      // validate the optional field `EstimatedCompletionTime`
      if (jsonObj.get("EstimatedCompletionTime") != null && !jsonObj.get("EstimatedCompletionTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedCompletionTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerationSummary>() {
           @Override
           public void write(JsonWriter out, GenerationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenerationSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenerationSummary
   * @throws IOException if the JSON string is invalid with respect to GenerationSummary
   */
  public static GenerationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerationSummary.class);
  }

  /**
   * Convert an instance of GenerationSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

