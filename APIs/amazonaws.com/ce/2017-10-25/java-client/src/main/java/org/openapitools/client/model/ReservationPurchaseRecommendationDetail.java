/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReservationPurchaseRecommendationDetailInstanceDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about your recommended reservation purchase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationPurchaseRecommendationDetail {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_INSTANCE_DETAILS = "InstanceDetails";
  @SerializedName(SERIALIZED_NAME_INSTANCE_DETAILS)
  private ReservationPurchaseRecommendationDetailInstanceDetails instanceDetails;

  public static final String SERIALIZED_NAME_RECOMMENDED_NUMBER_OF_INSTANCES_TO_PURCHASE = "RecommendedNumberOfInstancesToPurchase";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_NUMBER_OF_INSTANCES_TO_PURCHASE)
  private String recommendedNumberOfInstancesToPurchase;

  public static final String SERIALIZED_NAME_RECOMMENDED_NORMALIZED_UNITS_TO_PURCHASE = "RecommendedNormalizedUnitsToPurchase";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_NORMALIZED_UNITS_TO_PURCHASE)
  private String recommendedNormalizedUnitsToPurchase;

  public static final String SERIALIZED_NAME_MINIMUM_NUMBER_OF_INSTANCES_USED_PER_HOUR = "MinimumNumberOfInstancesUsedPerHour";
  @SerializedName(SERIALIZED_NAME_MINIMUM_NUMBER_OF_INSTANCES_USED_PER_HOUR)
  private String minimumNumberOfInstancesUsedPerHour;

  public static final String SERIALIZED_NAME_MINIMUM_NORMALIZED_UNITS_USED_PER_HOUR = "MinimumNormalizedUnitsUsedPerHour";
  @SerializedName(SERIALIZED_NAME_MINIMUM_NORMALIZED_UNITS_USED_PER_HOUR)
  private String minimumNormalizedUnitsUsedPerHour;

  public static final String SERIALIZED_NAME_MAXIMUM_NUMBER_OF_INSTANCES_USED_PER_HOUR = "MaximumNumberOfInstancesUsedPerHour";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_NUMBER_OF_INSTANCES_USED_PER_HOUR)
  private String maximumNumberOfInstancesUsedPerHour;

  public static final String SERIALIZED_NAME_MAXIMUM_NORMALIZED_UNITS_USED_PER_HOUR = "MaximumNormalizedUnitsUsedPerHour";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_NORMALIZED_UNITS_USED_PER_HOUR)
  private String maximumNormalizedUnitsUsedPerHour;

  public static final String SERIALIZED_NAME_AVERAGE_NUMBER_OF_INSTANCES_USED_PER_HOUR = "AverageNumberOfInstancesUsedPerHour";
  @SerializedName(SERIALIZED_NAME_AVERAGE_NUMBER_OF_INSTANCES_USED_PER_HOUR)
  private String averageNumberOfInstancesUsedPerHour;

  public static final String SERIALIZED_NAME_AVERAGE_NORMALIZED_UNITS_USED_PER_HOUR = "AverageNormalizedUnitsUsedPerHour";
  @SerializedName(SERIALIZED_NAME_AVERAGE_NORMALIZED_UNITS_USED_PER_HOUR)
  private String averageNormalizedUnitsUsedPerHour;

  public static final String SERIALIZED_NAME_AVERAGE_UTILIZATION = "AverageUtilization";
  @SerializedName(SERIALIZED_NAME_AVERAGE_UTILIZATION)
  private String averageUtilization;

  public static final String SERIALIZED_NAME_ESTIMATED_BREAK_EVEN_IN_MONTHS = "EstimatedBreakEvenInMonths";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_BREAK_EVEN_IN_MONTHS)
  private String estimatedBreakEvenInMonths;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_SAVINGS_AMOUNT = "EstimatedMonthlySavingsAmount";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_SAVINGS_AMOUNT)
  private String estimatedMonthlySavingsAmount;

  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_SAVINGS_PERCENTAGE = "EstimatedMonthlySavingsPercentage";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_SAVINGS_PERCENTAGE)
  private String estimatedMonthlySavingsPercentage;

  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_ON_DEMAND_COST = "EstimatedMonthlyOnDemandCost";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_ON_DEMAND_COST)
  private String estimatedMonthlyOnDemandCost;

  public static final String SERIALIZED_NAME_ESTIMATED_RESERVATION_COST_FOR_LOOKBACK_PERIOD = "EstimatedReservationCostForLookbackPeriod";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_RESERVATION_COST_FOR_LOOKBACK_PERIOD)
  private String estimatedReservationCostForLookbackPeriod;

  public static final String SERIALIZED_NAME_UPFRONT_COST = "UpfrontCost";
  @SerializedName(SERIALIZED_NAME_UPFRONT_COST)
  private String upfrontCost;

  public static final String SERIALIZED_NAME_RECURRING_STANDARD_MONTHLY_COST = "RecurringStandardMonthlyCost";
  @SerializedName(SERIALIZED_NAME_RECURRING_STANDARD_MONTHLY_COST)
  private String recurringStandardMonthlyCost;

  public ReservationPurchaseRecommendationDetail() {
  }

  public ReservationPurchaseRecommendationDetail accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public ReservationPurchaseRecommendationDetail instanceDetails(ReservationPurchaseRecommendationDetailInstanceDetails instanceDetails) {
    this.instanceDetails = instanceDetails;
    return this;
  }

  /**
   * Get instanceDetails
   * @return instanceDetails
   */
  @javax.annotation.Nullable
  public ReservationPurchaseRecommendationDetailInstanceDetails getInstanceDetails() {
    return instanceDetails;
  }

  public void setInstanceDetails(ReservationPurchaseRecommendationDetailInstanceDetails instanceDetails) {
    this.instanceDetails = instanceDetails;
  }


  public ReservationPurchaseRecommendationDetail recommendedNumberOfInstancesToPurchase(String recommendedNumberOfInstancesToPurchase) {
    this.recommendedNumberOfInstancesToPurchase = recommendedNumberOfInstancesToPurchase;
    return this;
  }

  /**
   * Get recommendedNumberOfInstancesToPurchase
   * @return recommendedNumberOfInstancesToPurchase
   */
  @javax.annotation.Nullable
  public String getRecommendedNumberOfInstancesToPurchase() {
    return recommendedNumberOfInstancesToPurchase;
  }

  public void setRecommendedNumberOfInstancesToPurchase(String recommendedNumberOfInstancesToPurchase) {
    this.recommendedNumberOfInstancesToPurchase = recommendedNumberOfInstancesToPurchase;
  }


  public ReservationPurchaseRecommendationDetail recommendedNormalizedUnitsToPurchase(String recommendedNormalizedUnitsToPurchase) {
    this.recommendedNormalizedUnitsToPurchase = recommendedNormalizedUnitsToPurchase;
    return this;
  }

  /**
   * Get recommendedNormalizedUnitsToPurchase
   * @return recommendedNormalizedUnitsToPurchase
   */
  @javax.annotation.Nullable
  public String getRecommendedNormalizedUnitsToPurchase() {
    return recommendedNormalizedUnitsToPurchase;
  }

  public void setRecommendedNormalizedUnitsToPurchase(String recommendedNormalizedUnitsToPurchase) {
    this.recommendedNormalizedUnitsToPurchase = recommendedNormalizedUnitsToPurchase;
  }


  public ReservationPurchaseRecommendationDetail minimumNumberOfInstancesUsedPerHour(String minimumNumberOfInstancesUsedPerHour) {
    this.minimumNumberOfInstancesUsedPerHour = minimumNumberOfInstancesUsedPerHour;
    return this;
  }

  /**
   * Get minimumNumberOfInstancesUsedPerHour
   * @return minimumNumberOfInstancesUsedPerHour
   */
  @javax.annotation.Nullable
  public String getMinimumNumberOfInstancesUsedPerHour() {
    return minimumNumberOfInstancesUsedPerHour;
  }

  public void setMinimumNumberOfInstancesUsedPerHour(String minimumNumberOfInstancesUsedPerHour) {
    this.minimumNumberOfInstancesUsedPerHour = minimumNumberOfInstancesUsedPerHour;
  }


  public ReservationPurchaseRecommendationDetail minimumNormalizedUnitsUsedPerHour(String minimumNormalizedUnitsUsedPerHour) {
    this.minimumNormalizedUnitsUsedPerHour = minimumNormalizedUnitsUsedPerHour;
    return this;
  }

  /**
   * Get minimumNormalizedUnitsUsedPerHour
   * @return minimumNormalizedUnitsUsedPerHour
   */
  @javax.annotation.Nullable
  public String getMinimumNormalizedUnitsUsedPerHour() {
    return minimumNormalizedUnitsUsedPerHour;
  }

  public void setMinimumNormalizedUnitsUsedPerHour(String minimumNormalizedUnitsUsedPerHour) {
    this.minimumNormalizedUnitsUsedPerHour = minimumNormalizedUnitsUsedPerHour;
  }


  public ReservationPurchaseRecommendationDetail maximumNumberOfInstancesUsedPerHour(String maximumNumberOfInstancesUsedPerHour) {
    this.maximumNumberOfInstancesUsedPerHour = maximumNumberOfInstancesUsedPerHour;
    return this;
  }

  /**
   * Get maximumNumberOfInstancesUsedPerHour
   * @return maximumNumberOfInstancesUsedPerHour
   */
  @javax.annotation.Nullable
  public String getMaximumNumberOfInstancesUsedPerHour() {
    return maximumNumberOfInstancesUsedPerHour;
  }

  public void setMaximumNumberOfInstancesUsedPerHour(String maximumNumberOfInstancesUsedPerHour) {
    this.maximumNumberOfInstancesUsedPerHour = maximumNumberOfInstancesUsedPerHour;
  }


  public ReservationPurchaseRecommendationDetail maximumNormalizedUnitsUsedPerHour(String maximumNormalizedUnitsUsedPerHour) {
    this.maximumNormalizedUnitsUsedPerHour = maximumNormalizedUnitsUsedPerHour;
    return this;
  }

  /**
   * Get maximumNormalizedUnitsUsedPerHour
   * @return maximumNormalizedUnitsUsedPerHour
   */
  @javax.annotation.Nullable
  public String getMaximumNormalizedUnitsUsedPerHour() {
    return maximumNormalizedUnitsUsedPerHour;
  }

  public void setMaximumNormalizedUnitsUsedPerHour(String maximumNormalizedUnitsUsedPerHour) {
    this.maximumNormalizedUnitsUsedPerHour = maximumNormalizedUnitsUsedPerHour;
  }


  public ReservationPurchaseRecommendationDetail averageNumberOfInstancesUsedPerHour(String averageNumberOfInstancesUsedPerHour) {
    this.averageNumberOfInstancesUsedPerHour = averageNumberOfInstancesUsedPerHour;
    return this;
  }

  /**
   * Get averageNumberOfInstancesUsedPerHour
   * @return averageNumberOfInstancesUsedPerHour
   */
  @javax.annotation.Nullable
  public String getAverageNumberOfInstancesUsedPerHour() {
    return averageNumberOfInstancesUsedPerHour;
  }

  public void setAverageNumberOfInstancesUsedPerHour(String averageNumberOfInstancesUsedPerHour) {
    this.averageNumberOfInstancesUsedPerHour = averageNumberOfInstancesUsedPerHour;
  }


  public ReservationPurchaseRecommendationDetail averageNormalizedUnitsUsedPerHour(String averageNormalizedUnitsUsedPerHour) {
    this.averageNormalizedUnitsUsedPerHour = averageNormalizedUnitsUsedPerHour;
    return this;
  }

  /**
   * Get averageNormalizedUnitsUsedPerHour
   * @return averageNormalizedUnitsUsedPerHour
   */
  @javax.annotation.Nullable
  public String getAverageNormalizedUnitsUsedPerHour() {
    return averageNormalizedUnitsUsedPerHour;
  }

  public void setAverageNormalizedUnitsUsedPerHour(String averageNormalizedUnitsUsedPerHour) {
    this.averageNormalizedUnitsUsedPerHour = averageNormalizedUnitsUsedPerHour;
  }


  public ReservationPurchaseRecommendationDetail averageUtilization(String averageUtilization) {
    this.averageUtilization = averageUtilization;
    return this;
  }

  /**
   * Get averageUtilization
   * @return averageUtilization
   */
  @javax.annotation.Nullable
  public String getAverageUtilization() {
    return averageUtilization;
  }

  public void setAverageUtilization(String averageUtilization) {
    this.averageUtilization = averageUtilization;
  }


  public ReservationPurchaseRecommendationDetail estimatedBreakEvenInMonths(String estimatedBreakEvenInMonths) {
    this.estimatedBreakEvenInMonths = estimatedBreakEvenInMonths;
    return this;
  }

  /**
   * Get estimatedBreakEvenInMonths
   * @return estimatedBreakEvenInMonths
   */
  @javax.annotation.Nullable
  public String getEstimatedBreakEvenInMonths() {
    return estimatedBreakEvenInMonths;
  }

  public void setEstimatedBreakEvenInMonths(String estimatedBreakEvenInMonths) {
    this.estimatedBreakEvenInMonths = estimatedBreakEvenInMonths;
  }


  public ReservationPurchaseRecommendationDetail currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public ReservationPurchaseRecommendationDetail estimatedMonthlySavingsAmount(String estimatedMonthlySavingsAmount) {
    this.estimatedMonthlySavingsAmount = estimatedMonthlySavingsAmount;
    return this;
  }

  /**
   * Get estimatedMonthlySavingsAmount
   * @return estimatedMonthlySavingsAmount
   */
  @javax.annotation.Nullable
  public String getEstimatedMonthlySavingsAmount() {
    return estimatedMonthlySavingsAmount;
  }

  public void setEstimatedMonthlySavingsAmount(String estimatedMonthlySavingsAmount) {
    this.estimatedMonthlySavingsAmount = estimatedMonthlySavingsAmount;
  }


  public ReservationPurchaseRecommendationDetail estimatedMonthlySavingsPercentage(String estimatedMonthlySavingsPercentage) {
    this.estimatedMonthlySavingsPercentage = estimatedMonthlySavingsPercentage;
    return this;
  }

  /**
   * Get estimatedMonthlySavingsPercentage
   * @return estimatedMonthlySavingsPercentage
   */
  @javax.annotation.Nullable
  public String getEstimatedMonthlySavingsPercentage() {
    return estimatedMonthlySavingsPercentage;
  }

  public void setEstimatedMonthlySavingsPercentage(String estimatedMonthlySavingsPercentage) {
    this.estimatedMonthlySavingsPercentage = estimatedMonthlySavingsPercentage;
  }


  public ReservationPurchaseRecommendationDetail estimatedMonthlyOnDemandCost(String estimatedMonthlyOnDemandCost) {
    this.estimatedMonthlyOnDemandCost = estimatedMonthlyOnDemandCost;
    return this;
  }

  /**
   * Get estimatedMonthlyOnDemandCost
   * @return estimatedMonthlyOnDemandCost
   */
  @javax.annotation.Nullable
  public String getEstimatedMonthlyOnDemandCost() {
    return estimatedMonthlyOnDemandCost;
  }

  public void setEstimatedMonthlyOnDemandCost(String estimatedMonthlyOnDemandCost) {
    this.estimatedMonthlyOnDemandCost = estimatedMonthlyOnDemandCost;
  }


  public ReservationPurchaseRecommendationDetail estimatedReservationCostForLookbackPeriod(String estimatedReservationCostForLookbackPeriod) {
    this.estimatedReservationCostForLookbackPeriod = estimatedReservationCostForLookbackPeriod;
    return this;
  }

  /**
   * Get estimatedReservationCostForLookbackPeriod
   * @return estimatedReservationCostForLookbackPeriod
   */
  @javax.annotation.Nullable
  public String getEstimatedReservationCostForLookbackPeriod() {
    return estimatedReservationCostForLookbackPeriod;
  }

  public void setEstimatedReservationCostForLookbackPeriod(String estimatedReservationCostForLookbackPeriod) {
    this.estimatedReservationCostForLookbackPeriod = estimatedReservationCostForLookbackPeriod;
  }


  public ReservationPurchaseRecommendationDetail upfrontCost(String upfrontCost) {
    this.upfrontCost = upfrontCost;
    return this;
  }

  /**
   * Get upfrontCost
   * @return upfrontCost
   */
  @javax.annotation.Nullable
  public String getUpfrontCost() {
    return upfrontCost;
  }

  public void setUpfrontCost(String upfrontCost) {
    this.upfrontCost = upfrontCost;
  }


  public ReservationPurchaseRecommendationDetail recurringStandardMonthlyCost(String recurringStandardMonthlyCost) {
    this.recurringStandardMonthlyCost = recurringStandardMonthlyCost;
    return this;
  }

  /**
   * Get recurringStandardMonthlyCost
   * @return recurringStandardMonthlyCost
   */
  @javax.annotation.Nullable
  public String getRecurringStandardMonthlyCost() {
    return recurringStandardMonthlyCost;
  }

  public void setRecurringStandardMonthlyCost(String recurringStandardMonthlyCost) {
    this.recurringStandardMonthlyCost = recurringStandardMonthlyCost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationPurchaseRecommendationDetail reservationPurchaseRecommendationDetail = (ReservationPurchaseRecommendationDetail) o;
    return Objects.equals(this.accountId, reservationPurchaseRecommendationDetail.accountId) &&
        Objects.equals(this.instanceDetails, reservationPurchaseRecommendationDetail.instanceDetails) &&
        Objects.equals(this.recommendedNumberOfInstancesToPurchase, reservationPurchaseRecommendationDetail.recommendedNumberOfInstancesToPurchase) &&
        Objects.equals(this.recommendedNormalizedUnitsToPurchase, reservationPurchaseRecommendationDetail.recommendedNormalizedUnitsToPurchase) &&
        Objects.equals(this.minimumNumberOfInstancesUsedPerHour, reservationPurchaseRecommendationDetail.minimumNumberOfInstancesUsedPerHour) &&
        Objects.equals(this.minimumNormalizedUnitsUsedPerHour, reservationPurchaseRecommendationDetail.minimumNormalizedUnitsUsedPerHour) &&
        Objects.equals(this.maximumNumberOfInstancesUsedPerHour, reservationPurchaseRecommendationDetail.maximumNumberOfInstancesUsedPerHour) &&
        Objects.equals(this.maximumNormalizedUnitsUsedPerHour, reservationPurchaseRecommendationDetail.maximumNormalizedUnitsUsedPerHour) &&
        Objects.equals(this.averageNumberOfInstancesUsedPerHour, reservationPurchaseRecommendationDetail.averageNumberOfInstancesUsedPerHour) &&
        Objects.equals(this.averageNormalizedUnitsUsedPerHour, reservationPurchaseRecommendationDetail.averageNormalizedUnitsUsedPerHour) &&
        Objects.equals(this.averageUtilization, reservationPurchaseRecommendationDetail.averageUtilization) &&
        Objects.equals(this.estimatedBreakEvenInMonths, reservationPurchaseRecommendationDetail.estimatedBreakEvenInMonths) &&
        Objects.equals(this.currencyCode, reservationPurchaseRecommendationDetail.currencyCode) &&
        Objects.equals(this.estimatedMonthlySavingsAmount, reservationPurchaseRecommendationDetail.estimatedMonthlySavingsAmount) &&
        Objects.equals(this.estimatedMonthlySavingsPercentage, reservationPurchaseRecommendationDetail.estimatedMonthlySavingsPercentage) &&
        Objects.equals(this.estimatedMonthlyOnDemandCost, reservationPurchaseRecommendationDetail.estimatedMonthlyOnDemandCost) &&
        Objects.equals(this.estimatedReservationCostForLookbackPeriod, reservationPurchaseRecommendationDetail.estimatedReservationCostForLookbackPeriod) &&
        Objects.equals(this.upfrontCost, reservationPurchaseRecommendationDetail.upfrontCost) &&
        Objects.equals(this.recurringStandardMonthlyCost, reservationPurchaseRecommendationDetail.recurringStandardMonthlyCost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, instanceDetails, recommendedNumberOfInstancesToPurchase, recommendedNormalizedUnitsToPurchase, minimumNumberOfInstancesUsedPerHour, minimumNormalizedUnitsUsedPerHour, maximumNumberOfInstancesUsedPerHour, maximumNormalizedUnitsUsedPerHour, averageNumberOfInstancesUsedPerHour, averageNormalizedUnitsUsedPerHour, averageUtilization, estimatedBreakEvenInMonths, currencyCode, estimatedMonthlySavingsAmount, estimatedMonthlySavingsPercentage, estimatedMonthlyOnDemandCost, estimatedReservationCostForLookbackPeriod, upfrontCost, recurringStandardMonthlyCost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationPurchaseRecommendationDetail {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    instanceDetails: ").append(toIndentedString(instanceDetails)).append("\n");
    sb.append("    recommendedNumberOfInstancesToPurchase: ").append(toIndentedString(recommendedNumberOfInstancesToPurchase)).append("\n");
    sb.append("    recommendedNormalizedUnitsToPurchase: ").append(toIndentedString(recommendedNormalizedUnitsToPurchase)).append("\n");
    sb.append("    minimumNumberOfInstancesUsedPerHour: ").append(toIndentedString(minimumNumberOfInstancesUsedPerHour)).append("\n");
    sb.append("    minimumNormalizedUnitsUsedPerHour: ").append(toIndentedString(minimumNormalizedUnitsUsedPerHour)).append("\n");
    sb.append("    maximumNumberOfInstancesUsedPerHour: ").append(toIndentedString(maximumNumberOfInstancesUsedPerHour)).append("\n");
    sb.append("    maximumNormalizedUnitsUsedPerHour: ").append(toIndentedString(maximumNormalizedUnitsUsedPerHour)).append("\n");
    sb.append("    averageNumberOfInstancesUsedPerHour: ").append(toIndentedString(averageNumberOfInstancesUsedPerHour)).append("\n");
    sb.append("    averageNormalizedUnitsUsedPerHour: ").append(toIndentedString(averageNormalizedUnitsUsedPerHour)).append("\n");
    sb.append("    averageUtilization: ").append(toIndentedString(averageUtilization)).append("\n");
    sb.append("    estimatedBreakEvenInMonths: ").append(toIndentedString(estimatedBreakEvenInMonths)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    estimatedMonthlySavingsAmount: ").append(toIndentedString(estimatedMonthlySavingsAmount)).append("\n");
    sb.append("    estimatedMonthlySavingsPercentage: ").append(toIndentedString(estimatedMonthlySavingsPercentage)).append("\n");
    sb.append("    estimatedMonthlyOnDemandCost: ").append(toIndentedString(estimatedMonthlyOnDemandCost)).append("\n");
    sb.append("    estimatedReservationCostForLookbackPeriod: ").append(toIndentedString(estimatedReservationCostForLookbackPeriod)).append("\n");
    sb.append("    upfrontCost: ").append(toIndentedString(upfrontCost)).append("\n");
    sb.append("    recurringStandardMonthlyCost: ").append(toIndentedString(recurringStandardMonthlyCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountId");
    openapiFields.add("InstanceDetails");
    openapiFields.add("RecommendedNumberOfInstancesToPurchase");
    openapiFields.add("RecommendedNormalizedUnitsToPurchase");
    openapiFields.add("MinimumNumberOfInstancesUsedPerHour");
    openapiFields.add("MinimumNormalizedUnitsUsedPerHour");
    openapiFields.add("MaximumNumberOfInstancesUsedPerHour");
    openapiFields.add("MaximumNormalizedUnitsUsedPerHour");
    openapiFields.add("AverageNumberOfInstancesUsedPerHour");
    openapiFields.add("AverageNormalizedUnitsUsedPerHour");
    openapiFields.add("AverageUtilization");
    openapiFields.add("EstimatedBreakEvenInMonths");
    openapiFields.add("CurrencyCode");
    openapiFields.add("EstimatedMonthlySavingsAmount");
    openapiFields.add("EstimatedMonthlySavingsPercentage");
    openapiFields.add("EstimatedMonthlyOnDemandCost");
    openapiFields.add("EstimatedReservationCostForLookbackPeriod");
    openapiFields.add("UpfrontCost");
    openapiFields.add("RecurringStandardMonthlyCost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationPurchaseRecommendationDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationPurchaseRecommendationDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationPurchaseRecommendationDetail is not found in the empty JSON string", ReservationPurchaseRecommendationDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationPurchaseRecommendationDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationPurchaseRecommendationDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AccountId`
      if (jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccountId"));
      }
      // validate the optional field `InstanceDetails`
      if (jsonObj.get("InstanceDetails") != null && !jsonObj.get("InstanceDetails").isJsonNull()) {
        ReservationPurchaseRecommendationDetailInstanceDetails.validateJsonElement(jsonObj.get("InstanceDetails"));
      }
      // validate the optional field `RecommendedNumberOfInstancesToPurchase`
      if (jsonObj.get("RecommendedNumberOfInstancesToPurchase") != null && !jsonObj.get("RecommendedNumberOfInstancesToPurchase").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecommendedNumberOfInstancesToPurchase"));
      }
      // validate the optional field `RecommendedNormalizedUnitsToPurchase`
      if (jsonObj.get("RecommendedNormalizedUnitsToPurchase") != null && !jsonObj.get("RecommendedNormalizedUnitsToPurchase").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecommendedNormalizedUnitsToPurchase"));
      }
      // validate the optional field `MinimumNumberOfInstancesUsedPerHour`
      if (jsonObj.get("MinimumNumberOfInstancesUsedPerHour") != null && !jsonObj.get("MinimumNumberOfInstancesUsedPerHour").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MinimumNumberOfInstancesUsedPerHour"));
      }
      // validate the optional field `MinimumNormalizedUnitsUsedPerHour`
      if (jsonObj.get("MinimumNormalizedUnitsUsedPerHour") != null && !jsonObj.get("MinimumNormalizedUnitsUsedPerHour").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MinimumNormalizedUnitsUsedPerHour"));
      }
      // validate the optional field `MaximumNumberOfInstancesUsedPerHour`
      if (jsonObj.get("MaximumNumberOfInstancesUsedPerHour") != null && !jsonObj.get("MaximumNumberOfInstancesUsedPerHour").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaximumNumberOfInstancesUsedPerHour"));
      }
      // validate the optional field `MaximumNormalizedUnitsUsedPerHour`
      if (jsonObj.get("MaximumNormalizedUnitsUsedPerHour") != null && !jsonObj.get("MaximumNormalizedUnitsUsedPerHour").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaximumNormalizedUnitsUsedPerHour"));
      }
      // validate the optional field `AverageNumberOfInstancesUsedPerHour`
      if (jsonObj.get("AverageNumberOfInstancesUsedPerHour") != null && !jsonObj.get("AverageNumberOfInstancesUsedPerHour").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AverageNumberOfInstancesUsedPerHour"));
      }
      // validate the optional field `AverageNormalizedUnitsUsedPerHour`
      if (jsonObj.get("AverageNormalizedUnitsUsedPerHour") != null && !jsonObj.get("AverageNormalizedUnitsUsedPerHour").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AverageNormalizedUnitsUsedPerHour"));
      }
      // validate the optional field `AverageUtilization`
      if (jsonObj.get("AverageUtilization") != null && !jsonObj.get("AverageUtilization").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AverageUtilization"));
      }
      // validate the optional field `EstimatedBreakEvenInMonths`
      if (jsonObj.get("EstimatedBreakEvenInMonths") != null && !jsonObj.get("EstimatedBreakEvenInMonths").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedBreakEvenInMonths"));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      // validate the optional field `EstimatedMonthlySavingsAmount`
      if (jsonObj.get("EstimatedMonthlySavingsAmount") != null && !jsonObj.get("EstimatedMonthlySavingsAmount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedMonthlySavingsAmount"));
      }
      // validate the optional field `EstimatedMonthlySavingsPercentage`
      if (jsonObj.get("EstimatedMonthlySavingsPercentage") != null && !jsonObj.get("EstimatedMonthlySavingsPercentage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedMonthlySavingsPercentage"));
      }
      // validate the optional field `EstimatedMonthlyOnDemandCost`
      if (jsonObj.get("EstimatedMonthlyOnDemandCost") != null && !jsonObj.get("EstimatedMonthlyOnDemandCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedMonthlyOnDemandCost"));
      }
      // validate the optional field `EstimatedReservationCostForLookbackPeriod`
      if (jsonObj.get("EstimatedReservationCostForLookbackPeriod") != null && !jsonObj.get("EstimatedReservationCostForLookbackPeriod").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedReservationCostForLookbackPeriod"));
      }
      // validate the optional field `UpfrontCost`
      if (jsonObj.get("UpfrontCost") != null && !jsonObj.get("UpfrontCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UpfrontCost"));
      }
      // validate the optional field `RecurringStandardMonthlyCost`
      if (jsonObj.get("RecurringStandardMonthlyCost") != null && !jsonObj.get("RecurringStandardMonthlyCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecurringStandardMonthlyCost"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationPurchaseRecommendationDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationPurchaseRecommendationDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationPurchaseRecommendationDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationPurchaseRecommendationDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationPurchaseRecommendationDetail>() {
           @Override
           public void write(JsonWriter out, ReservationPurchaseRecommendationDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationPurchaseRecommendationDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationPurchaseRecommendationDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationPurchaseRecommendationDetail
   * @throws IOException if the JSON string is invalid with respect to ReservationPurchaseRecommendationDetail
   */
  public static ReservationPurchaseRecommendationDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationPurchaseRecommendationDetail.class);
  }

  /**
   * Convert an instance of ReservationPurchaseRecommendationDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

