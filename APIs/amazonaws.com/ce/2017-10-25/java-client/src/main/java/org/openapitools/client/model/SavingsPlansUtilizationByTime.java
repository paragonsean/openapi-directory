/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DateInterval;
import org.openapitools.client.model.SavingsPlansUtilizationAggregatesAmortizedCommitment;
import org.openapitools.client.model.SavingsPlansUtilizationAggregatesSavings;
import org.openapitools.client.model.SavingsPlansUtilizationAggregatesUtilization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The amount of Savings Plans utilization (in hours).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SavingsPlansUtilizationByTime {
  public static final String SERIALIZED_NAME_TIME_PERIOD = "TimePeriod";
  @SerializedName(SERIALIZED_NAME_TIME_PERIOD)
  private DateInterval timePeriod;

  public static final String SERIALIZED_NAME_UTILIZATION = "Utilization";
  @SerializedName(SERIALIZED_NAME_UTILIZATION)
  private SavingsPlansUtilizationAggregatesUtilization utilization;

  public static final String SERIALIZED_NAME_SAVINGS = "Savings";
  @SerializedName(SERIALIZED_NAME_SAVINGS)
  private SavingsPlansUtilizationAggregatesSavings savings;

  public static final String SERIALIZED_NAME_AMORTIZED_COMMITMENT = "AmortizedCommitment";
  @SerializedName(SERIALIZED_NAME_AMORTIZED_COMMITMENT)
  private SavingsPlansUtilizationAggregatesAmortizedCommitment amortizedCommitment;

  public SavingsPlansUtilizationByTime() {
  }

  public SavingsPlansUtilizationByTime timePeriod(DateInterval timePeriod) {
    this.timePeriod = timePeriod;
    return this;
  }

  /**
   * Get timePeriod
   * @return timePeriod
   */
  @javax.annotation.Nonnull
  public DateInterval getTimePeriod() {
    return timePeriod;
  }

  public void setTimePeriod(DateInterval timePeriod) {
    this.timePeriod = timePeriod;
  }


  public SavingsPlansUtilizationByTime utilization(SavingsPlansUtilizationAggregatesUtilization utilization) {
    this.utilization = utilization;
    return this;
  }

  /**
   * Get utilization
   * @return utilization
   */
  @javax.annotation.Nonnull
  public SavingsPlansUtilizationAggregatesUtilization getUtilization() {
    return utilization;
  }

  public void setUtilization(SavingsPlansUtilizationAggregatesUtilization utilization) {
    this.utilization = utilization;
  }


  public SavingsPlansUtilizationByTime savings(SavingsPlansUtilizationAggregatesSavings savings) {
    this.savings = savings;
    return this;
  }

  /**
   * Get savings
   * @return savings
   */
  @javax.annotation.Nullable
  public SavingsPlansUtilizationAggregatesSavings getSavings() {
    return savings;
  }

  public void setSavings(SavingsPlansUtilizationAggregatesSavings savings) {
    this.savings = savings;
  }


  public SavingsPlansUtilizationByTime amortizedCommitment(SavingsPlansUtilizationAggregatesAmortizedCommitment amortizedCommitment) {
    this.amortizedCommitment = amortizedCommitment;
    return this;
  }

  /**
   * Get amortizedCommitment
   * @return amortizedCommitment
   */
  @javax.annotation.Nullable
  public SavingsPlansUtilizationAggregatesAmortizedCommitment getAmortizedCommitment() {
    return amortizedCommitment;
  }

  public void setAmortizedCommitment(SavingsPlansUtilizationAggregatesAmortizedCommitment amortizedCommitment) {
    this.amortizedCommitment = amortizedCommitment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SavingsPlansUtilizationByTime savingsPlansUtilizationByTime = (SavingsPlansUtilizationByTime) o;
    return Objects.equals(this.timePeriod, savingsPlansUtilizationByTime.timePeriod) &&
        Objects.equals(this.utilization, savingsPlansUtilizationByTime.utilization) &&
        Objects.equals(this.savings, savingsPlansUtilizationByTime.savings) &&
        Objects.equals(this.amortizedCommitment, savingsPlansUtilizationByTime.amortizedCommitment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timePeriod, utilization, savings, amortizedCommitment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SavingsPlansUtilizationByTime {\n");
    sb.append("    timePeriod: ").append(toIndentedString(timePeriod)).append("\n");
    sb.append("    utilization: ").append(toIndentedString(utilization)).append("\n");
    sb.append("    savings: ").append(toIndentedString(savings)).append("\n");
    sb.append("    amortizedCommitment: ").append(toIndentedString(amortizedCommitment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TimePeriod");
    openapiFields.add("Utilization");
    openapiFields.add("Savings");
    openapiFields.add("AmortizedCommitment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TimePeriod");
    openapiRequiredFields.add("Utilization");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SavingsPlansUtilizationByTime
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SavingsPlansUtilizationByTime.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SavingsPlansUtilizationByTime is not found in the empty JSON string", SavingsPlansUtilizationByTime.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SavingsPlansUtilizationByTime.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SavingsPlansUtilizationByTime` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SavingsPlansUtilizationByTime.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TimePeriod`
      DateInterval.validateJsonElement(jsonObj.get("TimePeriod"));
      // validate the required field `Utilization`
      SavingsPlansUtilizationAggregatesUtilization.validateJsonElement(jsonObj.get("Utilization"));
      // validate the optional field `Savings`
      if (jsonObj.get("Savings") != null && !jsonObj.get("Savings").isJsonNull()) {
        SavingsPlansUtilizationAggregatesSavings.validateJsonElement(jsonObj.get("Savings"));
      }
      // validate the optional field `AmortizedCommitment`
      if (jsonObj.get("AmortizedCommitment") != null && !jsonObj.get("AmortizedCommitment").isJsonNull()) {
        SavingsPlansUtilizationAggregatesAmortizedCommitment.validateJsonElement(jsonObj.get("AmortizedCommitment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SavingsPlansUtilizationByTime.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SavingsPlansUtilizationByTime' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SavingsPlansUtilizationByTime> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SavingsPlansUtilizationByTime.class));

       return (TypeAdapter<T>) new TypeAdapter<SavingsPlansUtilizationByTime>() {
           @Override
           public void write(JsonWriter out, SavingsPlansUtilizationByTime value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SavingsPlansUtilizationByTime read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SavingsPlansUtilizationByTime given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SavingsPlansUtilizationByTime
   * @throws IOException if the JSON string is invalid with respect to SavingsPlansUtilizationByTime
   */
  public static SavingsPlansUtilizationByTime fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SavingsPlansUtilizationByTime.class);
  }

  /**
   * Convert an instance of SavingsPlansUtilizationByTime to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

