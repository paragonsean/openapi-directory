/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary {
  public static final String SERIALIZED_NAME_ESTIMATED_R_O_I = "EstimatedROI";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_R_O_I)
  private String estimatedROI;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_ESTIMATED_TOTAL_COST = "EstimatedTotalCost";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TOTAL_COST)
  private String estimatedTotalCost;

  public static final String SERIALIZED_NAME_CURRENT_ON_DEMAND_SPEND = "CurrentOnDemandSpend";
  @SerializedName(SERIALIZED_NAME_CURRENT_ON_DEMAND_SPEND)
  private String currentOnDemandSpend;

  public static final String SERIALIZED_NAME_ESTIMATED_SAVINGS_AMOUNT = "EstimatedSavingsAmount";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_SAVINGS_AMOUNT)
  private String estimatedSavingsAmount;

  public static final String SERIALIZED_NAME_TOTAL_RECOMMENDATION_COUNT = "TotalRecommendationCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECOMMENDATION_COUNT)
  private String totalRecommendationCount;

  public static final String SERIALIZED_NAME_DAILY_COMMITMENT_TO_PURCHASE = "DailyCommitmentToPurchase";
  @SerializedName(SERIALIZED_NAME_DAILY_COMMITMENT_TO_PURCHASE)
  private String dailyCommitmentToPurchase;

  public static final String SERIALIZED_NAME_HOURLY_COMMITMENT_TO_PURCHASE = "HourlyCommitmentToPurchase";
  @SerializedName(SERIALIZED_NAME_HOURLY_COMMITMENT_TO_PURCHASE)
  private String hourlyCommitmentToPurchase;

  public static final String SERIALIZED_NAME_ESTIMATED_SAVINGS_PERCENTAGE = "EstimatedSavingsPercentage";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_SAVINGS_PERCENTAGE)
  private String estimatedSavingsPercentage;

  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_SAVINGS_AMOUNT = "EstimatedMonthlySavingsAmount";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_SAVINGS_AMOUNT)
  private String estimatedMonthlySavingsAmount;

  public static final String SERIALIZED_NAME_ESTIMATED_ON_DEMAND_COST_WITH_CURRENT_COMMITMENT = "EstimatedOnDemandCostWithCurrentCommitment";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_ON_DEMAND_COST_WITH_CURRENT_COMMITMENT)
  private String estimatedOnDemandCostWithCurrentCommitment;

  public SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary() {
  }

  public SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary estimatedROI(String estimatedROI) {
    this.estimatedROI = estimatedROI;
    return this;
  }

  /**
   * Get estimatedROI
   * @return estimatedROI
   */
  @javax.annotation.Nullable
  public String getEstimatedROI() {
    return estimatedROI;
  }

  public void setEstimatedROI(String estimatedROI) {
    this.estimatedROI = estimatedROI;
  }


  public SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary estimatedTotalCost(String estimatedTotalCost) {
    this.estimatedTotalCost = estimatedTotalCost;
    return this;
  }

  /**
   * Get estimatedTotalCost
   * @return estimatedTotalCost
   */
  @javax.annotation.Nullable
  public String getEstimatedTotalCost() {
    return estimatedTotalCost;
  }

  public void setEstimatedTotalCost(String estimatedTotalCost) {
    this.estimatedTotalCost = estimatedTotalCost;
  }


  public SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary currentOnDemandSpend(String currentOnDemandSpend) {
    this.currentOnDemandSpend = currentOnDemandSpend;
    return this;
  }

  /**
   * Get currentOnDemandSpend
   * @return currentOnDemandSpend
   */
  @javax.annotation.Nullable
  public String getCurrentOnDemandSpend() {
    return currentOnDemandSpend;
  }

  public void setCurrentOnDemandSpend(String currentOnDemandSpend) {
    this.currentOnDemandSpend = currentOnDemandSpend;
  }


  public SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary estimatedSavingsAmount(String estimatedSavingsAmount) {
    this.estimatedSavingsAmount = estimatedSavingsAmount;
    return this;
  }

  /**
   * Get estimatedSavingsAmount
   * @return estimatedSavingsAmount
   */
  @javax.annotation.Nullable
  public String getEstimatedSavingsAmount() {
    return estimatedSavingsAmount;
  }

  public void setEstimatedSavingsAmount(String estimatedSavingsAmount) {
    this.estimatedSavingsAmount = estimatedSavingsAmount;
  }


  public SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary totalRecommendationCount(String totalRecommendationCount) {
    this.totalRecommendationCount = totalRecommendationCount;
    return this;
  }

  /**
   * Get totalRecommendationCount
   * @return totalRecommendationCount
   */
  @javax.annotation.Nullable
  public String getTotalRecommendationCount() {
    return totalRecommendationCount;
  }

  public void setTotalRecommendationCount(String totalRecommendationCount) {
    this.totalRecommendationCount = totalRecommendationCount;
  }


  public SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary dailyCommitmentToPurchase(String dailyCommitmentToPurchase) {
    this.dailyCommitmentToPurchase = dailyCommitmentToPurchase;
    return this;
  }

  /**
   * Get dailyCommitmentToPurchase
   * @return dailyCommitmentToPurchase
   */
  @javax.annotation.Nullable
  public String getDailyCommitmentToPurchase() {
    return dailyCommitmentToPurchase;
  }

  public void setDailyCommitmentToPurchase(String dailyCommitmentToPurchase) {
    this.dailyCommitmentToPurchase = dailyCommitmentToPurchase;
  }


  public SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary hourlyCommitmentToPurchase(String hourlyCommitmentToPurchase) {
    this.hourlyCommitmentToPurchase = hourlyCommitmentToPurchase;
    return this;
  }

  /**
   * Get hourlyCommitmentToPurchase
   * @return hourlyCommitmentToPurchase
   */
  @javax.annotation.Nullable
  public String getHourlyCommitmentToPurchase() {
    return hourlyCommitmentToPurchase;
  }

  public void setHourlyCommitmentToPurchase(String hourlyCommitmentToPurchase) {
    this.hourlyCommitmentToPurchase = hourlyCommitmentToPurchase;
  }


  public SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary estimatedSavingsPercentage(String estimatedSavingsPercentage) {
    this.estimatedSavingsPercentage = estimatedSavingsPercentage;
    return this;
  }

  /**
   * Get estimatedSavingsPercentage
   * @return estimatedSavingsPercentage
   */
  @javax.annotation.Nullable
  public String getEstimatedSavingsPercentage() {
    return estimatedSavingsPercentage;
  }

  public void setEstimatedSavingsPercentage(String estimatedSavingsPercentage) {
    this.estimatedSavingsPercentage = estimatedSavingsPercentage;
  }


  public SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary estimatedMonthlySavingsAmount(String estimatedMonthlySavingsAmount) {
    this.estimatedMonthlySavingsAmount = estimatedMonthlySavingsAmount;
    return this;
  }

  /**
   * Get estimatedMonthlySavingsAmount
   * @return estimatedMonthlySavingsAmount
   */
  @javax.annotation.Nullable
  public String getEstimatedMonthlySavingsAmount() {
    return estimatedMonthlySavingsAmount;
  }

  public void setEstimatedMonthlySavingsAmount(String estimatedMonthlySavingsAmount) {
    this.estimatedMonthlySavingsAmount = estimatedMonthlySavingsAmount;
  }


  public SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary estimatedOnDemandCostWithCurrentCommitment(String estimatedOnDemandCostWithCurrentCommitment) {
    this.estimatedOnDemandCostWithCurrentCommitment = estimatedOnDemandCostWithCurrentCommitment;
    return this;
  }

  /**
   * Get estimatedOnDemandCostWithCurrentCommitment
   * @return estimatedOnDemandCostWithCurrentCommitment
   */
  @javax.annotation.Nullable
  public String getEstimatedOnDemandCostWithCurrentCommitment() {
    return estimatedOnDemandCostWithCurrentCommitment;
  }

  public void setEstimatedOnDemandCostWithCurrentCommitment(String estimatedOnDemandCostWithCurrentCommitment) {
    this.estimatedOnDemandCostWithCurrentCommitment = estimatedOnDemandCostWithCurrentCommitment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary savingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary = (SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary) o;
    return Objects.equals(this.estimatedROI, savingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.estimatedROI) &&
        Objects.equals(this.currencyCode, savingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.currencyCode) &&
        Objects.equals(this.estimatedTotalCost, savingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.estimatedTotalCost) &&
        Objects.equals(this.currentOnDemandSpend, savingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.currentOnDemandSpend) &&
        Objects.equals(this.estimatedSavingsAmount, savingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.estimatedSavingsAmount) &&
        Objects.equals(this.totalRecommendationCount, savingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.totalRecommendationCount) &&
        Objects.equals(this.dailyCommitmentToPurchase, savingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.dailyCommitmentToPurchase) &&
        Objects.equals(this.hourlyCommitmentToPurchase, savingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.hourlyCommitmentToPurchase) &&
        Objects.equals(this.estimatedSavingsPercentage, savingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.estimatedSavingsPercentage) &&
        Objects.equals(this.estimatedMonthlySavingsAmount, savingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.estimatedMonthlySavingsAmount) &&
        Objects.equals(this.estimatedOnDemandCostWithCurrentCommitment, savingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.estimatedOnDemandCostWithCurrentCommitment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(estimatedROI, currencyCode, estimatedTotalCost, currentOnDemandSpend, estimatedSavingsAmount, totalRecommendationCount, dailyCommitmentToPurchase, hourlyCommitmentToPurchase, estimatedSavingsPercentage, estimatedMonthlySavingsAmount, estimatedOnDemandCostWithCurrentCommitment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary {\n");
    sb.append("    estimatedROI: ").append(toIndentedString(estimatedROI)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    estimatedTotalCost: ").append(toIndentedString(estimatedTotalCost)).append("\n");
    sb.append("    currentOnDemandSpend: ").append(toIndentedString(currentOnDemandSpend)).append("\n");
    sb.append("    estimatedSavingsAmount: ").append(toIndentedString(estimatedSavingsAmount)).append("\n");
    sb.append("    totalRecommendationCount: ").append(toIndentedString(totalRecommendationCount)).append("\n");
    sb.append("    dailyCommitmentToPurchase: ").append(toIndentedString(dailyCommitmentToPurchase)).append("\n");
    sb.append("    hourlyCommitmentToPurchase: ").append(toIndentedString(hourlyCommitmentToPurchase)).append("\n");
    sb.append("    estimatedSavingsPercentage: ").append(toIndentedString(estimatedSavingsPercentage)).append("\n");
    sb.append("    estimatedMonthlySavingsAmount: ").append(toIndentedString(estimatedMonthlySavingsAmount)).append("\n");
    sb.append("    estimatedOnDemandCostWithCurrentCommitment: ").append(toIndentedString(estimatedOnDemandCostWithCurrentCommitment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EstimatedROI");
    openapiFields.add("CurrencyCode");
    openapiFields.add("EstimatedTotalCost");
    openapiFields.add("CurrentOnDemandSpend");
    openapiFields.add("EstimatedSavingsAmount");
    openapiFields.add("TotalRecommendationCount");
    openapiFields.add("DailyCommitmentToPurchase");
    openapiFields.add("HourlyCommitmentToPurchase");
    openapiFields.add("EstimatedSavingsPercentage");
    openapiFields.add("EstimatedMonthlySavingsAmount");
    openapiFields.add("EstimatedOnDemandCostWithCurrentCommitment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary is not found in the empty JSON string", SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EstimatedROI`
      if (jsonObj.get("EstimatedROI") != null && !jsonObj.get("EstimatedROI").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedROI"));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      // validate the optional field `EstimatedTotalCost`
      if (jsonObj.get("EstimatedTotalCost") != null && !jsonObj.get("EstimatedTotalCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedTotalCost"));
      }
      // validate the optional field `CurrentOnDemandSpend`
      if (jsonObj.get("CurrentOnDemandSpend") != null && !jsonObj.get("CurrentOnDemandSpend").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentOnDemandSpend"));
      }
      // validate the optional field `EstimatedSavingsAmount`
      if (jsonObj.get("EstimatedSavingsAmount") != null && !jsonObj.get("EstimatedSavingsAmount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedSavingsAmount"));
      }
      // validate the optional field `TotalRecommendationCount`
      if (jsonObj.get("TotalRecommendationCount") != null && !jsonObj.get("TotalRecommendationCount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalRecommendationCount"));
      }
      // validate the optional field `DailyCommitmentToPurchase`
      if (jsonObj.get("DailyCommitmentToPurchase") != null && !jsonObj.get("DailyCommitmentToPurchase").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DailyCommitmentToPurchase"));
      }
      // validate the optional field `HourlyCommitmentToPurchase`
      if (jsonObj.get("HourlyCommitmentToPurchase") != null && !jsonObj.get("HourlyCommitmentToPurchase").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HourlyCommitmentToPurchase"));
      }
      // validate the optional field `EstimatedSavingsPercentage`
      if (jsonObj.get("EstimatedSavingsPercentage") != null && !jsonObj.get("EstimatedSavingsPercentage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedSavingsPercentage"));
      }
      // validate the optional field `EstimatedMonthlySavingsAmount`
      if (jsonObj.get("EstimatedMonthlySavingsAmount") != null && !jsonObj.get("EstimatedMonthlySavingsAmount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedMonthlySavingsAmount"));
      }
      // validate the optional field `EstimatedOnDemandCostWithCurrentCommitment`
      if (jsonObj.get("EstimatedOnDemandCostWithCurrentCommitment") != null && !jsonObj.get("EstimatedOnDemandCostWithCurrentCommitment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedOnDemandCostWithCurrentCommitment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary>() {
           @Override
           public void write(JsonWriter out, SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary
   * @throws IOException if the JSON string is invalid with respect to SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary
   */
  public static SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary.class);
  }

  /**
   * Convert an instance of SavingsPlansPurchaseRecommendationSavingsPlansPurchaseRecommendationSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

