/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InstanceDetailsEC2InstanceDetails;
import org.openapitools.client.model.InstanceDetailsESInstanceDetails;
import org.openapitools.client.model.InstanceDetailsElastiCacheInstanceDetails;
import org.openapitools.client.model.InstanceDetailsRDSInstanceDetails;
import org.openapitools.client.model.InstanceDetailsRedshiftInstanceDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about the instances that Amazon Web Services recommends that you purchase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceDetails {
  public static final String SERIALIZED_NAME_EC2_INSTANCE_DETAILS = "EC2InstanceDetails";
  @SerializedName(SERIALIZED_NAME_EC2_INSTANCE_DETAILS)
  private InstanceDetailsEC2InstanceDetails ec2InstanceDetails;

  public static final String SERIALIZED_NAME_RD_S_INSTANCE_DETAILS = "RDSInstanceDetails";
  @SerializedName(SERIALIZED_NAME_RD_S_INSTANCE_DETAILS)
  private InstanceDetailsRDSInstanceDetails rdSInstanceDetails;

  public static final String SERIALIZED_NAME_REDSHIFT_INSTANCE_DETAILS = "RedshiftInstanceDetails";
  @SerializedName(SERIALIZED_NAME_REDSHIFT_INSTANCE_DETAILS)
  private InstanceDetailsRedshiftInstanceDetails redshiftInstanceDetails;

  public static final String SERIALIZED_NAME_ELASTI_CACHE_INSTANCE_DETAILS = "ElastiCacheInstanceDetails";
  @SerializedName(SERIALIZED_NAME_ELASTI_CACHE_INSTANCE_DETAILS)
  private InstanceDetailsElastiCacheInstanceDetails elastiCacheInstanceDetails;

  public static final String SERIALIZED_NAME_ES_INSTANCE_DETAILS = "ESInstanceDetails";
  @SerializedName(SERIALIZED_NAME_ES_INSTANCE_DETAILS)
  private InstanceDetailsESInstanceDetails esInstanceDetails;

  public InstanceDetails() {
  }

  public InstanceDetails ec2InstanceDetails(InstanceDetailsEC2InstanceDetails ec2InstanceDetails) {
    this.ec2InstanceDetails = ec2InstanceDetails;
    return this;
  }

  /**
   * Get ec2InstanceDetails
   * @return ec2InstanceDetails
   */
  @javax.annotation.Nullable
  public InstanceDetailsEC2InstanceDetails getEc2InstanceDetails() {
    return ec2InstanceDetails;
  }

  public void setEc2InstanceDetails(InstanceDetailsEC2InstanceDetails ec2InstanceDetails) {
    this.ec2InstanceDetails = ec2InstanceDetails;
  }


  public InstanceDetails rdSInstanceDetails(InstanceDetailsRDSInstanceDetails rdSInstanceDetails) {
    this.rdSInstanceDetails = rdSInstanceDetails;
    return this;
  }

  /**
   * Get rdSInstanceDetails
   * @return rdSInstanceDetails
   */
  @javax.annotation.Nullable
  public InstanceDetailsRDSInstanceDetails getRdSInstanceDetails() {
    return rdSInstanceDetails;
  }

  public void setRdSInstanceDetails(InstanceDetailsRDSInstanceDetails rdSInstanceDetails) {
    this.rdSInstanceDetails = rdSInstanceDetails;
  }


  public InstanceDetails redshiftInstanceDetails(InstanceDetailsRedshiftInstanceDetails redshiftInstanceDetails) {
    this.redshiftInstanceDetails = redshiftInstanceDetails;
    return this;
  }

  /**
   * Get redshiftInstanceDetails
   * @return redshiftInstanceDetails
   */
  @javax.annotation.Nullable
  public InstanceDetailsRedshiftInstanceDetails getRedshiftInstanceDetails() {
    return redshiftInstanceDetails;
  }

  public void setRedshiftInstanceDetails(InstanceDetailsRedshiftInstanceDetails redshiftInstanceDetails) {
    this.redshiftInstanceDetails = redshiftInstanceDetails;
  }


  public InstanceDetails elastiCacheInstanceDetails(InstanceDetailsElastiCacheInstanceDetails elastiCacheInstanceDetails) {
    this.elastiCacheInstanceDetails = elastiCacheInstanceDetails;
    return this;
  }

  /**
   * Get elastiCacheInstanceDetails
   * @return elastiCacheInstanceDetails
   */
  @javax.annotation.Nullable
  public InstanceDetailsElastiCacheInstanceDetails getElastiCacheInstanceDetails() {
    return elastiCacheInstanceDetails;
  }

  public void setElastiCacheInstanceDetails(InstanceDetailsElastiCacheInstanceDetails elastiCacheInstanceDetails) {
    this.elastiCacheInstanceDetails = elastiCacheInstanceDetails;
  }


  public InstanceDetails esInstanceDetails(InstanceDetailsESInstanceDetails esInstanceDetails) {
    this.esInstanceDetails = esInstanceDetails;
    return this;
  }

  /**
   * Get esInstanceDetails
   * @return esInstanceDetails
   */
  @javax.annotation.Nullable
  public InstanceDetailsESInstanceDetails getEsInstanceDetails() {
    return esInstanceDetails;
  }

  public void setEsInstanceDetails(InstanceDetailsESInstanceDetails esInstanceDetails) {
    this.esInstanceDetails = esInstanceDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceDetails instanceDetails = (InstanceDetails) o;
    return Objects.equals(this.ec2InstanceDetails, instanceDetails.ec2InstanceDetails) &&
        Objects.equals(this.rdSInstanceDetails, instanceDetails.rdSInstanceDetails) &&
        Objects.equals(this.redshiftInstanceDetails, instanceDetails.redshiftInstanceDetails) &&
        Objects.equals(this.elastiCacheInstanceDetails, instanceDetails.elastiCacheInstanceDetails) &&
        Objects.equals(this.esInstanceDetails, instanceDetails.esInstanceDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ec2InstanceDetails, rdSInstanceDetails, redshiftInstanceDetails, elastiCacheInstanceDetails, esInstanceDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceDetails {\n");
    sb.append("    ec2InstanceDetails: ").append(toIndentedString(ec2InstanceDetails)).append("\n");
    sb.append("    rdSInstanceDetails: ").append(toIndentedString(rdSInstanceDetails)).append("\n");
    sb.append("    redshiftInstanceDetails: ").append(toIndentedString(redshiftInstanceDetails)).append("\n");
    sb.append("    elastiCacheInstanceDetails: ").append(toIndentedString(elastiCacheInstanceDetails)).append("\n");
    sb.append("    esInstanceDetails: ").append(toIndentedString(esInstanceDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EC2InstanceDetails");
    openapiFields.add("RDSInstanceDetails");
    openapiFields.add("RedshiftInstanceDetails");
    openapiFields.add("ElastiCacheInstanceDetails");
    openapiFields.add("ESInstanceDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceDetails is not found in the empty JSON string", InstanceDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EC2InstanceDetails`
      if (jsonObj.get("EC2InstanceDetails") != null && !jsonObj.get("EC2InstanceDetails").isJsonNull()) {
        InstanceDetailsEC2InstanceDetails.validateJsonElement(jsonObj.get("EC2InstanceDetails"));
      }
      // validate the optional field `RDSInstanceDetails`
      if (jsonObj.get("RDSInstanceDetails") != null && !jsonObj.get("RDSInstanceDetails").isJsonNull()) {
        InstanceDetailsRDSInstanceDetails.validateJsonElement(jsonObj.get("RDSInstanceDetails"));
      }
      // validate the optional field `RedshiftInstanceDetails`
      if (jsonObj.get("RedshiftInstanceDetails") != null && !jsonObj.get("RedshiftInstanceDetails").isJsonNull()) {
        InstanceDetailsRedshiftInstanceDetails.validateJsonElement(jsonObj.get("RedshiftInstanceDetails"));
      }
      // validate the optional field `ElastiCacheInstanceDetails`
      if (jsonObj.get("ElastiCacheInstanceDetails") != null && !jsonObj.get("ElastiCacheInstanceDetails").isJsonNull()) {
        InstanceDetailsElastiCacheInstanceDetails.validateJsonElement(jsonObj.get("ElastiCacheInstanceDetails"));
      }
      // validate the optional field `ESInstanceDetails`
      if (jsonObj.get("ESInstanceDetails") != null && !jsonObj.get("ESInstanceDetails").isJsonNull()) {
        InstanceDetailsESInstanceDetails.validateJsonElement(jsonObj.get("ESInstanceDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceDetails>() {
           @Override
           public void write(JsonWriter out, InstanceDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceDetails
   * @throws IOException if the JSON string is invalid with respect to InstanceDetails
   */
  public static InstanceDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceDetails.class);
  }

  /**
   * Convert an instance of InstanceDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

