/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CostCategoryRuleVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateCostCategoryDefinitionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateCostCategoryDefinitionRequest {
  public static final String SERIALIZED_NAME_COST_CATEGORY_ARN = "CostCategoryArn";
  @SerializedName(SERIALIZED_NAME_COST_CATEGORY_ARN)
  private String costCategoryArn;

  public static final String SERIALIZED_NAME_EFFECTIVE_START = "EffectiveStart";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_START)
  private String effectiveStart;

  public static final String SERIALIZED_NAME_RULE_VERSION = "RuleVersion";
  @SerializedName(SERIALIZED_NAME_RULE_VERSION)
  private CostCategoryRuleVersion ruleVersion;

  public static final String SERIALIZED_NAME_RULES = "Rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List rules;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "DefaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_SPLIT_CHARGE_RULES = "SplitChargeRules";
  @SerializedName(SERIALIZED_NAME_SPLIT_CHARGE_RULES)
  private List splitChargeRules;

  public UpdateCostCategoryDefinitionRequest() {
  }

  public UpdateCostCategoryDefinitionRequest costCategoryArn(String costCategoryArn) {
    this.costCategoryArn = costCategoryArn;
    return this;
  }

  /**
   * Get costCategoryArn
   * @return costCategoryArn
   */
  @javax.annotation.Nonnull
  public String getCostCategoryArn() {
    return costCategoryArn;
  }

  public void setCostCategoryArn(String costCategoryArn) {
    this.costCategoryArn = costCategoryArn;
  }


  public UpdateCostCategoryDefinitionRequest effectiveStart(String effectiveStart) {
    this.effectiveStart = effectiveStart;
    return this;
  }

  /**
   * Get effectiveStart
   * @return effectiveStart
   */
  @javax.annotation.Nullable
  public String getEffectiveStart() {
    return effectiveStart;
  }

  public void setEffectiveStart(String effectiveStart) {
    this.effectiveStart = effectiveStart;
  }


  public UpdateCostCategoryDefinitionRequest ruleVersion(CostCategoryRuleVersion ruleVersion) {
    this.ruleVersion = ruleVersion;
    return this;
  }

  /**
   * Get ruleVersion
   * @return ruleVersion
   */
  @javax.annotation.Nonnull
  public CostCategoryRuleVersion getRuleVersion() {
    return ruleVersion;
  }

  public void setRuleVersion(CostCategoryRuleVersion ruleVersion) {
    this.ruleVersion = ruleVersion;
  }


  public UpdateCostCategoryDefinitionRequest rules(List rules) {
    this.rules = rules;
    return this;
  }

  /**
   * Get rules
   * @return rules
   */
  @javax.annotation.Nonnull
  public List getRules() {
    return rules;
  }

  public void setRules(List rules) {
    this.rules = rules;
  }


  public UpdateCostCategoryDefinitionRequest defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * The default value for the cost category.
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public UpdateCostCategoryDefinitionRequest splitChargeRules(List splitChargeRules) {
    this.splitChargeRules = splitChargeRules;
    return this;
  }

  /**
   * Get splitChargeRules
   * @return splitChargeRules
   */
  @javax.annotation.Nullable
  public List getSplitChargeRules() {
    return splitChargeRules;
  }

  public void setSplitChargeRules(List splitChargeRules) {
    this.splitChargeRules = splitChargeRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateCostCategoryDefinitionRequest updateCostCategoryDefinitionRequest = (UpdateCostCategoryDefinitionRequest) o;
    return Objects.equals(this.costCategoryArn, updateCostCategoryDefinitionRequest.costCategoryArn) &&
        Objects.equals(this.effectiveStart, updateCostCategoryDefinitionRequest.effectiveStart) &&
        Objects.equals(this.ruleVersion, updateCostCategoryDefinitionRequest.ruleVersion) &&
        Objects.equals(this.rules, updateCostCategoryDefinitionRequest.rules) &&
        Objects.equals(this.defaultValue, updateCostCategoryDefinitionRequest.defaultValue) &&
        Objects.equals(this.splitChargeRules, updateCostCategoryDefinitionRequest.splitChargeRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costCategoryArn, effectiveStart, ruleVersion, rules, defaultValue, splitChargeRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateCostCategoryDefinitionRequest {\n");
    sb.append("    costCategoryArn: ").append(toIndentedString(costCategoryArn)).append("\n");
    sb.append("    effectiveStart: ").append(toIndentedString(effectiveStart)).append("\n");
    sb.append("    ruleVersion: ").append(toIndentedString(ruleVersion)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    splitChargeRules: ").append(toIndentedString(splitChargeRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CostCategoryArn");
    openapiFields.add("EffectiveStart");
    openapiFields.add("RuleVersion");
    openapiFields.add("Rules");
    openapiFields.add("DefaultValue");
    openapiFields.add("SplitChargeRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CostCategoryArn");
    openapiRequiredFields.add("RuleVersion");
    openapiRequiredFields.add("Rules");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateCostCategoryDefinitionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateCostCategoryDefinitionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateCostCategoryDefinitionRequest is not found in the empty JSON string", UpdateCostCategoryDefinitionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateCostCategoryDefinitionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateCostCategoryDefinitionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateCostCategoryDefinitionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `CostCategoryArn`
      String.validateJsonElement(jsonObj.get("CostCategoryArn"));
      // validate the optional field `EffectiveStart`
      if (jsonObj.get("EffectiveStart") != null && !jsonObj.get("EffectiveStart").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EffectiveStart"));
      }
      // validate the required field `RuleVersion`
      CostCategoryRuleVersion.validateJsonElement(jsonObj.get("RuleVersion"));
      // validate the required field `Rules`
      List.validateJsonElement(jsonObj.get("Rules"));
      if ((jsonObj.get("DefaultValue") != null && !jsonObj.get("DefaultValue").isJsonNull()) && !jsonObj.get("DefaultValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultValue").toString()));
      }
      // validate the optional field `SplitChargeRules`
      if (jsonObj.get("SplitChargeRules") != null && !jsonObj.get("SplitChargeRules").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SplitChargeRules"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateCostCategoryDefinitionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateCostCategoryDefinitionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateCostCategoryDefinitionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateCostCategoryDefinitionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateCostCategoryDefinitionRequest>() {
           @Override
           public void write(JsonWriter out, UpdateCostCategoryDefinitionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateCostCategoryDefinitionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateCostCategoryDefinitionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateCostCategoryDefinitionRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateCostCategoryDefinitionRequest
   */
  public static UpdateCostCategoryDefinitionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateCostCategoryDefinitionRequest.class);
  }

  /**
   * Convert an instance of UpdateCostCategoryDefinitionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

