/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExpressionCostCategories;
import org.openapitools.client.model.ExpressionDimensions;
import org.openapitools.client.model.ExpressionNot;
import org.openapitools.client.model.ExpressionTags;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Use &lt;code&gt;Expression&lt;/code&gt; to filter in various Cost Explorer APIs.&lt;/p&gt; &lt;p&gt;Not all &lt;code&gt;Expression&lt;/code&gt; types are supported in each API. Refer to the documentation for each specific API to see what is supported.&lt;/p&gt; &lt;p&gt;There are two patterns:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Simple dimension values.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;There are three types of simple dimension values: &lt;code&gt;CostCategories&lt;/code&gt;, &lt;code&gt;Tags&lt;/code&gt;, and &lt;code&gt;Dimensions&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Specify the &lt;code&gt;CostCategories&lt;/code&gt; field to define a filter that acts on Cost Categories.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Specify the &lt;code&gt;Tags&lt;/code&gt; field to define a filter that acts on Cost Allocation Tags.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Specify the &lt;code&gt;Dimensions&lt;/code&gt; field to define a filter that acts on the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_DimensionValues.html\&quot;&gt; &lt;code&gt;DimensionValues&lt;/code&gt; &lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For each filter type, you can set the dimension name and values for the filters that you plan to use.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For example, you can filter for &lt;code&gt;REGION&#x3D;&#x3D;us-east-1 OR REGION&#x3D;&#x3D;us-west-1&lt;/code&gt;. For &lt;code&gt;GetRightsizingRecommendation&lt;/code&gt;, the Region is a full name (for example, &lt;code&gt;REGION&#x3D;&#x3D;US East (N. Virginia)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The corresponding &lt;code&gt;Expression&lt;/code&gt; for this example is as follows: &lt;code&gt;{ \&quot;Dimensions\&quot;: { \&quot;Key\&quot;: \&quot;REGION\&quot;, \&quot;Values\&quot;: [ \&quot;us-east-1\&quot;, \&quot;us-west-1\&quot; ] } }&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;As shown in the previous example, lists of dimension values are combined with &lt;code&gt;OR&lt;/code&gt; when applying the filter.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can also set different match options to further control how the filter behaves. Not all APIs support match options. Refer to the documentation for each specific API to see what is supported.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For example, you can filter for linked account names that start with \&quot;a\&quot;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The corresponding &lt;code&gt;Expression&lt;/code&gt; for this example is as follows: &lt;code&gt;{ \&quot;Dimensions\&quot;: { \&quot;Key\&quot;: \&quot;LINKED_ACCOUNT_NAME\&quot;, \&quot;MatchOptions\&quot;: [ \&quot;STARTS_WITH\&quot; ], \&quot;Values\&quot;: [ \&quot;a\&quot; ] } }&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compound &lt;code&gt;Expression&lt;/code&gt; types with logical operations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can use multiple &lt;code&gt;Expression&lt;/code&gt; types and the logical operators &lt;code&gt;AND/OR/NOT&lt;/code&gt; to create a list of one or more &lt;code&gt;Expression&lt;/code&gt; objects. By doing this, you can filter by more advanced options.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For example, you can filter by &lt;code&gt;((REGION &#x3D;&#x3D; us-east-1 OR REGION &#x3D;&#x3D; us-west-1) OR (TAG.Type &#x3D;&#x3D; Type1)) AND (USAGE_TYPE !&#x3D; DataTransfer)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The corresponding &lt;code&gt;Expression&lt;/code&gt; for this example is as follows: &lt;code&gt;{ \&quot;And\&quot;: [ {\&quot;Or\&quot;: [ {\&quot;Dimensions\&quot;: { \&quot;Key\&quot;: \&quot;REGION\&quot;, \&quot;Values\&quot;: [ \&quot;us-east-1\&quot;, \&quot;us-west-1\&quot; ] }}, {\&quot;Tags\&quot;: { \&quot;Key\&quot;: \&quot;TagName\&quot;, \&quot;Values\&quot;: [\&quot;Value1\&quot;] } } ]}, {\&quot;Not\&quot;: {\&quot;Dimensions\&quot;: { \&quot;Key\&quot;: \&quot;USAGE_TYPE\&quot;, \&quot;Values\&quot;: [\&quot;DataTransfer\&quot;] }}} ] } &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Because each &lt;code&gt;Expression&lt;/code&gt; can have only one operator, the service returns an error if more than one is specified. The following example shows an &lt;code&gt;Expression&lt;/code&gt; object that creates an error: &lt;code&gt; { \&quot;And\&quot;: [ ... ], \&quot;Dimensions\&quot;: { \&quot;Key\&quot;: \&quot;USAGE_TYPE\&quot;, \&quot;Values\&quot;: [ \&quot;DataTransfer\&quot; ] } } &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The following is an example of the corresponding error message: &lt;code&gt;\&quot;Expression has more than one roots. Only one root operator is allowed for each expression: And, Or, Not, Dimensions, Tags, CostCategories\&quot;&lt;/code&gt; &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;For the &lt;code&gt;GetRightsizingRecommendation&lt;/code&gt; action, a combination of OR and NOT isn&#39;t supported. OR isn&#39;t supported between different dimensions, or dimensions and tags. NOT operators aren&#39;t supported. Dimensions are also limited to &lt;code&gt;LINKED_ACCOUNT&lt;/code&gt;, &lt;code&gt;REGION&lt;/code&gt;, or &lt;code&gt;RIGHTSIZING_TYPE&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For the &lt;code&gt;GetReservationPurchaseRecommendation&lt;/code&gt; action, only NOT is supported. AND and OR aren&#39;t supported. Dimensions are limited to &lt;code&gt;LINKED_ACCOUNT&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Expression {
  public static final String SERIALIZED_NAME_OR = "Or";
  @SerializedName(SERIALIZED_NAME_OR)
  private List or;

  public static final String SERIALIZED_NAME_AND = "And";
  @SerializedName(SERIALIZED_NAME_AND)
  private List and;

  public static final String SERIALIZED_NAME_NOT = "Not";
  @SerializedName(SERIALIZED_NAME_NOT)
  private ExpressionNot not;

  public static final String SERIALIZED_NAME_DIMENSIONS = "Dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private ExpressionDimensions dimensions;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private ExpressionTags tags;

  public static final String SERIALIZED_NAME_COST_CATEGORIES = "CostCategories";
  @SerializedName(SERIALIZED_NAME_COST_CATEGORIES)
  private ExpressionCostCategories costCategories;

  public Expression() {
  }

  public Expression or(List or) {
    this.or = or;
    return this;
  }

  /**
   * Get or
   * @return or
   */
  @javax.annotation.Nullable
  public List getOr() {
    return or;
  }

  public void setOr(List or) {
    this.or = or;
  }


  public Expression and(List and) {
    this.and = and;
    return this;
  }

  /**
   * Get and
   * @return and
   */
  @javax.annotation.Nullable
  public List getAnd() {
    return and;
  }

  public void setAnd(List and) {
    this.and = and;
  }


  public Expression not(ExpressionNot not) {
    this.not = not;
    return this;
  }

  /**
   * Get not
   * @return not
   */
  @javax.annotation.Nullable
  public ExpressionNot getNot() {
    return not;
  }

  public void setNot(ExpressionNot not) {
    this.not = not;
  }


  public Expression dimensions(ExpressionDimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public ExpressionDimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(ExpressionDimensions dimensions) {
    this.dimensions = dimensions;
  }


  public Expression tags(ExpressionTags tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public ExpressionTags getTags() {
    return tags;
  }

  public void setTags(ExpressionTags tags) {
    this.tags = tags;
  }


  public Expression costCategories(ExpressionCostCategories costCategories) {
    this.costCategories = costCategories;
    return this;
  }

  /**
   * Get costCategories
   * @return costCategories
   */
  @javax.annotation.Nullable
  public ExpressionCostCategories getCostCategories() {
    return costCategories;
  }

  public void setCostCategories(ExpressionCostCategories costCategories) {
    this.costCategories = costCategories;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Expression expression = (Expression) o;
    return Objects.equals(this.or, expression.or) &&
        Objects.equals(this.and, expression.and) &&
        Objects.equals(this.not, expression.not) &&
        Objects.equals(this.dimensions, expression.dimensions) &&
        Objects.equals(this.tags, expression.tags) &&
        Objects.equals(this.costCategories, expression.costCategories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(or, and, not, dimensions, tags, costCategories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Expression {\n");
    sb.append("    or: ").append(toIndentedString(or)).append("\n");
    sb.append("    and: ").append(toIndentedString(and)).append("\n");
    sb.append("    not: ").append(toIndentedString(not)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    costCategories: ").append(toIndentedString(costCategories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Or");
    openapiFields.add("And");
    openapiFields.add("Not");
    openapiFields.add("Dimensions");
    openapiFields.add("Tags");
    openapiFields.add("CostCategories");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Expression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Expression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Expression is not found in the empty JSON string", Expression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Expression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Expression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Or`
      if (jsonObj.get("Or") != null && !jsonObj.get("Or").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Or"));
      }
      // validate the optional field `And`
      if (jsonObj.get("And") != null && !jsonObj.get("And").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("And"));
      }
      // validate the optional field `Not`
      if (jsonObj.get("Not") != null && !jsonObj.get("Not").isJsonNull()) {
        ExpressionNot.validateJsonElement(jsonObj.get("Not"));
      }
      // validate the optional field `Dimensions`
      if (jsonObj.get("Dimensions") != null && !jsonObj.get("Dimensions").isJsonNull()) {
        ExpressionDimensions.validateJsonElement(jsonObj.get("Dimensions"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        ExpressionTags.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `CostCategories`
      if (jsonObj.get("CostCategories") != null && !jsonObj.get("CostCategories").isJsonNull()) {
        ExpressionCostCategories.validateJsonElement(jsonObj.get("CostCategories"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Expression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Expression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Expression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Expression.class));

       return (TypeAdapter<T>) new TypeAdapter<Expression>() {
           @Override
           public void write(JsonWriter out, Expression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Expression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Expression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Expression
   * @throws IOException if the JSON string is invalid with respect to Expression
   */
  public static Expression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Expression.class);
  }

  /**
   * Convert an instance of Expression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

