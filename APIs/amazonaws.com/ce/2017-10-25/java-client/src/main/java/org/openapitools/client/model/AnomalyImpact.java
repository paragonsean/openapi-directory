/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnomalyImpact
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnomalyImpact {
  public static final String SERIALIZED_NAME_MAX_IMPACT = "MaxImpact";
  @SerializedName(SERIALIZED_NAME_MAX_IMPACT)
  private Double maxImpact;

  public static final String SERIALIZED_NAME_TOTAL_IMPACT = "TotalImpact";
  @SerializedName(SERIALIZED_NAME_TOTAL_IMPACT)
  private Double totalImpact;

  public static final String SERIALIZED_NAME_TOTAL_ACTUAL_SPEND = "TotalActualSpend";
  @SerializedName(SERIALIZED_NAME_TOTAL_ACTUAL_SPEND)
  private Double totalActualSpend;

  public static final String SERIALIZED_NAME_TOTAL_EXPECTED_SPEND = "TotalExpectedSpend";
  @SerializedName(SERIALIZED_NAME_TOTAL_EXPECTED_SPEND)
  private Double totalExpectedSpend;

  public static final String SERIALIZED_NAME_TOTAL_IMPACT_PERCENTAGE = "TotalImpactPercentage";
  @SerializedName(SERIALIZED_NAME_TOTAL_IMPACT_PERCENTAGE)
  private Double totalImpactPercentage;

  public AnomalyImpact() {
  }

  public AnomalyImpact maxImpact(Double maxImpact) {
    this.maxImpact = maxImpact;
    return this;
  }

  /**
   * Get maxImpact
   * @return maxImpact
   */
  @javax.annotation.Nonnull
  public Double getMaxImpact() {
    return maxImpact;
  }

  public void setMaxImpact(Double maxImpact) {
    this.maxImpact = maxImpact;
  }


  public AnomalyImpact totalImpact(Double totalImpact) {
    this.totalImpact = totalImpact;
    return this;
  }

  /**
   * Get totalImpact
   * @return totalImpact
   */
  @javax.annotation.Nullable
  public Double getTotalImpact() {
    return totalImpact;
  }

  public void setTotalImpact(Double totalImpact) {
    this.totalImpact = totalImpact;
  }


  public AnomalyImpact totalActualSpend(Double totalActualSpend) {
    this.totalActualSpend = totalActualSpend;
    return this;
  }

  /**
   * Get totalActualSpend
   * @return totalActualSpend
   */
  @javax.annotation.Nullable
  public Double getTotalActualSpend() {
    return totalActualSpend;
  }

  public void setTotalActualSpend(Double totalActualSpend) {
    this.totalActualSpend = totalActualSpend;
  }


  public AnomalyImpact totalExpectedSpend(Double totalExpectedSpend) {
    this.totalExpectedSpend = totalExpectedSpend;
    return this;
  }

  /**
   * Get totalExpectedSpend
   * @return totalExpectedSpend
   */
  @javax.annotation.Nullable
  public Double getTotalExpectedSpend() {
    return totalExpectedSpend;
  }

  public void setTotalExpectedSpend(Double totalExpectedSpend) {
    this.totalExpectedSpend = totalExpectedSpend;
  }


  public AnomalyImpact totalImpactPercentage(Double totalImpactPercentage) {
    this.totalImpactPercentage = totalImpactPercentage;
    return this;
  }

  /**
   * Get totalImpactPercentage
   * @return totalImpactPercentage
   */
  @javax.annotation.Nullable
  public Double getTotalImpactPercentage() {
    return totalImpactPercentage;
  }

  public void setTotalImpactPercentage(Double totalImpactPercentage) {
    this.totalImpactPercentage = totalImpactPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnomalyImpact anomalyImpact = (AnomalyImpact) o;
    return Objects.equals(this.maxImpact, anomalyImpact.maxImpact) &&
        Objects.equals(this.totalImpact, anomalyImpact.totalImpact) &&
        Objects.equals(this.totalActualSpend, anomalyImpact.totalActualSpend) &&
        Objects.equals(this.totalExpectedSpend, anomalyImpact.totalExpectedSpend) &&
        Objects.equals(this.totalImpactPercentage, anomalyImpact.totalImpactPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxImpact, totalImpact, totalActualSpend, totalExpectedSpend, totalImpactPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnomalyImpact {\n");
    sb.append("    maxImpact: ").append(toIndentedString(maxImpact)).append("\n");
    sb.append("    totalImpact: ").append(toIndentedString(totalImpact)).append("\n");
    sb.append("    totalActualSpend: ").append(toIndentedString(totalActualSpend)).append("\n");
    sb.append("    totalExpectedSpend: ").append(toIndentedString(totalExpectedSpend)).append("\n");
    sb.append("    totalImpactPercentage: ").append(toIndentedString(totalImpactPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MaxImpact");
    openapiFields.add("TotalImpact");
    openapiFields.add("TotalActualSpend");
    openapiFields.add("TotalExpectedSpend");
    openapiFields.add("TotalImpactPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MaxImpact");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnomalyImpact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnomalyImpact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnomalyImpact is not found in the empty JSON string", AnomalyImpact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnomalyImpact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnomalyImpact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnomalyImpact.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `MaxImpact`
      Double.validateJsonElement(jsonObj.get("MaxImpact"));
      // validate the optional field `TotalImpact`
      if (jsonObj.get("TotalImpact") != null && !jsonObj.get("TotalImpact").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("TotalImpact"));
      }
      // validate the optional field `TotalActualSpend`
      if (jsonObj.get("TotalActualSpend") != null && !jsonObj.get("TotalActualSpend").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("TotalActualSpend"));
      }
      // validate the optional field `TotalExpectedSpend`
      if (jsonObj.get("TotalExpectedSpend") != null && !jsonObj.get("TotalExpectedSpend").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("TotalExpectedSpend"));
      }
      // validate the optional field `TotalImpactPercentage`
      if (jsonObj.get("TotalImpactPercentage") != null && !jsonObj.get("TotalImpactPercentage").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("TotalImpactPercentage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnomalyImpact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnomalyImpact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnomalyImpact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnomalyImpact.class));

       return (TypeAdapter<T>) new TypeAdapter<AnomalyImpact>() {
           @Override
           public void write(JsonWriter out, AnomalyImpact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnomalyImpact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnomalyImpact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnomalyImpact
   * @throws IOException if the JSON string is invalid with respect to AnomalyImpact
   */
  public static AnomalyImpact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnomalyImpact.class);
  }

  /**
   * Convert an instance of AnomalyImpact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

