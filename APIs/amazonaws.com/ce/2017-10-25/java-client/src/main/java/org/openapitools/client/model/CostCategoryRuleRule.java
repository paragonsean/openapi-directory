/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExpressionCostCategories;
import org.openapitools.client.model.ExpressionDimensions;
import org.openapitools.client.model.ExpressionNot;
import org.openapitools.client.model.ExpressionTags;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CostCategoryRuleRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CostCategoryRuleRule {
  public static final String SERIALIZED_NAME_OR = "Or";
  @SerializedName(SERIALIZED_NAME_OR)
  private List or;

  public static final String SERIALIZED_NAME_AND = "And";
  @SerializedName(SERIALIZED_NAME_AND)
  private List and;

  public static final String SERIALIZED_NAME_NOT = "Not";
  @SerializedName(SERIALIZED_NAME_NOT)
  private ExpressionNot not;

  public static final String SERIALIZED_NAME_DIMENSIONS = "Dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private ExpressionDimensions dimensions;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private ExpressionTags tags;

  public static final String SERIALIZED_NAME_COST_CATEGORIES = "CostCategories";
  @SerializedName(SERIALIZED_NAME_COST_CATEGORIES)
  private ExpressionCostCategories costCategories;

  public CostCategoryRuleRule() {
  }

  public CostCategoryRuleRule or(List or) {
    this.or = or;
    return this;
  }

  /**
   * Get or
   * @return or
   */
  @javax.annotation.Nullable
  public List getOr() {
    return or;
  }

  public void setOr(List or) {
    this.or = or;
  }


  public CostCategoryRuleRule and(List and) {
    this.and = and;
    return this;
  }

  /**
   * Get and
   * @return and
   */
  @javax.annotation.Nullable
  public List getAnd() {
    return and;
  }

  public void setAnd(List and) {
    this.and = and;
  }


  public CostCategoryRuleRule not(ExpressionNot not) {
    this.not = not;
    return this;
  }

  /**
   * Get not
   * @return not
   */
  @javax.annotation.Nullable
  public ExpressionNot getNot() {
    return not;
  }

  public void setNot(ExpressionNot not) {
    this.not = not;
  }


  public CostCategoryRuleRule dimensions(ExpressionDimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public ExpressionDimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(ExpressionDimensions dimensions) {
    this.dimensions = dimensions;
  }


  public CostCategoryRuleRule tags(ExpressionTags tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public ExpressionTags getTags() {
    return tags;
  }

  public void setTags(ExpressionTags tags) {
    this.tags = tags;
  }


  public CostCategoryRuleRule costCategories(ExpressionCostCategories costCategories) {
    this.costCategories = costCategories;
    return this;
  }

  /**
   * Get costCategories
   * @return costCategories
   */
  @javax.annotation.Nullable
  public ExpressionCostCategories getCostCategories() {
    return costCategories;
  }

  public void setCostCategories(ExpressionCostCategories costCategories) {
    this.costCategories = costCategories;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CostCategoryRuleRule costCategoryRuleRule = (CostCategoryRuleRule) o;
    return Objects.equals(this.or, costCategoryRuleRule.or) &&
        Objects.equals(this.and, costCategoryRuleRule.and) &&
        Objects.equals(this.not, costCategoryRuleRule.not) &&
        Objects.equals(this.dimensions, costCategoryRuleRule.dimensions) &&
        Objects.equals(this.tags, costCategoryRuleRule.tags) &&
        Objects.equals(this.costCategories, costCategoryRuleRule.costCategories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(or, and, not, dimensions, tags, costCategories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CostCategoryRuleRule {\n");
    sb.append("    or: ").append(toIndentedString(or)).append("\n");
    sb.append("    and: ").append(toIndentedString(and)).append("\n");
    sb.append("    not: ").append(toIndentedString(not)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    costCategories: ").append(toIndentedString(costCategories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Or");
    openapiFields.add("And");
    openapiFields.add("Not");
    openapiFields.add("Dimensions");
    openapiFields.add("Tags");
    openapiFields.add("CostCategories");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CostCategoryRuleRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CostCategoryRuleRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CostCategoryRuleRule is not found in the empty JSON string", CostCategoryRuleRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CostCategoryRuleRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CostCategoryRuleRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Or`
      if (jsonObj.get("Or") != null && !jsonObj.get("Or").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Or"));
      }
      // validate the optional field `And`
      if (jsonObj.get("And") != null && !jsonObj.get("And").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("And"));
      }
      // validate the optional field `Not`
      if (jsonObj.get("Not") != null && !jsonObj.get("Not").isJsonNull()) {
        ExpressionNot.validateJsonElement(jsonObj.get("Not"));
      }
      // validate the optional field `Dimensions`
      if (jsonObj.get("Dimensions") != null && !jsonObj.get("Dimensions").isJsonNull()) {
        ExpressionDimensions.validateJsonElement(jsonObj.get("Dimensions"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        ExpressionTags.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `CostCategories`
      if (jsonObj.get("CostCategories") != null && !jsonObj.get("CostCategories").isJsonNull()) {
        ExpressionCostCategories.validateJsonElement(jsonObj.get("CostCategories"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CostCategoryRuleRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CostCategoryRuleRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CostCategoryRuleRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CostCategoryRuleRule.class));

       return (TypeAdapter<T>) new TypeAdapter<CostCategoryRuleRule>() {
           @Override
           public void write(JsonWriter out, CostCategoryRuleRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CostCategoryRuleRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CostCategoryRuleRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CostCategoryRuleRule
   * @throws IOException if the JSON string is invalid with respect to CostCategoryRuleRule
   */
  public static CostCategoryRuleRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CostCategoryRuleRule.class);
  }

  /**
   * Convert an instance of CostCategoryRuleRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

