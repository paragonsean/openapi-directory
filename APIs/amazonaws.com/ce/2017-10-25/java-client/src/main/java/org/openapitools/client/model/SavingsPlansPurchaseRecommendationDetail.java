/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SavingsPlansPurchaseRecommendationDetailSavingsPlansDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details for your recommended Savings Plans.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SavingsPlansPurchaseRecommendationDetail {
  public static final String SERIALIZED_NAME_SAVINGS_PLANS_DETAILS = "SavingsPlansDetails";
  @SerializedName(SERIALIZED_NAME_SAVINGS_PLANS_DETAILS)
  private SavingsPlansPurchaseRecommendationDetailSavingsPlansDetails savingsPlansDetails;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_UPFRONT_COST = "UpfrontCost";
  @SerializedName(SERIALIZED_NAME_UPFRONT_COST)
  private String upfrontCost;

  public static final String SERIALIZED_NAME_ESTIMATED_R_O_I = "EstimatedROI";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_R_O_I)
  private String estimatedROI;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_ESTIMATED_S_P_COST = "EstimatedSPCost";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_S_P_COST)
  private String estimatedSPCost;

  public static final String SERIALIZED_NAME_ESTIMATED_ON_DEMAND_COST = "EstimatedOnDemandCost";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_ON_DEMAND_COST)
  private String estimatedOnDemandCost;

  public static final String SERIALIZED_NAME_ESTIMATED_ON_DEMAND_COST_WITH_CURRENT_COMMITMENT = "EstimatedOnDemandCostWithCurrentCommitment";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_ON_DEMAND_COST_WITH_CURRENT_COMMITMENT)
  private String estimatedOnDemandCostWithCurrentCommitment;

  public static final String SERIALIZED_NAME_ESTIMATED_SAVINGS_AMOUNT = "EstimatedSavingsAmount";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_SAVINGS_AMOUNT)
  private String estimatedSavingsAmount;

  public static final String SERIALIZED_NAME_ESTIMATED_SAVINGS_PERCENTAGE = "EstimatedSavingsPercentage";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_SAVINGS_PERCENTAGE)
  private String estimatedSavingsPercentage;

  public static final String SERIALIZED_NAME_HOURLY_COMMITMENT_TO_PURCHASE = "HourlyCommitmentToPurchase";
  @SerializedName(SERIALIZED_NAME_HOURLY_COMMITMENT_TO_PURCHASE)
  private String hourlyCommitmentToPurchase;

  public static final String SERIALIZED_NAME_ESTIMATED_AVERAGE_UTILIZATION = "EstimatedAverageUtilization";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_AVERAGE_UTILIZATION)
  private String estimatedAverageUtilization;

  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_SAVINGS_AMOUNT = "EstimatedMonthlySavingsAmount";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_SAVINGS_AMOUNT)
  private String estimatedMonthlySavingsAmount;

  public static final String SERIALIZED_NAME_CURRENT_MINIMUM_HOURLY_ON_DEMAND_SPEND = "CurrentMinimumHourlyOnDemandSpend";
  @SerializedName(SERIALIZED_NAME_CURRENT_MINIMUM_HOURLY_ON_DEMAND_SPEND)
  private String currentMinimumHourlyOnDemandSpend;

  public static final String SERIALIZED_NAME_CURRENT_MAXIMUM_HOURLY_ON_DEMAND_SPEND = "CurrentMaximumHourlyOnDemandSpend";
  @SerializedName(SERIALIZED_NAME_CURRENT_MAXIMUM_HOURLY_ON_DEMAND_SPEND)
  private String currentMaximumHourlyOnDemandSpend;

  public static final String SERIALIZED_NAME_CURRENT_AVERAGE_HOURLY_ON_DEMAND_SPEND = "CurrentAverageHourlyOnDemandSpend";
  @SerializedName(SERIALIZED_NAME_CURRENT_AVERAGE_HOURLY_ON_DEMAND_SPEND)
  private String currentAverageHourlyOnDemandSpend;

  public static final String SERIALIZED_NAME_RECOMMENDATION_DETAIL_ID = "RecommendationDetailId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_DETAIL_ID)
  private String recommendationDetailId;

  public SavingsPlansPurchaseRecommendationDetail() {
  }

  public SavingsPlansPurchaseRecommendationDetail savingsPlansDetails(SavingsPlansPurchaseRecommendationDetailSavingsPlansDetails savingsPlansDetails) {
    this.savingsPlansDetails = savingsPlansDetails;
    return this;
  }

  /**
   * Get savingsPlansDetails
   * @return savingsPlansDetails
   */
  @javax.annotation.Nullable
  public SavingsPlansPurchaseRecommendationDetailSavingsPlansDetails getSavingsPlansDetails() {
    return savingsPlansDetails;
  }

  public void setSavingsPlansDetails(SavingsPlansPurchaseRecommendationDetailSavingsPlansDetails savingsPlansDetails) {
    this.savingsPlansDetails = savingsPlansDetails;
  }


  public SavingsPlansPurchaseRecommendationDetail accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public SavingsPlansPurchaseRecommendationDetail upfrontCost(String upfrontCost) {
    this.upfrontCost = upfrontCost;
    return this;
  }

  /**
   * Get upfrontCost
   * @return upfrontCost
   */
  @javax.annotation.Nullable
  public String getUpfrontCost() {
    return upfrontCost;
  }

  public void setUpfrontCost(String upfrontCost) {
    this.upfrontCost = upfrontCost;
  }


  public SavingsPlansPurchaseRecommendationDetail estimatedROI(String estimatedROI) {
    this.estimatedROI = estimatedROI;
    return this;
  }

  /**
   * Get estimatedROI
   * @return estimatedROI
   */
  @javax.annotation.Nullable
  public String getEstimatedROI() {
    return estimatedROI;
  }

  public void setEstimatedROI(String estimatedROI) {
    this.estimatedROI = estimatedROI;
  }


  public SavingsPlansPurchaseRecommendationDetail currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public SavingsPlansPurchaseRecommendationDetail estimatedSPCost(String estimatedSPCost) {
    this.estimatedSPCost = estimatedSPCost;
    return this;
  }

  /**
   * Get estimatedSPCost
   * @return estimatedSPCost
   */
  @javax.annotation.Nullable
  public String getEstimatedSPCost() {
    return estimatedSPCost;
  }

  public void setEstimatedSPCost(String estimatedSPCost) {
    this.estimatedSPCost = estimatedSPCost;
  }


  public SavingsPlansPurchaseRecommendationDetail estimatedOnDemandCost(String estimatedOnDemandCost) {
    this.estimatedOnDemandCost = estimatedOnDemandCost;
    return this;
  }

  /**
   * Get estimatedOnDemandCost
   * @return estimatedOnDemandCost
   */
  @javax.annotation.Nullable
  public String getEstimatedOnDemandCost() {
    return estimatedOnDemandCost;
  }

  public void setEstimatedOnDemandCost(String estimatedOnDemandCost) {
    this.estimatedOnDemandCost = estimatedOnDemandCost;
  }


  public SavingsPlansPurchaseRecommendationDetail estimatedOnDemandCostWithCurrentCommitment(String estimatedOnDemandCostWithCurrentCommitment) {
    this.estimatedOnDemandCostWithCurrentCommitment = estimatedOnDemandCostWithCurrentCommitment;
    return this;
  }

  /**
   * Get estimatedOnDemandCostWithCurrentCommitment
   * @return estimatedOnDemandCostWithCurrentCommitment
   */
  @javax.annotation.Nullable
  public String getEstimatedOnDemandCostWithCurrentCommitment() {
    return estimatedOnDemandCostWithCurrentCommitment;
  }

  public void setEstimatedOnDemandCostWithCurrentCommitment(String estimatedOnDemandCostWithCurrentCommitment) {
    this.estimatedOnDemandCostWithCurrentCommitment = estimatedOnDemandCostWithCurrentCommitment;
  }


  public SavingsPlansPurchaseRecommendationDetail estimatedSavingsAmount(String estimatedSavingsAmount) {
    this.estimatedSavingsAmount = estimatedSavingsAmount;
    return this;
  }

  /**
   * Get estimatedSavingsAmount
   * @return estimatedSavingsAmount
   */
  @javax.annotation.Nullable
  public String getEstimatedSavingsAmount() {
    return estimatedSavingsAmount;
  }

  public void setEstimatedSavingsAmount(String estimatedSavingsAmount) {
    this.estimatedSavingsAmount = estimatedSavingsAmount;
  }


  public SavingsPlansPurchaseRecommendationDetail estimatedSavingsPercentage(String estimatedSavingsPercentage) {
    this.estimatedSavingsPercentage = estimatedSavingsPercentage;
    return this;
  }

  /**
   * Get estimatedSavingsPercentage
   * @return estimatedSavingsPercentage
   */
  @javax.annotation.Nullable
  public String getEstimatedSavingsPercentage() {
    return estimatedSavingsPercentage;
  }

  public void setEstimatedSavingsPercentage(String estimatedSavingsPercentage) {
    this.estimatedSavingsPercentage = estimatedSavingsPercentage;
  }


  public SavingsPlansPurchaseRecommendationDetail hourlyCommitmentToPurchase(String hourlyCommitmentToPurchase) {
    this.hourlyCommitmentToPurchase = hourlyCommitmentToPurchase;
    return this;
  }

  /**
   * Get hourlyCommitmentToPurchase
   * @return hourlyCommitmentToPurchase
   */
  @javax.annotation.Nullable
  public String getHourlyCommitmentToPurchase() {
    return hourlyCommitmentToPurchase;
  }

  public void setHourlyCommitmentToPurchase(String hourlyCommitmentToPurchase) {
    this.hourlyCommitmentToPurchase = hourlyCommitmentToPurchase;
  }


  public SavingsPlansPurchaseRecommendationDetail estimatedAverageUtilization(String estimatedAverageUtilization) {
    this.estimatedAverageUtilization = estimatedAverageUtilization;
    return this;
  }

  /**
   * Get estimatedAverageUtilization
   * @return estimatedAverageUtilization
   */
  @javax.annotation.Nullable
  public String getEstimatedAverageUtilization() {
    return estimatedAverageUtilization;
  }

  public void setEstimatedAverageUtilization(String estimatedAverageUtilization) {
    this.estimatedAverageUtilization = estimatedAverageUtilization;
  }


  public SavingsPlansPurchaseRecommendationDetail estimatedMonthlySavingsAmount(String estimatedMonthlySavingsAmount) {
    this.estimatedMonthlySavingsAmount = estimatedMonthlySavingsAmount;
    return this;
  }

  /**
   * Get estimatedMonthlySavingsAmount
   * @return estimatedMonthlySavingsAmount
   */
  @javax.annotation.Nullable
  public String getEstimatedMonthlySavingsAmount() {
    return estimatedMonthlySavingsAmount;
  }

  public void setEstimatedMonthlySavingsAmount(String estimatedMonthlySavingsAmount) {
    this.estimatedMonthlySavingsAmount = estimatedMonthlySavingsAmount;
  }


  public SavingsPlansPurchaseRecommendationDetail currentMinimumHourlyOnDemandSpend(String currentMinimumHourlyOnDemandSpend) {
    this.currentMinimumHourlyOnDemandSpend = currentMinimumHourlyOnDemandSpend;
    return this;
  }

  /**
   * Get currentMinimumHourlyOnDemandSpend
   * @return currentMinimumHourlyOnDemandSpend
   */
  @javax.annotation.Nullable
  public String getCurrentMinimumHourlyOnDemandSpend() {
    return currentMinimumHourlyOnDemandSpend;
  }

  public void setCurrentMinimumHourlyOnDemandSpend(String currentMinimumHourlyOnDemandSpend) {
    this.currentMinimumHourlyOnDemandSpend = currentMinimumHourlyOnDemandSpend;
  }


  public SavingsPlansPurchaseRecommendationDetail currentMaximumHourlyOnDemandSpend(String currentMaximumHourlyOnDemandSpend) {
    this.currentMaximumHourlyOnDemandSpend = currentMaximumHourlyOnDemandSpend;
    return this;
  }

  /**
   * Get currentMaximumHourlyOnDemandSpend
   * @return currentMaximumHourlyOnDemandSpend
   */
  @javax.annotation.Nullable
  public String getCurrentMaximumHourlyOnDemandSpend() {
    return currentMaximumHourlyOnDemandSpend;
  }

  public void setCurrentMaximumHourlyOnDemandSpend(String currentMaximumHourlyOnDemandSpend) {
    this.currentMaximumHourlyOnDemandSpend = currentMaximumHourlyOnDemandSpend;
  }


  public SavingsPlansPurchaseRecommendationDetail currentAverageHourlyOnDemandSpend(String currentAverageHourlyOnDemandSpend) {
    this.currentAverageHourlyOnDemandSpend = currentAverageHourlyOnDemandSpend;
    return this;
  }

  /**
   * Get currentAverageHourlyOnDemandSpend
   * @return currentAverageHourlyOnDemandSpend
   */
  @javax.annotation.Nullable
  public String getCurrentAverageHourlyOnDemandSpend() {
    return currentAverageHourlyOnDemandSpend;
  }

  public void setCurrentAverageHourlyOnDemandSpend(String currentAverageHourlyOnDemandSpend) {
    this.currentAverageHourlyOnDemandSpend = currentAverageHourlyOnDemandSpend;
  }


  public SavingsPlansPurchaseRecommendationDetail recommendationDetailId(String recommendationDetailId) {
    this.recommendationDetailId = recommendationDetailId;
    return this;
  }

  /**
   * Get recommendationDetailId
   * @return recommendationDetailId
   */
  @javax.annotation.Nullable
  public String getRecommendationDetailId() {
    return recommendationDetailId;
  }

  public void setRecommendationDetailId(String recommendationDetailId) {
    this.recommendationDetailId = recommendationDetailId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SavingsPlansPurchaseRecommendationDetail savingsPlansPurchaseRecommendationDetail = (SavingsPlansPurchaseRecommendationDetail) o;
    return Objects.equals(this.savingsPlansDetails, savingsPlansPurchaseRecommendationDetail.savingsPlansDetails) &&
        Objects.equals(this.accountId, savingsPlansPurchaseRecommendationDetail.accountId) &&
        Objects.equals(this.upfrontCost, savingsPlansPurchaseRecommendationDetail.upfrontCost) &&
        Objects.equals(this.estimatedROI, savingsPlansPurchaseRecommendationDetail.estimatedROI) &&
        Objects.equals(this.currencyCode, savingsPlansPurchaseRecommendationDetail.currencyCode) &&
        Objects.equals(this.estimatedSPCost, savingsPlansPurchaseRecommendationDetail.estimatedSPCost) &&
        Objects.equals(this.estimatedOnDemandCost, savingsPlansPurchaseRecommendationDetail.estimatedOnDemandCost) &&
        Objects.equals(this.estimatedOnDemandCostWithCurrentCommitment, savingsPlansPurchaseRecommendationDetail.estimatedOnDemandCostWithCurrentCommitment) &&
        Objects.equals(this.estimatedSavingsAmount, savingsPlansPurchaseRecommendationDetail.estimatedSavingsAmount) &&
        Objects.equals(this.estimatedSavingsPercentage, savingsPlansPurchaseRecommendationDetail.estimatedSavingsPercentage) &&
        Objects.equals(this.hourlyCommitmentToPurchase, savingsPlansPurchaseRecommendationDetail.hourlyCommitmentToPurchase) &&
        Objects.equals(this.estimatedAverageUtilization, savingsPlansPurchaseRecommendationDetail.estimatedAverageUtilization) &&
        Objects.equals(this.estimatedMonthlySavingsAmount, savingsPlansPurchaseRecommendationDetail.estimatedMonthlySavingsAmount) &&
        Objects.equals(this.currentMinimumHourlyOnDemandSpend, savingsPlansPurchaseRecommendationDetail.currentMinimumHourlyOnDemandSpend) &&
        Objects.equals(this.currentMaximumHourlyOnDemandSpend, savingsPlansPurchaseRecommendationDetail.currentMaximumHourlyOnDemandSpend) &&
        Objects.equals(this.currentAverageHourlyOnDemandSpend, savingsPlansPurchaseRecommendationDetail.currentAverageHourlyOnDemandSpend) &&
        Objects.equals(this.recommendationDetailId, savingsPlansPurchaseRecommendationDetail.recommendationDetailId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(savingsPlansDetails, accountId, upfrontCost, estimatedROI, currencyCode, estimatedSPCost, estimatedOnDemandCost, estimatedOnDemandCostWithCurrentCommitment, estimatedSavingsAmount, estimatedSavingsPercentage, hourlyCommitmentToPurchase, estimatedAverageUtilization, estimatedMonthlySavingsAmount, currentMinimumHourlyOnDemandSpend, currentMaximumHourlyOnDemandSpend, currentAverageHourlyOnDemandSpend, recommendationDetailId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SavingsPlansPurchaseRecommendationDetail {\n");
    sb.append("    savingsPlansDetails: ").append(toIndentedString(savingsPlansDetails)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    upfrontCost: ").append(toIndentedString(upfrontCost)).append("\n");
    sb.append("    estimatedROI: ").append(toIndentedString(estimatedROI)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    estimatedSPCost: ").append(toIndentedString(estimatedSPCost)).append("\n");
    sb.append("    estimatedOnDemandCost: ").append(toIndentedString(estimatedOnDemandCost)).append("\n");
    sb.append("    estimatedOnDemandCostWithCurrentCommitment: ").append(toIndentedString(estimatedOnDemandCostWithCurrentCommitment)).append("\n");
    sb.append("    estimatedSavingsAmount: ").append(toIndentedString(estimatedSavingsAmount)).append("\n");
    sb.append("    estimatedSavingsPercentage: ").append(toIndentedString(estimatedSavingsPercentage)).append("\n");
    sb.append("    hourlyCommitmentToPurchase: ").append(toIndentedString(hourlyCommitmentToPurchase)).append("\n");
    sb.append("    estimatedAverageUtilization: ").append(toIndentedString(estimatedAverageUtilization)).append("\n");
    sb.append("    estimatedMonthlySavingsAmount: ").append(toIndentedString(estimatedMonthlySavingsAmount)).append("\n");
    sb.append("    currentMinimumHourlyOnDemandSpend: ").append(toIndentedString(currentMinimumHourlyOnDemandSpend)).append("\n");
    sb.append("    currentMaximumHourlyOnDemandSpend: ").append(toIndentedString(currentMaximumHourlyOnDemandSpend)).append("\n");
    sb.append("    currentAverageHourlyOnDemandSpend: ").append(toIndentedString(currentAverageHourlyOnDemandSpend)).append("\n");
    sb.append("    recommendationDetailId: ").append(toIndentedString(recommendationDetailId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SavingsPlansDetails");
    openapiFields.add("AccountId");
    openapiFields.add("UpfrontCost");
    openapiFields.add("EstimatedROI");
    openapiFields.add("CurrencyCode");
    openapiFields.add("EstimatedSPCost");
    openapiFields.add("EstimatedOnDemandCost");
    openapiFields.add("EstimatedOnDemandCostWithCurrentCommitment");
    openapiFields.add("EstimatedSavingsAmount");
    openapiFields.add("EstimatedSavingsPercentage");
    openapiFields.add("HourlyCommitmentToPurchase");
    openapiFields.add("EstimatedAverageUtilization");
    openapiFields.add("EstimatedMonthlySavingsAmount");
    openapiFields.add("CurrentMinimumHourlyOnDemandSpend");
    openapiFields.add("CurrentMaximumHourlyOnDemandSpend");
    openapiFields.add("CurrentAverageHourlyOnDemandSpend");
    openapiFields.add("RecommendationDetailId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SavingsPlansPurchaseRecommendationDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SavingsPlansPurchaseRecommendationDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SavingsPlansPurchaseRecommendationDetail is not found in the empty JSON string", SavingsPlansPurchaseRecommendationDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SavingsPlansPurchaseRecommendationDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SavingsPlansPurchaseRecommendationDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SavingsPlansDetails`
      if (jsonObj.get("SavingsPlansDetails") != null && !jsonObj.get("SavingsPlansDetails").isJsonNull()) {
        SavingsPlansPurchaseRecommendationDetailSavingsPlansDetails.validateJsonElement(jsonObj.get("SavingsPlansDetails"));
      }
      // validate the optional field `AccountId`
      if (jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccountId"));
      }
      // validate the optional field `UpfrontCost`
      if (jsonObj.get("UpfrontCost") != null && !jsonObj.get("UpfrontCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UpfrontCost"));
      }
      // validate the optional field `EstimatedROI`
      if (jsonObj.get("EstimatedROI") != null && !jsonObj.get("EstimatedROI").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedROI"));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      // validate the optional field `EstimatedSPCost`
      if (jsonObj.get("EstimatedSPCost") != null && !jsonObj.get("EstimatedSPCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedSPCost"));
      }
      // validate the optional field `EstimatedOnDemandCost`
      if (jsonObj.get("EstimatedOnDemandCost") != null && !jsonObj.get("EstimatedOnDemandCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedOnDemandCost"));
      }
      // validate the optional field `EstimatedOnDemandCostWithCurrentCommitment`
      if (jsonObj.get("EstimatedOnDemandCostWithCurrentCommitment") != null && !jsonObj.get("EstimatedOnDemandCostWithCurrentCommitment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedOnDemandCostWithCurrentCommitment"));
      }
      // validate the optional field `EstimatedSavingsAmount`
      if (jsonObj.get("EstimatedSavingsAmount") != null && !jsonObj.get("EstimatedSavingsAmount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedSavingsAmount"));
      }
      // validate the optional field `EstimatedSavingsPercentage`
      if (jsonObj.get("EstimatedSavingsPercentage") != null && !jsonObj.get("EstimatedSavingsPercentage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedSavingsPercentage"));
      }
      // validate the optional field `HourlyCommitmentToPurchase`
      if (jsonObj.get("HourlyCommitmentToPurchase") != null && !jsonObj.get("HourlyCommitmentToPurchase").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HourlyCommitmentToPurchase"));
      }
      // validate the optional field `EstimatedAverageUtilization`
      if (jsonObj.get("EstimatedAverageUtilization") != null && !jsonObj.get("EstimatedAverageUtilization").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedAverageUtilization"));
      }
      // validate the optional field `EstimatedMonthlySavingsAmount`
      if (jsonObj.get("EstimatedMonthlySavingsAmount") != null && !jsonObj.get("EstimatedMonthlySavingsAmount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedMonthlySavingsAmount"));
      }
      // validate the optional field `CurrentMinimumHourlyOnDemandSpend`
      if (jsonObj.get("CurrentMinimumHourlyOnDemandSpend") != null && !jsonObj.get("CurrentMinimumHourlyOnDemandSpend").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentMinimumHourlyOnDemandSpend"));
      }
      // validate the optional field `CurrentMaximumHourlyOnDemandSpend`
      if (jsonObj.get("CurrentMaximumHourlyOnDemandSpend") != null && !jsonObj.get("CurrentMaximumHourlyOnDemandSpend").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentMaximumHourlyOnDemandSpend"));
      }
      // validate the optional field `CurrentAverageHourlyOnDemandSpend`
      if (jsonObj.get("CurrentAverageHourlyOnDemandSpend") != null && !jsonObj.get("CurrentAverageHourlyOnDemandSpend").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentAverageHourlyOnDemandSpend"));
      }
      // validate the optional field `RecommendationDetailId`
      if (jsonObj.get("RecommendationDetailId") != null && !jsonObj.get("RecommendationDetailId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecommendationDetailId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SavingsPlansPurchaseRecommendationDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SavingsPlansPurchaseRecommendationDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SavingsPlansPurchaseRecommendationDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SavingsPlansPurchaseRecommendationDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<SavingsPlansPurchaseRecommendationDetail>() {
           @Override
           public void write(JsonWriter out, SavingsPlansPurchaseRecommendationDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SavingsPlansPurchaseRecommendationDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SavingsPlansPurchaseRecommendationDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SavingsPlansPurchaseRecommendationDetail
   * @throws IOException if the JSON string is invalid with respect to SavingsPlansPurchaseRecommendationDetail
   */
  public static SavingsPlansPurchaseRecommendationDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SavingsPlansPurchaseRecommendationDetail.class);
  }

  /**
   * Convert an instance of SavingsPlansPurchaseRecommendationDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

