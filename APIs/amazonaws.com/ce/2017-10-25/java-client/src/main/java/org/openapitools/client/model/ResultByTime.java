/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ResultByTimeTimePeriod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The result that&#39;s associated with a time period.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResultByTime {
  public static final String SERIALIZED_NAME_TIME_PERIOD = "TimePeriod";
  @SerializedName(SERIALIZED_NAME_TIME_PERIOD)
  private ResultByTimeTimePeriod timePeriod;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Map total;

  public static final String SERIALIZED_NAME_GROUPS = "Groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List groups;

  public static final String SERIALIZED_NAME_ESTIMATED = "Estimated";
  @SerializedName(SERIALIZED_NAME_ESTIMATED)
  private Boolean estimated;

  public ResultByTime() {
  }

  public ResultByTime timePeriod(ResultByTimeTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
    return this;
  }

  /**
   * Get timePeriod
   * @return timePeriod
   */
  @javax.annotation.Nullable
  public ResultByTimeTimePeriod getTimePeriod() {
    return timePeriod;
  }

  public void setTimePeriod(ResultByTimeTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
  }


  public ResultByTime total(Map total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Map getTotal() {
    return total;
  }

  public void setTotal(Map total) {
    this.total = total;
  }


  public ResultByTime groups(List groups) {
    this.groups = groups;
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  public List getGroups() {
    return groups;
  }

  public void setGroups(List groups) {
    this.groups = groups;
  }


  public ResultByTime estimated(Boolean estimated) {
    this.estimated = estimated;
    return this;
  }

  /**
   * Get estimated
   * @return estimated
   */
  @javax.annotation.Nullable
  public Boolean getEstimated() {
    return estimated;
  }

  public void setEstimated(Boolean estimated) {
    this.estimated = estimated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultByTime resultByTime = (ResultByTime) o;
    return Objects.equals(this.timePeriod, resultByTime.timePeriod) &&
        Objects.equals(this.total, resultByTime.total) &&
        Objects.equals(this.groups, resultByTime.groups) &&
        Objects.equals(this.estimated, resultByTime.estimated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timePeriod, total, groups, estimated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultByTime {\n");
    sb.append("    timePeriod: ").append(toIndentedString(timePeriod)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    estimated: ").append(toIndentedString(estimated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TimePeriod");
    openapiFields.add("Total");
    openapiFields.add("Groups");
    openapiFields.add("Estimated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResultByTime
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResultByTime.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResultByTime is not found in the empty JSON string", ResultByTime.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResultByTime.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResultByTime` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TimePeriod`
      if (jsonObj.get("TimePeriod") != null && !jsonObj.get("TimePeriod").isJsonNull()) {
        ResultByTimeTimePeriod.validateJsonElement(jsonObj.get("TimePeriod"));
      }
      // validate the optional field `Total`
      if (jsonObj.get("Total") != null && !jsonObj.get("Total").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Total"));
      }
      // validate the optional field `Groups`
      if (jsonObj.get("Groups") != null && !jsonObj.get("Groups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Groups"));
      }
      // validate the optional field `Estimated`
      if (jsonObj.get("Estimated") != null && !jsonObj.get("Estimated").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Estimated"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResultByTime.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResultByTime' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResultByTime> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResultByTime.class));

       return (TypeAdapter<T>) new TypeAdapter<ResultByTime>() {
           @Override
           public void write(JsonWriter out, ResultByTime value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResultByTime read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResultByTime given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResultByTime
   * @throws IOException if the JSON string is invalid with respect to ResultByTime
   */
  public static ResultByTime fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResultByTime.class);
  }

  /**
   * Convert an instance of ResultByTime to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

