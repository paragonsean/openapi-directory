/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EC2ResourceUtilizationDiskResourceUtilization
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EC2ResourceUtilizationDiskResourceUtilization {
  public static final String SERIALIZED_NAME_DISK_READ_OPS_PER_SECOND = "DiskReadOpsPerSecond";
  @SerializedName(SERIALIZED_NAME_DISK_READ_OPS_PER_SECOND)
  private String diskReadOpsPerSecond;

  public static final String SERIALIZED_NAME_DISK_WRITE_OPS_PER_SECOND = "DiskWriteOpsPerSecond";
  @SerializedName(SERIALIZED_NAME_DISK_WRITE_OPS_PER_SECOND)
  private String diskWriteOpsPerSecond;

  public static final String SERIALIZED_NAME_DISK_READ_BYTES_PER_SECOND = "DiskReadBytesPerSecond";
  @SerializedName(SERIALIZED_NAME_DISK_READ_BYTES_PER_SECOND)
  private String diskReadBytesPerSecond;

  public static final String SERIALIZED_NAME_DISK_WRITE_BYTES_PER_SECOND = "DiskWriteBytesPerSecond";
  @SerializedName(SERIALIZED_NAME_DISK_WRITE_BYTES_PER_SECOND)
  private String diskWriteBytesPerSecond;

  public EC2ResourceUtilizationDiskResourceUtilization() {
  }

  public EC2ResourceUtilizationDiskResourceUtilization diskReadOpsPerSecond(String diskReadOpsPerSecond) {
    this.diskReadOpsPerSecond = diskReadOpsPerSecond;
    return this;
  }

  /**
   * Get diskReadOpsPerSecond
   * @return diskReadOpsPerSecond
   */
  @javax.annotation.Nullable
  public String getDiskReadOpsPerSecond() {
    return diskReadOpsPerSecond;
  }

  public void setDiskReadOpsPerSecond(String diskReadOpsPerSecond) {
    this.diskReadOpsPerSecond = diskReadOpsPerSecond;
  }


  public EC2ResourceUtilizationDiskResourceUtilization diskWriteOpsPerSecond(String diskWriteOpsPerSecond) {
    this.diskWriteOpsPerSecond = diskWriteOpsPerSecond;
    return this;
  }

  /**
   * Get diskWriteOpsPerSecond
   * @return diskWriteOpsPerSecond
   */
  @javax.annotation.Nullable
  public String getDiskWriteOpsPerSecond() {
    return diskWriteOpsPerSecond;
  }

  public void setDiskWriteOpsPerSecond(String diskWriteOpsPerSecond) {
    this.diskWriteOpsPerSecond = diskWriteOpsPerSecond;
  }


  public EC2ResourceUtilizationDiskResourceUtilization diskReadBytesPerSecond(String diskReadBytesPerSecond) {
    this.diskReadBytesPerSecond = diskReadBytesPerSecond;
    return this;
  }

  /**
   * Get diskReadBytesPerSecond
   * @return diskReadBytesPerSecond
   */
  @javax.annotation.Nullable
  public String getDiskReadBytesPerSecond() {
    return diskReadBytesPerSecond;
  }

  public void setDiskReadBytesPerSecond(String diskReadBytesPerSecond) {
    this.diskReadBytesPerSecond = diskReadBytesPerSecond;
  }


  public EC2ResourceUtilizationDiskResourceUtilization diskWriteBytesPerSecond(String diskWriteBytesPerSecond) {
    this.diskWriteBytesPerSecond = diskWriteBytesPerSecond;
    return this;
  }

  /**
   * Get diskWriteBytesPerSecond
   * @return diskWriteBytesPerSecond
   */
  @javax.annotation.Nullable
  public String getDiskWriteBytesPerSecond() {
    return diskWriteBytesPerSecond;
  }

  public void setDiskWriteBytesPerSecond(String diskWriteBytesPerSecond) {
    this.diskWriteBytesPerSecond = diskWriteBytesPerSecond;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EC2ResourceUtilizationDiskResourceUtilization ec2ResourceUtilizationDiskResourceUtilization = (EC2ResourceUtilizationDiskResourceUtilization) o;
    return Objects.equals(this.diskReadOpsPerSecond, ec2ResourceUtilizationDiskResourceUtilization.diskReadOpsPerSecond) &&
        Objects.equals(this.diskWriteOpsPerSecond, ec2ResourceUtilizationDiskResourceUtilization.diskWriteOpsPerSecond) &&
        Objects.equals(this.diskReadBytesPerSecond, ec2ResourceUtilizationDiskResourceUtilization.diskReadBytesPerSecond) &&
        Objects.equals(this.diskWriteBytesPerSecond, ec2ResourceUtilizationDiskResourceUtilization.diskWriteBytesPerSecond);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskReadOpsPerSecond, diskWriteOpsPerSecond, diskReadBytesPerSecond, diskWriteBytesPerSecond);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EC2ResourceUtilizationDiskResourceUtilization {\n");
    sb.append("    diskReadOpsPerSecond: ").append(toIndentedString(diskReadOpsPerSecond)).append("\n");
    sb.append("    diskWriteOpsPerSecond: ").append(toIndentedString(diskWriteOpsPerSecond)).append("\n");
    sb.append("    diskReadBytesPerSecond: ").append(toIndentedString(diskReadBytesPerSecond)).append("\n");
    sb.append("    diskWriteBytesPerSecond: ").append(toIndentedString(diskWriteBytesPerSecond)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DiskReadOpsPerSecond");
    openapiFields.add("DiskWriteOpsPerSecond");
    openapiFields.add("DiskReadBytesPerSecond");
    openapiFields.add("DiskWriteBytesPerSecond");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EC2ResourceUtilizationDiskResourceUtilization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EC2ResourceUtilizationDiskResourceUtilization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EC2ResourceUtilizationDiskResourceUtilization is not found in the empty JSON string", EC2ResourceUtilizationDiskResourceUtilization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EC2ResourceUtilizationDiskResourceUtilization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EC2ResourceUtilizationDiskResourceUtilization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DiskReadOpsPerSecond`
      if (jsonObj.get("DiskReadOpsPerSecond") != null && !jsonObj.get("DiskReadOpsPerSecond").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DiskReadOpsPerSecond"));
      }
      // validate the optional field `DiskWriteOpsPerSecond`
      if (jsonObj.get("DiskWriteOpsPerSecond") != null && !jsonObj.get("DiskWriteOpsPerSecond").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DiskWriteOpsPerSecond"));
      }
      // validate the optional field `DiskReadBytesPerSecond`
      if (jsonObj.get("DiskReadBytesPerSecond") != null && !jsonObj.get("DiskReadBytesPerSecond").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DiskReadBytesPerSecond"));
      }
      // validate the optional field `DiskWriteBytesPerSecond`
      if (jsonObj.get("DiskWriteBytesPerSecond") != null && !jsonObj.get("DiskWriteBytesPerSecond").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DiskWriteBytesPerSecond"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EC2ResourceUtilizationDiskResourceUtilization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EC2ResourceUtilizationDiskResourceUtilization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EC2ResourceUtilizationDiskResourceUtilization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EC2ResourceUtilizationDiskResourceUtilization.class));

       return (TypeAdapter<T>) new TypeAdapter<EC2ResourceUtilizationDiskResourceUtilization>() {
           @Override
           public void write(JsonWriter out, EC2ResourceUtilizationDiskResourceUtilization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EC2ResourceUtilizationDiskResourceUtilization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EC2ResourceUtilizationDiskResourceUtilization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EC2ResourceUtilizationDiskResourceUtilization
   * @throws IOException if the JSON string is invalid with respect to EC2ResourceUtilizationDiskResourceUtilization
   */
  public static EC2ResourceUtilizationDiskResourceUtilization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EC2ResourceUtilizationDiskResourceUtilization.class);
  }

  /**
   * Convert an instance of EC2ResourceUtilizationDiskResourceUtilization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

