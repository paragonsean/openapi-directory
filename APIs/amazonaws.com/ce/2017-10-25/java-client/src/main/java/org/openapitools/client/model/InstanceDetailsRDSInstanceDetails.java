/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InstanceDetailsRDSInstanceDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceDetailsRDSInstanceDetails {
  public static final String SERIALIZED_NAME_FAMILY = "Family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private String family;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "InstanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_DATABASE_ENGINE = "DatabaseEngine";
  @SerializedName(SERIALIZED_NAME_DATABASE_ENGINE)
  private String databaseEngine;

  public static final String SERIALIZED_NAME_DATABASE_EDITION = "DatabaseEdition";
  @SerializedName(SERIALIZED_NAME_DATABASE_EDITION)
  private String databaseEdition;

  public static final String SERIALIZED_NAME_DEPLOYMENT_OPTION = "DeploymentOption";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_OPTION)
  private String deploymentOption;

  public static final String SERIALIZED_NAME_LICENSE_MODEL = "LicenseModel";
  @SerializedName(SERIALIZED_NAME_LICENSE_MODEL)
  private String licenseModel;

  public static final String SERIALIZED_NAME_CURRENT_GENERATION = "CurrentGeneration";
  @SerializedName(SERIALIZED_NAME_CURRENT_GENERATION)
  private Boolean currentGeneration;

  public static final String SERIALIZED_NAME_SIZE_FLEX_ELIGIBLE = "SizeFlexEligible";
  @SerializedName(SERIALIZED_NAME_SIZE_FLEX_ELIGIBLE)
  private Boolean sizeFlexEligible;

  public InstanceDetailsRDSInstanceDetails() {
  }

  public InstanceDetailsRDSInstanceDetails family(String family) {
    this.family = family;
    return this;
  }

  /**
   * Get family
   * @return family
   */
  @javax.annotation.Nullable
  public String getFamily() {
    return family;
  }

  public void setFamily(String family) {
    this.family = family;
  }


  public InstanceDetailsRDSInstanceDetails instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public InstanceDetailsRDSInstanceDetails region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public InstanceDetailsRDSInstanceDetails databaseEngine(String databaseEngine) {
    this.databaseEngine = databaseEngine;
    return this;
  }

  /**
   * Get databaseEngine
   * @return databaseEngine
   */
  @javax.annotation.Nullable
  public String getDatabaseEngine() {
    return databaseEngine;
  }

  public void setDatabaseEngine(String databaseEngine) {
    this.databaseEngine = databaseEngine;
  }


  public InstanceDetailsRDSInstanceDetails databaseEdition(String databaseEdition) {
    this.databaseEdition = databaseEdition;
    return this;
  }

  /**
   * Get databaseEdition
   * @return databaseEdition
   */
  @javax.annotation.Nullable
  public String getDatabaseEdition() {
    return databaseEdition;
  }

  public void setDatabaseEdition(String databaseEdition) {
    this.databaseEdition = databaseEdition;
  }


  public InstanceDetailsRDSInstanceDetails deploymentOption(String deploymentOption) {
    this.deploymentOption = deploymentOption;
    return this;
  }

  /**
   * Get deploymentOption
   * @return deploymentOption
   */
  @javax.annotation.Nullable
  public String getDeploymentOption() {
    return deploymentOption;
  }

  public void setDeploymentOption(String deploymentOption) {
    this.deploymentOption = deploymentOption;
  }


  public InstanceDetailsRDSInstanceDetails licenseModel(String licenseModel) {
    this.licenseModel = licenseModel;
    return this;
  }

  /**
   * Get licenseModel
   * @return licenseModel
   */
  @javax.annotation.Nullable
  public String getLicenseModel() {
    return licenseModel;
  }

  public void setLicenseModel(String licenseModel) {
    this.licenseModel = licenseModel;
  }


  public InstanceDetailsRDSInstanceDetails currentGeneration(Boolean currentGeneration) {
    this.currentGeneration = currentGeneration;
    return this;
  }

  /**
   * Get currentGeneration
   * @return currentGeneration
   */
  @javax.annotation.Nullable
  public Boolean getCurrentGeneration() {
    return currentGeneration;
  }

  public void setCurrentGeneration(Boolean currentGeneration) {
    this.currentGeneration = currentGeneration;
  }


  public InstanceDetailsRDSInstanceDetails sizeFlexEligible(Boolean sizeFlexEligible) {
    this.sizeFlexEligible = sizeFlexEligible;
    return this;
  }

  /**
   * Get sizeFlexEligible
   * @return sizeFlexEligible
   */
  @javax.annotation.Nullable
  public Boolean getSizeFlexEligible() {
    return sizeFlexEligible;
  }

  public void setSizeFlexEligible(Boolean sizeFlexEligible) {
    this.sizeFlexEligible = sizeFlexEligible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceDetailsRDSInstanceDetails instanceDetailsRDSInstanceDetails = (InstanceDetailsRDSInstanceDetails) o;
    return Objects.equals(this.family, instanceDetailsRDSInstanceDetails.family) &&
        Objects.equals(this.instanceType, instanceDetailsRDSInstanceDetails.instanceType) &&
        Objects.equals(this.region, instanceDetailsRDSInstanceDetails.region) &&
        Objects.equals(this.databaseEngine, instanceDetailsRDSInstanceDetails.databaseEngine) &&
        Objects.equals(this.databaseEdition, instanceDetailsRDSInstanceDetails.databaseEdition) &&
        Objects.equals(this.deploymentOption, instanceDetailsRDSInstanceDetails.deploymentOption) &&
        Objects.equals(this.licenseModel, instanceDetailsRDSInstanceDetails.licenseModel) &&
        Objects.equals(this.currentGeneration, instanceDetailsRDSInstanceDetails.currentGeneration) &&
        Objects.equals(this.sizeFlexEligible, instanceDetailsRDSInstanceDetails.sizeFlexEligible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(family, instanceType, region, databaseEngine, databaseEdition, deploymentOption, licenseModel, currentGeneration, sizeFlexEligible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceDetailsRDSInstanceDetails {\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    databaseEngine: ").append(toIndentedString(databaseEngine)).append("\n");
    sb.append("    databaseEdition: ").append(toIndentedString(databaseEdition)).append("\n");
    sb.append("    deploymentOption: ").append(toIndentedString(deploymentOption)).append("\n");
    sb.append("    licenseModel: ").append(toIndentedString(licenseModel)).append("\n");
    sb.append("    currentGeneration: ").append(toIndentedString(currentGeneration)).append("\n");
    sb.append("    sizeFlexEligible: ").append(toIndentedString(sizeFlexEligible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Family");
    openapiFields.add("InstanceType");
    openapiFields.add("Region");
    openapiFields.add("DatabaseEngine");
    openapiFields.add("DatabaseEdition");
    openapiFields.add("DeploymentOption");
    openapiFields.add("LicenseModel");
    openapiFields.add("CurrentGeneration");
    openapiFields.add("SizeFlexEligible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceDetailsRDSInstanceDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceDetailsRDSInstanceDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceDetailsRDSInstanceDetails is not found in the empty JSON string", InstanceDetailsRDSInstanceDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceDetailsRDSInstanceDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceDetailsRDSInstanceDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Family`
      if (jsonObj.get("Family") != null && !jsonObj.get("Family").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Family"));
      }
      // validate the optional field `InstanceType`
      if (jsonObj.get("InstanceType") != null && !jsonObj.get("InstanceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceType"));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Region"));
      }
      // validate the optional field `DatabaseEngine`
      if (jsonObj.get("DatabaseEngine") != null && !jsonObj.get("DatabaseEngine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseEngine"));
      }
      // validate the optional field `DatabaseEdition`
      if (jsonObj.get("DatabaseEdition") != null && !jsonObj.get("DatabaseEdition").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseEdition"));
      }
      // validate the optional field `DeploymentOption`
      if (jsonObj.get("DeploymentOption") != null && !jsonObj.get("DeploymentOption").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeploymentOption"));
      }
      // validate the optional field `LicenseModel`
      if (jsonObj.get("LicenseModel") != null && !jsonObj.get("LicenseModel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LicenseModel"));
      }
      // validate the optional field `CurrentGeneration`
      if (jsonObj.get("CurrentGeneration") != null && !jsonObj.get("CurrentGeneration").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CurrentGeneration"));
      }
      // validate the optional field `SizeFlexEligible`
      if (jsonObj.get("SizeFlexEligible") != null && !jsonObj.get("SizeFlexEligible").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SizeFlexEligible"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceDetailsRDSInstanceDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceDetailsRDSInstanceDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceDetailsRDSInstanceDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceDetailsRDSInstanceDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceDetailsRDSInstanceDetails>() {
           @Override
           public void write(JsonWriter out, InstanceDetailsRDSInstanceDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceDetailsRDSInstanceDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceDetailsRDSInstanceDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceDetailsRDSInstanceDetails
   * @throws IOException if the JSON string is invalid with respect to InstanceDetailsRDSInstanceDetails
   */
  public static InstanceDetailsRDSInstanceDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceDetailsRDSInstanceDetails.class);
  }

  /**
   * Convert an instance of InstanceDetailsRDSInstanceDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

