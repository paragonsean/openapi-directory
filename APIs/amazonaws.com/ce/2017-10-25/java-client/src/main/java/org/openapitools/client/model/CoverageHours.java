/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * How long a running instance either used a reservation or was On-Demand.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CoverageHours {
  public static final String SERIALIZED_NAME_ON_DEMAND_HOURS = "OnDemandHours";
  @SerializedName(SERIALIZED_NAME_ON_DEMAND_HOURS)
  private String onDemandHours;

  public static final String SERIALIZED_NAME_RESERVED_HOURS = "ReservedHours";
  @SerializedName(SERIALIZED_NAME_RESERVED_HOURS)
  private String reservedHours;

  public static final String SERIALIZED_NAME_TOTAL_RUNNING_HOURS = "TotalRunningHours";
  @SerializedName(SERIALIZED_NAME_TOTAL_RUNNING_HOURS)
  private String totalRunningHours;

  public static final String SERIALIZED_NAME_COVERAGE_HOURS_PERCENTAGE = "CoverageHoursPercentage";
  @SerializedName(SERIALIZED_NAME_COVERAGE_HOURS_PERCENTAGE)
  private String coverageHoursPercentage;

  public CoverageHours() {
  }

  public CoverageHours onDemandHours(String onDemandHours) {
    this.onDemandHours = onDemandHours;
    return this;
  }

  /**
   * Get onDemandHours
   * @return onDemandHours
   */
  @javax.annotation.Nullable
  public String getOnDemandHours() {
    return onDemandHours;
  }

  public void setOnDemandHours(String onDemandHours) {
    this.onDemandHours = onDemandHours;
  }


  public CoverageHours reservedHours(String reservedHours) {
    this.reservedHours = reservedHours;
    return this;
  }

  /**
   * Get reservedHours
   * @return reservedHours
   */
  @javax.annotation.Nullable
  public String getReservedHours() {
    return reservedHours;
  }

  public void setReservedHours(String reservedHours) {
    this.reservedHours = reservedHours;
  }


  public CoverageHours totalRunningHours(String totalRunningHours) {
    this.totalRunningHours = totalRunningHours;
    return this;
  }

  /**
   * Get totalRunningHours
   * @return totalRunningHours
   */
  @javax.annotation.Nullable
  public String getTotalRunningHours() {
    return totalRunningHours;
  }

  public void setTotalRunningHours(String totalRunningHours) {
    this.totalRunningHours = totalRunningHours;
  }


  public CoverageHours coverageHoursPercentage(String coverageHoursPercentage) {
    this.coverageHoursPercentage = coverageHoursPercentage;
    return this;
  }

  /**
   * Get coverageHoursPercentage
   * @return coverageHoursPercentage
   */
  @javax.annotation.Nullable
  public String getCoverageHoursPercentage() {
    return coverageHoursPercentage;
  }

  public void setCoverageHoursPercentage(String coverageHoursPercentage) {
    this.coverageHoursPercentage = coverageHoursPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoverageHours coverageHours = (CoverageHours) o;
    return Objects.equals(this.onDemandHours, coverageHours.onDemandHours) &&
        Objects.equals(this.reservedHours, coverageHours.reservedHours) &&
        Objects.equals(this.totalRunningHours, coverageHours.totalRunningHours) &&
        Objects.equals(this.coverageHoursPercentage, coverageHours.coverageHoursPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onDemandHours, reservedHours, totalRunningHours, coverageHoursPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoverageHours {\n");
    sb.append("    onDemandHours: ").append(toIndentedString(onDemandHours)).append("\n");
    sb.append("    reservedHours: ").append(toIndentedString(reservedHours)).append("\n");
    sb.append("    totalRunningHours: ").append(toIndentedString(totalRunningHours)).append("\n");
    sb.append("    coverageHoursPercentage: ").append(toIndentedString(coverageHoursPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OnDemandHours");
    openapiFields.add("ReservedHours");
    openapiFields.add("TotalRunningHours");
    openapiFields.add("CoverageHoursPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CoverageHours
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoverageHours.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoverageHours is not found in the empty JSON string", CoverageHours.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoverageHours.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoverageHours` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `OnDemandHours`
      if (jsonObj.get("OnDemandHours") != null && !jsonObj.get("OnDemandHours").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OnDemandHours"));
      }
      // validate the optional field `ReservedHours`
      if (jsonObj.get("ReservedHours") != null && !jsonObj.get("ReservedHours").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReservedHours"));
      }
      // validate the optional field `TotalRunningHours`
      if (jsonObj.get("TotalRunningHours") != null && !jsonObj.get("TotalRunningHours").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalRunningHours"));
      }
      // validate the optional field `CoverageHoursPercentage`
      if (jsonObj.get("CoverageHoursPercentage") != null && !jsonObj.get("CoverageHoursPercentage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CoverageHoursPercentage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoverageHours.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoverageHours' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoverageHours> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoverageHours.class));

       return (TypeAdapter<T>) new TypeAdapter<CoverageHours>() {
           @Override
           public void write(JsonWriter out, CoverageHours value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoverageHours read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CoverageHours given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CoverageHours
   * @throws IOException if the JSON string is invalid with respect to CoverageHours
   */
  public static CoverageHours fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoverageHours.class);
  }

  /**
   * Convert an instance of CoverageHours to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

