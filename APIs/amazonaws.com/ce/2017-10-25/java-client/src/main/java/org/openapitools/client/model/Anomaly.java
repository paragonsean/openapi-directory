/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnomalyAnomalyScore;
import org.openapitools.client.model.AnomalyFeedbackType;
import org.openapitools.client.model.AnomalyImpact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An unusual cost pattern. This consists of the detailed metadata and the current status of the anomaly object. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Anomaly {
  public static final String SERIALIZED_NAME_ANOMALY_ID = "AnomalyId";
  @SerializedName(SERIALIZED_NAME_ANOMALY_ID)
  private String anomalyId;

  public static final String SERIALIZED_NAME_ANOMALY_START_DATE = "AnomalyStartDate";
  @SerializedName(SERIALIZED_NAME_ANOMALY_START_DATE)
  private String anomalyStartDate;

  public static final String SERIALIZED_NAME_ANOMALY_END_DATE = "AnomalyEndDate";
  @SerializedName(SERIALIZED_NAME_ANOMALY_END_DATE)
  private String anomalyEndDate;

  public static final String SERIALIZED_NAME_DIMENSION_VALUE = "DimensionValue";
  @SerializedName(SERIALIZED_NAME_DIMENSION_VALUE)
  private String dimensionValue;

  public static final String SERIALIZED_NAME_ROOT_CAUSES = "RootCauses";
  @SerializedName(SERIALIZED_NAME_ROOT_CAUSES)
  private List rootCauses;

  public static final String SERIALIZED_NAME_ANOMALY_SCORE = "AnomalyScore";
  @SerializedName(SERIALIZED_NAME_ANOMALY_SCORE)
  private AnomalyAnomalyScore anomalyScore;

  public static final String SERIALIZED_NAME_IMPACT = "Impact";
  @SerializedName(SERIALIZED_NAME_IMPACT)
  private AnomalyImpact impact;

  public static final String SERIALIZED_NAME_MONITOR_ARN = "MonitorArn";
  @SerializedName(SERIALIZED_NAME_MONITOR_ARN)
  private String monitorArn;

  public static final String SERIALIZED_NAME_FEEDBACK = "Feedback";
  @SerializedName(SERIALIZED_NAME_FEEDBACK)
  private AnomalyFeedbackType feedback;

  public Anomaly() {
  }

  public Anomaly anomalyId(String anomalyId) {
    this.anomalyId = anomalyId;
    return this;
  }

  /**
   * Get anomalyId
   * @return anomalyId
   */
  @javax.annotation.Nonnull
  public String getAnomalyId() {
    return anomalyId;
  }

  public void setAnomalyId(String anomalyId) {
    this.anomalyId = anomalyId;
  }


  public Anomaly anomalyStartDate(String anomalyStartDate) {
    this.anomalyStartDate = anomalyStartDate;
    return this;
  }

  /**
   * Get anomalyStartDate
   * @return anomalyStartDate
   */
  @javax.annotation.Nullable
  public String getAnomalyStartDate() {
    return anomalyStartDate;
  }

  public void setAnomalyStartDate(String anomalyStartDate) {
    this.anomalyStartDate = anomalyStartDate;
  }


  public Anomaly anomalyEndDate(String anomalyEndDate) {
    this.anomalyEndDate = anomalyEndDate;
    return this;
  }

  /**
   * Get anomalyEndDate
   * @return anomalyEndDate
   */
  @javax.annotation.Nullable
  public String getAnomalyEndDate() {
    return anomalyEndDate;
  }

  public void setAnomalyEndDate(String anomalyEndDate) {
    this.anomalyEndDate = anomalyEndDate;
  }


  public Anomaly dimensionValue(String dimensionValue) {
    this.dimensionValue = dimensionValue;
    return this;
  }

  /**
   * Get dimensionValue
   * @return dimensionValue
   */
  @javax.annotation.Nullable
  public String getDimensionValue() {
    return dimensionValue;
  }

  public void setDimensionValue(String dimensionValue) {
    this.dimensionValue = dimensionValue;
  }


  public Anomaly rootCauses(List rootCauses) {
    this.rootCauses = rootCauses;
    return this;
  }

  /**
   * Get rootCauses
   * @return rootCauses
   */
  @javax.annotation.Nullable
  public List getRootCauses() {
    return rootCauses;
  }

  public void setRootCauses(List rootCauses) {
    this.rootCauses = rootCauses;
  }


  public Anomaly anomalyScore(AnomalyAnomalyScore anomalyScore) {
    this.anomalyScore = anomalyScore;
    return this;
  }

  /**
   * Get anomalyScore
   * @return anomalyScore
   */
  @javax.annotation.Nonnull
  public AnomalyAnomalyScore getAnomalyScore() {
    return anomalyScore;
  }

  public void setAnomalyScore(AnomalyAnomalyScore anomalyScore) {
    this.anomalyScore = anomalyScore;
  }


  public Anomaly impact(AnomalyImpact impact) {
    this.impact = impact;
    return this;
  }

  /**
   * Get impact
   * @return impact
   */
  @javax.annotation.Nonnull
  public AnomalyImpact getImpact() {
    return impact;
  }

  public void setImpact(AnomalyImpact impact) {
    this.impact = impact;
  }


  public Anomaly monitorArn(String monitorArn) {
    this.monitorArn = monitorArn;
    return this;
  }

  /**
   * Get monitorArn
   * @return monitorArn
   */
  @javax.annotation.Nonnull
  public String getMonitorArn() {
    return monitorArn;
  }

  public void setMonitorArn(String monitorArn) {
    this.monitorArn = monitorArn;
  }


  public Anomaly feedback(AnomalyFeedbackType feedback) {
    this.feedback = feedback;
    return this;
  }

  /**
   * Get feedback
   * @return feedback
   */
  @javax.annotation.Nullable
  public AnomalyFeedbackType getFeedback() {
    return feedback;
  }

  public void setFeedback(AnomalyFeedbackType feedback) {
    this.feedback = feedback;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Anomaly anomaly = (Anomaly) o;
    return Objects.equals(this.anomalyId, anomaly.anomalyId) &&
        Objects.equals(this.anomalyStartDate, anomaly.anomalyStartDate) &&
        Objects.equals(this.anomalyEndDate, anomaly.anomalyEndDate) &&
        Objects.equals(this.dimensionValue, anomaly.dimensionValue) &&
        Objects.equals(this.rootCauses, anomaly.rootCauses) &&
        Objects.equals(this.anomalyScore, anomaly.anomalyScore) &&
        Objects.equals(this.impact, anomaly.impact) &&
        Objects.equals(this.monitorArn, anomaly.monitorArn) &&
        Objects.equals(this.feedback, anomaly.feedback);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anomalyId, anomalyStartDate, anomalyEndDate, dimensionValue, rootCauses, anomalyScore, impact, monitorArn, feedback);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Anomaly {\n");
    sb.append("    anomalyId: ").append(toIndentedString(anomalyId)).append("\n");
    sb.append("    anomalyStartDate: ").append(toIndentedString(anomalyStartDate)).append("\n");
    sb.append("    anomalyEndDate: ").append(toIndentedString(anomalyEndDate)).append("\n");
    sb.append("    dimensionValue: ").append(toIndentedString(dimensionValue)).append("\n");
    sb.append("    rootCauses: ").append(toIndentedString(rootCauses)).append("\n");
    sb.append("    anomalyScore: ").append(toIndentedString(anomalyScore)).append("\n");
    sb.append("    impact: ").append(toIndentedString(impact)).append("\n");
    sb.append("    monitorArn: ").append(toIndentedString(monitorArn)).append("\n");
    sb.append("    feedback: ").append(toIndentedString(feedback)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnomalyId");
    openapiFields.add("AnomalyStartDate");
    openapiFields.add("AnomalyEndDate");
    openapiFields.add("DimensionValue");
    openapiFields.add("RootCauses");
    openapiFields.add("AnomalyScore");
    openapiFields.add("Impact");
    openapiFields.add("MonitorArn");
    openapiFields.add("Feedback");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AnomalyId");
    openapiRequiredFields.add("AnomalyScore");
    openapiRequiredFields.add("Impact");
    openapiRequiredFields.add("MonitorArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Anomaly
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Anomaly.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Anomaly is not found in the empty JSON string", Anomaly.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Anomaly.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Anomaly` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Anomaly.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AnomalyId`
      String.validateJsonElement(jsonObj.get("AnomalyId"));
      // validate the optional field `AnomalyStartDate`
      if (jsonObj.get("AnomalyStartDate") != null && !jsonObj.get("AnomalyStartDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AnomalyStartDate"));
      }
      // validate the optional field `AnomalyEndDate`
      if (jsonObj.get("AnomalyEndDate") != null && !jsonObj.get("AnomalyEndDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AnomalyEndDate"));
      }
      // validate the optional field `DimensionValue`
      if (jsonObj.get("DimensionValue") != null && !jsonObj.get("DimensionValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DimensionValue"));
      }
      // validate the optional field `RootCauses`
      if (jsonObj.get("RootCauses") != null && !jsonObj.get("RootCauses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RootCauses"));
      }
      // validate the required field `AnomalyScore`
      AnomalyAnomalyScore.validateJsonElement(jsonObj.get("AnomalyScore"));
      // validate the required field `Impact`
      AnomalyImpact.validateJsonElement(jsonObj.get("Impact"));
      // validate the required field `MonitorArn`
      String.validateJsonElement(jsonObj.get("MonitorArn"));
      // validate the optional field `Feedback`
      if (jsonObj.get("Feedback") != null && !jsonObj.get("Feedback").isJsonNull()) {
        AnomalyFeedbackType.validateJsonElement(jsonObj.get("Feedback"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Anomaly.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Anomaly' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Anomaly> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Anomaly.class));

       return (TypeAdapter<T>) new TypeAdapter<Anomaly>() {
           @Override
           public void write(JsonWriter out, Anomaly value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Anomaly read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Anomaly given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Anomaly
   * @throws IOException if the JSON string is invalid with respect to Anomaly
   */
  public static Anomaly fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Anomaly.class);
  }

  /**
   * Convert an instance of Anomaly to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

