/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The aggregated numbers for your reservation usage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationAggregates {
  public static final String SERIALIZED_NAME_UTILIZATION_PERCENTAGE = "UtilizationPercentage";
  @SerializedName(SERIALIZED_NAME_UTILIZATION_PERCENTAGE)
  private String utilizationPercentage;

  public static final String SERIALIZED_NAME_UTILIZATION_PERCENTAGE_IN_UNITS = "UtilizationPercentageInUnits";
  @SerializedName(SERIALIZED_NAME_UTILIZATION_PERCENTAGE_IN_UNITS)
  private String utilizationPercentageInUnits;

  public static final String SERIALIZED_NAME_PURCHASED_HOURS = "PurchasedHours";
  @SerializedName(SERIALIZED_NAME_PURCHASED_HOURS)
  private String purchasedHours;

  public static final String SERIALIZED_NAME_PURCHASED_UNITS = "PurchasedUnits";
  @SerializedName(SERIALIZED_NAME_PURCHASED_UNITS)
  private String purchasedUnits;

  public static final String SERIALIZED_NAME_TOTAL_ACTUAL_HOURS = "TotalActualHours";
  @SerializedName(SERIALIZED_NAME_TOTAL_ACTUAL_HOURS)
  private String totalActualHours;

  public static final String SERIALIZED_NAME_TOTAL_ACTUAL_UNITS = "TotalActualUnits";
  @SerializedName(SERIALIZED_NAME_TOTAL_ACTUAL_UNITS)
  private String totalActualUnits;

  public static final String SERIALIZED_NAME_UNUSED_HOURS = "UnusedHours";
  @SerializedName(SERIALIZED_NAME_UNUSED_HOURS)
  private String unusedHours;

  public static final String SERIALIZED_NAME_UNUSED_UNITS = "UnusedUnits";
  @SerializedName(SERIALIZED_NAME_UNUSED_UNITS)
  private String unusedUnits;

  public static final String SERIALIZED_NAME_ON_DEMAND_COST_OF_R_I_HOURS_USED = "OnDemandCostOfRIHoursUsed";
  @SerializedName(SERIALIZED_NAME_ON_DEMAND_COST_OF_R_I_HOURS_USED)
  private String onDemandCostOfRIHoursUsed;

  public static final String SERIALIZED_NAME_NET_R_I_SAVINGS = "NetRISavings";
  @SerializedName(SERIALIZED_NAME_NET_R_I_SAVINGS)
  private String netRISavings;

  public static final String SERIALIZED_NAME_TOTAL_POTENTIAL_R_I_SAVINGS = "TotalPotentialRISavings";
  @SerializedName(SERIALIZED_NAME_TOTAL_POTENTIAL_R_I_SAVINGS)
  private String totalPotentialRISavings;

  public static final String SERIALIZED_NAME_AMORTIZED_UPFRONT_FEE = "AmortizedUpfrontFee";
  @SerializedName(SERIALIZED_NAME_AMORTIZED_UPFRONT_FEE)
  private String amortizedUpfrontFee;

  public static final String SERIALIZED_NAME_AMORTIZED_RECURRING_FEE = "AmortizedRecurringFee";
  @SerializedName(SERIALIZED_NAME_AMORTIZED_RECURRING_FEE)
  private String amortizedRecurringFee;

  public static final String SERIALIZED_NAME_TOTAL_AMORTIZED_FEE = "TotalAmortizedFee";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMORTIZED_FEE)
  private String totalAmortizedFee;

  public static final String SERIALIZED_NAME_RI_COST_FOR_UNUSED_HOURS = "RICostForUnusedHours";
  @SerializedName(SERIALIZED_NAME_RI_COST_FOR_UNUSED_HOURS)
  private String riCostForUnusedHours;

  public static final String SERIALIZED_NAME_REALIZED_SAVINGS = "RealizedSavings";
  @SerializedName(SERIALIZED_NAME_REALIZED_SAVINGS)
  private String realizedSavings;

  public static final String SERIALIZED_NAME_UNREALIZED_SAVINGS = "UnrealizedSavings";
  @SerializedName(SERIALIZED_NAME_UNREALIZED_SAVINGS)
  private String unrealizedSavings;

  public ReservationAggregates() {
  }

  public ReservationAggregates utilizationPercentage(String utilizationPercentage) {
    this.utilizationPercentage = utilizationPercentage;
    return this;
  }

  /**
   * Get utilizationPercentage
   * @return utilizationPercentage
   */
  @javax.annotation.Nullable
  public String getUtilizationPercentage() {
    return utilizationPercentage;
  }

  public void setUtilizationPercentage(String utilizationPercentage) {
    this.utilizationPercentage = utilizationPercentage;
  }


  public ReservationAggregates utilizationPercentageInUnits(String utilizationPercentageInUnits) {
    this.utilizationPercentageInUnits = utilizationPercentageInUnits;
    return this;
  }

  /**
   * Get utilizationPercentageInUnits
   * @return utilizationPercentageInUnits
   */
  @javax.annotation.Nullable
  public String getUtilizationPercentageInUnits() {
    return utilizationPercentageInUnits;
  }

  public void setUtilizationPercentageInUnits(String utilizationPercentageInUnits) {
    this.utilizationPercentageInUnits = utilizationPercentageInUnits;
  }


  public ReservationAggregates purchasedHours(String purchasedHours) {
    this.purchasedHours = purchasedHours;
    return this;
  }

  /**
   * Get purchasedHours
   * @return purchasedHours
   */
  @javax.annotation.Nullable
  public String getPurchasedHours() {
    return purchasedHours;
  }

  public void setPurchasedHours(String purchasedHours) {
    this.purchasedHours = purchasedHours;
  }


  public ReservationAggregates purchasedUnits(String purchasedUnits) {
    this.purchasedUnits = purchasedUnits;
    return this;
  }

  /**
   * Get purchasedUnits
   * @return purchasedUnits
   */
  @javax.annotation.Nullable
  public String getPurchasedUnits() {
    return purchasedUnits;
  }

  public void setPurchasedUnits(String purchasedUnits) {
    this.purchasedUnits = purchasedUnits;
  }


  public ReservationAggregates totalActualHours(String totalActualHours) {
    this.totalActualHours = totalActualHours;
    return this;
  }

  /**
   * Get totalActualHours
   * @return totalActualHours
   */
  @javax.annotation.Nullable
  public String getTotalActualHours() {
    return totalActualHours;
  }

  public void setTotalActualHours(String totalActualHours) {
    this.totalActualHours = totalActualHours;
  }


  public ReservationAggregates totalActualUnits(String totalActualUnits) {
    this.totalActualUnits = totalActualUnits;
    return this;
  }

  /**
   * Get totalActualUnits
   * @return totalActualUnits
   */
  @javax.annotation.Nullable
  public String getTotalActualUnits() {
    return totalActualUnits;
  }

  public void setTotalActualUnits(String totalActualUnits) {
    this.totalActualUnits = totalActualUnits;
  }


  public ReservationAggregates unusedHours(String unusedHours) {
    this.unusedHours = unusedHours;
    return this;
  }

  /**
   * Get unusedHours
   * @return unusedHours
   */
  @javax.annotation.Nullable
  public String getUnusedHours() {
    return unusedHours;
  }

  public void setUnusedHours(String unusedHours) {
    this.unusedHours = unusedHours;
  }


  public ReservationAggregates unusedUnits(String unusedUnits) {
    this.unusedUnits = unusedUnits;
    return this;
  }

  /**
   * Get unusedUnits
   * @return unusedUnits
   */
  @javax.annotation.Nullable
  public String getUnusedUnits() {
    return unusedUnits;
  }

  public void setUnusedUnits(String unusedUnits) {
    this.unusedUnits = unusedUnits;
  }


  public ReservationAggregates onDemandCostOfRIHoursUsed(String onDemandCostOfRIHoursUsed) {
    this.onDemandCostOfRIHoursUsed = onDemandCostOfRIHoursUsed;
    return this;
  }

  /**
   * Get onDemandCostOfRIHoursUsed
   * @return onDemandCostOfRIHoursUsed
   */
  @javax.annotation.Nullable
  public String getOnDemandCostOfRIHoursUsed() {
    return onDemandCostOfRIHoursUsed;
  }

  public void setOnDemandCostOfRIHoursUsed(String onDemandCostOfRIHoursUsed) {
    this.onDemandCostOfRIHoursUsed = onDemandCostOfRIHoursUsed;
  }


  public ReservationAggregates netRISavings(String netRISavings) {
    this.netRISavings = netRISavings;
    return this;
  }

  /**
   * Get netRISavings
   * @return netRISavings
   */
  @javax.annotation.Nullable
  public String getNetRISavings() {
    return netRISavings;
  }

  public void setNetRISavings(String netRISavings) {
    this.netRISavings = netRISavings;
  }


  public ReservationAggregates totalPotentialRISavings(String totalPotentialRISavings) {
    this.totalPotentialRISavings = totalPotentialRISavings;
    return this;
  }

  /**
   * Get totalPotentialRISavings
   * @return totalPotentialRISavings
   */
  @javax.annotation.Nullable
  public String getTotalPotentialRISavings() {
    return totalPotentialRISavings;
  }

  public void setTotalPotentialRISavings(String totalPotentialRISavings) {
    this.totalPotentialRISavings = totalPotentialRISavings;
  }


  public ReservationAggregates amortizedUpfrontFee(String amortizedUpfrontFee) {
    this.amortizedUpfrontFee = amortizedUpfrontFee;
    return this;
  }

  /**
   * Get amortizedUpfrontFee
   * @return amortizedUpfrontFee
   */
  @javax.annotation.Nullable
  public String getAmortizedUpfrontFee() {
    return amortizedUpfrontFee;
  }

  public void setAmortizedUpfrontFee(String amortizedUpfrontFee) {
    this.amortizedUpfrontFee = amortizedUpfrontFee;
  }


  public ReservationAggregates amortizedRecurringFee(String amortizedRecurringFee) {
    this.amortizedRecurringFee = amortizedRecurringFee;
    return this;
  }

  /**
   * Get amortizedRecurringFee
   * @return amortizedRecurringFee
   */
  @javax.annotation.Nullable
  public String getAmortizedRecurringFee() {
    return amortizedRecurringFee;
  }

  public void setAmortizedRecurringFee(String amortizedRecurringFee) {
    this.amortizedRecurringFee = amortizedRecurringFee;
  }


  public ReservationAggregates totalAmortizedFee(String totalAmortizedFee) {
    this.totalAmortizedFee = totalAmortizedFee;
    return this;
  }

  /**
   * Get totalAmortizedFee
   * @return totalAmortizedFee
   */
  @javax.annotation.Nullable
  public String getTotalAmortizedFee() {
    return totalAmortizedFee;
  }

  public void setTotalAmortizedFee(String totalAmortizedFee) {
    this.totalAmortizedFee = totalAmortizedFee;
  }


  public ReservationAggregates riCostForUnusedHours(String riCostForUnusedHours) {
    this.riCostForUnusedHours = riCostForUnusedHours;
    return this;
  }

  /**
   * Get riCostForUnusedHours
   * @return riCostForUnusedHours
   */
  @javax.annotation.Nullable
  public String getRiCostForUnusedHours() {
    return riCostForUnusedHours;
  }

  public void setRiCostForUnusedHours(String riCostForUnusedHours) {
    this.riCostForUnusedHours = riCostForUnusedHours;
  }


  public ReservationAggregates realizedSavings(String realizedSavings) {
    this.realizedSavings = realizedSavings;
    return this;
  }

  /**
   * Get realizedSavings
   * @return realizedSavings
   */
  @javax.annotation.Nullable
  public String getRealizedSavings() {
    return realizedSavings;
  }

  public void setRealizedSavings(String realizedSavings) {
    this.realizedSavings = realizedSavings;
  }


  public ReservationAggregates unrealizedSavings(String unrealizedSavings) {
    this.unrealizedSavings = unrealizedSavings;
    return this;
  }

  /**
   * Get unrealizedSavings
   * @return unrealizedSavings
   */
  @javax.annotation.Nullable
  public String getUnrealizedSavings() {
    return unrealizedSavings;
  }

  public void setUnrealizedSavings(String unrealizedSavings) {
    this.unrealizedSavings = unrealizedSavings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationAggregates reservationAggregates = (ReservationAggregates) o;
    return Objects.equals(this.utilizationPercentage, reservationAggregates.utilizationPercentage) &&
        Objects.equals(this.utilizationPercentageInUnits, reservationAggregates.utilizationPercentageInUnits) &&
        Objects.equals(this.purchasedHours, reservationAggregates.purchasedHours) &&
        Objects.equals(this.purchasedUnits, reservationAggregates.purchasedUnits) &&
        Objects.equals(this.totalActualHours, reservationAggregates.totalActualHours) &&
        Objects.equals(this.totalActualUnits, reservationAggregates.totalActualUnits) &&
        Objects.equals(this.unusedHours, reservationAggregates.unusedHours) &&
        Objects.equals(this.unusedUnits, reservationAggregates.unusedUnits) &&
        Objects.equals(this.onDemandCostOfRIHoursUsed, reservationAggregates.onDemandCostOfRIHoursUsed) &&
        Objects.equals(this.netRISavings, reservationAggregates.netRISavings) &&
        Objects.equals(this.totalPotentialRISavings, reservationAggregates.totalPotentialRISavings) &&
        Objects.equals(this.amortizedUpfrontFee, reservationAggregates.amortizedUpfrontFee) &&
        Objects.equals(this.amortizedRecurringFee, reservationAggregates.amortizedRecurringFee) &&
        Objects.equals(this.totalAmortizedFee, reservationAggregates.totalAmortizedFee) &&
        Objects.equals(this.riCostForUnusedHours, reservationAggregates.riCostForUnusedHours) &&
        Objects.equals(this.realizedSavings, reservationAggregates.realizedSavings) &&
        Objects.equals(this.unrealizedSavings, reservationAggregates.unrealizedSavings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(utilizationPercentage, utilizationPercentageInUnits, purchasedHours, purchasedUnits, totalActualHours, totalActualUnits, unusedHours, unusedUnits, onDemandCostOfRIHoursUsed, netRISavings, totalPotentialRISavings, amortizedUpfrontFee, amortizedRecurringFee, totalAmortizedFee, riCostForUnusedHours, realizedSavings, unrealizedSavings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationAggregates {\n");
    sb.append("    utilizationPercentage: ").append(toIndentedString(utilizationPercentage)).append("\n");
    sb.append("    utilizationPercentageInUnits: ").append(toIndentedString(utilizationPercentageInUnits)).append("\n");
    sb.append("    purchasedHours: ").append(toIndentedString(purchasedHours)).append("\n");
    sb.append("    purchasedUnits: ").append(toIndentedString(purchasedUnits)).append("\n");
    sb.append("    totalActualHours: ").append(toIndentedString(totalActualHours)).append("\n");
    sb.append("    totalActualUnits: ").append(toIndentedString(totalActualUnits)).append("\n");
    sb.append("    unusedHours: ").append(toIndentedString(unusedHours)).append("\n");
    sb.append("    unusedUnits: ").append(toIndentedString(unusedUnits)).append("\n");
    sb.append("    onDemandCostOfRIHoursUsed: ").append(toIndentedString(onDemandCostOfRIHoursUsed)).append("\n");
    sb.append("    netRISavings: ").append(toIndentedString(netRISavings)).append("\n");
    sb.append("    totalPotentialRISavings: ").append(toIndentedString(totalPotentialRISavings)).append("\n");
    sb.append("    amortizedUpfrontFee: ").append(toIndentedString(amortizedUpfrontFee)).append("\n");
    sb.append("    amortizedRecurringFee: ").append(toIndentedString(amortizedRecurringFee)).append("\n");
    sb.append("    totalAmortizedFee: ").append(toIndentedString(totalAmortizedFee)).append("\n");
    sb.append("    riCostForUnusedHours: ").append(toIndentedString(riCostForUnusedHours)).append("\n");
    sb.append("    realizedSavings: ").append(toIndentedString(realizedSavings)).append("\n");
    sb.append("    unrealizedSavings: ").append(toIndentedString(unrealizedSavings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("UtilizationPercentage");
    openapiFields.add("UtilizationPercentageInUnits");
    openapiFields.add("PurchasedHours");
    openapiFields.add("PurchasedUnits");
    openapiFields.add("TotalActualHours");
    openapiFields.add("TotalActualUnits");
    openapiFields.add("UnusedHours");
    openapiFields.add("UnusedUnits");
    openapiFields.add("OnDemandCostOfRIHoursUsed");
    openapiFields.add("NetRISavings");
    openapiFields.add("TotalPotentialRISavings");
    openapiFields.add("AmortizedUpfrontFee");
    openapiFields.add("AmortizedRecurringFee");
    openapiFields.add("TotalAmortizedFee");
    openapiFields.add("RICostForUnusedHours");
    openapiFields.add("RealizedSavings");
    openapiFields.add("UnrealizedSavings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationAggregates
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationAggregates.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationAggregates is not found in the empty JSON string", ReservationAggregates.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationAggregates.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationAggregates` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `UtilizationPercentage`
      if (jsonObj.get("UtilizationPercentage") != null && !jsonObj.get("UtilizationPercentage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UtilizationPercentage"));
      }
      // validate the optional field `UtilizationPercentageInUnits`
      if (jsonObj.get("UtilizationPercentageInUnits") != null && !jsonObj.get("UtilizationPercentageInUnits").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UtilizationPercentageInUnits"));
      }
      // validate the optional field `PurchasedHours`
      if (jsonObj.get("PurchasedHours") != null && !jsonObj.get("PurchasedHours").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PurchasedHours"));
      }
      // validate the optional field `PurchasedUnits`
      if (jsonObj.get("PurchasedUnits") != null && !jsonObj.get("PurchasedUnits").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PurchasedUnits"));
      }
      // validate the optional field `TotalActualHours`
      if (jsonObj.get("TotalActualHours") != null && !jsonObj.get("TotalActualHours").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalActualHours"));
      }
      // validate the optional field `TotalActualUnits`
      if (jsonObj.get("TotalActualUnits") != null && !jsonObj.get("TotalActualUnits").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalActualUnits"));
      }
      // validate the optional field `UnusedHours`
      if (jsonObj.get("UnusedHours") != null && !jsonObj.get("UnusedHours").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UnusedHours"));
      }
      // validate the optional field `UnusedUnits`
      if (jsonObj.get("UnusedUnits") != null && !jsonObj.get("UnusedUnits").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UnusedUnits"));
      }
      // validate the optional field `OnDemandCostOfRIHoursUsed`
      if (jsonObj.get("OnDemandCostOfRIHoursUsed") != null && !jsonObj.get("OnDemandCostOfRIHoursUsed").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OnDemandCostOfRIHoursUsed"));
      }
      // validate the optional field `NetRISavings`
      if (jsonObj.get("NetRISavings") != null && !jsonObj.get("NetRISavings").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetRISavings"));
      }
      // validate the optional field `TotalPotentialRISavings`
      if (jsonObj.get("TotalPotentialRISavings") != null && !jsonObj.get("TotalPotentialRISavings").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalPotentialRISavings"));
      }
      // validate the optional field `AmortizedUpfrontFee`
      if (jsonObj.get("AmortizedUpfrontFee") != null && !jsonObj.get("AmortizedUpfrontFee").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AmortizedUpfrontFee"));
      }
      // validate the optional field `AmortizedRecurringFee`
      if (jsonObj.get("AmortizedRecurringFee") != null && !jsonObj.get("AmortizedRecurringFee").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AmortizedRecurringFee"));
      }
      // validate the optional field `TotalAmortizedFee`
      if (jsonObj.get("TotalAmortizedFee") != null && !jsonObj.get("TotalAmortizedFee").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalAmortizedFee"));
      }
      // validate the optional field `RICostForUnusedHours`
      if (jsonObj.get("RICostForUnusedHours") != null && !jsonObj.get("RICostForUnusedHours").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RICostForUnusedHours"));
      }
      // validate the optional field `RealizedSavings`
      if (jsonObj.get("RealizedSavings") != null && !jsonObj.get("RealizedSavings").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RealizedSavings"));
      }
      // validate the optional field `UnrealizedSavings`
      if (jsonObj.get("UnrealizedSavings") != null && !jsonObj.get("UnrealizedSavings").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UnrealizedSavings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationAggregates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationAggregates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationAggregates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationAggregates.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationAggregates>() {
           @Override
           public void write(JsonWriter out, ReservationAggregates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationAggregates read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationAggregates given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationAggregates
   * @throws IOException if the JSON string is invalid with respect to ReservationAggregates
   */
  public static ReservationAggregates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationAggregates.class);
  }

  /**
   * Convert an instance of ReservationAggregates to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

