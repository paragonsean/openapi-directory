/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specific coverage percentage, On-Demand costs, and spend covered by Savings Plans, and total Savings Plans costs for an account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SavingsPlansCoverageData {
  public static final String SERIALIZED_NAME_SPEND_COVERED_BY_SAVINGS_PLANS = "SpendCoveredBySavingsPlans";
  @SerializedName(SERIALIZED_NAME_SPEND_COVERED_BY_SAVINGS_PLANS)
  private String spendCoveredBySavingsPlans;

  public static final String SERIALIZED_NAME_ON_DEMAND_COST = "OnDemandCost";
  @SerializedName(SERIALIZED_NAME_ON_DEMAND_COST)
  private String onDemandCost;

  public static final String SERIALIZED_NAME_TOTAL_COST = "TotalCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private String totalCost;

  public static final String SERIALIZED_NAME_COVERAGE_PERCENTAGE = "CoveragePercentage";
  @SerializedName(SERIALIZED_NAME_COVERAGE_PERCENTAGE)
  private String coveragePercentage;

  public SavingsPlansCoverageData() {
  }

  public SavingsPlansCoverageData spendCoveredBySavingsPlans(String spendCoveredBySavingsPlans) {
    this.spendCoveredBySavingsPlans = spendCoveredBySavingsPlans;
    return this;
  }

  /**
   * Get spendCoveredBySavingsPlans
   * @return spendCoveredBySavingsPlans
   */
  @javax.annotation.Nullable
  public String getSpendCoveredBySavingsPlans() {
    return spendCoveredBySavingsPlans;
  }

  public void setSpendCoveredBySavingsPlans(String spendCoveredBySavingsPlans) {
    this.spendCoveredBySavingsPlans = spendCoveredBySavingsPlans;
  }


  public SavingsPlansCoverageData onDemandCost(String onDemandCost) {
    this.onDemandCost = onDemandCost;
    return this;
  }

  /**
   * Get onDemandCost
   * @return onDemandCost
   */
  @javax.annotation.Nullable
  public String getOnDemandCost() {
    return onDemandCost;
  }

  public void setOnDemandCost(String onDemandCost) {
    this.onDemandCost = onDemandCost;
  }


  public SavingsPlansCoverageData totalCost(String totalCost) {
    this.totalCost = totalCost;
    return this;
  }

  /**
   * Get totalCost
   * @return totalCost
   */
  @javax.annotation.Nullable
  public String getTotalCost() {
    return totalCost;
  }

  public void setTotalCost(String totalCost) {
    this.totalCost = totalCost;
  }


  public SavingsPlansCoverageData coveragePercentage(String coveragePercentage) {
    this.coveragePercentage = coveragePercentage;
    return this;
  }

  /**
   * Get coveragePercentage
   * @return coveragePercentage
   */
  @javax.annotation.Nullable
  public String getCoveragePercentage() {
    return coveragePercentage;
  }

  public void setCoveragePercentage(String coveragePercentage) {
    this.coveragePercentage = coveragePercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SavingsPlansCoverageData savingsPlansCoverageData = (SavingsPlansCoverageData) o;
    return Objects.equals(this.spendCoveredBySavingsPlans, savingsPlansCoverageData.spendCoveredBySavingsPlans) &&
        Objects.equals(this.onDemandCost, savingsPlansCoverageData.onDemandCost) &&
        Objects.equals(this.totalCost, savingsPlansCoverageData.totalCost) &&
        Objects.equals(this.coveragePercentage, savingsPlansCoverageData.coveragePercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(spendCoveredBySavingsPlans, onDemandCost, totalCost, coveragePercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SavingsPlansCoverageData {\n");
    sb.append("    spendCoveredBySavingsPlans: ").append(toIndentedString(spendCoveredBySavingsPlans)).append("\n");
    sb.append("    onDemandCost: ").append(toIndentedString(onDemandCost)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    coveragePercentage: ").append(toIndentedString(coveragePercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SpendCoveredBySavingsPlans");
    openapiFields.add("OnDemandCost");
    openapiFields.add("TotalCost");
    openapiFields.add("CoveragePercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SavingsPlansCoverageData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SavingsPlansCoverageData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SavingsPlansCoverageData is not found in the empty JSON string", SavingsPlansCoverageData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SavingsPlansCoverageData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SavingsPlansCoverageData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SpendCoveredBySavingsPlans`
      if (jsonObj.get("SpendCoveredBySavingsPlans") != null && !jsonObj.get("SpendCoveredBySavingsPlans").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SpendCoveredBySavingsPlans"));
      }
      // validate the optional field `OnDemandCost`
      if (jsonObj.get("OnDemandCost") != null && !jsonObj.get("OnDemandCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OnDemandCost"));
      }
      // validate the optional field `TotalCost`
      if (jsonObj.get("TotalCost") != null && !jsonObj.get("TotalCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalCost"));
      }
      // validate the optional field `CoveragePercentage`
      if (jsonObj.get("CoveragePercentage") != null && !jsonObj.get("CoveragePercentage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CoveragePercentage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SavingsPlansCoverageData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SavingsPlansCoverageData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SavingsPlansCoverageData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SavingsPlansCoverageData.class));

       return (TypeAdapter<T>) new TypeAdapter<SavingsPlansCoverageData>() {
           @Override
           public void write(JsonWriter out, SavingsPlansCoverageData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SavingsPlansCoverageData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SavingsPlansCoverageData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SavingsPlansCoverageData
   * @throws IOException if the JSON string is invalid with respect to SavingsPlansCoverageData
   */
  public static SavingsPlansCoverageData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SavingsPlansCoverageData.class);
  }

  /**
   * Convert an instance of SavingsPlansCoverageData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

