/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CurrentInstanceResourceDetails;
import org.openapitools.client.model.CurrentInstanceResourceUtilization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Context about the current instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CurrentInstance {
  public static final String SERIALIZED_NAME_RESOURCE_ID = "ResourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_INSTANCE_NAME = "InstanceName";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAME)
  private String instanceName;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_RESOURCE_DETAILS = "ResourceDetails";
  @SerializedName(SERIALIZED_NAME_RESOURCE_DETAILS)
  private CurrentInstanceResourceDetails resourceDetails;

  public static final String SERIALIZED_NAME_RESOURCE_UTILIZATION = "ResourceUtilization";
  @SerializedName(SERIALIZED_NAME_RESOURCE_UTILIZATION)
  private CurrentInstanceResourceUtilization resourceUtilization;

  public static final String SERIALIZED_NAME_RESERVATION_COVERED_HOURS_IN_LOOKBACK_PERIOD = "ReservationCoveredHoursInLookbackPeriod";
  @SerializedName(SERIALIZED_NAME_RESERVATION_COVERED_HOURS_IN_LOOKBACK_PERIOD)
  private String reservationCoveredHoursInLookbackPeriod;

  public static final String SERIALIZED_NAME_SAVINGS_PLANS_COVERED_HOURS_IN_LOOKBACK_PERIOD = "SavingsPlansCoveredHoursInLookbackPeriod";
  @SerializedName(SERIALIZED_NAME_SAVINGS_PLANS_COVERED_HOURS_IN_LOOKBACK_PERIOD)
  private String savingsPlansCoveredHoursInLookbackPeriod;

  public static final String SERIALIZED_NAME_ON_DEMAND_HOURS_IN_LOOKBACK_PERIOD = "OnDemandHoursInLookbackPeriod";
  @SerializedName(SERIALIZED_NAME_ON_DEMAND_HOURS_IN_LOOKBACK_PERIOD)
  private String onDemandHoursInLookbackPeriod;

  public static final String SERIALIZED_NAME_TOTAL_RUNNING_HOURS_IN_LOOKBACK_PERIOD = "TotalRunningHoursInLookbackPeriod";
  @SerializedName(SERIALIZED_NAME_TOTAL_RUNNING_HOURS_IN_LOOKBACK_PERIOD)
  private String totalRunningHoursInLookbackPeriod;

  public static final String SERIALIZED_NAME_MONTHLY_COST = "MonthlyCost";
  @SerializedName(SERIALIZED_NAME_MONTHLY_COST)
  private String monthlyCost;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public CurrentInstance() {
  }

  public CurrentInstance resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public CurrentInstance instanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

  /**
   * Get instanceName
   * @return instanceName
   */
  @javax.annotation.Nullable
  public String getInstanceName() {
    return instanceName;
  }

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }


  public CurrentInstance tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CurrentInstance resourceDetails(CurrentInstanceResourceDetails resourceDetails) {
    this.resourceDetails = resourceDetails;
    return this;
  }

  /**
   * Get resourceDetails
   * @return resourceDetails
   */
  @javax.annotation.Nullable
  public CurrentInstanceResourceDetails getResourceDetails() {
    return resourceDetails;
  }

  public void setResourceDetails(CurrentInstanceResourceDetails resourceDetails) {
    this.resourceDetails = resourceDetails;
  }


  public CurrentInstance resourceUtilization(CurrentInstanceResourceUtilization resourceUtilization) {
    this.resourceUtilization = resourceUtilization;
    return this;
  }

  /**
   * Get resourceUtilization
   * @return resourceUtilization
   */
  @javax.annotation.Nullable
  public CurrentInstanceResourceUtilization getResourceUtilization() {
    return resourceUtilization;
  }

  public void setResourceUtilization(CurrentInstanceResourceUtilization resourceUtilization) {
    this.resourceUtilization = resourceUtilization;
  }


  public CurrentInstance reservationCoveredHoursInLookbackPeriod(String reservationCoveredHoursInLookbackPeriod) {
    this.reservationCoveredHoursInLookbackPeriod = reservationCoveredHoursInLookbackPeriod;
    return this;
  }

  /**
   * Get reservationCoveredHoursInLookbackPeriod
   * @return reservationCoveredHoursInLookbackPeriod
   */
  @javax.annotation.Nullable
  public String getReservationCoveredHoursInLookbackPeriod() {
    return reservationCoveredHoursInLookbackPeriod;
  }

  public void setReservationCoveredHoursInLookbackPeriod(String reservationCoveredHoursInLookbackPeriod) {
    this.reservationCoveredHoursInLookbackPeriod = reservationCoveredHoursInLookbackPeriod;
  }


  public CurrentInstance savingsPlansCoveredHoursInLookbackPeriod(String savingsPlansCoveredHoursInLookbackPeriod) {
    this.savingsPlansCoveredHoursInLookbackPeriod = savingsPlansCoveredHoursInLookbackPeriod;
    return this;
  }

  /**
   * Get savingsPlansCoveredHoursInLookbackPeriod
   * @return savingsPlansCoveredHoursInLookbackPeriod
   */
  @javax.annotation.Nullable
  public String getSavingsPlansCoveredHoursInLookbackPeriod() {
    return savingsPlansCoveredHoursInLookbackPeriod;
  }

  public void setSavingsPlansCoveredHoursInLookbackPeriod(String savingsPlansCoveredHoursInLookbackPeriod) {
    this.savingsPlansCoveredHoursInLookbackPeriod = savingsPlansCoveredHoursInLookbackPeriod;
  }


  public CurrentInstance onDemandHoursInLookbackPeriod(String onDemandHoursInLookbackPeriod) {
    this.onDemandHoursInLookbackPeriod = onDemandHoursInLookbackPeriod;
    return this;
  }

  /**
   * Get onDemandHoursInLookbackPeriod
   * @return onDemandHoursInLookbackPeriod
   */
  @javax.annotation.Nullable
  public String getOnDemandHoursInLookbackPeriod() {
    return onDemandHoursInLookbackPeriod;
  }

  public void setOnDemandHoursInLookbackPeriod(String onDemandHoursInLookbackPeriod) {
    this.onDemandHoursInLookbackPeriod = onDemandHoursInLookbackPeriod;
  }


  public CurrentInstance totalRunningHoursInLookbackPeriod(String totalRunningHoursInLookbackPeriod) {
    this.totalRunningHoursInLookbackPeriod = totalRunningHoursInLookbackPeriod;
    return this;
  }

  /**
   * Get totalRunningHoursInLookbackPeriod
   * @return totalRunningHoursInLookbackPeriod
   */
  @javax.annotation.Nullable
  public String getTotalRunningHoursInLookbackPeriod() {
    return totalRunningHoursInLookbackPeriod;
  }

  public void setTotalRunningHoursInLookbackPeriod(String totalRunningHoursInLookbackPeriod) {
    this.totalRunningHoursInLookbackPeriod = totalRunningHoursInLookbackPeriod;
  }


  public CurrentInstance monthlyCost(String monthlyCost) {
    this.monthlyCost = monthlyCost;
    return this;
  }

  /**
   * Get monthlyCost
   * @return monthlyCost
   */
  @javax.annotation.Nullable
  public String getMonthlyCost() {
    return monthlyCost;
  }

  public void setMonthlyCost(String monthlyCost) {
    this.monthlyCost = monthlyCost;
  }


  public CurrentInstance currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentInstance currentInstance = (CurrentInstance) o;
    return Objects.equals(this.resourceId, currentInstance.resourceId) &&
        Objects.equals(this.instanceName, currentInstance.instanceName) &&
        Objects.equals(this.tags, currentInstance.tags) &&
        Objects.equals(this.resourceDetails, currentInstance.resourceDetails) &&
        Objects.equals(this.resourceUtilization, currentInstance.resourceUtilization) &&
        Objects.equals(this.reservationCoveredHoursInLookbackPeriod, currentInstance.reservationCoveredHoursInLookbackPeriod) &&
        Objects.equals(this.savingsPlansCoveredHoursInLookbackPeriod, currentInstance.savingsPlansCoveredHoursInLookbackPeriod) &&
        Objects.equals(this.onDemandHoursInLookbackPeriod, currentInstance.onDemandHoursInLookbackPeriod) &&
        Objects.equals(this.totalRunningHoursInLookbackPeriod, currentInstance.totalRunningHoursInLookbackPeriod) &&
        Objects.equals(this.monthlyCost, currentInstance.monthlyCost) &&
        Objects.equals(this.currencyCode, currentInstance.currencyCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceId, instanceName, tags, resourceDetails, resourceUtilization, reservationCoveredHoursInLookbackPeriod, savingsPlansCoveredHoursInLookbackPeriod, onDemandHoursInLookbackPeriod, totalRunningHoursInLookbackPeriod, monthlyCost, currencyCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentInstance {\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    resourceDetails: ").append(toIndentedString(resourceDetails)).append("\n");
    sb.append("    resourceUtilization: ").append(toIndentedString(resourceUtilization)).append("\n");
    sb.append("    reservationCoveredHoursInLookbackPeriod: ").append(toIndentedString(reservationCoveredHoursInLookbackPeriod)).append("\n");
    sb.append("    savingsPlansCoveredHoursInLookbackPeriod: ").append(toIndentedString(savingsPlansCoveredHoursInLookbackPeriod)).append("\n");
    sb.append("    onDemandHoursInLookbackPeriod: ").append(toIndentedString(onDemandHoursInLookbackPeriod)).append("\n");
    sb.append("    totalRunningHoursInLookbackPeriod: ").append(toIndentedString(totalRunningHoursInLookbackPeriod)).append("\n");
    sb.append("    monthlyCost: ").append(toIndentedString(monthlyCost)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResourceId");
    openapiFields.add("InstanceName");
    openapiFields.add("Tags");
    openapiFields.add("ResourceDetails");
    openapiFields.add("ResourceUtilization");
    openapiFields.add("ReservationCoveredHoursInLookbackPeriod");
    openapiFields.add("SavingsPlansCoveredHoursInLookbackPeriod");
    openapiFields.add("OnDemandHoursInLookbackPeriod");
    openapiFields.add("TotalRunningHoursInLookbackPeriod");
    openapiFields.add("MonthlyCost");
    openapiFields.add("CurrencyCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CurrentInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CurrentInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrentInstance is not found in the empty JSON string", CurrentInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CurrentInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurrentInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ResourceId`
      if (jsonObj.get("ResourceId") != null && !jsonObj.get("ResourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceId"));
      }
      // validate the optional field `InstanceName`
      if (jsonObj.get("InstanceName") != null && !jsonObj.get("InstanceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceName"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `ResourceDetails`
      if (jsonObj.get("ResourceDetails") != null && !jsonObj.get("ResourceDetails").isJsonNull()) {
        CurrentInstanceResourceDetails.validateJsonElement(jsonObj.get("ResourceDetails"));
      }
      // validate the optional field `ResourceUtilization`
      if (jsonObj.get("ResourceUtilization") != null && !jsonObj.get("ResourceUtilization").isJsonNull()) {
        CurrentInstanceResourceUtilization.validateJsonElement(jsonObj.get("ResourceUtilization"));
      }
      // validate the optional field `ReservationCoveredHoursInLookbackPeriod`
      if (jsonObj.get("ReservationCoveredHoursInLookbackPeriod") != null && !jsonObj.get("ReservationCoveredHoursInLookbackPeriod").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReservationCoveredHoursInLookbackPeriod"));
      }
      // validate the optional field `SavingsPlansCoveredHoursInLookbackPeriod`
      if (jsonObj.get("SavingsPlansCoveredHoursInLookbackPeriod") != null && !jsonObj.get("SavingsPlansCoveredHoursInLookbackPeriod").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SavingsPlansCoveredHoursInLookbackPeriod"));
      }
      // validate the optional field `OnDemandHoursInLookbackPeriod`
      if (jsonObj.get("OnDemandHoursInLookbackPeriod") != null && !jsonObj.get("OnDemandHoursInLookbackPeriod").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OnDemandHoursInLookbackPeriod"));
      }
      // validate the optional field `TotalRunningHoursInLookbackPeriod`
      if (jsonObj.get("TotalRunningHoursInLookbackPeriod") != null && !jsonObj.get("TotalRunningHoursInLookbackPeriod").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalRunningHoursInLookbackPeriod"));
      }
      // validate the optional field `MonthlyCost`
      if (jsonObj.get("MonthlyCost") != null && !jsonObj.get("MonthlyCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MonthlyCost"));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrentInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrentInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrentInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrentInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrentInstance>() {
           @Override
           public void write(JsonWriter out, CurrentInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrentInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CurrentInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CurrentInstance
   * @throws IOException if the JSON string is invalid with respect to CurrentInstance
   */
  public static CurrentInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrentInstance.class);
  }

  /**
   * Convert an instance of CurrentInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

