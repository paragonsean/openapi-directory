/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Expression;
import org.openapitools.client.model.MonitorDimension;
import org.openapitools.client.model.MonitorType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAnomalyMonitorRequestAnomalyMonitor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAnomalyMonitorRequestAnomalyMonitor {
  public static final String SERIALIZED_NAME_MONITOR_ARN = "MonitorArn";
  @SerializedName(SERIALIZED_NAME_MONITOR_ARN)
  private String monitorArn;

  public static final String SERIALIZED_NAME_MONITOR_NAME = "MonitorName";
  @SerializedName(SERIALIZED_NAME_MONITOR_NAME)
  private String monitorName;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE = "LastUpdatedDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE)
  private String lastUpdatedDate;

  public static final String SERIALIZED_NAME_LAST_EVALUATED_DATE = "LastEvaluatedDate";
  @SerializedName(SERIALIZED_NAME_LAST_EVALUATED_DATE)
  private String lastEvaluatedDate;

  public static final String SERIALIZED_NAME_MONITOR_TYPE = "MonitorType";
  @SerializedName(SERIALIZED_NAME_MONITOR_TYPE)
  private MonitorType monitorType;

  public static final String SERIALIZED_NAME_MONITOR_DIMENSION = "MonitorDimension";
  @SerializedName(SERIALIZED_NAME_MONITOR_DIMENSION)
  private MonitorDimension monitorDimension;

  public static final String SERIALIZED_NAME_MONITOR_SPECIFICATION = "MonitorSpecification";
  @SerializedName(SERIALIZED_NAME_MONITOR_SPECIFICATION)
  private Expression monitorSpecification;

  public static final String SERIALIZED_NAME_DIMENSIONAL_VALUE_COUNT = "DimensionalValueCount";
  @SerializedName(SERIALIZED_NAME_DIMENSIONAL_VALUE_COUNT)
  private Integer dimensionalValueCount;

  public CreateAnomalyMonitorRequestAnomalyMonitor() {
  }

  public CreateAnomalyMonitorRequestAnomalyMonitor monitorArn(String monitorArn) {
    this.monitorArn = monitorArn;
    return this;
  }

  /**
   * Get monitorArn
   * @return monitorArn
   */
  @javax.annotation.Nullable
  public String getMonitorArn() {
    return monitorArn;
  }

  public void setMonitorArn(String monitorArn) {
    this.monitorArn = monitorArn;
  }


  public CreateAnomalyMonitorRequestAnomalyMonitor monitorName(String monitorName) {
    this.monitorName = monitorName;
    return this;
  }

  /**
   * Get monitorName
   * @return monitorName
   */
  @javax.annotation.Nonnull
  public String getMonitorName() {
    return monitorName;
  }

  public void setMonitorName(String monitorName) {
    this.monitorName = monitorName;
  }


  public CreateAnomalyMonitorRequestAnomalyMonitor creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public CreateAnomalyMonitorRequestAnomalyMonitor lastUpdatedDate(String lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
    return this;
  }

  /**
   * Get lastUpdatedDate
   * @return lastUpdatedDate
   */
  @javax.annotation.Nullable
  public String getLastUpdatedDate() {
    return lastUpdatedDate;
  }

  public void setLastUpdatedDate(String lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
  }


  public CreateAnomalyMonitorRequestAnomalyMonitor lastEvaluatedDate(String lastEvaluatedDate) {
    this.lastEvaluatedDate = lastEvaluatedDate;
    return this;
  }

  /**
   * Get lastEvaluatedDate
   * @return lastEvaluatedDate
   */
  @javax.annotation.Nullable
  public String getLastEvaluatedDate() {
    return lastEvaluatedDate;
  }

  public void setLastEvaluatedDate(String lastEvaluatedDate) {
    this.lastEvaluatedDate = lastEvaluatedDate;
  }


  public CreateAnomalyMonitorRequestAnomalyMonitor monitorType(MonitorType monitorType) {
    this.monitorType = monitorType;
    return this;
  }

  /**
   * Get monitorType
   * @return monitorType
   */
  @javax.annotation.Nonnull
  public MonitorType getMonitorType() {
    return monitorType;
  }

  public void setMonitorType(MonitorType monitorType) {
    this.monitorType = monitorType;
  }


  public CreateAnomalyMonitorRequestAnomalyMonitor monitorDimension(MonitorDimension monitorDimension) {
    this.monitorDimension = monitorDimension;
    return this;
  }

  /**
   * Get monitorDimension
   * @return monitorDimension
   */
  @javax.annotation.Nullable
  public MonitorDimension getMonitorDimension() {
    return monitorDimension;
  }

  public void setMonitorDimension(MonitorDimension monitorDimension) {
    this.monitorDimension = monitorDimension;
  }


  public CreateAnomalyMonitorRequestAnomalyMonitor monitorSpecification(Expression monitorSpecification) {
    this.monitorSpecification = monitorSpecification;
    return this;
  }

  /**
   * Get monitorSpecification
   * @return monitorSpecification
   */
  @javax.annotation.Nullable
  public Expression getMonitorSpecification() {
    return monitorSpecification;
  }

  public void setMonitorSpecification(Expression monitorSpecification) {
    this.monitorSpecification = monitorSpecification;
  }


  public CreateAnomalyMonitorRequestAnomalyMonitor dimensionalValueCount(Integer dimensionalValueCount) {
    this.dimensionalValueCount = dimensionalValueCount;
    return this;
  }

  /**
   * Get dimensionalValueCount
   * @return dimensionalValueCount
   */
  @javax.annotation.Nullable
  public Integer getDimensionalValueCount() {
    return dimensionalValueCount;
  }

  public void setDimensionalValueCount(Integer dimensionalValueCount) {
    this.dimensionalValueCount = dimensionalValueCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnomalyMonitorRequestAnomalyMonitor createAnomalyMonitorRequestAnomalyMonitor = (CreateAnomalyMonitorRequestAnomalyMonitor) o;
    return Objects.equals(this.monitorArn, createAnomalyMonitorRequestAnomalyMonitor.monitorArn) &&
        Objects.equals(this.monitorName, createAnomalyMonitorRequestAnomalyMonitor.monitorName) &&
        Objects.equals(this.creationDate, createAnomalyMonitorRequestAnomalyMonitor.creationDate) &&
        Objects.equals(this.lastUpdatedDate, createAnomalyMonitorRequestAnomalyMonitor.lastUpdatedDate) &&
        Objects.equals(this.lastEvaluatedDate, createAnomalyMonitorRequestAnomalyMonitor.lastEvaluatedDate) &&
        Objects.equals(this.monitorType, createAnomalyMonitorRequestAnomalyMonitor.monitorType) &&
        Objects.equals(this.monitorDimension, createAnomalyMonitorRequestAnomalyMonitor.monitorDimension) &&
        Objects.equals(this.monitorSpecification, createAnomalyMonitorRequestAnomalyMonitor.monitorSpecification) &&
        Objects.equals(this.dimensionalValueCount, createAnomalyMonitorRequestAnomalyMonitor.dimensionalValueCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monitorArn, monitorName, creationDate, lastUpdatedDate, lastEvaluatedDate, monitorType, monitorDimension, monitorSpecification, dimensionalValueCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnomalyMonitorRequestAnomalyMonitor {\n");
    sb.append("    monitorArn: ").append(toIndentedString(monitorArn)).append("\n");
    sb.append("    monitorName: ").append(toIndentedString(monitorName)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    lastUpdatedDate: ").append(toIndentedString(lastUpdatedDate)).append("\n");
    sb.append("    lastEvaluatedDate: ").append(toIndentedString(lastEvaluatedDate)).append("\n");
    sb.append("    monitorType: ").append(toIndentedString(monitorType)).append("\n");
    sb.append("    monitorDimension: ").append(toIndentedString(monitorDimension)).append("\n");
    sb.append("    monitorSpecification: ").append(toIndentedString(monitorSpecification)).append("\n");
    sb.append("    dimensionalValueCount: ").append(toIndentedString(dimensionalValueCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MonitorArn");
    openapiFields.add("MonitorName");
    openapiFields.add("CreationDate");
    openapiFields.add("LastUpdatedDate");
    openapiFields.add("LastEvaluatedDate");
    openapiFields.add("MonitorType");
    openapiFields.add("MonitorDimension");
    openapiFields.add("MonitorSpecification");
    openapiFields.add("DimensionalValueCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MonitorName");
    openapiRequiredFields.add("MonitorType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAnomalyMonitorRequestAnomalyMonitor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAnomalyMonitorRequestAnomalyMonitor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnomalyMonitorRequestAnomalyMonitor is not found in the empty JSON string", CreateAnomalyMonitorRequestAnomalyMonitor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAnomalyMonitorRequestAnomalyMonitor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnomalyMonitorRequestAnomalyMonitor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAnomalyMonitorRequestAnomalyMonitor.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MonitorArn`
      if (jsonObj.get("MonitorArn") != null && !jsonObj.get("MonitorArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MonitorArn"));
      }
      // validate the required field `MonitorName`
      String.validateJsonElement(jsonObj.get("MonitorName"));
      // validate the optional field `CreationDate`
      if (jsonObj.get("CreationDate") != null && !jsonObj.get("CreationDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreationDate"));
      }
      // validate the optional field `LastUpdatedDate`
      if (jsonObj.get("LastUpdatedDate") != null && !jsonObj.get("LastUpdatedDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastUpdatedDate"));
      }
      // validate the optional field `LastEvaluatedDate`
      if (jsonObj.get("LastEvaluatedDate") != null && !jsonObj.get("LastEvaluatedDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastEvaluatedDate"));
      }
      // validate the required field `MonitorType`
      MonitorType.validateJsonElement(jsonObj.get("MonitorType"));
      // validate the optional field `MonitorDimension`
      if (jsonObj.get("MonitorDimension") != null && !jsonObj.get("MonitorDimension").isJsonNull()) {
        MonitorDimension.validateJsonElement(jsonObj.get("MonitorDimension"));
      }
      // validate the optional field `MonitorSpecification`
      if (jsonObj.get("MonitorSpecification") != null && !jsonObj.get("MonitorSpecification").isJsonNull()) {
        Expression.validateJsonElement(jsonObj.get("MonitorSpecification"));
      }
      // validate the optional field `DimensionalValueCount`
      if (jsonObj.get("DimensionalValueCount") != null && !jsonObj.get("DimensionalValueCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DimensionalValueCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnomalyMonitorRequestAnomalyMonitor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnomalyMonitorRequestAnomalyMonitor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnomalyMonitorRequestAnomalyMonitor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnomalyMonitorRequestAnomalyMonitor.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnomalyMonitorRequestAnomalyMonitor>() {
           @Override
           public void write(JsonWriter out, CreateAnomalyMonitorRequestAnomalyMonitor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnomalyMonitorRequestAnomalyMonitor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAnomalyMonitorRequestAnomalyMonitor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAnomalyMonitorRequestAnomalyMonitor
   * @throws IOException if the JSON string is invalid with respect to CreateAnomalyMonitorRequestAnomalyMonitor
   */
  public static CreateAnomalyMonitorRequestAnomalyMonitor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnomalyMonitorRequestAnomalyMonitor.class);
  }

  /**
   * Convert an instance of CreateAnomalyMonitorRequestAnomalyMonitor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

