/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the hourly metrics for the given recommendation over the lookback period. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationDetailHourlyMetrics {
  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_ESTIMATED_ON_DEMAND_COST = "EstimatedOnDemandCost";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_ON_DEMAND_COST)
  private String estimatedOnDemandCost;

  public static final String SERIALIZED_NAME_CURRENT_COVERAGE = "CurrentCoverage";
  @SerializedName(SERIALIZED_NAME_CURRENT_COVERAGE)
  private String currentCoverage;

  public static final String SERIALIZED_NAME_ESTIMATED_COVERAGE = "EstimatedCoverage";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_COVERAGE)
  private String estimatedCoverage;

  public static final String SERIALIZED_NAME_ESTIMATED_NEW_COMMITMENT_UTILIZATION = "EstimatedNewCommitmentUtilization";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_NEW_COMMITMENT_UTILIZATION)
  private String estimatedNewCommitmentUtilization;

  public RecommendationDetailHourlyMetrics() {
  }

  public RecommendationDetailHourlyMetrics startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The period of time that you want the usage and costs for.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public RecommendationDetailHourlyMetrics estimatedOnDemandCost(String estimatedOnDemandCost) {
    this.estimatedOnDemandCost = estimatedOnDemandCost;
    return this;
  }

  /**
   * Get estimatedOnDemandCost
   * @return estimatedOnDemandCost
   */
  @javax.annotation.Nullable
  public String getEstimatedOnDemandCost() {
    return estimatedOnDemandCost;
  }

  public void setEstimatedOnDemandCost(String estimatedOnDemandCost) {
    this.estimatedOnDemandCost = estimatedOnDemandCost;
  }


  public RecommendationDetailHourlyMetrics currentCoverage(String currentCoverage) {
    this.currentCoverage = currentCoverage;
    return this;
  }

  /**
   * Get currentCoverage
   * @return currentCoverage
   */
  @javax.annotation.Nullable
  public String getCurrentCoverage() {
    return currentCoverage;
  }

  public void setCurrentCoverage(String currentCoverage) {
    this.currentCoverage = currentCoverage;
  }


  public RecommendationDetailHourlyMetrics estimatedCoverage(String estimatedCoverage) {
    this.estimatedCoverage = estimatedCoverage;
    return this;
  }

  /**
   * Get estimatedCoverage
   * @return estimatedCoverage
   */
  @javax.annotation.Nullable
  public String getEstimatedCoverage() {
    return estimatedCoverage;
  }

  public void setEstimatedCoverage(String estimatedCoverage) {
    this.estimatedCoverage = estimatedCoverage;
  }


  public RecommendationDetailHourlyMetrics estimatedNewCommitmentUtilization(String estimatedNewCommitmentUtilization) {
    this.estimatedNewCommitmentUtilization = estimatedNewCommitmentUtilization;
    return this;
  }

  /**
   * Get estimatedNewCommitmentUtilization
   * @return estimatedNewCommitmentUtilization
   */
  @javax.annotation.Nullable
  public String getEstimatedNewCommitmentUtilization() {
    return estimatedNewCommitmentUtilization;
  }

  public void setEstimatedNewCommitmentUtilization(String estimatedNewCommitmentUtilization) {
    this.estimatedNewCommitmentUtilization = estimatedNewCommitmentUtilization;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationDetailHourlyMetrics recommendationDetailHourlyMetrics = (RecommendationDetailHourlyMetrics) o;
    return Objects.equals(this.startTime, recommendationDetailHourlyMetrics.startTime) &&
        Objects.equals(this.estimatedOnDemandCost, recommendationDetailHourlyMetrics.estimatedOnDemandCost) &&
        Objects.equals(this.currentCoverage, recommendationDetailHourlyMetrics.currentCoverage) &&
        Objects.equals(this.estimatedCoverage, recommendationDetailHourlyMetrics.estimatedCoverage) &&
        Objects.equals(this.estimatedNewCommitmentUtilization, recommendationDetailHourlyMetrics.estimatedNewCommitmentUtilization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTime, estimatedOnDemandCost, currentCoverage, estimatedCoverage, estimatedNewCommitmentUtilization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationDetailHourlyMetrics {\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    estimatedOnDemandCost: ").append(toIndentedString(estimatedOnDemandCost)).append("\n");
    sb.append("    currentCoverage: ").append(toIndentedString(currentCoverage)).append("\n");
    sb.append("    estimatedCoverage: ").append(toIndentedString(estimatedCoverage)).append("\n");
    sb.append("    estimatedNewCommitmentUtilization: ").append(toIndentedString(estimatedNewCommitmentUtilization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StartTime");
    openapiFields.add("EstimatedOnDemandCost");
    openapiFields.add("CurrentCoverage");
    openapiFields.add("EstimatedCoverage");
    openapiFields.add("EstimatedNewCommitmentUtilization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationDetailHourlyMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationDetailHourlyMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationDetailHourlyMetrics is not found in the empty JSON string", RecommendationDetailHourlyMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationDetailHourlyMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationDetailHourlyMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) && !jsonObj.get("StartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartTime").toString()));
      }
      // validate the optional field `EstimatedOnDemandCost`
      if (jsonObj.get("EstimatedOnDemandCost") != null && !jsonObj.get("EstimatedOnDemandCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedOnDemandCost"));
      }
      // validate the optional field `CurrentCoverage`
      if (jsonObj.get("CurrentCoverage") != null && !jsonObj.get("CurrentCoverage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentCoverage"));
      }
      // validate the optional field `EstimatedCoverage`
      if (jsonObj.get("EstimatedCoverage") != null && !jsonObj.get("EstimatedCoverage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedCoverage"));
      }
      // validate the optional field `EstimatedNewCommitmentUtilization`
      if (jsonObj.get("EstimatedNewCommitmentUtilization") != null && !jsonObj.get("EstimatedNewCommitmentUtilization").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedNewCommitmentUtilization"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationDetailHourlyMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationDetailHourlyMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationDetailHourlyMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationDetailHourlyMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationDetailHourlyMetrics>() {
           @Override
           public void write(JsonWriter out, RecommendationDetailHourlyMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationDetailHourlyMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationDetailHourlyMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationDetailHourlyMetrics
   * @throws IOException if the JSON string is invalid with respect to RecommendationDetailHourlyMetrics
   */
  public static RecommendationDetailHourlyMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationDetailHourlyMetrics.class);
  }

  /**
   * Convert an instance of RecommendationDetailHourlyMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

