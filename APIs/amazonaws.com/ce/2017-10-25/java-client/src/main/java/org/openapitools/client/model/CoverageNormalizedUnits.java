/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The amount of instance usage, in normalized units. You can use normalized units to see your EC2 usage for multiple sizes of instances in a uniform way. For example, suppose that you run an xlarge instance and a 2xlarge instance. If you run both instances for the same amount of time, the 2xlarge instance uses twice as much of your reservation as the xlarge instance, even though both instances show only one instance-hour. When you use normalized units instead of instance-hours, the xlarge instance used 8 normalized units, and the 2xlarge instance used 16 normalized units.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html\&quot;&gt;Modifying Reserved Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CoverageNormalizedUnits {
  public static final String SERIALIZED_NAME_ON_DEMAND_NORMALIZED_UNITS = "OnDemandNormalizedUnits";
  @SerializedName(SERIALIZED_NAME_ON_DEMAND_NORMALIZED_UNITS)
  private String onDemandNormalizedUnits;

  public static final String SERIALIZED_NAME_RESERVED_NORMALIZED_UNITS = "ReservedNormalizedUnits";
  @SerializedName(SERIALIZED_NAME_RESERVED_NORMALIZED_UNITS)
  private String reservedNormalizedUnits;

  public static final String SERIALIZED_NAME_TOTAL_RUNNING_NORMALIZED_UNITS = "TotalRunningNormalizedUnits";
  @SerializedName(SERIALIZED_NAME_TOTAL_RUNNING_NORMALIZED_UNITS)
  private String totalRunningNormalizedUnits;

  public static final String SERIALIZED_NAME_COVERAGE_NORMALIZED_UNITS_PERCENTAGE = "CoverageNormalizedUnitsPercentage";
  @SerializedName(SERIALIZED_NAME_COVERAGE_NORMALIZED_UNITS_PERCENTAGE)
  private String coverageNormalizedUnitsPercentage;

  public CoverageNormalizedUnits() {
  }

  public CoverageNormalizedUnits onDemandNormalizedUnits(String onDemandNormalizedUnits) {
    this.onDemandNormalizedUnits = onDemandNormalizedUnits;
    return this;
  }

  /**
   * Get onDemandNormalizedUnits
   * @return onDemandNormalizedUnits
   */
  @javax.annotation.Nullable
  public String getOnDemandNormalizedUnits() {
    return onDemandNormalizedUnits;
  }

  public void setOnDemandNormalizedUnits(String onDemandNormalizedUnits) {
    this.onDemandNormalizedUnits = onDemandNormalizedUnits;
  }


  public CoverageNormalizedUnits reservedNormalizedUnits(String reservedNormalizedUnits) {
    this.reservedNormalizedUnits = reservedNormalizedUnits;
    return this;
  }

  /**
   * Get reservedNormalizedUnits
   * @return reservedNormalizedUnits
   */
  @javax.annotation.Nullable
  public String getReservedNormalizedUnits() {
    return reservedNormalizedUnits;
  }

  public void setReservedNormalizedUnits(String reservedNormalizedUnits) {
    this.reservedNormalizedUnits = reservedNormalizedUnits;
  }


  public CoverageNormalizedUnits totalRunningNormalizedUnits(String totalRunningNormalizedUnits) {
    this.totalRunningNormalizedUnits = totalRunningNormalizedUnits;
    return this;
  }

  /**
   * Get totalRunningNormalizedUnits
   * @return totalRunningNormalizedUnits
   */
  @javax.annotation.Nullable
  public String getTotalRunningNormalizedUnits() {
    return totalRunningNormalizedUnits;
  }

  public void setTotalRunningNormalizedUnits(String totalRunningNormalizedUnits) {
    this.totalRunningNormalizedUnits = totalRunningNormalizedUnits;
  }


  public CoverageNormalizedUnits coverageNormalizedUnitsPercentage(String coverageNormalizedUnitsPercentage) {
    this.coverageNormalizedUnitsPercentage = coverageNormalizedUnitsPercentage;
    return this;
  }

  /**
   * Get coverageNormalizedUnitsPercentage
   * @return coverageNormalizedUnitsPercentage
   */
  @javax.annotation.Nullable
  public String getCoverageNormalizedUnitsPercentage() {
    return coverageNormalizedUnitsPercentage;
  }

  public void setCoverageNormalizedUnitsPercentage(String coverageNormalizedUnitsPercentage) {
    this.coverageNormalizedUnitsPercentage = coverageNormalizedUnitsPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoverageNormalizedUnits coverageNormalizedUnits = (CoverageNormalizedUnits) o;
    return Objects.equals(this.onDemandNormalizedUnits, coverageNormalizedUnits.onDemandNormalizedUnits) &&
        Objects.equals(this.reservedNormalizedUnits, coverageNormalizedUnits.reservedNormalizedUnits) &&
        Objects.equals(this.totalRunningNormalizedUnits, coverageNormalizedUnits.totalRunningNormalizedUnits) &&
        Objects.equals(this.coverageNormalizedUnitsPercentage, coverageNormalizedUnits.coverageNormalizedUnitsPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onDemandNormalizedUnits, reservedNormalizedUnits, totalRunningNormalizedUnits, coverageNormalizedUnitsPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoverageNormalizedUnits {\n");
    sb.append("    onDemandNormalizedUnits: ").append(toIndentedString(onDemandNormalizedUnits)).append("\n");
    sb.append("    reservedNormalizedUnits: ").append(toIndentedString(reservedNormalizedUnits)).append("\n");
    sb.append("    totalRunningNormalizedUnits: ").append(toIndentedString(totalRunningNormalizedUnits)).append("\n");
    sb.append("    coverageNormalizedUnitsPercentage: ").append(toIndentedString(coverageNormalizedUnitsPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OnDemandNormalizedUnits");
    openapiFields.add("ReservedNormalizedUnits");
    openapiFields.add("TotalRunningNormalizedUnits");
    openapiFields.add("CoverageNormalizedUnitsPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CoverageNormalizedUnits
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoverageNormalizedUnits.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoverageNormalizedUnits is not found in the empty JSON string", CoverageNormalizedUnits.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoverageNormalizedUnits.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoverageNormalizedUnits` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `OnDemandNormalizedUnits`
      if (jsonObj.get("OnDemandNormalizedUnits") != null && !jsonObj.get("OnDemandNormalizedUnits").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OnDemandNormalizedUnits"));
      }
      // validate the optional field `ReservedNormalizedUnits`
      if (jsonObj.get("ReservedNormalizedUnits") != null && !jsonObj.get("ReservedNormalizedUnits").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReservedNormalizedUnits"));
      }
      // validate the optional field `TotalRunningNormalizedUnits`
      if (jsonObj.get("TotalRunningNormalizedUnits") != null && !jsonObj.get("TotalRunningNormalizedUnits").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalRunningNormalizedUnits"));
      }
      // validate the optional field `CoverageNormalizedUnitsPercentage`
      if (jsonObj.get("CoverageNormalizedUnitsPercentage") != null && !jsonObj.get("CoverageNormalizedUnitsPercentage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CoverageNormalizedUnitsPercentage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoverageNormalizedUnits.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoverageNormalizedUnits' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoverageNormalizedUnits> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoverageNormalizedUnits.class));

       return (TypeAdapter<T>) new TypeAdapter<CoverageNormalizedUnits>() {
           @Override
           public void write(JsonWriter out, CoverageNormalizedUnits value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoverageNormalizedUnits read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CoverageNormalizedUnits given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CoverageNormalizedUnits
   * @throws IOException if the JSON string is invalid with respect to CoverageNormalizedUnits
   */
  public static CoverageNormalizedUnits fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoverageNormalizedUnits.class);
  }

  /**
   * Convert an instance of CoverageNormalizedUnits to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

