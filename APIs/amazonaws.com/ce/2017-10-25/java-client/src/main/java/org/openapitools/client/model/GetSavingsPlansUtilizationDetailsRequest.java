/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetSavingsPlansCoverageRequestTimePeriod;
import org.openapitools.client.model.GetSavingsPlansUtilizationDetailsRequestFilter;
import org.openapitools.client.model.GetSavingsPlansUtilizationDetailsRequestSortBy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSavingsPlansUtilizationDetailsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSavingsPlansUtilizationDetailsRequest {
  public static final String SERIALIZED_NAME_TIME_PERIOD = "TimePeriod";
  @SerializedName(SERIALIZED_NAME_TIME_PERIOD)
  private GetSavingsPlansCoverageRequestTimePeriod timePeriod;

  public static final String SERIALIZED_NAME_FILTER = "Filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private GetSavingsPlansUtilizationDetailsRequestFilter filter;

  public static final String SERIALIZED_NAME_DATA_TYPE = "DataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private List dataType;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_SORT_BY = "SortBy";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  private GetSavingsPlansUtilizationDetailsRequestSortBy sortBy;

  public GetSavingsPlansUtilizationDetailsRequest() {
  }

  public GetSavingsPlansUtilizationDetailsRequest timePeriod(GetSavingsPlansCoverageRequestTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
    return this;
  }

  /**
   * Get timePeriod
   * @return timePeriod
   */
  @javax.annotation.Nonnull
  public GetSavingsPlansCoverageRequestTimePeriod getTimePeriod() {
    return timePeriod;
  }

  public void setTimePeriod(GetSavingsPlansCoverageRequestTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
  }


  public GetSavingsPlansUtilizationDetailsRequest filter(GetSavingsPlansUtilizationDetailsRequestFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public GetSavingsPlansUtilizationDetailsRequestFilter getFilter() {
    return filter;
  }

  public void setFilter(GetSavingsPlansUtilizationDetailsRequestFilter filter) {
    this.filter = filter;
  }


  public GetSavingsPlansUtilizationDetailsRequest dataType(List dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Get dataType
   * @return dataType
   */
  @javax.annotation.Nullable
  public List getDataType() {
    return dataType;
  }

  public void setDataType(List dataType) {
    this.dataType = dataType;
  }


  public GetSavingsPlansUtilizationDetailsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public GetSavingsPlansUtilizationDetailsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public GetSavingsPlansUtilizationDetailsRequest sortBy(GetSavingsPlansUtilizationDetailsRequestSortBy sortBy) {
    this.sortBy = sortBy;
    return this;
  }

  /**
   * Get sortBy
   * @return sortBy
   */
  @javax.annotation.Nullable
  public GetSavingsPlansUtilizationDetailsRequestSortBy getSortBy() {
    return sortBy;
  }

  public void setSortBy(GetSavingsPlansUtilizationDetailsRequestSortBy sortBy) {
    this.sortBy = sortBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSavingsPlansUtilizationDetailsRequest getSavingsPlansUtilizationDetailsRequest = (GetSavingsPlansUtilizationDetailsRequest) o;
    return Objects.equals(this.timePeriod, getSavingsPlansUtilizationDetailsRequest.timePeriod) &&
        Objects.equals(this.filter, getSavingsPlansUtilizationDetailsRequest.filter) &&
        Objects.equals(this.dataType, getSavingsPlansUtilizationDetailsRequest.dataType) &&
        Objects.equals(this.nextToken, getSavingsPlansUtilizationDetailsRequest.nextToken) &&
        Objects.equals(this.maxResults, getSavingsPlansUtilizationDetailsRequest.maxResults) &&
        Objects.equals(this.sortBy, getSavingsPlansUtilizationDetailsRequest.sortBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timePeriod, filter, dataType, nextToken, maxResults, sortBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSavingsPlansUtilizationDetailsRequest {\n");
    sb.append("    timePeriod: ").append(toIndentedString(timePeriod)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TimePeriod");
    openapiFields.add("Filter");
    openapiFields.add("DataType");
    openapiFields.add("NextToken");
    openapiFields.add("MaxResults");
    openapiFields.add("SortBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TimePeriod");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSavingsPlansUtilizationDetailsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSavingsPlansUtilizationDetailsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSavingsPlansUtilizationDetailsRequest is not found in the empty JSON string", GetSavingsPlansUtilizationDetailsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSavingsPlansUtilizationDetailsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSavingsPlansUtilizationDetailsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSavingsPlansUtilizationDetailsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TimePeriod`
      GetSavingsPlansCoverageRequestTimePeriod.validateJsonElement(jsonObj.get("TimePeriod"));
      // validate the optional field `Filter`
      if (jsonObj.get("Filter") != null && !jsonObj.get("Filter").isJsonNull()) {
        GetSavingsPlansUtilizationDetailsRequestFilter.validateJsonElement(jsonObj.get("Filter"));
      }
      // validate the optional field `DataType`
      if (jsonObj.get("DataType") != null && !jsonObj.get("DataType").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DataType"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
      // validate the optional field `MaxResults`
      if (jsonObj.get("MaxResults") != null && !jsonObj.get("MaxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxResults"));
      }
      // validate the optional field `SortBy`
      if (jsonObj.get("SortBy") != null && !jsonObj.get("SortBy").isJsonNull()) {
        GetSavingsPlansUtilizationDetailsRequestSortBy.validateJsonElement(jsonObj.get("SortBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSavingsPlansUtilizationDetailsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSavingsPlansUtilizationDetailsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSavingsPlansUtilizationDetailsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSavingsPlansUtilizationDetailsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSavingsPlansUtilizationDetailsRequest>() {
           @Override
           public void write(JsonWriter out, GetSavingsPlansUtilizationDetailsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSavingsPlansUtilizationDetailsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSavingsPlansUtilizationDetailsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSavingsPlansUtilizationDetailsRequest
   * @throws IOException if the JSON string is invalid with respect to GetSavingsPlansUtilizationDetailsRequest
   */
  public static GetSavingsPlansUtilizationDetailsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSavingsPlansUtilizationDetailsRequest.class);
  }

  /**
   * Convert an instance of GetSavingsPlansUtilizationDetailsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

