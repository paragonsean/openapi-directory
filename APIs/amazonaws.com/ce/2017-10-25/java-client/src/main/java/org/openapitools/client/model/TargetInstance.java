/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TargetInstanceExpectedResourceUtilization;
import org.openapitools.client.model.TargetInstanceResourceDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details on recommended instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TargetInstance {
  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_COST = "EstimatedMonthlyCost";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_COST)
  private String estimatedMonthlyCost;

  public static final String SERIALIZED_NAME_ESTIMATED_MONTHLY_SAVINGS = "EstimatedMonthlySavings";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MONTHLY_SAVINGS)
  private String estimatedMonthlySavings;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DEFAULT_TARGET_INSTANCE = "DefaultTargetInstance";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TARGET_INSTANCE)
  private Boolean defaultTargetInstance;

  public static final String SERIALIZED_NAME_RESOURCE_DETAILS = "ResourceDetails";
  @SerializedName(SERIALIZED_NAME_RESOURCE_DETAILS)
  private TargetInstanceResourceDetails resourceDetails;

  public static final String SERIALIZED_NAME_EXPECTED_RESOURCE_UTILIZATION = "ExpectedResourceUtilization";
  @SerializedName(SERIALIZED_NAME_EXPECTED_RESOURCE_UTILIZATION)
  private TargetInstanceExpectedResourceUtilization expectedResourceUtilization;

  public static final String SERIALIZED_NAME_PLATFORM_DIFFERENCES = "PlatformDifferences";
  @SerializedName(SERIALIZED_NAME_PLATFORM_DIFFERENCES)
  private List platformDifferences;

  public TargetInstance() {
  }

  public TargetInstance estimatedMonthlyCost(String estimatedMonthlyCost) {
    this.estimatedMonthlyCost = estimatedMonthlyCost;
    return this;
  }

  /**
   * Get estimatedMonthlyCost
   * @return estimatedMonthlyCost
   */
  @javax.annotation.Nullable
  public String getEstimatedMonthlyCost() {
    return estimatedMonthlyCost;
  }

  public void setEstimatedMonthlyCost(String estimatedMonthlyCost) {
    this.estimatedMonthlyCost = estimatedMonthlyCost;
  }


  public TargetInstance estimatedMonthlySavings(String estimatedMonthlySavings) {
    this.estimatedMonthlySavings = estimatedMonthlySavings;
    return this;
  }

  /**
   * Get estimatedMonthlySavings
   * @return estimatedMonthlySavings
   */
  @javax.annotation.Nullable
  public String getEstimatedMonthlySavings() {
    return estimatedMonthlySavings;
  }

  public void setEstimatedMonthlySavings(String estimatedMonthlySavings) {
    this.estimatedMonthlySavings = estimatedMonthlySavings;
  }


  public TargetInstance currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public TargetInstance defaultTargetInstance(Boolean defaultTargetInstance) {
    this.defaultTargetInstance = defaultTargetInstance;
    return this;
  }

  /**
   * Get defaultTargetInstance
   * @return defaultTargetInstance
   */
  @javax.annotation.Nullable
  public Boolean getDefaultTargetInstance() {
    return defaultTargetInstance;
  }

  public void setDefaultTargetInstance(Boolean defaultTargetInstance) {
    this.defaultTargetInstance = defaultTargetInstance;
  }


  public TargetInstance resourceDetails(TargetInstanceResourceDetails resourceDetails) {
    this.resourceDetails = resourceDetails;
    return this;
  }

  /**
   * Get resourceDetails
   * @return resourceDetails
   */
  @javax.annotation.Nullable
  public TargetInstanceResourceDetails getResourceDetails() {
    return resourceDetails;
  }

  public void setResourceDetails(TargetInstanceResourceDetails resourceDetails) {
    this.resourceDetails = resourceDetails;
  }


  public TargetInstance expectedResourceUtilization(TargetInstanceExpectedResourceUtilization expectedResourceUtilization) {
    this.expectedResourceUtilization = expectedResourceUtilization;
    return this;
  }

  /**
   * Get expectedResourceUtilization
   * @return expectedResourceUtilization
   */
  @javax.annotation.Nullable
  public TargetInstanceExpectedResourceUtilization getExpectedResourceUtilization() {
    return expectedResourceUtilization;
  }

  public void setExpectedResourceUtilization(TargetInstanceExpectedResourceUtilization expectedResourceUtilization) {
    this.expectedResourceUtilization = expectedResourceUtilization;
  }


  public TargetInstance platformDifferences(List platformDifferences) {
    this.platformDifferences = platformDifferences;
    return this;
  }

  /**
   * Get platformDifferences
   * @return platformDifferences
   */
  @javax.annotation.Nullable
  public List getPlatformDifferences() {
    return platformDifferences;
  }

  public void setPlatformDifferences(List platformDifferences) {
    this.platformDifferences = platformDifferences;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetInstance targetInstance = (TargetInstance) o;
    return Objects.equals(this.estimatedMonthlyCost, targetInstance.estimatedMonthlyCost) &&
        Objects.equals(this.estimatedMonthlySavings, targetInstance.estimatedMonthlySavings) &&
        Objects.equals(this.currencyCode, targetInstance.currencyCode) &&
        Objects.equals(this.defaultTargetInstance, targetInstance.defaultTargetInstance) &&
        Objects.equals(this.resourceDetails, targetInstance.resourceDetails) &&
        Objects.equals(this.expectedResourceUtilization, targetInstance.expectedResourceUtilization) &&
        Objects.equals(this.platformDifferences, targetInstance.platformDifferences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(estimatedMonthlyCost, estimatedMonthlySavings, currencyCode, defaultTargetInstance, resourceDetails, expectedResourceUtilization, platformDifferences);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetInstance {\n");
    sb.append("    estimatedMonthlyCost: ").append(toIndentedString(estimatedMonthlyCost)).append("\n");
    sb.append("    estimatedMonthlySavings: ").append(toIndentedString(estimatedMonthlySavings)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    defaultTargetInstance: ").append(toIndentedString(defaultTargetInstance)).append("\n");
    sb.append("    resourceDetails: ").append(toIndentedString(resourceDetails)).append("\n");
    sb.append("    expectedResourceUtilization: ").append(toIndentedString(expectedResourceUtilization)).append("\n");
    sb.append("    platformDifferences: ").append(toIndentedString(platformDifferences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EstimatedMonthlyCost");
    openapiFields.add("EstimatedMonthlySavings");
    openapiFields.add("CurrencyCode");
    openapiFields.add("DefaultTargetInstance");
    openapiFields.add("ResourceDetails");
    openapiFields.add("ExpectedResourceUtilization");
    openapiFields.add("PlatformDifferences");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetInstance is not found in the empty JSON string", TargetInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EstimatedMonthlyCost`
      if (jsonObj.get("EstimatedMonthlyCost") != null && !jsonObj.get("EstimatedMonthlyCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedMonthlyCost"));
      }
      // validate the optional field `EstimatedMonthlySavings`
      if (jsonObj.get("EstimatedMonthlySavings") != null && !jsonObj.get("EstimatedMonthlySavings").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EstimatedMonthlySavings"));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      // validate the optional field `DefaultTargetInstance`
      if (jsonObj.get("DefaultTargetInstance") != null && !jsonObj.get("DefaultTargetInstance").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DefaultTargetInstance"));
      }
      // validate the optional field `ResourceDetails`
      if (jsonObj.get("ResourceDetails") != null && !jsonObj.get("ResourceDetails").isJsonNull()) {
        TargetInstanceResourceDetails.validateJsonElement(jsonObj.get("ResourceDetails"));
      }
      // validate the optional field `ExpectedResourceUtilization`
      if (jsonObj.get("ExpectedResourceUtilization") != null && !jsonObj.get("ExpectedResourceUtilization").isJsonNull()) {
        TargetInstanceExpectedResourceUtilization.validateJsonElement(jsonObj.get("ExpectedResourceUtilization"));
      }
      // validate the optional field `PlatformDifferences`
      if (jsonObj.get("PlatformDifferences") != null && !jsonObj.get("PlatformDifferences").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PlatformDifferences"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetInstance>() {
           @Override
           public void write(JsonWriter out, TargetInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetInstance
   * @throws IOException if the JSON string is invalid with respect to TargetInstance
   */
  public static TargetInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetInstance.class);
  }

  /**
   * Convert an instance of TargetInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

