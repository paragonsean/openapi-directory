/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The measurement of how well you&#39;re using your existing Savings Plans.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SavingsPlansUtilization {
  public static final String SERIALIZED_NAME_TOTAL_COMMITMENT = "TotalCommitment";
  @SerializedName(SERIALIZED_NAME_TOTAL_COMMITMENT)
  private String totalCommitment;

  public static final String SERIALIZED_NAME_USED_COMMITMENT = "UsedCommitment";
  @SerializedName(SERIALIZED_NAME_USED_COMMITMENT)
  private String usedCommitment;

  public static final String SERIALIZED_NAME_UNUSED_COMMITMENT = "UnusedCommitment";
  @SerializedName(SERIALIZED_NAME_UNUSED_COMMITMENT)
  private String unusedCommitment;

  public static final String SERIALIZED_NAME_UTILIZATION_PERCENTAGE = "UtilizationPercentage";
  @SerializedName(SERIALIZED_NAME_UTILIZATION_PERCENTAGE)
  private String utilizationPercentage;

  public SavingsPlansUtilization() {
  }

  public SavingsPlansUtilization totalCommitment(String totalCommitment) {
    this.totalCommitment = totalCommitment;
    return this;
  }

  /**
   * Get totalCommitment
   * @return totalCommitment
   */
  @javax.annotation.Nullable
  public String getTotalCommitment() {
    return totalCommitment;
  }

  public void setTotalCommitment(String totalCommitment) {
    this.totalCommitment = totalCommitment;
  }


  public SavingsPlansUtilization usedCommitment(String usedCommitment) {
    this.usedCommitment = usedCommitment;
    return this;
  }

  /**
   * Get usedCommitment
   * @return usedCommitment
   */
  @javax.annotation.Nullable
  public String getUsedCommitment() {
    return usedCommitment;
  }

  public void setUsedCommitment(String usedCommitment) {
    this.usedCommitment = usedCommitment;
  }


  public SavingsPlansUtilization unusedCommitment(String unusedCommitment) {
    this.unusedCommitment = unusedCommitment;
    return this;
  }

  /**
   * Get unusedCommitment
   * @return unusedCommitment
   */
  @javax.annotation.Nullable
  public String getUnusedCommitment() {
    return unusedCommitment;
  }

  public void setUnusedCommitment(String unusedCommitment) {
    this.unusedCommitment = unusedCommitment;
  }


  public SavingsPlansUtilization utilizationPercentage(String utilizationPercentage) {
    this.utilizationPercentage = utilizationPercentage;
    return this;
  }

  /**
   * Get utilizationPercentage
   * @return utilizationPercentage
   */
  @javax.annotation.Nullable
  public String getUtilizationPercentage() {
    return utilizationPercentage;
  }

  public void setUtilizationPercentage(String utilizationPercentage) {
    this.utilizationPercentage = utilizationPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SavingsPlansUtilization savingsPlansUtilization = (SavingsPlansUtilization) o;
    return Objects.equals(this.totalCommitment, savingsPlansUtilization.totalCommitment) &&
        Objects.equals(this.usedCommitment, savingsPlansUtilization.usedCommitment) &&
        Objects.equals(this.unusedCommitment, savingsPlansUtilization.unusedCommitment) &&
        Objects.equals(this.utilizationPercentage, savingsPlansUtilization.utilizationPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalCommitment, usedCommitment, unusedCommitment, utilizationPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SavingsPlansUtilization {\n");
    sb.append("    totalCommitment: ").append(toIndentedString(totalCommitment)).append("\n");
    sb.append("    usedCommitment: ").append(toIndentedString(usedCommitment)).append("\n");
    sb.append("    unusedCommitment: ").append(toIndentedString(unusedCommitment)).append("\n");
    sb.append("    utilizationPercentage: ").append(toIndentedString(utilizationPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TotalCommitment");
    openapiFields.add("UsedCommitment");
    openapiFields.add("UnusedCommitment");
    openapiFields.add("UtilizationPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SavingsPlansUtilization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SavingsPlansUtilization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SavingsPlansUtilization is not found in the empty JSON string", SavingsPlansUtilization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SavingsPlansUtilization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SavingsPlansUtilization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TotalCommitment`
      if (jsonObj.get("TotalCommitment") != null && !jsonObj.get("TotalCommitment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalCommitment"));
      }
      // validate the optional field `UsedCommitment`
      if (jsonObj.get("UsedCommitment") != null && !jsonObj.get("UsedCommitment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UsedCommitment"));
      }
      // validate the optional field `UnusedCommitment`
      if (jsonObj.get("UnusedCommitment") != null && !jsonObj.get("UnusedCommitment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UnusedCommitment"));
      }
      // validate the optional field `UtilizationPercentage`
      if (jsonObj.get("UtilizationPercentage") != null && !jsonObj.get("UtilizationPercentage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UtilizationPercentage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SavingsPlansUtilization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SavingsPlansUtilization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SavingsPlansUtilization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SavingsPlansUtilization.class));

       return (TypeAdapter<T>) new TypeAdapter<SavingsPlansUtilization>() {
           @Override
           public void write(JsonWriter out, SavingsPlansUtilization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SavingsPlansUtilization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SavingsPlansUtilization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SavingsPlansUtilization
   * @throws IOException if the JSON string is invalid with respect to SavingsPlansUtilization
   */
  public static SavingsPlansUtilization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SavingsPlansUtilization.class);
  }

  /**
   * Convert an instance of SavingsPlansUtilization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

