/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CostCategoryRuleInheritedValue;
import org.openapitools.client.model.CostCategoryRuleRule;
import org.openapitools.client.model.CostCategoryRuleType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Rules are processed in order. If there are multiple rules that match the line item, then the first rule to match is used to determine that Cost Category value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CostCategoryRule {
  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_RULE = "Rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private CostCategoryRuleRule rule;

  public static final String SERIALIZED_NAME_INHERITED_VALUE = "InheritedValue";
  @SerializedName(SERIALIZED_NAME_INHERITED_VALUE)
  private CostCategoryRuleInheritedValue inheritedValue;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private CostCategoryRuleType type;

  public CostCategoryRule() {
  }

  public CostCategoryRule value(String value) {
    this.value = value;
    return this;
  }

  /**
   * The default value for the cost category.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public CostCategoryRule rule(CostCategoryRuleRule rule) {
    this.rule = rule;
    return this;
  }

  /**
   * Get rule
   * @return rule
   */
  @javax.annotation.Nullable
  public CostCategoryRuleRule getRule() {
    return rule;
  }

  public void setRule(CostCategoryRuleRule rule) {
    this.rule = rule;
  }


  public CostCategoryRule inheritedValue(CostCategoryRuleInheritedValue inheritedValue) {
    this.inheritedValue = inheritedValue;
    return this;
  }

  /**
   * Get inheritedValue
   * @return inheritedValue
   */
  @javax.annotation.Nullable
  public CostCategoryRuleInheritedValue getInheritedValue() {
    return inheritedValue;
  }

  public void setInheritedValue(CostCategoryRuleInheritedValue inheritedValue) {
    this.inheritedValue = inheritedValue;
  }


  public CostCategoryRule type(CostCategoryRuleType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public CostCategoryRuleType getType() {
    return type;
  }

  public void setType(CostCategoryRuleType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CostCategoryRule costCategoryRule = (CostCategoryRule) o;
    return Objects.equals(this.value, costCategoryRule.value) &&
        Objects.equals(this.rule, costCategoryRule.rule) &&
        Objects.equals(this.inheritedValue, costCategoryRule.inheritedValue) &&
        Objects.equals(this.type, costCategoryRule.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, rule, inheritedValue, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CostCategoryRule {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    inheritedValue: ").append(toIndentedString(inheritedValue)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Value");
    openapiFields.add("Rule");
    openapiFields.add("InheritedValue");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CostCategoryRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CostCategoryRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CostCategoryRule is not found in the empty JSON string", CostCategoryRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CostCategoryRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CostCategoryRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) && !jsonObj.get("Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Value").toString()));
      }
      // validate the optional field `Rule`
      if (jsonObj.get("Rule") != null && !jsonObj.get("Rule").isJsonNull()) {
        CostCategoryRuleRule.validateJsonElement(jsonObj.get("Rule"));
      }
      // validate the optional field `InheritedValue`
      if (jsonObj.get("InheritedValue") != null && !jsonObj.get("InheritedValue").isJsonNull()) {
        CostCategoryRuleInheritedValue.validateJsonElement(jsonObj.get("InheritedValue"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        CostCategoryRuleType.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CostCategoryRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CostCategoryRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CostCategoryRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CostCategoryRule.class));

       return (TypeAdapter<T>) new TypeAdapter<CostCategoryRule>() {
           @Override
           public void write(JsonWriter out, CostCategoryRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CostCategoryRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CostCategoryRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CostCategoryRule
   * @throws IOException if the JSON string is invalid with respect to CostCategoryRule
   */
  public static CostCategoryRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CostCategoryRule.class);
  }

  /**
   * Convert an instance of CostCategoryRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

