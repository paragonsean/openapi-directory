/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AnomalyFeedbackType;
import org.openapitools.client.model.GetAnomaliesRequestDateInterval;
import org.openapitools.client.model.GetAnomaliesRequestTotalImpact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAnomaliesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetAnomaliesRequest {
  public static final String SERIALIZED_NAME_MONITOR_ARN = "MonitorArn";
  @SerializedName(SERIALIZED_NAME_MONITOR_ARN)
  private String monitorArn;

  public static final String SERIALIZED_NAME_DATE_INTERVAL = "DateInterval";
  @SerializedName(SERIALIZED_NAME_DATE_INTERVAL)
  private GetAnomaliesRequestDateInterval dateInterval;

  public static final String SERIALIZED_NAME_FEEDBACK = "Feedback";
  @SerializedName(SERIALIZED_NAME_FEEDBACK)
  private AnomalyFeedbackType feedback;

  public static final String SERIALIZED_NAME_TOTAL_IMPACT = "TotalImpact";
  @SerializedName(SERIALIZED_NAME_TOTAL_IMPACT)
  private GetAnomaliesRequestTotalImpact totalImpact;

  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "NextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public GetAnomaliesRequest() {
  }

  public GetAnomaliesRequest monitorArn(String monitorArn) {
    this.monitorArn = monitorArn;
    return this;
  }

  /**
   * Get monitorArn
   * @return monitorArn
   */
  @javax.annotation.Nullable
  public String getMonitorArn() {
    return monitorArn;
  }

  public void setMonitorArn(String monitorArn) {
    this.monitorArn = monitorArn;
  }


  public GetAnomaliesRequest dateInterval(GetAnomaliesRequestDateInterval dateInterval) {
    this.dateInterval = dateInterval;
    return this;
  }

  /**
   * Get dateInterval
   * @return dateInterval
   */
  @javax.annotation.Nonnull
  public GetAnomaliesRequestDateInterval getDateInterval() {
    return dateInterval;
  }

  public void setDateInterval(GetAnomaliesRequestDateInterval dateInterval) {
    this.dateInterval = dateInterval;
  }


  public GetAnomaliesRequest feedback(AnomalyFeedbackType feedback) {
    this.feedback = feedback;
    return this;
  }

  /**
   * Get feedback
   * @return feedback
   */
  @javax.annotation.Nullable
  public AnomalyFeedbackType getFeedback() {
    return feedback;
  }

  public void setFeedback(AnomalyFeedbackType feedback) {
    this.feedback = feedback;
  }


  public GetAnomaliesRequest totalImpact(GetAnomaliesRequestTotalImpact totalImpact) {
    this.totalImpact = totalImpact;
    return this;
  }

  /**
   * Get totalImpact
   * @return totalImpact
   */
  @javax.annotation.Nullable
  public GetAnomaliesRequestTotalImpact getTotalImpact() {
    return totalImpact;
  }

  public void setTotalImpact(GetAnomaliesRequestTotalImpact totalImpact) {
    this.totalImpact = totalImpact;
  }


  public GetAnomaliesRequest nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * Get nextPageToken
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public GetAnomaliesRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAnomaliesRequest getAnomaliesRequest = (GetAnomaliesRequest) o;
    return Objects.equals(this.monitorArn, getAnomaliesRequest.monitorArn) &&
        Objects.equals(this.dateInterval, getAnomaliesRequest.dateInterval) &&
        Objects.equals(this.feedback, getAnomaliesRequest.feedback) &&
        Objects.equals(this.totalImpact, getAnomaliesRequest.totalImpact) &&
        Objects.equals(this.nextPageToken, getAnomaliesRequest.nextPageToken) &&
        Objects.equals(this.maxResults, getAnomaliesRequest.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monitorArn, dateInterval, feedback, totalImpact, nextPageToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAnomaliesRequest {\n");
    sb.append("    monitorArn: ").append(toIndentedString(monitorArn)).append("\n");
    sb.append("    dateInterval: ").append(toIndentedString(dateInterval)).append("\n");
    sb.append("    feedback: ").append(toIndentedString(feedback)).append("\n");
    sb.append("    totalImpact: ").append(toIndentedString(totalImpact)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MonitorArn");
    openapiFields.add("DateInterval");
    openapiFields.add("Feedback");
    openapiFields.add("TotalImpact");
    openapiFields.add("NextPageToken");
    openapiFields.add("MaxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DateInterval");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAnomaliesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAnomaliesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAnomaliesRequest is not found in the empty JSON string", GetAnomaliesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAnomaliesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAnomaliesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetAnomaliesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MonitorArn`
      if (jsonObj.get("MonitorArn") != null && !jsonObj.get("MonitorArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MonitorArn"));
      }
      // validate the required field `DateInterval`
      GetAnomaliesRequestDateInterval.validateJsonElement(jsonObj.get("DateInterval"));
      // validate the optional field `Feedback`
      if (jsonObj.get("Feedback") != null && !jsonObj.get("Feedback").isJsonNull()) {
        AnomalyFeedbackType.validateJsonElement(jsonObj.get("Feedback"));
      }
      // validate the optional field `TotalImpact`
      if (jsonObj.get("TotalImpact") != null && !jsonObj.get("TotalImpact").isJsonNull()) {
        GetAnomaliesRequestTotalImpact.validateJsonElement(jsonObj.get("TotalImpact"));
      }
      // validate the optional field `NextPageToken`
      if (jsonObj.get("NextPageToken") != null && !jsonObj.get("NextPageToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextPageToken"));
      }
      // validate the optional field `MaxResults`
      if (jsonObj.get("MaxResults") != null && !jsonObj.get("MaxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxResults"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAnomaliesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAnomaliesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAnomaliesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAnomaliesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAnomaliesRequest>() {
           @Override
           public void write(JsonWriter out, GetAnomaliesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAnomaliesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAnomaliesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAnomaliesRequest
   * @throws IOException if the JSON string is invalid with respect to GetAnomaliesRequest
   */
  public static GetAnomaliesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAnomaliesRequest.class);
  }

  /**
   * Convert an instance of GetAnomaliesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

