/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnomalySubscriptionFrequency;
import org.openapitools.client.model.AnomalySubscriptionThresholdExpression;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAnomalySubscriptionRequestAnomalySubscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAnomalySubscriptionRequestAnomalySubscription {
  public static final String SERIALIZED_NAME_SUBSCRIPTION_ARN = "SubscriptionArn";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ARN)
  private String subscriptionArn;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_MONITOR_ARN_LIST = "MonitorArnList";
  @SerializedName(SERIALIZED_NAME_MONITOR_ARN_LIST)
  private List monitorArnList;

  public static final String SERIALIZED_NAME_SUBSCRIBERS = "Subscribers";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBERS)
  private List subscribers;

  public static final String SERIALIZED_NAME_THRESHOLD = "Threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private Double threshold;

  public static final String SERIALIZED_NAME_FREQUENCY = "Frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private AnomalySubscriptionFrequency frequency;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_NAME = "SubscriptionName";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_NAME)
  private String subscriptionName;

  public static final String SERIALIZED_NAME_THRESHOLD_EXPRESSION = "ThresholdExpression";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_EXPRESSION)
  private AnomalySubscriptionThresholdExpression thresholdExpression;

  public CreateAnomalySubscriptionRequestAnomalySubscription() {
  }

  public CreateAnomalySubscriptionRequestAnomalySubscription subscriptionArn(String subscriptionArn) {
    this.subscriptionArn = subscriptionArn;
    return this;
  }

  /**
   * Get subscriptionArn
   * @return subscriptionArn
   */
  @javax.annotation.Nullable
  public String getSubscriptionArn() {
    return subscriptionArn;
  }

  public void setSubscriptionArn(String subscriptionArn) {
    this.subscriptionArn = subscriptionArn;
  }


  public CreateAnomalySubscriptionRequestAnomalySubscription accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CreateAnomalySubscriptionRequestAnomalySubscription monitorArnList(List monitorArnList) {
    this.monitorArnList = monitorArnList;
    return this;
  }

  /**
   * Get monitorArnList
   * @return monitorArnList
   */
  @javax.annotation.Nonnull
  public List getMonitorArnList() {
    return monitorArnList;
  }

  public void setMonitorArnList(List monitorArnList) {
    this.monitorArnList = monitorArnList;
  }


  public CreateAnomalySubscriptionRequestAnomalySubscription subscribers(List subscribers) {
    this.subscribers = subscribers;
    return this;
  }

  /**
   * Get subscribers
   * @return subscribers
   */
  @javax.annotation.Nonnull
  public List getSubscribers() {
    return subscribers;
  }

  public void setSubscribers(List subscribers) {
    this.subscribers = subscribers;
  }


  public CreateAnomalySubscriptionRequestAnomalySubscription threshold(Double threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Get threshold
   * @return threshold
   */
  @javax.annotation.Nullable
  public Double getThreshold() {
    return threshold;
  }

  public void setThreshold(Double threshold) {
    this.threshold = threshold;
  }


  public CreateAnomalySubscriptionRequestAnomalySubscription frequency(AnomalySubscriptionFrequency frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nonnull
  public AnomalySubscriptionFrequency getFrequency() {
    return frequency;
  }

  public void setFrequency(AnomalySubscriptionFrequency frequency) {
    this.frequency = frequency;
  }


  public CreateAnomalySubscriptionRequestAnomalySubscription subscriptionName(String subscriptionName) {
    this.subscriptionName = subscriptionName;
    return this;
  }

  /**
   * Get subscriptionName
   * @return subscriptionName
   */
  @javax.annotation.Nonnull
  public String getSubscriptionName() {
    return subscriptionName;
  }

  public void setSubscriptionName(String subscriptionName) {
    this.subscriptionName = subscriptionName;
  }


  public CreateAnomalySubscriptionRequestAnomalySubscription thresholdExpression(AnomalySubscriptionThresholdExpression thresholdExpression) {
    this.thresholdExpression = thresholdExpression;
    return this;
  }

  /**
   * Get thresholdExpression
   * @return thresholdExpression
   */
  @javax.annotation.Nullable
  public AnomalySubscriptionThresholdExpression getThresholdExpression() {
    return thresholdExpression;
  }

  public void setThresholdExpression(AnomalySubscriptionThresholdExpression thresholdExpression) {
    this.thresholdExpression = thresholdExpression;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnomalySubscriptionRequestAnomalySubscription createAnomalySubscriptionRequestAnomalySubscription = (CreateAnomalySubscriptionRequestAnomalySubscription) o;
    return Objects.equals(this.subscriptionArn, createAnomalySubscriptionRequestAnomalySubscription.subscriptionArn) &&
        Objects.equals(this.accountId, createAnomalySubscriptionRequestAnomalySubscription.accountId) &&
        Objects.equals(this.monitorArnList, createAnomalySubscriptionRequestAnomalySubscription.monitorArnList) &&
        Objects.equals(this.subscribers, createAnomalySubscriptionRequestAnomalySubscription.subscribers) &&
        Objects.equals(this.threshold, createAnomalySubscriptionRequestAnomalySubscription.threshold) &&
        Objects.equals(this.frequency, createAnomalySubscriptionRequestAnomalySubscription.frequency) &&
        Objects.equals(this.subscriptionName, createAnomalySubscriptionRequestAnomalySubscription.subscriptionName) &&
        Objects.equals(this.thresholdExpression, createAnomalySubscriptionRequestAnomalySubscription.thresholdExpression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subscriptionArn, accountId, monitorArnList, subscribers, threshold, frequency, subscriptionName, thresholdExpression);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnomalySubscriptionRequestAnomalySubscription {\n");
    sb.append("    subscriptionArn: ").append(toIndentedString(subscriptionArn)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    monitorArnList: ").append(toIndentedString(monitorArnList)).append("\n");
    sb.append("    subscribers: ").append(toIndentedString(subscribers)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    subscriptionName: ").append(toIndentedString(subscriptionName)).append("\n");
    sb.append("    thresholdExpression: ").append(toIndentedString(thresholdExpression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SubscriptionArn");
    openapiFields.add("AccountId");
    openapiFields.add("MonitorArnList");
    openapiFields.add("Subscribers");
    openapiFields.add("Threshold");
    openapiFields.add("Frequency");
    openapiFields.add("SubscriptionName");
    openapiFields.add("ThresholdExpression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MonitorArnList");
    openapiRequiredFields.add("Subscribers");
    openapiRequiredFields.add("Frequency");
    openapiRequiredFields.add("SubscriptionName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAnomalySubscriptionRequestAnomalySubscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAnomalySubscriptionRequestAnomalySubscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnomalySubscriptionRequestAnomalySubscription is not found in the empty JSON string", CreateAnomalySubscriptionRequestAnomalySubscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAnomalySubscriptionRequestAnomalySubscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnomalySubscriptionRequestAnomalySubscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAnomalySubscriptionRequestAnomalySubscription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SubscriptionArn`
      if (jsonObj.get("SubscriptionArn") != null && !jsonObj.get("SubscriptionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubscriptionArn"));
      }
      // validate the optional field `AccountId`
      if (jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccountId"));
      }
      // validate the required field `MonitorArnList`
      List.validateJsonElement(jsonObj.get("MonitorArnList"));
      // validate the required field `Subscribers`
      List.validateJsonElement(jsonObj.get("Subscribers"));
      // validate the optional field `Threshold`
      if (jsonObj.get("Threshold") != null && !jsonObj.get("Threshold").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Threshold"));
      }
      // validate the required field `Frequency`
      AnomalySubscriptionFrequency.validateJsonElement(jsonObj.get("Frequency"));
      // validate the required field `SubscriptionName`
      String.validateJsonElement(jsonObj.get("SubscriptionName"));
      // validate the optional field `ThresholdExpression`
      if (jsonObj.get("ThresholdExpression") != null && !jsonObj.get("ThresholdExpression").isJsonNull()) {
        AnomalySubscriptionThresholdExpression.validateJsonElement(jsonObj.get("ThresholdExpression"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnomalySubscriptionRequestAnomalySubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnomalySubscriptionRequestAnomalySubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnomalySubscriptionRequestAnomalySubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnomalySubscriptionRequestAnomalySubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnomalySubscriptionRequestAnomalySubscription>() {
           @Override
           public void write(JsonWriter out, CreateAnomalySubscriptionRequestAnomalySubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnomalySubscriptionRequestAnomalySubscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAnomalySubscriptionRequestAnomalySubscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAnomalySubscriptionRequestAnomalySubscription
   * @throws IOException if the JSON string is invalid with respect to CreateAnomalySubscriptionRequestAnomalySubscription
   */
  public static CreateAnomalySubscriptionRequestAnomalySubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnomalySubscriptionRequestAnomalySubscription.class);
  }

  /**
   * Convert an instance of CreateAnomalySubscriptionRequestAnomalySubscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

