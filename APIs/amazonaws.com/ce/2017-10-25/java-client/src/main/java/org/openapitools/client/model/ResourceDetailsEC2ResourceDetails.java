/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourceDetailsEC2ResourceDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceDetailsEC2ResourceDetails {
  public static final String SERIALIZED_NAME_HOURLY_ON_DEMAND_RATE = "HourlyOnDemandRate";
  @SerializedName(SERIALIZED_NAME_HOURLY_ON_DEMAND_RATE)
  private String hourlyOnDemandRate;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "InstanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_PLATFORM = "Platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SKU = "Sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_MEMORY = "Memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private String memory;

  public static final String SERIALIZED_NAME_NETWORK_PERFORMANCE = "NetworkPerformance";
  @SerializedName(SERIALIZED_NAME_NETWORK_PERFORMANCE)
  private String networkPerformance;

  public static final String SERIALIZED_NAME_STORAGE = "Storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private String storage;

  public static final String SERIALIZED_NAME_VCPU = "Vcpu";
  @SerializedName(SERIALIZED_NAME_VCPU)
  private String vcpu;

  public ResourceDetailsEC2ResourceDetails() {
  }

  public ResourceDetailsEC2ResourceDetails hourlyOnDemandRate(String hourlyOnDemandRate) {
    this.hourlyOnDemandRate = hourlyOnDemandRate;
    return this;
  }

  /**
   * Get hourlyOnDemandRate
   * @return hourlyOnDemandRate
   */
  @javax.annotation.Nullable
  public String getHourlyOnDemandRate() {
    return hourlyOnDemandRate;
  }

  public void setHourlyOnDemandRate(String hourlyOnDemandRate) {
    this.hourlyOnDemandRate = hourlyOnDemandRate;
  }


  public ResourceDetailsEC2ResourceDetails instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public ResourceDetailsEC2ResourceDetails platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public ResourceDetailsEC2ResourceDetails region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public ResourceDetailsEC2ResourceDetails sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Get sku
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public ResourceDetailsEC2ResourceDetails memory(String memory) {
    this.memory = memory;
    return this;
  }

  /**
   * Get memory
   * @return memory
   */
  @javax.annotation.Nullable
  public String getMemory() {
    return memory;
  }

  public void setMemory(String memory) {
    this.memory = memory;
  }


  public ResourceDetailsEC2ResourceDetails networkPerformance(String networkPerformance) {
    this.networkPerformance = networkPerformance;
    return this;
  }

  /**
   * Get networkPerformance
   * @return networkPerformance
   */
  @javax.annotation.Nullable
  public String getNetworkPerformance() {
    return networkPerformance;
  }

  public void setNetworkPerformance(String networkPerformance) {
    this.networkPerformance = networkPerformance;
  }


  public ResourceDetailsEC2ResourceDetails storage(String storage) {
    this.storage = storage;
    return this;
  }

  /**
   * Get storage
   * @return storage
   */
  @javax.annotation.Nullable
  public String getStorage() {
    return storage;
  }

  public void setStorage(String storage) {
    this.storage = storage;
  }


  public ResourceDetailsEC2ResourceDetails vcpu(String vcpu) {
    this.vcpu = vcpu;
    return this;
  }

  /**
   * Get vcpu
   * @return vcpu
   */
  @javax.annotation.Nullable
  public String getVcpu() {
    return vcpu;
  }

  public void setVcpu(String vcpu) {
    this.vcpu = vcpu;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceDetailsEC2ResourceDetails resourceDetailsEC2ResourceDetails = (ResourceDetailsEC2ResourceDetails) o;
    return Objects.equals(this.hourlyOnDemandRate, resourceDetailsEC2ResourceDetails.hourlyOnDemandRate) &&
        Objects.equals(this.instanceType, resourceDetailsEC2ResourceDetails.instanceType) &&
        Objects.equals(this.platform, resourceDetailsEC2ResourceDetails.platform) &&
        Objects.equals(this.region, resourceDetailsEC2ResourceDetails.region) &&
        Objects.equals(this.sku, resourceDetailsEC2ResourceDetails.sku) &&
        Objects.equals(this.memory, resourceDetailsEC2ResourceDetails.memory) &&
        Objects.equals(this.networkPerformance, resourceDetailsEC2ResourceDetails.networkPerformance) &&
        Objects.equals(this.storage, resourceDetailsEC2ResourceDetails.storage) &&
        Objects.equals(this.vcpu, resourceDetailsEC2ResourceDetails.vcpu);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hourlyOnDemandRate, instanceType, platform, region, sku, memory, networkPerformance, storage, vcpu);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceDetailsEC2ResourceDetails {\n");
    sb.append("    hourlyOnDemandRate: ").append(toIndentedString(hourlyOnDemandRate)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    networkPerformance: ").append(toIndentedString(networkPerformance)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    vcpu: ").append(toIndentedString(vcpu)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HourlyOnDemandRate");
    openapiFields.add("InstanceType");
    openapiFields.add("Platform");
    openapiFields.add("Region");
    openapiFields.add("Sku");
    openapiFields.add("Memory");
    openapiFields.add("NetworkPerformance");
    openapiFields.add("Storage");
    openapiFields.add("Vcpu");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceDetailsEC2ResourceDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceDetailsEC2ResourceDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceDetailsEC2ResourceDetails is not found in the empty JSON string", ResourceDetailsEC2ResourceDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceDetailsEC2ResourceDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceDetailsEC2ResourceDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `HourlyOnDemandRate`
      if (jsonObj.get("HourlyOnDemandRate") != null && !jsonObj.get("HourlyOnDemandRate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HourlyOnDemandRate"));
      }
      // validate the optional field `InstanceType`
      if (jsonObj.get("InstanceType") != null && !jsonObj.get("InstanceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceType"));
      }
      // validate the optional field `Platform`
      if (jsonObj.get("Platform") != null && !jsonObj.get("Platform").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Platform"));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Region"));
      }
      // validate the optional field `Sku`
      if (jsonObj.get("Sku") != null && !jsonObj.get("Sku").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Sku"));
      }
      // validate the optional field `Memory`
      if (jsonObj.get("Memory") != null && !jsonObj.get("Memory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Memory"));
      }
      // validate the optional field `NetworkPerformance`
      if (jsonObj.get("NetworkPerformance") != null && !jsonObj.get("NetworkPerformance").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetworkPerformance"));
      }
      // validate the optional field `Storage`
      if (jsonObj.get("Storage") != null && !jsonObj.get("Storage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Storage"));
      }
      // validate the optional field `Vcpu`
      if (jsonObj.get("Vcpu") != null && !jsonObj.get("Vcpu").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Vcpu"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceDetailsEC2ResourceDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceDetailsEC2ResourceDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceDetailsEC2ResourceDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceDetailsEC2ResourceDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceDetailsEC2ResourceDetails>() {
           @Override
           public void write(JsonWriter out, ResourceDetailsEC2ResourceDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceDetailsEC2ResourceDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceDetailsEC2ResourceDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceDetailsEC2ResourceDetails
   * @throws IOException if the JSON string is invalid with respect to ResourceDetailsEC2ResourceDetails
   */
  public static ResourceDetailsEC2ResourceDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceDetailsEC2ResourceDetails.class);
  }

  /**
   * Convert an instance of ResourceDetailsEC2ResourceDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

