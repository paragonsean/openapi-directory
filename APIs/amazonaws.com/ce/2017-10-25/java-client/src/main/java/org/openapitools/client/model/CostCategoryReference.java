/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A reference to a Cost Category containing only enough information to identify the Cost Category.&lt;/p&gt; &lt;p&gt;You can use this information to retrieve the full Cost Category information using &lt;code&gt;DescribeCostCategory&lt;/code&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CostCategoryReference {
  public static final String SERIALIZED_NAME_COST_CATEGORY_ARN = "CostCategoryArn";
  @SerializedName(SERIALIZED_NAME_COST_CATEGORY_ARN)
  private String costCategoryArn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EFFECTIVE_START = "EffectiveStart";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_START)
  private String effectiveStart;

  public static final String SERIALIZED_NAME_EFFECTIVE_END = "EffectiveEnd";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_END)
  private String effectiveEnd;

  public static final String SERIALIZED_NAME_NUMBER_OF_RULES = "NumberOfRules";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_RULES)
  private Integer numberOfRules;

  public static final String SERIALIZED_NAME_PROCESSING_STATUS = "ProcessingStatus";
  @SerializedName(SERIALIZED_NAME_PROCESSING_STATUS)
  private List processingStatus;

  public static final String SERIALIZED_NAME_VALUES = "Values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List values;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "DefaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public CostCategoryReference() {
  }

  public CostCategoryReference costCategoryArn(String costCategoryArn) {
    this.costCategoryArn = costCategoryArn;
    return this;
  }

  /**
   * Get costCategoryArn
   * @return costCategoryArn
   */
  @javax.annotation.Nullable
  public String getCostCategoryArn() {
    return costCategoryArn;
  }

  public void setCostCategoryArn(String costCategoryArn) {
    this.costCategoryArn = costCategoryArn;
  }


  public CostCategoryReference name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique name of the Cost Category.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CostCategoryReference effectiveStart(String effectiveStart) {
    this.effectiveStart = effectiveStart;
    return this;
  }

  /**
   * Get effectiveStart
   * @return effectiveStart
   */
  @javax.annotation.Nullable
  public String getEffectiveStart() {
    return effectiveStart;
  }

  public void setEffectiveStart(String effectiveStart) {
    this.effectiveStart = effectiveStart;
  }


  public CostCategoryReference effectiveEnd(String effectiveEnd) {
    this.effectiveEnd = effectiveEnd;
    return this;
  }

  /**
   * Get effectiveEnd
   * @return effectiveEnd
   */
  @javax.annotation.Nullable
  public String getEffectiveEnd() {
    return effectiveEnd;
  }

  public void setEffectiveEnd(String effectiveEnd) {
    this.effectiveEnd = effectiveEnd;
  }


  public CostCategoryReference numberOfRules(Integer numberOfRules) {
    this.numberOfRules = numberOfRules;
    return this;
  }

  /**
   * Get numberOfRules
   * @return numberOfRules
   */
  @javax.annotation.Nullable
  public Integer getNumberOfRules() {
    return numberOfRules;
  }

  public void setNumberOfRules(Integer numberOfRules) {
    this.numberOfRules = numberOfRules;
  }


  public CostCategoryReference processingStatus(List processingStatus) {
    this.processingStatus = processingStatus;
    return this;
  }

  /**
   * Get processingStatus
   * @return processingStatus
   */
  @javax.annotation.Nullable
  public List getProcessingStatus() {
    return processingStatus;
  }

  public void setProcessingStatus(List processingStatus) {
    this.processingStatus = processingStatus;
  }


  public CostCategoryReference values(List values) {
    this.values = values;
    return this;
  }

  /**
   * Get values
   * @return values
   */
  @javax.annotation.Nullable
  public List getValues() {
    return values;
  }

  public void setValues(List values) {
    this.values = values;
  }


  public CostCategoryReference defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * The default value for the cost category.
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CostCategoryReference costCategoryReference = (CostCategoryReference) o;
    return Objects.equals(this.costCategoryArn, costCategoryReference.costCategoryArn) &&
        Objects.equals(this.name, costCategoryReference.name) &&
        Objects.equals(this.effectiveStart, costCategoryReference.effectiveStart) &&
        Objects.equals(this.effectiveEnd, costCategoryReference.effectiveEnd) &&
        Objects.equals(this.numberOfRules, costCategoryReference.numberOfRules) &&
        Objects.equals(this.processingStatus, costCategoryReference.processingStatus) &&
        Objects.equals(this.values, costCategoryReference.values) &&
        Objects.equals(this.defaultValue, costCategoryReference.defaultValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costCategoryArn, name, effectiveStart, effectiveEnd, numberOfRules, processingStatus, values, defaultValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CostCategoryReference {\n");
    sb.append("    costCategoryArn: ").append(toIndentedString(costCategoryArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    effectiveStart: ").append(toIndentedString(effectiveStart)).append("\n");
    sb.append("    effectiveEnd: ").append(toIndentedString(effectiveEnd)).append("\n");
    sb.append("    numberOfRules: ").append(toIndentedString(numberOfRules)).append("\n");
    sb.append("    processingStatus: ").append(toIndentedString(processingStatus)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CostCategoryArn");
    openapiFields.add("Name");
    openapiFields.add("EffectiveStart");
    openapiFields.add("EffectiveEnd");
    openapiFields.add("NumberOfRules");
    openapiFields.add("ProcessingStatus");
    openapiFields.add("Values");
    openapiFields.add("DefaultValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CostCategoryReference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CostCategoryReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CostCategoryReference is not found in the empty JSON string", CostCategoryReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CostCategoryReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CostCategoryReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CostCategoryArn`
      if (jsonObj.get("CostCategoryArn") != null && !jsonObj.get("CostCategoryArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CostCategoryArn"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `EffectiveStart`
      if (jsonObj.get("EffectiveStart") != null && !jsonObj.get("EffectiveStart").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EffectiveStart"));
      }
      // validate the optional field `EffectiveEnd`
      if (jsonObj.get("EffectiveEnd") != null && !jsonObj.get("EffectiveEnd").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EffectiveEnd"));
      }
      // validate the optional field `NumberOfRules`
      if (jsonObj.get("NumberOfRules") != null && !jsonObj.get("NumberOfRules").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfRules"));
      }
      // validate the optional field `ProcessingStatus`
      if (jsonObj.get("ProcessingStatus") != null && !jsonObj.get("ProcessingStatus").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ProcessingStatus"));
      }
      // validate the optional field `Values`
      if (jsonObj.get("Values") != null && !jsonObj.get("Values").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Values"));
      }
      if ((jsonObj.get("DefaultValue") != null && !jsonObj.get("DefaultValue").isJsonNull()) && !jsonObj.get("DefaultValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CostCategoryReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CostCategoryReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CostCategoryReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CostCategoryReference.class));

       return (TypeAdapter<T>) new TypeAdapter<CostCategoryReference>() {
           @Override
           public void write(JsonWriter out, CostCategoryReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CostCategoryReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CostCategoryReference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CostCategoryReference
   * @throws IOException if the JSON string is invalid with respect to CostCategoryReference
   */
  public static CostCategoryReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CostCategoryReference.class);
  }

  /**
   * Convert an instance of CostCategoryReference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

