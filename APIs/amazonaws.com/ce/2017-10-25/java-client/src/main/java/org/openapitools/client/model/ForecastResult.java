/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ForecastResultTimePeriod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The forecast that&#39;s created for your query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ForecastResult {
  public static final String SERIALIZED_NAME_TIME_PERIOD = "TimePeriod";
  @SerializedName(SERIALIZED_NAME_TIME_PERIOD)
  private ForecastResultTimePeriod timePeriod;

  public static final String SERIALIZED_NAME_MEAN_VALUE = "MeanValue";
  @SerializedName(SERIALIZED_NAME_MEAN_VALUE)
  private String meanValue;

  public static final String SERIALIZED_NAME_PREDICTION_INTERVAL_LOWER_BOUND = "PredictionIntervalLowerBound";
  @SerializedName(SERIALIZED_NAME_PREDICTION_INTERVAL_LOWER_BOUND)
  private String predictionIntervalLowerBound;

  public static final String SERIALIZED_NAME_PREDICTION_INTERVAL_UPPER_BOUND = "PredictionIntervalUpperBound";
  @SerializedName(SERIALIZED_NAME_PREDICTION_INTERVAL_UPPER_BOUND)
  private String predictionIntervalUpperBound;

  public ForecastResult() {
  }

  public ForecastResult timePeriod(ForecastResultTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
    return this;
  }

  /**
   * Get timePeriod
   * @return timePeriod
   */
  @javax.annotation.Nullable
  public ForecastResultTimePeriod getTimePeriod() {
    return timePeriod;
  }

  public void setTimePeriod(ForecastResultTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
  }


  public ForecastResult meanValue(String meanValue) {
    this.meanValue = meanValue;
    return this;
  }

  /**
   * Get meanValue
   * @return meanValue
   */
  @javax.annotation.Nullable
  public String getMeanValue() {
    return meanValue;
  }

  public void setMeanValue(String meanValue) {
    this.meanValue = meanValue;
  }


  public ForecastResult predictionIntervalLowerBound(String predictionIntervalLowerBound) {
    this.predictionIntervalLowerBound = predictionIntervalLowerBound;
    return this;
  }

  /**
   * Get predictionIntervalLowerBound
   * @return predictionIntervalLowerBound
   */
  @javax.annotation.Nullable
  public String getPredictionIntervalLowerBound() {
    return predictionIntervalLowerBound;
  }

  public void setPredictionIntervalLowerBound(String predictionIntervalLowerBound) {
    this.predictionIntervalLowerBound = predictionIntervalLowerBound;
  }


  public ForecastResult predictionIntervalUpperBound(String predictionIntervalUpperBound) {
    this.predictionIntervalUpperBound = predictionIntervalUpperBound;
    return this;
  }

  /**
   * Get predictionIntervalUpperBound
   * @return predictionIntervalUpperBound
   */
  @javax.annotation.Nullable
  public String getPredictionIntervalUpperBound() {
    return predictionIntervalUpperBound;
  }

  public void setPredictionIntervalUpperBound(String predictionIntervalUpperBound) {
    this.predictionIntervalUpperBound = predictionIntervalUpperBound;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastResult forecastResult = (ForecastResult) o;
    return Objects.equals(this.timePeriod, forecastResult.timePeriod) &&
        Objects.equals(this.meanValue, forecastResult.meanValue) &&
        Objects.equals(this.predictionIntervalLowerBound, forecastResult.predictionIntervalLowerBound) &&
        Objects.equals(this.predictionIntervalUpperBound, forecastResult.predictionIntervalUpperBound);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timePeriod, meanValue, predictionIntervalLowerBound, predictionIntervalUpperBound);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastResult {\n");
    sb.append("    timePeriod: ").append(toIndentedString(timePeriod)).append("\n");
    sb.append("    meanValue: ").append(toIndentedString(meanValue)).append("\n");
    sb.append("    predictionIntervalLowerBound: ").append(toIndentedString(predictionIntervalLowerBound)).append("\n");
    sb.append("    predictionIntervalUpperBound: ").append(toIndentedString(predictionIntervalUpperBound)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TimePeriod");
    openapiFields.add("MeanValue");
    openapiFields.add("PredictionIntervalLowerBound");
    openapiFields.add("PredictionIntervalUpperBound");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ForecastResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForecastResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForecastResult is not found in the empty JSON string", ForecastResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ForecastResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ForecastResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TimePeriod`
      if (jsonObj.get("TimePeriod") != null && !jsonObj.get("TimePeriod").isJsonNull()) {
        ForecastResultTimePeriod.validateJsonElement(jsonObj.get("TimePeriod"));
      }
      // validate the optional field `MeanValue`
      if (jsonObj.get("MeanValue") != null && !jsonObj.get("MeanValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MeanValue"));
      }
      // validate the optional field `PredictionIntervalLowerBound`
      if (jsonObj.get("PredictionIntervalLowerBound") != null && !jsonObj.get("PredictionIntervalLowerBound").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PredictionIntervalLowerBound"));
      }
      // validate the optional field `PredictionIntervalUpperBound`
      if (jsonObj.get("PredictionIntervalUpperBound") != null && !jsonObj.get("PredictionIntervalUpperBound").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PredictionIntervalUpperBound"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForecastResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForecastResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForecastResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForecastResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ForecastResult>() {
           @Override
           public void write(JsonWriter out, ForecastResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForecastResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ForecastResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ForecastResult
   * @throws IOException if the JSON string is invalid with respect to ForecastResult
   */
  public static ForecastResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForecastResult.class);
  }

  /**
   * Convert an instance of ForecastResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

