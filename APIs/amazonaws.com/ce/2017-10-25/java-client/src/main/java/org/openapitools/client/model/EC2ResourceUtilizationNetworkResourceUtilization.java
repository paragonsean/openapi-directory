/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EC2ResourceUtilizationNetworkResourceUtilization
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EC2ResourceUtilizationNetworkResourceUtilization {
  public static final String SERIALIZED_NAME_NETWORK_IN_BYTES_PER_SECOND = "NetworkInBytesPerSecond";
  @SerializedName(SERIALIZED_NAME_NETWORK_IN_BYTES_PER_SECOND)
  private String networkInBytesPerSecond;

  public static final String SERIALIZED_NAME_NETWORK_OUT_BYTES_PER_SECOND = "NetworkOutBytesPerSecond";
  @SerializedName(SERIALIZED_NAME_NETWORK_OUT_BYTES_PER_SECOND)
  private String networkOutBytesPerSecond;

  public static final String SERIALIZED_NAME_NETWORK_PACKETS_IN_PER_SECOND = "NetworkPacketsInPerSecond";
  @SerializedName(SERIALIZED_NAME_NETWORK_PACKETS_IN_PER_SECOND)
  private String networkPacketsInPerSecond;

  public static final String SERIALIZED_NAME_NETWORK_PACKETS_OUT_PER_SECOND = "NetworkPacketsOutPerSecond";
  @SerializedName(SERIALIZED_NAME_NETWORK_PACKETS_OUT_PER_SECOND)
  private String networkPacketsOutPerSecond;

  public EC2ResourceUtilizationNetworkResourceUtilization() {
  }

  public EC2ResourceUtilizationNetworkResourceUtilization networkInBytesPerSecond(String networkInBytesPerSecond) {
    this.networkInBytesPerSecond = networkInBytesPerSecond;
    return this;
  }

  /**
   * Get networkInBytesPerSecond
   * @return networkInBytesPerSecond
   */
  @javax.annotation.Nullable
  public String getNetworkInBytesPerSecond() {
    return networkInBytesPerSecond;
  }

  public void setNetworkInBytesPerSecond(String networkInBytesPerSecond) {
    this.networkInBytesPerSecond = networkInBytesPerSecond;
  }


  public EC2ResourceUtilizationNetworkResourceUtilization networkOutBytesPerSecond(String networkOutBytesPerSecond) {
    this.networkOutBytesPerSecond = networkOutBytesPerSecond;
    return this;
  }

  /**
   * Get networkOutBytesPerSecond
   * @return networkOutBytesPerSecond
   */
  @javax.annotation.Nullable
  public String getNetworkOutBytesPerSecond() {
    return networkOutBytesPerSecond;
  }

  public void setNetworkOutBytesPerSecond(String networkOutBytesPerSecond) {
    this.networkOutBytesPerSecond = networkOutBytesPerSecond;
  }


  public EC2ResourceUtilizationNetworkResourceUtilization networkPacketsInPerSecond(String networkPacketsInPerSecond) {
    this.networkPacketsInPerSecond = networkPacketsInPerSecond;
    return this;
  }

  /**
   * Get networkPacketsInPerSecond
   * @return networkPacketsInPerSecond
   */
  @javax.annotation.Nullable
  public String getNetworkPacketsInPerSecond() {
    return networkPacketsInPerSecond;
  }

  public void setNetworkPacketsInPerSecond(String networkPacketsInPerSecond) {
    this.networkPacketsInPerSecond = networkPacketsInPerSecond;
  }


  public EC2ResourceUtilizationNetworkResourceUtilization networkPacketsOutPerSecond(String networkPacketsOutPerSecond) {
    this.networkPacketsOutPerSecond = networkPacketsOutPerSecond;
    return this;
  }

  /**
   * Get networkPacketsOutPerSecond
   * @return networkPacketsOutPerSecond
   */
  @javax.annotation.Nullable
  public String getNetworkPacketsOutPerSecond() {
    return networkPacketsOutPerSecond;
  }

  public void setNetworkPacketsOutPerSecond(String networkPacketsOutPerSecond) {
    this.networkPacketsOutPerSecond = networkPacketsOutPerSecond;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EC2ResourceUtilizationNetworkResourceUtilization ec2ResourceUtilizationNetworkResourceUtilization = (EC2ResourceUtilizationNetworkResourceUtilization) o;
    return Objects.equals(this.networkInBytesPerSecond, ec2ResourceUtilizationNetworkResourceUtilization.networkInBytesPerSecond) &&
        Objects.equals(this.networkOutBytesPerSecond, ec2ResourceUtilizationNetworkResourceUtilization.networkOutBytesPerSecond) &&
        Objects.equals(this.networkPacketsInPerSecond, ec2ResourceUtilizationNetworkResourceUtilization.networkPacketsInPerSecond) &&
        Objects.equals(this.networkPacketsOutPerSecond, ec2ResourceUtilizationNetworkResourceUtilization.networkPacketsOutPerSecond);
  }

  @Override
  public int hashCode() {
    return Objects.hash(networkInBytesPerSecond, networkOutBytesPerSecond, networkPacketsInPerSecond, networkPacketsOutPerSecond);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EC2ResourceUtilizationNetworkResourceUtilization {\n");
    sb.append("    networkInBytesPerSecond: ").append(toIndentedString(networkInBytesPerSecond)).append("\n");
    sb.append("    networkOutBytesPerSecond: ").append(toIndentedString(networkOutBytesPerSecond)).append("\n");
    sb.append("    networkPacketsInPerSecond: ").append(toIndentedString(networkPacketsInPerSecond)).append("\n");
    sb.append("    networkPacketsOutPerSecond: ").append(toIndentedString(networkPacketsOutPerSecond)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NetworkInBytesPerSecond");
    openapiFields.add("NetworkOutBytesPerSecond");
    openapiFields.add("NetworkPacketsInPerSecond");
    openapiFields.add("NetworkPacketsOutPerSecond");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EC2ResourceUtilizationNetworkResourceUtilization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EC2ResourceUtilizationNetworkResourceUtilization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EC2ResourceUtilizationNetworkResourceUtilization is not found in the empty JSON string", EC2ResourceUtilizationNetworkResourceUtilization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EC2ResourceUtilizationNetworkResourceUtilization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EC2ResourceUtilizationNetworkResourceUtilization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `NetworkInBytesPerSecond`
      if (jsonObj.get("NetworkInBytesPerSecond") != null && !jsonObj.get("NetworkInBytesPerSecond").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetworkInBytesPerSecond"));
      }
      // validate the optional field `NetworkOutBytesPerSecond`
      if (jsonObj.get("NetworkOutBytesPerSecond") != null && !jsonObj.get("NetworkOutBytesPerSecond").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetworkOutBytesPerSecond"));
      }
      // validate the optional field `NetworkPacketsInPerSecond`
      if (jsonObj.get("NetworkPacketsInPerSecond") != null && !jsonObj.get("NetworkPacketsInPerSecond").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetworkPacketsInPerSecond"));
      }
      // validate the optional field `NetworkPacketsOutPerSecond`
      if (jsonObj.get("NetworkPacketsOutPerSecond") != null && !jsonObj.get("NetworkPacketsOutPerSecond").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetworkPacketsOutPerSecond"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EC2ResourceUtilizationNetworkResourceUtilization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EC2ResourceUtilizationNetworkResourceUtilization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EC2ResourceUtilizationNetworkResourceUtilization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EC2ResourceUtilizationNetworkResourceUtilization.class));

       return (TypeAdapter<T>) new TypeAdapter<EC2ResourceUtilizationNetworkResourceUtilization>() {
           @Override
           public void write(JsonWriter out, EC2ResourceUtilizationNetworkResourceUtilization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EC2ResourceUtilizationNetworkResourceUtilization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EC2ResourceUtilizationNetworkResourceUtilization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EC2ResourceUtilizationNetworkResourceUtilization
   * @throws IOException if the JSON string is invalid with respect to EC2ResourceUtilizationNetworkResourceUtilization
   */
  public static EC2ResourceUtilizationNetworkResourceUtilization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EC2ResourceUtilizationNetworkResourceUtilization.class);
  }

  /**
   * Convert an instance of EC2ResourceUtilizationNetworkResourceUtilization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

