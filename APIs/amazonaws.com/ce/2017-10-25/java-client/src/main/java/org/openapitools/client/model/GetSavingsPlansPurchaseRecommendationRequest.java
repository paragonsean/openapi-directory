/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccountScope;
import org.openapitools.client.model.GetSavingsPlansPurchaseRecommendationRequestFilter;
import org.openapitools.client.model.LookbackPeriodInDays;
import org.openapitools.client.model.PaymentOption;
import org.openapitools.client.model.SupportedSavingsPlansType;
import org.openapitools.client.model.TermInYears;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSavingsPlansPurchaseRecommendationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSavingsPlansPurchaseRecommendationRequest {
  public static final String SERIALIZED_NAME_SAVINGS_PLANS_TYPE = "SavingsPlansType";
  @SerializedName(SERIALIZED_NAME_SAVINGS_PLANS_TYPE)
  private SupportedSavingsPlansType savingsPlansType;

  public static final String SERIALIZED_NAME_TERM_IN_YEARS = "TermInYears";
  @SerializedName(SERIALIZED_NAME_TERM_IN_YEARS)
  private TermInYears termInYears;

  public static final String SERIALIZED_NAME_PAYMENT_OPTION = "PaymentOption";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTION)
  private PaymentOption paymentOption;

  public static final String SERIALIZED_NAME_ACCOUNT_SCOPE = "AccountScope";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SCOPE)
  private AccountScope accountScope;

  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "NextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "PageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_LOOKBACK_PERIOD_IN_DAYS = "LookbackPeriodInDays";
  @SerializedName(SERIALIZED_NAME_LOOKBACK_PERIOD_IN_DAYS)
  private LookbackPeriodInDays lookbackPeriodInDays;

  public static final String SERIALIZED_NAME_FILTER = "Filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private GetSavingsPlansPurchaseRecommendationRequestFilter filter;

  public GetSavingsPlansPurchaseRecommendationRequest() {
  }

  public GetSavingsPlansPurchaseRecommendationRequest savingsPlansType(SupportedSavingsPlansType savingsPlansType) {
    this.savingsPlansType = savingsPlansType;
    return this;
  }

  /**
   * Get savingsPlansType
   * @return savingsPlansType
   */
  @javax.annotation.Nonnull
  public SupportedSavingsPlansType getSavingsPlansType() {
    return savingsPlansType;
  }

  public void setSavingsPlansType(SupportedSavingsPlansType savingsPlansType) {
    this.savingsPlansType = savingsPlansType;
  }


  public GetSavingsPlansPurchaseRecommendationRequest termInYears(TermInYears termInYears) {
    this.termInYears = termInYears;
    return this;
  }

  /**
   * Get termInYears
   * @return termInYears
   */
  @javax.annotation.Nonnull
  public TermInYears getTermInYears() {
    return termInYears;
  }

  public void setTermInYears(TermInYears termInYears) {
    this.termInYears = termInYears;
  }


  public GetSavingsPlansPurchaseRecommendationRequest paymentOption(PaymentOption paymentOption) {
    this.paymentOption = paymentOption;
    return this;
  }

  /**
   * Get paymentOption
   * @return paymentOption
   */
  @javax.annotation.Nonnull
  public PaymentOption getPaymentOption() {
    return paymentOption;
  }

  public void setPaymentOption(PaymentOption paymentOption) {
    this.paymentOption = paymentOption;
  }


  public GetSavingsPlansPurchaseRecommendationRequest accountScope(AccountScope accountScope) {
    this.accountScope = accountScope;
    return this;
  }

  /**
   * Get accountScope
   * @return accountScope
   */
  @javax.annotation.Nullable
  public AccountScope getAccountScope() {
    return accountScope;
  }

  public void setAccountScope(AccountScope accountScope) {
    this.accountScope = accountScope;
  }


  public GetSavingsPlansPurchaseRecommendationRequest nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * Get nextPageToken
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public GetSavingsPlansPurchaseRecommendationRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public GetSavingsPlansPurchaseRecommendationRequest lookbackPeriodInDays(LookbackPeriodInDays lookbackPeriodInDays) {
    this.lookbackPeriodInDays = lookbackPeriodInDays;
    return this;
  }

  /**
   * Get lookbackPeriodInDays
   * @return lookbackPeriodInDays
   */
  @javax.annotation.Nonnull
  public LookbackPeriodInDays getLookbackPeriodInDays() {
    return lookbackPeriodInDays;
  }

  public void setLookbackPeriodInDays(LookbackPeriodInDays lookbackPeriodInDays) {
    this.lookbackPeriodInDays = lookbackPeriodInDays;
  }


  public GetSavingsPlansPurchaseRecommendationRequest filter(GetSavingsPlansPurchaseRecommendationRequestFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public GetSavingsPlansPurchaseRecommendationRequestFilter getFilter() {
    return filter;
  }

  public void setFilter(GetSavingsPlansPurchaseRecommendationRequestFilter filter) {
    this.filter = filter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSavingsPlansPurchaseRecommendationRequest getSavingsPlansPurchaseRecommendationRequest = (GetSavingsPlansPurchaseRecommendationRequest) o;
    return Objects.equals(this.savingsPlansType, getSavingsPlansPurchaseRecommendationRequest.savingsPlansType) &&
        Objects.equals(this.termInYears, getSavingsPlansPurchaseRecommendationRequest.termInYears) &&
        Objects.equals(this.paymentOption, getSavingsPlansPurchaseRecommendationRequest.paymentOption) &&
        Objects.equals(this.accountScope, getSavingsPlansPurchaseRecommendationRequest.accountScope) &&
        Objects.equals(this.nextPageToken, getSavingsPlansPurchaseRecommendationRequest.nextPageToken) &&
        Objects.equals(this.pageSize, getSavingsPlansPurchaseRecommendationRequest.pageSize) &&
        Objects.equals(this.lookbackPeriodInDays, getSavingsPlansPurchaseRecommendationRequest.lookbackPeriodInDays) &&
        Objects.equals(this.filter, getSavingsPlansPurchaseRecommendationRequest.filter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(savingsPlansType, termInYears, paymentOption, accountScope, nextPageToken, pageSize, lookbackPeriodInDays, filter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSavingsPlansPurchaseRecommendationRequest {\n");
    sb.append("    savingsPlansType: ").append(toIndentedString(savingsPlansType)).append("\n");
    sb.append("    termInYears: ").append(toIndentedString(termInYears)).append("\n");
    sb.append("    paymentOption: ").append(toIndentedString(paymentOption)).append("\n");
    sb.append("    accountScope: ").append(toIndentedString(accountScope)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    lookbackPeriodInDays: ").append(toIndentedString(lookbackPeriodInDays)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SavingsPlansType");
    openapiFields.add("TermInYears");
    openapiFields.add("PaymentOption");
    openapiFields.add("AccountScope");
    openapiFields.add("NextPageToken");
    openapiFields.add("PageSize");
    openapiFields.add("LookbackPeriodInDays");
    openapiFields.add("Filter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SavingsPlansType");
    openapiRequiredFields.add("TermInYears");
    openapiRequiredFields.add("PaymentOption");
    openapiRequiredFields.add("LookbackPeriodInDays");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSavingsPlansPurchaseRecommendationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSavingsPlansPurchaseRecommendationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSavingsPlansPurchaseRecommendationRequest is not found in the empty JSON string", GetSavingsPlansPurchaseRecommendationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSavingsPlansPurchaseRecommendationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSavingsPlansPurchaseRecommendationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSavingsPlansPurchaseRecommendationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SavingsPlansType`
      SupportedSavingsPlansType.validateJsonElement(jsonObj.get("SavingsPlansType"));
      // validate the required field `TermInYears`
      TermInYears.validateJsonElement(jsonObj.get("TermInYears"));
      // validate the required field `PaymentOption`
      PaymentOption.validateJsonElement(jsonObj.get("PaymentOption"));
      // validate the optional field `AccountScope`
      if (jsonObj.get("AccountScope") != null && !jsonObj.get("AccountScope").isJsonNull()) {
        AccountScope.validateJsonElement(jsonObj.get("AccountScope"));
      }
      // validate the optional field `NextPageToken`
      if (jsonObj.get("NextPageToken") != null && !jsonObj.get("NextPageToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextPageToken"));
      }
      // validate the optional field `PageSize`
      if (jsonObj.get("PageSize") != null && !jsonObj.get("PageSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PageSize"));
      }
      // validate the required field `LookbackPeriodInDays`
      LookbackPeriodInDays.validateJsonElement(jsonObj.get("LookbackPeriodInDays"));
      // validate the optional field `Filter`
      if (jsonObj.get("Filter") != null && !jsonObj.get("Filter").isJsonNull()) {
        GetSavingsPlansPurchaseRecommendationRequestFilter.validateJsonElement(jsonObj.get("Filter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSavingsPlansPurchaseRecommendationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSavingsPlansPurchaseRecommendationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSavingsPlansPurchaseRecommendationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSavingsPlansPurchaseRecommendationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSavingsPlansPurchaseRecommendationRequest>() {
           @Override
           public void write(JsonWriter out, GetSavingsPlansPurchaseRecommendationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSavingsPlansPurchaseRecommendationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSavingsPlansPurchaseRecommendationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSavingsPlansPurchaseRecommendationRequest
   * @throws IOException if the JSON string is invalid with respect to GetSavingsPlansPurchaseRecommendationRequest
   */
  public static GetSavingsPlansPurchaseRecommendationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSavingsPlansPurchaseRecommendationRequest.class);
  }

  /**
   * Convert an instance of GetSavingsPlansPurchaseRecommendationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

