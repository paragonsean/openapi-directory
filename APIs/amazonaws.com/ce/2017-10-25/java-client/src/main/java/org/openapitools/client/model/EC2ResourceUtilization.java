/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EC2ResourceUtilizationDiskResourceUtilization;
import org.openapitools.client.model.EC2ResourceUtilizationEBSResourceUtilization;
import org.openapitools.client.model.EC2ResourceUtilizationNetworkResourceUtilization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Utilization metrics for the instance. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EC2ResourceUtilization {
  public static final String SERIALIZED_NAME_MAX_CPU_UTILIZATION_PERCENTAGE = "MaxCpuUtilizationPercentage";
  @SerializedName(SERIALIZED_NAME_MAX_CPU_UTILIZATION_PERCENTAGE)
  private String maxCpuUtilizationPercentage;

  public static final String SERIALIZED_NAME_MAX_MEMORY_UTILIZATION_PERCENTAGE = "MaxMemoryUtilizationPercentage";
  @SerializedName(SERIALIZED_NAME_MAX_MEMORY_UTILIZATION_PERCENTAGE)
  private String maxMemoryUtilizationPercentage;

  public static final String SERIALIZED_NAME_MAX_STORAGE_UTILIZATION_PERCENTAGE = "MaxStorageUtilizationPercentage";
  @SerializedName(SERIALIZED_NAME_MAX_STORAGE_UTILIZATION_PERCENTAGE)
  private String maxStorageUtilizationPercentage;

  public static final String SERIALIZED_NAME_EB_S_RESOURCE_UTILIZATION = "EBSResourceUtilization";
  @SerializedName(SERIALIZED_NAME_EB_S_RESOURCE_UTILIZATION)
  private EC2ResourceUtilizationEBSResourceUtilization ebSResourceUtilization;

  public static final String SERIALIZED_NAME_DISK_RESOURCE_UTILIZATION = "DiskResourceUtilization";
  @SerializedName(SERIALIZED_NAME_DISK_RESOURCE_UTILIZATION)
  private EC2ResourceUtilizationDiskResourceUtilization diskResourceUtilization;

  public static final String SERIALIZED_NAME_NETWORK_RESOURCE_UTILIZATION = "NetworkResourceUtilization";
  @SerializedName(SERIALIZED_NAME_NETWORK_RESOURCE_UTILIZATION)
  private EC2ResourceUtilizationNetworkResourceUtilization networkResourceUtilization;

  public EC2ResourceUtilization() {
  }

  public EC2ResourceUtilization maxCpuUtilizationPercentage(String maxCpuUtilizationPercentage) {
    this.maxCpuUtilizationPercentage = maxCpuUtilizationPercentage;
    return this;
  }

  /**
   * Get maxCpuUtilizationPercentage
   * @return maxCpuUtilizationPercentage
   */
  @javax.annotation.Nullable
  public String getMaxCpuUtilizationPercentage() {
    return maxCpuUtilizationPercentage;
  }

  public void setMaxCpuUtilizationPercentage(String maxCpuUtilizationPercentage) {
    this.maxCpuUtilizationPercentage = maxCpuUtilizationPercentage;
  }


  public EC2ResourceUtilization maxMemoryUtilizationPercentage(String maxMemoryUtilizationPercentage) {
    this.maxMemoryUtilizationPercentage = maxMemoryUtilizationPercentage;
    return this;
  }

  /**
   * Get maxMemoryUtilizationPercentage
   * @return maxMemoryUtilizationPercentage
   */
  @javax.annotation.Nullable
  public String getMaxMemoryUtilizationPercentage() {
    return maxMemoryUtilizationPercentage;
  }

  public void setMaxMemoryUtilizationPercentage(String maxMemoryUtilizationPercentage) {
    this.maxMemoryUtilizationPercentage = maxMemoryUtilizationPercentage;
  }


  public EC2ResourceUtilization maxStorageUtilizationPercentage(String maxStorageUtilizationPercentage) {
    this.maxStorageUtilizationPercentage = maxStorageUtilizationPercentage;
    return this;
  }

  /**
   * Get maxStorageUtilizationPercentage
   * @return maxStorageUtilizationPercentage
   */
  @javax.annotation.Nullable
  public String getMaxStorageUtilizationPercentage() {
    return maxStorageUtilizationPercentage;
  }

  public void setMaxStorageUtilizationPercentage(String maxStorageUtilizationPercentage) {
    this.maxStorageUtilizationPercentage = maxStorageUtilizationPercentage;
  }


  public EC2ResourceUtilization ebSResourceUtilization(EC2ResourceUtilizationEBSResourceUtilization ebSResourceUtilization) {
    this.ebSResourceUtilization = ebSResourceUtilization;
    return this;
  }

  /**
   * Get ebSResourceUtilization
   * @return ebSResourceUtilization
   */
  @javax.annotation.Nullable
  public EC2ResourceUtilizationEBSResourceUtilization getEbSResourceUtilization() {
    return ebSResourceUtilization;
  }

  public void setEbSResourceUtilization(EC2ResourceUtilizationEBSResourceUtilization ebSResourceUtilization) {
    this.ebSResourceUtilization = ebSResourceUtilization;
  }


  public EC2ResourceUtilization diskResourceUtilization(EC2ResourceUtilizationDiskResourceUtilization diskResourceUtilization) {
    this.diskResourceUtilization = diskResourceUtilization;
    return this;
  }

  /**
   * Get diskResourceUtilization
   * @return diskResourceUtilization
   */
  @javax.annotation.Nullable
  public EC2ResourceUtilizationDiskResourceUtilization getDiskResourceUtilization() {
    return diskResourceUtilization;
  }

  public void setDiskResourceUtilization(EC2ResourceUtilizationDiskResourceUtilization diskResourceUtilization) {
    this.diskResourceUtilization = diskResourceUtilization;
  }


  public EC2ResourceUtilization networkResourceUtilization(EC2ResourceUtilizationNetworkResourceUtilization networkResourceUtilization) {
    this.networkResourceUtilization = networkResourceUtilization;
    return this;
  }

  /**
   * Get networkResourceUtilization
   * @return networkResourceUtilization
   */
  @javax.annotation.Nullable
  public EC2ResourceUtilizationNetworkResourceUtilization getNetworkResourceUtilization() {
    return networkResourceUtilization;
  }

  public void setNetworkResourceUtilization(EC2ResourceUtilizationNetworkResourceUtilization networkResourceUtilization) {
    this.networkResourceUtilization = networkResourceUtilization;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EC2ResourceUtilization ec2ResourceUtilization = (EC2ResourceUtilization) o;
    return Objects.equals(this.maxCpuUtilizationPercentage, ec2ResourceUtilization.maxCpuUtilizationPercentage) &&
        Objects.equals(this.maxMemoryUtilizationPercentage, ec2ResourceUtilization.maxMemoryUtilizationPercentage) &&
        Objects.equals(this.maxStorageUtilizationPercentage, ec2ResourceUtilization.maxStorageUtilizationPercentage) &&
        Objects.equals(this.ebSResourceUtilization, ec2ResourceUtilization.ebSResourceUtilization) &&
        Objects.equals(this.diskResourceUtilization, ec2ResourceUtilization.diskResourceUtilization) &&
        Objects.equals(this.networkResourceUtilization, ec2ResourceUtilization.networkResourceUtilization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxCpuUtilizationPercentage, maxMemoryUtilizationPercentage, maxStorageUtilizationPercentage, ebSResourceUtilization, diskResourceUtilization, networkResourceUtilization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EC2ResourceUtilization {\n");
    sb.append("    maxCpuUtilizationPercentage: ").append(toIndentedString(maxCpuUtilizationPercentage)).append("\n");
    sb.append("    maxMemoryUtilizationPercentage: ").append(toIndentedString(maxMemoryUtilizationPercentage)).append("\n");
    sb.append("    maxStorageUtilizationPercentage: ").append(toIndentedString(maxStorageUtilizationPercentage)).append("\n");
    sb.append("    ebSResourceUtilization: ").append(toIndentedString(ebSResourceUtilization)).append("\n");
    sb.append("    diskResourceUtilization: ").append(toIndentedString(diskResourceUtilization)).append("\n");
    sb.append("    networkResourceUtilization: ").append(toIndentedString(networkResourceUtilization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MaxCpuUtilizationPercentage");
    openapiFields.add("MaxMemoryUtilizationPercentage");
    openapiFields.add("MaxStorageUtilizationPercentage");
    openapiFields.add("EBSResourceUtilization");
    openapiFields.add("DiskResourceUtilization");
    openapiFields.add("NetworkResourceUtilization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EC2ResourceUtilization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EC2ResourceUtilization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EC2ResourceUtilization is not found in the empty JSON string", EC2ResourceUtilization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EC2ResourceUtilization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EC2ResourceUtilization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MaxCpuUtilizationPercentage`
      if (jsonObj.get("MaxCpuUtilizationPercentage") != null && !jsonObj.get("MaxCpuUtilizationPercentage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaxCpuUtilizationPercentage"));
      }
      // validate the optional field `MaxMemoryUtilizationPercentage`
      if (jsonObj.get("MaxMemoryUtilizationPercentage") != null && !jsonObj.get("MaxMemoryUtilizationPercentage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaxMemoryUtilizationPercentage"));
      }
      // validate the optional field `MaxStorageUtilizationPercentage`
      if (jsonObj.get("MaxStorageUtilizationPercentage") != null && !jsonObj.get("MaxStorageUtilizationPercentage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaxStorageUtilizationPercentage"));
      }
      // validate the optional field `EBSResourceUtilization`
      if (jsonObj.get("EBSResourceUtilization") != null && !jsonObj.get("EBSResourceUtilization").isJsonNull()) {
        EC2ResourceUtilizationEBSResourceUtilization.validateJsonElement(jsonObj.get("EBSResourceUtilization"));
      }
      // validate the optional field `DiskResourceUtilization`
      if (jsonObj.get("DiskResourceUtilization") != null && !jsonObj.get("DiskResourceUtilization").isJsonNull()) {
        EC2ResourceUtilizationDiskResourceUtilization.validateJsonElement(jsonObj.get("DiskResourceUtilization"));
      }
      // validate the optional field `NetworkResourceUtilization`
      if (jsonObj.get("NetworkResourceUtilization") != null && !jsonObj.get("NetworkResourceUtilization").isJsonNull()) {
        EC2ResourceUtilizationNetworkResourceUtilization.validateJsonElement(jsonObj.get("NetworkResourceUtilization"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EC2ResourceUtilization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EC2ResourceUtilization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EC2ResourceUtilization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EC2ResourceUtilization.class));

       return (TypeAdapter<T>) new TypeAdapter<EC2ResourceUtilization>() {
           @Override
           public void write(JsonWriter out, EC2ResourceUtilization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EC2ResourceUtilization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EC2ResourceUtilization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EC2ResourceUtilization
   * @throws IOException if the JSON string is invalid with respect to EC2ResourceUtilization
   */
  public static EC2ResourceUtilization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EC2ResourceUtilization.class);
  }

  /**
   * Convert an instance of EC2ResourceUtilization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

