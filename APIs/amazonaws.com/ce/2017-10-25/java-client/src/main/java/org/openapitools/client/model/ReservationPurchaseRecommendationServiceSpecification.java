/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServiceSpecificationEC2Specification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReservationPurchaseRecommendationServiceSpecification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationPurchaseRecommendationServiceSpecification {
  public static final String SERIALIZED_NAME_EC2_SPECIFICATION = "EC2Specification";
  @SerializedName(SERIALIZED_NAME_EC2_SPECIFICATION)
  private ServiceSpecificationEC2Specification ec2Specification;

  public ReservationPurchaseRecommendationServiceSpecification() {
  }

  public ReservationPurchaseRecommendationServiceSpecification ec2Specification(ServiceSpecificationEC2Specification ec2Specification) {
    this.ec2Specification = ec2Specification;
    return this;
  }

  /**
   * Get ec2Specification
   * @return ec2Specification
   */
  @javax.annotation.Nullable
  public ServiceSpecificationEC2Specification getEc2Specification() {
    return ec2Specification;
  }

  public void setEc2Specification(ServiceSpecificationEC2Specification ec2Specification) {
    this.ec2Specification = ec2Specification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationPurchaseRecommendationServiceSpecification reservationPurchaseRecommendationServiceSpecification = (ReservationPurchaseRecommendationServiceSpecification) o;
    return Objects.equals(this.ec2Specification, reservationPurchaseRecommendationServiceSpecification.ec2Specification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ec2Specification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationPurchaseRecommendationServiceSpecification {\n");
    sb.append("    ec2Specification: ").append(toIndentedString(ec2Specification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EC2Specification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationPurchaseRecommendationServiceSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationPurchaseRecommendationServiceSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationPurchaseRecommendationServiceSpecification is not found in the empty JSON string", ReservationPurchaseRecommendationServiceSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationPurchaseRecommendationServiceSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationPurchaseRecommendationServiceSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EC2Specification`
      if (jsonObj.get("EC2Specification") != null && !jsonObj.get("EC2Specification").isJsonNull()) {
        ServiceSpecificationEC2Specification.validateJsonElement(jsonObj.get("EC2Specification"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationPurchaseRecommendationServiceSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationPurchaseRecommendationServiceSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationPurchaseRecommendationServiceSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationPurchaseRecommendationServiceSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationPurchaseRecommendationServiceSpecification>() {
           @Override
           public void write(JsonWriter out, ReservationPurchaseRecommendationServiceSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationPurchaseRecommendationServiceSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationPurchaseRecommendationServiceSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationPurchaseRecommendationServiceSpecification
   * @throws IOException if the JSON string is invalid with respect to ReservationPurchaseRecommendationServiceSpecification
   */
  public static ReservationPurchaseRecommendationServiceSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationPurchaseRecommendationServiceSpecification.class);
  }

  /**
   * Convert an instance of ReservationPurchaseRecommendationServiceSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

