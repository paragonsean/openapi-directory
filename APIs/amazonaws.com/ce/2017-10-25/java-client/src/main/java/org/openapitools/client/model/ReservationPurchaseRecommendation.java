/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountScope;
import org.openapitools.client.model.LookbackPeriodInDays;
import org.openapitools.client.model.PaymentOption;
import org.openapitools.client.model.ReservationPurchaseRecommendationRecommendationSummary;
import org.openapitools.client.model.ReservationPurchaseRecommendationServiceSpecification;
import org.openapitools.client.model.TermInYears;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A specific reservation that Amazon Web Services recommends for purchase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationPurchaseRecommendation {
  public static final String SERIALIZED_NAME_ACCOUNT_SCOPE = "AccountScope";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SCOPE)
  private AccountScope accountScope;

  public static final String SERIALIZED_NAME_LOOKBACK_PERIOD_IN_DAYS = "LookbackPeriodInDays";
  @SerializedName(SERIALIZED_NAME_LOOKBACK_PERIOD_IN_DAYS)
  private LookbackPeriodInDays lookbackPeriodInDays;

  public static final String SERIALIZED_NAME_TERM_IN_YEARS = "TermInYears";
  @SerializedName(SERIALIZED_NAME_TERM_IN_YEARS)
  private TermInYears termInYears;

  public static final String SERIALIZED_NAME_PAYMENT_OPTION = "PaymentOption";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTION)
  private PaymentOption paymentOption;

  public static final String SERIALIZED_NAME_SERVICE_SPECIFICATION = "ServiceSpecification";
  @SerializedName(SERIALIZED_NAME_SERVICE_SPECIFICATION)
  private ReservationPurchaseRecommendationServiceSpecification serviceSpecification;

  public static final String SERIALIZED_NAME_RECOMMENDATION_DETAILS = "RecommendationDetails";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_DETAILS)
  private List recommendationDetails;

  public static final String SERIALIZED_NAME_RECOMMENDATION_SUMMARY = "RecommendationSummary";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_SUMMARY)
  private ReservationPurchaseRecommendationRecommendationSummary recommendationSummary;

  public ReservationPurchaseRecommendation() {
  }

  public ReservationPurchaseRecommendation accountScope(AccountScope accountScope) {
    this.accountScope = accountScope;
    return this;
  }

  /**
   * Get accountScope
   * @return accountScope
   */
  @javax.annotation.Nullable
  public AccountScope getAccountScope() {
    return accountScope;
  }

  public void setAccountScope(AccountScope accountScope) {
    this.accountScope = accountScope;
  }


  public ReservationPurchaseRecommendation lookbackPeriodInDays(LookbackPeriodInDays lookbackPeriodInDays) {
    this.lookbackPeriodInDays = lookbackPeriodInDays;
    return this;
  }

  /**
   * Get lookbackPeriodInDays
   * @return lookbackPeriodInDays
   */
  @javax.annotation.Nullable
  public LookbackPeriodInDays getLookbackPeriodInDays() {
    return lookbackPeriodInDays;
  }

  public void setLookbackPeriodInDays(LookbackPeriodInDays lookbackPeriodInDays) {
    this.lookbackPeriodInDays = lookbackPeriodInDays;
  }


  public ReservationPurchaseRecommendation termInYears(TermInYears termInYears) {
    this.termInYears = termInYears;
    return this;
  }

  /**
   * Get termInYears
   * @return termInYears
   */
  @javax.annotation.Nullable
  public TermInYears getTermInYears() {
    return termInYears;
  }

  public void setTermInYears(TermInYears termInYears) {
    this.termInYears = termInYears;
  }


  public ReservationPurchaseRecommendation paymentOption(PaymentOption paymentOption) {
    this.paymentOption = paymentOption;
    return this;
  }

  /**
   * Get paymentOption
   * @return paymentOption
   */
  @javax.annotation.Nullable
  public PaymentOption getPaymentOption() {
    return paymentOption;
  }

  public void setPaymentOption(PaymentOption paymentOption) {
    this.paymentOption = paymentOption;
  }


  public ReservationPurchaseRecommendation serviceSpecification(ReservationPurchaseRecommendationServiceSpecification serviceSpecification) {
    this.serviceSpecification = serviceSpecification;
    return this;
  }

  /**
   * Get serviceSpecification
   * @return serviceSpecification
   */
  @javax.annotation.Nullable
  public ReservationPurchaseRecommendationServiceSpecification getServiceSpecification() {
    return serviceSpecification;
  }

  public void setServiceSpecification(ReservationPurchaseRecommendationServiceSpecification serviceSpecification) {
    this.serviceSpecification = serviceSpecification;
  }


  public ReservationPurchaseRecommendation recommendationDetails(List recommendationDetails) {
    this.recommendationDetails = recommendationDetails;
    return this;
  }

  /**
   * Get recommendationDetails
   * @return recommendationDetails
   */
  @javax.annotation.Nullable
  public List getRecommendationDetails() {
    return recommendationDetails;
  }

  public void setRecommendationDetails(List recommendationDetails) {
    this.recommendationDetails = recommendationDetails;
  }


  public ReservationPurchaseRecommendation recommendationSummary(ReservationPurchaseRecommendationRecommendationSummary recommendationSummary) {
    this.recommendationSummary = recommendationSummary;
    return this;
  }

  /**
   * Get recommendationSummary
   * @return recommendationSummary
   */
  @javax.annotation.Nullable
  public ReservationPurchaseRecommendationRecommendationSummary getRecommendationSummary() {
    return recommendationSummary;
  }

  public void setRecommendationSummary(ReservationPurchaseRecommendationRecommendationSummary recommendationSummary) {
    this.recommendationSummary = recommendationSummary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationPurchaseRecommendation reservationPurchaseRecommendation = (ReservationPurchaseRecommendation) o;
    return Objects.equals(this.accountScope, reservationPurchaseRecommendation.accountScope) &&
        Objects.equals(this.lookbackPeriodInDays, reservationPurchaseRecommendation.lookbackPeriodInDays) &&
        Objects.equals(this.termInYears, reservationPurchaseRecommendation.termInYears) &&
        Objects.equals(this.paymentOption, reservationPurchaseRecommendation.paymentOption) &&
        Objects.equals(this.serviceSpecification, reservationPurchaseRecommendation.serviceSpecification) &&
        Objects.equals(this.recommendationDetails, reservationPurchaseRecommendation.recommendationDetails) &&
        Objects.equals(this.recommendationSummary, reservationPurchaseRecommendation.recommendationSummary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountScope, lookbackPeriodInDays, termInYears, paymentOption, serviceSpecification, recommendationDetails, recommendationSummary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationPurchaseRecommendation {\n");
    sb.append("    accountScope: ").append(toIndentedString(accountScope)).append("\n");
    sb.append("    lookbackPeriodInDays: ").append(toIndentedString(lookbackPeriodInDays)).append("\n");
    sb.append("    termInYears: ").append(toIndentedString(termInYears)).append("\n");
    sb.append("    paymentOption: ").append(toIndentedString(paymentOption)).append("\n");
    sb.append("    serviceSpecification: ").append(toIndentedString(serviceSpecification)).append("\n");
    sb.append("    recommendationDetails: ").append(toIndentedString(recommendationDetails)).append("\n");
    sb.append("    recommendationSummary: ").append(toIndentedString(recommendationSummary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountScope");
    openapiFields.add("LookbackPeriodInDays");
    openapiFields.add("TermInYears");
    openapiFields.add("PaymentOption");
    openapiFields.add("ServiceSpecification");
    openapiFields.add("RecommendationDetails");
    openapiFields.add("RecommendationSummary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationPurchaseRecommendation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationPurchaseRecommendation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationPurchaseRecommendation is not found in the empty JSON string", ReservationPurchaseRecommendation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationPurchaseRecommendation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationPurchaseRecommendation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AccountScope`
      if (jsonObj.get("AccountScope") != null && !jsonObj.get("AccountScope").isJsonNull()) {
        AccountScope.validateJsonElement(jsonObj.get("AccountScope"));
      }
      // validate the optional field `LookbackPeriodInDays`
      if (jsonObj.get("LookbackPeriodInDays") != null && !jsonObj.get("LookbackPeriodInDays").isJsonNull()) {
        LookbackPeriodInDays.validateJsonElement(jsonObj.get("LookbackPeriodInDays"));
      }
      // validate the optional field `TermInYears`
      if (jsonObj.get("TermInYears") != null && !jsonObj.get("TermInYears").isJsonNull()) {
        TermInYears.validateJsonElement(jsonObj.get("TermInYears"));
      }
      // validate the optional field `PaymentOption`
      if (jsonObj.get("PaymentOption") != null && !jsonObj.get("PaymentOption").isJsonNull()) {
        PaymentOption.validateJsonElement(jsonObj.get("PaymentOption"));
      }
      // validate the optional field `ServiceSpecification`
      if (jsonObj.get("ServiceSpecification") != null && !jsonObj.get("ServiceSpecification").isJsonNull()) {
        ReservationPurchaseRecommendationServiceSpecification.validateJsonElement(jsonObj.get("ServiceSpecification"));
      }
      // validate the optional field `RecommendationDetails`
      if (jsonObj.get("RecommendationDetails") != null && !jsonObj.get("RecommendationDetails").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RecommendationDetails"));
      }
      // validate the optional field `RecommendationSummary`
      if (jsonObj.get("RecommendationSummary") != null && !jsonObj.get("RecommendationSummary").isJsonNull()) {
        ReservationPurchaseRecommendationRecommendationSummary.validateJsonElement(jsonObj.get("RecommendationSummary"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationPurchaseRecommendation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationPurchaseRecommendation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationPurchaseRecommendation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationPurchaseRecommendation.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationPurchaseRecommendation>() {
           @Override
           public void write(JsonWriter out, ReservationPurchaseRecommendation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationPurchaseRecommendation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationPurchaseRecommendation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationPurchaseRecommendation
   * @throws IOException if the JSON string is invalid with respect to ReservationPurchaseRecommendation
   */
  public static ReservationPurchaseRecommendation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationPurchaseRecommendation.class);
  }

  /**
   * Convert an instance of ReservationPurchaseRecommendation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

