/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetCostForecastRequestFilter;
import org.openapitools.client.model.GetCostForecastRequestTimePeriod;
import org.openapitools.client.model.Granularity;
import org.openapitools.client.model.Metric;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetCostForecastRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:27.831158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCostForecastRequest {
  public static final String SERIALIZED_NAME_TIME_PERIOD = "TimePeriod";
  @SerializedName(SERIALIZED_NAME_TIME_PERIOD)
  private GetCostForecastRequestTimePeriod timePeriod;

  public static final String SERIALIZED_NAME_METRIC = "Metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private Metric metric;

  public static final String SERIALIZED_NAME_GRANULARITY = "Granularity";
  @SerializedName(SERIALIZED_NAME_GRANULARITY)
  private Granularity granularity;

  public static final String SERIALIZED_NAME_FILTER = "Filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private GetCostForecastRequestFilter filter;

  public static final String SERIALIZED_NAME_PREDICTION_INTERVAL_LEVEL = "PredictionIntervalLevel";
  @SerializedName(SERIALIZED_NAME_PREDICTION_INTERVAL_LEVEL)
  private Integer predictionIntervalLevel;

  public GetCostForecastRequest() {
  }

  public GetCostForecastRequest timePeriod(GetCostForecastRequestTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
    return this;
  }

  /**
   * Get timePeriod
   * @return timePeriod
   */
  @javax.annotation.Nonnull
  public GetCostForecastRequestTimePeriod getTimePeriod() {
    return timePeriod;
  }

  public void setTimePeriod(GetCostForecastRequestTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
  }


  public GetCostForecastRequest metric(Metric metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Get metric
   * @return metric
   */
  @javax.annotation.Nonnull
  public Metric getMetric() {
    return metric;
  }

  public void setMetric(Metric metric) {
    this.metric = metric;
  }


  public GetCostForecastRequest granularity(Granularity granularity) {
    this.granularity = granularity;
    return this;
  }

  /**
   * Get granularity
   * @return granularity
   */
  @javax.annotation.Nonnull
  public Granularity getGranularity() {
    return granularity;
  }

  public void setGranularity(Granularity granularity) {
    this.granularity = granularity;
  }


  public GetCostForecastRequest filter(GetCostForecastRequestFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public GetCostForecastRequestFilter getFilter() {
    return filter;
  }

  public void setFilter(GetCostForecastRequestFilter filter) {
    this.filter = filter;
  }


  public GetCostForecastRequest predictionIntervalLevel(Integer predictionIntervalLevel) {
    this.predictionIntervalLevel = predictionIntervalLevel;
    return this;
  }

  /**
   * Get predictionIntervalLevel
   * @return predictionIntervalLevel
   */
  @javax.annotation.Nullable
  public Integer getPredictionIntervalLevel() {
    return predictionIntervalLevel;
  }

  public void setPredictionIntervalLevel(Integer predictionIntervalLevel) {
    this.predictionIntervalLevel = predictionIntervalLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCostForecastRequest getCostForecastRequest = (GetCostForecastRequest) o;
    return Objects.equals(this.timePeriod, getCostForecastRequest.timePeriod) &&
        Objects.equals(this.metric, getCostForecastRequest.metric) &&
        Objects.equals(this.granularity, getCostForecastRequest.granularity) &&
        Objects.equals(this.filter, getCostForecastRequest.filter) &&
        Objects.equals(this.predictionIntervalLevel, getCostForecastRequest.predictionIntervalLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timePeriod, metric, granularity, filter, predictionIntervalLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCostForecastRequest {\n");
    sb.append("    timePeriod: ").append(toIndentedString(timePeriod)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    granularity: ").append(toIndentedString(granularity)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    predictionIntervalLevel: ").append(toIndentedString(predictionIntervalLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TimePeriod");
    openapiFields.add("Metric");
    openapiFields.add("Granularity");
    openapiFields.add("Filter");
    openapiFields.add("PredictionIntervalLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TimePeriod");
    openapiRequiredFields.add("Metric");
    openapiRequiredFields.add("Granularity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCostForecastRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCostForecastRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCostForecastRequest is not found in the empty JSON string", GetCostForecastRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCostForecastRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCostForecastRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCostForecastRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TimePeriod`
      GetCostForecastRequestTimePeriod.validateJsonElement(jsonObj.get("TimePeriod"));
      // validate the required field `Metric`
      Metric.validateJsonElement(jsonObj.get("Metric"));
      // validate the required field `Granularity`
      Granularity.validateJsonElement(jsonObj.get("Granularity"));
      // validate the optional field `Filter`
      if (jsonObj.get("Filter") != null && !jsonObj.get("Filter").isJsonNull()) {
        GetCostForecastRequestFilter.validateJsonElement(jsonObj.get("Filter"));
      }
      // validate the optional field `PredictionIntervalLevel`
      if (jsonObj.get("PredictionIntervalLevel") != null && !jsonObj.get("PredictionIntervalLevel").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PredictionIntervalLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCostForecastRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCostForecastRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCostForecastRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCostForecastRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCostForecastRequest>() {
           @Override
           public void write(JsonWriter out, GetCostForecastRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCostForecastRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCostForecastRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCostForecastRequest
   * @throws IOException if the JSON string is invalid with respect to GetCostForecastRequest
   */
  public static GetCostForecastRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCostForecastRequest.class);
  }

  /**
   * Convert an instance of GetCostForecastRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

