/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Expression;
import org.openapitools.client.model.MonitorDimension;
import org.openapitools.client.model.MonitorType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AnomalyMonitor
 */
public class AnomalyMonitorTest {
    private final AnomalyMonitor model = new AnomalyMonitor();

    /**
     * Model tests for AnomalyMonitor
     */
    @Test
    public void testAnomalyMonitor() {
        // TODO: test AnomalyMonitor
    }

    /**
     * Test the property 'monitorArn'
     */
    @Test
    public void monitorArnTest() {
        // TODO: test monitorArn
    }

    /**
     * Test the property 'monitorName'
     */
    @Test
    public void monitorNameTest() {
        // TODO: test monitorName
    }

    /**
     * Test the property 'creationDate'
     */
    @Test
    public void creationDateTest() {
        // TODO: test creationDate
    }

    /**
     * Test the property 'lastUpdatedDate'
     */
    @Test
    public void lastUpdatedDateTest() {
        // TODO: test lastUpdatedDate
    }

    /**
     * Test the property 'lastEvaluatedDate'
     */
    @Test
    public void lastEvaluatedDateTest() {
        // TODO: test lastEvaluatedDate
    }

    /**
     * Test the property 'monitorType'
     */
    @Test
    public void monitorTypeTest() {
        // TODO: test monitorType
    }

    /**
     * Test the property 'monitorDimension'
     */
    @Test
    public void monitorDimensionTest() {
        // TODO: test monitorDimension
    }

    /**
     * Test the property 'monitorSpecification'
     */
    @Test
    public void monitorSpecificationTest() {
        // TODO: test monitorSpecification
    }

    /**
     * Test the property 'dimensionalValueCount'
     */
    @Test
    public void dimensionalValueCountTest() {
        // TODO: test dimensionalValueCount
    }

}
