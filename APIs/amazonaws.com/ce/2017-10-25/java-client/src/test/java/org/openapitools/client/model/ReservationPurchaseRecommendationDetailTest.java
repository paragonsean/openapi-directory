/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReservationPurchaseRecommendationDetailInstanceDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ReservationPurchaseRecommendationDetail
 */
public class ReservationPurchaseRecommendationDetailTest {
    private final ReservationPurchaseRecommendationDetail model = new ReservationPurchaseRecommendationDetail();

    /**
     * Model tests for ReservationPurchaseRecommendationDetail
     */
    @Test
    public void testReservationPurchaseRecommendationDetail() {
        // TODO: test ReservationPurchaseRecommendationDetail
    }

    /**
     * Test the property 'accountId'
     */
    @Test
    public void accountIdTest() {
        // TODO: test accountId
    }

    /**
     * Test the property 'instanceDetails'
     */
    @Test
    public void instanceDetailsTest() {
        // TODO: test instanceDetails
    }

    /**
     * Test the property 'recommendedNumberOfInstancesToPurchase'
     */
    @Test
    public void recommendedNumberOfInstancesToPurchaseTest() {
        // TODO: test recommendedNumberOfInstancesToPurchase
    }

    /**
     * Test the property 'recommendedNormalizedUnitsToPurchase'
     */
    @Test
    public void recommendedNormalizedUnitsToPurchaseTest() {
        // TODO: test recommendedNormalizedUnitsToPurchase
    }

    /**
     * Test the property 'minimumNumberOfInstancesUsedPerHour'
     */
    @Test
    public void minimumNumberOfInstancesUsedPerHourTest() {
        // TODO: test minimumNumberOfInstancesUsedPerHour
    }

    /**
     * Test the property 'minimumNormalizedUnitsUsedPerHour'
     */
    @Test
    public void minimumNormalizedUnitsUsedPerHourTest() {
        // TODO: test minimumNormalizedUnitsUsedPerHour
    }

    /**
     * Test the property 'maximumNumberOfInstancesUsedPerHour'
     */
    @Test
    public void maximumNumberOfInstancesUsedPerHourTest() {
        // TODO: test maximumNumberOfInstancesUsedPerHour
    }

    /**
     * Test the property 'maximumNormalizedUnitsUsedPerHour'
     */
    @Test
    public void maximumNormalizedUnitsUsedPerHourTest() {
        // TODO: test maximumNormalizedUnitsUsedPerHour
    }

    /**
     * Test the property 'averageNumberOfInstancesUsedPerHour'
     */
    @Test
    public void averageNumberOfInstancesUsedPerHourTest() {
        // TODO: test averageNumberOfInstancesUsedPerHour
    }

    /**
     * Test the property 'averageNormalizedUnitsUsedPerHour'
     */
    @Test
    public void averageNormalizedUnitsUsedPerHourTest() {
        // TODO: test averageNormalizedUnitsUsedPerHour
    }

    /**
     * Test the property 'averageUtilization'
     */
    @Test
    public void averageUtilizationTest() {
        // TODO: test averageUtilization
    }

    /**
     * Test the property 'estimatedBreakEvenInMonths'
     */
    @Test
    public void estimatedBreakEvenInMonthsTest() {
        // TODO: test estimatedBreakEvenInMonths
    }

    /**
     * Test the property 'currencyCode'
     */
    @Test
    public void currencyCodeTest() {
        // TODO: test currencyCode
    }

    /**
     * Test the property 'estimatedMonthlySavingsAmount'
     */
    @Test
    public void estimatedMonthlySavingsAmountTest() {
        // TODO: test estimatedMonthlySavingsAmount
    }

    /**
     * Test the property 'estimatedMonthlySavingsPercentage'
     */
    @Test
    public void estimatedMonthlySavingsPercentageTest() {
        // TODO: test estimatedMonthlySavingsPercentage
    }

    /**
     * Test the property 'estimatedMonthlyOnDemandCost'
     */
    @Test
    public void estimatedMonthlyOnDemandCostTest() {
        // TODO: test estimatedMonthlyOnDemandCost
    }

    /**
     * Test the property 'estimatedReservationCostForLookbackPeriod'
     */
    @Test
    public void estimatedReservationCostForLookbackPeriodTest() {
        // TODO: test estimatedReservationCostForLookbackPeriod
    }

    /**
     * Test the property 'upfrontCost'
     */
    @Test
    public void upfrontCostTest() {
        // TODO: test upfrontCost
    }

    /**
     * Test the property 'recurringStandardMonthlyCost'
     */
    @Test
    public void recurringStandardMonthlyCostTest() {
        // TODO: test recurringStandardMonthlyCost
    }

}
