/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for SavingsPlansPurchaseRecommendationSummary
 */
public class SavingsPlansPurchaseRecommendationSummaryTest {
    private final SavingsPlansPurchaseRecommendationSummary model = new SavingsPlansPurchaseRecommendationSummary();

    /**
     * Model tests for SavingsPlansPurchaseRecommendationSummary
     */
    @Test
    public void testSavingsPlansPurchaseRecommendationSummary() {
        // TODO: test SavingsPlansPurchaseRecommendationSummary
    }

    /**
     * Test the property 'estimatedROI'
     */
    @Test
    public void estimatedROITest() {
        // TODO: test estimatedROI
    }

    /**
     * Test the property 'currencyCode'
     */
    @Test
    public void currencyCodeTest() {
        // TODO: test currencyCode
    }

    /**
     * Test the property 'estimatedTotalCost'
     */
    @Test
    public void estimatedTotalCostTest() {
        // TODO: test estimatedTotalCost
    }

    /**
     * Test the property 'currentOnDemandSpend'
     */
    @Test
    public void currentOnDemandSpendTest() {
        // TODO: test currentOnDemandSpend
    }

    /**
     * Test the property 'estimatedSavingsAmount'
     */
    @Test
    public void estimatedSavingsAmountTest() {
        // TODO: test estimatedSavingsAmount
    }

    /**
     * Test the property 'totalRecommendationCount'
     */
    @Test
    public void totalRecommendationCountTest() {
        // TODO: test totalRecommendationCount
    }

    /**
     * Test the property 'dailyCommitmentToPurchase'
     */
    @Test
    public void dailyCommitmentToPurchaseTest() {
        // TODO: test dailyCommitmentToPurchase
    }

    /**
     * Test the property 'hourlyCommitmentToPurchase'
     */
    @Test
    public void hourlyCommitmentToPurchaseTest() {
        // TODO: test hourlyCommitmentToPurchase
    }

    /**
     * Test the property 'estimatedSavingsPercentage'
     */
    @Test
    public void estimatedSavingsPercentageTest() {
        // TODO: test estimatedSavingsPercentage
    }

    /**
     * Test the property 'estimatedMonthlySavingsAmount'
     */
    @Test
    public void estimatedMonthlySavingsAmountTest() {
        // TODO: test estimatedMonthlySavingsAmount
    }

    /**
     * Test the property 'estimatedOnDemandCostWithCurrentCommitment'
     */
    @Test
    public void estimatedOnDemandCostWithCurrentCommitmentTest() {
        // TODO: test estimatedOnDemandCostWithCurrentCommitment
    }

}
