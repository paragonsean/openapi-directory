/*
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateAnomalyMonitorRequest;
import org.openapitools.client.model.CreateAnomalyMonitorResponse;
import org.openapitools.client.model.CreateAnomalySubscriptionRequest;
import org.openapitools.client.model.CreateAnomalySubscriptionResponse;
import org.openapitools.client.model.CreateCostCategoryDefinitionRequest;
import org.openapitools.client.model.CreateCostCategoryDefinitionResponse;
import org.openapitools.client.model.DeleteAnomalyMonitorRequest;
import org.openapitools.client.model.DeleteAnomalySubscriptionRequest;
import org.openapitools.client.model.DeleteCostCategoryDefinitionRequest;
import org.openapitools.client.model.DeleteCostCategoryDefinitionResponse;
import org.openapitools.client.model.DescribeCostCategoryDefinitionRequest;
import org.openapitools.client.model.DescribeCostCategoryDefinitionResponse;
import org.openapitools.client.model.GetAnomaliesRequest;
import org.openapitools.client.model.GetAnomaliesResponse;
import org.openapitools.client.model.GetAnomalyMonitorsRequest;
import org.openapitools.client.model.GetAnomalyMonitorsResponse;
import org.openapitools.client.model.GetAnomalySubscriptionsRequest;
import org.openapitools.client.model.GetAnomalySubscriptionsResponse;
import org.openapitools.client.model.GetCostAndUsageRequest;
import org.openapitools.client.model.GetCostAndUsageResponse;
import org.openapitools.client.model.GetCostAndUsageWithResourcesRequest;
import org.openapitools.client.model.GetCostAndUsageWithResourcesResponse;
import org.openapitools.client.model.GetCostCategoriesRequest;
import org.openapitools.client.model.GetCostCategoriesResponse;
import org.openapitools.client.model.GetCostForecastRequest;
import org.openapitools.client.model.GetCostForecastResponse;
import org.openapitools.client.model.GetDimensionValuesRequest;
import org.openapitools.client.model.GetDimensionValuesResponse;
import org.openapitools.client.model.GetReservationCoverageRequest;
import org.openapitools.client.model.GetReservationCoverageResponse;
import org.openapitools.client.model.GetReservationPurchaseRecommendationRequest;
import org.openapitools.client.model.GetReservationPurchaseRecommendationResponse;
import org.openapitools.client.model.GetReservationUtilizationRequest;
import org.openapitools.client.model.GetReservationUtilizationResponse;
import org.openapitools.client.model.GetRightsizingRecommendationRequest;
import org.openapitools.client.model.GetRightsizingRecommendationResponse;
import org.openapitools.client.model.GetSavingsPlanPurchaseRecommendationDetailsRequest;
import org.openapitools.client.model.GetSavingsPlanPurchaseRecommendationDetailsResponse;
import org.openapitools.client.model.GetSavingsPlansCoverageRequest;
import org.openapitools.client.model.GetSavingsPlansCoverageResponse;
import org.openapitools.client.model.GetSavingsPlansPurchaseRecommendationRequest;
import org.openapitools.client.model.GetSavingsPlansPurchaseRecommendationResponse;
import org.openapitools.client.model.GetSavingsPlansUtilizationDetailsRequest;
import org.openapitools.client.model.GetSavingsPlansUtilizationDetailsResponse;
import org.openapitools.client.model.GetSavingsPlansUtilizationRequest;
import org.openapitools.client.model.GetSavingsPlansUtilizationResponse;
import org.openapitools.client.model.GetTagsRequest;
import org.openapitools.client.model.GetTagsResponse;
import org.openapitools.client.model.GetUsageForecastRequest;
import org.openapitools.client.model.GetUsageForecastResponse;
import org.openapitools.client.model.ListCostAllocationTagsRequest;
import org.openapitools.client.model.ListCostAllocationTagsResponse;
import org.openapitools.client.model.ListCostCategoryDefinitionsRequest;
import org.openapitools.client.model.ListCostCategoryDefinitionsResponse;
import org.openapitools.client.model.ListSavingsPlansPurchaseRecommendationGenerationRequest;
import org.openapitools.client.model.ListSavingsPlansPurchaseRecommendationGenerationResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ProvideAnomalyFeedbackRequest;
import org.openapitools.client.model.ProvideAnomalyFeedbackResponse;
import org.openapitools.client.model.StartSavingsPlansPurchaseRecommendationGenerationResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateAnomalyMonitorRequest;
import org.openapitools.client.model.UpdateAnomalyMonitorResponse;
import org.openapitools.client.model.UpdateAnomalySubscriptionRequest;
import org.openapitools.client.model.UpdateAnomalySubscriptionResponse;
import org.openapitools.client.model.UpdateCostAllocationTagsStatusRequest;
import org.openapitools.client.model.UpdateCostAllocationTagsStatusResponse;
import org.openapitools.client.model.UpdateCostCategoryDefinitionRequest;
import org.openapitools.client.model.UpdateCostCategoryDefinitionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates a new cost anomaly detection monitor with the requested type and monitor specification. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnomalyMonitorTest() throws ApiException {
        String xAmzTarget = null;
        CreateAnomalyMonitorRequest createAnomalyMonitorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAnomalyMonitorResponse response = api.createAnomalyMonitor(xAmzTarget, createAnomalyMonitorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds an alert subscription to a cost anomaly detection monitor. You can use each subscription to define subscribers with email or SNS notifications. Email subscribers can set an absolute or percentage threshold and a time frequency for receiving notifications. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnomalySubscriptionTest() throws ApiException {
        String xAmzTarget = null;
        CreateAnomalySubscriptionRequest createAnomalySubscriptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAnomalySubscriptionResponse response = api.createAnomalySubscription(xAmzTarget, createAnomalySubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new Cost Category with the requested name and rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCostCategoryDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        CreateCostCategoryDefinitionRequest createCostCategoryDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCostCategoryDefinitionResponse response = api.createCostCategoryDefinition(xAmzTarget, createCostCategoryDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a cost anomaly monitor. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnomalyMonitorTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAnomalyMonitorRequest deleteAnomalyMonitorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAnomalyMonitor(xAmzTarget, deleteAnomalyMonitorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a cost anomaly subscription. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnomalySubscriptionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAnomalySubscriptionRequest deleteAnomalySubscriptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAnomalySubscription(xAmzTarget, deleteAnomalySubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Cost Category. Expenses from this month going forward will no longer be categorized with this Cost Category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCostCategoryDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteCostCategoryDefinitionRequest deleteCostCategoryDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteCostCategoryDefinitionResponse response = api.deleteCostCategoryDefinition(xAmzTarget, deleteCostCategoryDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the name, Amazon Resource Name (ARN), rules, definition, and effective dates of a Cost Category that&#39;s defined in the account.&lt;/p&gt; &lt;p&gt;You have the option to use &lt;code&gt;EffectiveOn&lt;/code&gt; to return a Cost Category that&#39;s active on a specific date. If there&#39;s no &lt;code&gt;EffectiveOn&lt;/code&gt; specified, you see a Cost Category that&#39;s effective on the current date. If Cost Category is still effective, &lt;code&gt;EffectiveEnd&lt;/code&gt; is omitted in the response. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCostCategoryDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeCostCategoryDefinitionRequest describeCostCategoryDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeCostCategoryDefinitionResponse response = api.describeCostCategoryDefinition(xAmzTarget, describeCostCategoryDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves all of the cost anomalies detected on your account during the time period that&#39;s specified by the &lt;code&gt;DateInterval&lt;/code&gt; object. Anomalies are available for up to 90 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnomaliesTest() throws ApiException {
        String xAmzTarget = null;
        GetAnomaliesRequest getAnomaliesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAnomaliesResponse response = api.getAnomalies(xAmzTarget, getAnomaliesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the cost anomaly monitor definitions for your account. You can filter using a list of cost anomaly monitor Amazon Resource Names (ARNs). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnomalyMonitorsTest() throws ApiException {
        String xAmzTarget = null;
        GetAnomalyMonitorsRequest getAnomalyMonitorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAnomalyMonitorsResponse response = api.getAnomalyMonitors(xAmzTarget, getAnomalyMonitorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the cost anomaly subscription objects for your account. You can filter using a list of cost anomaly monitor Amazon Resource Names (ARNs). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnomalySubscriptionsTest() throws ApiException {
        String xAmzTarget = null;
        GetAnomalySubscriptionsRequest getAnomalySubscriptionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAnomalySubscriptionsResponse response = api.getAnomalySubscriptions(xAmzTarget, getAnomalySubscriptionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves cost and usage metrics for your account. You can specify which cost and usage-related metric that you want the request to return. For example, you can specify &lt;code&gt;BlendedCosts&lt;/code&gt; or &lt;code&gt;UsageQuantity&lt;/code&gt;. You can also filter and group your data by various dimensions, such as &lt;code&gt;SERVICE&lt;/code&gt; or &lt;code&gt;AZ&lt;/code&gt;, in a specific time range. For a complete list of valid dimensions, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_GetDimensionValues.html\&quot;&gt;GetDimensionValues&lt;/a&gt; operation. Management account in an organization in Organizations have access to all member accounts.&lt;/p&gt; &lt;p&gt;For information about filter limitations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billing-limits.html\&quot;&gt;Quotas and restrictions&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCostAndUsageTest() throws ApiException {
        String xAmzTarget = null;
        GetCostAndUsageRequest getCostAndUsageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCostAndUsageResponse response = api.getCostAndUsage(xAmzTarget, getCostAndUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves cost and usage metrics with resources for your account. You can specify which cost and usage-related metric, such as &lt;code&gt;BlendedCosts&lt;/code&gt; or &lt;code&gt;UsageQuantity&lt;/code&gt;, that you want the request to return. You can also filter and group your data by various dimensions, such as &lt;code&gt;SERVICE&lt;/code&gt; or &lt;code&gt;AZ&lt;/code&gt;, in a specific time range. For a complete list of valid dimensions, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_GetDimensionValues.html\&quot;&gt;GetDimensionValues&lt;/a&gt; operation. Management account in an organization in Organizations have access to all member accounts. This API is currently available for the Amazon Elastic Compute Cloud – Compute service only.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This is an opt-in only feature. You can enable this feature from the Cost Explorer Settings page. For information about how to access the Settings page, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/ce-access.html\&quot;&gt;Controlling Access for Cost Explorer&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCostAndUsageWithResourcesTest() throws ApiException {
        String xAmzTarget = null;
        GetCostAndUsageWithResourcesRequest getCostAndUsageWithResourcesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCostAndUsageWithResourcesResponse response = api.getCostAndUsageWithResources(xAmzTarget, getCostAndUsageWithResourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves an array of Cost Category names and values incurred cost.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If some Cost Category names and values are not associated with any cost, they will not be returned by this API.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCostCategoriesTest() throws ApiException {
        String xAmzTarget = null;
        GetCostCategoriesRequest getCostCategoriesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCostCategoriesResponse response = api.getCostCategories(xAmzTarget, getCostCategoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a forecast for how much Amazon Web Services predicts that you will spend over the forecast time period that you select, based on your past costs. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCostForecastTest() throws ApiException {
        String xAmzTarget = null;
        GetCostForecastRequest getCostForecastRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCostForecastResponse response = api.getCostForecast(xAmzTarget, getCostForecastRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves all available filter values for a specified filter over a period of time. You can search the dimension values for an arbitrary string. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDimensionValuesTest() throws ApiException {
        String xAmzTarget = null;
        GetDimensionValuesRequest getDimensionValuesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDimensionValuesResponse response = api.getDimensionValues(xAmzTarget, getDimensionValuesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the reservation coverage for your account, which you can use to see how much of your Amazon Elastic Compute Cloud, Amazon ElastiCache, Amazon Relational Database Service, or Amazon Redshift usage is covered by a reservation. An organization&#39;s management account can see the coverage of the associated member accounts. This supports dimensions, Cost Categories, and nested expressions. For any time period, you can filter data about reservation usage by the following dimensions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;AZ&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CACHE_ENGINE&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;DATABASE_ENGINE&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;DEPLOYMENT_OPTION&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;INSTANCE_TYPE&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;LINKED_ACCOUNT&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;OPERATING_SYSTEM&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;PLATFORM&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;REGION&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;SERVICE&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;TAG&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;TENANCY&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To determine valid values for a dimension, use the &lt;code&gt;GetDimensionValues&lt;/code&gt; operation. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReservationCoverageTest() throws ApiException {
        String xAmzTarget = null;
        GetReservationCoverageRequest getReservationCoverageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetReservationCoverageResponse response = api.getReservationCoverage(xAmzTarget, getReservationCoverageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets recommendations for reservation purchases. These recommendations might help you to reduce your costs. Reservations provide a discounted hourly rate (up to 75%) compared to On-Demand pricing.&lt;/p&gt; &lt;p&gt;Amazon Web Services generates your recommendations by identifying your On-Demand usage during a specific time period and collecting your usage into categories that are eligible for a reservation. After Amazon Web Services has these categories, it simulates every combination of reservations in each category of usage to identify the best number of each type of Reserved Instance (RI) to purchase to maximize your estimated savings. &lt;/p&gt; &lt;p&gt;For example, Amazon Web Services automatically aggregates your Amazon EC2 Linux, shared tenancy, and c4 family usage in the US West (Oregon) Region and recommends that you buy size-flexible regional reservations to apply to the c4 family usage. Amazon Web Services recommends the smallest size instance in an instance family. This makes it easier to purchase a size-flexible Reserved Instance (RI). Amazon Web Services also shows the equal number of normalized units. This way, you can purchase any instance size that you want. For this example, your RI recommendation is for &lt;code&gt;c4.large&lt;/code&gt; because that is the smallest size instance in the c4 instance family.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReservationPurchaseRecommendationTest() throws ApiException {
        String xAmzTarget = null;
        GetReservationPurchaseRecommendationRequest getReservationPurchaseRecommendationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetReservationPurchaseRecommendationResponse response = api.getReservationPurchaseRecommendation(xAmzTarget, getReservationPurchaseRecommendationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the reservation utilization for your account. Management account in an organization have access to member accounts. You can filter data by dimensions in a time period. You can use &lt;code&gt;GetDimensionValues&lt;/code&gt; to determine the possible dimension values. Currently, you can group only by &lt;code&gt;SUBSCRIPTION_ID&lt;/code&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReservationUtilizationTest() throws ApiException {
        String xAmzTarget = null;
        GetReservationUtilizationRequest getReservationUtilizationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetReservationUtilizationResponse response = api.getReservationUtilization(xAmzTarget, getReservationUtilizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates recommendations that help you save cost by identifying idle and underutilized Amazon EC2 instances.&lt;/p&gt; &lt;p&gt;Recommendations are generated to either downsize or terminate instances, along with providing savings detail and metrics. For more information about calculation and function, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/ce-rightsizing.html\&quot;&gt;Optimizing Your Cost with Rightsizing Recommendations&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRightsizingRecommendationTest() throws ApiException {
        String xAmzTarget = null;
        GetRightsizingRecommendationRequest getRightsizingRecommendationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRightsizingRecommendationResponse response = api.getRightsizingRecommendation(xAmzTarget, getRightsizingRecommendationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the details for a Savings Plan recommendation. These details include the hourly data-points that construct the new cost, coverage, and utilization charts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSavingsPlanPurchaseRecommendationDetailsTest() throws ApiException {
        String xAmzTarget = null;
        GetSavingsPlanPurchaseRecommendationDetailsRequest getSavingsPlanPurchaseRecommendationDetailsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSavingsPlanPurchaseRecommendationDetailsResponse response = api.getSavingsPlanPurchaseRecommendationDetails(xAmzTarget, getSavingsPlanPurchaseRecommendationDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the Savings Plans covered for your account. This enables you to see how much of your cost is covered by a Savings Plan. An organization’s management account can see the coverage of the associated member accounts. This supports dimensions, Cost Categories, and nested expressions. For any time period, you can filter data for Savings Plans usage with the following dimensions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LINKED_ACCOUNT&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;REGION&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SERVICE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INSTANCE_FAMILY&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To determine valid values for a dimension, use the &lt;code&gt;GetDimensionValues&lt;/code&gt; operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSavingsPlansCoverageTest() throws ApiException {
        String xAmzTarget = null;
        GetSavingsPlansCoverageRequest getSavingsPlansCoverageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetSavingsPlansCoverageResponse response = api.getSavingsPlansCoverage(xAmzTarget, getSavingsPlansCoverageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the Savings Plans recommendations for your account. First use &lt;code&gt;StartSavingsPlansPurchaseRecommendationGeneration&lt;/code&gt; to generate a new set of recommendations, and then use &lt;code&gt;GetSavingsPlansPurchaseRecommendation&lt;/code&gt; to retrieve them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSavingsPlansPurchaseRecommendationTest() throws ApiException {
        String xAmzTarget = null;
        GetSavingsPlansPurchaseRecommendationRequest getSavingsPlansPurchaseRecommendationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSavingsPlansPurchaseRecommendationResponse response = api.getSavingsPlansPurchaseRecommendation(xAmzTarget, getSavingsPlansPurchaseRecommendationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the Savings Plans utilization for your account across date ranges with daily or monthly granularity. Management account in an organization have access to member accounts. You can use &lt;code&gt;GetDimensionValues&lt;/code&gt; in &lt;code&gt;SAVINGS_PLANS&lt;/code&gt; to determine the possible dimension values.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t group by any dimension values for &lt;code&gt;GetSavingsPlansUtilization&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSavingsPlansUtilizationTest() throws ApiException {
        String xAmzTarget = null;
        GetSavingsPlansUtilizationRequest getSavingsPlansUtilizationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSavingsPlansUtilizationResponse response = api.getSavingsPlansUtilization(xAmzTarget, getSavingsPlansUtilizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves attribute data along with aggregate utilization and savings data for a given time period. This doesn&#39;t support granular or grouped data (daily/monthly) in response. You can&#39;t retrieve data by dates in a single response similar to &lt;code&gt;GetSavingsPlanUtilization&lt;/code&gt;, but you have the option to make multiple calls to &lt;code&gt;GetSavingsPlanUtilizationDetails&lt;/code&gt; by providing individual dates. You can use &lt;code&gt;GetDimensionValues&lt;/code&gt; in &lt;code&gt;SAVINGS_PLANS&lt;/code&gt; to determine the possible dimension values.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;GetSavingsPlanUtilizationDetails&lt;/code&gt; internally groups data by &lt;code&gt;SavingsPlansArn&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSavingsPlansUtilizationDetailsTest() throws ApiException {
        String xAmzTarget = null;
        GetSavingsPlansUtilizationDetailsRequest getSavingsPlansUtilizationDetailsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetSavingsPlansUtilizationDetailsResponse response = api.getSavingsPlansUtilizationDetails(xAmzTarget, getSavingsPlansUtilizationDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Queries for available tag keys and tag values for a specified period. You can search the tag values for an arbitrary string. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsTest() throws ApiException {
        String xAmzTarget = null;
        GetTagsRequest getTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTagsResponse response = api.getTags(xAmzTarget, getTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a forecast for how much Amazon Web Services predicts that you will use over the forecast time period that you select, based on your past usage. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsageForecastTest() throws ApiException {
        String xAmzTarget = null;
        GetUsageForecastRequest getUsageForecastRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetUsageForecastResponse response = api.getUsageForecast(xAmzTarget, getUsageForecastRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get a list of cost allocation tags. All inputs in the API are optional and serve as filters. By default, all cost allocation tags are returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCostAllocationTagsTest() throws ApiException {
        String xAmzTarget = null;
        ListCostAllocationTagsRequest listCostAllocationTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCostAllocationTagsResponse response = api.listCostAllocationTags(xAmzTarget, listCostAllocationTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the name, Amazon Resource Name (ARN), &lt;code&gt;NumberOfRules&lt;/code&gt; and effective dates of all Cost Categories defined in the account. You have the option to use &lt;code&gt;EffectiveOn&lt;/code&gt; to return a list of Cost Categories that were active on a specific date. If there is no &lt;code&gt;EffectiveOn&lt;/code&gt; specified, you’ll see Cost Categories that are effective on the current date. If Cost Category is still effective, &lt;code&gt;EffectiveEnd&lt;/code&gt; is omitted in the response. &lt;code&gt;ListCostCategoryDefinitions&lt;/code&gt; supports pagination. The request can have a &lt;code&gt;MaxResults&lt;/code&gt; range up to 100.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCostCategoryDefinitionsTest() throws ApiException {
        String xAmzTarget = null;
        ListCostCategoryDefinitionsRequest listCostCategoryDefinitionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCostCategoryDefinitionsResponse response = api.listCostCategoryDefinitions(xAmzTarget, listCostCategoryDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of your historical recommendation generations within the past 30 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSavingsPlansPurchaseRecommendationGenerationTest() throws ApiException {
        String xAmzTarget = null;
        ListSavingsPlansPurchaseRecommendationGenerationRequest listSavingsPlansPurchaseRecommendationGenerationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListSavingsPlansPurchaseRecommendationGenerationResponse response = api.listSavingsPlansPurchaseRecommendationGeneration(xAmzTarget, listSavingsPlansPurchaseRecommendationGenerationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of resource tags associated with the resource specified by the Amazon Resource Name (ARN). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the feedback property of a given cost anomaly. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provideAnomalyFeedbackTest() throws ApiException {
        String xAmzTarget = null;
        ProvideAnomalyFeedbackRequest provideAnomalyFeedbackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ProvideAnomalyFeedbackResponse response = api.provideAnomalyFeedback(xAmzTarget, provideAnomalyFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Requests a Savings Plans recommendation generation. This enables you to calculate a fresh set of Savings Plans recommendations that takes your latest usage data and current Savings Plans inventory into account. You can refresh Savings Plans recommendations up to three times daily for a consolidated billing family.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;StartSavingsPlansPurchaseRecommendationGeneration&lt;/code&gt; has no request syntax because no input parameters are needed to support this operation.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startSavingsPlansPurchaseRecommendationGenerationTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartSavingsPlansPurchaseRecommendationGenerationResponse response = api.startSavingsPlansPurchaseRecommendationGeneration(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;An API operation for adding one or more tags (key-value pairs) to a resource.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;TagResource&lt;/code&gt; operation with a resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value you specify replaces the previous value for that tag.&lt;/p&gt; &lt;p&gt;Although the maximum number of array members is 200, user-tag maximum is 50. The remaining are reserved for Amazon Web Services use.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from a resource. Specify only tag keys in your request. Don&#39;t specify the value. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing cost anomaly monitor. The changes made are applied going forward, and doesn&#39;t change anomalies detected in the past. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnomalyMonitorTest() throws ApiException {
        String xAmzTarget = null;
        UpdateAnomalyMonitorRequest updateAnomalyMonitorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAnomalyMonitorResponse response = api.updateAnomalyMonitor(xAmzTarget, updateAnomalyMonitorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates an existing cost anomaly subscription. Specify the fields that you want to update. Omitted fields are unchanged.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The JSON below describes the generic construct for each type. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_UpdateAnomalySubscription.html#API_UpdateAnomalySubscription_RequestParameters\&quot;&gt;Request Parameters&lt;/a&gt; for possible values as they apply to &lt;code&gt;AnomalySubscription&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnomalySubscriptionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateAnomalySubscriptionRequest updateAnomalySubscriptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAnomalySubscriptionResponse response = api.updateAnomalySubscription(xAmzTarget, updateAnomalySubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates status for cost allocation tags in bulk, with maximum batch size of 20. If the tag status that&#39;s updated is the same as the existing tag status, the request doesn&#39;t fail. Instead, it doesn&#39;t have any effect on the tag status (for example, activating the active tag). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCostAllocationTagsStatusTest() throws ApiException {
        String xAmzTarget = null;
        UpdateCostAllocationTagsStatusRequest updateCostAllocationTagsStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateCostAllocationTagsStatusResponse response = api.updateCostAllocationTagsStatus(xAmzTarget, updateCostAllocationTagsStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing Cost Category. Changes made to the Cost Category rules will be used to categorize the current month’s expenses and future expenses. This won’t change categorization for the previous months.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCostCategoryDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateCostCategoryDefinitionRequest updateCostCategoryDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateCostCategoryDefinitionResponse response = api.updateCostCategoryDefinition(xAmzTarget, updateCostCategoryDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
