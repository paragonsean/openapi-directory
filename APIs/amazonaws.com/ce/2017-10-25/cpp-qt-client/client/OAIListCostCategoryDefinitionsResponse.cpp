/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCostCategoryDefinitionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCostCategoryDefinitionsResponse::OAIListCostCategoryDefinitionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCostCategoryDefinitionsResponse::OAIListCostCategoryDefinitionsResponse() {
    this->initializeModel();
}

OAIListCostCategoryDefinitionsResponse::~OAIListCostCategoryDefinitionsResponse() {}

void OAIListCostCategoryDefinitionsResponse::initializeModel() {

    m_cost_category_references_isSet = false;
    m_cost_category_references_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListCostCategoryDefinitionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCostCategoryDefinitionsResponse::fromJsonObject(QJsonObject json) {

    m_cost_category_references_isValid = ::OpenAPI::fromJsonValue(m_cost_category_references, json[QString("CostCategoryReferences")]);
    m_cost_category_references_isSet = !json[QString("CostCategoryReferences")].isNull() && m_cost_category_references_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListCostCategoryDefinitionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCostCategoryDefinitionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_category_references.isSet()) {
        obj.insert(QString("CostCategoryReferences"), ::OpenAPI::toJsonValue(m_cost_category_references));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListCostCategoryDefinitionsResponse::getCostCategoryReferences() const {
    return m_cost_category_references;
}
void OAIListCostCategoryDefinitionsResponse::setCostCategoryReferences(const QList &cost_category_references) {
    m_cost_category_references = cost_category_references;
    m_cost_category_references_isSet = true;
}

bool OAIListCostCategoryDefinitionsResponse::is_cost_category_references_Set() const{
    return m_cost_category_references_isSet;
}

bool OAIListCostCategoryDefinitionsResponse::is_cost_category_references_Valid() const{
    return m_cost_category_references_isValid;
}

QString OAIListCostCategoryDefinitionsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListCostCategoryDefinitionsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListCostCategoryDefinitionsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListCostCategoryDefinitionsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListCostCategoryDefinitionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_category_references.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCostCategoryDefinitionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
