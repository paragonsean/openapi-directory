/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElastiCacheInstanceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElastiCacheInstanceDetails::OAIElastiCacheInstanceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElastiCacheInstanceDetails::OAIElastiCacheInstanceDetails() {
    this->initializeModel();
}

OAIElastiCacheInstanceDetails::~OAIElastiCacheInstanceDetails() {}

void OAIElastiCacheInstanceDetails::initializeModel() {

    m_family_isSet = false;
    m_family_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_product_description_isSet = false;
    m_product_description_isValid = false;

    m_current_generation_isSet = false;
    m_current_generation_isValid = false;

    m_size_flex_eligible_isSet = false;
    m_size_flex_eligible_isValid = false;
}

void OAIElastiCacheInstanceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElastiCacheInstanceDetails::fromJsonObject(QJsonObject json) {

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("Family")]);
    m_family_isSet = !json[QString("Family")].isNull() && m_family_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_product_description_isValid = ::OpenAPI::fromJsonValue(m_product_description, json[QString("ProductDescription")]);
    m_product_description_isSet = !json[QString("ProductDescription")].isNull() && m_product_description_isValid;

    m_current_generation_isValid = ::OpenAPI::fromJsonValue(m_current_generation, json[QString("CurrentGeneration")]);
    m_current_generation_isSet = !json[QString("CurrentGeneration")].isNull() && m_current_generation_isValid;

    m_size_flex_eligible_isValid = ::OpenAPI::fromJsonValue(m_size_flex_eligible, json[QString("SizeFlexEligible")]);
    m_size_flex_eligible_isSet = !json[QString("SizeFlexEligible")].isNull() && m_size_flex_eligible_isValid;
}

QString OAIElastiCacheInstanceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElastiCacheInstanceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_family_isSet) {
        obj.insert(QString("Family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_product_description_isSet) {
        obj.insert(QString("ProductDescription"), ::OpenAPI::toJsonValue(m_product_description));
    }
    if (m_current_generation_isSet) {
        obj.insert(QString("CurrentGeneration"), ::OpenAPI::toJsonValue(m_current_generation));
    }
    if (m_size_flex_eligible_isSet) {
        obj.insert(QString("SizeFlexEligible"), ::OpenAPI::toJsonValue(m_size_flex_eligible));
    }
    return obj;
}

QString OAIElastiCacheInstanceDetails::getFamily() const {
    return m_family;
}
void OAIElastiCacheInstanceDetails::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIElastiCacheInstanceDetails::is_family_Set() const{
    return m_family_isSet;
}

bool OAIElastiCacheInstanceDetails::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIElastiCacheInstanceDetails::getNodeType() const {
    return m_node_type;
}
void OAIElastiCacheInstanceDetails::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIElastiCacheInstanceDetails::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIElastiCacheInstanceDetails::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QString OAIElastiCacheInstanceDetails::getRegion() const {
    return m_region;
}
void OAIElastiCacheInstanceDetails::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIElastiCacheInstanceDetails::is_region_Set() const{
    return m_region_isSet;
}

bool OAIElastiCacheInstanceDetails::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIElastiCacheInstanceDetails::getProductDescription() const {
    return m_product_description;
}
void OAIElastiCacheInstanceDetails::setProductDescription(const QString &product_description) {
    m_product_description = product_description;
    m_product_description_isSet = true;
}

bool OAIElastiCacheInstanceDetails::is_product_description_Set() const{
    return m_product_description_isSet;
}

bool OAIElastiCacheInstanceDetails::is_product_description_Valid() const{
    return m_product_description_isValid;
}

bool OAIElastiCacheInstanceDetails::getCurrentGeneration() const {
    return m_current_generation;
}
void OAIElastiCacheInstanceDetails::setCurrentGeneration(const bool &current_generation) {
    m_current_generation = current_generation;
    m_current_generation_isSet = true;
}

bool OAIElastiCacheInstanceDetails::is_current_generation_Set() const{
    return m_current_generation_isSet;
}

bool OAIElastiCacheInstanceDetails::is_current_generation_Valid() const{
    return m_current_generation_isValid;
}

bool OAIElastiCacheInstanceDetails::getSizeFlexEligible() const {
    return m_size_flex_eligible;
}
void OAIElastiCacheInstanceDetails::setSizeFlexEligible(const bool &size_flex_eligible) {
    m_size_flex_eligible = size_flex_eligible;
    m_size_flex_eligible_isSet = true;
}

bool OAIElastiCacheInstanceDetails::is_size_flex_eligible_Set() const{
    return m_size_flex_eligible_isSet;
}

bool OAIElastiCacheInstanceDetails::is_size_flex_eligible_Valid() const{
    return m_size_flex_eligible_isValid;
}

bool OAIElastiCacheInstanceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_flex_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElastiCacheInstanceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
