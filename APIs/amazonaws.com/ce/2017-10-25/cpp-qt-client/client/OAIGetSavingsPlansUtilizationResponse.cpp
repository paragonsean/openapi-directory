/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSavingsPlansUtilizationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSavingsPlansUtilizationResponse::OAIGetSavingsPlansUtilizationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSavingsPlansUtilizationResponse::OAIGetSavingsPlansUtilizationResponse() {
    this->initializeModel();
}

OAIGetSavingsPlansUtilizationResponse::~OAIGetSavingsPlansUtilizationResponse() {}

void OAIGetSavingsPlansUtilizationResponse::initializeModel() {

    m_savings_plans_utilizations_by_time_isSet = false;
    m_savings_plans_utilizations_by_time_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIGetSavingsPlansUtilizationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSavingsPlansUtilizationResponse::fromJsonObject(QJsonObject json) {

    m_savings_plans_utilizations_by_time_isValid = ::OpenAPI::fromJsonValue(m_savings_plans_utilizations_by_time, json[QString("SavingsPlansUtilizationsByTime")]);
    m_savings_plans_utilizations_by_time_isSet = !json[QString("SavingsPlansUtilizationsByTime")].isNull() && m_savings_plans_utilizations_by_time_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;
}

QString OAIGetSavingsPlansUtilizationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSavingsPlansUtilizationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_savings_plans_utilizations_by_time.isSet()) {
        obj.insert(QString("SavingsPlansUtilizationsByTime"), ::OpenAPI::toJsonValue(m_savings_plans_utilizations_by_time));
    }
    if (m_total.isSet()) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QList OAIGetSavingsPlansUtilizationResponse::getSavingsPlansUtilizationsByTime() const {
    return m_savings_plans_utilizations_by_time;
}
void OAIGetSavingsPlansUtilizationResponse::setSavingsPlansUtilizationsByTime(const QList &savings_plans_utilizations_by_time) {
    m_savings_plans_utilizations_by_time = savings_plans_utilizations_by_time;
    m_savings_plans_utilizations_by_time_isSet = true;
}

bool OAIGetSavingsPlansUtilizationResponse::is_savings_plans_utilizations_by_time_Set() const{
    return m_savings_plans_utilizations_by_time_isSet;
}

bool OAIGetSavingsPlansUtilizationResponse::is_savings_plans_utilizations_by_time_Valid() const{
    return m_savings_plans_utilizations_by_time_isValid;
}

OAIGetSavingsPlansUtilizationResponse_Total OAIGetSavingsPlansUtilizationResponse::getTotal() const {
    return m_total;
}
void OAIGetSavingsPlansUtilizationResponse::setTotal(const OAIGetSavingsPlansUtilizationResponse_Total &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIGetSavingsPlansUtilizationResponse::is_total_Set() const{
    return m_total_isSet;
}

bool OAIGetSavingsPlansUtilizationResponse::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIGetSavingsPlansUtilizationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_savings_plans_utilizations_by_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSavingsPlansUtilizationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_total_isValid && true;
}

} // namespace OpenAPI
