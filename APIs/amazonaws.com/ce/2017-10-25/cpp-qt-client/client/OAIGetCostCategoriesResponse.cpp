/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCostCategoriesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCostCategoriesResponse::OAIGetCostCategoriesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCostCategoriesResponse::OAIGetCostCategoriesResponse() {
    this->initializeModel();
}

OAIGetCostCategoriesResponse::~OAIGetCostCategoriesResponse() {}

void OAIGetCostCategoriesResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_cost_category_names_isSet = false;
    m_cost_category_names_isValid = false;

    m_cost_category_values_isSet = false;
    m_cost_category_values_isValid = false;

    m_return_size_isSet = false;
    m_return_size_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;
}

void OAIGetCostCategoriesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCostCategoriesResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;

    m_cost_category_names_isValid = ::OpenAPI::fromJsonValue(m_cost_category_names, json[QString("CostCategoryNames")]);
    m_cost_category_names_isSet = !json[QString("CostCategoryNames")].isNull() && m_cost_category_names_isValid;

    m_cost_category_values_isValid = ::OpenAPI::fromJsonValue(m_cost_category_values, json[QString("CostCategoryValues")]);
    m_cost_category_values_isSet = !json[QString("CostCategoryValues")].isNull() && m_cost_category_values_isValid;

    m_return_size_isValid = ::OpenAPI::fromJsonValue(m_return_size, json[QString("ReturnSize")]);
    m_return_size_isSet = !json[QString("ReturnSize")].isNull() && m_return_size_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("TotalSize")]);
    m_total_size_isSet = !json[QString("TotalSize")].isNull() && m_total_size_isValid;
}

QString OAIGetCostCategoriesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCostCategoriesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_cost_category_names.isSet()) {
        obj.insert(QString("CostCategoryNames"), ::OpenAPI::toJsonValue(m_cost_category_names));
    }
    if (m_cost_category_values.isSet()) {
        obj.insert(QString("CostCategoryValues"), ::OpenAPI::toJsonValue(m_cost_category_values));
    }
    if (m_return_size_isSet) {
        obj.insert(QString("ReturnSize"), ::OpenAPI::toJsonValue(m_return_size));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("TotalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    return obj;
}

QString OAIGetCostCategoriesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetCostCategoriesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetCostCategoriesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetCostCategoriesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList OAIGetCostCategoriesResponse::getCostCategoryNames() const {
    return m_cost_category_names;
}
void OAIGetCostCategoriesResponse::setCostCategoryNames(const QList &cost_category_names) {
    m_cost_category_names = cost_category_names;
    m_cost_category_names_isSet = true;
}

bool OAIGetCostCategoriesResponse::is_cost_category_names_Set() const{
    return m_cost_category_names_isSet;
}

bool OAIGetCostCategoriesResponse::is_cost_category_names_Valid() const{
    return m_cost_category_names_isValid;
}

QList OAIGetCostCategoriesResponse::getCostCategoryValues() const {
    return m_cost_category_values;
}
void OAIGetCostCategoriesResponse::setCostCategoryValues(const QList &cost_category_values) {
    m_cost_category_values = cost_category_values;
    m_cost_category_values_isSet = true;
}

bool OAIGetCostCategoriesResponse::is_cost_category_values_Set() const{
    return m_cost_category_values_isSet;
}

bool OAIGetCostCategoriesResponse::is_cost_category_values_Valid() const{
    return m_cost_category_values_isValid;
}

qint32 OAIGetCostCategoriesResponse::getReturnSize() const {
    return m_return_size;
}
void OAIGetCostCategoriesResponse::setReturnSize(const qint32 &return_size) {
    m_return_size = return_size;
    m_return_size_isSet = true;
}

bool OAIGetCostCategoriesResponse::is_return_size_Set() const{
    return m_return_size_isSet;
}

bool OAIGetCostCategoriesResponse::is_return_size_Valid() const{
    return m_return_size_isValid;
}

qint32 OAIGetCostCategoriesResponse::getTotalSize() const {
    return m_total_size;
}
void OAIGetCostCategoriesResponse::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIGetCostCategoriesResponse::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIGetCostCategoriesResponse::is_total_size_Valid() const{
    return m_total_size_isValid;
}

bool OAIGetCostCategoriesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_category_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_category_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCostCategoriesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_return_size_isValid && m_total_size_isValid && true;
}

} // namespace OpenAPI
