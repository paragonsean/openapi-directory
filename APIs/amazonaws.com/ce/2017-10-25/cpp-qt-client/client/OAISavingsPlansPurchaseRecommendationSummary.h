/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISavingsPlansPurchaseRecommendationSummary.h
 *
 * Summary metrics for your Savings Plans Purchase Recommendations.
 */

#ifndef OAISavingsPlansPurchaseRecommendationSummary_H
#define OAISavingsPlansPurchaseRecommendationSummary_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISavingsPlansPurchaseRecommendationSummary : public OAIObject {
public:
    OAISavingsPlansPurchaseRecommendationSummary();
    OAISavingsPlansPurchaseRecommendationSummary(QString json);
    ~OAISavingsPlansPurchaseRecommendationSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEstimatedRoi() const;
    void setEstimatedRoi(const QString &estimated_roi);
    bool is_estimated_roi_Set() const;
    bool is_estimated_roi_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    QString getEstimatedTotalCost() const;
    void setEstimatedTotalCost(const QString &estimated_total_cost);
    bool is_estimated_total_cost_Set() const;
    bool is_estimated_total_cost_Valid() const;

    QString getCurrentOnDemandSpend() const;
    void setCurrentOnDemandSpend(const QString &current_on_demand_spend);
    bool is_current_on_demand_spend_Set() const;
    bool is_current_on_demand_spend_Valid() const;

    QString getEstimatedSavingsAmount() const;
    void setEstimatedSavingsAmount(const QString &estimated_savings_amount);
    bool is_estimated_savings_amount_Set() const;
    bool is_estimated_savings_amount_Valid() const;

    QString getTotalRecommendationCount() const;
    void setTotalRecommendationCount(const QString &total_recommendation_count);
    bool is_total_recommendation_count_Set() const;
    bool is_total_recommendation_count_Valid() const;

    QString getDailyCommitmentToPurchase() const;
    void setDailyCommitmentToPurchase(const QString &daily_commitment_to_purchase);
    bool is_daily_commitment_to_purchase_Set() const;
    bool is_daily_commitment_to_purchase_Valid() const;

    QString getHourlyCommitmentToPurchase() const;
    void setHourlyCommitmentToPurchase(const QString &hourly_commitment_to_purchase);
    bool is_hourly_commitment_to_purchase_Set() const;
    bool is_hourly_commitment_to_purchase_Valid() const;

    QString getEstimatedSavingsPercentage() const;
    void setEstimatedSavingsPercentage(const QString &estimated_savings_percentage);
    bool is_estimated_savings_percentage_Set() const;
    bool is_estimated_savings_percentage_Valid() const;

    QString getEstimatedMonthlySavingsAmount() const;
    void setEstimatedMonthlySavingsAmount(const QString &estimated_monthly_savings_amount);
    bool is_estimated_monthly_savings_amount_Set() const;
    bool is_estimated_monthly_savings_amount_Valid() const;

    QString getEstimatedOnDemandCostWithCurrentCommitment() const;
    void setEstimatedOnDemandCostWithCurrentCommitment(const QString &estimated_on_demand_cost_with_current_commitment);
    bool is_estimated_on_demand_cost_with_current_commitment_Set() const;
    bool is_estimated_on_demand_cost_with_current_commitment_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_estimated_roi;
    bool m_estimated_roi_isSet;
    bool m_estimated_roi_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    QString m_estimated_total_cost;
    bool m_estimated_total_cost_isSet;
    bool m_estimated_total_cost_isValid;

    QString m_current_on_demand_spend;
    bool m_current_on_demand_spend_isSet;
    bool m_current_on_demand_spend_isValid;

    QString m_estimated_savings_amount;
    bool m_estimated_savings_amount_isSet;
    bool m_estimated_savings_amount_isValid;

    QString m_total_recommendation_count;
    bool m_total_recommendation_count_isSet;
    bool m_total_recommendation_count_isValid;

    QString m_daily_commitment_to_purchase;
    bool m_daily_commitment_to_purchase_isSet;
    bool m_daily_commitment_to_purchase_isValid;

    QString m_hourly_commitment_to_purchase;
    bool m_hourly_commitment_to_purchase_isSet;
    bool m_hourly_commitment_to_purchase_isValid;

    QString m_estimated_savings_percentage;
    bool m_estimated_savings_percentage_isSet;
    bool m_estimated_savings_percentage_isValid;

    QString m_estimated_monthly_savings_amount;
    bool m_estimated_monthly_savings_amount_isSet;
    bool m_estimated_monthly_savings_amount_isValid;

    QString m_estimated_on_demand_cost_with_current_commitment;
    bool m_estimated_on_demand_cost_with_current_commitment_isSet;
    bool m_estimated_on_demand_cost_with_current_commitment_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISavingsPlansPurchaseRecommendationSummary)

#endif // OAISavingsPlansPurchaseRecommendationSummary_H
