/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAnomalySubscriptionRequest_AnomalySubscription.h
 *
 * 
 */

#ifndef OAICreateAnomalySubscriptionRequest_AnomalySubscription_H
#define OAICreateAnomalySubscriptionRequest_AnomalySubscription_H

#include <QJsonObject>

#include "OAIAnomalySubscriptionFrequency.h"
#include "OAIAnomalySubscription_ThresholdExpression.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAnomalySubscription_ThresholdExpression;

class OAICreateAnomalySubscriptionRequest_AnomalySubscription : public OAIObject {
public:
    OAICreateAnomalySubscriptionRequest_AnomalySubscription();
    OAICreateAnomalySubscriptionRequest_AnomalySubscription(QString json);
    ~OAICreateAnomalySubscriptionRequest_AnomalySubscription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSubscriptionArn() const;
    void setSubscriptionArn(const QString &subscription_arn);
    bool is_subscription_arn_Set() const;
    bool is_subscription_arn_Valid() const;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QList getMonitorArnList() const;
    void setMonitorArnList(const QList &monitor_arn_list);
    bool is_monitor_arn_list_Set() const;
    bool is_monitor_arn_list_Valid() const;

    QList getSubscribers() const;
    void setSubscribers(const QList &subscribers);
    bool is_subscribers_Set() const;
    bool is_subscribers_Valid() const;

    double getThreshold() const;
    void setThreshold(const double &threshold);
    bool is_threshold_Set() const;
    bool is_threshold_Valid() const;

    OAIAnomalySubscriptionFrequency getFrequency() const;
    void setFrequency(const OAIAnomalySubscriptionFrequency &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    QString getSubscriptionName() const;
    void setSubscriptionName(const QString &subscription_name);
    bool is_subscription_name_Set() const;
    bool is_subscription_name_Valid() const;

    OAIAnomalySubscription_ThresholdExpression getThresholdExpression() const;
    void setThresholdExpression(const OAIAnomalySubscription_ThresholdExpression &threshold_expression);
    bool is_threshold_expression_Set() const;
    bool is_threshold_expression_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_subscription_arn;
    bool m_subscription_arn_isSet;
    bool m_subscription_arn_isValid;

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QList m_monitor_arn_list;
    bool m_monitor_arn_list_isSet;
    bool m_monitor_arn_list_isValid;

    QList m_subscribers;
    bool m_subscribers_isSet;
    bool m_subscribers_isValid;

    double m_threshold;
    bool m_threshold_isSet;
    bool m_threshold_isValid;

    OAIAnomalySubscriptionFrequency m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;

    QString m_subscription_name;
    bool m_subscription_name_isSet;
    bool m_subscription_name_isValid;

    OAIAnomalySubscription_ThresholdExpression m_threshold_expression;
    bool m_threshold_expression_isSet;
    bool m_threshold_expression_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAnomalySubscriptionRequest_AnomalySubscription)

#endif // OAICreateAnomalySubscriptionRequest_AnomalySubscription_H
