/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICoverageByTime_Total.h
 *
 * 
 */

#ifndef OAICoverageByTime_Total_H
#define OAICoverageByTime_Total_H

#include <QJsonObject>

#include "OAICoverage_CoverageCost.h"
#include "OAICoverage_CoverageHours.h"
#include "OAICoverage_CoverageNormalizedUnits.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICoverage_CoverageHours;
class OAICoverage_CoverageNormalizedUnits;
class OAICoverage_CoverageCost;

class OAICoverageByTime_Total : public OAIObject {
public:
    OAICoverageByTime_Total();
    OAICoverageByTime_Total(QString json);
    ~OAICoverageByTime_Total() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICoverage_CoverageHours getCoverageHours() const;
    void setCoverageHours(const OAICoverage_CoverageHours &coverage_hours);
    bool is_coverage_hours_Set() const;
    bool is_coverage_hours_Valid() const;

    OAICoverage_CoverageNormalizedUnits getCoverageNormalizedUnits() const;
    void setCoverageNormalizedUnits(const OAICoverage_CoverageNormalizedUnits &coverage_normalized_units);
    bool is_coverage_normalized_units_Set() const;
    bool is_coverage_normalized_units_Valid() const;

    OAICoverage_CoverageCost getCoverageCost() const;
    void setCoverageCost(const OAICoverage_CoverageCost &coverage_cost);
    bool is_coverage_cost_Set() const;
    bool is_coverage_cost_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICoverage_CoverageHours m_coverage_hours;
    bool m_coverage_hours_isSet;
    bool m_coverage_hours_isValid;

    OAICoverage_CoverageNormalizedUnits m_coverage_normalized_units;
    bool m_coverage_normalized_units_isSet;
    bool m_coverage_normalized_units_isValid;

    OAICoverage_CoverageCost m_coverage_cost;
    bool m_coverage_cost_isSet;
    bool m_coverage_cost_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICoverageByTime_Total)

#endif // OAICoverageByTime_Total_H
