/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRightsizingRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRightsizingRecommendation::OAIRightsizingRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRightsizingRecommendation::OAIRightsizingRecommendation() {
    this->initializeModel();
}

OAIRightsizingRecommendation::~OAIRightsizingRecommendation() {}

void OAIRightsizingRecommendation::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_current_instance_isSet = false;
    m_current_instance_isValid = false;

    m_rightsizing_type_isSet = false;
    m_rightsizing_type_isValid = false;

    m_modify_recommendation_detail_isSet = false;
    m_modify_recommendation_detail_isValid = false;

    m_terminate_recommendation_detail_isSet = false;
    m_terminate_recommendation_detail_isValid = false;

    m_finding_reason_codes_isSet = false;
    m_finding_reason_codes_isValid = false;
}

void OAIRightsizingRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRightsizingRecommendation::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_current_instance_isValid = ::OpenAPI::fromJsonValue(m_current_instance, json[QString("CurrentInstance")]);
    m_current_instance_isSet = !json[QString("CurrentInstance")].isNull() && m_current_instance_isValid;

    m_rightsizing_type_isValid = ::OpenAPI::fromJsonValue(m_rightsizing_type, json[QString("RightsizingType")]);
    m_rightsizing_type_isSet = !json[QString("RightsizingType")].isNull() && m_rightsizing_type_isValid;

    m_modify_recommendation_detail_isValid = ::OpenAPI::fromJsonValue(m_modify_recommendation_detail, json[QString("ModifyRecommendationDetail")]);
    m_modify_recommendation_detail_isSet = !json[QString("ModifyRecommendationDetail")].isNull() && m_modify_recommendation_detail_isValid;

    m_terminate_recommendation_detail_isValid = ::OpenAPI::fromJsonValue(m_terminate_recommendation_detail, json[QString("TerminateRecommendationDetail")]);
    m_terminate_recommendation_detail_isSet = !json[QString("TerminateRecommendationDetail")].isNull() && m_terminate_recommendation_detail_isValid;

    m_finding_reason_codes_isValid = ::OpenAPI::fromJsonValue(m_finding_reason_codes, json[QString("FindingReasonCodes")]);
    m_finding_reason_codes_isSet = !json[QString("FindingReasonCodes")].isNull() && m_finding_reason_codes_isValid;
}

QString OAIRightsizingRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRightsizingRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_current_instance.isSet()) {
        obj.insert(QString("CurrentInstance"), ::OpenAPI::toJsonValue(m_current_instance));
    }
    if (m_rightsizing_type.isSet()) {
        obj.insert(QString("RightsizingType"), ::OpenAPI::toJsonValue(m_rightsizing_type));
    }
    if (m_modify_recommendation_detail.isSet()) {
        obj.insert(QString("ModifyRecommendationDetail"), ::OpenAPI::toJsonValue(m_modify_recommendation_detail));
    }
    if (m_terminate_recommendation_detail.isSet()) {
        obj.insert(QString("TerminateRecommendationDetail"), ::OpenAPI::toJsonValue(m_terminate_recommendation_detail));
    }
    if (m_finding_reason_codes.isSet()) {
        obj.insert(QString("FindingReasonCodes"), ::OpenAPI::toJsonValue(m_finding_reason_codes));
    }
    return obj;
}

QString OAIRightsizingRecommendation::getAccountId() const {
    return m_account_id;
}
void OAIRightsizingRecommendation::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIRightsizingRecommendation::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIRightsizingRecommendation::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIRightsizingRecommendation_CurrentInstance OAIRightsizingRecommendation::getCurrentInstance() const {
    return m_current_instance;
}
void OAIRightsizingRecommendation::setCurrentInstance(const OAIRightsizingRecommendation_CurrentInstance &current_instance) {
    m_current_instance = current_instance;
    m_current_instance_isSet = true;
}

bool OAIRightsizingRecommendation::is_current_instance_Set() const{
    return m_current_instance_isSet;
}

bool OAIRightsizingRecommendation::is_current_instance_Valid() const{
    return m_current_instance_isValid;
}

OAIRightsizingType OAIRightsizingRecommendation::getRightsizingType() const {
    return m_rightsizing_type;
}
void OAIRightsizingRecommendation::setRightsizingType(const OAIRightsizingType &rightsizing_type) {
    m_rightsizing_type = rightsizing_type;
    m_rightsizing_type_isSet = true;
}

bool OAIRightsizingRecommendation::is_rightsizing_type_Set() const{
    return m_rightsizing_type_isSet;
}

bool OAIRightsizingRecommendation::is_rightsizing_type_Valid() const{
    return m_rightsizing_type_isValid;
}

OAIRightsizingRecommendation_ModifyRecommendationDetail OAIRightsizingRecommendation::getModifyRecommendationDetail() const {
    return m_modify_recommendation_detail;
}
void OAIRightsizingRecommendation::setModifyRecommendationDetail(const OAIRightsizingRecommendation_ModifyRecommendationDetail &modify_recommendation_detail) {
    m_modify_recommendation_detail = modify_recommendation_detail;
    m_modify_recommendation_detail_isSet = true;
}

bool OAIRightsizingRecommendation::is_modify_recommendation_detail_Set() const{
    return m_modify_recommendation_detail_isSet;
}

bool OAIRightsizingRecommendation::is_modify_recommendation_detail_Valid() const{
    return m_modify_recommendation_detail_isValid;
}

OAIRightsizingRecommendation_TerminateRecommendationDetail OAIRightsizingRecommendation::getTerminateRecommendationDetail() const {
    return m_terminate_recommendation_detail;
}
void OAIRightsizingRecommendation::setTerminateRecommendationDetail(const OAIRightsizingRecommendation_TerminateRecommendationDetail &terminate_recommendation_detail) {
    m_terminate_recommendation_detail = terminate_recommendation_detail;
    m_terminate_recommendation_detail_isSet = true;
}

bool OAIRightsizingRecommendation::is_terminate_recommendation_detail_Set() const{
    return m_terminate_recommendation_detail_isSet;
}

bool OAIRightsizingRecommendation::is_terminate_recommendation_detail_Valid() const{
    return m_terminate_recommendation_detail_isValid;
}

QList OAIRightsizingRecommendation::getFindingReasonCodes() const {
    return m_finding_reason_codes;
}
void OAIRightsizingRecommendation::setFindingReasonCodes(const QList &finding_reason_codes) {
    m_finding_reason_codes = finding_reason_codes;
    m_finding_reason_codes_isSet = true;
}

bool OAIRightsizingRecommendation::is_finding_reason_codes_Set() const{
    return m_finding_reason_codes_isSet;
}

bool OAIRightsizingRecommendation::is_finding_reason_codes_Valid() const{
    return m_finding_reason_codes_isValid;
}

bool OAIRightsizingRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rightsizing_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modify_recommendation_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminate_recommendation_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_reason_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRightsizingRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
