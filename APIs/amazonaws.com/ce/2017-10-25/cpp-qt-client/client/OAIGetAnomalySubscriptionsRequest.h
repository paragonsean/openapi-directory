/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetAnomalySubscriptionsRequest.h
 *
 * 
 */

#ifndef OAIGetAnomalySubscriptionsRequest_H
#define OAIGetAnomalySubscriptionsRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetAnomalySubscriptionsRequest : public OAIObject {
public:
    OAIGetAnomalySubscriptionsRequest();
    OAIGetAnomalySubscriptionsRequest(QString json);
    ~OAIGetAnomalySubscriptionsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getSubscriptionArnList() const;
    void setSubscriptionArnList(const QList &subscription_arn_list);
    bool is_subscription_arn_list_Set() const;
    bool is_subscription_arn_list_Valid() const;

    QString getMonitorArn() const;
    void setMonitorArn(const QString &monitor_arn);
    bool is_monitor_arn_Set() const;
    bool is_monitor_arn_Valid() const;

    QString getNextPageToken() const;
    void setNextPageToken(const QString &next_page_token);
    bool is_next_page_token_Set() const;
    bool is_next_page_token_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_subscription_arn_list;
    bool m_subscription_arn_list_isSet;
    bool m_subscription_arn_list_isValid;

    QString m_monitor_arn;
    bool m_monitor_arn_isSet;
    bool m_monitor_arn_isValid;

    QString m_next_page_token;
    bool m_next_page_token_isSet;
    bool m_next_page_token_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetAnomalySubscriptionsRequest)

#endif // OAIGetAnomalySubscriptionsRequest_H
