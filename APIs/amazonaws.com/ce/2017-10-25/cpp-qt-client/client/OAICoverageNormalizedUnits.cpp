/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoverageNormalizedUnits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoverageNormalizedUnits::OAICoverageNormalizedUnits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoverageNormalizedUnits::OAICoverageNormalizedUnits() {
    this->initializeModel();
}

OAICoverageNormalizedUnits::~OAICoverageNormalizedUnits() {}

void OAICoverageNormalizedUnits::initializeModel() {

    m_on_demand_normalized_units_isSet = false;
    m_on_demand_normalized_units_isValid = false;

    m_reserved_normalized_units_isSet = false;
    m_reserved_normalized_units_isValid = false;

    m_total_running_normalized_units_isSet = false;
    m_total_running_normalized_units_isValid = false;

    m_coverage_normalized_units_percentage_isSet = false;
    m_coverage_normalized_units_percentage_isValid = false;
}

void OAICoverageNormalizedUnits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoverageNormalizedUnits::fromJsonObject(QJsonObject json) {

    m_on_demand_normalized_units_isValid = ::OpenAPI::fromJsonValue(m_on_demand_normalized_units, json[QString("OnDemandNormalizedUnits")]);
    m_on_demand_normalized_units_isSet = !json[QString("OnDemandNormalizedUnits")].isNull() && m_on_demand_normalized_units_isValid;

    m_reserved_normalized_units_isValid = ::OpenAPI::fromJsonValue(m_reserved_normalized_units, json[QString("ReservedNormalizedUnits")]);
    m_reserved_normalized_units_isSet = !json[QString("ReservedNormalizedUnits")].isNull() && m_reserved_normalized_units_isValid;

    m_total_running_normalized_units_isValid = ::OpenAPI::fromJsonValue(m_total_running_normalized_units, json[QString("TotalRunningNormalizedUnits")]);
    m_total_running_normalized_units_isSet = !json[QString("TotalRunningNormalizedUnits")].isNull() && m_total_running_normalized_units_isValid;

    m_coverage_normalized_units_percentage_isValid = ::OpenAPI::fromJsonValue(m_coverage_normalized_units_percentage, json[QString("CoverageNormalizedUnitsPercentage")]);
    m_coverage_normalized_units_percentage_isSet = !json[QString("CoverageNormalizedUnitsPercentage")].isNull() && m_coverage_normalized_units_percentage_isValid;
}

QString OAICoverageNormalizedUnits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoverageNormalizedUnits::asJsonObject() const {
    QJsonObject obj;
    if (m_on_demand_normalized_units_isSet) {
        obj.insert(QString("OnDemandNormalizedUnits"), ::OpenAPI::toJsonValue(m_on_demand_normalized_units));
    }
    if (m_reserved_normalized_units_isSet) {
        obj.insert(QString("ReservedNormalizedUnits"), ::OpenAPI::toJsonValue(m_reserved_normalized_units));
    }
    if (m_total_running_normalized_units_isSet) {
        obj.insert(QString("TotalRunningNormalizedUnits"), ::OpenAPI::toJsonValue(m_total_running_normalized_units));
    }
    if (m_coverage_normalized_units_percentage_isSet) {
        obj.insert(QString("CoverageNormalizedUnitsPercentage"), ::OpenAPI::toJsonValue(m_coverage_normalized_units_percentage));
    }
    return obj;
}

QString OAICoverageNormalizedUnits::getOnDemandNormalizedUnits() const {
    return m_on_demand_normalized_units;
}
void OAICoverageNormalizedUnits::setOnDemandNormalizedUnits(const QString &on_demand_normalized_units) {
    m_on_demand_normalized_units = on_demand_normalized_units;
    m_on_demand_normalized_units_isSet = true;
}

bool OAICoverageNormalizedUnits::is_on_demand_normalized_units_Set() const{
    return m_on_demand_normalized_units_isSet;
}

bool OAICoverageNormalizedUnits::is_on_demand_normalized_units_Valid() const{
    return m_on_demand_normalized_units_isValid;
}

QString OAICoverageNormalizedUnits::getReservedNormalizedUnits() const {
    return m_reserved_normalized_units;
}
void OAICoverageNormalizedUnits::setReservedNormalizedUnits(const QString &reserved_normalized_units) {
    m_reserved_normalized_units = reserved_normalized_units;
    m_reserved_normalized_units_isSet = true;
}

bool OAICoverageNormalizedUnits::is_reserved_normalized_units_Set() const{
    return m_reserved_normalized_units_isSet;
}

bool OAICoverageNormalizedUnits::is_reserved_normalized_units_Valid() const{
    return m_reserved_normalized_units_isValid;
}

QString OAICoverageNormalizedUnits::getTotalRunningNormalizedUnits() const {
    return m_total_running_normalized_units;
}
void OAICoverageNormalizedUnits::setTotalRunningNormalizedUnits(const QString &total_running_normalized_units) {
    m_total_running_normalized_units = total_running_normalized_units;
    m_total_running_normalized_units_isSet = true;
}

bool OAICoverageNormalizedUnits::is_total_running_normalized_units_Set() const{
    return m_total_running_normalized_units_isSet;
}

bool OAICoverageNormalizedUnits::is_total_running_normalized_units_Valid() const{
    return m_total_running_normalized_units_isValid;
}

QString OAICoverageNormalizedUnits::getCoverageNormalizedUnitsPercentage() const {
    return m_coverage_normalized_units_percentage;
}
void OAICoverageNormalizedUnits::setCoverageNormalizedUnitsPercentage(const QString &coverage_normalized_units_percentage) {
    m_coverage_normalized_units_percentage = coverage_normalized_units_percentage;
    m_coverage_normalized_units_percentage_isSet = true;
}

bool OAICoverageNormalizedUnits::is_coverage_normalized_units_percentage_Set() const{
    return m_coverage_normalized_units_percentage_isSet;
}

bool OAICoverageNormalizedUnits::is_coverage_normalized_units_percentage_Valid() const{
    return m_coverage_normalized_units_percentage_isValid;
}

bool OAICoverageNormalizedUnits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_on_demand_normalized_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_normalized_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_running_normalized_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_normalized_units_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoverageNormalizedUnits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
