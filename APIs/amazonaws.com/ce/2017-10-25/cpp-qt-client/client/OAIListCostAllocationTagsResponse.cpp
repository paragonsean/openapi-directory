/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCostAllocationTagsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCostAllocationTagsResponse::OAIListCostAllocationTagsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCostAllocationTagsResponse::OAIListCostAllocationTagsResponse() {
    this->initializeModel();
}

OAIListCostAllocationTagsResponse::~OAIListCostAllocationTagsResponse() {}

void OAIListCostAllocationTagsResponse::initializeModel() {

    m_cost_allocation_tags_isSet = false;
    m_cost_allocation_tags_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListCostAllocationTagsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCostAllocationTagsResponse::fromJsonObject(QJsonObject json) {

    m_cost_allocation_tags_isValid = ::OpenAPI::fromJsonValue(m_cost_allocation_tags, json[QString("CostAllocationTags")]);
    m_cost_allocation_tags_isSet = !json[QString("CostAllocationTags")].isNull() && m_cost_allocation_tags_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListCostAllocationTagsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCostAllocationTagsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_allocation_tags.isSet()) {
        obj.insert(QString("CostAllocationTags"), ::OpenAPI::toJsonValue(m_cost_allocation_tags));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListCostAllocationTagsResponse::getCostAllocationTags() const {
    return m_cost_allocation_tags;
}
void OAIListCostAllocationTagsResponse::setCostAllocationTags(const QList &cost_allocation_tags) {
    m_cost_allocation_tags = cost_allocation_tags;
    m_cost_allocation_tags_isSet = true;
}

bool OAIListCostAllocationTagsResponse::is_cost_allocation_tags_Set() const{
    return m_cost_allocation_tags_isSet;
}

bool OAIListCostAllocationTagsResponse::is_cost_allocation_tags_Valid() const{
    return m_cost_allocation_tags_isValid;
}

QString OAIListCostAllocationTagsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListCostAllocationTagsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListCostAllocationTagsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListCostAllocationTagsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListCostAllocationTagsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_allocation_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCostAllocationTagsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
