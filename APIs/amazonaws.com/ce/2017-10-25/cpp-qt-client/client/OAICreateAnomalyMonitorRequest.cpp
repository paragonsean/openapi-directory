/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAnomalyMonitorRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAnomalyMonitorRequest::OAICreateAnomalyMonitorRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAnomalyMonitorRequest::OAICreateAnomalyMonitorRequest() {
    this->initializeModel();
}

OAICreateAnomalyMonitorRequest::~OAICreateAnomalyMonitorRequest() {}

void OAICreateAnomalyMonitorRequest::initializeModel() {

    m_anomaly_monitor_isSet = false;
    m_anomaly_monitor_isValid = false;

    m_resource_tags_isSet = false;
    m_resource_tags_isValid = false;
}

void OAICreateAnomalyMonitorRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAnomalyMonitorRequest::fromJsonObject(QJsonObject json) {

    m_anomaly_monitor_isValid = ::OpenAPI::fromJsonValue(m_anomaly_monitor, json[QString("AnomalyMonitor")]);
    m_anomaly_monitor_isSet = !json[QString("AnomalyMonitor")].isNull() && m_anomaly_monitor_isValid;

    m_resource_tags_isValid = ::OpenAPI::fromJsonValue(m_resource_tags, json[QString("ResourceTags")]);
    m_resource_tags_isSet = !json[QString("ResourceTags")].isNull() && m_resource_tags_isValid;
}

QString OAICreateAnomalyMonitorRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAnomalyMonitorRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_anomaly_monitor.isSet()) {
        obj.insert(QString("AnomalyMonitor"), ::OpenAPI::toJsonValue(m_anomaly_monitor));
    }
    if (m_resource_tags.isSet()) {
        obj.insert(QString("ResourceTags"), ::OpenAPI::toJsonValue(m_resource_tags));
    }
    return obj;
}

OAICreateAnomalyMonitorRequest_AnomalyMonitor OAICreateAnomalyMonitorRequest::getAnomalyMonitor() const {
    return m_anomaly_monitor;
}
void OAICreateAnomalyMonitorRequest::setAnomalyMonitor(const OAICreateAnomalyMonitorRequest_AnomalyMonitor &anomaly_monitor) {
    m_anomaly_monitor = anomaly_monitor;
    m_anomaly_monitor_isSet = true;
}

bool OAICreateAnomalyMonitorRequest::is_anomaly_monitor_Set() const{
    return m_anomaly_monitor_isSet;
}

bool OAICreateAnomalyMonitorRequest::is_anomaly_monitor_Valid() const{
    return m_anomaly_monitor_isValid;
}

QList OAICreateAnomalyMonitorRequest::getResourceTags() const {
    return m_resource_tags;
}
void OAICreateAnomalyMonitorRequest::setResourceTags(const QList &resource_tags) {
    m_resource_tags = resource_tags;
    m_resource_tags_isSet = true;
}

bool OAICreateAnomalyMonitorRequest::is_resource_tags_Set() const{
    return m_resource_tags_isSet;
}

bool OAICreateAnomalyMonitorRequest::is_resource_tags_Valid() const{
    return m_resource_tags_isValid;
}

bool OAICreateAnomalyMonitorRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anomaly_monitor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAnomalyMonitorRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_anomaly_monitor_isValid && true;
}

} // namespace OpenAPI
