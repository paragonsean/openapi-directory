/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrentInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrentInstance::OAICurrentInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrentInstance::OAICurrentInstance() {
    this->initializeModel();
}

OAICurrentInstance::~OAICurrentInstance() {}

void OAICurrentInstance::initializeModel() {

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_instance_name_isSet = false;
    m_instance_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_resource_details_isSet = false;
    m_resource_details_isValid = false;

    m_resource_utilization_isSet = false;
    m_resource_utilization_isValid = false;

    m_reservation_covered_hours_in_lookback_period_isSet = false;
    m_reservation_covered_hours_in_lookback_period_isValid = false;

    m_savings_plans_covered_hours_in_lookback_period_isSet = false;
    m_savings_plans_covered_hours_in_lookback_period_isValid = false;

    m_on_demand_hours_in_lookback_period_isSet = false;
    m_on_demand_hours_in_lookback_period_isValid = false;

    m_total_running_hours_in_lookback_period_isSet = false;
    m_total_running_hours_in_lookback_period_isValid = false;

    m_monthly_cost_isSet = false;
    m_monthly_cost_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;
}

void OAICurrentInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrentInstance::fromJsonObject(QJsonObject json) {

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_instance_name_isValid = ::OpenAPI::fromJsonValue(m_instance_name, json[QString("InstanceName")]);
    m_instance_name_isSet = !json[QString("InstanceName")].isNull() && m_instance_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_resource_details_isValid = ::OpenAPI::fromJsonValue(m_resource_details, json[QString("ResourceDetails")]);
    m_resource_details_isSet = !json[QString("ResourceDetails")].isNull() && m_resource_details_isValid;

    m_resource_utilization_isValid = ::OpenAPI::fromJsonValue(m_resource_utilization, json[QString("ResourceUtilization")]);
    m_resource_utilization_isSet = !json[QString("ResourceUtilization")].isNull() && m_resource_utilization_isValid;

    m_reservation_covered_hours_in_lookback_period_isValid = ::OpenAPI::fromJsonValue(m_reservation_covered_hours_in_lookback_period, json[QString("ReservationCoveredHoursInLookbackPeriod")]);
    m_reservation_covered_hours_in_lookback_period_isSet = !json[QString("ReservationCoveredHoursInLookbackPeriod")].isNull() && m_reservation_covered_hours_in_lookback_period_isValid;

    m_savings_plans_covered_hours_in_lookback_period_isValid = ::OpenAPI::fromJsonValue(m_savings_plans_covered_hours_in_lookback_period, json[QString("SavingsPlansCoveredHoursInLookbackPeriod")]);
    m_savings_plans_covered_hours_in_lookback_period_isSet = !json[QString("SavingsPlansCoveredHoursInLookbackPeriod")].isNull() && m_savings_plans_covered_hours_in_lookback_period_isValid;

    m_on_demand_hours_in_lookback_period_isValid = ::OpenAPI::fromJsonValue(m_on_demand_hours_in_lookback_period, json[QString("OnDemandHoursInLookbackPeriod")]);
    m_on_demand_hours_in_lookback_period_isSet = !json[QString("OnDemandHoursInLookbackPeriod")].isNull() && m_on_demand_hours_in_lookback_period_isValid;

    m_total_running_hours_in_lookback_period_isValid = ::OpenAPI::fromJsonValue(m_total_running_hours_in_lookback_period, json[QString("TotalRunningHoursInLookbackPeriod")]);
    m_total_running_hours_in_lookback_period_isSet = !json[QString("TotalRunningHoursInLookbackPeriod")].isNull() && m_total_running_hours_in_lookback_period_isValid;

    m_monthly_cost_isValid = ::OpenAPI::fromJsonValue(m_monthly_cost, json[QString("MonthlyCost")]);
    m_monthly_cost_isSet = !json[QString("MonthlyCost")].isNull() && m_monthly_cost_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;
}

QString OAICurrentInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrentInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_instance_name_isSet) {
        obj.insert(QString("InstanceName"), ::OpenAPI::toJsonValue(m_instance_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_resource_details.isSet()) {
        obj.insert(QString("ResourceDetails"), ::OpenAPI::toJsonValue(m_resource_details));
    }
    if (m_resource_utilization.isSet()) {
        obj.insert(QString("ResourceUtilization"), ::OpenAPI::toJsonValue(m_resource_utilization));
    }
    if (m_reservation_covered_hours_in_lookback_period_isSet) {
        obj.insert(QString("ReservationCoveredHoursInLookbackPeriod"), ::OpenAPI::toJsonValue(m_reservation_covered_hours_in_lookback_period));
    }
    if (m_savings_plans_covered_hours_in_lookback_period_isSet) {
        obj.insert(QString("SavingsPlansCoveredHoursInLookbackPeriod"), ::OpenAPI::toJsonValue(m_savings_plans_covered_hours_in_lookback_period));
    }
    if (m_on_demand_hours_in_lookback_period_isSet) {
        obj.insert(QString("OnDemandHoursInLookbackPeriod"), ::OpenAPI::toJsonValue(m_on_demand_hours_in_lookback_period));
    }
    if (m_total_running_hours_in_lookback_period_isSet) {
        obj.insert(QString("TotalRunningHoursInLookbackPeriod"), ::OpenAPI::toJsonValue(m_total_running_hours_in_lookback_period));
    }
    if (m_monthly_cost_isSet) {
        obj.insert(QString("MonthlyCost"), ::OpenAPI::toJsonValue(m_monthly_cost));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    return obj;
}

QString OAICurrentInstance::getResourceId() const {
    return m_resource_id;
}
void OAICurrentInstance::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAICurrentInstance::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAICurrentInstance::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAICurrentInstance::getInstanceName() const {
    return m_instance_name;
}
void OAICurrentInstance::setInstanceName(const QString &instance_name) {
    m_instance_name = instance_name;
    m_instance_name_isSet = true;
}

bool OAICurrentInstance::is_instance_name_Set() const{
    return m_instance_name_isSet;
}

bool OAICurrentInstance::is_instance_name_Valid() const{
    return m_instance_name_isValid;
}

QList OAICurrentInstance::getTags() const {
    return m_tags;
}
void OAICurrentInstance::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICurrentInstance::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICurrentInstance::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICurrentInstance_ResourceDetails OAICurrentInstance::getResourceDetails() const {
    return m_resource_details;
}
void OAICurrentInstance::setResourceDetails(const OAICurrentInstance_ResourceDetails &resource_details) {
    m_resource_details = resource_details;
    m_resource_details_isSet = true;
}

bool OAICurrentInstance::is_resource_details_Set() const{
    return m_resource_details_isSet;
}

bool OAICurrentInstance::is_resource_details_Valid() const{
    return m_resource_details_isValid;
}

OAICurrentInstance_ResourceUtilization OAICurrentInstance::getResourceUtilization() const {
    return m_resource_utilization;
}
void OAICurrentInstance::setResourceUtilization(const OAICurrentInstance_ResourceUtilization &resource_utilization) {
    m_resource_utilization = resource_utilization;
    m_resource_utilization_isSet = true;
}

bool OAICurrentInstance::is_resource_utilization_Set() const{
    return m_resource_utilization_isSet;
}

bool OAICurrentInstance::is_resource_utilization_Valid() const{
    return m_resource_utilization_isValid;
}

QString OAICurrentInstance::getReservationCoveredHoursInLookbackPeriod() const {
    return m_reservation_covered_hours_in_lookback_period;
}
void OAICurrentInstance::setReservationCoveredHoursInLookbackPeriod(const QString &reservation_covered_hours_in_lookback_period) {
    m_reservation_covered_hours_in_lookback_period = reservation_covered_hours_in_lookback_period;
    m_reservation_covered_hours_in_lookback_period_isSet = true;
}

bool OAICurrentInstance::is_reservation_covered_hours_in_lookback_period_Set() const{
    return m_reservation_covered_hours_in_lookback_period_isSet;
}

bool OAICurrentInstance::is_reservation_covered_hours_in_lookback_period_Valid() const{
    return m_reservation_covered_hours_in_lookback_period_isValid;
}

QString OAICurrentInstance::getSavingsPlansCoveredHoursInLookbackPeriod() const {
    return m_savings_plans_covered_hours_in_lookback_period;
}
void OAICurrentInstance::setSavingsPlansCoveredHoursInLookbackPeriod(const QString &savings_plans_covered_hours_in_lookback_period) {
    m_savings_plans_covered_hours_in_lookback_period = savings_plans_covered_hours_in_lookback_period;
    m_savings_plans_covered_hours_in_lookback_period_isSet = true;
}

bool OAICurrentInstance::is_savings_plans_covered_hours_in_lookback_period_Set() const{
    return m_savings_plans_covered_hours_in_lookback_period_isSet;
}

bool OAICurrentInstance::is_savings_plans_covered_hours_in_lookback_period_Valid() const{
    return m_savings_plans_covered_hours_in_lookback_period_isValid;
}

QString OAICurrentInstance::getOnDemandHoursInLookbackPeriod() const {
    return m_on_demand_hours_in_lookback_period;
}
void OAICurrentInstance::setOnDemandHoursInLookbackPeriod(const QString &on_demand_hours_in_lookback_period) {
    m_on_demand_hours_in_lookback_period = on_demand_hours_in_lookback_period;
    m_on_demand_hours_in_lookback_period_isSet = true;
}

bool OAICurrentInstance::is_on_demand_hours_in_lookback_period_Set() const{
    return m_on_demand_hours_in_lookback_period_isSet;
}

bool OAICurrentInstance::is_on_demand_hours_in_lookback_period_Valid() const{
    return m_on_demand_hours_in_lookback_period_isValid;
}

QString OAICurrentInstance::getTotalRunningHoursInLookbackPeriod() const {
    return m_total_running_hours_in_lookback_period;
}
void OAICurrentInstance::setTotalRunningHoursInLookbackPeriod(const QString &total_running_hours_in_lookback_period) {
    m_total_running_hours_in_lookback_period = total_running_hours_in_lookback_period;
    m_total_running_hours_in_lookback_period_isSet = true;
}

bool OAICurrentInstance::is_total_running_hours_in_lookback_period_Set() const{
    return m_total_running_hours_in_lookback_period_isSet;
}

bool OAICurrentInstance::is_total_running_hours_in_lookback_period_Valid() const{
    return m_total_running_hours_in_lookback_period_isValid;
}

QString OAICurrentInstance::getMonthlyCost() const {
    return m_monthly_cost;
}
void OAICurrentInstance::setMonthlyCost(const QString &monthly_cost) {
    m_monthly_cost = monthly_cost;
    m_monthly_cost_isSet = true;
}

bool OAICurrentInstance::is_monthly_cost_Set() const{
    return m_monthly_cost_isSet;
}

bool OAICurrentInstance::is_monthly_cost_Valid() const{
    return m_monthly_cost_isValid;
}

QString OAICurrentInstance::getCurrencyCode() const {
    return m_currency_code;
}
void OAICurrentInstance::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAICurrentInstance::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAICurrentInstance::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

bool OAICurrentInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_utilization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_covered_hours_in_lookback_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_plans_covered_hours_in_lookback_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_demand_hours_in_lookback_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_running_hours_in_lookback_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrentInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
