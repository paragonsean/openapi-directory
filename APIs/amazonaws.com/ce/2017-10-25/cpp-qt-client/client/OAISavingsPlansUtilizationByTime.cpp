/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlansUtilizationByTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlansUtilizationByTime::OAISavingsPlansUtilizationByTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlansUtilizationByTime::OAISavingsPlansUtilizationByTime() {
    this->initializeModel();
}

OAISavingsPlansUtilizationByTime::~OAISavingsPlansUtilizationByTime() {}

void OAISavingsPlansUtilizationByTime::initializeModel() {

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_utilization_isSet = false;
    m_utilization_isValid = false;

    m_savings_isSet = false;
    m_savings_isValid = false;

    m_amortized_commitment_isSet = false;
    m_amortized_commitment_isValid = false;
}

void OAISavingsPlansUtilizationByTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavingsPlansUtilizationByTime::fromJsonObject(QJsonObject json) {

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("TimePeriod")]);
    m_time_period_isSet = !json[QString("TimePeriod")].isNull() && m_time_period_isValid;

    m_utilization_isValid = ::OpenAPI::fromJsonValue(m_utilization, json[QString("Utilization")]);
    m_utilization_isSet = !json[QString("Utilization")].isNull() && m_utilization_isValid;

    m_savings_isValid = ::OpenAPI::fromJsonValue(m_savings, json[QString("Savings")]);
    m_savings_isSet = !json[QString("Savings")].isNull() && m_savings_isValid;

    m_amortized_commitment_isValid = ::OpenAPI::fromJsonValue(m_amortized_commitment, json[QString("AmortizedCommitment")]);
    m_amortized_commitment_isSet = !json[QString("AmortizedCommitment")].isNull() && m_amortized_commitment_isValid;
}

QString OAISavingsPlansUtilizationByTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavingsPlansUtilizationByTime::asJsonObject() const {
    QJsonObject obj;
    if (m_time_period.isSet()) {
        obj.insert(QString("TimePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_utilization.isSet()) {
        obj.insert(QString("Utilization"), ::OpenAPI::toJsonValue(m_utilization));
    }
    if (m_savings.isSet()) {
        obj.insert(QString("Savings"), ::OpenAPI::toJsonValue(m_savings));
    }
    if (m_amortized_commitment.isSet()) {
        obj.insert(QString("AmortizedCommitment"), ::OpenAPI::toJsonValue(m_amortized_commitment));
    }
    return obj;
}

OAIDateInterval OAISavingsPlansUtilizationByTime::getTimePeriod() const {
    return m_time_period;
}
void OAISavingsPlansUtilizationByTime::setTimePeriod(const OAIDateInterval &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAISavingsPlansUtilizationByTime::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAISavingsPlansUtilizationByTime::is_time_period_Valid() const{
    return m_time_period_isValid;
}

OAISavingsPlansUtilizationAggregates_Utilization OAISavingsPlansUtilizationByTime::getUtilization() const {
    return m_utilization;
}
void OAISavingsPlansUtilizationByTime::setUtilization(const OAISavingsPlansUtilizationAggregates_Utilization &utilization) {
    m_utilization = utilization;
    m_utilization_isSet = true;
}

bool OAISavingsPlansUtilizationByTime::is_utilization_Set() const{
    return m_utilization_isSet;
}

bool OAISavingsPlansUtilizationByTime::is_utilization_Valid() const{
    return m_utilization_isValid;
}

OAISavingsPlansUtilizationAggregates_Savings OAISavingsPlansUtilizationByTime::getSavings() const {
    return m_savings;
}
void OAISavingsPlansUtilizationByTime::setSavings(const OAISavingsPlansUtilizationAggregates_Savings &savings) {
    m_savings = savings;
    m_savings_isSet = true;
}

bool OAISavingsPlansUtilizationByTime::is_savings_Set() const{
    return m_savings_isSet;
}

bool OAISavingsPlansUtilizationByTime::is_savings_Valid() const{
    return m_savings_isValid;
}

OAISavingsPlansUtilizationAggregates_AmortizedCommitment OAISavingsPlansUtilizationByTime::getAmortizedCommitment() const {
    return m_amortized_commitment;
}
void OAISavingsPlansUtilizationByTime::setAmortizedCommitment(const OAISavingsPlansUtilizationAggregates_AmortizedCommitment &amortized_commitment) {
    m_amortized_commitment = amortized_commitment;
    m_amortized_commitment_isSet = true;
}

bool OAISavingsPlansUtilizationByTime::is_amortized_commitment_Set() const{
    return m_amortized_commitment_isSet;
}

bool OAISavingsPlansUtilizationByTime::is_amortized_commitment_Valid() const{
    return m_amortized_commitment_isValid;
}

bool OAISavingsPlansUtilizationByTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_utilization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amortized_commitment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavingsPlansUtilizationByTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_time_period_isValid && m_utilization_isValid && true;
}

} // namespace OpenAPI
