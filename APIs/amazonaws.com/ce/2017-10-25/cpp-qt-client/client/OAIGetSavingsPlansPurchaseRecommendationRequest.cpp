/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSavingsPlansPurchaseRecommendationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSavingsPlansPurchaseRecommendationRequest::OAIGetSavingsPlansPurchaseRecommendationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSavingsPlansPurchaseRecommendationRequest::OAIGetSavingsPlansPurchaseRecommendationRequest() {
    this->initializeModel();
}

OAIGetSavingsPlansPurchaseRecommendationRequest::~OAIGetSavingsPlansPurchaseRecommendationRequest() {}

void OAIGetSavingsPlansPurchaseRecommendationRequest::initializeModel() {

    m_savings_plans_type_isSet = false;
    m_savings_plans_type_isValid = false;

    m_term_in_years_isSet = false;
    m_term_in_years_isValid = false;

    m_payment_option_isSet = false;
    m_payment_option_isValid = false;

    m_account_scope_isSet = false;
    m_account_scope_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_lookback_period_in_days_isSet = false;
    m_lookback_period_in_days_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;
}

void OAIGetSavingsPlansPurchaseRecommendationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSavingsPlansPurchaseRecommendationRequest::fromJsonObject(QJsonObject json) {

    m_savings_plans_type_isValid = ::OpenAPI::fromJsonValue(m_savings_plans_type, json[QString("SavingsPlansType")]);
    m_savings_plans_type_isSet = !json[QString("SavingsPlansType")].isNull() && m_savings_plans_type_isValid;

    m_term_in_years_isValid = ::OpenAPI::fromJsonValue(m_term_in_years, json[QString("TermInYears")]);
    m_term_in_years_isSet = !json[QString("TermInYears")].isNull() && m_term_in_years_isValid;

    m_payment_option_isValid = ::OpenAPI::fromJsonValue(m_payment_option, json[QString("PaymentOption")]);
    m_payment_option_isSet = !json[QString("PaymentOption")].isNull() && m_payment_option_isValid;

    m_account_scope_isValid = ::OpenAPI::fromJsonValue(m_account_scope, json[QString("AccountScope")]);
    m_account_scope_isSet = !json[QString("AccountScope")].isNull() && m_account_scope_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("PageSize")]);
    m_page_size_isSet = !json[QString("PageSize")].isNull() && m_page_size_isValid;

    m_lookback_period_in_days_isValid = ::OpenAPI::fromJsonValue(m_lookback_period_in_days, json[QString("LookbackPeriodInDays")]);
    m_lookback_period_in_days_isSet = !json[QString("LookbackPeriodInDays")].isNull() && m_lookback_period_in_days_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;
}

QString OAIGetSavingsPlansPurchaseRecommendationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSavingsPlansPurchaseRecommendationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_savings_plans_type.isSet()) {
        obj.insert(QString("SavingsPlansType"), ::OpenAPI::toJsonValue(m_savings_plans_type));
    }
    if (m_term_in_years.isSet()) {
        obj.insert(QString("TermInYears"), ::OpenAPI::toJsonValue(m_term_in_years));
    }
    if (m_payment_option.isSet()) {
        obj.insert(QString("PaymentOption"), ::OpenAPI::toJsonValue(m_payment_option));
    }
    if (m_account_scope.isSet()) {
        obj.insert(QString("AccountScope"), ::OpenAPI::toJsonValue(m_account_scope));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("PageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_lookback_period_in_days.isSet()) {
        obj.insert(QString("LookbackPeriodInDays"), ::OpenAPI::toJsonValue(m_lookback_period_in_days));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    return obj;
}

OAISupportedSavingsPlansType OAIGetSavingsPlansPurchaseRecommendationRequest::getSavingsPlansType() const {
    return m_savings_plans_type;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest::setSavingsPlansType(const OAISupportedSavingsPlansType &savings_plans_type) {
    m_savings_plans_type = savings_plans_type;
    m_savings_plans_type_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_savings_plans_type_Set() const{
    return m_savings_plans_type_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_savings_plans_type_Valid() const{
    return m_savings_plans_type_isValid;
}

OAITermInYears OAIGetSavingsPlansPurchaseRecommendationRequest::getTermInYears() const {
    return m_term_in_years;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest::setTermInYears(const OAITermInYears &term_in_years) {
    m_term_in_years = term_in_years;
    m_term_in_years_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_term_in_years_Set() const{
    return m_term_in_years_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_term_in_years_Valid() const{
    return m_term_in_years_isValid;
}

OAIPaymentOption OAIGetSavingsPlansPurchaseRecommendationRequest::getPaymentOption() const {
    return m_payment_option;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest::setPaymentOption(const OAIPaymentOption &payment_option) {
    m_payment_option = payment_option;
    m_payment_option_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_payment_option_Set() const{
    return m_payment_option_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_payment_option_Valid() const{
    return m_payment_option_isValid;
}

OAIAccountScope OAIGetSavingsPlansPurchaseRecommendationRequest::getAccountScope() const {
    return m_account_scope;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest::setAccountScope(const OAIAccountScope &account_scope) {
    m_account_scope = account_scope;
    m_account_scope_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_account_scope_Set() const{
    return m_account_scope_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_account_scope_Valid() const{
    return m_account_scope_isValid;
}

QString OAIGetSavingsPlansPurchaseRecommendationRequest::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

qint32 OAIGetSavingsPlansPurchaseRecommendationRequest::getPageSize() const {
    return m_page_size;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

OAILookbackPeriodInDays OAIGetSavingsPlansPurchaseRecommendationRequest::getLookbackPeriodInDays() const {
    return m_lookback_period_in_days;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest::setLookbackPeriodInDays(const OAILookbackPeriodInDays &lookback_period_in_days) {
    m_lookback_period_in_days = lookback_period_in_days;
    m_lookback_period_in_days_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_lookback_period_in_days_Set() const{
    return m_lookback_period_in_days_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_lookback_period_in_days_Valid() const{
    return m_lookback_period_in_days_isValid;
}

OAIGetSavingsPlansPurchaseRecommendationRequest_Filter OAIGetSavingsPlansPurchaseRecommendationRequest::getFilter() const {
    return m_filter;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest::setFilter(const OAIGetSavingsPlansPurchaseRecommendationRequest_Filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_savings_plans_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_in_years.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookback_period_in_days.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_savings_plans_type_isValid && m_term_in_years_isValid && m_payment_option_isValid && m_lookback_period_in_days_isValid && true;
}

} // namespace OpenAPI
