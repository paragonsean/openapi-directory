/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReservationAggregates.h
 *
 * The aggregated numbers for your reservation usage.
 */

#ifndef OAIReservationAggregates_H
#define OAIReservationAggregates_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReservationAggregates : public OAIObject {
public:
    OAIReservationAggregates();
    OAIReservationAggregates(QString json);
    ~OAIReservationAggregates() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getUtilizationPercentage() const;
    void setUtilizationPercentage(const QString &utilization_percentage);
    bool is_utilization_percentage_Set() const;
    bool is_utilization_percentage_Valid() const;

    QString getUtilizationPercentageInUnits() const;
    void setUtilizationPercentageInUnits(const QString &utilization_percentage_in_units);
    bool is_utilization_percentage_in_units_Set() const;
    bool is_utilization_percentage_in_units_Valid() const;

    QString getPurchasedHours() const;
    void setPurchasedHours(const QString &purchased_hours);
    bool is_purchased_hours_Set() const;
    bool is_purchased_hours_Valid() const;

    QString getPurchasedUnits() const;
    void setPurchasedUnits(const QString &purchased_units);
    bool is_purchased_units_Set() const;
    bool is_purchased_units_Valid() const;

    QString getTotalActualHours() const;
    void setTotalActualHours(const QString &total_actual_hours);
    bool is_total_actual_hours_Set() const;
    bool is_total_actual_hours_Valid() const;

    QString getTotalActualUnits() const;
    void setTotalActualUnits(const QString &total_actual_units);
    bool is_total_actual_units_Set() const;
    bool is_total_actual_units_Valid() const;

    QString getUnusedHours() const;
    void setUnusedHours(const QString &unused_hours);
    bool is_unused_hours_Set() const;
    bool is_unused_hours_Valid() const;

    QString getUnusedUnits() const;
    void setUnusedUnits(const QString &unused_units);
    bool is_unused_units_Set() const;
    bool is_unused_units_Valid() const;

    QString getOnDemandCostOfRiHoursUsed() const;
    void setOnDemandCostOfRiHoursUsed(const QString &on_demand_cost_of_ri_hours_used);
    bool is_on_demand_cost_of_ri_hours_used_Set() const;
    bool is_on_demand_cost_of_ri_hours_used_Valid() const;

    QString getNetRiSavings() const;
    void setNetRiSavings(const QString &net_ri_savings);
    bool is_net_ri_savings_Set() const;
    bool is_net_ri_savings_Valid() const;

    QString getTotalPotentialRiSavings() const;
    void setTotalPotentialRiSavings(const QString &total_potential_ri_savings);
    bool is_total_potential_ri_savings_Set() const;
    bool is_total_potential_ri_savings_Valid() const;

    QString getAmortizedUpfrontFee() const;
    void setAmortizedUpfrontFee(const QString &amortized_upfront_fee);
    bool is_amortized_upfront_fee_Set() const;
    bool is_amortized_upfront_fee_Valid() const;

    QString getAmortizedRecurringFee() const;
    void setAmortizedRecurringFee(const QString &amortized_recurring_fee);
    bool is_amortized_recurring_fee_Set() const;
    bool is_amortized_recurring_fee_Valid() const;

    QString getTotalAmortizedFee() const;
    void setTotalAmortizedFee(const QString &total_amortized_fee);
    bool is_total_amortized_fee_Set() const;
    bool is_total_amortized_fee_Valid() const;

    QString getRiCostForUnusedHours() const;
    void setRiCostForUnusedHours(const QString &ri_cost_for_unused_hours);
    bool is_ri_cost_for_unused_hours_Set() const;
    bool is_ri_cost_for_unused_hours_Valid() const;

    QString getRealizedSavings() const;
    void setRealizedSavings(const QString &realized_savings);
    bool is_realized_savings_Set() const;
    bool is_realized_savings_Valid() const;

    QString getUnrealizedSavings() const;
    void setUnrealizedSavings(const QString &unrealized_savings);
    bool is_unrealized_savings_Set() const;
    bool is_unrealized_savings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_utilization_percentage;
    bool m_utilization_percentage_isSet;
    bool m_utilization_percentage_isValid;

    QString m_utilization_percentage_in_units;
    bool m_utilization_percentage_in_units_isSet;
    bool m_utilization_percentage_in_units_isValid;

    QString m_purchased_hours;
    bool m_purchased_hours_isSet;
    bool m_purchased_hours_isValid;

    QString m_purchased_units;
    bool m_purchased_units_isSet;
    bool m_purchased_units_isValid;

    QString m_total_actual_hours;
    bool m_total_actual_hours_isSet;
    bool m_total_actual_hours_isValid;

    QString m_total_actual_units;
    bool m_total_actual_units_isSet;
    bool m_total_actual_units_isValid;

    QString m_unused_hours;
    bool m_unused_hours_isSet;
    bool m_unused_hours_isValid;

    QString m_unused_units;
    bool m_unused_units_isSet;
    bool m_unused_units_isValid;

    QString m_on_demand_cost_of_ri_hours_used;
    bool m_on_demand_cost_of_ri_hours_used_isSet;
    bool m_on_demand_cost_of_ri_hours_used_isValid;

    QString m_net_ri_savings;
    bool m_net_ri_savings_isSet;
    bool m_net_ri_savings_isValid;

    QString m_total_potential_ri_savings;
    bool m_total_potential_ri_savings_isSet;
    bool m_total_potential_ri_savings_isValid;

    QString m_amortized_upfront_fee;
    bool m_amortized_upfront_fee_isSet;
    bool m_amortized_upfront_fee_isValid;

    QString m_amortized_recurring_fee;
    bool m_amortized_recurring_fee_isSet;
    bool m_amortized_recurring_fee_isValid;

    QString m_total_amortized_fee;
    bool m_total_amortized_fee_isSet;
    bool m_total_amortized_fee_isValid;

    QString m_ri_cost_for_unused_hours;
    bool m_ri_cost_for_unused_hours_isSet;
    bool m_ri_cost_for_unused_hours_isValid;

    QString m_realized_savings;
    bool m_realized_savings_isSet;
    bool m_realized_savings_isValid;

    QString m_unrealized_savings;
    bool m_unrealized_savings_isSet;
    bool m_unrealized_savings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReservationAggregates)

#endif // OAIReservationAggregates_H
