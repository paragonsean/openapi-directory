/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSavingsPlansUtilizationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSavingsPlansUtilizationRequest::OAIGetSavingsPlansUtilizationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSavingsPlansUtilizationRequest::OAIGetSavingsPlansUtilizationRequest() {
    this->initializeModel();
}

OAIGetSavingsPlansUtilizationRequest::~OAIGetSavingsPlansUtilizationRequest() {}

void OAIGetSavingsPlansUtilizationRequest::initializeModel() {

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_granularity_isSet = false;
    m_granularity_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;
}

void OAIGetSavingsPlansUtilizationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSavingsPlansUtilizationRequest::fromJsonObject(QJsonObject json) {

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("TimePeriod")]);
    m_time_period_isSet = !json[QString("TimePeriod")].isNull() && m_time_period_isValid;

    m_granularity_isValid = ::OpenAPI::fromJsonValue(m_granularity, json[QString("Granularity")]);
    m_granularity_isSet = !json[QString("Granularity")].isNull() && m_granularity_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;
}

QString OAIGetSavingsPlansUtilizationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSavingsPlansUtilizationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_time_period.isSet()) {
        obj.insert(QString("TimePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_granularity.isSet()) {
        obj.insert(QString("Granularity"), ::OpenAPI::toJsonValue(m_granularity));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    return obj;
}

OAIGetSavingsPlansCoverageRequest_TimePeriod OAIGetSavingsPlansUtilizationRequest::getTimePeriod() const {
    return m_time_period;
}
void OAIGetSavingsPlansUtilizationRequest::setTimePeriod(const OAIGetSavingsPlansCoverageRequest_TimePeriod &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIGetSavingsPlansUtilizationRequest::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIGetSavingsPlansUtilizationRequest::is_time_period_Valid() const{
    return m_time_period_isValid;
}

OAIGranularity OAIGetSavingsPlansUtilizationRequest::getGranularity() const {
    return m_granularity;
}
void OAIGetSavingsPlansUtilizationRequest::setGranularity(const OAIGranularity &granularity) {
    m_granularity = granularity;
    m_granularity_isSet = true;
}

bool OAIGetSavingsPlansUtilizationRequest::is_granularity_Set() const{
    return m_granularity_isSet;
}

bool OAIGetSavingsPlansUtilizationRequest::is_granularity_Valid() const{
    return m_granularity_isValid;
}

OAIGetSavingsPlansUtilizationRequest_Filter OAIGetSavingsPlansUtilizationRequest::getFilter() const {
    return m_filter;
}
void OAIGetSavingsPlansUtilizationRequest::setFilter(const OAIGetSavingsPlansUtilizationRequest_Filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetSavingsPlansUtilizationRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetSavingsPlansUtilizationRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIGetSavingsPlansUtilizationRequest_SortBy OAIGetSavingsPlansUtilizationRequest::getSortBy() const {
    return m_sort_by;
}
void OAIGetSavingsPlansUtilizationRequest::setSortBy(const OAIGetSavingsPlansUtilizationRequest_SortBy &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIGetSavingsPlansUtilizationRequest::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIGetSavingsPlansUtilizationRequest::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

bool OAIGetSavingsPlansUtilizationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSavingsPlansUtilizationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_time_period_isValid && true;
}

} // namespace OpenAPI
