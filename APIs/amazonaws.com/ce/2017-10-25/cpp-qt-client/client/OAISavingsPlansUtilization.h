/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISavingsPlansUtilization.h
 *
 * The measurement of how well you&#39;re using your existing Savings Plans.
 */

#ifndef OAISavingsPlansUtilization_H
#define OAISavingsPlansUtilization_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISavingsPlansUtilization : public OAIObject {
public:
    OAISavingsPlansUtilization();
    OAISavingsPlansUtilization(QString json);
    ~OAISavingsPlansUtilization() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTotalCommitment() const;
    void setTotalCommitment(const QString &total_commitment);
    bool is_total_commitment_Set() const;
    bool is_total_commitment_Valid() const;

    QString getUsedCommitment() const;
    void setUsedCommitment(const QString &used_commitment);
    bool is_used_commitment_Set() const;
    bool is_used_commitment_Valid() const;

    QString getUnusedCommitment() const;
    void setUnusedCommitment(const QString &unused_commitment);
    bool is_unused_commitment_Set() const;
    bool is_unused_commitment_Valid() const;

    QString getUtilizationPercentage() const;
    void setUtilizationPercentage(const QString &utilization_percentage);
    bool is_utilization_percentage_Set() const;
    bool is_utilization_percentage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_total_commitment;
    bool m_total_commitment_isSet;
    bool m_total_commitment_isValid;

    QString m_used_commitment;
    bool m_used_commitment_isSet;
    bool m_used_commitment_isValid;

    QString m_unused_commitment;
    bool m_unused_commitment_isSet;
    bool m_unused_commitment_isValid;

    QString m_utilization_percentage;
    bool m_utilization_percentage_isSet;
    bool m_utilization_percentage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISavingsPlansUtilization)

#endif // OAISavingsPlansUtilization_H
