/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupDefinition::OAIGroupDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupDefinition::OAIGroupDefinition() {
    this->initializeModel();
}

OAIGroupDefinition::~OAIGroupDefinition() {}

void OAIGroupDefinition::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAIGroupDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupDefinition::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;
}

QString OAIGroupDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

OAIGroupDefinitionType OAIGroupDefinition::getType() const {
    return m_type;
}
void OAIGroupDefinition::setType(const OAIGroupDefinitionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGroupDefinition::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGroupDefinition::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGroupDefinition::getKey() const {
    return m_key;
}
void OAIGroupDefinition::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIGroupDefinition::is_key_Set() const{
    return m_key_isSet;
}

bool OAIGroupDefinition::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIGroupDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
