/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUtilizationByTime_Total.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUtilizationByTime_Total::OAIUtilizationByTime_Total(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUtilizationByTime_Total::OAIUtilizationByTime_Total() {
    this->initializeModel();
}

OAIUtilizationByTime_Total::~OAIUtilizationByTime_Total() {}

void OAIUtilizationByTime_Total::initializeModel() {

    m_utilization_percentage_isSet = false;
    m_utilization_percentage_isValid = false;

    m_utilization_percentage_in_units_isSet = false;
    m_utilization_percentage_in_units_isValid = false;

    m_purchased_hours_isSet = false;
    m_purchased_hours_isValid = false;

    m_purchased_units_isSet = false;
    m_purchased_units_isValid = false;

    m_total_actual_hours_isSet = false;
    m_total_actual_hours_isValid = false;

    m_total_actual_units_isSet = false;
    m_total_actual_units_isValid = false;

    m_unused_hours_isSet = false;
    m_unused_hours_isValid = false;

    m_unused_units_isSet = false;
    m_unused_units_isValid = false;

    m_on_demand_cost_of_ri_hours_used_isSet = false;
    m_on_demand_cost_of_ri_hours_used_isValid = false;

    m_net_ri_savings_isSet = false;
    m_net_ri_savings_isValid = false;

    m_total_potential_ri_savings_isSet = false;
    m_total_potential_ri_savings_isValid = false;

    m_amortized_upfront_fee_isSet = false;
    m_amortized_upfront_fee_isValid = false;

    m_amortized_recurring_fee_isSet = false;
    m_amortized_recurring_fee_isValid = false;

    m_total_amortized_fee_isSet = false;
    m_total_amortized_fee_isValid = false;

    m_ri_cost_for_unused_hours_isSet = false;
    m_ri_cost_for_unused_hours_isValid = false;

    m_realized_savings_isSet = false;
    m_realized_savings_isValid = false;

    m_unrealized_savings_isSet = false;
    m_unrealized_savings_isValid = false;
}

void OAIUtilizationByTime_Total::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUtilizationByTime_Total::fromJsonObject(QJsonObject json) {

    m_utilization_percentage_isValid = ::OpenAPI::fromJsonValue(m_utilization_percentage, json[QString("UtilizationPercentage")]);
    m_utilization_percentage_isSet = !json[QString("UtilizationPercentage")].isNull() && m_utilization_percentage_isValid;

    m_utilization_percentage_in_units_isValid = ::OpenAPI::fromJsonValue(m_utilization_percentage_in_units, json[QString("UtilizationPercentageInUnits")]);
    m_utilization_percentage_in_units_isSet = !json[QString("UtilizationPercentageInUnits")].isNull() && m_utilization_percentage_in_units_isValid;

    m_purchased_hours_isValid = ::OpenAPI::fromJsonValue(m_purchased_hours, json[QString("PurchasedHours")]);
    m_purchased_hours_isSet = !json[QString("PurchasedHours")].isNull() && m_purchased_hours_isValid;

    m_purchased_units_isValid = ::OpenAPI::fromJsonValue(m_purchased_units, json[QString("PurchasedUnits")]);
    m_purchased_units_isSet = !json[QString("PurchasedUnits")].isNull() && m_purchased_units_isValid;

    m_total_actual_hours_isValid = ::OpenAPI::fromJsonValue(m_total_actual_hours, json[QString("TotalActualHours")]);
    m_total_actual_hours_isSet = !json[QString("TotalActualHours")].isNull() && m_total_actual_hours_isValid;

    m_total_actual_units_isValid = ::OpenAPI::fromJsonValue(m_total_actual_units, json[QString("TotalActualUnits")]);
    m_total_actual_units_isSet = !json[QString("TotalActualUnits")].isNull() && m_total_actual_units_isValid;

    m_unused_hours_isValid = ::OpenAPI::fromJsonValue(m_unused_hours, json[QString("UnusedHours")]);
    m_unused_hours_isSet = !json[QString("UnusedHours")].isNull() && m_unused_hours_isValid;

    m_unused_units_isValid = ::OpenAPI::fromJsonValue(m_unused_units, json[QString("UnusedUnits")]);
    m_unused_units_isSet = !json[QString("UnusedUnits")].isNull() && m_unused_units_isValid;

    m_on_demand_cost_of_ri_hours_used_isValid = ::OpenAPI::fromJsonValue(m_on_demand_cost_of_ri_hours_used, json[QString("OnDemandCostOfRIHoursUsed")]);
    m_on_demand_cost_of_ri_hours_used_isSet = !json[QString("OnDemandCostOfRIHoursUsed")].isNull() && m_on_demand_cost_of_ri_hours_used_isValid;

    m_net_ri_savings_isValid = ::OpenAPI::fromJsonValue(m_net_ri_savings, json[QString("NetRISavings")]);
    m_net_ri_savings_isSet = !json[QString("NetRISavings")].isNull() && m_net_ri_savings_isValid;

    m_total_potential_ri_savings_isValid = ::OpenAPI::fromJsonValue(m_total_potential_ri_savings, json[QString("TotalPotentialRISavings")]);
    m_total_potential_ri_savings_isSet = !json[QString("TotalPotentialRISavings")].isNull() && m_total_potential_ri_savings_isValid;

    m_amortized_upfront_fee_isValid = ::OpenAPI::fromJsonValue(m_amortized_upfront_fee, json[QString("AmortizedUpfrontFee")]);
    m_amortized_upfront_fee_isSet = !json[QString("AmortizedUpfrontFee")].isNull() && m_amortized_upfront_fee_isValid;

    m_amortized_recurring_fee_isValid = ::OpenAPI::fromJsonValue(m_amortized_recurring_fee, json[QString("AmortizedRecurringFee")]);
    m_amortized_recurring_fee_isSet = !json[QString("AmortizedRecurringFee")].isNull() && m_amortized_recurring_fee_isValid;

    m_total_amortized_fee_isValid = ::OpenAPI::fromJsonValue(m_total_amortized_fee, json[QString("TotalAmortizedFee")]);
    m_total_amortized_fee_isSet = !json[QString("TotalAmortizedFee")].isNull() && m_total_amortized_fee_isValid;

    m_ri_cost_for_unused_hours_isValid = ::OpenAPI::fromJsonValue(m_ri_cost_for_unused_hours, json[QString("RICostForUnusedHours")]);
    m_ri_cost_for_unused_hours_isSet = !json[QString("RICostForUnusedHours")].isNull() && m_ri_cost_for_unused_hours_isValid;

    m_realized_savings_isValid = ::OpenAPI::fromJsonValue(m_realized_savings, json[QString("RealizedSavings")]);
    m_realized_savings_isSet = !json[QString("RealizedSavings")].isNull() && m_realized_savings_isValid;

    m_unrealized_savings_isValid = ::OpenAPI::fromJsonValue(m_unrealized_savings, json[QString("UnrealizedSavings")]);
    m_unrealized_savings_isSet = !json[QString("UnrealizedSavings")].isNull() && m_unrealized_savings_isValid;
}

QString OAIUtilizationByTime_Total::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUtilizationByTime_Total::asJsonObject() const {
    QJsonObject obj;
    if (m_utilization_percentage_isSet) {
        obj.insert(QString("UtilizationPercentage"), ::OpenAPI::toJsonValue(m_utilization_percentage));
    }
    if (m_utilization_percentage_in_units_isSet) {
        obj.insert(QString("UtilizationPercentageInUnits"), ::OpenAPI::toJsonValue(m_utilization_percentage_in_units));
    }
    if (m_purchased_hours_isSet) {
        obj.insert(QString("PurchasedHours"), ::OpenAPI::toJsonValue(m_purchased_hours));
    }
    if (m_purchased_units_isSet) {
        obj.insert(QString("PurchasedUnits"), ::OpenAPI::toJsonValue(m_purchased_units));
    }
    if (m_total_actual_hours_isSet) {
        obj.insert(QString("TotalActualHours"), ::OpenAPI::toJsonValue(m_total_actual_hours));
    }
    if (m_total_actual_units_isSet) {
        obj.insert(QString("TotalActualUnits"), ::OpenAPI::toJsonValue(m_total_actual_units));
    }
    if (m_unused_hours_isSet) {
        obj.insert(QString("UnusedHours"), ::OpenAPI::toJsonValue(m_unused_hours));
    }
    if (m_unused_units_isSet) {
        obj.insert(QString("UnusedUnits"), ::OpenAPI::toJsonValue(m_unused_units));
    }
    if (m_on_demand_cost_of_ri_hours_used_isSet) {
        obj.insert(QString("OnDemandCostOfRIHoursUsed"), ::OpenAPI::toJsonValue(m_on_demand_cost_of_ri_hours_used));
    }
    if (m_net_ri_savings_isSet) {
        obj.insert(QString("NetRISavings"), ::OpenAPI::toJsonValue(m_net_ri_savings));
    }
    if (m_total_potential_ri_savings_isSet) {
        obj.insert(QString("TotalPotentialRISavings"), ::OpenAPI::toJsonValue(m_total_potential_ri_savings));
    }
    if (m_amortized_upfront_fee_isSet) {
        obj.insert(QString("AmortizedUpfrontFee"), ::OpenAPI::toJsonValue(m_amortized_upfront_fee));
    }
    if (m_amortized_recurring_fee_isSet) {
        obj.insert(QString("AmortizedRecurringFee"), ::OpenAPI::toJsonValue(m_amortized_recurring_fee));
    }
    if (m_total_amortized_fee_isSet) {
        obj.insert(QString("TotalAmortizedFee"), ::OpenAPI::toJsonValue(m_total_amortized_fee));
    }
    if (m_ri_cost_for_unused_hours_isSet) {
        obj.insert(QString("RICostForUnusedHours"), ::OpenAPI::toJsonValue(m_ri_cost_for_unused_hours));
    }
    if (m_realized_savings_isSet) {
        obj.insert(QString("RealizedSavings"), ::OpenAPI::toJsonValue(m_realized_savings));
    }
    if (m_unrealized_savings_isSet) {
        obj.insert(QString("UnrealizedSavings"), ::OpenAPI::toJsonValue(m_unrealized_savings));
    }
    return obj;
}

QString OAIUtilizationByTime_Total::getUtilizationPercentage() const {
    return m_utilization_percentage;
}
void OAIUtilizationByTime_Total::setUtilizationPercentage(const QString &utilization_percentage) {
    m_utilization_percentage = utilization_percentage;
    m_utilization_percentage_isSet = true;
}

bool OAIUtilizationByTime_Total::is_utilization_percentage_Set() const{
    return m_utilization_percentage_isSet;
}

bool OAIUtilizationByTime_Total::is_utilization_percentage_Valid() const{
    return m_utilization_percentage_isValid;
}

QString OAIUtilizationByTime_Total::getUtilizationPercentageInUnits() const {
    return m_utilization_percentage_in_units;
}
void OAIUtilizationByTime_Total::setUtilizationPercentageInUnits(const QString &utilization_percentage_in_units) {
    m_utilization_percentage_in_units = utilization_percentage_in_units;
    m_utilization_percentage_in_units_isSet = true;
}

bool OAIUtilizationByTime_Total::is_utilization_percentage_in_units_Set() const{
    return m_utilization_percentage_in_units_isSet;
}

bool OAIUtilizationByTime_Total::is_utilization_percentage_in_units_Valid() const{
    return m_utilization_percentage_in_units_isValid;
}

QString OAIUtilizationByTime_Total::getPurchasedHours() const {
    return m_purchased_hours;
}
void OAIUtilizationByTime_Total::setPurchasedHours(const QString &purchased_hours) {
    m_purchased_hours = purchased_hours;
    m_purchased_hours_isSet = true;
}

bool OAIUtilizationByTime_Total::is_purchased_hours_Set() const{
    return m_purchased_hours_isSet;
}

bool OAIUtilizationByTime_Total::is_purchased_hours_Valid() const{
    return m_purchased_hours_isValid;
}

QString OAIUtilizationByTime_Total::getPurchasedUnits() const {
    return m_purchased_units;
}
void OAIUtilizationByTime_Total::setPurchasedUnits(const QString &purchased_units) {
    m_purchased_units = purchased_units;
    m_purchased_units_isSet = true;
}

bool OAIUtilizationByTime_Total::is_purchased_units_Set() const{
    return m_purchased_units_isSet;
}

bool OAIUtilizationByTime_Total::is_purchased_units_Valid() const{
    return m_purchased_units_isValid;
}

QString OAIUtilizationByTime_Total::getTotalActualHours() const {
    return m_total_actual_hours;
}
void OAIUtilizationByTime_Total::setTotalActualHours(const QString &total_actual_hours) {
    m_total_actual_hours = total_actual_hours;
    m_total_actual_hours_isSet = true;
}

bool OAIUtilizationByTime_Total::is_total_actual_hours_Set() const{
    return m_total_actual_hours_isSet;
}

bool OAIUtilizationByTime_Total::is_total_actual_hours_Valid() const{
    return m_total_actual_hours_isValid;
}

QString OAIUtilizationByTime_Total::getTotalActualUnits() const {
    return m_total_actual_units;
}
void OAIUtilizationByTime_Total::setTotalActualUnits(const QString &total_actual_units) {
    m_total_actual_units = total_actual_units;
    m_total_actual_units_isSet = true;
}

bool OAIUtilizationByTime_Total::is_total_actual_units_Set() const{
    return m_total_actual_units_isSet;
}

bool OAIUtilizationByTime_Total::is_total_actual_units_Valid() const{
    return m_total_actual_units_isValid;
}

QString OAIUtilizationByTime_Total::getUnusedHours() const {
    return m_unused_hours;
}
void OAIUtilizationByTime_Total::setUnusedHours(const QString &unused_hours) {
    m_unused_hours = unused_hours;
    m_unused_hours_isSet = true;
}

bool OAIUtilizationByTime_Total::is_unused_hours_Set() const{
    return m_unused_hours_isSet;
}

bool OAIUtilizationByTime_Total::is_unused_hours_Valid() const{
    return m_unused_hours_isValid;
}

QString OAIUtilizationByTime_Total::getUnusedUnits() const {
    return m_unused_units;
}
void OAIUtilizationByTime_Total::setUnusedUnits(const QString &unused_units) {
    m_unused_units = unused_units;
    m_unused_units_isSet = true;
}

bool OAIUtilizationByTime_Total::is_unused_units_Set() const{
    return m_unused_units_isSet;
}

bool OAIUtilizationByTime_Total::is_unused_units_Valid() const{
    return m_unused_units_isValid;
}

QString OAIUtilizationByTime_Total::getOnDemandCostOfRiHoursUsed() const {
    return m_on_demand_cost_of_ri_hours_used;
}
void OAIUtilizationByTime_Total::setOnDemandCostOfRiHoursUsed(const QString &on_demand_cost_of_ri_hours_used) {
    m_on_demand_cost_of_ri_hours_used = on_demand_cost_of_ri_hours_used;
    m_on_demand_cost_of_ri_hours_used_isSet = true;
}

bool OAIUtilizationByTime_Total::is_on_demand_cost_of_ri_hours_used_Set() const{
    return m_on_demand_cost_of_ri_hours_used_isSet;
}

bool OAIUtilizationByTime_Total::is_on_demand_cost_of_ri_hours_used_Valid() const{
    return m_on_demand_cost_of_ri_hours_used_isValid;
}

QString OAIUtilizationByTime_Total::getNetRiSavings() const {
    return m_net_ri_savings;
}
void OAIUtilizationByTime_Total::setNetRiSavings(const QString &net_ri_savings) {
    m_net_ri_savings = net_ri_savings;
    m_net_ri_savings_isSet = true;
}

bool OAIUtilizationByTime_Total::is_net_ri_savings_Set() const{
    return m_net_ri_savings_isSet;
}

bool OAIUtilizationByTime_Total::is_net_ri_savings_Valid() const{
    return m_net_ri_savings_isValid;
}

QString OAIUtilizationByTime_Total::getTotalPotentialRiSavings() const {
    return m_total_potential_ri_savings;
}
void OAIUtilizationByTime_Total::setTotalPotentialRiSavings(const QString &total_potential_ri_savings) {
    m_total_potential_ri_savings = total_potential_ri_savings;
    m_total_potential_ri_savings_isSet = true;
}

bool OAIUtilizationByTime_Total::is_total_potential_ri_savings_Set() const{
    return m_total_potential_ri_savings_isSet;
}

bool OAIUtilizationByTime_Total::is_total_potential_ri_savings_Valid() const{
    return m_total_potential_ri_savings_isValid;
}

QString OAIUtilizationByTime_Total::getAmortizedUpfrontFee() const {
    return m_amortized_upfront_fee;
}
void OAIUtilizationByTime_Total::setAmortizedUpfrontFee(const QString &amortized_upfront_fee) {
    m_amortized_upfront_fee = amortized_upfront_fee;
    m_amortized_upfront_fee_isSet = true;
}

bool OAIUtilizationByTime_Total::is_amortized_upfront_fee_Set() const{
    return m_amortized_upfront_fee_isSet;
}

bool OAIUtilizationByTime_Total::is_amortized_upfront_fee_Valid() const{
    return m_amortized_upfront_fee_isValid;
}

QString OAIUtilizationByTime_Total::getAmortizedRecurringFee() const {
    return m_amortized_recurring_fee;
}
void OAIUtilizationByTime_Total::setAmortizedRecurringFee(const QString &amortized_recurring_fee) {
    m_amortized_recurring_fee = amortized_recurring_fee;
    m_amortized_recurring_fee_isSet = true;
}

bool OAIUtilizationByTime_Total::is_amortized_recurring_fee_Set() const{
    return m_amortized_recurring_fee_isSet;
}

bool OAIUtilizationByTime_Total::is_amortized_recurring_fee_Valid() const{
    return m_amortized_recurring_fee_isValid;
}

QString OAIUtilizationByTime_Total::getTotalAmortizedFee() const {
    return m_total_amortized_fee;
}
void OAIUtilizationByTime_Total::setTotalAmortizedFee(const QString &total_amortized_fee) {
    m_total_amortized_fee = total_amortized_fee;
    m_total_amortized_fee_isSet = true;
}

bool OAIUtilizationByTime_Total::is_total_amortized_fee_Set() const{
    return m_total_amortized_fee_isSet;
}

bool OAIUtilizationByTime_Total::is_total_amortized_fee_Valid() const{
    return m_total_amortized_fee_isValid;
}

QString OAIUtilizationByTime_Total::getRiCostForUnusedHours() const {
    return m_ri_cost_for_unused_hours;
}
void OAIUtilizationByTime_Total::setRiCostForUnusedHours(const QString &ri_cost_for_unused_hours) {
    m_ri_cost_for_unused_hours = ri_cost_for_unused_hours;
    m_ri_cost_for_unused_hours_isSet = true;
}

bool OAIUtilizationByTime_Total::is_ri_cost_for_unused_hours_Set() const{
    return m_ri_cost_for_unused_hours_isSet;
}

bool OAIUtilizationByTime_Total::is_ri_cost_for_unused_hours_Valid() const{
    return m_ri_cost_for_unused_hours_isValid;
}

QString OAIUtilizationByTime_Total::getRealizedSavings() const {
    return m_realized_savings;
}
void OAIUtilizationByTime_Total::setRealizedSavings(const QString &realized_savings) {
    m_realized_savings = realized_savings;
    m_realized_savings_isSet = true;
}

bool OAIUtilizationByTime_Total::is_realized_savings_Set() const{
    return m_realized_savings_isSet;
}

bool OAIUtilizationByTime_Total::is_realized_savings_Valid() const{
    return m_realized_savings_isValid;
}

QString OAIUtilizationByTime_Total::getUnrealizedSavings() const {
    return m_unrealized_savings;
}
void OAIUtilizationByTime_Total::setUnrealizedSavings(const QString &unrealized_savings) {
    m_unrealized_savings = unrealized_savings;
    m_unrealized_savings_isSet = true;
}

bool OAIUtilizationByTime_Total::is_unrealized_savings_Set() const{
    return m_unrealized_savings_isSet;
}

bool OAIUtilizationByTime_Total::is_unrealized_savings_Valid() const{
    return m_unrealized_savings_isValid;
}

bool OAIUtilizationByTime_Total::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_utilization_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utilization_percentage_in_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchased_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchased_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_actual_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_actual_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unused_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unused_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_demand_cost_of_ri_hours_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_ri_savings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_potential_ri_savings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amortized_upfront_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amortized_recurring_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amortized_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ri_cost_for_unused_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realized_savings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unrealized_savings_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUtilizationByTime_Total::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
