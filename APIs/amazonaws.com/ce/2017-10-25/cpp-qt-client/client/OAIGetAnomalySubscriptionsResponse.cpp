/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAnomalySubscriptionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAnomalySubscriptionsResponse::OAIGetAnomalySubscriptionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAnomalySubscriptionsResponse::OAIGetAnomalySubscriptionsResponse() {
    this->initializeModel();
}

OAIGetAnomalySubscriptionsResponse::~OAIGetAnomalySubscriptionsResponse() {}

void OAIGetAnomalySubscriptionsResponse::initializeModel() {

    m_anomaly_subscriptions_isSet = false;
    m_anomaly_subscriptions_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetAnomalySubscriptionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAnomalySubscriptionsResponse::fromJsonObject(QJsonObject json) {

    m_anomaly_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_anomaly_subscriptions, json[QString("AnomalySubscriptions")]);
    m_anomaly_subscriptions_isSet = !json[QString("AnomalySubscriptions")].isNull() && m_anomaly_subscriptions_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetAnomalySubscriptionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAnomalySubscriptionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_anomaly_subscriptions.isSet()) {
        obj.insert(QString("AnomalySubscriptions"), ::OpenAPI::toJsonValue(m_anomaly_subscriptions));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIGetAnomalySubscriptionsResponse::getAnomalySubscriptions() const {
    return m_anomaly_subscriptions;
}
void OAIGetAnomalySubscriptionsResponse::setAnomalySubscriptions(const QList &anomaly_subscriptions) {
    m_anomaly_subscriptions = anomaly_subscriptions;
    m_anomaly_subscriptions_isSet = true;
}

bool OAIGetAnomalySubscriptionsResponse::is_anomaly_subscriptions_Set() const{
    return m_anomaly_subscriptions_isSet;
}

bool OAIGetAnomalySubscriptionsResponse::is_anomaly_subscriptions_Valid() const{
    return m_anomaly_subscriptions_isValid;
}

QString OAIGetAnomalySubscriptionsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetAnomalySubscriptionsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetAnomalySubscriptionsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetAnomalySubscriptionsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetAnomalySubscriptionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anomaly_subscriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAnomalySubscriptionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_anomaly_subscriptions_isValid && true;
}

} // namespace OpenAPI
