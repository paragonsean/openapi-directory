/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartSavingsPlansPurchaseRecommendationGenerationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::OAIStartSavingsPlansPurchaseRecommendationGenerationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::OAIStartSavingsPlansPurchaseRecommendationGenerationResponse() {
    this->initializeModel();
}

OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::~OAIStartSavingsPlansPurchaseRecommendationGenerationResponse() {}

void OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::initializeModel() {

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_generation_started_time_isSet = false;
    m_generation_started_time_isValid = false;

    m_estimated_completion_time_isSet = false;
    m_estimated_completion_time_isValid = false;
}

void OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::fromJsonObject(QJsonObject json) {

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("RecommendationId")]);
    m_recommendation_id_isSet = !json[QString("RecommendationId")].isNull() && m_recommendation_id_isValid;

    m_generation_started_time_isValid = ::OpenAPI::fromJsonValue(m_generation_started_time, json[QString("GenerationStartedTime")]);
    m_generation_started_time_isSet = !json[QString("GenerationStartedTime")].isNull() && m_generation_started_time_isValid;

    m_estimated_completion_time_isValid = ::OpenAPI::fromJsonValue(m_estimated_completion_time, json[QString("EstimatedCompletionTime")]);
    m_estimated_completion_time_isSet = !json[QString("EstimatedCompletionTime")].isNull() && m_estimated_completion_time_isValid;
}

QString OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_recommendation_id_isSet) {
        obj.insert(QString("RecommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_generation_started_time_isSet) {
        obj.insert(QString("GenerationStartedTime"), ::OpenAPI::toJsonValue(m_generation_started_time));
    }
    if (m_estimated_completion_time_isSet) {
        obj.insert(QString("EstimatedCompletionTime"), ::OpenAPI::toJsonValue(m_estimated_completion_time));
    }
    return obj;
}

QString OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

QString OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::getGenerationStartedTime() const {
    return m_generation_started_time;
}
void OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::setGenerationStartedTime(const QString &generation_started_time) {
    m_generation_started_time = generation_started_time;
    m_generation_started_time_isSet = true;
}

bool OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::is_generation_started_time_Set() const{
    return m_generation_started_time_isSet;
}

bool OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::is_generation_started_time_Valid() const{
    return m_generation_started_time_isValid;
}

QString OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::getEstimatedCompletionTime() const {
    return m_estimated_completion_time;
}
void OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::setEstimatedCompletionTime(const QString &estimated_completion_time) {
    m_estimated_completion_time = estimated_completion_time;
    m_estimated_completion_time_isSet = true;
}

bool OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::is_estimated_completion_time_Set() const{
    return m_estimated_completion_time_isSet;
}

bool OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::is_estimated_completion_time_Valid() const{
    return m_estimated_completion_time_isValid;
}

bool OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_started_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartSavingsPlansPurchaseRecommendationGenerationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
