/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAnomaliesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAnomaliesResponse::OAIGetAnomaliesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAnomaliesResponse::OAIGetAnomaliesResponse() {
    this->initializeModel();
}

OAIGetAnomaliesResponse::~OAIGetAnomaliesResponse() {}

void OAIGetAnomaliesResponse::initializeModel() {

    m_anomalies_isSet = false;
    m_anomalies_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetAnomaliesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAnomaliesResponse::fromJsonObject(QJsonObject json) {

    m_anomalies_isValid = ::OpenAPI::fromJsonValue(m_anomalies, json[QString("Anomalies")]);
    m_anomalies_isSet = !json[QString("Anomalies")].isNull() && m_anomalies_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetAnomaliesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAnomaliesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_anomalies.isSet()) {
        obj.insert(QString("Anomalies"), ::OpenAPI::toJsonValue(m_anomalies));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIGetAnomaliesResponse::getAnomalies() const {
    return m_anomalies;
}
void OAIGetAnomaliesResponse::setAnomalies(const QList &anomalies) {
    m_anomalies = anomalies;
    m_anomalies_isSet = true;
}

bool OAIGetAnomaliesResponse::is_anomalies_Set() const{
    return m_anomalies_isSet;
}

bool OAIGetAnomaliesResponse::is_anomalies_Valid() const{
    return m_anomalies_isValid;
}

QString OAIGetAnomaliesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetAnomaliesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetAnomaliesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetAnomaliesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetAnomaliesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anomalies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAnomaliesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_anomalies_isValid && true;
}

} // namespace OpenAPI
