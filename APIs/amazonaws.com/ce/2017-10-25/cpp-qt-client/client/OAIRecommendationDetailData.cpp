/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationDetailData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationDetailData::OAIRecommendationDetailData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationDetailData::OAIRecommendationDetailData() {
    this->initializeModel();
}

OAIRecommendationDetailData::~OAIRecommendationDetailData() {}

void OAIRecommendationDetailData::initializeModel() {

    m_account_scope_isSet = false;
    m_account_scope_isValid = false;

    m_lookback_period_in_days_isSet = false;
    m_lookback_period_in_days_isValid = false;

    m_savings_plans_type_isSet = false;
    m_savings_plans_type_isValid = false;

    m_term_in_years_isSet = false;
    m_term_in_years_isValid = false;

    m_payment_option_isSet = false;
    m_payment_option_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_instance_family_isSet = false;
    m_instance_family_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_offering_id_isSet = false;
    m_offering_id_isValid = false;

    m_generation_timestamp_isSet = false;
    m_generation_timestamp_isValid = false;

    m_latest_usage_timestamp_isSet = false;
    m_latest_usage_timestamp_isValid = false;

    m_current_average_hourly_on_demand_spend_isSet = false;
    m_current_average_hourly_on_demand_spend_isValid = false;

    m_current_maximum_hourly_on_demand_spend_isSet = false;
    m_current_maximum_hourly_on_demand_spend_isValid = false;

    m_current_minimum_hourly_on_demand_spend_isSet = false;
    m_current_minimum_hourly_on_demand_spend_isValid = false;

    m_estimated_average_utilization_isSet = false;
    m_estimated_average_utilization_isValid = false;

    m_estimated_monthly_savings_amount_isSet = false;
    m_estimated_monthly_savings_amount_isValid = false;

    m_estimated_on_demand_cost_isSet = false;
    m_estimated_on_demand_cost_isValid = false;

    m_estimated_on_demand_cost_with_current_commitment_isSet = false;
    m_estimated_on_demand_cost_with_current_commitment_isValid = false;

    m_estimated_roi_isSet = false;
    m_estimated_roi_isValid = false;

    m_estimated_sp_cost_isSet = false;
    m_estimated_sp_cost_isValid = false;

    m_estimated_savings_amount_isSet = false;
    m_estimated_savings_amount_isValid = false;

    m_estimated_savings_percentage_isSet = false;
    m_estimated_savings_percentage_isValid = false;

    m_existing_hourly_commitment_isSet = false;
    m_existing_hourly_commitment_isValid = false;

    m_hourly_commitment_to_purchase_isSet = false;
    m_hourly_commitment_to_purchase_isValid = false;

    m_upfront_cost_isSet = false;
    m_upfront_cost_isValid = false;

    m_current_average_coverage_isSet = false;
    m_current_average_coverage_isValid = false;

    m_estimated_average_coverage_isSet = false;
    m_estimated_average_coverage_isValid = false;

    m_metrics_over_lookback_period_isSet = false;
    m_metrics_over_lookback_period_isValid = false;
}

void OAIRecommendationDetailData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationDetailData::fromJsonObject(QJsonObject json) {

    m_account_scope_isValid = ::OpenAPI::fromJsonValue(m_account_scope, json[QString("AccountScope")]);
    m_account_scope_isSet = !json[QString("AccountScope")].isNull() && m_account_scope_isValid;

    m_lookback_period_in_days_isValid = ::OpenAPI::fromJsonValue(m_lookback_period_in_days, json[QString("LookbackPeriodInDays")]);
    m_lookback_period_in_days_isSet = !json[QString("LookbackPeriodInDays")].isNull() && m_lookback_period_in_days_isValid;

    m_savings_plans_type_isValid = ::OpenAPI::fromJsonValue(m_savings_plans_type, json[QString("SavingsPlansType")]);
    m_savings_plans_type_isSet = !json[QString("SavingsPlansType")].isNull() && m_savings_plans_type_isValid;

    m_term_in_years_isValid = ::OpenAPI::fromJsonValue(m_term_in_years, json[QString("TermInYears")]);
    m_term_in_years_isSet = !json[QString("TermInYears")].isNull() && m_term_in_years_isValid;

    m_payment_option_isValid = ::OpenAPI::fromJsonValue(m_payment_option, json[QString("PaymentOption")]);
    m_payment_option_isSet = !json[QString("PaymentOption")].isNull() && m_payment_option_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_instance_family_isValid = ::OpenAPI::fromJsonValue(m_instance_family, json[QString("InstanceFamily")]);
    m_instance_family_isSet = !json[QString("InstanceFamily")].isNull() && m_instance_family_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_offering_id_isValid = ::OpenAPI::fromJsonValue(m_offering_id, json[QString("OfferingId")]);
    m_offering_id_isSet = !json[QString("OfferingId")].isNull() && m_offering_id_isValid;

    m_generation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_generation_timestamp, json[QString("GenerationTimestamp")]);
    m_generation_timestamp_isSet = !json[QString("GenerationTimestamp")].isNull() && m_generation_timestamp_isValid;

    m_latest_usage_timestamp_isValid = ::OpenAPI::fromJsonValue(m_latest_usage_timestamp, json[QString("LatestUsageTimestamp")]);
    m_latest_usage_timestamp_isSet = !json[QString("LatestUsageTimestamp")].isNull() && m_latest_usage_timestamp_isValid;

    m_current_average_hourly_on_demand_spend_isValid = ::OpenAPI::fromJsonValue(m_current_average_hourly_on_demand_spend, json[QString("CurrentAverageHourlyOnDemandSpend")]);
    m_current_average_hourly_on_demand_spend_isSet = !json[QString("CurrentAverageHourlyOnDemandSpend")].isNull() && m_current_average_hourly_on_demand_spend_isValid;

    m_current_maximum_hourly_on_demand_spend_isValid = ::OpenAPI::fromJsonValue(m_current_maximum_hourly_on_demand_spend, json[QString("CurrentMaximumHourlyOnDemandSpend")]);
    m_current_maximum_hourly_on_demand_spend_isSet = !json[QString("CurrentMaximumHourlyOnDemandSpend")].isNull() && m_current_maximum_hourly_on_demand_spend_isValid;

    m_current_minimum_hourly_on_demand_spend_isValid = ::OpenAPI::fromJsonValue(m_current_minimum_hourly_on_demand_spend, json[QString("CurrentMinimumHourlyOnDemandSpend")]);
    m_current_minimum_hourly_on_demand_spend_isSet = !json[QString("CurrentMinimumHourlyOnDemandSpend")].isNull() && m_current_minimum_hourly_on_demand_spend_isValid;

    m_estimated_average_utilization_isValid = ::OpenAPI::fromJsonValue(m_estimated_average_utilization, json[QString("EstimatedAverageUtilization")]);
    m_estimated_average_utilization_isSet = !json[QString("EstimatedAverageUtilization")].isNull() && m_estimated_average_utilization_isValid;

    m_estimated_monthly_savings_amount_isValid = ::OpenAPI::fromJsonValue(m_estimated_monthly_savings_amount, json[QString("EstimatedMonthlySavingsAmount")]);
    m_estimated_monthly_savings_amount_isSet = !json[QString("EstimatedMonthlySavingsAmount")].isNull() && m_estimated_monthly_savings_amount_isValid;

    m_estimated_on_demand_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_on_demand_cost, json[QString("EstimatedOnDemandCost")]);
    m_estimated_on_demand_cost_isSet = !json[QString("EstimatedOnDemandCost")].isNull() && m_estimated_on_demand_cost_isValid;

    m_estimated_on_demand_cost_with_current_commitment_isValid = ::OpenAPI::fromJsonValue(m_estimated_on_demand_cost_with_current_commitment, json[QString("EstimatedOnDemandCostWithCurrentCommitment")]);
    m_estimated_on_demand_cost_with_current_commitment_isSet = !json[QString("EstimatedOnDemandCostWithCurrentCommitment")].isNull() && m_estimated_on_demand_cost_with_current_commitment_isValid;

    m_estimated_roi_isValid = ::OpenAPI::fromJsonValue(m_estimated_roi, json[QString("EstimatedROI")]);
    m_estimated_roi_isSet = !json[QString("EstimatedROI")].isNull() && m_estimated_roi_isValid;

    m_estimated_sp_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_sp_cost, json[QString("EstimatedSPCost")]);
    m_estimated_sp_cost_isSet = !json[QString("EstimatedSPCost")].isNull() && m_estimated_sp_cost_isValid;

    m_estimated_savings_amount_isValid = ::OpenAPI::fromJsonValue(m_estimated_savings_amount, json[QString("EstimatedSavingsAmount")]);
    m_estimated_savings_amount_isSet = !json[QString("EstimatedSavingsAmount")].isNull() && m_estimated_savings_amount_isValid;

    m_estimated_savings_percentage_isValid = ::OpenAPI::fromJsonValue(m_estimated_savings_percentage, json[QString("EstimatedSavingsPercentage")]);
    m_estimated_savings_percentage_isSet = !json[QString("EstimatedSavingsPercentage")].isNull() && m_estimated_savings_percentage_isValid;

    m_existing_hourly_commitment_isValid = ::OpenAPI::fromJsonValue(m_existing_hourly_commitment, json[QString("ExistingHourlyCommitment")]);
    m_existing_hourly_commitment_isSet = !json[QString("ExistingHourlyCommitment")].isNull() && m_existing_hourly_commitment_isValid;

    m_hourly_commitment_to_purchase_isValid = ::OpenAPI::fromJsonValue(m_hourly_commitment_to_purchase, json[QString("HourlyCommitmentToPurchase")]);
    m_hourly_commitment_to_purchase_isSet = !json[QString("HourlyCommitmentToPurchase")].isNull() && m_hourly_commitment_to_purchase_isValid;

    m_upfront_cost_isValid = ::OpenAPI::fromJsonValue(m_upfront_cost, json[QString("UpfrontCost")]);
    m_upfront_cost_isSet = !json[QString("UpfrontCost")].isNull() && m_upfront_cost_isValid;

    m_current_average_coverage_isValid = ::OpenAPI::fromJsonValue(m_current_average_coverage, json[QString("CurrentAverageCoverage")]);
    m_current_average_coverage_isSet = !json[QString("CurrentAverageCoverage")].isNull() && m_current_average_coverage_isValid;

    m_estimated_average_coverage_isValid = ::OpenAPI::fromJsonValue(m_estimated_average_coverage, json[QString("EstimatedAverageCoverage")]);
    m_estimated_average_coverage_isSet = !json[QString("EstimatedAverageCoverage")].isNull() && m_estimated_average_coverage_isValid;

    m_metrics_over_lookback_period_isValid = ::OpenAPI::fromJsonValue(m_metrics_over_lookback_period, json[QString("MetricsOverLookbackPeriod")]);
    m_metrics_over_lookback_period_isSet = !json[QString("MetricsOverLookbackPeriod")].isNull() && m_metrics_over_lookback_period_isValid;
}

QString OAIRecommendationDetailData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationDetailData::asJsonObject() const {
    QJsonObject obj;
    if (m_account_scope.isSet()) {
        obj.insert(QString("AccountScope"), ::OpenAPI::toJsonValue(m_account_scope));
    }
    if (m_lookback_period_in_days.isSet()) {
        obj.insert(QString("LookbackPeriodInDays"), ::OpenAPI::toJsonValue(m_lookback_period_in_days));
    }
    if (m_savings_plans_type.isSet()) {
        obj.insert(QString("SavingsPlansType"), ::OpenAPI::toJsonValue(m_savings_plans_type));
    }
    if (m_term_in_years.isSet()) {
        obj.insert(QString("TermInYears"), ::OpenAPI::toJsonValue(m_term_in_years));
    }
    if (m_payment_option.isSet()) {
        obj.insert(QString("PaymentOption"), ::OpenAPI::toJsonValue(m_payment_option));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_instance_family_isSet) {
        obj.insert(QString("InstanceFamily"), ::OpenAPI::toJsonValue(m_instance_family));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_offering_id_isSet) {
        obj.insert(QString("OfferingId"), ::OpenAPI::toJsonValue(m_offering_id));
    }
    if (m_generation_timestamp_isSet) {
        obj.insert(QString("GenerationTimestamp"), ::OpenAPI::toJsonValue(m_generation_timestamp));
    }
    if (m_latest_usage_timestamp_isSet) {
        obj.insert(QString("LatestUsageTimestamp"), ::OpenAPI::toJsonValue(m_latest_usage_timestamp));
    }
    if (m_current_average_hourly_on_demand_spend_isSet) {
        obj.insert(QString("CurrentAverageHourlyOnDemandSpend"), ::OpenAPI::toJsonValue(m_current_average_hourly_on_demand_spend));
    }
    if (m_current_maximum_hourly_on_demand_spend_isSet) {
        obj.insert(QString("CurrentMaximumHourlyOnDemandSpend"), ::OpenAPI::toJsonValue(m_current_maximum_hourly_on_demand_spend));
    }
    if (m_current_minimum_hourly_on_demand_spend_isSet) {
        obj.insert(QString("CurrentMinimumHourlyOnDemandSpend"), ::OpenAPI::toJsonValue(m_current_minimum_hourly_on_demand_spend));
    }
    if (m_estimated_average_utilization_isSet) {
        obj.insert(QString("EstimatedAverageUtilization"), ::OpenAPI::toJsonValue(m_estimated_average_utilization));
    }
    if (m_estimated_monthly_savings_amount_isSet) {
        obj.insert(QString("EstimatedMonthlySavingsAmount"), ::OpenAPI::toJsonValue(m_estimated_monthly_savings_amount));
    }
    if (m_estimated_on_demand_cost_isSet) {
        obj.insert(QString("EstimatedOnDemandCost"), ::OpenAPI::toJsonValue(m_estimated_on_demand_cost));
    }
    if (m_estimated_on_demand_cost_with_current_commitment_isSet) {
        obj.insert(QString("EstimatedOnDemandCostWithCurrentCommitment"), ::OpenAPI::toJsonValue(m_estimated_on_demand_cost_with_current_commitment));
    }
    if (m_estimated_roi_isSet) {
        obj.insert(QString("EstimatedROI"), ::OpenAPI::toJsonValue(m_estimated_roi));
    }
    if (m_estimated_sp_cost_isSet) {
        obj.insert(QString("EstimatedSPCost"), ::OpenAPI::toJsonValue(m_estimated_sp_cost));
    }
    if (m_estimated_savings_amount_isSet) {
        obj.insert(QString("EstimatedSavingsAmount"), ::OpenAPI::toJsonValue(m_estimated_savings_amount));
    }
    if (m_estimated_savings_percentage_isSet) {
        obj.insert(QString("EstimatedSavingsPercentage"), ::OpenAPI::toJsonValue(m_estimated_savings_percentage));
    }
    if (m_existing_hourly_commitment_isSet) {
        obj.insert(QString("ExistingHourlyCommitment"), ::OpenAPI::toJsonValue(m_existing_hourly_commitment));
    }
    if (m_hourly_commitment_to_purchase_isSet) {
        obj.insert(QString("HourlyCommitmentToPurchase"), ::OpenAPI::toJsonValue(m_hourly_commitment_to_purchase));
    }
    if (m_upfront_cost_isSet) {
        obj.insert(QString("UpfrontCost"), ::OpenAPI::toJsonValue(m_upfront_cost));
    }
    if (m_current_average_coverage_isSet) {
        obj.insert(QString("CurrentAverageCoverage"), ::OpenAPI::toJsonValue(m_current_average_coverage));
    }
    if (m_estimated_average_coverage_isSet) {
        obj.insert(QString("EstimatedAverageCoverage"), ::OpenAPI::toJsonValue(m_estimated_average_coverage));
    }
    if (m_metrics_over_lookback_period.isSet()) {
        obj.insert(QString("MetricsOverLookbackPeriod"), ::OpenAPI::toJsonValue(m_metrics_over_lookback_period));
    }
    return obj;
}

OAIAccountScope OAIRecommendationDetailData::getAccountScope() const {
    return m_account_scope;
}
void OAIRecommendationDetailData::setAccountScope(const OAIAccountScope &account_scope) {
    m_account_scope = account_scope;
    m_account_scope_isSet = true;
}

bool OAIRecommendationDetailData::is_account_scope_Set() const{
    return m_account_scope_isSet;
}

bool OAIRecommendationDetailData::is_account_scope_Valid() const{
    return m_account_scope_isValid;
}

OAILookbackPeriodInDays OAIRecommendationDetailData::getLookbackPeriodInDays() const {
    return m_lookback_period_in_days;
}
void OAIRecommendationDetailData::setLookbackPeriodInDays(const OAILookbackPeriodInDays &lookback_period_in_days) {
    m_lookback_period_in_days = lookback_period_in_days;
    m_lookback_period_in_days_isSet = true;
}

bool OAIRecommendationDetailData::is_lookback_period_in_days_Set() const{
    return m_lookback_period_in_days_isSet;
}

bool OAIRecommendationDetailData::is_lookback_period_in_days_Valid() const{
    return m_lookback_period_in_days_isValid;
}

OAISupportedSavingsPlansType OAIRecommendationDetailData::getSavingsPlansType() const {
    return m_savings_plans_type;
}
void OAIRecommendationDetailData::setSavingsPlansType(const OAISupportedSavingsPlansType &savings_plans_type) {
    m_savings_plans_type = savings_plans_type;
    m_savings_plans_type_isSet = true;
}

bool OAIRecommendationDetailData::is_savings_plans_type_Set() const{
    return m_savings_plans_type_isSet;
}

bool OAIRecommendationDetailData::is_savings_plans_type_Valid() const{
    return m_savings_plans_type_isValid;
}

OAITermInYears OAIRecommendationDetailData::getTermInYears() const {
    return m_term_in_years;
}
void OAIRecommendationDetailData::setTermInYears(const OAITermInYears &term_in_years) {
    m_term_in_years = term_in_years;
    m_term_in_years_isSet = true;
}

bool OAIRecommendationDetailData::is_term_in_years_Set() const{
    return m_term_in_years_isSet;
}

bool OAIRecommendationDetailData::is_term_in_years_Valid() const{
    return m_term_in_years_isValid;
}

OAIPaymentOption OAIRecommendationDetailData::getPaymentOption() const {
    return m_payment_option;
}
void OAIRecommendationDetailData::setPaymentOption(const OAIPaymentOption &payment_option) {
    m_payment_option = payment_option;
    m_payment_option_isSet = true;
}

bool OAIRecommendationDetailData::is_payment_option_Set() const{
    return m_payment_option_isSet;
}

bool OAIRecommendationDetailData::is_payment_option_Valid() const{
    return m_payment_option_isValid;
}

QString OAIRecommendationDetailData::getAccountId() const {
    return m_account_id;
}
void OAIRecommendationDetailData::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIRecommendationDetailData::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIRecommendationDetailData::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIRecommendationDetailData::getCurrencyCode() const {
    return m_currency_code;
}
void OAIRecommendationDetailData::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIRecommendationDetailData::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIRecommendationDetailData::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIRecommendationDetailData::getInstanceFamily() const {
    return m_instance_family;
}
void OAIRecommendationDetailData::setInstanceFamily(const QString &instance_family) {
    m_instance_family = instance_family;
    m_instance_family_isSet = true;
}

bool OAIRecommendationDetailData::is_instance_family_Set() const{
    return m_instance_family_isSet;
}

bool OAIRecommendationDetailData::is_instance_family_Valid() const{
    return m_instance_family_isValid;
}

QString OAIRecommendationDetailData::getRegion() const {
    return m_region;
}
void OAIRecommendationDetailData::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIRecommendationDetailData::is_region_Set() const{
    return m_region_isSet;
}

bool OAIRecommendationDetailData::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIRecommendationDetailData::getOfferingId() const {
    return m_offering_id;
}
void OAIRecommendationDetailData::setOfferingId(const QString &offering_id) {
    m_offering_id = offering_id;
    m_offering_id_isSet = true;
}

bool OAIRecommendationDetailData::is_offering_id_Set() const{
    return m_offering_id_isSet;
}

bool OAIRecommendationDetailData::is_offering_id_Valid() const{
    return m_offering_id_isValid;
}

QString OAIRecommendationDetailData::getGenerationTimestamp() const {
    return m_generation_timestamp;
}
void OAIRecommendationDetailData::setGenerationTimestamp(const QString &generation_timestamp) {
    m_generation_timestamp = generation_timestamp;
    m_generation_timestamp_isSet = true;
}

bool OAIRecommendationDetailData::is_generation_timestamp_Set() const{
    return m_generation_timestamp_isSet;
}

bool OAIRecommendationDetailData::is_generation_timestamp_Valid() const{
    return m_generation_timestamp_isValid;
}

QString OAIRecommendationDetailData::getLatestUsageTimestamp() const {
    return m_latest_usage_timestamp;
}
void OAIRecommendationDetailData::setLatestUsageTimestamp(const QString &latest_usage_timestamp) {
    m_latest_usage_timestamp = latest_usage_timestamp;
    m_latest_usage_timestamp_isSet = true;
}

bool OAIRecommendationDetailData::is_latest_usage_timestamp_Set() const{
    return m_latest_usage_timestamp_isSet;
}

bool OAIRecommendationDetailData::is_latest_usage_timestamp_Valid() const{
    return m_latest_usage_timestamp_isValid;
}

QString OAIRecommendationDetailData::getCurrentAverageHourlyOnDemandSpend() const {
    return m_current_average_hourly_on_demand_spend;
}
void OAIRecommendationDetailData::setCurrentAverageHourlyOnDemandSpend(const QString &current_average_hourly_on_demand_spend) {
    m_current_average_hourly_on_demand_spend = current_average_hourly_on_demand_spend;
    m_current_average_hourly_on_demand_spend_isSet = true;
}

bool OAIRecommendationDetailData::is_current_average_hourly_on_demand_spend_Set() const{
    return m_current_average_hourly_on_demand_spend_isSet;
}

bool OAIRecommendationDetailData::is_current_average_hourly_on_demand_spend_Valid() const{
    return m_current_average_hourly_on_demand_spend_isValid;
}

QString OAIRecommendationDetailData::getCurrentMaximumHourlyOnDemandSpend() const {
    return m_current_maximum_hourly_on_demand_spend;
}
void OAIRecommendationDetailData::setCurrentMaximumHourlyOnDemandSpend(const QString &current_maximum_hourly_on_demand_spend) {
    m_current_maximum_hourly_on_demand_spend = current_maximum_hourly_on_demand_spend;
    m_current_maximum_hourly_on_demand_spend_isSet = true;
}

bool OAIRecommendationDetailData::is_current_maximum_hourly_on_demand_spend_Set() const{
    return m_current_maximum_hourly_on_demand_spend_isSet;
}

bool OAIRecommendationDetailData::is_current_maximum_hourly_on_demand_spend_Valid() const{
    return m_current_maximum_hourly_on_demand_spend_isValid;
}

QString OAIRecommendationDetailData::getCurrentMinimumHourlyOnDemandSpend() const {
    return m_current_minimum_hourly_on_demand_spend;
}
void OAIRecommendationDetailData::setCurrentMinimumHourlyOnDemandSpend(const QString &current_minimum_hourly_on_demand_spend) {
    m_current_minimum_hourly_on_demand_spend = current_minimum_hourly_on_demand_spend;
    m_current_minimum_hourly_on_demand_spend_isSet = true;
}

bool OAIRecommendationDetailData::is_current_minimum_hourly_on_demand_spend_Set() const{
    return m_current_minimum_hourly_on_demand_spend_isSet;
}

bool OAIRecommendationDetailData::is_current_minimum_hourly_on_demand_spend_Valid() const{
    return m_current_minimum_hourly_on_demand_spend_isValid;
}

QString OAIRecommendationDetailData::getEstimatedAverageUtilization() const {
    return m_estimated_average_utilization;
}
void OAIRecommendationDetailData::setEstimatedAverageUtilization(const QString &estimated_average_utilization) {
    m_estimated_average_utilization = estimated_average_utilization;
    m_estimated_average_utilization_isSet = true;
}

bool OAIRecommendationDetailData::is_estimated_average_utilization_Set() const{
    return m_estimated_average_utilization_isSet;
}

bool OAIRecommendationDetailData::is_estimated_average_utilization_Valid() const{
    return m_estimated_average_utilization_isValid;
}

QString OAIRecommendationDetailData::getEstimatedMonthlySavingsAmount() const {
    return m_estimated_monthly_savings_amount;
}
void OAIRecommendationDetailData::setEstimatedMonthlySavingsAmount(const QString &estimated_monthly_savings_amount) {
    m_estimated_monthly_savings_amount = estimated_monthly_savings_amount;
    m_estimated_monthly_savings_amount_isSet = true;
}

bool OAIRecommendationDetailData::is_estimated_monthly_savings_amount_Set() const{
    return m_estimated_monthly_savings_amount_isSet;
}

bool OAIRecommendationDetailData::is_estimated_monthly_savings_amount_Valid() const{
    return m_estimated_monthly_savings_amount_isValid;
}

QString OAIRecommendationDetailData::getEstimatedOnDemandCost() const {
    return m_estimated_on_demand_cost;
}
void OAIRecommendationDetailData::setEstimatedOnDemandCost(const QString &estimated_on_demand_cost) {
    m_estimated_on_demand_cost = estimated_on_demand_cost;
    m_estimated_on_demand_cost_isSet = true;
}

bool OAIRecommendationDetailData::is_estimated_on_demand_cost_Set() const{
    return m_estimated_on_demand_cost_isSet;
}

bool OAIRecommendationDetailData::is_estimated_on_demand_cost_Valid() const{
    return m_estimated_on_demand_cost_isValid;
}

QString OAIRecommendationDetailData::getEstimatedOnDemandCostWithCurrentCommitment() const {
    return m_estimated_on_demand_cost_with_current_commitment;
}
void OAIRecommendationDetailData::setEstimatedOnDemandCostWithCurrentCommitment(const QString &estimated_on_demand_cost_with_current_commitment) {
    m_estimated_on_demand_cost_with_current_commitment = estimated_on_demand_cost_with_current_commitment;
    m_estimated_on_demand_cost_with_current_commitment_isSet = true;
}

bool OAIRecommendationDetailData::is_estimated_on_demand_cost_with_current_commitment_Set() const{
    return m_estimated_on_demand_cost_with_current_commitment_isSet;
}

bool OAIRecommendationDetailData::is_estimated_on_demand_cost_with_current_commitment_Valid() const{
    return m_estimated_on_demand_cost_with_current_commitment_isValid;
}

QString OAIRecommendationDetailData::getEstimatedRoi() const {
    return m_estimated_roi;
}
void OAIRecommendationDetailData::setEstimatedRoi(const QString &estimated_roi) {
    m_estimated_roi = estimated_roi;
    m_estimated_roi_isSet = true;
}

bool OAIRecommendationDetailData::is_estimated_roi_Set() const{
    return m_estimated_roi_isSet;
}

bool OAIRecommendationDetailData::is_estimated_roi_Valid() const{
    return m_estimated_roi_isValid;
}

QString OAIRecommendationDetailData::getEstimatedSpCost() const {
    return m_estimated_sp_cost;
}
void OAIRecommendationDetailData::setEstimatedSpCost(const QString &estimated_sp_cost) {
    m_estimated_sp_cost = estimated_sp_cost;
    m_estimated_sp_cost_isSet = true;
}

bool OAIRecommendationDetailData::is_estimated_sp_cost_Set() const{
    return m_estimated_sp_cost_isSet;
}

bool OAIRecommendationDetailData::is_estimated_sp_cost_Valid() const{
    return m_estimated_sp_cost_isValid;
}

QString OAIRecommendationDetailData::getEstimatedSavingsAmount() const {
    return m_estimated_savings_amount;
}
void OAIRecommendationDetailData::setEstimatedSavingsAmount(const QString &estimated_savings_amount) {
    m_estimated_savings_amount = estimated_savings_amount;
    m_estimated_savings_amount_isSet = true;
}

bool OAIRecommendationDetailData::is_estimated_savings_amount_Set() const{
    return m_estimated_savings_amount_isSet;
}

bool OAIRecommendationDetailData::is_estimated_savings_amount_Valid() const{
    return m_estimated_savings_amount_isValid;
}

QString OAIRecommendationDetailData::getEstimatedSavingsPercentage() const {
    return m_estimated_savings_percentage;
}
void OAIRecommendationDetailData::setEstimatedSavingsPercentage(const QString &estimated_savings_percentage) {
    m_estimated_savings_percentage = estimated_savings_percentage;
    m_estimated_savings_percentage_isSet = true;
}

bool OAIRecommendationDetailData::is_estimated_savings_percentage_Set() const{
    return m_estimated_savings_percentage_isSet;
}

bool OAIRecommendationDetailData::is_estimated_savings_percentage_Valid() const{
    return m_estimated_savings_percentage_isValid;
}

QString OAIRecommendationDetailData::getExistingHourlyCommitment() const {
    return m_existing_hourly_commitment;
}
void OAIRecommendationDetailData::setExistingHourlyCommitment(const QString &existing_hourly_commitment) {
    m_existing_hourly_commitment = existing_hourly_commitment;
    m_existing_hourly_commitment_isSet = true;
}

bool OAIRecommendationDetailData::is_existing_hourly_commitment_Set() const{
    return m_existing_hourly_commitment_isSet;
}

bool OAIRecommendationDetailData::is_existing_hourly_commitment_Valid() const{
    return m_existing_hourly_commitment_isValid;
}

QString OAIRecommendationDetailData::getHourlyCommitmentToPurchase() const {
    return m_hourly_commitment_to_purchase;
}
void OAIRecommendationDetailData::setHourlyCommitmentToPurchase(const QString &hourly_commitment_to_purchase) {
    m_hourly_commitment_to_purchase = hourly_commitment_to_purchase;
    m_hourly_commitment_to_purchase_isSet = true;
}

bool OAIRecommendationDetailData::is_hourly_commitment_to_purchase_Set() const{
    return m_hourly_commitment_to_purchase_isSet;
}

bool OAIRecommendationDetailData::is_hourly_commitment_to_purchase_Valid() const{
    return m_hourly_commitment_to_purchase_isValid;
}

QString OAIRecommendationDetailData::getUpfrontCost() const {
    return m_upfront_cost;
}
void OAIRecommendationDetailData::setUpfrontCost(const QString &upfront_cost) {
    m_upfront_cost = upfront_cost;
    m_upfront_cost_isSet = true;
}

bool OAIRecommendationDetailData::is_upfront_cost_Set() const{
    return m_upfront_cost_isSet;
}

bool OAIRecommendationDetailData::is_upfront_cost_Valid() const{
    return m_upfront_cost_isValid;
}

QString OAIRecommendationDetailData::getCurrentAverageCoverage() const {
    return m_current_average_coverage;
}
void OAIRecommendationDetailData::setCurrentAverageCoverage(const QString &current_average_coverage) {
    m_current_average_coverage = current_average_coverage;
    m_current_average_coverage_isSet = true;
}

bool OAIRecommendationDetailData::is_current_average_coverage_Set() const{
    return m_current_average_coverage_isSet;
}

bool OAIRecommendationDetailData::is_current_average_coverage_Valid() const{
    return m_current_average_coverage_isValid;
}

QString OAIRecommendationDetailData::getEstimatedAverageCoverage() const {
    return m_estimated_average_coverage;
}
void OAIRecommendationDetailData::setEstimatedAverageCoverage(const QString &estimated_average_coverage) {
    m_estimated_average_coverage = estimated_average_coverage;
    m_estimated_average_coverage_isSet = true;
}

bool OAIRecommendationDetailData::is_estimated_average_coverage_Set() const{
    return m_estimated_average_coverage_isSet;
}

bool OAIRecommendationDetailData::is_estimated_average_coverage_Valid() const{
    return m_estimated_average_coverage_isValid;
}

QList OAIRecommendationDetailData::getMetricsOverLookbackPeriod() const {
    return m_metrics_over_lookback_period;
}
void OAIRecommendationDetailData::setMetricsOverLookbackPeriod(const QList &metrics_over_lookback_period) {
    m_metrics_over_lookback_period = metrics_over_lookback_period;
    m_metrics_over_lookback_period_isSet = true;
}

bool OAIRecommendationDetailData::is_metrics_over_lookback_period_Set() const{
    return m_metrics_over_lookback_period_isSet;
}

bool OAIRecommendationDetailData::is_metrics_over_lookback_period_Valid() const{
    return m_metrics_over_lookback_period_isValid;
}

bool OAIRecommendationDetailData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookback_period_in_days.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_plans_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_in_years.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_usage_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_average_hourly_on_demand_spend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_maximum_hourly_on_demand_spend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_minimum_hourly_on_demand_spend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_average_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_monthly_savings_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_on_demand_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_on_demand_cost_with_current_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_roi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_sp_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_savings_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_savings_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_existing_hourly_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly_commitment_to_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upfront_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_average_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_average_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_over_lookback_period.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationDetailData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
