/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAnomalySubscriptionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAnomalySubscriptionResponse::OAICreateAnomalySubscriptionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAnomalySubscriptionResponse::OAICreateAnomalySubscriptionResponse() {
    this->initializeModel();
}

OAICreateAnomalySubscriptionResponse::~OAICreateAnomalySubscriptionResponse() {}

void OAICreateAnomalySubscriptionResponse::initializeModel() {

    m_subscription_arn_isSet = false;
    m_subscription_arn_isValid = false;
}

void OAICreateAnomalySubscriptionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAnomalySubscriptionResponse::fromJsonObject(QJsonObject json) {

    m_subscription_arn_isValid = ::OpenAPI::fromJsonValue(m_subscription_arn, json[QString("SubscriptionArn")]);
    m_subscription_arn_isSet = !json[QString("SubscriptionArn")].isNull() && m_subscription_arn_isValid;
}

QString OAICreateAnomalySubscriptionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAnomalySubscriptionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_subscription_arn_isSet) {
        obj.insert(QString("SubscriptionArn"), ::OpenAPI::toJsonValue(m_subscription_arn));
    }
    return obj;
}

QString OAICreateAnomalySubscriptionResponse::getSubscriptionArn() const {
    return m_subscription_arn;
}
void OAICreateAnomalySubscriptionResponse::setSubscriptionArn(const QString &subscription_arn) {
    m_subscription_arn = subscription_arn;
    m_subscription_arn_isSet = true;
}

bool OAICreateAnomalySubscriptionResponse::is_subscription_arn_Set() const{
    return m_subscription_arn_isSet;
}

bool OAICreateAnomalySubscriptionResponse::is_subscription_arn_Valid() const{
    return m_subscription_arn_isValid;
}

bool OAICreateAnomalySubscriptionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subscription_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAnomalySubscriptionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subscription_arn_isValid && true;
}

} // namespace OpenAPI
