/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCostAndUsageWithResourcesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCostAndUsageWithResourcesResponse::OAIGetCostAndUsageWithResourcesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCostAndUsageWithResourcesResponse::OAIGetCostAndUsageWithResourcesResponse() {
    this->initializeModel();
}

OAIGetCostAndUsageWithResourcesResponse::~OAIGetCostAndUsageWithResourcesResponse() {}

void OAIGetCostAndUsageWithResourcesResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_group_definitions_isSet = false;
    m_group_definitions_isValid = false;

    m_results_by_time_isSet = false;
    m_results_by_time_isValid = false;

    m_dimension_value_attributes_isSet = false;
    m_dimension_value_attributes_isValid = false;
}

void OAIGetCostAndUsageWithResourcesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCostAndUsageWithResourcesResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;

    m_group_definitions_isValid = ::OpenAPI::fromJsonValue(m_group_definitions, json[QString("GroupDefinitions")]);
    m_group_definitions_isSet = !json[QString("GroupDefinitions")].isNull() && m_group_definitions_isValid;

    m_results_by_time_isValid = ::OpenAPI::fromJsonValue(m_results_by_time, json[QString("ResultsByTime")]);
    m_results_by_time_isSet = !json[QString("ResultsByTime")].isNull() && m_results_by_time_isValid;

    m_dimension_value_attributes_isValid = ::OpenAPI::fromJsonValue(m_dimension_value_attributes, json[QString("DimensionValueAttributes")]);
    m_dimension_value_attributes_isSet = !json[QString("DimensionValueAttributes")].isNull() && m_dimension_value_attributes_isValid;
}

QString OAIGetCostAndUsageWithResourcesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCostAndUsageWithResourcesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_group_definitions.isSet()) {
        obj.insert(QString("GroupDefinitions"), ::OpenAPI::toJsonValue(m_group_definitions));
    }
    if (m_results_by_time.isSet()) {
        obj.insert(QString("ResultsByTime"), ::OpenAPI::toJsonValue(m_results_by_time));
    }
    if (m_dimension_value_attributes.isSet()) {
        obj.insert(QString("DimensionValueAttributes"), ::OpenAPI::toJsonValue(m_dimension_value_attributes));
    }
    return obj;
}

QString OAIGetCostAndUsageWithResourcesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetCostAndUsageWithResourcesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetCostAndUsageWithResourcesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetCostAndUsageWithResourcesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList OAIGetCostAndUsageWithResourcesResponse::getGroupDefinitions() const {
    return m_group_definitions;
}
void OAIGetCostAndUsageWithResourcesResponse::setGroupDefinitions(const QList &group_definitions) {
    m_group_definitions = group_definitions;
    m_group_definitions_isSet = true;
}

bool OAIGetCostAndUsageWithResourcesResponse::is_group_definitions_Set() const{
    return m_group_definitions_isSet;
}

bool OAIGetCostAndUsageWithResourcesResponse::is_group_definitions_Valid() const{
    return m_group_definitions_isValid;
}

QList OAIGetCostAndUsageWithResourcesResponse::getResultsByTime() const {
    return m_results_by_time;
}
void OAIGetCostAndUsageWithResourcesResponse::setResultsByTime(const QList &results_by_time) {
    m_results_by_time = results_by_time;
    m_results_by_time_isSet = true;
}

bool OAIGetCostAndUsageWithResourcesResponse::is_results_by_time_Set() const{
    return m_results_by_time_isSet;
}

bool OAIGetCostAndUsageWithResourcesResponse::is_results_by_time_Valid() const{
    return m_results_by_time_isValid;
}

QList OAIGetCostAndUsageWithResourcesResponse::getDimensionValueAttributes() const {
    return m_dimension_value_attributes;
}
void OAIGetCostAndUsageWithResourcesResponse::setDimensionValueAttributes(const QList &dimension_value_attributes) {
    m_dimension_value_attributes = dimension_value_attributes;
    m_dimension_value_attributes_isSet = true;
}

bool OAIGetCostAndUsageWithResourcesResponse::is_dimension_value_attributes_Set() const{
    return m_dimension_value_attributes_isSet;
}

bool OAIGetCostAndUsageWithResourcesResponse::is_dimension_value_attributes_Valid() const{
    return m_dimension_value_attributes_isValid;
}

bool OAIGetCostAndUsageWithResourcesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_by_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_value_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCostAndUsageWithResourcesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
