/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata() {
    this->initializeModel();
}

OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::~OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata() {}

void OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::initializeModel() {

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_generation_timestamp_isSet = false;
    m_generation_timestamp_isValid = false;

    m_additional_metadata_isSet = false;
    m_additional_metadata_isValid = false;
}

void OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::fromJsonObject(QJsonObject json) {

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("RecommendationId")]);
    m_recommendation_id_isSet = !json[QString("RecommendationId")].isNull() && m_recommendation_id_isValid;

    m_generation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_generation_timestamp, json[QString("GenerationTimestamp")]);
    m_generation_timestamp_isSet = !json[QString("GenerationTimestamp")].isNull() && m_generation_timestamp_isValid;

    m_additional_metadata_isValid = ::OpenAPI::fromJsonValue(m_additional_metadata, json[QString("AdditionalMetadata")]);
    m_additional_metadata_isSet = !json[QString("AdditionalMetadata")].isNull() && m_additional_metadata_isValid;
}

QString OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::asJsonObject() const {
    QJsonObject obj;
    if (m_recommendation_id_isSet) {
        obj.insert(QString("RecommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_generation_timestamp_isSet) {
        obj.insert(QString("GenerationTimestamp"), ::OpenAPI::toJsonValue(m_generation_timestamp));
    }
    if (m_additional_metadata_isSet) {
        obj.insert(QString("AdditionalMetadata"), ::OpenAPI::toJsonValue(m_additional_metadata));
    }
    return obj;
}

QString OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

QString OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::getGenerationTimestamp() const {
    return m_generation_timestamp;
}
void OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::setGenerationTimestamp(const QString &generation_timestamp) {
    m_generation_timestamp = generation_timestamp;
    m_generation_timestamp_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::is_generation_timestamp_Set() const{
    return m_generation_timestamp_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::is_generation_timestamp_Valid() const{
    return m_generation_timestamp_isValid;
}

QString OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::getAdditionalMetadata() const {
    return m_additional_metadata;
}
void OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::setAdditionalMetadata(const QString &additional_metadata) {
    m_additional_metadata = additional_metadata;
    m_additional_metadata_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::is_additional_metadata_Set() const{
    return m_additional_metadata_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::is_additional_metadata_Valid() const{
    return m_additional_metadata_isValid;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
