/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSavingsPlansUtilizationDetailsResponse_Total.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSavingsPlansUtilizationDetailsResponse_Total::OAIGetSavingsPlansUtilizationDetailsResponse_Total(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSavingsPlansUtilizationDetailsResponse_Total::OAIGetSavingsPlansUtilizationDetailsResponse_Total() {
    this->initializeModel();
}

OAIGetSavingsPlansUtilizationDetailsResponse_Total::~OAIGetSavingsPlansUtilizationDetailsResponse_Total() {}

void OAIGetSavingsPlansUtilizationDetailsResponse_Total::initializeModel() {

    m_utilization_isSet = false;
    m_utilization_isValid = false;

    m_savings_isSet = false;
    m_savings_isValid = false;

    m_amortized_commitment_isSet = false;
    m_amortized_commitment_isValid = false;
}

void OAIGetSavingsPlansUtilizationDetailsResponse_Total::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSavingsPlansUtilizationDetailsResponse_Total::fromJsonObject(QJsonObject json) {

    m_utilization_isValid = ::OpenAPI::fromJsonValue(m_utilization, json[QString("Utilization")]);
    m_utilization_isSet = !json[QString("Utilization")].isNull() && m_utilization_isValid;

    m_savings_isValid = ::OpenAPI::fromJsonValue(m_savings, json[QString("Savings")]);
    m_savings_isSet = !json[QString("Savings")].isNull() && m_savings_isValid;

    m_amortized_commitment_isValid = ::OpenAPI::fromJsonValue(m_amortized_commitment, json[QString("AmortizedCommitment")]);
    m_amortized_commitment_isSet = !json[QString("AmortizedCommitment")].isNull() && m_amortized_commitment_isValid;
}

QString OAIGetSavingsPlansUtilizationDetailsResponse_Total::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSavingsPlansUtilizationDetailsResponse_Total::asJsonObject() const {
    QJsonObject obj;
    if (m_utilization.isSet()) {
        obj.insert(QString("Utilization"), ::OpenAPI::toJsonValue(m_utilization));
    }
    if (m_savings.isSet()) {
        obj.insert(QString("Savings"), ::OpenAPI::toJsonValue(m_savings));
    }
    if (m_amortized_commitment.isSet()) {
        obj.insert(QString("AmortizedCommitment"), ::OpenAPI::toJsonValue(m_amortized_commitment));
    }
    return obj;
}

OAISavingsPlansUtilizationAggregates_Utilization OAIGetSavingsPlansUtilizationDetailsResponse_Total::getUtilization() const {
    return m_utilization;
}
void OAIGetSavingsPlansUtilizationDetailsResponse_Total::setUtilization(const OAISavingsPlansUtilizationAggregates_Utilization &utilization) {
    m_utilization = utilization;
    m_utilization_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse_Total::is_utilization_Set() const{
    return m_utilization_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse_Total::is_utilization_Valid() const{
    return m_utilization_isValid;
}

OAISavingsPlansUtilizationAggregates_Savings OAIGetSavingsPlansUtilizationDetailsResponse_Total::getSavings() const {
    return m_savings;
}
void OAIGetSavingsPlansUtilizationDetailsResponse_Total::setSavings(const OAISavingsPlansUtilizationAggregates_Savings &savings) {
    m_savings = savings;
    m_savings_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse_Total::is_savings_Set() const{
    return m_savings_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse_Total::is_savings_Valid() const{
    return m_savings_isValid;
}

OAISavingsPlansUtilizationAggregates_AmortizedCommitment OAIGetSavingsPlansUtilizationDetailsResponse_Total::getAmortizedCommitment() const {
    return m_amortized_commitment;
}
void OAIGetSavingsPlansUtilizationDetailsResponse_Total::setAmortizedCommitment(const OAISavingsPlansUtilizationAggregates_AmortizedCommitment &amortized_commitment) {
    m_amortized_commitment = amortized_commitment;
    m_amortized_commitment_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse_Total::is_amortized_commitment_Set() const{
    return m_amortized_commitment_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse_Total::is_amortized_commitment_Valid() const{
    return m_amortized_commitment_isValid;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse_Total::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_utilization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amortized_commitment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse_Total::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_utilization_isValid && true;
}

} // namespace OpenAPI
