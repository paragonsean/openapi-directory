/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRightsizingRecommendationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRightsizingRecommendationRequest::OAIGetRightsizingRecommendationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRightsizingRecommendationRequest::OAIGetRightsizingRecommendationRequest() {
    this->initializeModel();
}

OAIGetRightsizingRecommendationRequest::~OAIGetRightsizingRecommendationRequest() {}

void OAIGetRightsizingRecommendationRequest::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetRightsizingRecommendationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRightsizingRecommendationRequest::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("Service")]);
    m_service_isSet = !json[QString("Service")].isNull() && m_service_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("PageSize")]);
    m_page_size_isSet = !json[QString("PageSize")].isNull() && m_page_size_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetRightsizingRecommendationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRightsizingRecommendationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_service_isSet) {
        obj.insert(QString("Service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("PageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

OAIExpression OAIGetRightsizingRecommendationRequest::getFilter() const {
    return m_filter;
}
void OAIGetRightsizingRecommendationRequest::setFilter(const OAIExpression &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetRightsizingRecommendationRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetRightsizingRecommendationRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIGetRightsizingRecommendationResponse_Configuration OAIGetRightsizingRecommendationRequest::getConfiguration() const {
    return m_configuration;
}
void OAIGetRightsizingRecommendationRequest::setConfiguration(const OAIGetRightsizingRecommendationResponse_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIGetRightsizingRecommendationRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIGetRightsizingRecommendationRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIGetRightsizingRecommendationRequest::getService() const {
    return m_service;
}
void OAIGetRightsizingRecommendationRequest::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIGetRightsizingRecommendationRequest::is_service_Set() const{
    return m_service_isSet;
}

bool OAIGetRightsizingRecommendationRequest::is_service_Valid() const{
    return m_service_isValid;
}

qint32 OAIGetRightsizingRecommendationRequest::getPageSize() const {
    return m_page_size;
}
void OAIGetRightsizingRecommendationRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGetRightsizingRecommendationRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGetRightsizingRecommendationRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIGetRightsizingRecommendationRequest::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetRightsizingRecommendationRequest::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetRightsizingRecommendationRequest::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetRightsizingRecommendationRequest::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetRightsizingRecommendationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRightsizingRecommendationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_isValid && true;
}

} // namespace OpenAPI
