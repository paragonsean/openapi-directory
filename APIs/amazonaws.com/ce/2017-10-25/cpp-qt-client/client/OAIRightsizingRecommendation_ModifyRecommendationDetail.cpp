/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRightsizingRecommendation_ModifyRecommendationDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRightsizingRecommendation_ModifyRecommendationDetail::OAIRightsizingRecommendation_ModifyRecommendationDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRightsizingRecommendation_ModifyRecommendationDetail::OAIRightsizingRecommendation_ModifyRecommendationDetail() {
    this->initializeModel();
}

OAIRightsizingRecommendation_ModifyRecommendationDetail::~OAIRightsizingRecommendation_ModifyRecommendationDetail() {}

void OAIRightsizingRecommendation_ModifyRecommendationDetail::initializeModel() {

    m_target_instances_isSet = false;
    m_target_instances_isValid = false;
}

void OAIRightsizingRecommendation_ModifyRecommendationDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRightsizingRecommendation_ModifyRecommendationDetail::fromJsonObject(QJsonObject json) {

    m_target_instances_isValid = ::OpenAPI::fromJsonValue(m_target_instances, json[QString("TargetInstances")]);
    m_target_instances_isSet = !json[QString("TargetInstances")].isNull() && m_target_instances_isValid;
}

QString OAIRightsizingRecommendation_ModifyRecommendationDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRightsizingRecommendation_ModifyRecommendationDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_target_instances.isSet()) {
        obj.insert(QString("TargetInstances"), ::OpenAPI::toJsonValue(m_target_instances));
    }
    return obj;
}

QList OAIRightsizingRecommendation_ModifyRecommendationDetail::getTargetInstances() const {
    return m_target_instances;
}
void OAIRightsizingRecommendation_ModifyRecommendationDetail::setTargetInstances(const QList &target_instances) {
    m_target_instances = target_instances;
    m_target_instances_isSet = true;
}

bool OAIRightsizingRecommendation_ModifyRecommendationDetail::is_target_instances_Set() const{
    return m_target_instances_isSet;
}

bool OAIRightsizingRecommendation_ModifyRecommendationDetail::is_target_instances_Valid() const{
    return m_target_instances_isValid;
}

bool OAIRightsizingRecommendation_ModifyRecommendationDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRightsizingRecommendation_ModifyRecommendationDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
