/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetUsageForecastRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetUsageForecastRequest::OAIGetUsageForecastRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetUsageForecastRequest::OAIGetUsageForecastRequest() {
    this->initializeModel();
}

OAIGetUsageForecastRequest::~OAIGetUsageForecastRequest() {}

void OAIGetUsageForecastRequest::initializeModel() {

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_granularity_isSet = false;
    m_granularity_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_prediction_interval_level_isSet = false;
    m_prediction_interval_level_isValid = false;
}

void OAIGetUsageForecastRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetUsageForecastRequest::fromJsonObject(QJsonObject json) {

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("TimePeriod")]);
    m_time_period_isSet = !json[QString("TimePeriod")].isNull() && m_time_period_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("Metric")]);
    m_metric_isSet = !json[QString("Metric")].isNull() && m_metric_isValid;

    m_granularity_isValid = ::OpenAPI::fromJsonValue(m_granularity, json[QString("Granularity")]);
    m_granularity_isSet = !json[QString("Granularity")].isNull() && m_granularity_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_prediction_interval_level_isValid = ::OpenAPI::fromJsonValue(m_prediction_interval_level, json[QString("PredictionIntervalLevel")]);
    m_prediction_interval_level_isSet = !json[QString("PredictionIntervalLevel")].isNull() && m_prediction_interval_level_isValid;
}

QString OAIGetUsageForecastRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetUsageForecastRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_time_period.isSet()) {
        obj.insert(QString("TimePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_metric.isSet()) {
        obj.insert(QString("Metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_granularity.isSet()) {
        obj.insert(QString("Granularity"), ::OpenAPI::toJsonValue(m_granularity));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_prediction_interval_level_isSet) {
        obj.insert(QString("PredictionIntervalLevel"), ::OpenAPI::toJsonValue(m_prediction_interval_level));
    }
    return obj;
}

OAIGetUsageForecastRequest_TimePeriod OAIGetUsageForecastRequest::getTimePeriod() const {
    return m_time_period;
}
void OAIGetUsageForecastRequest::setTimePeriod(const OAIGetUsageForecastRequest_TimePeriod &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIGetUsageForecastRequest::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIGetUsageForecastRequest::is_time_period_Valid() const{
    return m_time_period_isValid;
}

OAIMetric OAIGetUsageForecastRequest::getMetric() const {
    return m_metric;
}
void OAIGetUsageForecastRequest::setMetric(const OAIMetric &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIGetUsageForecastRequest::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIGetUsageForecastRequest::is_metric_Valid() const{
    return m_metric_isValid;
}

OAIGranularity OAIGetUsageForecastRequest::getGranularity() const {
    return m_granularity;
}
void OAIGetUsageForecastRequest::setGranularity(const OAIGranularity &granularity) {
    m_granularity = granularity;
    m_granularity_isSet = true;
}

bool OAIGetUsageForecastRequest::is_granularity_Set() const{
    return m_granularity_isSet;
}

bool OAIGetUsageForecastRequest::is_granularity_Valid() const{
    return m_granularity_isValid;
}

OAIGetUsageForecastRequest_Filter OAIGetUsageForecastRequest::getFilter() const {
    return m_filter;
}
void OAIGetUsageForecastRequest::setFilter(const OAIGetUsageForecastRequest_Filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetUsageForecastRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetUsageForecastRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAIGetUsageForecastRequest::getPredictionIntervalLevel() const {
    return m_prediction_interval_level;
}
void OAIGetUsageForecastRequest::setPredictionIntervalLevel(const qint32 &prediction_interval_level) {
    m_prediction_interval_level = prediction_interval_level;
    m_prediction_interval_level_isSet = true;
}

bool OAIGetUsageForecastRequest::is_prediction_interval_level_Set() const{
    return m_prediction_interval_level_isSet;
}

bool OAIGetUsageForecastRequest::is_prediction_interval_level_Valid() const{
    return m_prediction_interval_level_isValid;
}

bool OAIGetUsageForecastRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_interval_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetUsageForecastRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_time_period_isValid && m_metric_isValid && m_granularity_isValid && true;
}

} // namespace OpenAPI
