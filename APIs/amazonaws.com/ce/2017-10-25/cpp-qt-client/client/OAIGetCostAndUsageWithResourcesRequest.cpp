/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCostAndUsageWithResourcesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCostAndUsageWithResourcesRequest::OAIGetCostAndUsageWithResourcesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCostAndUsageWithResourcesRequest::OAIGetCostAndUsageWithResourcesRequest() {
    this->initializeModel();
}

OAIGetCostAndUsageWithResourcesRequest::~OAIGetCostAndUsageWithResourcesRequest() {}

void OAIGetCostAndUsageWithResourcesRequest::initializeModel() {

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_granularity_isSet = false;
    m_granularity_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_group_by_isSet = false;
    m_group_by_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetCostAndUsageWithResourcesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCostAndUsageWithResourcesRequest::fromJsonObject(QJsonObject json) {

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("TimePeriod")]);
    m_time_period_isSet = !json[QString("TimePeriod")].isNull() && m_time_period_isValid;

    m_granularity_isValid = ::OpenAPI::fromJsonValue(m_granularity, json[QString("Granularity")]);
    m_granularity_isSet = !json[QString("Granularity")].isNull() && m_granularity_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("Metrics")]);
    m_metrics_isSet = !json[QString("Metrics")].isNull() && m_metrics_isValid;

    m_group_by_isValid = ::OpenAPI::fromJsonValue(m_group_by, json[QString("GroupBy")]);
    m_group_by_isSet = !json[QString("GroupBy")].isNull() && m_group_by_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetCostAndUsageWithResourcesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCostAndUsageWithResourcesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_time_period.isSet()) {
        obj.insert(QString("TimePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_granularity.isSet()) {
        obj.insert(QString("Granularity"), ::OpenAPI::toJsonValue(m_granularity));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("Metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_group_by.isSet()) {
        obj.insert(QString("GroupBy"), ::OpenAPI::toJsonValue(m_group_by));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

OAIGetCostAndUsageWithResourcesRequest_TimePeriod OAIGetCostAndUsageWithResourcesRequest::getTimePeriod() const {
    return m_time_period;
}
void OAIGetCostAndUsageWithResourcesRequest::setTimePeriod(const OAIGetCostAndUsageWithResourcesRequest_TimePeriod &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIGetCostAndUsageWithResourcesRequest::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIGetCostAndUsageWithResourcesRequest::is_time_period_Valid() const{
    return m_time_period_isValid;
}

OAIGranularity OAIGetCostAndUsageWithResourcesRequest::getGranularity() const {
    return m_granularity;
}
void OAIGetCostAndUsageWithResourcesRequest::setGranularity(const OAIGranularity &granularity) {
    m_granularity = granularity;
    m_granularity_isSet = true;
}

bool OAIGetCostAndUsageWithResourcesRequest::is_granularity_Set() const{
    return m_granularity_isSet;
}

bool OAIGetCostAndUsageWithResourcesRequest::is_granularity_Valid() const{
    return m_granularity_isValid;
}

OAIGetCostAndUsageWithResourcesRequest_Filter OAIGetCostAndUsageWithResourcesRequest::getFilter() const {
    return m_filter;
}
void OAIGetCostAndUsageWithResourcesRequest::setFilter(const OAIGetCostAndUsageWithResourcesRequest_Filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetCostAndUsageWithResourcesRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetCostAndUsageWithResourcesRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QList OAIGetCostAndUsageWithResourcesRequest::getMetrics() const {
    return m_metrics;
}
void OAIGetCostAndUsageWithResourcesRequest::setMetrics(const QList &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIGetCostAndUsageWithResourcesRequest::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIGetCostAndUsageWithResourcesRequest::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QList OAIGetCostAndUsageWithResourcesRequest::getGroupBy() const {
    return m_group_by;
}
void OAIGetCostAndUsageWithResourcesRequest::setGroupBy(const QList &group_by) {
    m_group_by = group_by;
    m_group_by_isSet = true;
}

bool OAIGetCostAndUsageWithResourcesRequest::is_group_by_Set() const{
    return m_group_by_isSet;
}

bool OAIGetCostAndUsageWithResourcesRequest::is_group_by_Valid() const{
    return m_group_by_isValid;
}

QString OAIGetCostAndUsageWithResourcesRequest::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetCostAndUsageWithResourcesRequest::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetCostAndUsageWithResourcesRequest::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetCostAndUsageWithResourcesRequest::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetCostAndUsageWithResourcesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCostAndUsageWithResourcesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_time_period_isValid && m_granularity_isValid && m_filter_isValid && true;
}

} // namespace OpenAPI
