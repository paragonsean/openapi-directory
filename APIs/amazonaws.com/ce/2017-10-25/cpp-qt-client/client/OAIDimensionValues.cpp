/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionValues::OAIDimensionValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionValues::OAIDimensionValues() {
    this->initializeModel();
}

OAIDimensionValues::~OAIDimensionValues() {}

void OAIDimensionValues::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_match_options_isSet = false;
    m_match_options_isValid = false;
}

void OAIDimensionValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionValues::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_match_options_isValid = ::OpenAPI::fromJsonValue(m_match_options, json[QString("MatchOptions")]);
    m_match_options_isSet = !json[QString("MatchOptions")].isNull() && m_match_options_isValid;
}

QString OAIDimensionValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionValues::asJsonObject() const {
    QJsonObject obj;
    if (m_key.isSet()) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_match_options.isSet()) {
        obj.insert(QString("MatchOptions"), ::OpenAPI::toJsonValue(m_match_options));
    }
    return obj;
}

OAIDimension OAIDimensionValues::getKey() const {
    return m_key;
}
void OAIDimensionValues::setKey(const OAIDimension &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIDimensionValues::is_key_Set() const{
    return m_key_isSet;
}

bool OAIDimensionValues::is_key_Valid() const{
    return m_key_isValid;
}

QList OAIDimensionValues::getValues() const {
    return m_values;
}
void OAIDimensionValues::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIDimensionValues::is_values_Set() const{
    return m_values_isSet;
}

bool OAIDimensionValues::is_values_Valid() const{
    return m_values_isValid;
}

QList OAIDimensionValues::getMatchOptions() const {
    return m_match_options;
}
void OAIDimensionValues::setMatchOptions(const QList &match_options) {
    m_match_options = match_options;
    m_match_options_isSet = true;
}

bool OAIDimensionValues::is_match_options_Set() const{
    return m_match_options_isSet;
}

bool OAIDimensionValues::is_match_options_Valid() const{
    return m_match_options_isValid;
}

bool OAIDimensionValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
