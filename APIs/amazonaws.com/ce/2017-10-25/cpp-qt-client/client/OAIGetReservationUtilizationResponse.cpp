/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetReservationUtilizationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetReservationUtilizationResponse::OAIGetReservationUtilizationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetReservationUtilizationResponse::OAIGetReservationUtilizationResponse() {
    this->initializeModel();
}

OAIGetReservationUtilizationResponse::~OAIGetReservationUtilizationResponse() {}

void OAIGetReservationUtilizationResponse::initializeModel() {

    m_utilizations_by_time_isSet = false;
    m_utilizations_by_time_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetReservationUtilizationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetReservationUtilizationResponse::fromJsonObject(QJsonObject json) {

    m_utilizations_by_time_isValid = ::OpenAPI::fromJsonValue(m_utilizations_by_time, json[QString("UtilizationsByTime")]);
    m_utilizations_by_time_isSet = !json[QString("UtilizationsByTime")].isNull() && m_utilizations_by_time_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetReservationUtilizationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetReservationUtilizationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_utilizations_by_time.isSet()) {
        obj.insert(QString("UtilizationsByTime"), ::OpenAPI::toJsonValue(m_utilizations_by_time));
    }
    if (m_total.isSet()) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIGetReservationUtilizationResponse::getUtilizationsByTime() const {
    return m_utilizations_by_time;
}
void OAIGetReservationUtilizationResponse::setUtilizationsByTime(const QList &utilizations_by_time) {
    m_utilizations_by_time = utilizations_by_time;
    m_utilizations_by_time_isSet = true;
}

bool OAIGetReservationUtilizationResponse::is_utilizations_by_time_Set() const{
    return m_utilizations_by_time_isSet;
}

bool OAIGetReservationUtilizationResponse::is_utilizations_by_time_Valid() const{
    return m_utilizations_by_time_isValid;
}

OAIGetReservationUtilizationResponse_Total OAIGetReservationUtilizationResponse::getTotal() const {
    return m_total;
}
void OAIGetReservationUtilizationResponse::setTotal(const OAIGetReservationUtilizationResponse_Total &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIGetReservationUtilizationResponse::is_total_Set() const{
    return m_total_isSet;
}

bool OAIGetReservationUtilizationResponse::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIGetReservationUtilizationResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetReservationUtilizationResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetReservationUtilizationResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetReservationUtilizationResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetReservationUtilizationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_utilizations_by_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetReservationUtilizationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_utilizations_by_time_isValid && true;
}

} // namespace OpenAPI
