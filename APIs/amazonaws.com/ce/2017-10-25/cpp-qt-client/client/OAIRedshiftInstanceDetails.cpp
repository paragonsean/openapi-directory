/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedshiftInstanceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedshiftInstanceDetails::OAIRedshiftInstanceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedshiftInstanceDetails::OAIRedshiftInstanceDetails() {
    this->initializeModel();
}

OAIRedshiftInstanceDetails::~OAIRedshiftInstanceDetails() {}

void OAIRedshiftInstanceDetails::initializeModel() {

    m_family_isSet = false;
    m_family_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_current_generation_isSet = false;
    m_current_generation_isValid = false;

    m_size_flex_eligible_isSet = false;
    m_size_flex_eligible_isValid = false;
}

void OAIRedshiftInstanceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedshiftInstanceDetails::fromJsonObject(QJsonObject json) {

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("Family")]);
    m_family_isSet = !json[QString("Family")].isNull() && m_family_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_current_generation_isValid = ::OpenAPI::fromJsonValue(m_current_generation, json[QString("CurrentGeneration")]);
    m_current_generation_isSet = !json[QString("CurrentGeneration")].isNull() && m_current_generation_isValid;

    m_size_flex_eligible_isValid = ::OpenAPI::fromJsonValue(m_size_flex_eligible, json[QString("SizeFlexEligible")]);
    m_size_flex_eligible_isSet = !json[QString("SizeFlexEligible")].isNull() && m_size_flex_eligible_isValid;
}

QString OAIRedshiftInstanceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedshiftInstanceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_family_isSet) {
        obj.insert(QString("Family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_current_generation_isSet) {
        obj.insert(QString("CurrentGeneration"), ::OpenAPI::toJsonValue(m_current_generation));
    }
    if (m_size_flex_eligible_isSet) {
        obj.insert(QString("SizeFlexEligible"), ::OpenAPI::toJsonValue(m_size_flex_eligible));
    }
    return obj;
}

QString OAIRedshiftInstanceDetails::getFamily() const {
    return m_family;
}
void OAIRedshiftInstanceDetails::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIRedshiftInstanceDetails::is_family_Set() const{
    return m_family_isSet;
}

bool OAIRedshiftInstanceDetails::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIRedshiftInstanceDetails::getNodeType() const {
    return m_node_type;
}
void OAIRedshiftInstanceDetails::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIRedshiftInstanceDetails::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIRedshiftInstanceDetails::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QString OAIRedshiftInstanceDetails::getRegion() const {
    return m_region;
}
void OAIRedshiftInstanceDetails::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIRedshiftInstanceDetails::is_region_Set() const{
    return m_region_isSet;
}

bool OAIRedshiftInstanceDetails::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIRedshiftInstanceDetails::getCurrentGeneration() const {
    return m_current_generation;
}
void OAIRedshiftInstanceDetails::setCurrentGeneration(const bool &current_generation) {
    m_current_generation = current_generation;
    m_current_generation_isSet = true;
}

bool OAIRedshiftInstanceDetails::is_current_generation_Set() const{
    return m_current_generation_isSet;
}

bool OAIRedshiftInstanceDetails::is_current_generation_Valid() const{
    return m_current_generation_isValid;
}

bool OAIRedshiftInstanceDetails::getSizeFlexEligible() const {
    return m_size_flex_eligible;
}
void OAIRedshiftInstanceDetails::setSizeFlexEligible(const bool &size_flex_eligible) {
    m_size_flex_eligible = size_flex_eligible;
    m_size_flex_eligible_isSet = true;
}

bool OAIRedshiftInstanceDetails::is_size_flex_eligible_Set() const{
    return m_size_flex_eligible_isSet;
}

bool OAIRedshiftInstanceDetails::is_size_flex_eligible_Valid() const{
    return m_size_flex_eligible_isValid;
}

bool OAIRedshiftInstanceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_flex_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedshiftInstanceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
