/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateCostAllocationTagsStatusError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateCostAllocationTagsStatusError::OAIUpdateCostAllocationTagsStatusError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateCostAllocationTagsStatusError::OAIUpdateCostAllocationTagsStatusError() {
    this->initializeModel();
}

OAIUpdateCostAllocationTagsStatusError::~OAIUpdateCostAllocationTagsStatusError() {}

void OAIUpdateCostAllocationTagsStatusError::initializeModel() {

    m_tag_key_isSet = false;
    m_tag_key_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIUpdateCostAllocationTagsStatusError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateCostAllocationTagsStatusError::fromJsonObject(QJsonObject json) {

    m_tag_key_isValid = ::OpenAPI::fromJsonValue(m_tag_key, json[QString("TagKey")]);
    m_tag_key_isSet = !json[QString("TagKey")].isNull() && m_tag_key_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAIUpdateCostAllocationTagsStatusError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateCostAllocationTagsStatusError::asJsonObject() const {
    QJsonObject obj;
    if (m_tag_key_isSet) {
        obj.insert(QString("TagKey"), ::OpenAPI::toJsonValue(m_tag_key));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIUpdateCostAllocationTagsStatusError::getTagKey() const {
    return m_tag_key;
}
void OAIUpdateCostAllocationTagsStatusError::setTagKey(const QString &tag_key) {
    m_tag_key = tag_key;
    m_tag_key_isSet = true;
}

bool OAIUpdateCostAllocationTagsStatusError::is_tag_key_Set() const{
    return m_tag_key_isSet;
}

bool OAIUpdateCostAllocationTagsStatusError::is_tag_key_Valid() const{
    return m_tag_key_isValid;
}

QString OAIUpdateCostAllocationTagsStatusError::getCode() const {
    return m_code;
}
void OAIUpdateCostAllocationTagsStatusError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIUpdateCostAllocationTagsStatusError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIUpdateCostAllocationTagsStatusError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIUpdateCostAllocationTagsStatusError::getMessage() const {
    return m_message;
}
void OAIUpdateCostAllocationTagsStatusError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIUpdateCostAllocationTagsStatusError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIUpdateCostAllocationTagsStatusError::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIUpdateCostAllocationTagsStatusError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tag_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateCostAllocationTagsStatusError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
