/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEC2ResourceUtilization_NetworkResourceUtilization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEC2ResourceUtilization_NetworkResourceUtilization::OAIEC2ResourceUtilization_NetworkResourceUtilization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEC2ResourceUtilization_NetworkResourceUtilization::OAIEC2ResourceUtilization_NetworkResourceUtilization() {
    this->initializeModel();
}

OAIEC2ResourceUtilization_NetworkResourceUtilization::~OAIEC2ResourceUtilization_NetworkResourceUtilization() {}

void OAIEC2ResourceUtilization_NetworkResourceUtilization::initializeModel() {

    m_network_in_bytes_per_second_isSet = false;
    m_network_in_bytes_per_second_isValid = false;

    m_network_out_bytes_per_second_isSet = false;
    m_network_out_bytes_per_second_isValid = false;

    m_network_packets_in_per_second_isSet = false;
    m_network_packets_in_per_second_isValid = false;

    m_network_packets_out_per_second_isSet = false;
    m_network_packets_out_per_second_isValid = false;
}

void OAIEC2ResourceUtilization_NetworkResourceUtilization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEC2ResourceUtilization_NetworkResourceUtilization::fromJsonObject(QJsonObject json) {

    m_network_in_bytes_per_second_isValid = ::OpenAPI::fromJsonValue(m_network_in_bytes_per_second, json[QString("NetworkInBytesPerSecond")]);
    m_network_in_bytes_per_second_isSet = !json[QString("NetworkInBytesPerSecond")].isNull() && m_network_in_bytes_per_second_isValid;

    m_network_out_bytes_per_second_isValid = ::OpenAPI::fromJsonValue(m_network_out_bytes_per_second, json[QString("NetworkOutBytesPerSecond")]);
    m_network_out_bytes_per_second_isSet = !json[QString("NetworkOutBytesPerSecond")].isNull() && m_network_out_bytes_per_second_isValid;

    m_network_packets_in_per_second_isValid = ::OpenAPI::fromJsonValue(m_network_packets_in_per_second, json[QString("NetworkPacketsInPerSecond")]);
    m_network_packets_in_per_second_isSet = !json[QString("NetworkPacketsInPerSecond")].isNull() && m_network_packets_in_per_second_isValid;

    m_network_packets_out_per_second_isValid = ::OpenAPI::fromJsonValue(m_network_packets_out_per_second, json[QString("NetworkPacketsOutPerSecond")]);
    m_network_packets_out_per_second_isSet = !json[QString("NetworkPacketsOutPerSecond")].isNull() && m_network_packets_out_per_second_isValid;
}

QString OAIEC2ResourceUtilization_NetworkResourceUtilization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEC2ResourceUtilization_NetworkResourceUtilization::asJsonObject() const {
    QJsonObject obj;
    if (m_network_in_bytes_per_second_isSet) {
        obj.insert(QString("NetworkInBytesPerSecond"), ::OpenAPI::toJsonValue(m_network_in_bytes_per_second));
    }
    if (m_network_out_bytes_per_second_isSet) {
        obj.insert(QString("NetworkOutBytesPerSecond"), ::OpenAPI::toJsonValue(m_network_out_bytes_per_second));
    }
    if (m_network_packets_in_per_second_isSet) {
        obj.insert(QString("NetworkPacketsInPerSecond"), ::OpenAPI::toJsonValue(m_network_packets_in_per_second));
    }
    if (m_network_packets_out_per_second_isSet) {
        obj.insert(QString("NetworkPacketsOutPerSecond"), ::OpenAPI::toJsonValue(m_network_packets_out_per_second));
    }
    return obj;
}

QString OAIEC2ResourceUtilization_NetworkResourceUtilization::getNetworkInBytesPerSecond() const {
    return m_network_in_bytes_per_second;
}
void OAIEC2ResourceUtilization_NetworkResourceUtilization::setNetworkInBytesPerSecond(const QString &network_in_bytes_per_second) {
    m_network_in_bytes_per_second = network_in_bytes_per_second;
    m_network_in_bytes_per_second_isSet = true;
}

bool OAIEC2ResourceUtilization_NetworkResourceUtilization::is_network_in_bytes_per_second_Set() const{
    return m_network_in_bytes_per_second_isSet;
}

bool OAIEC2ResourceUtilization_NetworkResourceUtilization::is_network_in_bytes_per_second_Valid() const{
    return m_network_in_bytes_per_second_isValid;
}

QString OAIEC2ResourceUtilization_NetworkResourceUtilization::getNetworkOutBytesPerSecond() const {
    return m_network_out_bytes_per_second;
}
void OAIEC2ResourceUtilization_NetworkResourceUtilization::setNetworkOutBytesPerSecond(const QString &network_out_bytes_per_second) {
    m_network_out_bytes_per_second = network_out_bytes_per_second;
    m_network_out_bytes_per_second_isSet = true;
}

bool OAIEC2ResourceUtilization_NetworkResourceUtilization::is_network_out_bytes_per_second_Set() const{
    return m_network_out_bytes_per_second_isSet;
}

bool OAIEC2ResourceUtilization_NetworkResourceUtilization::is_network_out_bytes_per_second_Valid() const{
    return m_network_out_bytes_per_second_isValid;
}

QString OAIEC2ResourceUtilization_NetworkResourceUtilization::getNetworkPacketsInPerSecond() const {
    return m_network_packets_in_per_second;
}
void OAIEC2ResourceUtilization_NetworkResourceUtilization::setNetworkPacketsInPerSecond(const QString &network_packets_in_per_second) {
    m_network_packets_in_per_second = network_packets_in_per_second;
    m_network_packets_in_per_second_isSet = true;
}

bool OAIEC2ResourceUtilization_NetworkResourceUtilization::is_network_packets_in_per_second_Set() const{
    return m_network_packets_in_per_second_isSet;
}

bool OAIEC2ResourceUtilization_NetworkResourceUtilization::is_network_packets_in_per_second_Valid() const{
    return m_network_packets_in_per_second_isValid;
}

QString OAIEC2ResourceUtilization_NetworkResourceUtilization::getNetworkPacketsOutPerSecond() const {
    return m_network_packets_out_per_second;
}
void OAIEC2ResourceUtilization_NetworkResourceUtilization::setNetworkPacketsOutPerSecond(const QString &network_packets_out_per_second) {
    m_network_packets_out_per_second = network_packets_out_per_second;
    m_network_packets_out_per_second_isSet = true;
}

bool OAIEC2ResourceUtilization_NetworkResourceUtilization::is_network_packets_out_per_second_Set() const{
    return m_network_packets_out_per_second_isSet;
}

bool OAIEC2ResourceUtilization_NetworkResourceUtilization::is_network_packets_out_per_second_Valid() const{
    return m_network_packets_out_per_second_isValid;
}

bool OAIEC2ResourceUtilization_NetworkResourceUtilization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_in_bytes_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_out_bytes_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_packets_in_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_packets_out_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEC2ResourceUtilization_NetworkResourceUtilization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
