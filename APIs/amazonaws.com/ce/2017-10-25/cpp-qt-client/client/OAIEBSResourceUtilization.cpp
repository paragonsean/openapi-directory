/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEBSResourceUtilization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEBSResourceUtilization::OAIEBSResourceUtilization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEBSResourceUtilization::OAIEBSResourceUtilization() {
    this->initializeModel();
}

OAIEBSResourceUtilization::~OAIEBSResourceUtilization() {}

void OAIEBSResourceUtilization::initializeModel() {

    m_ebs_read_ops_per_second_isSet = false;
    m_ebs_read_ops_per_second_isValid = false;

    m_ebs_write_ops_per_second_isSet = false;
    m_ebs_write_ops_per_second_isValid = false;

    m_ebs_read_bytes_per_second_isSet = false;
    m_ebs_read_bytes_per_second_isValid = false;

    m_ebs_write_bytes_per_second_isSet = false;
    m_ebs_write_bytes_per_second_isValid = false;
}

void OAIEBSResourceUtilization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEBSResourceUtilization::fromJsonObject(QJsonObject json) {

    m_ebs_read_ops_per_second_isValid = ::OpenAPI::fromJsonValue(m_ebs_read_ops_per_second, json[QString("EbsReadOpsPerSecond")]);
    m_ebs_read_ops_per_second_isSet = !json[QString("EbsReadOpsPerSecond")].isNull() && m_ebs_read_ops_per_second_isValid;

    m_ebs_write_ops_per_second_isValid = ::OpenAPI::fromJsonValue(m_ebs_write_ops_per_second, json[QString("EbsWriteOpsPerSecond")]);
    m_ebs_write_ops_per_second_isSet = !json[QString("EbsWriteOpsPerSecond")].isNull() && m_ebs_write_ops_per_second_isValid;

    m_ebs_read_bytes_per_second_isValid = ::OpenAPI::fromJsonValue(m_ebs_read_bytes_per_second, json[QString("EbsReadBytesPerSecond")]);
    m_ebs_read_bytes_per_second_isSet = !json[QString("EbsReadBytesPerSecond")].isNull() && m_ebs_read_bytes_per_second_isValid;

    m_ebs_write_bytes_per_second_isValid = ::OpenAPI::fromJsonValue(m_ebs_write_bytes_per_second, json[QString("EbsWriteBytesPerSecond")]);
    m_ebs_write_bytes_per_second_isSet = !json[QString("EbsWriteBytesPerSecond")].isNull() && m_ebs_write_bytes_per_second_isValid;
}

QString OAIEBSResourceUtilization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEBSResourceUtilization::asJsonObject() const {
    QJsonObject obj;
    if (m_ebs_read_ops_per_second_isSet) {
        obj.insert(QString("EbsReadOpsPerSecond"), ::OpenAPI::toJsonValue(m_ebs_read_ops_per_second));
    }
    if (m_ebs_write_ops_per_second_isSet) {
        obj.insert(QString("EbsWriteOpsPerSecond"), ::OpenAPI::toJsonValue(m_ebs_write_ops_per_second));
    }
    if (m_ebs_read_bytes_per_second_isSet) {
        obj.insert(QString("EbsReadBytesPerSecond"), ::OpenAPI::toJsonValue(m_ebs_read_bytes_per_second));
    }
    if (m_ebs_write_bytes_per_second_isSet) {
        obj.insert(QString("EbsWriteBytesPerSecond"), ::OpenAPI::toJsonValue(m_ebs_write_bytes_per_second));
    }
    return obj;
}

QString OAIEBSResourceUtilization::getEbsReadOpsPerSecond() const {
    return m_ebs_read_ops_per_second;
}
void OAIEBSResourceUtilization::setEbsReadOpsPerSecond(const QString &ebs_read_ops_per_second) {
    m_ebs_read_ops_per_second = ebs_read_ops_per_second;
    m_ebs_read_ops_per_second_isSet = true;
}

bool OAIEBSResourceUtilization::is_ebs_read_ops_per_second_Set() const{
    return m_ebs_read_ops_per_second_isSet;
}

bool OAIEBSResourceUtilization::is_ebs_read_ops_per_second_Valid() const{
    return m_ebs_read_ops_per_second_isValid;
}

QString OAIEBSResourceUtilization::getEbsWriteOpsPerSecond() const {
    return m_ebs_write_ops_per_second;
}
void OAIEBSResourceUtilization::setEbsWriteOpsPerSecond(const QString &ebs_write_ops_per_second) {
    m_ebs_write_ops_per_second = ebs_write_ops_per_second;
    m_ebs_write_ops_per_second_isSet = true;
}

bool OAIEBSResourceUtilization::is_ebs_write_ops_per_second_Set() const{
    return m_ebs_write_ops_per_second_isSet;
}

bool OAIEBSResourceUtilization::is_ebs_write_ops_per_second_Valid() const{
    return m_ebs_write_ops_per_second_isValid;
}

QString OAIEBSResourceUtilization::getEbsReadBytesPerSecond() const {
    return m_ebs_read_bytes_per_second;
}
void OAIEBSResourceUtilization::setEbsReadBytesPerSecond(const QString &ebs_read_bytes_per_second) {
    m_ebs_read_bytes_per_second = ebs_read_bytes_per_second;
    m_ebs_read_bytes_per_second_isSet = true;
}

bool OAIEBSResourceUtilization::is_ebs_read_bytes_per_second_Set() const{
    return m_ebs_read_bytes_per_second_isSet;
}

bool OAIEBSResourceUtilization::is_ebs_read_bytes_per_second_Valid() const{
    return m_ebs_read_bytes_per_second_isValid;
}

QString OAIEBSResourceUtilization::getEbsWriteBytesPerSecond() const {
    return m_ebs_write_bytes_per_second;
}
void OAIEBSResourceUtilization::setEbsWriteBytesPerSecond(const QString &ebs_write_bytes_per_second) {
    m_ebs_write_bytes_per_second = ebs_write_bytes_per_second;
    m_ebs_write_bytes_per_second_isSet = true;
}

bool OAIEBSResourceUtilization::is_ebs_write_bytes_per_second_Set() const{
    return m_ebs_write_bytes_per_second_isSet;
}

bool OAIEBSResourceUtilization::is_ebs_write_bytes_per_second_Valid() const{
    return m_ebs_write_bytes_per_second_isValid;
}

bool OAIEBSResourceUtilization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ebs_read_ops_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebs_write_ops_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebs_read_bytes_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebs_write_bytes_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEBSResourceUtilization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
