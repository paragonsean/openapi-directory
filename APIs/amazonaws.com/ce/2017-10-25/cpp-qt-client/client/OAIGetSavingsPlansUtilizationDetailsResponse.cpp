/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSavingsPlansUtilizationDetailsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSavingsPlansUtilizationDetailsResponse::OAIGetSavingsPlansUtilizationDetailsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSavingsPlansUtilizationDetailsResponse::OAIGetSavingsPlansUtilizationDetailsResponse() {
    this->initializeModel();
}

OAIGetSavingsPlansUtilizationDetailsResponse::~OAIGetSavingsPlansUtilizationDetailsResponse() {}

void OAIGetSavingsPlansUtilizationDetailsResponse::initializeModel() {

    m_savings_plans_utilization_details_isSet = false;
    m_savings_plans_utilization_details_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetSavingsPlansUtilizationDetailsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSavingsPlansUtilizationDetailsResponse::fromJsonObject(QJsonObject json) {

    m_savings_plans_utilization_details_isValid = ::OpenAPI::fromJsonValue(m_savings_plans_utilization_details, json[QString("SavingsPlansUtilizationDetails")]);
    m_savings_plans_utilization_details_isSet = !json[QString("SavingsPlansUtilizationDetails")].isNull() && m_savings_plans_utilization_details_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("TimePeriod")]);
    m_time_period_isSet = !json[QString("TimePeriod")].isNull() && m_time_period_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetSavingsPlansUtilizationDetailsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSavingsPlansUtilizationDetailsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_savings_plans_utilization_details.isSet()) {
        obj.insert(QString("SavingsPlansUtilizationDetails"), ::OpenAPI::toJsonValue(m_savings_plans_utilization_details));
    }
    if (m_total.isSet()) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_time_period.isSet()) {
        obj.insert(QString("TimePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIGetSavingsPlansUtilizationDetailsResponse::getSavingsPlansUtilizationDetails() const {
    return m_savings_plans_utilization_details;
}
void OAIGetSavingsPlansUtilizationDetailsResponse::setSavingsPlansUtilizationDetails(const QList &savings_plans_utilization_details) {
    m_savings_plans_utilization_details = savings_plans_utilization_details;
    m_savings_plans_utilization_details_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse::is_savings_plans_utilization_details_Set() const{
    return m_savings_plans_utilization_details_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse::is_savings_plans_utilization_details_Valid() const{
    return m_savings_plans_utilization_details_isValid;
}

OAIGetSavingsPlansUtilizationDetailsResponse_Total OAIGetSavingsPlansUtilizationDetailsResponse::getTotal() const {
    return m_total;
}
void OAIGetSavingsPlansUtilizationDetailsResponse::setTotal(const OAIGetSavingsPlansUtilizationDetailsResponse_Total &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse::is_total_Set() const{
    return m_total_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse::is_total_Valid() const{
    return m_total_isValid;
}

OAIDateInterval OAIGetSavingsPlansUtilizationDetailsResponse::getTimePeriod() const {
    return m_time_period;
}
void OAIGetSavingsPlansUtilizationDetailsResponse::setTimePeriod(const OAIDateInterval &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse::is_time_period_Valid() const{
    return m_time_period_isValid;
}

QString OAIGetSavingsPlansUtilizationDetailsResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetSavingsPlansUtilizationDetailsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_savings_plans_utilization_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSavingsPlansUtilizationDetailsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_savings_plans_utilization_details_isValid && m_time_period_isValid && true;
}

} // namespace OpenAPI
