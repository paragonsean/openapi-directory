/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSavingsPlansUtilizationDetailsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSavingsPlansUtilizationDetailsRequest::OAIGetSavingsPlansUtilizationDetailsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSavingsPlansUtilizationDetailsRequest::OAIGetSavingsPlansUtilizationDetailsRequest() {
    this->initializeModel();
}

OAIGetSavingsPlansUtilizationDetailsRequest::~OAIGetSavingsPlansUtilizationDetailsRequest() {}

void OAIGetSavingsPlansUtilizationDetailsRequest::initializeModel() {

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;
}

void OAIGetSavingsPlansUtilizationDetailsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSavingsPlansUtilizationDetailsRequest::fromJsonObject(QJsonObject json) {

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("TimePeriod")]);
    m_time_period_isSet = !json[QString("TimePeriod")].isNull() && m_time_period_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("DataType")]);
    m_data_type_isSet = !json[QString("DataType")].isNull() && m_data_type_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;
}

QString OAIGetSavingsPlansUtilizationDetailsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSavingsPlansUtilizationDetailsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_time_period.isSet()) {
        obj.insert(QString("TimePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_data_type.isSet()) {
        obj.insert(QString("DataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    return obj;
}

OAIGetSavingsPlansCoverageRequest_TimePeriod OAIGetSavingsPlansUtilizationDetailsRequest::getTimePeriod() const {
    return m_time_period;
}
void OAIGetSavingsPlansUtilizationDetailsRequest::setTimePeriod(const OAIGetSavingsPlansCoverageRequest_TimePeriod &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::is_time_period_Valid() const{
    return m_time_period_isValid;
}

OAIGetSavingsPlansUtilizationDetailsRequest_Filter OAIGetSavingsPlansUtilizationDetailsRequest::getFilter() const {
    return m_filter;
}
void OAIGetSavingsPlansUtilizationDetailsRequest::setFilter(const OAIGetSavingsPlansUtilizationDetailsRequest_Filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QList OAIGetSavingsPlansUtilizationDetailsRequest::getDataType() const {
    return m_data_type;
}
void OAIGetSavingsPlansUtilizationDetailsRequest::setDataType(const QList &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QString OAIGetSavingsPlansUtilizationDetailsRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetSavingsPlansUtilizationDetailsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIGetSavingsPlansUtilizationDetailsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetSavingsPlansUtilizationDetailsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAIGetSavingsPlansUtilizationDetailsRequest_SortBy OAIGetSavingsPlansUtilizationDetailsRequest::getSortBy() const {
    return m_sort_by;
}
void OAIGetSavingsPlansUtilizationDetailsRequest::setSortBy(const OAIGetSavingsPlansUtilizationDetailsRequest_SortBy &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_time_period_isValid && true;
}

} // namespace OpenAPI
