/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetCostForecastRequest_Filter.h
 *
 * 
 */

#ifndef OAIGetCostForecastRequest_Filter_H
#define OAIGetCostForecastRequest_Filter_H

#include <QJsonObject>

#include "OAIExpression_CostCategories.h"
#include "OAIExpression_Dimensions.h"
#include "OAIExpression_Not.h"
#include "OAIExpression_Tags.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExpression_Not;
class OAIExpression_Dimensions;
class OAIExpression_Tags;
class OAIExpression_CostCategories;

class OAIGetCostForecastRequest_Filter : public OAIObject {
public:
    OAIGetCostForecastRequest_Filter();
    OAIGetCostForecastRequest_Filter(QString json);
    ~OAIGetCostForecastRequest_Filter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getROr() const;
    void setROr(const QList &r_or);
    bool is_r_or_Set() const;
    bool is_r_or_Valid() const;

    QList getRAnd() const;
    void setRAnd(const QList &r_and);
    bool is_r_and_Set() const;
    bool is_r_and_Valid() const;

    OAIExpression_Not getRNot() const;
    void setRNot(const OAIExpression_Not &r_not);
    bool is_r_not_Set() const;
    bool is_r_not_Valid() const;

    OAIExpression_Dimensions getDimensions() const;
    void setDimensions(const OAIExpression_Dimensions &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    OAIExpression_Tags getTags() const;
    void setTags(const OAIExpression_Tags &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIExpression_CostCategories getCostCategories() const;
    void setCostCategories(const OAIExpression_CostCategories &cost_categories);
    bool is_cost_categories_Set() const;
    bool is_cost_categories_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_r_or;
    bool m_r_or_isSet;
    bool m_r_or_isValid;

    QList m_r_and;
    bool m_r_and_isSet;
    bool m_r_and_isValid;

    OAIExpression_Not m_r_not;
    bool m_r_not_isSet;
    bool m_r_not_isValid;

    OAIExpression_Dimensions m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    OAIExpression_Tags m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIExpression_CostCategories m_cost_categories;
    bool m_cost_categories_isSet;
    bool m_cost_categories_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetCostForecastRequest_Filter)

#endif // OAIGetCostForecastRequest_Filter_H
