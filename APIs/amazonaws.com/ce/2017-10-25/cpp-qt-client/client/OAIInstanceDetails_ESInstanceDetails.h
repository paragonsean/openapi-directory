/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstanceDetails_ESInstanceDetails.h
 *
 * 
 */

#ifndef OAIInstanceDetails_ESInstanceDetails_H
#define OAIInstanceDetails_ESInstanceDetails_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInstanceDetails_ESInstanceDetails : public OAIObject {
public:
    OAIInstanceDetails_ESInstanceDetails();
    OAIInstanceDetails_ESInstanceDetails(QString json);
    ~OAIInstanceDetails_ESInstanceDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInstanceClass() const;
    void setInstanceClass(const QString &instance_class);
    bool is_instance_class_Set() const;
    bool is_instance_class_Valid() const;

    QString getInstanceSize() const;
    void setInstanceSize(const QString &instance_size);
    bool is_instance_size_Set() const;
    bool is_instance_size_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    bool getCurrentGeneration() const;
    void setCurrentGeneration(const bool &current_generation);
    bool is_current_generation_Set() const;
    bool is_current_generation_Valid() const;

    bool getSizeFlexEligible() const;
    void setSizeFlexEligible(const bool &size_flex_eligible);
    bool is_size_flex_eligible_Set() const;
    bool is_size_flex_eligible_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_instance_class;
    bool m_instance_class_isSet;
    bool m_instance_class_isValid;

    QString m_instance_size;
    bool m_instance_size_isSet;
    bool m_instance_size_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    bool m_current_generation;
    bool m_current_generation_isSet;
    bool m_current_generation_isValid;

    bool m_size_flex_eligible;
    bool m_size_flex_eligible_isSet;
    bool m_size_flex_eligible_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstanceDetails_ESInstanceDetails)

#endif // OAIInstanceDetails_ESInstanceDetails_H
