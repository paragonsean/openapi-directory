/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnomaly_AnomalyScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnomaly_AnomalyScore::OAIAnomaly_AnomalyScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnomaly_AnomalyScore::OAIAnomaly_AnomalyScore() {
    this->initializeModel();
}

OAIAnomaly_AnomalyScore::~OAIAnomaly_AnomalyScore() {}

void OAIAnomaly_AnomalyScore::initializeModel() {

    m_max_score_isSet = false;
    m_max_score_isValid = false;

    m_current_score_isSet = false;
    m_current_score_isValid = false;
}

void OAIAnomaly_AnomalyScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnomaly_AnomalyScore::fromJsonObject(QJsonObject json) {

    m_max_score_isValid = ::OpenAPI::fromJsonValue(m_max_score, json[QString("MaxScore")]);
    m_max_score_isSet = !json[QString("MaxScore")].isNull() && m_max_score_isValid;

    m_current_score_isValid = ::OpenAPI::fromJsonValue(m_current_score, json[QString("CurrentScore")]);
    m_current_score_isSet = !json[QString("CurrentScore")].isNull() && m_current_score_isValid;
}

QString OAIAnomaly_AnomalyScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnomaly_AnomalyScore::asJsonObject() const {
    QJsonObject obj;
    if (m_max_score_isSet) {
        obj.insert(QString("MaxScore"), ::OpenAPI::toJsonValue(m_max_score));
    }
    if (m_current_score_isSet) {
        obj.insert(QString("CurrentScore"), ::OpenAPI::toJsonValue(m_current_score));
    }
    return obj;
}

double OAIAnomaly_AnomalyScore::getMaxScore() const {
    return m_max_score;
}
void OAIAnomaly_AnomalyScore::setMaxScore(const double &max_score) {
    m_max_score = max_score;
    m_max_score_isSet = true;
}

bool OAIAnomaly_AnomalyScore::is_max_score_Set() const{
    return m_max_score_isSet;
}

bool OAIAnomaly_AnomalyScore::is_max_score_Valid() const{
    return m_max_score_isValid;
}

double OAIAnomaly_AnomalyScore::getCurrentScore() const {
    return m_current_score;
}
void OAIAnomaly_AnomalyScore::setCurrentScore(const double &current_score) {
    m_current_score = current_score;
    m_current_score_isSet = true;
}

bool OAIAnomaly_AnomalyScore::is_current_score_Set() const{
    return m_current_score_isSet;
}

bool OAIAnomaly_AnomalyScore::is_current_score_Valid() const{
    return m_current_score_isValid;
}

bool OAIAnomaly_AnomalyScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnomaly_AnomalyScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_score_isValid && m_current_score_isValid && true;
}

} // namespace OpenAPI
