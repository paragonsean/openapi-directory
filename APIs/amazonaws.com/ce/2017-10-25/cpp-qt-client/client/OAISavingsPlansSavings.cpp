/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlansSavings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlansSavings::OAISavingsPlansSavings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlansSavings::OAISavingsPlansSavings() {
    this->initializeModel();
}

OAISavingsPlansSavings::~OAISavingsPlansSavings() {}

void OAISavingsPlansSavings::initializeModel() {

    m_net_savings_isSet = false;
    m_net_savings_isValid = false;

    m_on_demand_cost_equivalent_isSet = false;
    m_on_demand_cost_equivalent_isValid = false;
}

void OAISavingsPlansSavings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavingsPlansSavings::fromJsonObject(QJsonObject json) {

    m_net_savings_isValid = ::OpenAPI::fromJsonValue(m_net_savings, json[QString("NetSavings")]);
    m_net_savings_isSet = !json[QString("NetSavings")].isNull() && m_net_savings_isValid;

    m_on_demand_cost_equivalent_isValid = ::OpenAPI::fromJsonValue(m_on_demand_cost_equivalent, json[QString("OnDemandCostEquivalent")]);
    m_on_demand_cost_equivalent_isSet = !json[QString("OnDemandCostEquivalent")].isNull() && m_on_demand_cost_equivalent_isValid;
}

QString OAISavingsPlansSavings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavingsPlansSavings::asJsonObject() const {
    QJsonObject obj;
    if (m_net_savings_isSet) {
        obj.insert(QString("NetSavings"), ::OpenAPI::toJsonValue(m_net_savings));
    }
    if (m_on_demand_cost_equivalent_isSet) {
        obj.insert(QString("OnDemandCostEquivalent"), ::OpenAPI::toJsonValue(m_on_demand_cost_equivalent));
    }
    return obj;
}

QString OAISavingsPlansSavings::getNetSavings() const {
    return m_net_savings;
}
void OAISavingsPlansSavings::setNetSavings(const QString &net_savings) {
    m_net_savings = net_savings;
    m_net_savings_isSet = true;
}

bool OAISavingsPlansSavings::is_net_savings_Set() const{
    return m_net_savings_isSet;
}

bool OAISavingsPlansSavings::is_net_savings_Valid() const{
    return m_net_savings_isValid;
}

QString OAISavingsPlansSavings::getOnDemandCostEquivalent() const {
    return m_on_demand_cost_equivalent;
}
void OAISavingsPlansSavings::setOnDemandCostEquivalent(const QString &on_demand_cost_equivalent) {
    m_on_demand_cost_equivalent = on_demand_cost_equivalent;
    m_on_demand_cost_equivalent_isSet = true;
}

bool OAISavingsPlansSavings::is_on_demand_cost_equivalent_Set() const{
    return m_on_demand_cost_equivalent_isSet;
}

bool OAISavingsPlansSavings::is_on_demand_cost_equivalent_Valid() const{
    return m_on_demand_cost_equivalent_isValid;
}

bool OAISavingsPlansSavings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_net_savings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_demand_cost_equivalent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavingsPlansSavings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
