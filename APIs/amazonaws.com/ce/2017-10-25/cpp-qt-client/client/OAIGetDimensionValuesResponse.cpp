/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDimensionValuesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDimensionValuesResponse::OAIGetDimensionValuesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDimensionValuesResponse::OAIGetDimensionValuesResponse() {
    this->initializeModel();
}

OAIGetDimensionValuesResponse::~OAIGetDimensionValuesResponse() {}

void OAIGetDimensionValuesResponse::initializeModel() {

    m_dimension_values_isSet = false;
    m_dimension_values_isValid = false;

    m_return_size_isSet = false;
    m_return_size_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetDimensionValuesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDimensionValuesResponse::fromJsonObject(QJsonObject json) {

    m_dimension_values_isValid = ::OpenAPI::fromJsonValue(m_dimension_values, json[QString("DimensionValues")]);
    m_dimension_values_isSet = !json[QString("DimensionValues")].isNull() && m_dimension_values_isValid;

    m_return_size_isValid = ::OpenAPI::fromJsonValue(m_return_size, json[QString("ReturnSize")]);
    m_return_size_isSet = !json[QString("ReturnSize")].isNull() && m_return_size_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("TotalSize")]);
    m_total_size_isSet = !json[QString("TotalSize")].isNull() && m_total_size_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetDimensionValuesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDimensionValuesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_values.isSet()) {
        obj.insert(QString("DimensionValues"), ::OpenAPI::toJsonValue(m_dimension_values));
    }
    if (m_return_size_isSet) {
        obj.insert(QString("ReturnSize"), ::OpenAPI::toJsonValue(m_return_size));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("TotalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIGetDimensionValuesResponse::getDimensionValues() const {
    return m_dimension_values;
}
void OAIGetDimensionValuesResponse::setDimensionValues(const QList &dimension_values) {
    m_dimension_values = dimension_values;
    m_dimension_values_isSet = true;
}

bool OAIGetDimensionValuesResponse::is_dimension_values_Set() const{
    return m_dimension_values_isSet;
}

bool OAIGetDimensionValuesResponse::is_dimension_values_Valid() const{
    return m_dimension_values_isValid;
}

qint32 OAIGetDimensionValuesResponse::getReturnSize() const {
    return m_return_size;
}
void OAIGetDimensionValuesResponse::setReturnSize(const qint32 &return_size) {
    m_return_size = return_size;
    m_return_size_isSet = true;
}

bool OAIGetDimensionValuesResponse::is_return_size_Set() const{
    return m_return_size_isSet;
}

bool OAIGetDimensionValuesResponse::is_return_size_Valid() const{
    return m_return_size_isValid;
}

qint32 OAIGetDimensionValuesResponse::getTotalSize() const {
    return m_total_size;
}
void OAIGetDimensionValuesResponse::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIGetDimensionValuesResponse::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIGetDimensionValuesResponse::is_total_size_Valid() const{
    return m_total_size_isValid;
}

QString OAIGetDimensionValuesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetDimensionValuesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetDimensionValuesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetDimensionValuesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetDimensionValuesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDimensionValuesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dimension_values_isValid && m_return_size_isValid && m_total_size_isValid && true;
}

} // namespace OpenAPI
