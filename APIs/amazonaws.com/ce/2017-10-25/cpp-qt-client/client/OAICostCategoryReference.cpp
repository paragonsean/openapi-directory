/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostCategoryReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostCategoryReference::OAICostCategoryReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostCategoryReference::OAICostCategoryReference() {
    this->initializeModel();
}

OAICostCategoryReference::~OAICostCategoryReference() {}

void OAICostCategoryReference::initializeModel() {

    m_cost_category_arn_isSet = false;
    m_cost_category_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_effective_start_isSet = false;
    m_effective_start_isValid = false;

    m_effective_end_isSet = false;
    m_effective_end_isValid = false;

    m_number_of_rules_isSet = false;
    m_number_of_rules_isValid = false;

    m_processing_status_isSet = false;
    m_processing_status_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;
}

void OAICostCategoryReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostCategoryReference::fromJsonObject(QJsonObject json) {

    m_cost_category_arn_isValid = ::OpenAPI::fromJsonValue(m_cost_category_arn, json[QString("CostCategoryArn")]);
    m_cost_category_arn_isSet = !json[QString("CostCategoryArn")].isNull() && m_cost_category_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_effective_start_isValid = ::OpenAPI::fromJsonValue(m_effective_start, json[QString("EffectiveStart")]);
    m_effective_start_isSet = !json[QString("EffectiveStart")].isNull() && m_effective_start_isValid;

    m_effective_end_isValid = ::OpenAPI::fromJsonValue(m_effective_end, json[QString("EffectiveEnd")]);
    m_effective_end_isSet = !json[QString("EffectiveEnd")].isNull() && m_effective_end_isValid;

    m_number_of_rules_isValid = ::OpenAPI::fromJsonValue(m_number_of_rules, json[QString("NumberOfRules")]);
    m_number_of_rules_isSet = !json[QString("NumberOfRules")].isNull() && m_number_of_rules_isValid;

    m_processing_status_isValid = ::OpenAPI::fromJsonValue(m_processing_status, json[QString("ProcessingStatus")]);
    m_processing_status_isSet = !json[QString("ProcessingStatus")].isNull() && m_processing_status_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;
}

QString OAICostCategoryReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostCategoryReference::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_category_arn_isSet) {
        obj.insert(QString("CostCategoryArn"), ::OpenAPI::toJsonValue(m_cost_category_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_effective_start_isSet) {
        obj.insert(QString("EffectiveStart"), ::OpenAPI::toJsonValue(m_effective_start));
    }
    if (m_effective_end_isSet) {
        obj.insert(QString("EffectiveEnd"), ::OpenAPI::toJsonValue(m_effective_end));
    }
    if (m_number_of_rules_isSet) {
        obj.insert(QString("NumberOfRules"), ::OpenAPI::toJsonValue(m_number_of_rules));
    }
    if (m_processing_status.isSet()) {
        obj.insert(QString("ProcessingStatus"), ::OpenAPI::toJsonValue(m_processing_status));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    return obj;
}

QString OAICostCategoryReference::getCostCategoryArn() const {
    return m_cost_category_arn;
}
void OAICostCategoryReference::setCostCategoryArn(const QString &cost_category_arn) {
    m_cost_category_arn = cost_category_arn;
    m_cost_category_arn_isSet = true;
}

bool OAICostCategoryReference::is_cost_category_arn_Set() const{
    return m_cost_category_arn_isSet;
}

bool OAICostCategoryReference::is_cost_category_arn_Valid() const{
    return m_cost_category_arn_isValid;
}

QString OAICostCategoryReference::getName() const {
    return m_name;
}
void OAICostCategoryReference::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICostCategoryReference::is_name_Set() const{
    return m_name_isSet;
}

bool OAICostCategoryReference::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICostCategoryReference::getEffectiveStart() const {
    return m_effective_start;
}
void OAICostCategoryReference::setEffectiveStart(const QString &effective_start) {
    m_effective_start = effective_start;
    m_effective_start_isSet = true;
}

bool OAICostCategoryReference::is_effective_start_Set() const{
    return m_effective_start_isSet;
}

bool OAICostCategoryReference::is_effective_start_Valid() const{
    return m_effective_start_isValid;
}

QString OAICostCategoryReference::getEffectiveEnd() const {
    return m_effective_end;
}
void OAICostCategoryReference::setEffectiveEnd(const QString &effective_end) {
    m_effective_end = effective_end;
    m_effective_end_isSet = true;
}

bool OAICostCategoryReference::is_effective_end_Set() const{
    return m_effective_end_isSet;
}

bool OAICostCategoryReference::is_effective_end_Valid() const{
    return m_effective_end_isValid;
}

qint32 OAICostCategoryReference::getNumberOfRules() const {
    return m_number_of_rules;
}
void OAICostCategoryReference::setNumberOfRules(const qint32 &number_of_rules) {
    m_number_of_rules = number_of_rules;
    m_number_of_rules_isSet = true;
}

bool OAICostCategoryReference::is_number_of_rules_Set() const{
    return m_number_of_rules_isSet;
}

bool OAICostCategoryReference::is_number_of_rules_Valid() const{
    return m_number_of_rules_isValid;
}

QList OAICostCategoryReference::getProcessingStatus() const {
    return m_processing_status;
}
void OAICostCategoryReference::setProcessingStatus(const QList &processing_status) {
    m_processing_status = processing_status;
    m_processing_status_isSet = true;
}

bool OAICostCategoryReference::is_processing_status_Set() const{
    return m_processing_status_isSet;
}

bool OAICostCategoryReference::is_processing_status_Valid() const{
    return m_processing_status_isValid;
}

QList OAICostCategoryReference::getValues() const {
    return m_values;
}
void OAICostCategoryReference::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAICostCategoryReference::is_values_Set() const{
    return m_values_isSet;
}

bool OAICostCategoryReference::is_values_Valid() const{
    return m_values_isValid;
}

QString OAICostCategoryReference::getDefaultValue() const {
    return m_default_value;
}
void OAICostCategoryReference::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAICostCategoryReference::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAICostCategoryReference::is_default_value_Valid() const{
    return m_default_value_isValid;
}

bool OAICostCategoryReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_category_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_rules_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostCategoryReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
