/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCostCategoryDefinitionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCostCategoryDefinitionsRequest::OAIListCostCategoryDefinitionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCostCategoryDefinitionsRequest::OAIListCostCategoryDefinitionsRequest() {
    this->initializeModel();
}

OAIListCostCategoryDefinitionsRequest::~OAIListCostCategoryDefinitionsRequest() {}

void OAIListCostCategoryDefinitionsRequest::initializeModel() {

    m_effective_on_isSet = false;
    m_effective_on_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListCostCategoryDefinitionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCostCategoryDefinitionsRequest::fromJsonObject(QJsonObject json) {

    m_effective_on_isValid = ::OpenAPI::fromJsonValue(m_effective_on, json[QString("EffectiveOn")]);
    m_effective_on_isSet = !json[QString("EffectiveOn")].isNull() && m_effective_on_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListCostCategoryDefinitionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCostCategoryDefinitionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_effective_on_isSet) {
        obj.insert(QString("EffectiveOn"), ::OpenAPI::toJsonValue(m_effective_on));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListCostCategoryDefinitionsRequest::getEffectiveOn() const {
    return m_effective_on;
}
void OAIListCostCategoryDefinitionsRequest::setEffectiveOn(const QString &effective_on) {
    m_effective_on = effective_on;
    m_effective_on_isSet = true;
}

bool OAIListCostCategoryDefinitionsRequest::is_effective_on_Set() const{
    return m_effective_on_isSet;
}

bool OAIListCostCategoryDefinitionsRequest::is_effective_on_Valid() const{
    return m_effective_on_isValid;
}

QString OAIListCostCategoryDefinitionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListCostCategoryDefinitionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListCostCategoryDefinitionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListCostCategoryDefinitionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListCostCategoryDefinitionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListCostCategoryDefinitionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListCostCategoryDefinitionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListCostCategoryDefinitionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListCostCategoryDefinitionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effective_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCostCategoryDefinitionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
