/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateCostCategoryDefinitionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateCostCategoryDefinitionRequest::OAIUpdateCostCategoryDefinitionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateCostCategoryDefinitionRequest::OAIUpdateCostCategoryDefinitionRequest() {
    this->initializeModel();
}

OAIUpdateCostCategoryDefinitionRequest::~OAIUpdateCostCategoryDefinitionRequest() {}

void OAIUpdateCostCategoryDefinitionRequest::initializeModel() {

    m_cost_category_arn_isSet = false;
    m_cost_category_arn_isValid = false;

    m_effective_start_isSet = false;
    m_effective_start_isValid = false;

    m_rule_version_isSet = false;
    m_rule_version_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_split_charge_rules_isSet = false;
    m_split_charge_rules_isValid = false;
}

void OAIUpdateCostCategoryDefinitionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateCostCategoryDefinitionRequest::fromJsonObject(QJsonObject json) {

    m_cost_category_arn_isValid = ::OpenAPI::fromJsonValue(m_cost_category_arn, json[QString("CostCategoryArn")]);
    m_cost_category_arn_isSet = !json[QString("CostCategoryArn")].isNull() && m_cost_category_arn_isValid;

    m_effective_start_isValid = ::OpenAPI::fromJsonValue(m_effective_start, json[QString("EffectiveStart")]);
    m_effective_start_isSet = !json[QString("EffectiveStart")].isNull() && m_effective_start_isValid;

    m_rule_version_isValid = ::OpenAPI::fromJsonValue(m_rule_version, json[QString("RuleVersion")]);
    m_rule_version_isSet = !json[QString("RuleVersion")].isNull() && m_rule_version_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("Rules")]);
    m_rules_isSet = !json[QString("Rules")].isNull() && m_rules_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;

    m_split_charge_rules_isValid = ::OpenAPI::fromJsonValue(m_split_charge_rules, json[QString("SplitChargeRules")]);
    m_split_charge_rules_isSet = !json[QString("SplitChargeRules")].isNull() && m_split_charge_rules_isValid;
}

QString OAIUpdateCostCategoryDefinitionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateCostCategoryDefinitionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_category_arn_isSet) {
        obj.insert(QString("CostCategoryArn"), ::OpenAPI::toJsonValue(m_cost_category_arn));
    }
    if (m_effective_start_isSet) {
        obj.insert(QString("EffectiveStart"), ::OpenAPI::toJsonValue(m_effective_start));
    }
    if (m_rule_version.isSet()) {
        obj.insert(QString("RuleVersion"), ::OpenAPI::toJsonValue(m_rule_version));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("Rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_split_charge_rules.isSet()) {
        obj.insert(QString("SplitChargeRules"), ::OpenAPI::toJsonValue(m_split_charge_rules));
    }
    return obj;
}

QString OAIUpdateCostCategoryDefinitionRequest::getCostCategoryArn() const {
    return m_cost_category_arn;
}
void OAIUpdateCostCategoryDefinitionRequest::setCostCategoryArn(const QString &cost_category_arn) {
    m_cost_category_arn = cost_category_arn;
    m_cost_category_arn_isSet = true;
}

bool OAIUpdateCostCategoryDefinitionRequest::is_cost_category_arn_Set() const{
    return m_cost_category_arn_isSet;
}

bool OAIUpdateCostCategoryDefinitionRequest::is_cost_category_arn_Valid() const{
    return m_cost_category_arn_isValid;
}

QString OAIUpdateCostCategoryDefinitionRequest::getEffectiveStart() const {
    return m_effective_start;
}
void OAIUpdateCostCategoryDefinitionRequest::setEffectiveStart(const QString &effective_start) {
    m_effective_start = effective_start;
    m_effective_start_isSet = true;
}

bool OAIUpdateCostCategoryDefinitionRequest::is_effective_start_Set() const{
    return m_effective_start_isSet;
}

bool OAIUpdateCostCategoryDefinitionRequest::is_effective_start_Valid() const{
    return m_effective_start_isValid;
}

OAICostCategoryRuleVersion OAIUpdateCostCategoryDefinitionRequest::getRuleVersion() const {
    return m_rule_version;
}
void OAIUpdateCostCategoryDefinitionRequest::setRuleVersion(const OAICostCategoryRuleVersion &rule_version) {
    m_rule_version = rule_version;
    m_rule_version_isSet = true;
}

bool OAIUpdateCostCategoryDefinitionRequest::is_rule_version_Set() const{
    return m_rule_version_isSet;
}

bool OAIUpdateCostCategoryDefinitionRequest::is_rule_version_Valid() const{
    return m_rule_version_isValid;
}

QList OAIUpdateCostCategoryDefinitionRequest::getRules() const {
    return m_rules;
}
void OAIUpdateCostCategoryDefinitionRequest::setRules(const QList &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIUpdateCostCategoryDefinitionRequest::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIUpdateCostCategoryDefinitionRequest::is_rules_Valid() const{
    return m_rules_isValid;
}

QString OAIUpdateCostCategoryDefinitionRequest::getDefaultValue() const {
    return m_default_value;
}
void OAIUpdateCostCategoryDefinitionRequest::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIUpdateCostCategoryDefinitionRequest::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIUpdateCostCategoryDefinitionRequest::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QList OAIUpdateCostCategoryDefinitionRequest::getSplitChargeRules() const {
    return m_split_charge_rules;
}
void OAIUpdateCostCategoryDefinitionRequest::setSplitChargeRules(const QList &split_charge_rules) {
    m_split_charge_rules = split_charge_rules;
    m_split_charge_rules_isSet = true;
}

bool OAIUpdateCostCategoryDefinitionRequest::is_split_charge_rules_Set() const{
    return m_split_charge_rules_isSet;
}

bool OAIUpdateCostCategoryDefinitionRequest::is_split_charge_rules_Valid() const{
    return m_split_charge_rules_isValid;
}

bool OAIUpdateCostCategoryDefinitionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_category_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_charge_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateCostCategoryDefinitionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cost_category_arn_isValid && m_rule_version_isValid && m_rules_isValid && true;
}

} // namespace OpenAPI
