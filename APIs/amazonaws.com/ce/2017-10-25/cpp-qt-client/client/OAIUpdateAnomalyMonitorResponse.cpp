/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAnomalyMonitorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAnomalyMonitorResponse::OAIUpdateAnomalyMonitorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAnomalyMonitorResponse::OAIUpdateAnomalyMonitorResponse() {
    this->initializeModel();
}

OAIUpdateAnomalyMonitorResponse::~OAIUpdateAnomalyMonitorResponse() {}

void OAIUpdateAnomalyMonitorResponse::initializeModel() {

    m_monitor_arn_isSet = false;
    m_monitor_arn_isValid = false;
}

void OAIUpdateAnomalyMonitorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAnomalyMonitorResponse::fromJsonObject(QJsonObject json) {

    m_monitor_arn_isValid = ::OpenAPI::fromJsonValue(m_monitor_arn, json[QString("MonitorArn")]);
    m_monitor_arn_isSet = !json[QString("MonitorArn")].isNull() && m_monitor_arn_isValid;
}

QString OAIUpdateAnomalyMonitorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAnomalyMonitorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_monitor_arn_isSet) {
        obj.insert(QString("MonitorArn"), ::OpenAPI::toJsonValue(m_monitor_arn));
    }
    return obj;
}

QString OAIUpdateAnomalyMonitorResponse::getMonitorArn() const {
    return m_monitor_arn;
}
void OAIUpdateAnomalyMonitorResponse::setMonitorArn(const QString &monitor_arn) {
    m_monitor_arn = monitor_arn;
    m_monitor_arn_isSet = true;
}

bool OAIUpdateAnomalyMonitorResponse::is_monitor_arn_Set() const{
    return m_monitor_arn_isSet;
}

bool OAIUpdateAnomalyMonitorResponse::is_monitor_arn_Valid() const{
    return m_monitor_arn_isValid;
}

bool OAIUpdateAnomalyMonitorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_monitor_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAnomalyMonitorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_monitor_arn_isValid && true;
}

} // namespace OpenAPI
