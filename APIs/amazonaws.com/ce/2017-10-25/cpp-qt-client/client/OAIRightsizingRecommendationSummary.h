/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRightsizingRecommendationSummary.h
 *
 * The summary of rightsizing recommendations 
 */

#ifndef OAIRightsizingRecommendationSummary_H
#define OAIRightsizingRecommendationSummary_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRightsizingRecommendationSummary : public OAIObject {
public:
    OAIRightsizingRecommendationSummary();
    OAIRightsizingRecommendationSummary(QString json);
    ~OAIRightsizingRecommendationSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTotalRecommendationCount() const;
    void setTotalRecommendationCount(const QString &total_recommendation_count);
    bool is_total_recommendation_count_Set() const;
    bool is_total_recommendation_count_Valid() const;

    QString getEstimatedTotalMonthlySavingsAmount() const;
    void setEstimatedTotalMonthlySavingsAmount(const QString &estimated_total_monthly_savings_amount);
    bool is_estimated_total_monthly_savings_amount_Set() const;
    bool is_estimated_total_monthly_savings_amount_Valid() const;

    QString getSavingsCurrencyCode() const;
    void setSavingsCurrencyCode(const QString &savings_currency_code);
    bool is_savings_currency_code_Set() const;
    bool is_savings_currency_code_Valid() const;

    QString getSavingsPercentage() const;
    void setSavingsPercentage(const QString &savings_percentage);
    bool is_savings_percentage_Set() const;
    bool is_savings_percentage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_total_recommendation_count;
    bool m_total_recommendation_count_isSet;
    bool m_total_recommendation_count_isValid;

    QString m_estimated_total_monthly_savings_amount;
    bool m_estimated_total_monthly_savings_amount_isSet;
    bool m_estimated_total_monthly_savings_amount_isValid;

    QString m_savings_currency_code;
    bool m_savings_currency_code_isSet;
    bool m_savings_currency_code_isValid;

    QString m_savings_percentage;
    bool m_savings_percentage_isSet;
    bool m_savings_percentage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRightsizingRecommendationSummary)

#endif // OAIRightsizingRecommendationSummary_H
