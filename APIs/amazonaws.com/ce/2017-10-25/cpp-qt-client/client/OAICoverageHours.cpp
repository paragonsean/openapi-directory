/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoverageHours.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoverageHours::OAICoverageHours(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoverageHours::OAICoverageHours() {
    this->initializeModel();
}

OAICoverageHours::~OAICoverageHours() {}

void OAICoverageHours::initializeModel() {

    m_on_demand_hours_isSet = false;
    m_on_demand_hours_isValid = false;

    m_reserved_hours_isSet = false;
    m_reserved_hours_isValid = false;

    m_total_running_hours_isSet = false;
    m_total_running_hours_isValid = false;

    m_coverage_hours_percentage_isSet = false;
    m_coverage_hours_percentage_isValid = false;
}

void OAICoverageHours::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoverageHours::fromJsonObject(QJsonObject json) {

    m_on_demand_hours_isValid = ::OpenAPI::fromJsonValue(m_on_demand_hours, json[QString("OnDemandHours")]);
    m_on_demand_hours_isSet = !json[QString("OnDemandHours")].isNull() && m_on_demand_hours_isValid;

    m_reserved_hours_isValid = ::OpenAPI::fromJsonValue(m_reserved_hours, json[QString("ReservedHours")]);
    m_reserved_hours_isSet = !json[QString("ReservedHours")].isNull() && m_reserved_hours_isValid;

    m_total_running_hours_isValid = ::OpenAPI::fromJsonValue(m_total_running_hours, json[QString("TotalRunningHours")]);
    m_total_running_hours_isSet = !json[QString("TotalRunningHours")].isNull() && m_total_running_hours_isValid;

    m_coverage_hours_percentage_isValid = ::OpenAPI::fromJsonValue(m_coverage_hours_percentage, json[QString("CoverageHoursPercentage")]);
    m_coverage_hours_percentage_isSet = !json[QString("CoverageHoursPercentage")].isNull() && m_coverage_hours_percentage_isValid;
}

QString OAICoverageHours::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoverageHours::asJsonObject() const {
    QJsonObject obj;
    if (m_on_demand_hours_isSet) {
        obj.insert(QString("OnDemandHours"), ::OpenAPI::toJsonValue(m_on_demand_hours));
    }
    if (m_reserved_hours_isSet) {
        obj.insert(QString("ReservedHours"), ::OpenAPI::toJsonValue(m_reserved_hours));
    }
    if (m_total_running_hours_isSet) {
        obj.insert(QString("TotalRunningHours"), ::OpenAPI::toJsonValue(m_total_running_hours));
    }
    if (m_coverage_hours_percentage_isSet) {
        obj.insert(QString("CoverageHoursPercentage"), ::OpenAPI::toJsonValue(m_coverage_hours_percentage));
    }
    return obj;
}

QString OAICoverageHours::getOnDemandHours() const {
    return m_on_demand_hours;
}
void OAICoverageHours::setOnDemandHours(const QString &on_demand_hours) {
    m_on_demand_hours = on_demand_hours;
    m_on_demand_hours_isSet = true;
}

bool OAICoverageHours::is_on_demand_hours_Set() const{
    return m_on_demand_hours_isSet;
}

bool OAICoverageHours::is_on_demand_hours_Valid() const{
    return m_on_demand_hours_isValid;
}

QString OAICoverageHours::getReservedHours() const {
    return m_reserved_hours;
}
void OAICoverageHours::setReservedHours(const QString &reserved_hours) {
    m_reserved_hours = reserved_hours;
    m_reserved_hours_isSet = true;
}

bool OAICoverageHours::is_reserved_hours_Set() const{
    return m_reserved_hours_isSet;
}

bool OAICoverageHours::is_reserved_hours_Valid() const{
    return m_reserved_hours_isValid;
}

QString OAICoverageHours::getTotalRunningHours() const {
    return m_total_running_hours;
}
void OAICoverageHours::setTotalRunningHours(const QString &total_running_hours) {
    m_total_running_hours = total_running_hours;
    m_total_running_hours_isSet = true;
}

bool OAICoverageHours::is_total_running_hours_Set() const{
    return m_total_running_hours_isSet;
}

bool OAICoverageHours::is_total_running_hours_Valid() const{
    return m_total_running_hours_isValid;
}

QString OAICoverageHours::getCoverageHoursPercentage() const {
    return m_coverage_hours_percentage;
}
void OAICoverageHours::setCoverageHoursPercentage(const QString &coverage_hours_percentage) {
    m_coverage_hours_percentage = coverage_hours_percentage;
    m_coverage_hours_percentage_isSet = true;
}

bool OAICoverageHours::is_coverage_hours_percentage_Set() const{
    return m_coverage_hours_percentage_isSet;
}

bool OAICoverageHours::is_coverage_hours_percentage_Valid() const{
    return m_coverage_hours_percentage_isValid;
}

bool OAICoverageHours::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_on_demand_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_running_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_hours_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoverageHours::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
