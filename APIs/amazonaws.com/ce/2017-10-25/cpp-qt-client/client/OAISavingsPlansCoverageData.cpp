/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlansCoverageData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlansCoverageData::OAISavingsPlansCoverageData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlansCoverageData::OAISavingsPlansCoverageData() {
    this->initializeModel();
}

OAISavingsPlansCoverageData::~OAISavingsPlansCoverageData() {}

void OAISavingsPlansCoverageData::initializeModel() {

    m_spend_covered_by_savings_plans_isSet = false;
    m_spend_covered_by_savings_plans_isValid = false;

    m_on_demand_cost_isSet = false;
    m_on_demand_cost_isValid = false;

    m_total_cost_isSet = false;
    m_total_cost_isValid = false;

    m_coverage_percentage_isSet = false;
    m_coverage_percentage_isValid = false;
}

void OAISavingsPlansCoverageData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavingsPlansCoverageData::fromJsonObject(QJsonObject json) {

    m_spend_covered_by_savings_plans_isValid = ::OpenAPI::fromJsonValue(m_spend_covered_by_savings_plans, json[QString("SpendCoveredBySavingsPlans")]);
    m_spend_covered_by_savings_plans_isSet = !json[QString("SpendCoveredBySavingsPlans")].isNull() && m_spend_covered_by_savings_plans_isValid;

    m_on_demand_cost_isValid = ::OpenAPI::fromJsonValue(m_on_demand_cost, json[QString("OnDemandCost")]);
    m_on_demand_cost_isSet = !json[QString("OnDemandCost")].isNull() && m_on_demand_cost_isValid;

    m_total_cost_isValid = ::OpenAPI::fromJsonValue(m_total_cost, json[QString("TotalCost")]);
    m_total_cost_isSet = !json[QString("TotalCost")].isNull() && m_total_cost_isValid;

    m_coverage_percentage_isValid = ::OpenAPI::fromJsonValue(m_coverage_percentage, json[QString("CoveragePercentage")]);
    m_coverage_percentage_isSet = !json[QString("CoveragePercentage")].isNull() && m_coverage_percentage_isValid;
}

QString OAISavingsPlansCoverageData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavingsPlansCoverageData::asJsonObject() const {
    QJsonObject obj;
    if (m_spend_covered_by_savings_plans_isSet) {
        obj.insert(QString("SpendCoveredBySavingsPlans"), ::OpenAPI::toJsonValue(m_spend_covered_by_savings_plans));
    }
    if (m_on_demand_cost_isSet) {
        obj.insert(QString("OnDemandCost"), ::OpenAPI::toJsonValue(m_on_demand_cost));
    }
    if (m_total_cost_isSet) {
        obj.insert(QString("TotalCost"), ::OpenAPI::toJsonValue(m_total_cost));
    }
    if (m_coverage_percentage_isSet) {
        obj.insert(QString("CoveragePercentage"), ::OpenAPI::toJsonValue(m_coverage_percentage));
    }
    return obj;
}

QString OAISavingsPlansCoverageData::getSpendCoveredBySavingsPlans() const {
    return m_spend_covered_by_savings_plans;
}
void OAISavingsPlansCoverageData::setSpendCoveredBySavingsPlans(const QString &spend_covered_by_savings_plans) {
    m_spend_covered_by_savings_plans = spend_covered_by_savings_plans;
    m_spend_covered_by_savings_plans_isSet = true;
}

bool OAISavingsPlansCoverageData::is_spend_covered_by_savings_plans_Set() const{
    return m_spend_covered_by_savings_plans_isSet;
}

bool OAISavingsPlansCoverageData::is_spend_covered_by_savings_plans_Valid() const{
    return m_spend_covered_by_savings_plans_isValid;
}

QString OAISavingsPlansCoverageData::getOnDemandCost() const {
    return m_on_demand_cost;
}
void OAISavingsPlansCoverageData::setOnDemandCost(const QString &on_demand_cost) {
    m_on_demand_cost = on_demand_cost;
    m_on_demand_cost_isSet = true;
}

bool OAISavingsPlansCoverageData::is_on_demand_cost_Set() const{
    return m_on_demand_cost_isSet;
}

bool OAISavingsPlansCoverageData::is_on_demand_cost_Valid() const{
    return m_on_demand_cost_isValid;
}

QString OAISavingsPlansCoverageData::getTotalCost() const {
    return m_total_cost;
}
void OAISavingsPlansCoverageData::setTotalCost(const QString &total_cost) {
    m_total_cost = total_cost;
    m_total_cost_isSet = true;
}

bool OAISavingsPlansCoverageData::is_total_cost_Set() const{
    return m_total_cost_isSet;
}

bool OAISavingsPlansCoverageData::is_total_cost_Valid() const{
    return m_total_cost_isValid;
}

QString OAISavingsPlansCoverageData::getCoveragePercentage() const {
    return m_coverage_percentage;
}
void OAISavingsPlansCoverageData::setCoveragePercentage(const QString &coverage_percentage) {
    m_coverage_percentage = coverage_percentage;
    m_coverage_percentage_isSet = true;
}

bool OAISavingsPlansCoverageData::is_coverage_percentage_Set() const{
    return m_coverage_percentage_isSet;
}

bool OAISavingsPlansCoverageData::is_coverage_percentage_Valid() const{
    return m_coverage_percentage_isValid;
}

bool OAISavingsPlansCoverageData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_spend_covered_by_savings_plans_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_demand_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavingsPlansCoverageData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
