/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRightsizingRecommendationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRightsizingRecommendationMetadata::OAIRightsizingRecommendationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRightsizingRecommendationMetadata::OAIRightsizingRecommendationMetadata() {
    this->initializeModel();
}

OAIRightsizingRecommendationMetadata::~OAIRightsizingRecommendationMetadata() {}

void OAIRightsizingRecommendationMetadata::initializeModel() {

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_generation_timestamp_isSet = false;
    m_generation_timestamp_isValid = false;

    m_lookback_period_in_days_isSet = false;
    m_lookback_period_in_days_isValid = false;

    m_additional_metadata_isSet = false;
    m_additional_metadata_isValid = false;
}

void OAIRightsizingRecommendationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRightsizingRecommendationMetadata::fromJsonObject(QJsonObject json) {

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("RecommendationId")]);
    m_recommendation_id_isSet = !json[QString("RecommendationId")].isNull() && m_recommendation_id_isValid;

    m_generation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_generation_timestamp, json[QString("GenerationTimestamp")]);
    m_generation_timestamp_isSet = !json[QString("GenerationTimestamp")].isNull() && m_generation_timestamp_isValid;

    m_lookback_period_in_days_isValid = ::OpenAPI::fromJsonValue(m_lookback_period_in_days, json[QString("LookbackPeriodInDays")]);
    m_lookback_period_in_days_isSet = !json[QString("LookbackPeriodInDays")].isNull() && m_lookback_period_in_days_isValid;

    m_additional_metadata_isValid = ::OpenAPI::fromJsonValue(m_additional_metadata, json[QString("AdditionalMetadata")]);
    m_additional_metadata_isSet = !json[QString("AdditionalMetadata")].isNull() && m_additional_metadata_isValid;
}

QString OAIRightsizingRecommendationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRightsizingRecommendationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_recommendation_id_isSet) {
        obj.insert(QString("RecommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_generation_timestamp_isSet) {
        obj.insert(QString("GenerationTimestamp"), ::OpenAPI::toJsonValue(m_generation_timestamp));
    }
    if (m_lookback_period_in_days.isSet()) {
        obj.insert(QString("LookbackPeriodInDays"), ::OpenAPI::toJsonValue(m_lookback_period_in_days));
    }
    if (m_additional_metadata_isSet) {
        obj.insert(QString("AdditionalMetadata"), ::OpenAPI::toJsonValue(m_additional_metadata));
    }
    return obj;
}

QString OAIRightsizingRecommendationMetadata::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIRightsizingRecommendationMetadata::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIRightsizingRecommendationMetadata::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIRightsizingRecommendationMetadata::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

QString OAIRightsizingRecommendationMetadata::getGenerationTimestamp() const {
    return m_generation_timestamp;
}
void OAIRightsizingRecommendationMetadata::setGenerationTimestamp(const QString &generation_timestamp) {
    m_generation_timestamp = generation_timestamp;
    m_generation_timestamp_isSet = true;
}

bool OAIRightsizingRecommendationMetadata::is_generation_timestamp_Set() const{
    return m_generation_timestamp_isSet;
}

bool OAIRightsizingRecommendationMetadata::is_generation_timestamp_Valid() const{
    return m_generation_timestamp_isValid;
}

OAILookbackPeriodInDays OAIRightsizingRecommendationMetadata::getLookbackPeriodInDays() const {
    return m_lookback_period_in_days;
}
void OAIRightsizingRecommendationMetadata::setLookbackPeriodInDays(const OAILookbackPeriodInDays &lookback_period_in_days) {
    m_lookback_period_in_days = lookback_period_in_days;
    m_lookback_period_in_days_isSet = true;
}

bool OAIRightsizingRecommendationMetadata::is_lookback_period_in_days_Set() const{
    return m_lookback_period_in_days_isSet;
}

bool OAIRightsizingRecommendationMetadata::is_lookback_period_in_days_Valid() const{
    return m_lookback_period_in_days_isValid;
}

QString OAIRightsizingRecommendationMetadata::getAdditionalMetadata() const {
    return m_additional_metadata;
}
void OAIRightsizingRecommendationMetadata::setAdditionalMetadata(const QString &additional_metadata) {
    m_additional_metadata = additional_metadata;
    m_additional_metadata_isSet = true;
}

bool OAIRightsizingRecommendationMetadata::is_additional_metadata_Set() const{
    return m_additional_metadata_isSet;
}

bool OAIRightsizingRecommendationMetadata::is_additional_metadata_Valid() const{
    return m_additional_metadata_isValid;
}

bool OAIRightsizingRecommendationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookback_period_in_days.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRightsizingRecommendationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
