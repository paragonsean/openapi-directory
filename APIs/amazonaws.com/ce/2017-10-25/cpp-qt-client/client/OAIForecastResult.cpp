/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecastResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecastResult::OAIForecastResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecastResult::OAIForecastResult() {
    this->initializeModel();
}

OAIForecastResult::~OAIForecastResult() {}

void OAIForecastResult::initializeModel() {

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_mean_value_isSet = false;
    m_mean_value_isValid = false;

    m_prediction_interval_lower_bound_isSet = false;
    m_prediction_interval_lower_bound_isValid = false;

    m_prediction_interval_upper_bound_isSet = false;
    m_prediction_interval_upper_bound_isValid = false;
}

void OAIForecastResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecastResult::fromJsonObject(QJsonObject json) {

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("TimePeriod")]);
    m_time_period_isSet = !json[QString("TimePeriod")].isNull() && m_time_period_isValid;

    m_mean_value_isValid = ::OpenAPI::fromJsonValue(m_mean_value, json[QString("MeanValue")]);
    m_mean_value_isSet = !json[QString("MeanValue")].isNull() && m_mean_value_isValid;

    m_prediction_interval_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_prediction_interval_lower_bound, json[QString("PredictionIntervalLowerBound")]);
    m_prediction_interval_lower_bound_isSet = !json[QString("PredictionIntervalLowerBound")].isNull() && m_prediction_interval_lower_bound_isValid;

    m_prediction_interval_upper_bound_isValid = ::OpenAPI::fromJsonValue(m_prediction_interval_upper_bound, json[QString("PredictionIntervalUpperBound")]);
    m_prediction_interval_upper_bound_isSet = !json[QString("PredictionIntervalUpperBound")].isNull() && m_prediction_interval_upper_bound_isValid;
}

QString OAIForecastResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecastResult::asJsonObject() const {
    QJsonObject obj;
    if (m_time_period.isSet()) {
        obj.insert(QString("TimePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_mean_value_isSet) {
        obj.insert(QString("MeanValue"), ::OpenAPI::toJsonValue(m_mean_value));
    }
    if (m_prediction_interval_lower_bound_isSet) {
        obj.insert(QString("PredictionIntervalLowerBound"), ::OpenAPI::toJsonValue(m_prediction_interval_lower_bound));
    }
    if (m_prediction_interval_upper_bound_isSet) {
        obj.insert(QString("PredictionIntervalUpperBound"), ::OpenAPI::toJsonValue(m_prediction_interval_upper_bound));
    }
    return obj;
}

OAIForecastResult_TimePeriod OAIForecastResult::getTimePeriod() const {
    return m_time_period;
}
void OAIForecastResult::setTimePeriod(const OAIForecastResult_TimePeriod &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIForecastResult::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIForecastResult::is_time_period_Valid() const{
    return m_time_period_isValid;
}

QString OAIForecastResult::getMeanValue() const {
    return m_mean_value;
}
void OAIForecastResult::setMeanValue(const QString &mean_value) {
    m_mean_value = mean_value;
    m_mean_value_isSet = true;
}

bool OAIForecastResult::is_mean_value_Set() const{
    return m_mean_value_isSet;
}

bool OAIForecastResult::is_mean_value_Valid() const{
    return m_mean_value_isValid;
}

QString OAIForecastResult::getPredictionIntervalLowerBound() const {
    return m_prediction_interval_lower_bound;
}
void OAIForecastResult::setPredictionIntervalLowerBound(const QString &prediction_interval_lower_bound) {
    m_prediction_interval_lower_bound = prediction_interval_lower_bound;
    m_prediction_interval_lower_bound_isSet = true;
}

bool OAIForecastResult::is_prediction_interval_lower_bound_Set() const{
    return m_prediction_interval_lower_bound_isSet;
}

bool OAIForecastResult::is_prediction_interval_lower_bound_Valid() const{
    return m_prediction_interval_lower_bound_isValid;
}

QString OAIForecastResult::getPredictionIntervalUpperBound() const {
    return m_prediction_interval_upper_bound;
}
void OAIForecastResult::setPredictionIntervalUpperBound(const QString &prediction_interval_upper_bound) {
    m_prediction_interval_upper_bound = prediction_interval_upper_bound;
    m_prediction_interval_upper_bound_isSet = true;
}

bool OAIForecastResult::is_prediction_interval_upper_bound_Set() const{
    return m_prediction_interval_upper_bound_isSet;
}

bool OAIForecastResult::is_prediction_interval_upper_bound_Valid() const{
    return m_prediction_interval_upper_bound_isValid;
}

bool OAIForecastResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_interval_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_interval_upper_bound_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecastResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
