/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservationPurchaseRecommendation_RecommendationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservationPurchaseRecommendation_RecommendationSummary::OAIReservationPurchaseRecommendation_RecommendationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservationPurchaseRecommendation_RecommendationSummary::OAIReservationPurchaseRecommendation_RecommendationSummary() {
    this->initializeModel();
}

OAIReservationPurchaseRecommendation_RecommendationSummary::~OAIReservationPurchaseRecommendation_RecommendationSummary() {}

void OAIReservationPurchaseRecommendation_RecommendationSummary::initializeModel() {

    m_total_estimated_monthly_savings_amount_isSet = false;
    m_total_estimated_monthly_savings_amount_isValid = false;

    m_total_estimated_monthly_savings_percentage_isSet = false;
    m_total_estimated_monthly_savings_percentage_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;
}

void OAIReservationPurchaseRecommendation_RecommendationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservationPurchaseRecommendation_RecommendationSummary::fromJsonObject(QJsonObject json) {

    m_total_estimated_monthly_savings_amount_isValid = ::OpenAPI::fromJsonValue(m_total_estimated_monthly_savings_amount, json[QString("TotalEstimatedMonthlySavingsAmount")]);
    m_total_estimated_monthly_savings_amount_isSet = !json[QString("TotalEstimatedMonthlySavingsAmount")].isNull() && m_total_estimated_monthly_savings_amount_isValid;

    m_total_estimated_monthly_savings_percentage_isValid = ::OpenAPI::fromJsonValue(m_total_estimated_monthly_savings_percentage, json[QString("TotalEstimatedMonthlySavingsPercentage")]);
    m_total_estimated_monthly_savings_percentage_isSet = !json[QString("TotalEstimatedMonthlySavingsPercentage")].isNull() && m_total_estimated_monthly_savings_percentage_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;
}

QString OAIReservationPurchaseRecommendation_RecommendationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservationPurchaseRecommendation_RecommendationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_total_estimated_monthly_savings_amount_isSet) {
        obj.insert(QString("TotalEstimatedMonthlySavingsAmount"), ::OpenAPI::toJsonValue(m_total_estimated_monthly_savings_amount));
    }
    if (m_total_estimated_monthly_savings_percentage_isSet) {
        obj.insert(QString("TotalEstimatedMonthlySavingsPercentage"), ::OpenAPI::toJsonValue(m_total_estimated_monthly_savings_percentage));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    return obj;
}

QString OAIReservationPurchaseRecommendation_RecommendationSummary::getTotalEstimatedMonthlySavingsAmount() const {
    return m_total_estimated_monthly_savings_amount;
}
void OAIReservationPurchaseRecommendation_RecommendationSummary::setTotalEstimatedMonthlySavingsAmount(const QString &total_estimated_monthly_savings_amount) {
    m_total_estimated_monthly_savings_amount = total_estimated_monthly_savings_amount;
    m_total_estimated_monthly_savings_amount_isSet = true;
}

bool OAIReservationPurchaseRecommendation_RecommendationSummary::is_total_estimated_monthly_savings_amount_Set() const{
    return m_total_estimated_monthly_savings_amount_isSet;
}

bool OAIReservationPurchaseRecommendation_RecommendationSummary::is_total_estimated_monthly_savings_amount_Valid() const{
    return m_total_estimated_monthly_savings_amount_isValid;
}

QString OAIReservationPurchaseRecommendation_RecommendationSummary::getTotalEstimatedMonthlySavingsPercentage() const {
    return m_total_estimated_monthly_savings_percentage;
}
void OAIReservationPurchaseRecommendation_RecommendationSummary::setTotalEstimatedMonthlySavingsPercentage(const QString &total_estimated_monthly_savings_percentage) {
    m_total_estimated_monthly_savings_percentage = total_estimated_monthly_savings_percentage;
    m_total_estimated_monthly_savings_percentage_isSet = true;
}

bool OAIReservationPurchaseRecommendation_RecommendationSummary::is_total_estimated_monthly_savings_percentage_Set() const{
    return m_total_estimated_monthly_savings_percentage_isSet;
}

bool OAIReservationPurchaseRecommendation_RecommendationSummary::is_total_estimated_monthly_savings_percentage_Valid() const{
    return m_total_estimated_monthly_savings_percentage_isValid;
}

QString OAIReservationPurchaseRecommendation_RecommendationSummary::getCurrencyCode() const {
    return m_currency_code;
}
void OAIReservationPurchaseRecommendation_RecommendationSummary::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIReservationPurchaseRecommendation_RecommendationSummary::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIReservationPurchaseRecommendation_RecommendationSummary::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

bool OAIReservationPurchaseRecommendation_RecommendationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_estimated_monthly_savings_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_estimated_monthly_savings_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservationPurchaseRecommendation_RecommendationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
