/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAnomalyMonitorRequest.h
 *
 * 
 */

#ifndef OAICreateAnomalyMonitorRequest_H
#define OAICreateAnomalyMonitorRequest_H

#include <QJsonObject>

#include "OAICreateAnomalyMonitorRequest_AnomalyMonitor.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateAnomalyMonitorRequest_AnomalyMonitor;

class OAICreateAnomalyMonitorRequest : public OAIObject {
public:
    OAICreateAnomalyMonitorRequest();
    OAICreateAnomalyMonitorRequest(QString json);
    ~OAICreateAnomalyMonitorRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICreateAnomalyMonitorRequest_AnomalyMonitor getAnomalyMonitor() const;
    void setAnomalyMonitor(const OAICreateAnomalyMonitorRequest_AnomalyMonitor &anomaly_monitor);
    bool is_anomaly_monitor_Set() const;
    bool is_anomaly_monitor_Valid() const;

    QList getResourceTags() const;
    void setResourceTags(const QList &resource_tags);
    bool is_resource_tags_Set() const;
    bool is_resource_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICreateAnomalyMonitorRequest_AnomalyMonitor m_anomaly_monitor;
    bool m_anomaly_monitor_isSet;
    bool m_anomaly_monitor_isValid;

    QList m_resource_tags;
    bool m_resource_tags_isSet;
    bool m_resource_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAnomalyMonitorRequest)

#endif // OAICreateAnomalyMonitorRequest_H
