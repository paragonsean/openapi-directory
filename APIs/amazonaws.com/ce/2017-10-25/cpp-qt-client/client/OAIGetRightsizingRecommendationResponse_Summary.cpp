/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRightsizingRecommendationResponse_Summary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRightsizingRecommendationResponse_Summary::OAIGetRightsizingRecommendationResponse_Summary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRightsizingRecommendationResponse_Summary::OAIGetRightsizingRecommendationResponse_Summary() {
    this->initializeModel();
}

OAIGetRightsizingRecommendationResponse_Summary::~OAIGetRightsizingRecommendationResponse_Summary() {}

void OAIGetRightsizingRecommendationResponse_Summary::initializeModel() {

    m_total_recommendation_count_isSet = false;
    m_total_recommendation_count_isValid = false;

    m_estimated_total_monthly_savings_amount_isSet = false;
    m_estimated_total_monthly_savings_amount_isValid = false;

    m_savings_currency_code_isSet = false;
    m_savings_currency_code_isValid = false;

    m_savings_percentage_isSet = false;
    m_savings_percentage_isValid = false;
}

void OAIGetRightsizingRecommendationResponse_Summary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRightsizingRecommendationResponse_Summary::fromJsonObject(QJsonObject json) {

    m_total_recommendation_count_isValid = ::OpenAPI::fromJsonValue(m_total_recommendation_count, json[QString("TotalRecommendationCount")]);
    m_total_recommendation_count_isSet = !json[QString("TotalRecommendationCount")].isNull() && m_total_recommendation_count_isValid;

    m_estimated_total_monthly_savings_amount_isValid = ::OpenAPI::fromJsonValue(m_estimated_total_monthly_savings_amount, json[QString("EstimatedTotalMonthlySavingsAmount")]);
    m_estimated_total_monthly_savings_amount_isSet = !json[QString("EstimatedTotalMonthlySavingsAmount")].isNull() && m_estimated_total_monthly_savings_amount_isValid;

    m_savings_currency_code_isValid = ::OpenAPI::fromJsonValue(m_savings_currency_code, json[QString("SavingsCurrencyCode")]);
    m_savings_currency_code_isSet = !json[QString("SavingsCurrencyCode")].isNull() && m_savings_currency_code_isValid;

    m_savings_percentage_isValid = ::OpenAPI::fromJsonValue(m_savings_percentage, json[QString("SavingsPercentage")]);
    m_savings_percentage_isSet = !json[QString("SavingsPercentage")].isNull() && m_savings_percentage_isValid;
}

QString OAIGetRightsizingRecommendationResponse_Summary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRightsizingRecommendationResponse_Summary::asJsonObject() const {
    QJsonObject obj;
    if (m_total_recommendation_count_isSet) {
        obj.insert(QString("TotalRecommendationCount"), ::OpenAPI::toJsonValue(m_total_recommendation_count));
    }
    if (m_estimated_total_monthly_savings_amount_isSet) {
        obj.insert(QString("EstimatedTotalMonthlySavingsAmount"), ::OpenAPI::toJsonValue(m_estimated_total_monthly_savings_amount));
    }
    if (m_savings_currency_code_isSet) {
        obj.insert(QString("SavingsCurrencyCode"), ::OpenAPI::toJsonValue(m_savings_currency_code));
    }
    if (m_savings_percentage_isSet) {
        obj.insert(QString("SavingsPercentage"), ::OpenAPI::toJsonValue(m_savings_percentage));
    }
    return obj;
}

QString OAIGetRightsizingRecommendationResponse_Summary::getTotalRecommendationCount() const {
    return m_total_recommendation_count;
}
void OAIGetRightsizingRecommendationResponse_Summary::setTotalRecommendationCount(const QString &total_recommendation_count) {
    m_total_recommendation_count = total_recommendation_count;
    m_total_recommendation_count_isSet = true;
}

bool OAIGetRightsizingRecommendationResponse_Summary::is_total_recommendation_count_Set() const{
    return m_total_recommendation_count_isSet;
}

bool OAIGetRightsizingRecommendationResponse_Summary::is_total_recommendation_count_Valid() const{
    return m_total_recommendation_count_isValid;
}

QString OAIGetRightsizingRecommendationResponse_Summary::getEstimatedTotalMonthlySavingsAmount() const {
    return m_estimated_total_monthly_savings_amount;
}
void OAIGetRightsizingRecommendationResponse_Summary::setEstimatedTotalMonthlySavingsAmount(const QString &estimated_total_monthly_savings_amount) {
    m_estimated_total_monthly_savings_amount = estimated_total_monthly_savings_amount;
    m_estimated_total_monthly_savings_amount_isSet = true;
}

bool OAIGetRightsizingRecommendationResponse_Summary::is_estimated_total_monthly_savings_amount_Set() const{
    return m_estimated_total_monthly_savings_amount_isSet;
}

bool OAIGetRightsizingRecommendationResponse_Summary::is_estimated_total_monthly_savings_amount_Valid() const{
    return m_estimated_total_monthly_savings_amount_isValid;
}

QString OAIGetRightsizingRecommendationResponse_Summary::getSavingsCurrencyCode() const {
    return m_savings_currency_code;
}
void OAIGetRightsizingRecommendationResponse_Summary::setSavingsCurrencyCode(const QString &savings_currency_code) {
    m_savings_currency_code = savings_currency_code;
    m_savings_currency_code_isSet = true;
}

bool OAIGetRightsizingRecommendationResponse_Summary::is_savings_currency_code_Set() const{
    return m_savings_currency_code_isSet;
}

bool OAIGetRightsizingRecommendationResponse_Summary::is_savings_currency_code_Valid() const{
    return m_savings_currency_code_isValid;
}

QString OAIGetRightsizingRecommendationResponse_Summary::getSavingsPercentage() const {
    return m_savings_percentage;
}
void OAIGetRightsizingRecommendationResponse_Summary::setSavingsPercentage(const QString &savings_percentage) {
    m_savings_percentage = savings_percentage;
    m_savings_percentage_isSet = true;
}

bool OAIGetRightsizingRecommendationResponse_Summary::is_savings_percentage_Set() const{
    return m_savings_percentage_isSet;
}

bool OAIGetRightsizingRecommendationResponse_Summary::is_savings_percentage_Valid() const{
    return m_savings_percentage_isValid;
}

bool OAIGetRightsizingRecommendationResponse_Summary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_recommendation_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_total_monthly_savings_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRightsizingRecommendationResponse_Summary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
