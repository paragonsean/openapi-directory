/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvideAnomalyFeedbackRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvideAnomalyFeedbackRequest::OAIProvideAnomalyFeedbackRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvideAnomalyFeedbackRequest::OAIProvideAnomalyFeedbackRequest() {
    this->initializeModel();
}

OAIProvideAnomalyFeedbackRequest::~OAIProvideAnomalyFeedbackRequest() {}

void OAIProvideAnomalyFeedbackRequest::initializeModel() {

    m_anomaly_id_isSet = false;
    m_anomaly_id_isValid = false;

    m_feedback_isSet = false;
    m_feedback_isValid = false;
}

void OAIProvideAnomalyFeedbackRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvideAnomalyFeedbackRequest::fromJsonObject(QJsonObject json) {

    m_anomaly_id_isValid = ::OpenAPI::fromJsonValue(m_anomaly_id, json[QString("AnomalyId")]);
    m_anomaly_id_isSet = !json[QString("AnomalyId")].isNull() && m_anomaly_id_isValid;

    m_feedback_isValid = ::OpenAPI::fromJsonValue(m_feedback, json[QString("Feedback")]);
    m_feedback_isSet = !json[QString("Feedback")].isNull() && m_feedback_isValid;
}

QString OAIProvideAnomalyFeedbackRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvideAnomalyFeedbackRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_anomaly_id_isSet) {
        obj.insert(QString("AnomalyId"), ::OpenAPI::toJsonValue(m_anomaly_id));
    }
    if (m_feedback.isSet()) {
        obj.insert(QString("Feedback"), ::OpenAPI::toJsonValue(m_feedback));
    }
    return obj;
}

QString OAIProvideAnomalyFeedbackRequest::getAnomalyId() const {
    return m_anomaly_id;
}
void OAIProvideAnomalyFeedbackRequest::setAnomalyId(const QString &anomaly_id) {
    m_anomaly_id = anomaly_id;
    m_anomaly_id_isSet = true;
}

bool OAIProvideAnomalyFeedbackRequest::is_anomaly_id_Set() const{
    return m_anomaly_id_isSet;
}

bool OAIProvideAnomalyFeedbackRequest::is_anomaly_id_Valid() const{
    return m_anomaly_id_isValid;
}

OAIAnomalyFeedbackType OAIProvideAnomalyFeedbackRequest::getFeedback() const {
    return m_feedback;
}
void OAIProvideAnomalyFeedbackRequest::setFeedback(const OAIAnomalyFeedbackType &feedback) {
    m_feedback = feedback;
    m_feedback_isSet = true;
}

bool OAIProvideAnomalyFeedbackRequest::is_feedback_Set() const{
    return m_feedback_isSet;
}

bool OAIProvideAnomalyFeedbackRequest::is_feedback_Valid() const{
    return m_feedback_isValid;
}

bool OAIProvideAnomalyFeedbackRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anomaly_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvideAnomalyFeedbackRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_anomaly_id_isValid && m_feedback_isValid && true;
}

} // namespace OpenAPI
