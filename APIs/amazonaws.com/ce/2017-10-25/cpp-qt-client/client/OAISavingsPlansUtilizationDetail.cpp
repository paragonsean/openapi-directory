/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlansUtilizationDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlansUtilizationDetail::OAISavingsPlansUtilizationDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlansUtilizationDetail::OAISavingsPlansUtilizationDetail() {
    this->initializeModel();
}

OAISavingsPlansUtilizationDetail::~OAISavingsPlansUtilizationDetail() {}

void OAISavingsPlansUtilizationDetail::initializeModel() {

    m_savings_plan_arn_isSet = false;
    m_savings_plan_arn_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_utilization_isSet = false;
    m_utilization_isValid = false;

    m_savings_isSet = false;
    m_savings_isValid = false;

    m_amortized_commitment_isSet = false;
    m_amortized_commitment_isValid = false;
}

void OAISavingsPlansUtilizationDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavingsPlansUtilizationDetail::fromJsonObject(QJsonObject json) {

    m_savings_plan_arn_isValid = ::OpenAPI::fromJsonValue(m_savings_plan_arn, json[QString("SavingsPlanArn")]);
    m_savings_plan_arn_isSet = !json[QString("SavingsPlanArn")].isNull() && m_savings_plan_arn_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_utilization_isValid = ::OpenAPI::fromJsonValue(m_utilization, json[QString("Utilization")]);
    m_utilization_isSet = !json[QString("Utilization")].isNull() && m_utilization_isValid;

    m_savings_isValid = ::OpenAPI::fromJsonValue(m_savings, json[QString("Savings")]);
    m_savings_isSet = !json[QString("Savings")].isNull() && m_savings_isValid;

    m_amortized_commitment_isValid = ::OpenAPI::fromJsonValue(m_amortized_commitment, json[QString("AmortizedCommitment")]);
    m_amortized_commitment_isSet = !json[QString("AmortizedCommitment")].isNull() && m_amortized_commitment_isValid;
}

QString OAISavingsPlansUtilizationDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavingsPlansUtilizationDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_savings_plan_arn_isSet) {
        obj.insert(QString("SavingsPlanArn"), ::OpenAPI::toJsonValue(m_savings_plan_arn));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_utilization.isSet()) {
        obj.insert(QString("Utilization"), ::OpenAPI::toJsonValue(m_utilization));
    }
    if (m_savings.isSet()) {
        obj.insert(QString("Savings"), ::OpenAPI::toJsonValue(m_savings));
    }
    if (m_amortized_commitment.isSet()) {
        obj.insert(QString("AmortizedCommitment"), ::OpenAPI::toJsonValue(m_amortized_commitment));
    }
    return obj;
}

QString OAISavingsPlansUtilizationDetail::getSavingsPlanArn() const {
    return m_savings_plan_arn;
}
void OAISavingsPlansUtilizationDetail::setSavingsPlanArn(const QString &savings_plan_arn) {
    m_savings_plan_arn = savings_plan_arn;
    m_savings_plan_arn_isSet = true;
}

bool OAISavingsPlansUtilizationDetail::is_savings_plan_arn_Set() const{
    return m_savings_plan_arn_isSet;
}

bool OAISavingsPlansUtilizationDetail::is_savings_plan_arn_Valid() const{
    return m_savings_plan_arn_isValid;
}

QMap OAISavingsPlansUtilizationDetail::getAttributes() const {
    return m_attributes;
}
void OAISavingsPlansUtilizationDetail::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISavingsPlansUtilizationDetail::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISavingsPlansUtilizationDetail::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAISavingsPlansUtilizationAggregates_Utilization OAISavingsPlansUtilizationDetail::getUtilization() const {
    return m_utilization;
}
void OAISavingsPlansUtilizationDetail::setUtilization(const OAISavingsPlansUtilizationAggregates_Utilization &utilization) {
    m_utilization = utilization;
    m_utilization_isSet = true;
}

bool OAISavingsPlansUtilizationDetail::is_utilization_Set() const{
    return m_utilization_isSet;
}

bool OAISavingsPlansUtilizationDetail::is_utilization_Valid() const{
    return m_utilization_isValid;
}

OAISavingsPlansUtilizationDetail_Savings OAISavingsPlansUtilizationDetail::getSavings() const {
    return m_savings;
}
void OAISavingsPlansUtilizationDetail::setSavings(const OAISavingsPlansUtilizationDetail_Savings &savings) {
    m_savings = savings;
    m_savings_isSet = true;
}

bool OAISavingsPlansUtilizationDetail::is_savings_Set() const{
    return m_savings_isSet;
}

bool OAISavingsPlansUtilizationDetail::is_savings_Valid() const{
    return m_savings_isValid;
}

OAISavingsPlansUtilizationDetail_AmortizedCommitment OAISavingsPlansUtilizationDetail::getAmortizedCommitment() const {
    return m_amortized_commitment;
}
void OAISavingsPlansUtilizationDetail::setAmortizedCommitment(const OAISavingsPlansUtilizationDetail_AmortizedCommitment &amortized_commitment) {
    m_amortized_commitment = amortized_commitment;
    m_amortized_commitment_isSet = true;
}

bool OAISavingsPlansUtilizationDetail::is_amortized_commitment_Set() const{
    return m_amortized_commitment_isSet;
}

bool OAISavingsPlansUtilizationDetail::is_amortized_commitment_Valid() const{
    return m_amortized_commitment_isValid;
}

bool OAISavingsPlansUtilizationDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_savings_plan_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_utilization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amortized_commitment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavingsPlansUtilizationDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
