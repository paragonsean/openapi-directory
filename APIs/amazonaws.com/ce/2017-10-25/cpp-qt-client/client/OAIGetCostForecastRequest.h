/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetCostForecastRequest.h
 *
 * 
 */

#ifndef OAIGetCostForecastRequest_H
#define OAIGetCostForecastRequest_H

#include <QJsonObject>

#include "OAIGetCostForecastRequest_Filter.h"
#include "OAIGetCostForecastRequest_TimePeriod.h"
#include "OAIGranularity.h"
#include "OAIMetric.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetCostForecastRequest_TimePeriod;
class OAIGetCostForecastRequest_Filter;

class OAIGetCostForecastRequest : public OAIObject {
public:
    OAIGetCostForecastRequest();
    OAIGetCostForecastRequest(QString json);
    ~OAIGetCostForecastRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGetCostForecastRequest_TimePeriod getTimePeriod() const;
    void setTimePeriod(const OAIGetCostForecastRequest_TimePeriod &time_period);
    bool is_time_period_Set() const;
    bool is_time_period_Valid() const;

    OAIMetric getMetric() const;
    void setMetric(const OAIMetric &metric);
    bool is_metric_Set() const;
    bool is_metric_Valid() const;

    OAIGranularity getGranularity() const;
    void setGranularity(const OAIGranularity &granularity);
    bool is_granularity_Set() const;
    bool is_granularity_Valid() const;

    OAIGetCostForecastRequest_Filter getFilter() const;
    void setFilter(const OAIGetCostForecastRequest_Filter &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    qint32 getPredictionIntervalLevel() const;
    void setPredictionIntervalLevel(const qint32 &prediction_interval_level);
    bool is_prediction_interval_level_Set() const;
    bool is_prediction_interval_level_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGetCostForecastRequest_TimePeriod m_time_period;
    bool m_time_period_isSet;
    bool m_time_period_isValid;

    OAIMetric m_metric;
    bool m_metric_isSet;
    bool m_metric_isValid;

    OAIGranularity m_granularity;
    bool m_granularity_isSet;
    bool m_granularity_isValid;

    OAIGetCostForecastRequest_Filter m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    qint32 m_prediction_interval_level;
    bool m_prediction_interval_level_isSet;
    bool m_prediction_interval_level_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetCostForecastRequest)

#endif // OAIGetCostForecastRequest_H
