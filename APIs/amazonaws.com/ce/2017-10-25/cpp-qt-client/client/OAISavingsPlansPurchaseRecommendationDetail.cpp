/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlansPurchaseRecommendationDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlansPurchaseRecommendationDetail::OAISavingsPlansPurchaseRecommendationDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlansPurchaseRecommendationDetail::OAISavingsPlansPurchaseRecommendationDetail() {
    this->initializeModel();
}

OAISavingsPlansPurchaseRecommendationDetail::~OAISavingsPlansPurchaseRecommendationDetail() {}

void OAISavingsPlansPurchaseRecommendationDetail::initializeModel() {

    m_savings_plans_details_isSet = false;
    m_savings_plans_details_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_upfront_cost_isSet = false;
    m_upfront_cost_isValid = false;

    m_estimated_roi_isSet = false;
    m_estimated_roi_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_estimated_sp_cost_isSet = false;
    m_estimated_sp_cost_isValid = false;

    m_estimated_on_demand_cost_isSet = false;
    m_estimated_on_demand_cost_isValid = false;

    m_estimated_on_demand_cost_with_current_commitment_isSet = false;
    m_estimated_on_demand_cost_with_current_commitment_isValid = false;

    m_estimated_savings_amount_isSet = false;
    m_estimated_savings_amount_isValid = false;

    m_estimated_savings_percentage_isSet = false;
    m_estimated_savings_percentage_isValid = false;

    m_hourly_commitment_to_purchase_isSet = false;
    m_hourly_commitment_to_purchase_isValid = false;

    m_estimated_average_utilization_isSet = false;
    m_estimated_average_utilization_isValid = false;

    m_estimated_monthly_savings_amount_isSet = false;
    m_estimated_monthly_savings_amount_isValid = false;

    m_current_minimum_hourly_on_demand_spend_isSet = false;
    m_current_minimum_hourly_on_demand_spend_isValid = false;

    m_current_maximum_hourly_on_demand_spend_isSet = false;
    m_current_maximum_hourly_on_demand_spend_isValid = false;

    m_current_average_hourly_on_demand_spend_isSet = false;
    m_current_average_hourly_on_demand_spend_isValid = false;

    m_recommendation_detail_id_isSet = false;
    m_recommendation_detail_id_isValid = false;
}

void OAISavingsPlansPurchaseRecommendationDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavingsPlansPurchaseRecommendationDetail::fromJsonObject(QJsonObject json) {

    m_savings_plans_details_isValid = ::OpenAPI::fromJsonValue(m_savings_plans_details, json[QString("SavingsPlansDetails")]);
    m_savings_plans_details_isSet = !json[QString("SavingsPlansDetails")].isNull() && m_savings_plans_details_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_upfront_cost_isValid = ::OpenAPI::fromJsonValue(m_upfront_cost, json[QString("UpfrontCost")]);
    m_upfront_cost_isSet = !json[QString("UpfrontCost")].isNull() && m_upfront_cost_isValid;

    m_estimated_roi_isValid = ::OpenAPI::fromJsonValue(m_estimated_roi, json[QString("EstimatedROI")]);
    m_estimated_roi_isSet = !json[QString("EstimatedROI")].isNull() && m_estimated_roi_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_estimated_sp_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_sp_cost, json[QString("EstimatedSPCost")]);
    m_estimated_sp_cost_isSet = !json[QString("EstimatedSPCost")].isNull() && m_estimated_sp_cost_isValid;

    m_estimated_on_demand_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_on_demand_cost, json[QString("EstimatedOnDemandCost")]);
    m_estimated_on_demand_cost_isSet = !json[QString("EstimatedOnDemandCost")].isNull() && m_estimated_on_demand_cost_isValid;

    m_estimated_on_demand_cost_with_current_commitment_isValid = ::OpenAPI::fromJsonValue(m_estimated_on_demand_cost_with_current_commitment, json[QString("EstimatedOnDemandCostWithCurrentCommitment")]);
    m_estimated_on_demand_cost_with_current_commitment_isSet = !json[QString("EstimatedOnDemandCostWithCurrentCommitment")].isNull() && m_estimated_on_demand_cost_with_current_commitment_isValid;

    m_estimated_savings_amount_isValid = ::OpenAPI::fromJsonValue(m_estimated_savings_amount, json[QString("EstimatedSavingsAmount")]);
    m_estimated_savings_amount_isSet = !json[QString("EstimatedSavingsAmount")].isNull() && m_estimated_savings_amount_isValid;

    m_estimated_savings_percentage_isValid = ::OpenAPI::fromJsonValue(m_estimated_savings_percentage, json[QString("EstimatedSavingsPercentage")]);
    m_estimated_savings_percentage_isSet = !json[QString("EstimatedSavingsPercentage")].isNull() && m_estimated_savings_percentage_isValid;

    m_hourly_commitment_to_purchase_isValid = ::OpenAPI::fromJsonValue(m_hourly_commitment_to_purchase, json[QString("HourlyCommitmentToPurchase")]);
    m_hourly_commitment_to_purchase_isSet = !json[QString("HourlyCommitmentToPurchase")].isNull() && m_hourly_commitment_to_purchase_isValid;

    m_estimated_average_utilization_isValid = ::OpenAPI::fromJsonValue(m_estimated_average_utilization, json[QString("EstimatedAverageUtilization")]);
    m_estimated_average_utilization_isSet = !json[QString("EstimatedAverageUtilization")].isNull() && m_estimated_average_utilization_isValid;

    m_estimated_monthly_savings_amount_isValid = ::OpenAPI::fromJsonValue(m_estimated_monthly_savings_amount, json[QString("EstimatedMonthlySavingsAmount")]);
    m_estimated_monthly_savings_amount_isSet = !json[QString("EstimatedMonthlySavingsAmount")].isNull() && m_estimated_monthly_savings_amount_isValid;

    m_current_minimum_hourly_on_demand_spend_isValid = ::OpenAPI::fromJsonValue(m_current_minimum_hourly_on_demand_spend, json[QString("CurrentMinimumHourlyOnDemandSpend")]);
    m_current_minimum_hourly_on_demand_spend_isSet = !json[QString("CurrentMinimumHourlyOnDemandSpend")].isNull() && m_current_minimum_hourly_on_demand_spend_isValid;

    m_current_maximum_hourly_on_demand_spend_isValid = ::OpenAPI::fromJsonValue(m_current_maximum_hourly_on_demand_spend, json[QString("CurrentMaximumHourlyOnDemandSpend")]);
    m_current_maximum_hourly_on_demand_spend_isSet = !json[QString("CurrentMaximumHourlyOnDemandSpend")].isNull() && m_current_maximum_hourly_on_demand_spend_isValid;

    m_current_average_hourly_on_demand_spend_isValid = ::OpenAPI::fromJsonValue(m_current_average_hourly_on_demand_spend, json[QString("CurrentAverageHourlyOnDemandSpend")]);
    m_current_average_hourly_on_demand_spend_isSet = !json[QString("CurrentAverageHourlyOnDemandSpend")].isNull() && m_current_average_hourly_on_demand_spend_isValid;

    m_recommendation_detail_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_detail_id, json[QString("RecommendationDetailId")]);
    m_recommendation_detail_id_isSet = !json[QString("RecommendationDetailId")].isNull() && m_recommendation_detail_id_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavingsPlansPurchaseRecommendationDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_savings_plans_details.isSet()) {
        obj.insert(QString("SavingsPlansDetails"), ::OpenAPI::toJsonValue(m_savings_plans_details));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_upfront_cost_isSet) {
        obj.insert(QString("UpfrontCost"), ::OpenAPI::toJsonValue(m_upfront_cost));
    }
    if (m_estimated_roi_isSet) {
        obj.insert(QString("EstimatedROI"), ::OpenAPI::toJsonValue(m_estimated_roi));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_estimated_sp_cost_isSet) {
        obj.insert(QString("EstimatedSPCost"), ::OpenAPI::toJsonValue(m_estimated_sp_cost));
    }
    if (m_estimated_on_demand_cost_isSet) {
        obj.insert(QString("EstimatedOnDemandCost"), ::OpenAPI::toJsonValue(m_estimated_on_demand_cost));
    }
    if (m_estimated_on_demand_cost_with_current_commitment_isSet) {
        obj.insert(QString("EstimatedOnDemandCostWithCurrentCommitment"), ::OpenAPI::toJsonValue(m_estimated_on_demand_cost_with_current_commitment));
    }
    if (m_estimated_savings_amount_isSet) {
        obj.insert(QString("EstimatedSavingsAmount"), ::OpenAPI::toJsonValue(m_estimated_savings_amount));
    }
    if (m_estimated_savings_percentage_isSet) {
        obj.insert(QString("EstimatedSavingsPercentage"), ::OpenAPI::toJsonValue(m_estimated_savings_percentage));
    }
    if (m_hourly_commitment_to_purchase_isSet) {
        obj.insert(QString("HourlyCommitmentToPurchase"), ::OpenAPI::toJsonValue(m_hourly_commitment_to_purchase));
    }
    if (m_estimated_average_utilization_isSet) {
        obj.insert(QString("EstimatedAverageUtilization"), ::OpenAPI::toJsonValue(m_estimated_average_utilization));
    }
    if (m_estimated_monthly_savings_amount_isSet) {
        obj.insert(QString("EstimatedMonthlySavingsAmount"), ::OpenAPI::toJsonValue(m_estimated_monthly_savings_amount));
    }
    if (m_current_minimum_hourly_on_demand_spend_isSet) {
        obj.insert(QString("CurrentMinimumHourlyOnDemandSpend"), ::OpenAPI::toJsonValue(m_current_minimum_hourly_on_demand_spend));
    }
    if (m_current_maximum_hourly_on_demand_spend_isSet) {
        obj.insert(QString("CurrentMaximumHourlyOnDemandSpend"), ::OpenAPI::toJsonValue(m_current_maximum_hourly_on_demand_spend));
    }
    if (m_current_average_hourly_on_demand_spend_isSet) {
        obj.insert(QString("CurrentAverageHourlyOnDemandSpend"), ::OpenAPI::toJsonValue(m_current_average_hourly_on_demand_spend));
    }
    if (m_recommendation_detail_id_isSet) {
        obj.insert(QString("RecommendationDetailId"), ::OpenAPI::toJsonValue(m_recommendation_detail_id));
    }
    return obj;
}

OAISavingsPlansPurchaseRecommendationDetail_SavingsPlansDetails OAISavingsPlansPurchaseRecommendationDetail::getSavingsPlansDetails() const {
    return m_savings_plans_details;
}
void OAISavingsPlansPurchaseRecommendationDetail::setSavingsPlansDetails(const OAISavingsPlansPurchaseRecommendationDetail_SavingsPlansDetails &savings_plans_details) {
    m_savings_plans_details = savings_plans_details;
    m_savings_plans_details_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_savings_plans_details_Set() const{
    return m_savings_plans_details_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_savings_plans_details_Valid() const{
    return m_savings_plans_details_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getAccountId() const {
    return m_account_id;
}
void OAISavingsPlansPurchaseRecommendationDetail::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getUpfrontCost() const {
    return m_upfront_cost;
}
void OAISavingsPlansPurchaseRecommendationDetail::setUpfrontCost(const QString &upfront_cost) {
    m_upfront_cost = upfront_cost;
    m_upfront_cost_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_upfront_cost_Set() const{
    return m_upfront_cost_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_upfront_cost_Valid() const{
    return m_upfront_cost_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getEstimatedRoi() const {
    return m_estimated_roi;
}
void OAISavingsPlansPurchaseRecommendationDetail::setEstimatedRoi(const QString &estimated_roi) {
    m_estimated_roi = estimated_roi;
    m_estimated_roi_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_roi_Set() const{
    return m_estimated_roi_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_roi_Valid() const{
    return m_estimated_roi_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getCurrencyCode() const {
    return m_currency_code;
}
void OAISavingsPlansPurchaseRecommendationDetail::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getEstimatedSpCost() const {
    return m_estimated_sp_cost;
}
void OAISavingsPlansPurchaseRecommendationDetail::setEstimatedSpCost(const QString &estimated_sp_cost) {
    m_estimated_sp_cost = estimated_sp_cost;
    m_estimated_sp_cost_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_sp_cost_Set() const{
    return m_estimated_sp_cost_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_sp_cost_Valid() const{
    return m_estimated_sp_cost_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getEstimatedOnDemandCost() const {
    return m_estimated_on_demand_cost;
}
void OAISavingsPlansPurchaseRecommendationDetail::setEstimatedOnDemandCost(const QString &estimated_on_demand_cost) {
    m_estimated_on_demand_cost = estimated_on_demand_cost;
    m_estimated_on_demand_cost_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_on_demand_cost_Set() const{
    return m_estimated_on_demand_cost_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_on_demand_cost_Valid() const{
    return m_estimated_on_demand_cost_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getEstimatedOnDemandCostWithCurrentCommitment() const {
    return m_estimated_on_demand_cost_with_current_commitment;
}
void OAISavingsPlansPurchaseRecommendationDetail::setEstimatedOnDemandCostWithCurrentCommitment(const QString &estimated_on_demand_cost_with_current_commitment) {
    m_estimated_on_demand_cost_with_current_commitment = estimated_on_demand_cost_with_current_commitment;
    m_estimated_on_demand_cost_with_current_commitment_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_on_demand_cost_with_current_commitment_Set() const{
    return m_estimated_on_demand_cost_with_current_commitment_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_on_demand_cost_with_current_commitment_Valid() const{
    return m_estimated_on_demand_cost_with_current_commitment_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getEstimatedSavingsAmount() const {
    return m_estimated_savings_amount;
}
void OAISavingsPlansPurchaseRecommendationDetail::setEstimatedSavingsAmount(const QString &estimated_savings_amount) {
    m_estimated_savings_amount = estimated_savings_amount;
    m_estimated_savings_amount_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_savings_amount_Set() const{
    return m_estimated_savings_amount_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_savings_amount_Valid() const{
    return m_estimated_savings_amount_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getEstimatedSavingsPercentage() const {
    return m_estimated_savings_percentage;
}
void OAISavingsPlansPurchaseRecommendationDetail::setEstimatedSavingsPercentage(const QString &estimated_savings_percentage) {
    m_estimated_savings_percentage = estimated_savings_percentage;
    m_estimated_savings_percentage_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_savings_percentage_Set() const{
    return m_estimated_savings_percentage_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_savings_percentage_Valid() const{
    return m_estimated_savings_percentage_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getHourlyCommitmentToPurchase() const {
    return m_hourly_commitment_to_purchase;
}
void OAISavingsPlansPurchaseRecommendationDetail::setHourlyCommitmentToPurchase(const QString &hourly_commitment_to_purchase) {
    m_hourly_commitment_to_purchase = hourly_commitment_to_purchase;
    m_hourly_commitment_to_purchase_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_hourly_commitment_to_purchase_Set() const{
    return m_hourly_commitment_to_purchase_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_hourly_commitment_to_purchase_Valid() const{
    return m_hourly_commitment_to_purchase_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getEstimatedAverageUtilization() const {
    return m_estimated_average_utilization;
}
void OAISavingsPlansPurchaseRecommendationDetail::setEstimatedAverageUtilization(const QString &estimated_average_utilization) {
    m_estimated_average_utilization = estimated_average_utilization;
    m_estimated_average_utilization_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_average_utilization_Set() const{
    return m_estimated_average_utilization_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_average_utilization_Valid() const{
    return m_estimated_average_utilization_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getEstimatedMonthlySavingsAmount() const {
    return m_estimated_monthly_savings_amount;
}
void OAISavingsPlansPurchaseRecommendationDetail::setEstimatedMonthlySavingsAmount(const QString &estimated_monthly_savings_amount) {
    m_estimated_monthly_savings_amount = estimated_monthly_savings_amount;
    m_estimated_monthly_savings_amount_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_monthly_savings_amount_Set() const{
    return m_estimated_monthly_savings_amount_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_estimated_monthly_savings_amount_Valid() const{
    return m_estimated_monthly_savings_amount_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getCurrentMinimumHourlyOnDemandSpend() const {
    return m_current_minimum_hourly_on_demand_spend;
}
void OAISavingsPlansPurchaseRecommendationDetail::setCurrentMinimumHourlyOnDemandSpend(const QString &current_minimum_hourly_on_demand_spend) {
    m_current_minimum_hourly_on_demand_spend = current_minimum_hourly_on_demand_spend;
    m_current_minimum_hourly_on_demand_spend_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_current_minimum_hourly_on_demand_spend_Set() const{
    return m_current_minimum_hourly_on_demand_spend_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_current_minimum_hourly_on_demand_spend_Valid() const{
    return m_current_minimum_hourly_on_demand_spend_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getCurrentMaximumHourlyOnDemandSpend() const {
    return m_current_maximum_hourly_on_demand_spend;
}
void OAISavingsPlansPurchaseRecommendationDetail::setCurrentMaximumHourlyOnDemandSpend(const QString &current_maximum_hourly_on_demand_spend) {
    m_current_maximum_hourly_on_demand_spend = current_maximum_hourly_on_demand_spend;
    m_current_maximum_hourly_on_demand_spend_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_current_maximum_hourly_on_demand_spend_Set() const{
    return m_current_maximum_hourly_on_demand_spend_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_current_maximum_hourly_on_demand_spend_Valid() const{
    return m_current_maximum_hourly_on_demand_spend_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getCurrentAverageHourlyOnDemandSpend() const {
    return m_current_average_hourly_on_demand_spend;
}
void OAISavingsPlansPurchaseRecommendationDetail::setCurrentAverageHourlyOnDemandSpend(const QString &current_average_hourly_on_demand_spend) {
    m_current_average_hourly_on_demand_spend = current_average_hourly_on_demand_spend;
    m_current_average_hourly_on_demand_spend_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_current_average_hourly_on_demand_spend_Set() const{
    return m_current_average_hourly_on_demand_spend_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_current_average_hourly_on_demand_spend_Valid() const{
    return m_current_average_hourly_on_demand_spend_isValid;
}

QString OAISavingsPlansPurchaseRecommendationDetail::getRecommendationDetailId() const {
    return m_recommendation_detail_id;
}
void OAISavingsPlansPurchaseRecommendationDetail::setRecommendationDetailId(const QString &recommendation_detail_id) {
    m_recommendation_detail_id = recommendation_detail_id;
    m_recommendation_detail_id_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_recommendation_detail_id_Set() const{
    return m_recommendation_detail_id_isSet;
}

bool OAISavingsPlansPurchaseRecommendationDetail::is_recommendation_detail_id_Valid() const{
    return m_recommendation_detail_id_isValid;
}

bool OAISavingsPlansPurchaseRecommendationDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_savings_plans_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upfront_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_roi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_sp_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_on_demand_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_on_demand_cost_with_current_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_savings_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_savings_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly_commitment_to_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_average_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_monthly_savings_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_minimum_hourly_on_demand_spend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_maximum_hourly_on_demand_spend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_average_hourly_on_demand_spend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_detail_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavingsPlansPurchaseRecommendationDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
