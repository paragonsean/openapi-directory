/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlansDataType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlansDataType::OAISavingsPlansDataType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlansDataType::OAISavingsPlansDataType() {
    this->initializeModel();
}

OAISavingsPlansDataType::~OAISavingsPlansDataType() {}

void OAISavingsPlansDataType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISavingsPlansDataType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISavingsPlansDataType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ATTRIBUTES", Qt::CaseInsensitive) == 0) {
        m_value = eOAISavingsPlansDataType::ATTRIBUTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UTILIZATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAISavingsPlansDataType::UTILIZATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AMORTIZED_COMMITMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISavingsPlansDataType::AMORTIZED_COMMITMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SAVINGS", Qt::CaseInsensitive) == 0) {
        m_value = eOAISavingsPlansDataType::SAVINGS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISavingsPlansDataType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISavingsPlansDataType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISavingsPlansDataType::ATTRIBUTES:
            val = "ATTRIBUTES";
            break;
        case eOAISavingsPlansDataType::UTILIZATION:
            val = "UTILIZATION";
            break;
        case eOAISavingsPlansDataType::AMORTIZED_COMMITMENT:
            val = "AMORTIZED_COMMITMENT";
            break;
        case eOAISavingsPlansDataType::SAVINGS:
            val = "SAVINGS";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISavingsPlansDataType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISavingsPlansDataType::eOAISavingsPlansDataType OAISavingsPlansDataType::getValue() const {
    return m_value;
}

void OAISavingsPlansDataType::setValue(const OAISavingsPlansDataType::eOAISavingsPlansDataType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISavingsPlansDataType::isSet() const {
    
    return m_value_isSet;
}

bool OAISavingsPlansDataType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
