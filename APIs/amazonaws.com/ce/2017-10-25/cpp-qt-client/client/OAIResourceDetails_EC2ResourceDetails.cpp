/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceDetails_EC2ResourceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceDetails_EC2ResourceDetails::OAIResourceDetails_EC2ResourceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceDetails_EC2ResourceDetails::OAIResourceDetails_EC2ResourceDetails() {
    this->initializeModel();
}

OAIResourceDetails_EC2ResourceDetails::~OAIResourceDetails_EC2ResourceDetails() {}

void OAIResourceDetails_EC2ResourceDetails::initializeModel() {

    m_hourly_on_demand_rate_isSet = false;
    m_hourly_on_demand_rate_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_network_performance_isSet = false;
    m_network_performance_isValid = false;

    m_storage_isSet = false;
    m_storage_isValid = false;

    m_vcpu_isSet = false;
    m_vcpu_isValid = false;
}

void OAIResourceDetails_EC2ResourceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceDetails_EC2ResourceDetails::fromJsonObject(QJsonObject json) {

    m_hourly_on_demand_rate_isValid = ::OpenAPI::fromJsonValue(m_hourly_on_demand_rate, json[QString("HourlyOnDemandRate")]);
    m_hourly_on_demand_rate_isSet = !json[QString("HourlyOnDemandRate")].isNull() && m_hourly_on_demand_rate_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("Platform")]);
    m_platform_isSet = !json[QString("Platform")].isNull() && m_platform_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("Sku")]);
    m_sku_isSet = !json[QString("Sku")].isNull() && m_sku_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("Memory")]);
    m_memory_isSet = !json[QString("Memory")].isNull() && m_memory_isValid;

    m_network_performance_isValid = ::OpenAPI::fromJsonValue(m_network_performance, json[QString("NetworkPerformance")]);
    m_network_performance_isSet = !json[QString("NetworkPerformance")].isNull() && m_network_performance_isValid;

    m_storage_isValid = ::OpenAPI::fromJsonValue(m_storage, json[QString("Storage")]);
    m_storage_isSet = !json[QString("Storage")].isNull() && m_storage_isValid;

    m_vcpu_isValid = ::OpenAPI::fromJsonValue(m_vcpu, json[QString("Vcpu")]);
    m_vcpu_isSet = !json[QString("Vcpu")].isNull() && m_vcpu_isValid;
}

QString OAIResourceDetails_EC2ResourceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceDetails_EC2ResourceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_hourly_on_demand_rate_isSet) {
        obj.insert(QString("HourlyOnDemandRate"), ::OpenAPI::toJsonValue(m_hourly_on_demand_rate));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_platform_isSet) {
        obj.insert(QString("Platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_sku_isSet) {
        obj.insert(QString("Sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_memory_isSet) {
        obj.insert(QString("Memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_network_performance_isSet) {
        obj.insert(QString("NetworkPerformance"), ::OpenAPI::toJsonValue(m_network_performance));
    }
    if (m_storage_isSet) {
        obj.insert(QString("Storage"), ::OpenAPI::toJsonValue(m_storage));
    }
    if (m_vcpu_isSet) {
        obj.insert(QString("Vcpu"), ::OpenAPI::toJsonValue(m_vcpu));
    }
    return obj;
}

QString OAIResourceDetails_EC2ResourceDetails::getHourlyOnDemandRate() const {
    return m_hourly_on_demand_rate;
}
void OAIResourceDetails_EC2ResourceDetails::setHourlyOnDemandRate(const QString &hourly_on_demand_rate) {
    m_hourly_on_demand_rate = hourly_on_demand_rate;
    m_hourly_on_demand_rate_isSet = true;
}

bool OAIResourceDetails_EC2ResourceDetails::is_hourly_on_demand_rate_Set() const{
    return m_hourly_on_demand_rate_isSet;
}

bool OAIResourceDetails_EC2ResourceDetails::is_hourly_on_demand_rate_Valid() const{
    return m_hourly_on_demand_rate_isValid;
}

QString OAIResourceDetails_EC2ResourceDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIResourceDetails_EC2ResourceDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIResourceDetails_EC2ResourceDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIResourceDetails_EC2ResourceDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIResourceDetails_EC2ResourceDetails::getPlatform() const {
    return m_platform;
}
void OAIResourceDetails_EC2ResourceDetails::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIResourceDetails_EC2ResourceDetails::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIResourceDetails_EC2ResourceDetails::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIResourceDetails_EC2ResourceDetails::getRegion() const {
    return m_region;
}
void OAIResourceDetails_EC2ResourceDetails::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIResourceDetails_EC2ResourceDetails::is_region_Set() const{
    return m_region_isSet;
}

bool OAIResourceDetails_EC2ResourceDetails::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIResourceDetails_EC2ResourceDetails::getSku() const {
    return m_sku;
}
void OAIResourceDetails_EC2ResourceDetails::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIResourceDetails_EC2ResourceDetails::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIResourceDetails_EC2ResourceDetails::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIResourceDetails_EC2ResourceDetails::getMemory() const {
    return m_memory;
}
void OAIResourceDetails_EC2ResourceDetails::setMemory(const QString &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIResourceDetails_EC2ResourceDetails::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIResourceDetails_EC2ResourceDetails::is_memory_Valid() const{
    return m_memory_isValid;
}

QString OAIResourceDetails_EC2ResourceDetails::getNetworkPerformance() const {
    return m_network_performance;
}
void OAIResourceDetails_EC2ResourceDetails::setNetworkPerformance(const QString &network_performance) {
    m_network_performance = network_performance;
    m_network_performance_isSet = true;
}

bool OAIResourceDetails_EC2ResourceDetails::is_network_performance_Set() const{
    return m_network_performance_isSet;
}

bool OAIResourceDetails_EC2ResourceDetails::is_network_performance_Valid() const{
    return m_network_performance_isValid;
}

QString OAIResourceDetails_EC2ResourceDetails::getStorage() const {
    return m_storage;
}
void OAIResourceDetails_EC2ResourceDetails::setStorage(const QString &storage) {
    m_storage = storage;
    m_storage_isSet = true;
}

bool OAIResourceDetails_EC2ResourceDetails::is_storage_Set() const{
    return m_storage_isSet;
}

bool OAIResourceDetails_EC2ResourceDetails::is_storage_Valid() const{
    return m_storage_isValid;
}

QString OAIResourceDetails_EC2ResourceDetails::getVcpu() const {
    return m_vcpu;
}
void OAIResourceDetails_EC2ResourceDetails::setVcpu(const QString &vcpu) {
    m_vcpu = vcpu;
    m_vcpu_isSet = true;
}

bool OAIResourceDetails_EC2ResourceDetails::is_vcpu_Set() const{
    return m_vcpu_isSet;
}

bool OAIResourceDetails_EC2ResourceDetails::is_vcpu_Valid() const{
    return m_vcpu_isValid;
}

bool OAIResourceDetails_EC2ResourceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hourly_on_demand_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_performance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcpu_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceDetails_EC2ResourceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
