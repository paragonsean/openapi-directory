/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostCategorySplitChargeRuleParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostCategorySplitChargeRuleParameter::OAICostCategorySplitChargeRuleParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostCategorySplitChargeRuleParameter::OAICostCategorySplitChargeRuleParameter() {
    this->initializeModel();
}

OAICostCategorySplitChargeRuleParameter::~OAICostCategorySplitChargeRuleParameter() {}

void OAICostCategorySplitChargeRuleParameter::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAICostCategorySplitChargeRuleParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostCategorySplitChargeRuleParameter::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAICostCategorySplitChargeRuleParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostCategorySplitChargeRuleParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

OAICostCategorySplitChargeRuleParameterType OAICostCategorySplitChargeRuleParameter::getType() const {
    return m_type;
}
void OAICostCategorySplitChargeRuleParameter::setType(const OAICostCategorySplitChargeRuleParameterType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICostCategorySplitChargeRuleParameter::is_type_Set() const{
    return m_type_isSet;
}

bool OAICostCategorySplitChargeRuleParameter::is_type_Valid() const{
    return m_type_isValid;
}

QList OAICostCategorySplitChargeRuleParameter::getValues() const {
    return m_values;
}
void OAICostCategorySplitChargeRuleParameter::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAICostCategorySplitChargeRuleParameter::is_values_Set() const{
    return m_values_isSet;
}

bool OAICostCategorySplitChargeRuleParameter::is_values_Valid() const{
    return m_values_isValid;
}

bool OAICostCategorySplitChargeRuleParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostCategorySplitChargeRuleParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
