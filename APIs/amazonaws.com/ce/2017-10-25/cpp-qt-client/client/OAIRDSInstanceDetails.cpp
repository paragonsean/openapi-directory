/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRDSInstanceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRDSInstanceDetails::OAIRDSInstanceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRDSInstanceDetails::OAIRDSInstanceDetails() {
    this->initializeModel();
}

OAIRDSInstanceDetails::~OAIRDSInstanceDetails() {}

void OAIRDSInstanceDetails::initializeModel() {

    m_family_isSet = false;
    m_family_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_database_engine_isSet = false;
    m_database_engine_isValid = false;

    m_database_edition_isSet = false;
    m_database_edition_isValid = false;

    m_deployment_option_isSet = false;
    m_deployment_option_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_current_generation_isSet = false;
    m_current_generation_isValid = false;

    m_size_flex_eligible_isSet = false;
    m_size_flex_eligible_isValid = false;
}

void OAIRDSInstanceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRDSInstanceDetails::fromJsonObject(QJsonObject json) {

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("Family")]);
    m_family_isSet = !json[QString("Family")].isNull() && m_family_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_database_engine_isValid = ::OpenAPI::fromJsonValue(m_database_engine, json[QString("DatabaseEngine")]);
    m_database_engine_isSet = !json[QString("DatabaseEngine")].isNull() && m_database_engine_isValid;

    m_database_edition_isValid = ::OpenAPI::fromJsonValue(m_database_edition, json[QString("DatabaseEdition")]);
    m_database_edition_isSet = !json[QString("DatabaseEdition")].isNull() && m_database_edition_isValid;

    m_deployment_option_isValid = ::OpenAPI::fromJsonValue(m_deployment_option, json[QString("DeploymentOption")]);
    m_deployment_option_isSet = !json[QString("DeploymentOption")].isNull() && m_deployment_option_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("LicenseModel")]);
    m_license_model_isSet = !json[QString("LicenseModel")].isNull() && m_license_model_isValid;

    m_current_generation_isValid = ::OpenAPI::fromJsonValue(m_current_generation, json[QString("CurrentGeneration")]);
    m_current_generation_isSet = !json[QString("CurrentGeneration")].isNull() && m_current_generation_isValid;

    m_size_flex_eligible_isValid = ::OpenAPI::fromJsonValue(m_size_flex_eligible, json[QString("SizeFlexEligible")]);
    m_size_flex_eligible_isSet = !json[QString("SizeFlexEligible")].isNull() && m_size_flex_eligible_isValid;
}

QString OAIRDSInstanceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRDSInstanceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_family_isSet) {
        obj.insert(QString("Family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_database_engine_isSet) {
        obj.insert(QString("DatabaseEngine"), ::OpenAPI::toJsonValue(m_database_engine));
    }
    if (m_database_edition_isSet) {
        obj.insert(QString("DatabaseEdition"), ::OpenAPI::toJsonValue(m_database_edition));
    }
    if (m_deployment_option_isSet) {
        obj.insert(QString("DeploymentOption"), ::OpenAPI::toJsonValue(m_deployment_option));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("LicenseModel"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_current_generation_isSet) {
        obj.insert(QString("CurrentGeneration"), ::OpenAPI::toJsonValue(m_current_generation));
    }
    if (m_size_flex_eligible_isSet) {
        obj.insert(QString("SizeFlexEligible"), ::OpenAPI::toJsonValue(m_size_flex_eligible));
    }
    return obj;
}

QString OAIRDSInstanceDetails::getFamily() const {
    return m_family;
}
void OAIRDSInstanceDetails::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIRDSInstanceDetails::is_family_Set() const{
    return m_family_isSet;
}

bool OAIRDSInstanceDetails::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIRDSInstanceDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIRDSInstanceDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIRDSInstanceDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIRDSInstanceDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIRDSInstanceDetails::getRegion() const {
    return m_region;
}
void OAIRDSInstanceDetails::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIRDSInstanceDetails::is_region_Set() const{
    return m_region_isSet;
}

bool OAIRDSInstanceDetails::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIRDSInstanceDetails::getDatabaseEngine() const {
    return m_database_engine;
}
void OAIRDSInstanceDetails::setDatabaseEngine(const QString &database_engine) {
    m_database_engine = database_engine;
    m_database_engine_isSet = true;
}

bool OAIRDSInstanceDetails::is_database_engine_Set() const{
    return m_database_engine_isSet;
}

bool OAIRDSInstanceDetails::is_database_engine_Valid() const{
    return m_database_engine_isValid;
}

QString OAIRDSInstanceDetails::getDatabaseEdition() const {
    return m_database_edition;
}
void OAIRDSInstanceDetails::setDatabaseEdition(const QString &database_edition) {
    m_database_edition = database_edition;
    m_database_edition_isSet = true;
}

bool OAIRDSInstanceDetails::is_database_edition_Set() const{
    return m_database_edition_isSet;
}

bool OAIRDSInstanceDetails::is_database_edition_Valid() const{
    return m_database_edition_isValid;
}

QString OAIRDSInstanceDetails::getDeploymentOption() const {
    return m_deployment_option;
}
void OAIRDSInstanceDetails::setDeploymentOption(const QString &deployment_option) {
    m_deployment_option = deployment_option;
    m_deployment_option_isSet = true;
}

bool OAIRDSInstanceDetails::is_deployment_option_Set() const{
    return m_deployment_option_isSet;
}

bool OAIRDSInstanceDetails::is_deployment_option_Valid() const{
    return m_deployment_option_isValid;
}

QString OAIRDSInstanceDetails::getLicenseModel() const {
    return m_license_model;
}
void OAIRDSInstanceDetails::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAIRDSInstanceDetails::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAIRDSInstanceDetails::is_license_model_Valid() const{
    return m_license_model_isValid;
}

bool OAIRDSInstanceDetails::getCurrentGeneration() const {
    return m_current_generation;
}
void OAIRDSInstanceDetails::setCurrentGeneration(const bool &current_generation) {
    m_current_generation = current_generation;
    m_current_generation_isSet = true;
}

bool OAIRDSInstanceDetails::is_current_generation_Set() const{
    return m_current_generation_isSet;
}

bool OAIRDSInstanceDetails::is_current_generation_Valid() const{
    return m_current_generation_isValid;
}

bool OAIRDSInstanceDetails::getSizeFlexEligible() const {
    return m_size_flex_eligible;
}
void OAIRDSInstanceDetails::setSizeFlexEligible(const bool &size_flex_eligible) {
    m_size_flex_eligible = size_flex_eligible;
    m_size_flex_eligible_isSet = true;
}

bool OAIRDSInstanceDetails::is_size_flex_eligible_Set() const{
    return m_size_flex_eligible_isSet;
}

bool OAIRDSInstanceDetails::is_size_flex_eligible_Valid() const{
    return m_size_flex_eligible_isValid;
}

bool OAIRDSInstanceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_flex_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRDSInstanceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
