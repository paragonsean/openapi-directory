/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAnomalySubscriptionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAnomalySubscriptionRequest::OAIUpdateAnomalySubscriptionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAnomalySubscriptionRequest::OAIUpdateAnomalySubscriptionRequest() {
    this->initializeModel();
}

OAIUpdateAnomalySubscriptionRequest::~OAIUpdateAnomalySubscriptionRequest() {}

void OAIUpdateAnomalySubscriptionRequest::initializeModel() {

    m_subscription_arn_isSet = false;
    m_subscription_arn_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_monitor_arn_list_isSet = false;
    m_monitor_arn_list_isValid = false;

    m_subscribers_isSet = false;
    m_subscribers_isValid = false;

    m_subscription_name_isSet = false;
    m_subscription_name_isValid = false;

    m_threshold_expression_isSet = false;
    m_threshold_expression_isValid = false;
}

void OAIUpdateAnomalySubscriptionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAnomalySubscriptionRequest::fromJsonObject(QJsonObject json) {

    m_subscription_arn_isValid = ::OpenAPI::fromJsonValue(m_subscription_arn, json[QString("SubscriptionArn")]);
    m_subscription_arn_isSet = !json[QString("SubscriptionArn")].isNull() && m_subscription_arn_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("Threshold")]);
    m_threshold_isSet = !json[QString("Threshold")].isNull() && m_threshold_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("Frequency")]);
    m_frequency_isSet = !json[QString("Frequency")].isNull() && m_frequency_isValid;

    m_monitor_arn_list_isValid = ::OpenAPI::fromJsonValue(m_monitor_arn_list, json[QString("MonitorArnList")]);
    m_monitor_arn_list_isSet = !json[QString("MonitorArnList")].isNull() && m_monitor_arn_list_isValid;

    m_subscribers_isValid = ::OpenAPI::fromJsonValue(m_subscribers, json[QString("Subscribers")]);
    m_subscribers_isSet = !json[QString("Subscribers")].isNull() && m_subscribers_isValid;

    m_subscription_name_isValid = ::OpenAPI::fromJsonValue(m_subscription_name, json[QString("SubscriptionName")]);
    m_subscription_name_isSet = !json[QString("SubscriptionName")].isNull() && m_subscription_name_isValid;

    m_threshold_expression_isValid = ::OpenAPI::fromJsonValue(m_threshold_expression, json[QString("ThresholdExpression")]);
    m_threshold_expression_isSet = !json[QString("ThresholdExpression")].isNull() && m_threshold_expression_isValid;
}

QString OAIUpdateAnomalySubscriptionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAnomalySubscriptionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_subscription_arn_isSet) {
        obj.insert(QString("SubscriptionArn"), ::OpenAPI::toJsonValue(m_subscription_arn));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("Threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("Frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_monitor_arn_list.isSet()) {
        obj.insert(QString("MonitorArnList"), ::OpenAPI::toJsonValue(m_monitor_arn_list));
    }
    if (m_subscribers.isSet()) {
        obj.insert(QString("Subscribers"), ::OpenAPI::toJsonValue(m_subscribers));
    }
    if (m_subscription_name_isSet) {
        obj.insert(QString("SubscriptionName"), ::OpenAPI::toJsonValue(m_subscription_name));
    }
    if (m_threshold_expression.isSet()) {
        obj.insert(QString("ThresholdExpression"), ::OpenAPI::toJsonValue(m_threshold_expression));
    }
    return obj;
}

QString OAIUpdateAnomalySubscriptionRequest::getSubscriptionArn() const {
    return m_subscription_arn;
}
void OAIUpdateAnomalySubscriptionRequest::setSubscriptionArn(const QString &subscription_arn) {
    m_subscription_arn = subscription_arn;
    m_subscription_arn_isSet = true;
}

bool OAIUpdateAnomalySubscriptionRequest::is_subscription_arn_Set() const{
    return m_subscription_arn_isSet;
}

bool OAIUpdateAnomalySubscriptionRequest::is_subscription_arn_Valid() const{
    return m_subscription_arn_isValid;
}

double OAIUpdateAnomalySubscriptionRequest::getThreshold() const {
    return m_threshold;
}
void OAIUpdateAnomalySubscriptionRequest::setThreshold(const double &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIUpdateAnomalySubscriptionRequest::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIUpdateAnomalySubscriptionRequest::is_threshold_Valid() const{
    return m_threshold_isValid;
}

OAIAnomalySubscriptionFrequency OAIUpdateAnomalySubscriptionRequest::getFrequency() const {
    return m_frequency;
}
void OAIUpdateAnomalySubscriptionRequest::setFrequency(const OAIAnomalySubscriptionFrequency &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIUpdateAnomalySubscriptionRequest::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIUpdateAnomalySubscriptionRequest::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QList OAIUpdateAnomalySubscriptionRequest::getMonitorArnList() const {
    return m_monitor_arn_list;
}
void OAIUpdateAnomalySubscriptionRequest::setMonitorArnList(const QList &monitor_arn_list) {
    m_monitor_arn_list = monitor_arn_list;
    m_monitor_arn_list_isSet = true;
}

bool OAIUpdateAnomalySubscriptionRequest::is_monitor_arn_list_Set() const{
    return m_monitor_arn_list_isSet;
}

bool OAIUpdateAnomalySubscriptionRequest::is_monitor_arn_list_Valid() const{
    return m_monitor_arn_list_isValid;
}

QList OAIUpdateAnomalySubscriptionRequest::getSubscribers() const {
    return m_subscribers;
}
void OAIUpdateAnomalySubscriptionRequest::setSubscribers(const QList &subscribers) {
    m_subscribers = subscribers;
    m_subscribers_isSet = true;
}

bool OAIUpdateAnomalySubscriptionRequest::is_subscribers_Set() const{
    return m_subscribers_isSet;
}

bool OAIUpdateAnomalySubscriptionRequest::is_subscribers_Valid() const{
    return m_subscribers_isValid;
}

QString OAIUpdateAnomalySubscriptionRequest::getSubscriptionName() const {
    return m_subscription_name;
}
void OAIUpdateAnomalySubscriptionRequest::setSubscriptionName(const QString &subscription_name) {
    m_subscription_name = subscription_name;
    m_subscription_name_isSet = true;
}

bool OAIUpdateAnomalySubscriptionRequest::is_subscription_name_Set() const{
    return m_subscription_name_isSet;
}

bool OAIUpdateAnomalySubscriptionRequest::is_subscription_name_Valid() const{
    return m_subscription_name_isValid;
}

OAIUpdateAnomalySubscriptionRequest_ThresholdExpression OAIUpdateAnomalySubscriptionRequest::getThresholdExpression() const {
    return m_threshold_expression;
}
void OAIUpdateAnomalySubscriptionRequest::setThresholdExpression(const OAIUpdateAnomalySubscriptionRequest_ThresholdExpression &threshold_expression) {
    m_threshold_expression = threshold_expression;
    m_threshold_expression_isSet = true;
}

bool OAIUpdateAnomalySubscriptionRequest::is_threshold_expression_Set() const{
    return m_threshold_expression_isSet;
}

bool OAIUpdateAnomalySubscriptionRequest::is_threshold_expression_Valid() const{
    return m_threshold_expression_isValid;
}

bool OAIUpdateAnomalySubscriptionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subscription_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_arn_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAnomalySubscriptionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subscription_arn_isValid && true;
}

} // namespace OpenAPI
