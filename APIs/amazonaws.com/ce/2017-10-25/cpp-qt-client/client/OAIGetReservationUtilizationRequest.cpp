/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetReservationUtilizationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetReservationUtilizationRequest::OAIGetReservationUtilizationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetReservationUtilizationRequest::OAIGetReservationUtilizationRequest() {
    this->initializeModel();
}

OAIGetReservationUtilizationRequest::~OAIGetReservationUtilizationRequest() {}

void OAIGetReservationUtilizationRequest::initializeModel() {

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_group_by_isSet = false;
    m_group_by_isValid = false;

    m_granularity_isSet = false;
    m_granularity_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIGetReservationUtilizationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetReservationUtilizationRequest::fromJsonObject(QJsonObject json) {

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("TimePeriod")]);
    m_time_period_isSet = !json[QString("TimePeriod")].isNull() && m_time_period_isValid;

    m_group_by_isValid = ::OpenAPI::fromJsonValue(m_group_by, json[QString("GroupBy")]);
    m_group_by_isSet = !json[QString("GroupBy")].isNull() && m_group_by_isValid;

    m_granularity_isValid = ::OpenAPI::fromJsonValue(m_granularity, json[QString("Granularity")]);
    m_granularity_isSet = !json[QString("Granularity")].isNull() && m_granularity_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIGetReservationUtilizationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetReservationUtilizationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_time_period.isSet()) {
        obj.insert(QString("TimePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_group_by.isSet()) {
        obj.insert(QString("GroupBy"), ::OpenAPI::toJsonValue(m_group_by));
    }
    if (m_granularity.isSet()) {
        obj.insert(QString("Granularity"), ::OpenAPI::toJsonValue(m_granularity));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

OAIGetReservationUtilizationRequest_TimePeriod OAIGetReservationUtilizationRequest::getTimePeriod() const {
    return m_time_period;
}
void OAIGetReservationUtilizationRequest::setTimePeriod(const OAIGetReservationUtilizationRequest_TimePeriod &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIGetReservationUtilizationRequest::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIGetReservationUtilizationRequest::is_time_period_Valid() const{
    return m_time_period_isValid;
}

QList OAIGetReservationUtilizationRequest::getGroupBy() const {
    return m_group_by;
}
void OAIGetReservationUtilizationRequest::setGroupBy(const QList &group_by) {
    m_group_by = group_by;
    m_group_by_isSet = true;
}

bool OAIGetReservationUtilizationRequest::is_group_by_Set() const{
    return m_group_by_isSet;
}

bool OAIGetReservationUtilizationRequest::is_group_by_Valid() const{
    return m_group_by_isValid;
}

OAIGranularity OAIGetReservationUtilizationRequest::getGranularity() const {
    return m_granularity;
}
void OAIGetReservationUtilizationRequest::setGranularity(const OAIGranularity &granularity) {
    m_granularity = granularity;
    m_granularity_isSet = true;
}

bool OAIGetReservationUtilizationRequest::is_granularity_Set() const{
    return m_granularity_isSet;
}

bool OAIGetReservationUtilizationRequest::is_granularity_Valid() const{
    return m_granularity_isValid;
}

OAIGetReservationUtilizationRequest_Filter OAIGetReservationUtilizationRequest::getFilter() const {
    return m_filter;
}
void OAIGetReservationUtilizationRequest::setFilter(const OAIGetReservationUtilizationRequest_Filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetReservationUtilizationRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetReservationUtilizationRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIGetReservationUtilizationRequest_SortBy OAIGetReservationUtilizationRequest::getSortBy() const {
    return m_sort_by;
}
void OAIGetReservationUtilizationRequest::setSortBy(const OAIGetReservationUtilizationRequest_SortBy &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIGetReservationUtilizationRequest::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIGetReservationUtilizationRequest::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

QString OAIGetReservationUtilizationRequest::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetReservationUtilizationRequest::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetReservationUtilizationRequest::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetReservationUtilizationRequest::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

qint32 OAIGetReservationUtilizationRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetReservationUtilizationRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetReservationUtilizationRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetReservationUtilizationRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIGetReservationUtilizationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetReservationUtilizationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_time_period_isValid && true;
}

} // namespace OpenAPI
