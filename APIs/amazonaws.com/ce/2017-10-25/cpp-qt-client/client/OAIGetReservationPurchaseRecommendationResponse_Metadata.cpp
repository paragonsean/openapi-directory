/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetReservationPurchaseRecommendationResponse_Metadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetReservationPurchaseRecommendationResponse_Metadata::OAIGetReservationPurchaseRecommendationResponse_Metadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetReservationPurchaseRecommendationResponse_Metadata::OAIGetReservationPurchaseRecommendationResponse_Metadata() {
    this->initializeModel();
}

OAIGetReservationPurchaseRecommendationResponse_Metadata::~OAIGetReservationPurchaseRecommendationResponse_Metadata() {}

void OAIGetReservationPurchaseRecommendationResponse_Metadata::initializeModel() {

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_generation_timestamp_isSet = false;
    m_generation_timestamp_isValid = false;
}

void OAIGetReservationPurchaseRecommendationResponse_Metadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetReservationPurchaseRecommendationResponse_Metadata::fromJsonObject(QJsonObject json) {

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("RecommendationId")]);
    m_recommendation_id_isSet = !json[QString("RecommendationId")].isNull() && m_recommendation_id_isValid;

    m_generation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_generation_timestamp, json[QString("GenerationTimestamp")]);
    m_generation_timestamp_isSet = !json[QString("GenerationTimestamp")].isNull() && m_generation_timestamp_isValid;
}

QString OAIGetReservationPurchaseRecommendationResponse_Metadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetReservationPurchaseRecommendationResponse_Metadata::asJsonObject() const {
    QJsonObject obj;
    if (m_recommendation_id_isSet) {
        obj.insert(QString("RecommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_generation_timestamp_isSet) {
        obj.insert(QString("GenerationTimestamp"), ::OpenAPI::toJsonValue(m_generation_timestamp));
    }
    return obj;
}

QString OAIGetReservationPurchaseRecommendationResponse_Metadata::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIGetReservationPurchaseRecommendationResponse_Metadata::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationResponse_Metadata::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIGetReservationPurchaseRecommendationResponse_Metadata::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

QString OAIGetReservationPurchaseRecommendationResponse_Metadata::getGenerationTimestamp() const {
    return m_generation_timestamp;
}
void OAIGetReservationPurchaseRecommendationResponse_Metadata::setGenerationTimestamp(const QString &generation_timestamp) {
    m_generation_timestamp = generation_timestamp;
    m_generation_timestamp_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationResponse_Metadata::is_generation_timestamp_Set() const{
    return m_generation_timestamp_isSet;
}

bool OAIGetReservationPurchaseRecommendationResponse_Metadata::is_generation_timestamp_Valid() const{
    return m_generation_timestamp_isValid;
}

bool OAIGetReservationPurchaseRecommendationResponse_Metadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetReservationPurchaseRecommendationResponse_Metadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
