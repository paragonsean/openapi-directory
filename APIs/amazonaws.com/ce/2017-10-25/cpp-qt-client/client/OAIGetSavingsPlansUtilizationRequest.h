/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetSavingsPlansUtilizationRequest.h
 *
 * 
 */

#ifndef OAIGetSavingsPlansUtilizationRequest_H
#define OAIGetSavingsPlansUtilizationRequest_H

#include <QJsonObject>

#include "OAIGetSavingsPlansCoverageRequest_TimePeriod.h"
#include "OAIGetSavingsPlansUtilizationRequest_Filter.h"
#include "OAIGetSavingsPlansUtilizationRequest_SortBy.h"
#include "OAIGranularity.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetSavingsPlansCoverageRequest_TimePeriod;
class OAIGetSavingsPlansUtilizationRequest_Filter;
class OAIGetSavingsPlansUtilizationRequest_SortBy;

class OAIGetSavingsPlansUtilizationRequest : public OAIObject {
public:
    OAIGetSavingsPlansUtilizationRequest();
    OAIGetSavingsPlansUtilizationRequest(QString json);
    ~OAIGetSavingsPlansUtilizationRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGetSavingsPlansCoverageRequest_TimePeriod getTimePeriod() const;
    void setTimePeriod(const OAIGetSavingsPlansCoverageRequest_TimePeriod &time_period);
    bool is_time_period_Set() const;
    bool is_time_period_Valid() const;

    OAIGranularity getGranularity() const;
    void setGranularity(const OAIGranularity &granularity);
    bool is_granularity_Set() const;
    bool is_granularity_Valid() const;

    OAIGetSavingsPlansUtilizationRequest_Filter getFilter() const;
    void setFilter(const OAIGetSavingsPlansUtilizationRequest_Filter &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    OAIGetSavingsPlansUtilizationRequest_SortBy getSortBy() const;
    void setSortBy(const OAIGetSavingsPlansUtilizationRequest_SortBy &sort_by);
    bool is_sort_by_Set() const;
    bool is_sort_by_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGetSavingsPlansCoverageRequest_TimePeriod m_time_period;
    bool m_time_period_isSet;
    bool m_time_period_isValid;

    OAIGranularity m_granularity;
    bool m_granularity_isSet;
    bool m_granularity_isValid;

    OAIGetSavingsPlansUtilizationRequest_Filter m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    OAIGetSavingsPlansUtilizationRequest_SortBy m_sort_by;
    bool m_sort_by_isSet;
    bool m_sort_by_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetSavingsPlansUtilizationRequest)

#endif // OAIGetSavingsPlansUtilizationRequest_H
