/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAnomalyMonitorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAnomalyMonitorResponse::OAICreateAnomalyMonitorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAnomalyMonitorResponse::OAICreateAnomalyMonitorResponse() {
    this->initializeModel();
}

OAICreateAnomalyMonitorResponse::~OAICreateAnomalyMonitorResponse() {}

void OAICreateAnomalyMonitorResponse::initializeModel() {

    m_monitor_arn_isSet = false;
    m_monitor_arn_isValid = false;
}

void OAICreateAnomalyMonitorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAnomalyMonitorResponse::fromJsonObject(QJsonObject json) {

    m_monitor_arn_isValid = ::OpenAPI::fromJsonValue(m_monitor_arn, json[QString("MonitorArn")]);
    m_monitor_arn_isSet = !json[QString("MonitorArn")].isNull() && m_monitor_arn_isValid;
}

QString OAICreateAnomalyMonitorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAnomalyMonitorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_monitor_arn_isSet) {
        obj.insert(QString("MonitorArn"), ::OpenAPI::toJsonValue(m_monitor_arn));
    }
    return obj;
}

QString OAICreateAnomalyMonitorResponse::getMonitorArn() const {
    return m_monitor_arn;
}
void OAICreateAnomalyMonitorResponse::setMonitorArn(const QString &monitor_arn) {
    m_monitor_arn = monitor_arn;
    m_monitor_arn_isSet = true;
}

bool OAICreateAnomalyMonitorResponse::is_monitor_arn_Set() const{
    return m_monitor_arn_isSet;
}

bool OAICreateAnomalyMonitorResponse::is_monitor_arn_Valid() const{
    return m_monitor_arn_isValid;
}

bool OAICreateAnomalyMonitorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_monitor_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAnomalyMonitorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_monitor_arn_isValid && true;
}

} // namespace OpenAPI
