/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostCategoryProcessingStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostCategoryProcessingStatus::OAICostCategoryProcessingStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostCategoryProcessingStatus::OAICostCategoryProcessingStatus() {
    this->initializeModel();
}

OAICostCategoryProcessingStatus::~OAICostCategoryProcessingStatus() {}

void OAICostCategoryProcessingStatus::initializeModel() {

    m_component_isSet = false;
    m_component_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICostCategoryProcessingStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostCategoryProcessingStatus::fromJsonObject(QJsonObject json) {

    m_component_isValid = ::OpenAPI::fromJsonValue(m_component, json[QString("Component")]);
    m_component_isSet = !json[QString("Component")].isNull() && m_component_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAICostCategoryProcessingStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostCategoryProcessingStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_component.isSet()) {
        obj.insert(QString("Component"), ::OpenAPI::toJsonValue(m_component));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAICostCategoryStatusComponent OAICostCategoryProcessingStatus::getComponent() const {
    return m_component;
}
void OAICostCategoryProcessingStatus::setComponent(const OAICostCategoryStatusComponent &component) {
    m_component = component;
    m_component_isSet = true;
}

bool OAICostCategoryProcessingStatus::is_component_Set() const{
    return m_component_isSet;
}

bool OAICostCategoryProcessingStatus::is_component_Valid() const{
    return m_component_isValid;
}

OAICostCategoryStatus OAICostCategoryProcessingStatus::getStatus() const {
    return m_status;
}
void OAICostCategoryProcessingStatus::setStatus(const OAICostCategoryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICostCategoryProcessingStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAICostCategoryProcessingStatus::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICostCategoryProcessingStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostCategoryProcessingStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
