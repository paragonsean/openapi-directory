/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetInstance::OAITargetInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetInstance::OAITargetInstance() {
    this->initializeModel();
}

OAITargetInstance::~OAITargetInstance() {}

void OAITargetInstance::initializeModel() {

    m_estimated_monthly_cost_isSet = false;
    m_estimated_monthly_cost_isValid = false;

    m_estimated_monthly_savings_isSet = false;
    m_estimated_monthly_savings_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_default_target_instance_isSet = false;
    m_default_target_instance_isValid = false;

    m_resource_details_isSet = false;
    m_resource_details_isValid = false;

    m_expected_resource_utilization_isSet = false;
    m_expected_resource_utilization_isValid = false;

    m_platform_differences_isSet = false;
    m_platform_differences_isValid = false;
}

void OAITargetInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetInstance::fromJsonObject(QJsonObject json) {

    m_estimated_monthly_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_monthly_cost, json[QString("EstimatedMonthlyCost")]);
    m_estimated_monthly_cost_isSet = !json[QString("EstimatedMonthlyCost")].isNull() && m_estimated_monthly_cost_isValid;

    m_estimated_monthly_savings_isValid = ::OpenAPI::fromJsonValue(m_estimated_monthly_savings, json[QString("EstimatedMonthlySavings")]);
    m_estimated_monthly_savings_isSet = !json[QString("EstimatedMonthlySavings")].isNull() && m_estimated_monthly_savings_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_default_target_instance_isValid = ::OpenAPI::fromJsonValue(m_default_target_instance, json[QString("DefaultTargetInstance")]);
    m_default_target_instance_isSet = !json[QString("DefaultTargetInstance")].isNull() && m_default_target_instance_isValid;

    m_resource_details_isValid = ::OpenAPI::fromJsonValue(m_resource_details, json[QString("ResourceDetails")]);
    m_resource_details_isSet = !json[QString("ResourceDetails")].isNull() && m_resource_details_isValid;

    m_expected_resource_utilization_isValid = ::OpenAPI::fromJsonValue(m_expected_resource_utilization, json[QString("ExpectedResourceUtilization")]);
    m_expected_resource_utilization_isSet = !json[QString("ExpectedResourceUtilization")].isNull() && m_expected_resource_utilization_isValid;

    m_platform_differences_isValid = ::OpenAPI::fromJsonValue(m_platform_differences, json[QString("PlatformDifferences")]);
    m_platform_differences_isSet = !json[QString("PlatformDifferences")].isNull() && m_platform_differences_isValid;
}

QString OAITargetInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_estimated_monthly_cost_isSet) {
        obj.insert(QString("EstimatedMonthlyCost"), ::OpenAPI::toJsonValue(m_estimated_monthly_cost));
    }
    if (m_estimated_monthly_savings_isSet) {
        obj.insert(QString("EstimatedMonthlySavings"), ::OpenAPI::toJsonValue(m_estimated_monthly_savings));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_default_target_instance_isSet) {
        obj.insert(QString("DefaultTargetInstance"), ::OpenAPI::toJsonValue(m_default_target_instance));
    }
    if (m_resource_details.isSet()) {
        obj.insert(QString("ResourceDetails"), ::OpenAPI::toJsonValue(m_resource_details));
    }
    if (m_expected_resource_utilization.isSet()) {
        obj.insert(QString("ExpectedResourceUtilization"), ::OpenAPI::toJsonValue(m_expected_resource_utilization));
    }
    if (m_platform_differences.isSet()) {
        obj.insert(QString("PlatformDifferences"), ::OpenAPI::toJsonValue(m_platform_differences));
    }
    return obj;
}

QString OAITargetInstance::getEstimatedMonthlyCost() const {
    return m_estimated_monthly_cost;
}
void OAITargetInstance::setEstimatedMonthlyCost(const QString &estimated_monthly_cost) {
    m_estimated_monthly_cost = estimated_monthly_cost;
    m_estimated_monthly_cost_isSet = true;
}

bool OAITargetInstance::is_estimated_monthly_cost_Set() const{
    return m_estimated_monthly_cost_isSet;
}

bool OAITargetInstance::is_estimated_monthly_cost_Valid() const{
    return m_estimated_monthly_cost_isValid;
}

QString OAITargetInstance::getEstimatedMonthlySavings() const {
    return m_estimated_monthly_savings;
}
void OAITargetInstance::setEstimatedMonthlySavings(const QString &estimated_monthly_savings) {
    m_estimated_monthly_savings = estimated_monthly_savings;
    m_estimated_monthly_savings_isSet = true;
}

bool OAITargetInstance::is_estimated_monthly_savings_Set() const{
    return m_estimated_monthly_savings_isSet;
}

bool OAITargetInstance::is_estimated_monthly_savings_Valid() const{
    return m_estimated_monthly_savings_isValid;
}

QString OAITargetInstance::getCurrencyCode() const {
    return m_currency_code;
}
void OAITargetInstance::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAITargetInstance::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAITargetInstance::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

bool OAITargetInstance::getDefaultTargetInstance() const {
    return m_default_target_instance;
}
void OAITargetInstance::setDefaultTargetInstance(const bool &default_target_instance) {
    m_default_target_instance = default_target_instance;
    m_default_target_instance_isSet = true;
}

bool OAITargetInstance::is_default_target_instance_Set() const{
    return m_default_target_instance_isSet;
}

bool OAITargetInstance::is_default_target_instance_Valid() const{
    return m_default_target_instance_isValid;
}

OAITargetInstance_ResourceDetails OAITargetInstance::getResourceDetails() const {
    return m_resource_details;
}
void OAITargetInstance::setResourceDetails(const OAITargetInstance_ResourceDetails &resource_details) {
    m_resource_details = resource_details;
    m_resource_details_isSet = true;
}

bool OAITargetInstance::is_resource_details_Set() const{
    return m_resource_details_isSet;
}

bool OAITargetInstance::is_resource_details_Valid() const{
    return m_resource_details_isValid;
}

OAITargetInstance_ExpectedResourceUtilization OAITargetInstance::getExpectedResourceUtilization() const {
    return m_expected_resource_utilization;
}
void OAITargetInstance::setExpectedResourceUtilization(const OAITargetInstance_ExpectedResourceUtilization &expected_resource_utilization) {
    m_expected_resource_utilization = expected_resource_utilization;
    m_expected_resource_utilization_isSet = true;
}

bool OAITargetInstance::is_expected_resource_utilization_Set() const{
    return m_expected_resource_utilization_isSet;
}

bool OAITargetInstance::is_expected_resource_utilization_Valid() const{
    return m_expected_resource_utilization_isValid;
}

QList OAITargetInstance::getPlatformDifferences() const {
    return m_platform_differences;
}
void OAITargetInstance::setPlatformDifferences(const QList &platform_differences) {
    m_platform_differences = platform_differences;
    m_platform_differences_isSet = true;
}

bool OAITargetInstance::is_platform_differences_Set() const{
    return m_platform_differences_isSet;
}

bool OAITargetInstance::is_platform_differences_Valid() const{
    return m_platform_differences_isValid;
}

bool OAITargetInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_estimated_monthly_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_monthly_savings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_target_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_resource_utilization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_differences.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
