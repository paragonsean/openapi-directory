/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceDetails_ESInstanceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceDetails_ESInstanceDetails::OAIInstanceDetails_ESInstanceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceDetails_ESInstanceDetails::OAIInstanceDetails_ESInstanceDetails() {
    this->initializeModel();
}

OAIInstanceDetails_ESInstanceDetails::~OAIInstanceDetails_ESInstanceDetails() {}

void OAIInstanceDetails_ESInstanceDetails::initializeModel() {

    m_instance_class_isSet = false;
    m_instance_class_isValid = false;

    m_instance_size_isSet = false;
    m_instance_size_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_current_generation_isSet = false;
    m_current_generation_isValid = false;

    m_size_flex_eligible_isSet = false;
    m_size_flex_eligible_isValid = false;
}

void OAIInstanceDetails_ESInstanceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceDetails_ESInstanceDetails::fromJsonObject(QJsonObject json) {

    m_instance_class_isValid = ::OpenAPI::fromJsonValue(m_instance_class, json[QString("InstanceClass")]);
    m_instance_class_isSet = !json[QString("InstanceClass")].isNull() && m_instance_class_isValid;

    m_instance_size_isValid = ::OpenAPI::fromJsonValue(m_instance_size, json[QString("InstanceSize")]);
    m_instance_size_isSet = !json[QString("InstanceSize")].isNull() && m_instance_size_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_current_generation_isValid = ::OpenAPI::fromJsonValue(m_current_generation, json[QString("CurrentGeneration")]);
    m_current_generation_isSet = !json[QString("CurrentGeneration")].isNull() && m_current_generation_isValid;

    m_size_flex_eligible_isValid = ::OpenAPI::fromJsonValue(m_size_flex_eligible, json[QString("SizeFlexEligible")]);
    m_size_flex_eligible_isSet = !json[QString("SizeFlexEligible")].isNull() && m_size_flex_eligible_isValid;
}

QString OAIInstanceDetails_ESInstanceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceDetails_ESInstanceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_class_isSet) {
        obj.insert(QString("InstanceClass"), ::OpenAPI::toJsonValue(m_instance_class));
    }
    if (m_instance_size_isSet) {
        obj.insert(QString("InstanceSize"), ::OpenAPI::toJsonValue(m_instance_size));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_current_generation_isSet) {
        obj.insert(QString("CurrentGeneration"), ::OpenAPI::toJsonValue(m_current_generation));
    }
    if (m_size_flex_eligible_isSet) {
        obj.insert(QString("SizeFlexEligible"), ::OpenAPI::toJsonValue(m_size_flex_eligible));
    }
    return obj;
}

QString OAIInstanceDetails_ESInstanceDetails::getInstanceClass() const {
    return m_instance_class;
}
void OAIInstanceDetails_ESInstanceDetails::setInstanceClass(const QString &instance_class) {
    m_instance_class = instance_class;
    m_instance_class_isSet = true;
}

bool OAIInstanceDetails_ESInstanceDetails::is_instance_class_Set() const{
    return m_instance_class_isSet;
}

bool OAIInstanceDetails_ESInstanceDetails::is_instance_class_Valid() const{
    return m_instance_class_isValid;
}

QString OAIInstanceDetails_ESInstanceDetails::getInstanceSize() const {
    return m_instance_size;
}
void OAIInstanceDetails_ESInstanceDetails::setInstanceSize(const QString &instance_size) {
    m_instance_size = instance_size;
    m_instance_size_isSet = true;
}

bool OAIInstanceDetails_ESInstanceDetails::is_instance_size_Set() const{
    return m_instance_size_isSet;
}

bool OAIInstanceDetails_ESInstanceDetails::is_instance_size_Valid() const{
    return m_instance_size_isValid;
}

QString OAIInstanceDetails_ESInstanceDetails::getRegion() const {
    return m_region;
}
void OAIInstanceDetails_ESInstanceDetails::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIInstanceDetails_ESInstanceDetails::is_region_Set() const{
    return m_region_isSet;
}

bool OAIInstanceDetails_ESInstanceDetails::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIInstanceDetails_ESInstanceDetails::getCurrentGeneration() const {
    return m_current_generation;
}
void OAIInstanceDetails_ESInstanceDetails::setCurrentGeneration(const bool &current_generation) {
    m_current_generation = current_generation;
    m_current_generation_isSet = true;
}

bool OAIInstanceDetails_ESInstanceDetails::is_current_generation_Set() const{
    return m_current_generation_isSet;
}

bool OAIInstanceDetails_ESInstanceDetails::is_current_generation_Valid() const{
    return m_current_generation_isValid;
}

bool OAIInstanceDetails_ESInstanceDetails::getSizeFlexEligible() const {
    return m_size_flex_eligible;
}
void OAIInstanceDetails_ESInstanceDetails::setSizeFlexEligible(const bool &size_flex_eligible) {
    m_size_flex_eligible = size_flex_eligible;
    m_size_flex_eligible_isSet = true;
}

bool OAIInstanceDetails_ESInstanceDetails::is_size_flex_eligible_Set() const{
    return m_size_flex_eligible_isSet;
}

bool OAIInstanceDetails_ESInstanceDetails::is_size_flex_eligible_Valid() const{
    return m_size_flex_eligible_isValid;
}

bool OAIInstanceDetails_ESInstanceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_flex_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceDetails_ESInstanceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
