/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAnomalyMonitorsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAnomalyMonitorsRequest::OAIGetAnomalyMonitorsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAnomalyMonitorsRequest::OAIGetAnomalyMonitorsRequest() {
    this->initializeModel();
}

OAIGetAnomalyMonitorsRequest::~OAIGetAnomalyMonitorsRequest() {}

void OAIGetAnomalyMonitorsRequest::initializeModel() {

    m_monitor_arn_list_isSet = false;
    m_monitor_arn_list_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIGetAnomalyMonitorsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAnomalyMonitorsRequest::fromJsonObject(QJsonObject json) {

    m_monitor_arn_list_isValid = ::OpenAPI::fromJsonValue(m_monitor_arn_list, json[QString("MonitorArnList")]);
    m_monitor_arn_list_isSet = !json[QString("MonitorArnList")].isNull() && m_monitor_arn_list_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIGetAnomalyMonitorsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAnomalyMonitorsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_monitor_arn_list.isSet()) {
        obj.insert(QString("MonitorArnList"), ::OpenAPI::toJsonValue(m_monitor_arn_list));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QList OAIGetAnomalyMonitorsRequest::getMonitorArnList() const {
    return m_monitor_arn_list;
}
void OAIGetAnomalyMonitorsRequest::setMonitorArnList(const QList &monitor_arn_list) {
    m_monitor_arn_list = monitor_arn_list;
    m_monitor_arn_list_isSet = true;
}

bool OAIGetAnomalyMonitorsRequest::is_monitor_arn_list_Set() const{
    return m_monitor_arn_list_isSet;
}

bool OAIGetAnomalyMonitorsRequest::is_monitor_arn_list_Valid() const{
    return m_monitor_arn_list_isValid;
}

QString OAIGetAnomalyMonitorsRequest::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetAnomalyMonitorsRequest::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetAnomalyMonitorsRequest::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetAnomalyMonitorsRequest::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

qint32 OAIGetAnomalyMonitorsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetAnomalyMonitorsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetAnomalyMonitorsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetAnomalyMonitorsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIGetAnomalyMonitorsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_monitor_arn_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAnomalyMonitorsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
