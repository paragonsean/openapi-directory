/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCostAllocationTagsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCostAllocationTagsRequest::OAIListCostAllocationTagsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCostAllocationTagsRequest::OAIListCostAllocationTagsRequest() {
    this->initializeModel();
}

OAIListCostAllocationTagsRequest::~OAIListCostAllocationTagsRequest() {}

void OAIListCostAllocationTagsRequest::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_tag_keys_isSet = false;
    m_tag_keys_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListCostAllocationTagsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCostAllocationTagsRequest::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tag_keys_isValid = ::OpenAPI::fromJsonValue(m_tag_keys, json[QString("TagKeys")]);
    m_tag_keys_isSet = !json[QString("TagKeys")].isNull() && m_tag_keys_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListCostAllocationTagsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCostAllocationTagsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tag_keys.isSet()) {
        obj.insert(QString("TagKeys"), ::OpenAPI::toJsonValue(m_tag_keys));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

OAICostAllocationTagStatus OAIListCostAllocationTagsRequest::getStatus() const {
    return m_status;
}
void OAIListCostAllocationTagsRequest::setStatus(const OAICostAllocationTagStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListCostAllocationTagsRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListCostAllocationTagsRequest::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIListCostAllocationTagsRequest::getTagKeys() const {
    return m_tag_keys;
}
void OAIListCostAllocationTagsRequest::setTagKeys(const QList &tag_keys) {
    m_tag_keys = tag_keys;
    m_tag_keys_isSet = true;
}

bool OAIListCostAllocationTagsRequest::is_tag_keys_Set() const{
    return m_tag_keys_isSet;
}

bool OAIListCostAllocationTagsRequest::is_tag_keys_Valid() const{
    return m_tag_keys_isValid;
}

OAICostAllocationTagType OAIListCostAllocationTagsRequest::getType() const {
    return m_type;
}
void OAIListCostAllocationTagsRequest::setType(const OAICostAllocationTagType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIListCostAllocationTagsRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIListCostAllocationTagsRequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIListCostAllocationTagsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListCostAllocationTagsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListCostAllocationTagsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListCostAllocationTagsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListCostAllocationTagsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListCostAllocationTagsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListCostAllocationTagsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListCostAllocationTagsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListCostAllocationTagsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCostAllocationTagsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
