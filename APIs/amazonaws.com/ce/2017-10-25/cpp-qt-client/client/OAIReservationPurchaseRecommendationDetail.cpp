/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservationPurchaseRecommendationDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservationPurchaseRecommendationDetail::OAIReservationPurchaseRecommendationDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservationPurchaseRecommendationDetail::OAIReservationPurchaseRecommendationDetail() {
    this->initializeModel();
}

OAIReservationPurchaseRecommendationDetail::~OAIReservationPurchaseRecommendationDetail() {}

void OAIReservationPurchaseRecommendationDetail::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_instance_details_isSet = false;
    m_instance_details_isValid = false;

    m_recommended_number_of_instances_to_purchase_isSet = false;
    m_recommended_number_of_instances_to_purchase_isValid = false;

    m_recommended_normalized_units_to_purchase_isSet = false;
    m_recommended_normalized_units_to_purchase_isValid = false;

    m_minimum_number_of_instances_used_per_hour_isSet = false;
    m_minimum_number_of_instances_used_per_hour_isValid = false;

    m_minimum_normalized_units_used_per_hour_isSet = false;
    m_minimum_normalized_units_used_per_hour_isValid = false;

    m_maximum_number_of_instances_used_per_hour_isSet = false;
    m_maximum_number_of_instances_used_per_hour_isValid = false;

    m_maximum_normalized_units_used_per_hour_isSet = false;
    m_maximum_normalized_units_used_per_hour_isValid = false;

    m_average_number_of_instances_used_per_hour_isSet = false;
    m_average_number_of_instances_used_per_hour_isValid = false;

    m_average_normalized_units_used_per_hour_isSet = false;
    m_average_normalized_units_used_per_hour_isValid = false;

    m_average_utilization_isSet = false;
    m_average_utilization_isValid = false;

    m_estimated_break_even_in_months_isSet = false;
    m_estimated_break_even_in_months_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_estimated_monthly_savings_amount_isSet = false;
    m_estimated_monthly_savings_amount_isValid = false;

    m_estimated_monthly_savings_percentage_isSet = false;
    m_estimated_monthly_savings_percentage_isValid = false;

    m_estimated_monthly_on_demand_cost_isSet = false;
    m_estimated_monthly_on_demand_cost_isValid = false;

    m_estimated_reservation_cost_for_lookback_period_isSet = false;
    m_estimated_reservation_cost_for_lookback_period_isValid = false;

    m_upfront_cost_isSet = false;
    m_upfront_cost_isValid = false;

    m_recurring_standard_monthly_cost_isSet = false;
    m_recurring_standard_monthly_cost_isValid = false;
}

void OAIReservationPurchaseRecommendationDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservationPurchaseRecommendationDetail::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_instance_details_isValid = ::OpenAPI::fromJsonValue(m_instance_details, json[QString("InstanceDetails")]);
    m_instance_details_isSet = !json[QString("InstanceDetails")].isNull() && m_instance_details_isValid;

    m_recommended_number_of_instances_to_purchase_isValid = ::OpenAPI::fromJsonValue(m_recommended_number_of_instances_to_purchase, json[QString("RecommendedNumberOfInstancesToPurchase")]);
    m_recommended_number_of_instances_to_purchase_isSet = !json[QString("RecommendedNumberOfInstancesToPurchase")].isNull() && m_recommended_number_of_instances_to_purchase_isValid;

    m_recommended_normalized_units_to_purchase_isValid = ::OpenAPI::fromJsonValue(m_recommended_normalized_units_to_purchase, json[QString("RecommendedNormalizedUnitsToPurchase")]);
    m_recommended_normalized_units_to_purchase_isSet = !json[QString("RecommendedNormalizedUnitsToPurchase")].isNull() && m_recommended_normalized_units_to_purchase_isValid;

    m_minimum_number_of_instances_used_per_hour_isValid = ::OpenAPI::fromJsonValue(m_minimum_number_of_instances_used_per_hour, json[QString("MinimumNumberOfInstancesUsedPerHour")]);
    m_minimum_number_of_instances_used_per_hour_isSet = !json[QString("MinimumNumberOfInstancesUsedPerHour")].isNull() && m_minimum_number_of_instances_used_per_hour_isValid;

    m_minimum_normalized_units_used_per_hour_isValid = ::OpenAPI::fromJsonValue(m_minimum_normalized_units_used_per_hour, json[QString("MinimumNormalizedUnitsUsedPerHour")]);
    m_minimum_normalized_units_used_per_hour_isSet = !json[QString("MinimumNormalizedUnitsUsedPerHour")].isNull() && m_minimum_normalized_units_used_per_hour_isValid;

    m_maximum_number_of_instances_used_per_hour_isValid = ::OpenAPI::fromJsonValue(m_maximum_number_of_instances_used_per_hour, json[QString("MaximumNumberOfInstancesUsedPerHour")]);
    m_maximum_number_of_instances_used_per_hour_isSet = !json[QString("MaximumNumberOfInstancesUsedPerHour")].isNull() && m_maximum_number_of_instances_used_per_hour_isValid;

    m_maximum_normalized_units_used_per_hour_isValid = ::OpenAPI::fromJsonValue(m_maximum_normalized_units_used_per_hour, json[QString("MaximumNormalizedUnitsUsedPerHour")]);
    m_maximum_normalized_units_used_per_hour_isSet = !json[QString("MaximumNormalizedUnitsUsedPerHour")].isNull() && m_maximum_normalized_units_used_per_hour_isValid;

    m_average_number_of_instances_used_per_hour_isValid = ::OpenAPI::fromJsonValue(m_average_number_of_instances_used_per_hour, json[QString("AverageNumberOfInstancesUsedPerHour")]);
    m_average_number_of_instances_used_per_hour_isSet = !json[QString("AverageNumberOfInstancesUsedPerHour")].isNull() && m_average_number_of_instances_used_per_hour_isValid;

    m_average_normalized_units_used_per_hour_isValid = ::OpenAPI::fromJsonValue(m_average_normalized_units_used_per_hour, json[QString("AverageNormalizedUnitsUsedPerHour")]);
    m_average_normalized_units_used_per_hour_isSet = !json[QString("AverageNormalizedUnitsUsedPerHour")].isNull() && m_average_normalized_units_used_per_hour_isValid;

    m_average_utilization_isValid = ::OpenAPI::fromJsonValue(m_average_utilization, json[QString("AverageUtilization")]);
    m_average_utilization_isSet = !json[QString("AverageUtilization")].isNull() && m_average_utilization_isValid;

    m_estimated_break_even_in_months_isValid = ::OpenAPI::fromJsonValue(m_estimated_break_even_in_months, json[QString("EstimatedBreakEvenInMonths")]);
    m_estimated_break_even_in_months_isSet = !json[QString("EstimatedBreakEvenInMonths")].isNull() && m_estimated_break_even_in_months_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_estimated_monthly_savings_amount_isValid = ::OpenAPI::fromJsonValue(m_estimated_monthly_savings_amount, json[QString("EstimatedMonthlySavingsAmount")]);
    m_estimated_monthly_savings_amount_isSet = !json[QString("EstimatedMonthlySavingsAmount")].isNull() && m_estimated_monthly_savings_amount_isValid;

    m_estimated_monthly_savings_percentage_isValid = ::OpenAPI::fromJsonValue(m_estimated_monthly_savings_percentage, json[QString("EstimatedMonthlySavingsPercentage")]);
    m_estimated_monthly_savings_percentage_isSet = !json[QString("EstimatedMonthlySavingsPercentage")].isNull() && m_estimated_monthly_savings_percentage_isValid;

    m_estimated_monthly_on_demand_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_monthly_on_demand_cost, json[QString("EstimatedMonthlyOnDemandCost")]);
    m_estimated_monthly_on_demand_cost_isSet = !json[QString("EstimatedMonthlyOnDemandCost")].isNull() && m_estimated_monthly_on_demand_cost_isValid;

    m_estimated_reservation_cost_for_lookback_period_isValid = ::OpenAPI::fromJsonValue(m_estimated_reservation_cost_for_lookback_period, json[QString("EstimatedReservationCostForLookbackPeriod")]);
    m_estimated_reservation_cost_for_lookback_period_isSet = !json[QString("EstimatedReservationCostForLookbackPeriod")].isNull() && m_estimated_reservation_cost_for_lookback_period_isValid;

    m_upfront_cost_isValid = ::OpenAPI::fromJsonValue(m_upfront_cost, json[QString("UpfrontCost")]);
    m_upfront_cost_isSet = !json[QString("UpfrontCost")].isNull() && m_upfront_cost_isValid;

    m_recurring_standard_monthly_cost_isValid = ::OpenAPI::fromJsonValue(m_recurring_standard_monthly_cost, json[QString("RecurringStandardMonthlyCost")]);
    m_recurring_standard_monthly_cost_isSet = !json[QString("RecurringStandardMonthlyCost")].isNull() && m_recurring_standard_monthly_cost_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservationPurchaseRecommendationDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_instance_details.isSet()) {
        obj.insert(QString("InstanceDetails"), ::OpenAPI::toJsonValue(m_instance_details));
    }
    if (m_recommended_number_of_instances_to_purchase_isSet) {
        obj.insert(QString("RecommendedNumberOfInstancesToPurchase"), ::OpenAPI::toJsonValue(m_recommended_number_of_instances_to_purchase));
    }
    if (m_recommended_normalized_units_to_purchase_isSet) {
        obj.insert(QString("RecommendedNormalizedUnitsToPurchase"), ::OpenAPI::toJsonValue(m_recommended_normalized_units_to_purchase));
    }
    if (m_minimum_number_of_instances_used_per_hour_isSet) {
        obj.insert(QString("MinimumNumberOfInstancesUsedPerHour"), ::OpenAPI::toJsonValue(m_minimum_number_of_instances_used_per_hour));
    }
    if (m_minimum_normalized_units_used_per_hour_isSet) {
        obj.insert(QString("MinimumNormalizedUnitsUsedPerHour"), ::OpenAPI::toJsonValue(m_minimum_normalized_units_used_per_hour));
    }
    if (m_maximum_number_of_instances_used_per_hour_isSet) {
        obj.insert(QString("MaximumNumberOfInstancesUsedPerHour"), ::OpenAPI::toJsonValue(m_maximum_number_of_instances_used_per_hour));
    }
    if (m_maximum_normalized_units_used_per_hour_isSet) {
        obj.insert(QString("MaximumNormalizedUnitsUsedPerHour"), ::OpenAPI::toJsonValue(m_maximum_normalized_units_used_per_hour));
    }
    if (m_average_number_of_instances_used_per_hour_isSet) {
        obj.insert(QString("AverageNumberOfInstancesUsedPerHour"), ::OpenAPI::toJsonValue(m_average_number_of_instances_used_per_hour));
    }
    if (m_average_normalized_units_used_per_hour_isSet) {
        obj.insert(QString("AverageNormalizedUnitsUsedPerHour"), ::OpenAPI::toJsonValue(m_average_normalized_units_used_per_hour));
    }
    if (m_average_utilization_isSet) {
        obj.insert(QString("AverageUtilization"), ::OpenAPI::toJsonValue(m_average_utilization));
    }
    if (m_estimated_break_even_in_months_isSet) {
        obj.insert(QString("EstimatedBreakEvenInMonths"), ::OpenAPI::toJsonValue(m_estimated_break_even_in_months));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_estimated_monthly_savings_amount_isSet) {
        obj.insert(QString("EstimatedMonthlySavingsAmount"), ::OpenAPI::toJsonValue(m_estimated_monthly_savings_amount));
    }
    if (m_estimated_monthly_savings_percentage_isSet) {
        obj.insert(QString("EstimatedMonthlySavingsPercentage"), ::OpenAPI::toJsonValue(m_estimated_monthly_savings_percentage));
    }
    if (m_estimated_monthly_on_demand_cost_isSet) {
        obj.insert(QString("EstimatedMonthlyOnDemandCost"), ::OpenAPI::toJsonValue(m_estimated_monthly_on_demand_cost));
    }
    if (m_estimated_reservation_cost_for_lookback_period_isSet) {
        obj.insert(QString("EstimatedReservationCostForLookbackPeriod"), ::OpenAPI::toJsonValue(m_estimated_reservation_cost_for_lookback_period));
    }
    if (m_upfront_cost_isSet) {
        obj.insert(QString("UpfrontCost"), ::OpenAPI::toJsonValue(m_upfront_cost));
    }
    if (m_recurring_standard_monthly_cost_isSet) {
        obj.insert(QString("RecurringStandardMonthlyCost"), ::OpenAPI::toJsonValue(m_recurring_standard_monthly_cost));
    }
    return obj;
}

QString OAIReservationPurchaseRecommendationDetail::getAccountId() const {
    return m_account_id;
}
void OAIReservationPurchaseRecommendationDetail::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIReservationPurchaseRecommendationDetail_InstanceDetails OAIReservationPurchaseRecommendationDetail::getInstanceDetails() const {
    return m_instance_details;
}
void OAIReservationPurchaseRecommendationDetail::setInstanceDetails(const OAIReservationPurchaseRecommendationDetail_InstanceDetails &instance_details) {
    m_instance_details = instance_details;
    m_instance_details_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_instance_details_Set() const{
    return m_instance_details_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_instance_details_Valid() const{
    return m_instance_details_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getRecommendedNumberOfInstancesToPurchase() const {
    return m_recommended_number_of_instances_to_purchase;
}
void OAIReservationPurchaseRecommendationDetail::setRecommendedNumberOfInstancesToPurchase(const QString &recommended_number_of_instances_to_purchase) {
    m_recommended_number_of_instances_to_purchase = recommended_number_of_instances_to_purchase;
    m_recommended_number_of_instances_to_purchase_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_recommended_number_of_instances_to_purchase_Set() const{
    return m_recommended_number_of_instances_to_purchase_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_recommended_number_of_instances_to_purchase_Valid() const{
    return m_recommended_number_of_instances_to_purchase_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getRecommendedNormalizedUnitsToPurchase() const {
    return m_recommended_normalized_units_to_purchase;
}
void OAIReservationPurchaseRecommendationDetail::setRecommendedNormalizedUnitsToPurchase(const QString &recommended_normalized_units_to_purchase) {
    m_recommended_normalized_units_to_purchase = recommended_normalized_units_to_purchase;
    m_recommended_normalized_units_to_purchase_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_recommended_normalized_units_to_purchase_Set() const{
    return m_recommended_normalized_units_to_purchase_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_recommended_normalized_units_to_purchase_Valid() const{
    return m_recommended_normalized_units_to_purchase_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getMinimumNumberOfInstancesUsedPerHour() const {
    return m_minimum_number_of_instances_used_per_hour;
}
void OAIReservationPurchaseRecommendationDetail::setMinimumNumberOfInstancesUsedPerHour(const QString &minimum_number_of_instances_used_per_hour) {
    m_minimum_number_of_instances_used_per_hour = minimum_number_of_instances_used_per_hour;
    m_minimum_number_of_instances_used_per_hour_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_minimum_number_of_instances_used_per_hour_Set() const{
    return m_minimum_number_of_instances_used_per_hour_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_minimum_number_of_instances_used_per_hour_Valid() const{
    return m_minimum_number_of_instances_used_per_hour_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getMinimumNormalizedUnitsUsedPerHour() const {
    return m_minimum_normalized_units_used_per_hour;
}
void OAIReservationPurchaseRecommendationDetail::setMinimumNormalizedUnitsUsedPerHour(const QString &minimum_normalized_units_used_per_hour) {
    m_minimum_normalized_units_used_per_hour = minimum_normalized_units_used_per_hour;
    m_minimum_normalized_units_used_per_hour_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_minimum_normalized_units_used_per_hour_Set() const{
    return m_minimum_normalized_units_used_per_hour_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_minimum_normalized_units_used_per_hour_Valid() const{
    return m_minimum_normalized_units_used_per_hour_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getMaximumNumberOfInstancesUsedPerHour() const {
    return m_maximum_number_of_instances_used_per_hour;
}
void OAIReservationPurchaseRecommendationDetail::setMaximumNumberOfInstancesUsedPerHour(const QString &maximum_number_of_instances_used_per_hour) {
    m_maximum_number_of_instances_used_per_hour = maximum_number_of_instances_used_per_hour;
    m_maximum_number_of_instances_used_per_hour_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_maximum_number_of_instances_used_per_hour_Set() const{
    return m_maximum_number_of_instances_used_per_hour_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_maximum_number_of_instances_used_per_hour_Valid() const{
    return m_maximum_number_of_instances_used_per_hour_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getMaximumNormalizedUnitsUsedPerHour() const {
    return m_maximum_normalized_units_used_per_hour;
}
void OAIReservationPurchaseRecommendationDetail::setMaximumNormalizedUnitsUsedPerHour(const QString &maximum_normalized_units_used_per_hour) {
    m_maximum_normalized_units_used_per_hour = maximum_normalized_units_used_per_hour;
    m_maximum_normalized_units_used_per_hour_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_maximum_normalized_units_used_per_hour_Set() const{
    return m_maximum_normalized_units_used_per_hour_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_maximum_normalized_units_used_per_hour_Valid() const{
    return m_maximum_normalized_units_used_per_hour_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getAverageNumberOfInstancesUsedPerHour() const {
    return m_average_number_of_instances_used_per_hour;
}
void OAIReservationPurchaseRecommendationDetail::setAverageNumberOfInstancesUsedPerHour(const QString &average_number_of_instances_used_per_hour) {
    m_average_number_of_instances_used_per_hour = average_number_of_instances_used_per_hour;
    m_average_number_of_instances_used_per_hour_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_average_number_of_instances_used_per_hour_Set() const{
    return m_average_number_of_instances_used_per_hour_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_average_number_of_instances_used_per_hour_Valid() const{
    return m_average_number_of_instances_used_per_hour_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getAverageNormalizedUnitsUsedPerHour() const {
    return m_average_normalized_units_used_per_hour;
}
void OAIReservationPurchaseRecommendationDetail::setAverageNormalizedUnitsUsedPerHour(const QString &average_normalized_units_used_per_hour) {
    m_average_normalized_units_used_per_hour = average_normalized_units_used_per_hour;
    m_average_normalized_units_used_per_hour_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_average_normalized_units_used_per_hour_Set() const{
    return m_average_normalized_units_used_per_hour_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_average_normalized_units_used_per_hour_Valid() const{
    return m_average_normalized_units_used_per_hour_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getAverageUtilization() const {
    return m_average_utilization;
}
void OAIReservationPurchaseRecommendationDetail::setAverageUtilization(const QString &average_utilization) {
    m_average_utilization = average_utilization;
    m_average_utilization_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_average_utilization_Set() const{
    return m_average_utilization_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_average_utilization_Valid() const{
    return m_average_utilization_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getEstimatedBreakEvenInMonths() const {
    return m_estimated_break_even_in_months;
}
void OAIReservationPurchaseRecommendationDetail::setEstimatedBreakEvenInMonths(const QString &estimated_break_even_in_months) {
    m_estimated_break_even_in_months = estimated_break_even_in_months;
    m_estimated_break_even_in_months_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_estimated_break_even_in_months_Set() const{
    return m_estimated_break_even_in_months_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_estimated_break_even_in_months_Valid() const{
    return m_estimated_break_even_in_months_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getCurrencyCode() const {
    return m_currency_code;
}
void OAIReservationPurchaseRecommendationDetail::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getEstimatedMonthlySavingsAmount() const {
    return m_estimated_monthly_savings_amount;
}
void OAIReservationPurchaseRecommendationDetail::setEstimatedMonthlySavingsAmount(const QString &estimated_monthly_savings_amount) {
    m_estimated_monthly_savings_amount = estimated_monthly_savings_amount;
    m_estimated_monthly_savings_amount_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_estimated_monthly_savings_amount_Set() const{
    return m_estimated_monthly_savings_amount_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_estimated_monthly_savings_amount_Valid() const{
    return m_estimated_monthly_savings_amount_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getEstimatedMonthlySavingsPercentage() const {
    return m_estimated_monthly_savings_percentage;
}
void OAIReservationPurchaseRecommendationDetail::setEstimatedMonthlySavingsPercentage(const QString &estimated_monthly_savings_percentage) {
    m_estimated_monthly_savings_percentage = estimated_monthly_savings_percentage;
    m_estimated_monthly_savings_percentage_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_estimated_monthly_savings_percentage_Set() const{
    return m_estimated_monthly_savings_percentage_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_estimated_monthly_savings_percentage_Valid() const{
    return m_estimated_monthly_savings_percentage_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getEstimatedMonthlyOnDemandCost() const {
    return m_estimated_monthly_on_demand_cost;
}
void OAIReservationPurchaseRecommendationDetail::setEstimatedMonthlyOnDemandCost(const QString &estimated_monthly_on_demand_cost) {
    m_estimated_monthly_on_demand_cost = estimated_monthly_on_demand_cost;
    m_estimated_monthly_on_demand_cost_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_estimated_monthly_on_demand_cost_Set() const{
    return m_estimated_monthly_on_demand_cost_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_estimated_monthly_on_demand_cost_Valid() const{
    return m_estimated_monthly_on_demand_cost_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getEstimatedReservationCostForLookbackPeriod() const {
    return m_estimated_reservation_cost_for_lookback_period;
}
void OAIReservationPurchaseRecommendationDetail::setEstimatedReservationCostForLookbackPeriod(const QString &estimated_reservation_cost_for_lookback_period) {
    m_estimated_reservation_cost_for_lookback_period = estimated_reservation_cost_for_lookback_period;
    m_estimated_reservation_cost_for_lookback_period_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_estimated_reservation_cost_for_lookback_period_Set() const{
    return m_estimated_reservation_cost_for_lookback_period_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_estimated_reservation_cost_for_lookback_period_Valid() const{
    return m_estimated_reservation_cost_for_lookback_period_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getUpfrontCost() const {
    return m_upfront_cost;
}
void OAIReservationPurchaseRecommendationDetail::setUpfrontCost(const QString &upfront_cost) {
    m_upfront_cost = upfront_cost;
    m_upfront_cost_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_upfront_cost_Set() const{
    return m_upfront_cost_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_upfront_cost_Valid() const{
    return m_upfront_cost_isValid;
}

QString OAIReservationPurchaseRecommendationDetail::getRecurringStandardMonthlyCost() const {
    return m_recurring_standard_monthly_cost;
}
void OAIReservationPurchaseRecommendationDetail::setRecurringStandardMonthlyCost(const QString &recurring_standard_monthly_cost) {
    m_recurring_standard_monthly_cost = recurring_standard_monthly_cost;
    m_recurring_standard_monthly_cost_isSet = true;
}

bool OAIReservationPurchaseRecommendationDetail::is_recurring_standard_monthly_cost_Set() const{
    return m_recurring_standard_monthly_cost_isSet;
}

bool OAIReservationPurchaseRecommendationDetail::is_recurring_standard_monthly_cost_Valid() const{
    return m_recurring_standard_monthly_cost_isValid;
}

bool OAIReservationPurchaseRecommendationDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_number_of_instances_to_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_normalized_units_to_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_number_of_instances_used_per_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_normalized_units_used_per_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_number_of_instances_used_per_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_normalized_units_used_per_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_number_of_instances_used_per_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_normalized_units_used_per_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_break_even_in_months_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_monthly_savings_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_monthly_savings_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_monthly_on_demand_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_reservation_cost_for_lookback_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upfront_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_standard_monthly_cost_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservationPurchaseRecommendationDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
