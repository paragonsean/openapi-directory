/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSavingsPlanPurchaseRecommendationDetailsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::OAIGetSavingsPlanPurchaseRecommendationDetailsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::OAIGetSavingsPlanPurchaseRecommendationDetailsResponse() {
    this->initializeModel();
}

OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::~OAIGetSavingsPlanPurchaseRecommendationDetailsResponse() {}

void OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::initializeModel() {

    m_recommendation_detail_id_isSet = false;
    m_recommendation_detail_id_isValid = false;

    m_recommendation_detail_data_isSet = false;
    m_recommendation_detail_data_isValid = false;
}

void OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::fromJsonObject(QJsonObject json) {

    m_recommendation_detail_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_detail_id, json[QString("RecommendationDetailId")]);
    m_recommendation_detail_id_isSet = !json[QString("RecommendationDetailId")].isNull() && m_recommendation_detail_id_isValid;

    m_recommendation_detail_data_isValid = ::OpenAPI::fromJsonValue(m_recommendation_detail_data, json[QString("RecommendationDetailData")]);
    m_recommendation_detail_data_isSet = !json[QString("RecommendationDetailData")].isNull() && m_recommendation_detail_data_isValid;
}

QString OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_recommendation_detail_id_isSet) {
        obj.insert(QString("RecommendationDetailId"), ::OpenAPI::toJsonValue(m_recommendation_detail_id));
    }
    if (m_recommendation_detail_data.isSet()) {
        obj.insert(QString("RecommendationDetailData"), ::OpenAPI::toJsonValue(m_recommendation_detail_data));
    }
    return obj;
}

QString OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::getRecommendationDetailId() const {
    return m_recommendation_detail_id;
}
void OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::setRecommendationDetailId(const QString &recommendation_detail_id) {
    m_recommendation_detail_id = recommendation_detail_id;
    m_recommendation_detail_id_isSet = true;
}

bool OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::is_recommendation_detail_id_Set() const{
    return m_recommendation_detail_id_isSet;
}

bool OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::is_recommendation_detail_id_Valid() const{
    return m_recommendation_detail_id_isValid;
}

OAIGetSavingsPlanPurchaseRecommendationDetailsResponse_RecommendationDetailData OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::getRecommendationDetailData() const {
    return m_recommendation_detail_data;
}
void OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::setRecommendationDetailData(const OAIGetSavingsPlanPurchaseRecommendationDetailsResponse_RecommendationDetailData &recommendation_detail_data) {
    m_recommendation_detail_data = recommendation_detail_data;
    m_recommendation_detail_data_isSet = true;
}

bool OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::is_recommendation_detail_data_Set() const{
    return m_recommendation_detail_data_isSet;
}

bool OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::is_recommendation_detail_data_Valid() const{
    return m_recommendation_detail_data_isValid;
}

bool OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recommendation_detail_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_detail_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSavingsPlanPurchaseRecommendationDetailsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
