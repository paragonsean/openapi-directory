/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetSavingsPlansUtilizationResponse_Total.h
 *
 * 
 */

#ifndef OAIGetSavingsPlansUtilizationResponse_Total_H
#define OAIGetSavingsPlansUtilizationResponse_Total_H

#include <QJsonObject>

#include "OAISavingsPlansUtilizationAggregates_AmortizedCommitment.h"
#include "OAISavingsPlansUtilizationAggregates_Savings.h"
#include "OAISavingsPlansUtilizationAggregates_Utilization.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISavingsPlansUtilizationAggregates_Utilization;
class OAISavingsPlansUtilizationAggregates_Savings;
class OAISavingsPlansUtilizationAggregates_AmortizedCommitment;

class OAIGetSavingsPlansUtilizationResponse_Total : public OAIObject {
public:
    OAIGetSavingsPlansUtilizationResponse_Total();
    OAIGetSavingsPlansUtilizationResponse_Total(QString json);
    ~OAIGetSavingsPlansUtilizationResponse_Total() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISavingsPlansUtilizationAggregates_Utilization getUtilization() const;
    void setUtilization(const OAISavingsPlansUtilizationAggregates_Utilization &utilization);
    bool is_utilization_Set() const;
    bool is_utilization_Valid() const;

    OAISavingsPlansUtilizationAggregates_Savings getSavings() const;
    void setSavings(const OAISavingsPlansUtilizationAggregates_Savings &savings);
    bool is_savings_Set() const;
    bool is_savings_Valid() const;

    OAISavingsPlansUtilizationAggregates_AmortizedCommitment getAmortizedCommitment() const;
    void setAmortizedCommitment(const OAISavingsPlansUtilizationAggregates_AmortizedCommitment &amortized_commitment);
    bool is_amortized_commitment_Set() const;
    bool is_amortized_commitment_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISavingsPlansUtilizationAggregates_Utilization m_utilization;
    bool m_utilization_isSet;
    bool m_utilization_isValid;

    OAISavingsPlansUtilizationAggregates_Savings m_savings;
    bool m_savings_isSet;
    bool m_savings_isValid;

    OAISavingsPlansUtilizationAggregates_AmortizedCommitment m_amortized_commitment;
    bool m_amortized_commitment_isSet;
    bool m_amortized_commitment_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetSavingsPlansUtilizationResponse_Total)

#endif // OAIGetSavingsPlansUtilizationResponse_Total_H
