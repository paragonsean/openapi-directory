/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAnomalySubscriptionRequest.h
 *
 * 
 */

#ifndef OAICreateAnomalySubscriptionRequest_H
#define OAICreateAnomalySubscriptionRequest_H

#include <QJsonObject>

#include "OAICreateAnomalySubscriptionRequest_AnomalySubscription.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateAnomalySubscriptionRequest_AnomalySubscription;

class OAICreateAnomalySubscriptionRequest : public OAIObject {
public:
    OAICreateAnomalySubscriptionRequest();
    OAICreateAnomalySubscriptionRequest(QString json);
    ~OAICreateAnomalySubscriptionRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICreateAnomalySubscriptionRequest_AnomalySubscription getAnomalySubscription() const;
    void setAnomalySubscription(const OAICreateAnomalySubscriptionRequest_AnomalySubscription &anomaly_subscription);
    bool is_anomaly_subscription_Set() const;
    bool is_anomaly_subscription_Valid() const;

    QList getResourceTags() const;
    void setResourceTags(const QList &resource_tags);
    bool is_resource_tags_Set() const;
    bool is_resource_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICreateAnomalySubscriptionRequest_AnomalySubscription m_anomaly_subscription;
    bool m_anomaly_subscription_isSet;
    bool m_anomaly_subscription_isValid;

    QList m_resource_tags;
    bool m_resource_tags_isSet;
    bool m_resource_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAnomalySubscriptionRequest)

#endif // OAICreateAnomalySubscriptionRequest_H
