/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnomaly.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnomaly::OAIAnomaly(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnomaly::OAIAnomaly() {
    this->initializeModel();
}

OAIAnomaly::~OAIAnomaly() {}

void OAIAnomaly::initializeModel() {

    m_anomaly_id_isSet = false;
    m_anomaly_id_isValid = false;

    m_anomaly_start_date_isSet = false;
    m_anomaly_start_date_isValid = false;

    m_anomaly_end_date_isSet = false;
    m_anomaly_end_date_isValid = false;

    m_dimension_value_isSet = false;
    m_dimension_value_isValid = false;

    m_root_causes_isSet = false;
    m_root_causes_isValid = false;

    m_anomaly_score_isSet = false;
    m_anomaly_score_isValid = false;

    m_impact_isSet = false;
    m_impact_isValid = false;

    m_monitor_arn_isSet = false;
    m_monitor_arn_isValid = false;

    m_feedback_isSet = false;
    m_feedback_isValid = false;
}

void OAIAnomaly::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnomaly::fromJsonObject(QJsonObject json) {

    m_anomaly_id_isValid = ::OpenAPI::fromJsonValue(m_anomaly_id, json[QString("AnomalyId")]);
    m_anomaly_id_isSet = !json[QString("AnomalyId")].isNull() && m_anomaly_id_isValid;

    m_anomaly_start_date_isValid = ::OpenAPI::fromJsonValue(m_anomaly_start_date, json[QString("AnomalyStartDate")]);
    m_anomaly_start_date_isSet = !json[QString("AnomalyStartDate")].isNull() && m_anomaly_start_date_isValid;

    m_anomaly_end_date_isValid = ::OpenAPI::fromJsonValue(m_anomaly_end_date, json[QString("AnomalyEndDate")]);
    m_anomaly_end_date_isSet = !json[QString("AnomalyEndDate")].isNull() && m_anomaly_end_date_isValid;

    m_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_dimension_value, json[QString("DimensionValue")]);
    m_dimension_value_isSet = !json[QString("DimensionValue")].isNull() && m_dimension_value_isValid;

    m_root_causes_isValid = ::OpenAPI::fromJsonValue(m_root_causes, json[QString("RootCauses")]);
    m_root_causes_isSet = !json[QString("RootCauses")].isNull() && m_root_causes_isValid;

    m_anomaly_score_isValid = ::OpenAPI::fromJsonValue(m_anomaly_score, json[QString("AnomalyScore")]);
    m_anomaly_score_isSet = !json[QString("AnomalyScore")].isNull() && m_anomaly_score_isValid;

    m_impact_isValid = ::OpenAPI::fromJsonValue(m_impact, json[QString("Impact")]);
    m_impact_isSet = !json[QString("Impact")].isNull() && m_impact_isValid;

    m_monitor_arn_isValid = ::OpenAPI::fromJsonValue(m_monitor_arn, json[QString("MonitorArn")]);
    m_monitor_arn_isSet = !json[QString("MonitorArn")].isNull() && m_monitor_arn_isValid;

    m_feedback_isValid = ::OpenAPI::fromJsonValue(m_feedback, json[QString("Feedback")]);
    m_feedback_isSet = !json[QString("Feedback")].isNull() && m_feedback_isValid;
}

QString OAIAnomaly::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnomaly::asJsonObject() const {
    QJsonObject obj;
    if (m_anomaly_id_isSet) {
        obj.insert(QString("AnomalyId"), ::OpenAPI::toJsonValue(m_anomaly_id));
    }
    if (m_anomaly_start_date_isSet) {
        obj.insert(QString("AnomalyStartDate"), ::OpenAPI::toJsonValue(m_anomaly_start_date));
    }
    if (m_anomaly_end_date_isSet) {
        obj.insert(QString("AnomalyEndDate"), ::OpenAPI::toJsonValue(m_anomaly_end_date));
    }
    if (m_dimension_value_isSet) {
        obj.insert(QString("DimensionValue"), ::OpenAPI::toJsonValue(m_dimension_value));
    }
    if (m_root_causes.isSet()) {
        obj.insert(QString("RootCauses"), ::OpenAPI::toJsonValue(m_root_causes));
    }
    if (m_anomaly_score.isSet()) {
        obj.insert(QString("AnomalyScore"), ::OpenAPI::toJsonValue(m_anomaly_score));
    }
    if (m_impact.isSet()) {
        obj.insert(QString("Impact"), ::OpenAPI::toJsonValue(m_impact));
    }
    if (m_monitor_arn_isSet) {
        obj.insert(QString("MonitorArn"), ::OpenAPI::toJsonValue(m_monitor_arn));
    }
    if (m_feedback.isSet()) {
        obj.insert(QString("Feedback"), ::OpenAPI::toJsonValue(m_feedback));
    }
    return obj;
}

QString OAIAnomaly::getAnomalyId() const {
    return m_anomaly_id;
}
void OAIAnomaly::setAnomalyId(const QString &anomaly_id) {
    m_anomaly_id = anomaly_id;
    m_anomaly_id_isSet = true;
}

bool OAIAnomaly::is_anomaly_id_Set() const{
    return m_anomaly_id_isSet;
}

bool OAIAnomaly::is_anomaly_id_Valid() const{
    return m_anomaly_id_isValid;
}

QString OAIAnomaly::getAnomalyStartDate() const {
    return m_anomaly_start_date;
}
void OAIAnomaly::setAnomalyStartDate(const QString &anomaly_start_date) {
    m_anomaly_start_date = anomaly_start_date;
    m_anomaly_start_date_isSet = true;
}

bool OAIAnomaly::is_anomaly_start_date_Set() const{
    return m_anomaly_start_date_isSet;
}

bool OAIAnomaly::is_anomaly_start_date_Valid() const{
    return m_anomaly_start_date_isValid;
}

QString OAIAnomaly::getAnomalyEndDate() const {
    return m_anomaly_end_date;
}
void OAIAnomaly::setAnomalyEndDate(const QString &anomaly_end_date) {
    m_anomaly_end_date = anomaly_end_date;
    m_anomaly_end_date_isSet = true;
}

bool OAIAnomaly::is_anomaly_end_date_Set() const{
    return m_anomaly_end_date_isSet;
}

bool OAIAnomaly::is_anomaly_end_date_Valid() const{
    return m_anomaly_end_date_isValid;
}

QString OAIAnomaly::getDimensionValue() const {
    return m_dimension_value;
}
void OAIAnomaly::setDimensionValue(const QString &dimension_value) {
    m_dimension_value = dimension_value;
    m_dimension_value_isSet = true;
}

bool OAIAnomaly::is_dimension_value_Set() const{
    return m_dimension_value_isSet;
}

bool OAIAnomaly::is_dimension_value_Valid() const{
    return m_dimension_value_isValid;
}

QList OAIAnomaly::getRootCauses() const {
    return m_root_causes;
}
void OAIAnomaly::setRootCauses(const QList &root_causes) {
    m_root_causes = root_causes;
    m_root_causes_isSet = true;
}

bool OAIAnomaly::is_root_causes_Set() const{
    return m_root_causes_isSet;
}

bool OAIAnomaly::is_root_causes_Valid() const{
    return m_root_causes_isValid;
}

OAIAnomaly_AnomalyScore OAIAnomaly::getAnomalyScore() const {
    return m_anomaly_score;
}
void OAIAnomaly::setAnomalyScore(const OAIAnomaly_AnomalyScore &anomaly_score) {
    m_anomaly_score = anomaly_score;
    m_anomaly_score_isSet = true;
}

bool OAIAnomaly::is_anomaly_score_Set() const{
    return m_anomaly_score_isSet;
}

bool OAIAnomaly::is_anomaly_score_Valid() const{
    return m_anomaly_score_isValid;
}

OAIAnomaly_Impact OAIAnomaly::getImpact() const {
    return m_impact;
}
void OAIAnomaly::setImpact(const OAIAnomaly_Impact &impact) {
    m_impact = impact;
    m_impact_isSet = true;
}

bool OAIAnomaly::is_impact_Set() const{
    return m_impact_isSet;
}

bool OAIAnomaly::is_impact_Valid() const{
    return m_impact_isValid;
}

QString OAIAnomaly::getMonitorArn() const {
    return m_monitor_arn;
}
void OAIAnomaly::setMonitorArn(const QString &monitor_arn) {
    m_monitor_arn = monitor_arn;
    m_monitor_arn_isSet = true;
}

bool OAIAnomaly::is_monitor_arn_Set() const{
    return m_monitor_arn_isSet;
}

bool OAIAnomaly::is_monitor_arn_Valid() const{
    return m_monitor_arn_isValid;
}

OAIAnomalyFeedbackType OAIAnomaly::getFeedback() const {
    return m_feedback;
}
void OAIAnomaly::setFeedback(const OAIAnomalyFeedbackType &feedback) {
    m_feedback = feedback;
    m_feedback_isSet = true;
}

bool OAIAnomaly::is_feedback_Set() const{
    return m_feedback_isSet;
}

bool OAIAnomaly::is_feedback_Valid() const{
    return m_feedback_isValid;
}

bool OAIAnomaly::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anomaly_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_causes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_impact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnomaly::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_anomaly_id_isValid && m_anomaly_score_isValid && m_impact_isValid && m_monitor_arn_isValid && true;
}

} // namespace OpenAPI
