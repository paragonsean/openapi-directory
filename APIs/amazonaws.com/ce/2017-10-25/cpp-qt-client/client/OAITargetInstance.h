/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITargetInstance.h
 *
 * Details on recommended instance.
 */

#ifndef OAITargetInstance_H
#define OAITargetInstance_H

#include <QJsonObject>

#include "OAITargetInstance_ExpectedResourceUtilization.h"
#include "OAITargetInstance_ResourceDetails.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITargetInstance_ResourceDetails;
class OAITargetInstance_ExpectedResourceUtilization;

class OAITargetInstance : public OAIObject {
public:
    OAITargetInstance();
    OAITargetInstance(QString json);
    ~OAITargetInstance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEstimatedMonthlyCost() const;
    void setEstimatedMonthlyCost(const QString &estimated_monthly_cost);
    bool is_estimated_monthly_cost_Set() const;
    bool is_estimated_monthly_cost_Valid() const;

    QString getEstimatedMonthlySavings() const;
    void setEstimatedMonthlySavings(const QString &estimated_monthly_savings);
    bool is_estimated_monthly_savings_Set() const;
    bool is_estimated_monthly_savings_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    bool getDefaultTargetInstance() const;
    void setDefaultTargetInstance(const bool &default_target_instance);
    bool is_default_target_instance_Set() const;
    bool is_default_target_instance_Valid() const;

    OAITargetInstance_ResourceDetails getResourceDetails() const;
    void setResourceDetails(const OAITargetInstance_ResourceDetails &resource_details);
    bool is_resource_details_Set() const;
    bool is_resource_details_Valid() const;

    OAITargetInstance_ExpectedResourceUtilization getExpectedResourceUtilization() const;
    void setExpectedResourceUtilization(const OAITargetInstance_ExpectedResourceUtilization &expected_resource_utilization);
    bool is_expected_resource_utilization_Set() const;
    bool is_expected_resource_utilization_Valid() const;

    QList getPlatformDifferences() const;
    void setPlatformDifferences(const QList &platform_differences);
    bool is_platform_differences_Set() const;
    bool is_platform_differences_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_estimated_monthly_cost;
    bool m_estimated_monthly_cost_isSet;
    bool m_estimated_monthly_cost_isValid;

    QString m_estimated_monthly_savings;
    bool m_estimated_monthly_savings_isSet;
    bool m_estimated_monthly_savings_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    bool m_default_target_instance;
    bool m_default_target_instance_isSet;
    bool m_default_target_instance_isValid;

    OAITargetInstance_ResourceDetails m_resource_details;
    bool m_resource_details_isSet;
    bool m_resource_details_isValid;

    OAITargetInstance_ExpectedResourceUtilization m_expected_resource_utilization;
    bool m_expected_resource_utilization_isSet;
    bool m_expected_resource_utilization_isValid;

    QList m_platform_differences;
    bool m_platform_differences_isSet;
    bool m_platform_differences_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITargetInstance)

#endif // OAITargetInstance_H
