/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnomalyMonitor.h
 *
 * This object continuously inspects your account&#39;s cost data for anomalies. It&#39;s based on &lt;code&gt;MonitorType&lt;/code&gt; and &lt;code&gt;MonitorSpecification&lt;/code&gt;. The content consists of detailed metadata and the current status of the monitor object. 
 */

#ifndef OAIAnomalyMonitor_H
#define OAIAnomalyMonitor_H

#include <QJsonObject>

#include "OAIExpression.h"
#include "OAIMonitorDimension.h"
#include "OAIMonitorType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExpression;

class OAIAnomalyMonitor : public OAIObject {
public:
    OAIAnomalyMonitor();
    OAIAnomalyMonitor(QString json);
    ~OAIAnomalyMonitor() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMonitorArn() const;
    void setMonitorArn(const QString &monitor_arn);
    bool is_monitor_arn_Set() const;
    bool is_monitor_arn_Valid() const;

    QString getMonitorName() const;
    void setMonitorName(const QString &monitor_name);
    bool is_monitor_name_Set() const;
    bool is_monitor_name_Valid() const;

    QString getCreationDate() const;
    void setCreationDate(const QString &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QString getLastUpdatedDate() const;
    void setLastUpdatedDate(const QString &last_updated_date);
    bool is_last_updated_date_Set() const;
    bool is_last_updated_date_Valid() const;

    QString getLastEvaluatedDate() const;
    void setLastEvaluatedDate(const QString &last_evaluated_date);
    bool is_last_evaluated_date_Set() const;
    bool is_last_evaluated_date_Valid() const;

    OAIMonitorType getMonitorType() const;
    void setMonitorType(const OAIMonitorType &monitor_type);
    bool is_monitor_type_Set() const;
    bool is_monitor_type_Valid() const;

    OAIMonitorDimension getMonitorDimension() const;
    void setMonitorDimension(const OAIMonitorDimension &monitor_dimension);
    bool is_monitor_dimension_Set() const;
    bool is_monitor_dimension_Valid() const;

    OAIExpression getMonitorSpecification() const;
    void setMonitorSpecification(const OAIExpression &monitor_specification);
    bool is_monitor_specification_Set() const;
    bool is_monitor_specification_Valid() const;

    qint32 getDimensionalValueCount() const;
    void setDimensionalValueCount(const qint32 &dimensional_value_count);
    bool is_dimensional_value_count_Set() const;
    bool is_dimensional_value_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_monitor_arn;
    bool m_monitor_arn_isSet;
    bool m_monitor_arn_isValid;

    QString m_monitor_name;
    bool m_monitor_name_isSet;
    bool m_monitor_name_isValid;

    QString m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QString m_last_updated_date;
    bool m_last_updated_date_isSet;
    bool m_last_updated_date_isValid;

    QString m_last_evaluated_date;
    bool m_last_evaluated_date_isSet;
    bool m_last_evaluated_date_isValid;

    OAIMonitorType m_monitor_type;
    bool m_monitor_type_isSet;
    bool m_monitor_type_isValid;

    OAIMonitorDimension m_monitor_dimension;
    bool m_monitor_dimension_isSet;
    bool m_monitor_dimension_isValid;

    OAIExpression m_monitor_specification;
    bool m_monitor_specification_isSet;
    bool m_monitor_specification_isValid;

    qint32 m_dimensional_value_count;
    bool m_dimensional_value_count_isSet;
    bool m_dimensional_value_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnomalyMonitor)

#endif // OAIAnomalyMonitor_H
