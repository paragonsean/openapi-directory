/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceUtilization_EC2ResourceUtilization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceUtilization_EC2ResourceUtilization::OAIResourceUtilization_EC2ResourceUtilization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceUtilization_EC2ResourceUtilization::OAIResourceUtilization_EC2ResourceUtilization() {
    this->initializeModel();
}

OAIResourceUtilization_EC2ResourceUtilization::~OAIResourceUtilization_EC2ResourceUtilization() {}

void OAIResourceUtilization_EC2ResourceUtilization::initializeModel() {

    m_max_cpu_utilization_percentage_isSet = false;
    m_max_cpu_utilization_percentage_isValid = false;

    m_max_memory_utilization_percentage_isSet = false;
    m_max_memory_utilization_percentage_isValid = false;

    m_max_storage_utilization_percentage_isSet = false;
    m_max_storage_utilization_percentage_isValid = false;

    m_ebs_resource_utilization_isSet = false;
    m_ebs_resource_utilization_isValid = false;

    m_disk_resource_utilization_isSet = false;
    m_disk_resource_utilization_isValid = false;

    m_network_resource_utilization_isSet = false;
    m_network_resource_utilization_isValid = false;
}

void OAIResourceUtilization_EC2ResourceUtilization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceUtilization_EC2ResourceUtilization::fromJsonObject(QJsonObject json) {

    m_max_cpu_utilization_percentage_isValid = ::OpenAPI::fromJsonValue(m_max_cpu_utilization_percentage, json[QString("MaxCpuUtilizationPercentage")]);
    m_max_cpu_utilization_percentage_isSet = !json[QString("MaxCpuUtilizationPercentage")].isNull() && m_max_cpu_utilization_percentage_isValid;

    m_max_memory_utilization_percentage_isValid = ::OpenAPI::fromJsonValue(m_max_memory_utilization_percentage, json[QString("MaxMemoryUtilizationPercentage")]);
    m_max_memory_utilization_percentage_isSet = !json[QString("MaxMemoryUtilizationPercentage")].isNull() && m_max_memory_utilization_percentage_isValid;

    m_max_storage_utilization_percentage_isValid = ::OpenAPI::fromJsonValue(m_max_storage_utilization_percentage, json[QString("MaxStorageUtilizationPercentage")]);
    m_max_storage_utilization_percentage_isSet = !json[QString("MaxStorageUtilizationPercentage")].isNull() && m_max_storage_utilization_percentage_isValid;

    m_ebs_resource_utilization_isValid = ::OpenAPI::fromJsonValue(m_ebs_resource_utilization, json[QString("EBSResourceUtilization")]);
    m_ebs_resource_utilization_isSet = !json[QString("EBSResourceUtilization")].isNull() && m_ebs_resource_utilization_isValid;

    m_disk_resource_utilization_isValid = ::OpenAPI::fromJsonValue(m_disk_resource_utilization, json[QString("DiskResourceUtilization")]);
    m_disk_resource_utilization_isSet = !json[QString("DiskResourceUtilization")].isNull() && m_disk_resource_utilization_isValid;

    m_network_resource_utilization_isValid = ::OpenAPI::fromJsonValue(m_network_resource_utilization, json[QString("NetworkResourceUtilization")]);
    m_network_resource_utilization_isSet = !json[QString("NetworkResourceUtilization")].isNull() && m_network_resource_utilization_isValid;
}

QString OAIResourceUtilization_EC2ResourceUtilization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceUtilization_EC2ResourceUtilization::asJsonObject() const {
    QJsonObject obj;
    if (m_max_cpu_utilization_percentage_isSet) {
        obj.insert(QString("MaxCpuUtilizationPercentage"), ::OpenAPI::toJsonValue(m_max_cpu_utilization_percentage));
    }
    if (m_max_memory_utilization_percentage_isSet) {
        obj.insert(QString("MaxMemoryUtilizationPercentage"), ::OpenAPI::toJsonValue(m_max_memory_utilization_percentage));
    }
    if (m_max_storage_utilization_percentage_isSet) {
        obj.insert(QString("MaxStorageUtilizationPercentage"), ::OpenAPI::toJsonValue(m_max_storage_utilization_percentage));
    }
    if (m_ebs_resource_utilization.isSet()) {
        obj.insert(QString("EBSResourceUtilization"), ::OpenAPI::toJsonValue(m_ebs_resource_utilization));
    }
    if (m_disk_resource_utilization.isSet()) {
        obj.insert(QString("DiskResourceUtilization"), ::OpenAPI::toJsonValue(m_disk_resource_utilization));
    }
    if (m_network_resource_utilization.isSet()) {
        obj.insert(QString("NetworkResourceUtilization"), ::OpenAPI::toJsonValue(m_network_resource_utilization));
    }
    return obj;
}

QString OAIResourceUtilization_EC2ResourceUtilization::getMaxCpuUtilizationPercentage() const {
    return m_max_cpu_utilization_percentage;
}
void OAIResourceUtilization_EC2ResourceUtilization::setMaxCpuUtilizationPercentage(const QString &max_cpu_utilization_percentage) {
    m_max_cpu_utilization_percentage = max_cpu_utilization_percentage;
    m_max_cpu_utilization_percentage_isSet = true;
}

bool OAIResourceUtilization_EC2ResourceUtilization::is_max_cpu_utilization_percentage_Set() const{
    return m_max_cpu_utilization_percentage_isSet;
}

bool OAIResourceUtilization_EC2ResourceUtilization::is_max_cpu_utilization_percentage_Valid() const{
    return m_max_cpu_utilization_percentage_isValid;
}

QString OAIResourceUtilization_EC2ResourceUtilization::getMaxMemoryUtilizationPercentage() const {
    return m_max_memory_utilization_percentage;
}
void OAIResourceUtilization_EC2ResourceUtilization::setMaxMemoryUtilizationPercentage(const QString &max_memory_utilization_percentage) {
    m_max_memory_utilization_percentage = max_memory_utilization_percentage;
    m_max_memory_utilization_percentage_isSet = true;
}

bool OAIResourceUtilization_EC2ResourceUtilization::is_max_memory_utilization_percentage_Set() const{
    return m_max_memory_utilization_percentage_isSet;
}

bool OAIResourceUtilization_EC2ResourceUtilization::is_max_memory_utilization_percentage_Valid() const{
    return m_max_memory_utilization_percentage_isValid;
}

QString OAIResourceUtilization_EC2ResourceUtilization::getMaxStorageUtilizationPercentage() const {
    return m_max_storage_utilization_percentage;
}
void OAIResourceUtilization_EC2ResourceUtilization::setMaxStorageUtilizationPercentage(const QString &max_storage_utilization_percentage) {
    m_max_storage_utilization_percentage = max_storage_utilization_percentage;
    m_max_storage_utilization_percentage_isSet = true;
}

bool OAIResourceUtilization_EC2ResourceUtilization::is_max_storage_utilization_percentage_Set() const{
    return m_max_storage_utilization_percentage_isSet;
}

bool OAIResourceUtilization_EC2ResourceUtilization::is_max_storage_utilization_percentage_Valid() const{
    return m_max_storage_utilization_percentage_isValid;
}

OAIEC2ResourceUtilization_EBSResourceUtilization OAIResourceUtilization_EC2ResourceUtilization::getEbsResourceUtilization() const {
    return m_ebs_resource_utilization;
}
void OAIResourceUtilization_EC2ResourceUtilization::setEbsResourceUtilization(const OAIEC2ResourceUtilization_EBSResourceUtilization &ebs_resource_utilization) {
    m_ebs_resource_utilization = ebs_resource_utilization;
    m_ebs_resource_utilization_isSet = true;
}

bool OAIResourceUtilization_EC2ResourceUtilization::is_ebs_resource_utilization_Set() const{
    return m_ebs_resource_utilization_isSet;
}

bool OAIResourceUtilization_EC2ResourceUtilization::is_ebs_resource_utilization_Valid() const{
    return m_ebs_resource_utilization_isValid;
}

OAIEC2ResourceUtilization_DiskResourceUtilization OAIResourceUtilization_EC2ResourceUtilization::getDiskResourceUtilization() const {
    return m_disk_resource_utilization;
}
void OAIResourceUtilization_EC2ResourceUtilization::setDiskResourceUtilization(const OAIEC2ResourceUtilization_DiskResourceUtilization &disk_resource_utilization) {
    m_disk_resource_utilization = disk_resource_utilization;
    m_disk_resource_utilization_isSet = true;
}

bool OAIResourceUtilization_EC2ResourceUtilization::is_disk_resource_utilization_Set() const{
    return m_disk_resource_utilization_isSet;
}

bool OAIResourceUtilization_EC2ResourceUtilization::is_disk_resource_utilization_Valid() const{
    return m_disk_resource_utilization_isValid;
}

OAIEC2ResourceUtilization_NetworkResourceUtilization OAIResourceUtilization_EC2ResourceUtilization::getNetworkResourceUtilization() const {
    return m_network_resource_utilization;
}
void OAIResourceUtilization_EC2ResourceUtilization::setNetworkResourceUtilization(const OAIEC2ResourceUtilization_NetworkResourceUtilization &network_resource_utilization) {
    m_network_resource_utilization = network_resource_utilization;
    m_network_resource_utilization_isSet = true;
}

bool OAIResourceUtilization_EC2ResourceUtilization::is_network_resource_utilization_Set() const{
    return m_network_resource_utilization_isSet;
}

bool OAIResourceUtilization_EC2ResourceUtilization::is_network_resource_utilization_Valid() const{
    return m_network_resource_utilization_isValid;
}

bool OAIResourceUtilization_EC2ResourceUtilization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_cpu_utilization_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_memory_utilization_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_storage_utilization_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebs_resource_utilization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_resource_utilization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_resource_utilization.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceUtilization_EC2ResourceUtilization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
