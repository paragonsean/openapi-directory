/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEC2ResourceDetails.h
 *
 * Details on the Amazon EC2 Resource.
 */

#ifndef OAIEC2ResourceDetails_H
#define OAIEC2ResourceDetails_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEC2ResourceDetails : public OAIObject {
public:
    OAIEC2ResourceDetails();
    OAIEC2ResourceDetails(QString json);
    ~OAIEC2ResourceDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getHourlyOnDemandRate() const;
    void setHourlyOnDemandRate(const QString &hourly_on_demand_rate);
    bool is_hourly_on_demand_rate_Set() const;
    bool is_hourly_on_demand_rate_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    QString getPlatform() const;
    void setPlatform(const QString &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QString getSku() const;
    void setSku(const QString &sku);
    bool is_sku_Set() const;
    bool is_sku_Valid() const;

    QString getMemory() const;
    void setMemory(const QString &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    QString getNetworkPerformance() const;
    void setNetworkPerformance(const QString &network_performance);
    bool is_network_performance_Set() const;
    bool is_network_performance_Valid() const;

    QString getStorage() const;
    void setStorage(const QString &storage);
    bool is_storage_Set() const;
    bool is_storage_Valid() const;

    QString getVcpu() const;
    void setVcpu(const QString &vcpu);
    bool is_vcpu_Set() const;
    bool is_vcpu_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_hourly_on_demand_rate;
    bool m_hourly_on_demand_rate_isSet;
    bool m_hourly_on_demand_rate_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    QString m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QString m_sku;
    bool m_sku_isSet;
    bool m_sku_isValid;

    QString m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    QString m_network_performance;
    bool m_network_performance_isSet;
    bool m_network_performance_isValid;

    QString m_storage;
    bool m_storage_isSet;
    bool m_storage_isValid;

    QString m_vcpu;
    bool m_vcpu_isSet;
    bool m_vcpu_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEC2ResourceDetails)

#endif // OAIEC2ResourceDetails_H
