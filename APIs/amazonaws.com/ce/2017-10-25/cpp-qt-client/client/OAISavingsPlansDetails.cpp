/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlansDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlansDetails::OAISavingsPlansDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlansDetails::OAISavingsPlansDetails() {
    this->initializeModel();
}

OAISavingsPlansDetails::~OAISavingsPlansDetails() {}

void OAISavingsPlansDetails::initializeModel() {

    m_region_isSet = false;
    m_region_isValid = false;

    m_instance_family_isSet = false;
    m_instance_family_isValid = false;

    m_offering_id_isSet = false;
    m_offering_id_isValid = false;
}

void OAISavingsPlansDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavingsPlansDetails::fromJsonObject(QJsonObject json) {

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_instance_family_isValid = ::OpenAPI::fromJsonValue(m_instance_family, json[QString("InstanceFamily")]);
    m_instance_family_isSet = !json[QString("InstanceFamily")].isNull() && m_instance_family_isValid;

    m_offering_id_isValid = ::OpenAPI::fromJsonValue(m_offering_id, json[QString("OfferingId")]);
    m_offering_id_isSet = !json[QString("OfferingId")].isNull() && m_offering_id_isValid;
}

QString OAISavingsPlansDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavingsPlansDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_instance_family_isSet) {
        obj.insert(QString("InstanceFamily"), ::OpenAPI::toJsonValue(m_instance_family));
    }
    if (m_offering_id_isSet) {
        obj.insert(QString("OfferingId"), ::OpenAPI::toJsonValue(m_offering_id));
    }
    return obj;
}

QString OAISavingsPlansDetails::getRegion() const {
    return m_region;
}
void OAISavingsPlansDetails::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAISavingsPlansDetails::is_region_Set() const{
    return m_region_isSet;
}

bool OAISavingsPlansDetails::is_region_Valid() const{
    return m_region_isValid;
}

QString OAISavingsPlansDetails::getInstanceFamily() const {
    return m_instance_family;
}
void OAISavingsPlansDetails::setInstanceFamily(const QString &instance_family) {
    m_instance_family = instance_family;
    m_instance_family_isSet = true;
}

bool OAISavingsPlansDetails::is_instance_family_Set() const{
    return m_instance_family_isSet;
}

bool OAISavingsPlansDetails::is_instance_family_Valid() const{
    return m_instance_family_isValid;
}

QString OAISavingsPlansDetails::getOfferingId() const {
    return m_offering_id;
}
void OAISavingsPlansDetails::setOfferingId(const QString &offering_id) {
    m_offering_id = offering_id;
    m_offering_id_isSet = true;
}

bool OAISavingsPlansDetails::is_offering_id_Set() const{
    return m_offering_id_isSet;
}

bool OAISavingsPlansDetails::is_offering_id_Valid() const{
    return m_offering_id_isValid;
}

bool OAISavingsPlansDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavingsPlansDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
