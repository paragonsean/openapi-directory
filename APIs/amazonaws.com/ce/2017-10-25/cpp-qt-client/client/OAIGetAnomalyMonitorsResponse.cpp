/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAnomalyMonitorsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAnomalyMonitorsResponse::OAIGetAnomalyMonitorsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAnomalyMonitorsResponse::OAIGetAnomalyMonitorsResponse() {
    this->initializeModel();
}

OAIGetAnomalyMonitorsResponse::~OAIGetAnomalyMonitorsResponse() {}

void OAIGetAnomalyMonitorsResponse::initializeModel() {

    m_anomaly_monitors_isSet = false;
    m_anomaly_monitors_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetAnomalyMonitorsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAnomalyMonitorsResponse::fromJsonObject(QJsonObject json) {

    m_anomaly_monitors_isValid = ::OpenAPI::fromJsonValue(m_anomaly_monitors, json[QString("AnomalyMonitors")]);
    m_anomaly_monitors_isSet = !json[QString("AnomalyMonitors")].isNull() && m_anomaly_monitors_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetAnomalyMonitorsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAnomalyMonitorsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_anomaly_monitors.isSet()) {
        obj.insert(QString("AnomalyMonitors"), ::OpenAPI::toJsonValue(m_anomaly_monitors));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIGetAnomalyMonitorsResponse::getAnomalyMonitors() const {
    return m_anomaly_monitors;
}
void OAIGetAnomalyMonitorsResponse::setAnomalyMonitors(const QList &anomaly_monitors) {
    m_anomaly_monitors = anomaly_monitors;
    m_anomaly_monitors_isSet = true;
}

bool OAIGetAnomalyMonitorsResponse::is_anomaly_monitors_Set() const{
    return m_anomaly_monitors_isSet;
}

bool OAIGetAnomalyMonitorsResponse::is_anomaly_monitors_Valid() const{
    return m_anomaly_monitors_isValid;
}

QString OAIGetAnomalyMonitorsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetAnomalyMonitorsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetAnomalyMonitorsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetAnomalyMonitorsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetAnomalyMonitorsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anomaly_monitors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAnomalyMonitorsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_anomaly_monitors_isValid && true;
}

} // namespace OpenAPI
