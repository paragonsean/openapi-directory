/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceDetails::OAIInstanceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceDetails::OAIInstanceDetails() {
    this->initializeModel();
}

OAIInstanceDetails::~OAIInstanceDetails() {}

void OAIInstanceDetails::initializeModel() {

    m_ec2_instance_details_isSet = false;
    m_ec2_instance_details_isValid = false;

    m_rds_instance_details_isSet = false;
    m_rds_instance_details_isValid = false;

    m_redshift_instance_details_isSet = false;
    m_redshift_instance_details_isValid = false;

    m_elasti_cache_instance_details_isSet = false;
    m_elasti_cache_instance_details_isValid = false;

    m_es_instance_details_isSet = false;
    m_es_instance_details_isValid = false;
}

void OAIInstanceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceDetails::fromJsonObject(QJsonObject json) {

    m_ec2_instance_details_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_details, json[QString("EC2InstanceDetails")]);
    m_ec2_instance_details_isSet = !json[QString("EC2InstanceDetails")].isNull() && m_ec2_instance_details_isValid;

    m_rds_instance_details_isValid = ::OpenAPI::fromJsonValue(m_rds_instance_details, json[QString("RDSInstanceDetails")]);
    m_rds_instance_details_isSet = !json[QString("RDSInstanceDetails")].isNull() && m_rds_instance_details_isValid;

    m_redshift_instance_details_isValid = ::OpenAPI::fromJsonValue(m_redshift_instance_details, json[QString("RedshiftInstanceDetails")]);
    m_redshift_instance_details_isSet = !json[QString("RedshiftInstanceDetails")].isNull() && m_redshift_instance_details_isValid;

    m_elasti_cache_instance_details_isValid = ::OpenAPI::fromJsonValue(m_elasti_cache_instance_details, json[QString("ElastiCacheInstanceDetails")]);
    m_elasti_cache_instance_details_isSet = !json[QString("ElastiCacheInstanceDetails")].isNull() && m_elasti_cache_instance_details_isValid;

    m_es_instance_details_isValid = ::OpenAPI::fromJsonValue(m_es_instance_details, json[QString("ESInstanceDetails")]);
    m_es_instance_details_isSet = !json[QString("ESInstanceDetails")].isNull() && m_es_instance_details_isValid;
}

QString OAIInstanceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_ec2_instance_details.isSet()) {
        obj.insert(QString("EC2InstanceDetails"), ::OpenAPI::toJsonValue(m_ec2_instance_details));
    }
    if (m_rds_instance_details.isSet()) {
        obj.insert(QString("RDSInstanceDetails"), ::OpenAPI::toJsonValue(m_rds_instance_details));
    }
    if (m_redshift_instance_details.isSet()) {
        obj.insert(QString("RedshiftInstanceDetails"), ::OpenAPI::toJsonValue(m_redshift_instance_details));
    }
    if (m_elasti_cache_instance_details.isSet()) {
        obj.insert(QString("ElastiCacheInstanceDetails"), ::OpenAPI::toJsonValue(m_elasti_cache_instance_details));
    }
    if (m_es_instance_details.isSet()) {
        obj.insert(QString("ESInstanceDetails"), ::OpenAPI::toJsonValue(m_es_instance_details));
    }
    return obj;
}

OAIInstanceDetails_EC2InstanceDetails OAIInstanceDetails::getEc2InstanceDetails() const {
    return m_ec2_instance_details;
}
void OAIInstanceDetails::setEc2InstanceDetails(const OAIInstanceDetails_EC2InstanceDetails &ec2_instance_details) {
    m_ec2_instance_details = ec2_instance_details;
    m_ec2_instance_details_isSet = true;
}

bool OAIInstanceDetails::is_ec2_instance_details_Set() const{
    return m_ec2_instance_details_isSet;
}

bool OAIInstanceDetails::is_ec2_instance_details_Valid() const{
    return m_ec2_instance_details_isValid;
}

OAIInstanceDetails_RDSInstanceDetails OAIInstanceDetails::getRdsInstanceDetails() const {
    return m_rds_instance_details;
}
void OAIInstanceDetails::setRdsInstanceDetails(const OAIInstanceDetails_RDSInstanceDetails &rds_instance_details) {
    m_rds_instance_details = rds_instance_details;
    m_rds_instance_details_isSet = true;
}

bool OAIInstanceDetails::is_rds_instance_details_Set() const{
    return m_rds_instance_details_isSet;
}

bool OAIInstanceDetails::is_rds_instance_details_Valid() const{
    return m_rds_instance_details_isValid;
}

OAIInstanceDetails_RedshiftInstanceDetails OAIInstanceDetails::getRedshiftInstanceDetails() const {
    return m_redshift_instance_details;
}
void OAIInstanceDetails::setRedshiftInstanceDetails(const OAIInstanceDetails_RedshiftInstanceDetails &redshift_instance_details) {
    m_redshift_instance_details = redshift_instance_details;
    m_redshift_instance_details_isSet = true;
}

bool OAIInstanceDetails::is_redshift_instance_details_Set() const{
    return m_redshift_instance_details_isSet;
}

bool OAIInstanceDetails::is_redshift_instance_details_Valid() const{
    return m_redshift_instance_details_isValid;
}

OAIInstanceDetails_ElastiCacheInstanceDetails OAIInstanceDetails::getElastiCacheInstanceDetails() const {
    return m_elasti_cache_instance_details;
}
void OAIInstanceDetails::setElastiCacheInstanceDetails(const OAIInstanceDetails_ElastiCacheInstanceDetails &elasti_cache_instance_details) {
    m_elasti_cache_instance_details = elasti_cache_instance_details;
    m_elasti_cache_instance_details_isSet = true;
}

bool OAIInstanceDetails::is_elasti_cache_instance_details_Set() const{
    return m_elasti_cache_instance_details_isSet;
}

bool OAIInstanceDetails::is_elasti_cache_instance_details_Valid() const{
    return m_elasti_cache_instance_details_isValid;
}

OAIInstanceDetails_ESInstanceDetails OAIInstanceDetails::getEsInstanceDetails() const {
    return m_es_instance_details;
}
void OAIInstanceDetails::setEsInstanceDetails(const OAIInstanceDetails_ESInstanceDetails &es_instance_details) {
    m_es_instance_details = es_instance_details;
    m_es_instance_details_isSet = true;
}

bool OAIInstanceDetails::is_es_instance_details_Set() const{
    return m_es_instance_details_isSet;
}

bool OAIInstanceDetails::is_es_instance_details_Valid() const{
    return m_es_instance_details_isValid;
}

bool OAIInstanceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ec2_instance_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rds_instance_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift_instance_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_elasti_cache_instance_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_es_instance_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
