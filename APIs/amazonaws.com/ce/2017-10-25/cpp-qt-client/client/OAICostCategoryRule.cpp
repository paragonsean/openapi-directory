/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostCategoryRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostCategoryRule::OAICostCategoryRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostCategoryRule::OAICostCategoryRule() {
    this->initializeModel();
}

OAICostCategoryRule::~OAICostCategoryRule() {}

void OAICostCategoryRule::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_inherited_value_isSet = false;
    m_inherited_value_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICostCategoryRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostCategoryRule::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("Rule")]);
    m_rule_isSet = !json[QString("Rule")].isNull() && m_rule_isValid;

    m_inherited_value_isValid = ::OpenAPI::fromJsonValue(m_inherited_value, json[QString("InheritedValue")]);
    m_inherited_value_isSet = !json[QString("InheritedValue")].isNull() && m_inherited_value_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAICostCategoryRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostCategoryRule::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_rule.isSet()) {
        obj.insert(QString("Rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_inherited_value.isSet()) {
        obj.insert(QString("InheritedValue"), ::OpenAPI::toJsonValue(m_inherited_value));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICostCategoryRule::getValue() const {
    return m_value;
}
void OAICostCategoryRule::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICostCategoryRule::is_value_Set() const{
    return m_value_isSet;
}

bool OAICostCategoryRule::is_value_Valid() const{
    return m_value_isValid;
}

OAICostCategoryRule_Rule OAICostCategoryRule::getRule() const {
    return m_rule;
}
void OAICostCategoryRule::setRule(const OAICostCategoryRule_Rule &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAICostCategoryRule::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAICostCategoryRule::is_rule_Valid() const{
    return m_rule_isValid;
}

OAICostCategoryRule_InheritedValue OAICostCategoryRule::getInheritedValue() const {
    return m_inherited_value;
}
void OAICostCategoryRule::setInheritedValue(const OAICostCategoryRule_InheritedValue &inherited_value) {
    m_inherited_value = inherited_value;
    m_inherited_value_isSet = true;
}

bool OAICostCategoryRule::is_inherited_value_Set() const{
    return m_inherited_value_isSet;
}

bool OAICostCategoryRule::is_inherited_value_Valid() const{
    return m_inherited_value_isValid;
}

OAICostCategoryRuleType OAICostCategoryRule::getType() const {
    return m_type;
}
void OAICostCategoryRule::setType(const OAICostCategoryRuleType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICostCategoryRule::is_type_Set() const{
    return m_type_isSet;
}

bool OAICostCategoryRule::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICostCategoryRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inherited_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostCategoryRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
