/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISavingsPlansUtilizationDetail_AmortizedCommitment.h
 *
 * 
 */

#ifndef OAISavingsPlansUtilizationDetail_AmortizedCommitment_H
#define OAISavingsPlansUtilizationDetail_AmortizedCommitment_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISavingsPlansUtilizationDetail_AmortizedCommitment : public OAIObject {
public:
    OAISavingsPlansUtilizationDetail_AmortizedCommitment();
    OAISavingsPlansUtilizationDetail_AmortizedCommitment(QString json);
    ~OAISavingsPlansUtilizationDetail_AmortizedCommitment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAmortizedRecurringCommitment() const;
    void setAmortizedRecurringCommitment(const QString &amortized_recurring_commitment);
    bool is_amortized_recurring_commitment_Set() const;
    bool is_amortized_recurring_commitment_Valid() const;

    QString getAmortizedUpfrontCommitment() const;
    void setAmortizedUpfrontCommitment(const QString &amortized_upfront_commitment);
    bool is_amortized_upfront_commitment_Set() const;
    bool is_amortized_upfront_commitment_Valid() const;

    QString getTotalAmortizedCommitment() const;
    void setTotalAmortizedCommitment(const QString &total_amortized_commitment);
    bool is_total_amortized_commitment_Set() const;
    bool is_total_amortized_commitment_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_amortized_recurring_commitment;
    bool m_amortized_recurring_commitment_isSet;
    bool m_amortized_recurring_commitment_isValid;

    QString m_amortized_upfront_commitment;
    bool m_amortized_upfront_commitment_isSet;
    bool m_amortized_upfront_commitment_isValid;

    QString m_total_amortized_commitment;
    bool m_total_amortized_commitment_isSet;
    bool m_total_amortized_commitment_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISavingsPlansUtilizationDetail_AmortizedCommitment)

#endif // OAISavingsPlansUtilizationDetail_AmortizedCommitment_H
