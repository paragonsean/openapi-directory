/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrentInstance_ResourceUtilization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrentInstance_ResourceUtilization::OAICurrentInstance_ResourceUtilization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrentInstance_ResourceUtilization::OAICurrentInstance_ResourceUtilization() {
    this->initializeModel();
}

OAICurrentInstance_ResourceUtilization::~OAICurrentInstance_ResourceUtilization() {}

void OAICurrentInstance_ResourceUtilization::initializeModel() {

    m_ec2_resource_utilization_isSet = false;
    m_ec2_resource_utilization_isValid = false;
}

void OAICurrentInstance_ResourceUtilization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrentInstance_ResourceUtilization::fromJsonObject(QJsonObject json) {

    m_ec2_resource_utilization_isValid = ::OpenAPI::fromJsonValue(m_ec2_resource_utilization, json[QString("EC2ResourceUtilization")]);
    m_ec2_resource_utilization_isSet = !json[QString("EC2ResourceUtilization")].isNull() && m_ec2_resource_utilization_isValid;
}

QString OAICurrentInstance_ResourceUtilization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrentInstance_ResourceUtilization::asJsonObject() const {
    QJsonObject obj;
    if (m_ec2_resource_utilization.isSet()) {
        obj.insert(QString("EC2ResourceUtilization"), ::OpenAPI::toJsonValue(m_ec2_resource_utilization));
    }
    return obj;
}

OAIResourceUtilization_EC2ResourceUtilization OAICurrentInstance_ResourceUtilization::getEc2ResourceUtilization() const {
    return m_ec2_resource_utilization;
}
void OAICurrentInstance_ResourceUtilization::setEc2ResourceUtilization(const OAIResourceUtilization_EC2ResourceUtilization &ec2_resource_utilization) {
    m_ec2_resource_utilization = ec2_resource_utilization;
    m_ec2_resource_utilization_isSet = true;
}

bool OAICurrentInstance_ResourceUtilization::is_ec2_resource_utilization_Set() const{
    return m_ec2_resource_utilization_isSet;
}

bool OAICurrentInstance_ResourceUtilization::is_ec2_resource_utilization_Valid() const{
    return m_ec2_resource_utilization_isValid;
}

bool OAICurrentInstance_ResourceUtilization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ec2_resource_utilization.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrentInstance_ResourceUtilization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
