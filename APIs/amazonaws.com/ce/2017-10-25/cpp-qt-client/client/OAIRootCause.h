/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRootCause.h
 *
 * The combination of Amazon Web Service, linked account, linked account name, Region, and usage type where a cost anomaly is observed. The linked account name will only be available when the account name can be identified.
 */

#ifndef OAIRootCause_H
#define OAIRootCause_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRootCause : public OAIObject {
public:
    OAIRootCause();
    OAIRootCause(QString json);
    ~OAIRootCause() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getService() const;
    void setService(const QString &service);
    bool is_service_Set() const;
    bool is_service_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QString getLinkedAccount() const;
    void setLinkedAccount(const QString &linked_account);
    bool is_linked_account_Set() const;
    bool is_linked_account_Valid() const;

    QString getUsageType() const;
    void setUsageType(const QString &usage_type);
    bool is_usage_type_Set() const;
    bool is_usage_type_Valid() const;

    QString getLinkedAccountName() const;
    void setLinkedAccountName(const QString &linked_account_name);
    bool is_linked_account_name_Set() const;
    bool is_linked_account_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_service;
    bool m_service_isSet;
    bool m_service_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QString m_linked_account;
    bool m_linked_account_isSet;
    bool m_linked_account_isValid;

    QString m_usage_type;
    bool m_usage_type_isSet;
    bool m_usage_type_isValid;

    QString m_linked_account_name;
    bool m_linked_account_name_isSet;
    bool m_linked_account_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRootCause)

#endif // OAIRootCause_H
