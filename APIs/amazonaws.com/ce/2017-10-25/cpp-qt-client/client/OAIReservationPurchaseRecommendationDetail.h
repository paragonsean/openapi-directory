/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReservationPurchaseRecommendationDetail.h
 *
 * Details about your recommended reservation purchase.
 */

#ifndef OAIReservationPurchaseRecommendationDetail_H
#define OAIReservationPurchaseRecommendationDetail_H

#include <QJsonObject>

#include "OAIReservationPurchaseRecommendationDetail_InstanceDetails.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReservationPurchaseRecommendationDetail_InstanceDetails;

class OAIReservationPurchaseRecommendationDetail : public OAIObject {
public:
    OAIReservationPurchaseRecommendationDetail();
    OAIReservationPurchaseRecommendationDetail(QString json);
    ~OAIReservationPurchaseRecommendationDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    OAIReservationPurchaseRecommendationDetail_InstanceDetails getInstanceDetails() const;
    void setInstanceDetails(const OAIReservationPurchaseRecommendationDetail_InstanceDetails &instance_details);
    bool is_instance_details_Set() const;
    bool is_instance_details_Valid() const;

    QString getRecommendedNumberOfInstancesToPurchase() const;
    void setRecommendedNumberOfInstancesToPurchase(const QString &recommended_number_of_instances_to_purchase);
    bool is_recommended_number_of_instances_to_purchase_Set() const;
    bool is_recommended_number_of_instances_to_purchase_Valid() const;

    QString getRecommendedNormalizedUnitsToPurchase() const;
    void setRecommendedNormalizedUnitsToPurchase(const QString &recommended_normalized_units_to_purchase);
    bool is_recommended_normalized_units_to_purchase_Set() const;
    bool is_recommended_normalized_units_to_purchase_Valid() const;

    QString getMinimumNumberOfInstancesUsedPerHour() const;
    void setMinimumNumberOfInstancesUsedPerHour(const QString &minimum_number_of_instances_used_per_hour);
    bool is_minimum_number_of_instances_used_per_hour_Set() const;
    bool is_minimum_number_of_instances_used_per_hour_Valid() const;

    QString getMinimumNormalizedUnitsUsedPerHour() const;
    void setMinimumNormalizedUnitsUsedPerHour(const QString &minimum_normalized_units_used_per_hour);
    bool is_minimum_normalized_units_used_per_hour_Set() const;
    bool is_minimum_normalized_units_used_per_hour_Valid() const;

    QString getMaximumNumberOfInstancesUsedPerHour() const;
    void setMaximumNumberOfInstancesUsedPerHour(const QString &maximum_number_of_instances_used_per_hour);
    bool is_maximum_number_of_instances_used_per_hour_Set() const;
    bool is_maximum_number_of_instances_used_per_hour_Valid() const;

    QString getMaximumNormalizedUnitsUsedPerHour() const;
    void setMaximumNormalizedUnitsUsedPerHour(const QString &maximum_normalized_units_used_per_hour);
    bool is_maximum_normalized_units_used_per_hour_Set() const;
    bool is_maximum_normalized_units_used_per_hour_Valid() const;

    QString getAverageNumberOfInstancesUsedPerHour() const;
    void setAverageNumberOfInstancesUsedPerHour(const QString &average_number_of_instances_used_per_hour);
    bool is_average_number_of_instances_used_per_hour_Set() const;
    bool is_average_number_of_instances_used_per_hour_Valid() const;

    QString getAverageNormalizedUnitsUsedPerHour() const;
    void setAverageNormalizedUnitsUsedPerHour(const QString &average_normalized_units_used_per_hour);
    bool is_average_normalized_units_used_per_hour_Set() const;
    bool is_average_normalized_units_used_per_hour_Valid() const;

    QString getAverageUtilization() const;
    void setAverageUtilization(const QString &average_utilization);
    bool is_average_utilization_Set() const;
    bool is_average_utilization_Valid() const;

    QString getEstimatedBreakEvenInMonths() const;
    void setEstimatedBreakEvenInMonths(const QString &estimated_break_even_in_months);
    bool is_estimated_break_even_in_months_Set() const;
    bool is_estimated_break_even_in_months_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    QString getEstimatedMonthlySavingsAmount() const;
    void setEstimatedMonthlySavingsAmount(const QString &estimated_monthly_savings_amount);
    bool is_estimated_monthly_savings_amount_Set() const;
    bool is_estimated_monthly_savings_amount_Valid() const;

    QString getEstimatedMonthlySavingsPercentage() const;
    void setEstimatedMonthlySavingsPercentage(const QString &estimated_monthly_savings_percentage);
    bool is_estimated_monthly_savings_percentage_Set() const;
    bool is_estimated_monthly_savings_percentage_Valid() const;

    QString getEstimatedMonthlyOnDemandCost() const;
    void setEstimatedMonthlyOnDemandCost(const QString &estimated_monthly_on_demand_cost);
    bool is_estimated_monthly_on_demand_cost_Set() const;
    bool is_estimated_monthly_on_demand_cost_Valid() const;

    QString getEstimatedReservationCostForLookbackPeriod() const;
    void setEstimatedReservationCostForLookbackPeriod(const QString &estimated_reservation_cost_for_lookback_period);
    bool is_estimated_reservation_cost_for_lookback_period_Set() const;
    bool is_estimated_reservation_cost_for_lookback_period_Valid() const;

    QString getUpfrontCost() const;
    void setUpfrontCost(const QString &upfront_cost);
    bool is_upfront_cost_Set() const;
    bool is_upfront_cost_Valid() const;

    QString getRecurringStandardMonthlyCost() const;
    void setRecurringStandardMonthlyCost(const QString &recurring_standard_monthly_cost);
    bool is_recurring_standard_monthly_cost_Set() const;
    bool is_recurring_standard_monthly_cost_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    OAIReservationPurchaseRecommendationDetail_InstanceDetails m_instance_details;
    bool m_instance_details_isSet;
    bool m_instance_details_isValid;

    QString m_recommended_number_of_instances_to_purchase;
    bool m_recommended_number_of_instances_to_purchase_isSet;
    bool m_recommended_number_of_instances_to_purchase_isValid;

    QString m_recommended_normalized_units_to_purchase;
    bool m_recommended_normalized_units_to_purchase_isSet;
    bool m_recommended_normalized_units_to_purchase_isValid;

    QString m_minimum_number_of_instances_used_per_hour;
    bool m_minimum_number_of_instances_used_per_hour_isSet;
    bool m_minimum_number_of_instances_used_per_hour_isValid;

    QString m_minimum_normalized_units_used_per_hour;
    bool m_minimum_normalized_units_used_per_hour_isSet;
    bool m_minimum_normalized_units_used_per_hour_isValid;

    QString m_maximum_number_of_instances_used_per_hour;
    bool m_maximum_number_of_instances_used_per_hour_isSet;
    bool m_maximum_number_of_instances_used_per_hour_isValid;

    QString m_maximum_normalized_units_used_per_hour;
    bool m_maximum_normalized_units_used_per_hour_isSet;
    bool m_maximum_normalized_units_used_per_hour_isValid;

    QString m_average_number_of_instances_used_per_hour;
    bool m_average_number_of_instances_used_per_hour_isSet;
    bool m_average_number_of_instances_used_per_hour_isValid;

    QString m_average_normalized_units_used_per_hour;
    bool m_average_normalized_units_used_per_hour_isSet;
    bool m_average_normalized_units_used_per_hour_isValid;

    QString m_average_utilization;
    bool m_average_utilization_isSet;
    bool m_average_utilization_isValid;

    QString m_estimated_break_even_in_months;
    bool m_estimated_break_even_in_months_isSet;
    bool m_estimated_break_even_in_months_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    QString m_estimated_monthly_savings_amount;
    bool m_estimated_monthly_savings_amount_isSet;
    bool m_estimated_monthly_savings_amount_isValid;

    QString m_estimated_monthly_savings_percentage;
    bool m_estimated_monthly_savings_percentage_isSet;
    bool m_estimated_monthly_savings_percentage_isValid;

    QString m_estimated_monthly_on_demand_cost;
    bool m_estimated_monthly_on_demand_cost_isSet;
    bool m_estimated_monthly_on_demand_cost_isValid;

    QString m_estimated_reservation_cost_for_lookback_period;
    bool m_estimated_reservation_cost_for_lookback_period_isSet;
    bool m_estimated_reservation_cost_for_lookback_period_isValid;

    QString m_upfront_cost;
    bool m_upfront_cost_isSet;
    bool m_upfront_cost_isValid;

    QString m_recurring_standard_monthly_cost;
    bool m_recurring_standard_monthly_cost_isSet;
    bool m_recurring_standard_monthly_cost_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReservationPurchaseRecommendationDetail)

#endif // OAIReservationPurchaseRecommendationDetail_H
