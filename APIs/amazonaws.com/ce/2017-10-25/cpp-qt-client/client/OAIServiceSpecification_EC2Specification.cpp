/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceSpecification_EC2Specification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceSpecification_EC2Specification::OAIServiceSpecification_EC2Specification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceSpecification_EC2Specification::OAIServiceSpecification_EC2Specification() {
    this->initializeModel();
}

OAIServiceSpecification_EC2Specification::~OAIServiceSpecification_EC2Specification() {}

void OAIServiceSpecification_EC2Specification::initializeModel() {

    m_offering_class_isSet = false;
    m_offering_class_isValid = false;
}

void OAIServiceSpecification_EC2Specification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceSpecification_EC2Specification::fromJsonObject(QJsonObject json) {

    m_offering_class_isValid = ::OpenAPI::fromJsonValue(m_offering_class, json[QString("OfferingClass")]);
    m_offering_class_isSet = !json[QString("OfferingClass")].isNull() && m_offering_class_isValid;
}

QString OAIServiceSpecification_EC2Specification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceSpecification_EC2Specification::asJsonObject() const {
    QJsonObject obj;
    if (m_offering_class.isSet()) {
        obj.insert(QString("OfferingClass"), ::OpenAPI::toJsonValue(m_offering_class));
    }
    return obj;
}

OAIOfferingClass OAIServiceSpecification_EC2Specification::getOfferingClass() const {
    return m_offering_class;
}
void OAIServiceSpecification_EC2Specification::setOfferingClass(const OAIOfferingClass &offering_class) {
    m_offering_class = offering_class;
    m_offering_class_isSet = true;
}

bool OAIServiceSpecification_EC2Specification::is_offering_class_Set() const{
    return m_offering_class_isSet;
}

bool OAIServiceSpecification_EC2Specification::is_offering_class_Valid() const{
    return m_offering_class_isValid;
}

bool OAIServiceSpecification_EC2Specification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offering_class.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceSpecification_EC2Specification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
