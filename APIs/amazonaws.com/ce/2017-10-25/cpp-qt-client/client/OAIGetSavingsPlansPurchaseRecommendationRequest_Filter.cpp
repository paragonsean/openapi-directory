/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSavingsPlansPurchaseRecommendationRequest_Filter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::OAIGetSavingsPlansPurchaseRecommendationRequest_Filter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::OAIGetSavingsPlansPurchaseRecommendationRequest_Filter() {
    this->initializeModel();
}

OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::~OAIGetSavingsPlansPurchaseRecommendationRequest_Filter() {}

void OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::initializeModel() {

    m_r_or_isSet = false;
    m_r_or_isValid = false;

    m_r_and_isSet = false;
    m_r_and_isValid = false;

    m_r_not_isSet = false;
    m_r_not_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_cost_categories_isSet = false;
    m_cost_categories_isValid = false;
}

void OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::fromJsonObject(QJsonObject json) {

    m_r_or_isValid = ::OpenAPI::fromJsonValue(m_r_or, json[QString("Or")]);
    m_r_or_isSet = !json[QString("Or")].isNull() && m_r_or_isValid;

    m_r_and_isValid = ::OpenAPI::fromJsonValue(m_r_and, json[QString("And")]);
    m_r_and_isSet = !json[QString("And")].isNull() && m_r_and_isValid;

    m_r_not_isValid = ::OpenAPI::fromJsonValue(m_r_not, json[QString("Not")]);
    m_r_not_isSet = !json[QString("Not")].isNull() && m_r_not_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_cost_categories_isValid = ::OpenAPI::fromJsonValue(m_cost_categories, json[QString("CostCategories")]);
    m_cost_categories_isSet = !json[QString("CostCategories")].isNull() && m_cost_categories_isValid;
}

QString OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::asJsonObject() const {
    QJsonObject obj;
    if (m_r_or.isSet()) {
        obj.insert(QString("Or"), ::OpenAPI::toJsonValue(m_r_or));
    }
    if (m_r_and.isSet()) {
        obj.insert(QString("And"), ::OpenAPI::toJsonValue(m_r_and));
    }
    if (m_r_not.isSet()) {
        obj.insert(QString("Not"), ::OpenAPI::toJsonValue(m_r_not));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_cost_categories.isSet()) {
        obj.insert(QString("CostCategories"), ::OpenAPI::toJsonValue(m_cost_categories));
    }
    return obj;
}

QList OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::getROr() const {
    return m_r_or;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::setROr(const QList &r_or) {
    m_r_or = r_or;
    m_r_or_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::is_r_or_Set() const{
    return m_r_or_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::is_r_or_Valid() const{
    return m_r_or_isValid;
}

QList OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::getRAnd() const {
    return m_r_and;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::setRAnd(const QList &r_and) {
    m_r_and = r_and;
    m_r_and_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::is_r_and_Set() const{
    return m_r_and_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::is_r_and_Valid() const{
    return m_r_and_isValid;
}

OAIExpression_Not OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::getRNot() const {
    return m_r_not;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::setRNot(const OAIExpression_Not &r_not) {
    m_r_not = r_not;
    m_r_not_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::is_r_not_Set() const{
    return m_r_not_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::is_r_not_Valid() const{
    return m_r_not_isValid;
}

OAIExpression_Dimensions OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::getDimensions() const {
    return m_dimensions;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::setDimensions(const OAIExpression_Dimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

OAIExpression_Tags OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::getTags() const {
    return m_tags;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::setTags(const OAIExpression_Tags &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIExpression_CostCategories OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::getCostCategories() const {
    return m_cost_categories;
}
void OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::setCostCategories(const OAIExpression_CostCategories &cost_categories) {
    m_cost_categories = cost_categories;
    m_cost_categories_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::is_cost_categories_Set() const{
    return m_cost_categories_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::is_cost_categories_Valid() const{
    return m_cost_categories_isValid;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_or.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_and.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_not.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSavingsPlansPurchaseRecommendationRequest_Filter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
