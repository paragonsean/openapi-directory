/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerationSummary::OAIGenerationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerationSummary::OAIGenerationSummary() {
    this->initializeModel();
}

OAIGenerationSummary::~OAIGenerationSummary() {}

void OAIGenerationSummary::initializeModel() {

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_generation_status_isSet = false;
    m_generation_status_isValid = false;

    m_generation_started_time_isSet = false;
    m_generation_started_time_isValid = false;

    m_generation_completion_time_isSet = false;
    m_generation_completion_time_isValid = false;

    m_estimated_completion_time_isSet = false;
    m_estimated_completion_time_isValid = false;
}

void OAIGenerationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerationSummary::fromJsonObject(QJsonObject json) {

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("RecommendationId")]);
    m_recommendation_id_isSet = !json[QString("RecommendationId")].isNull() && m_recommendation_id_isValid;

    m_generation_status_isValid = ::OpenAPI::fromJsonValue(m_generation_status, json[QString("GenerationStatus")]);
    m_generation_status_isSet = !json[QString("GenerationStatus")].isNull() && m_generation_status_isValid;

    m_generation_started_time_isValid = ::OpenAPI::fromJsonValue(m_generation_started_time, json[QString("GenerationStartedTime")]);
    m_generation_started_time_isSet = !json[QString("GenerationStartedTime")].isNull() && m_generation_started_time_isValid;

    m_generation_completion_time_isValid = ::OpenAPI::fromJsonValue(m_generation_completion_time, json[QString("GenerationCompletionTime")]);
    m_generation_completion_time_isSet = !json[QString("GenerationCompletionTime")].isNull() && m_generation_completion_time_isValid;

    m_estimated_completion_time_isValid = ::OpenAPI::fromJsonValue(m_estimated_completion_time, json[QString("EstimatedCompletionTime")]);
    m_estimated_completion_time_isSet = !json[QString("EstimatedCompletionTime")].isNull() && m_estimated_completion_time_isValid;
}

QString OAIGenerationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_recommendation_id_isSet) {
        obj.insert(QString("RecommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_generation_status.isSet()) {
        obj.insert(QString("GenerationStatus"), ::OpenAPI::toJsonValue(m_generation_status));
    }
    if (m_generation_started_time_isSet) {
        obj.insert(QString("GenerationStartedTime"), ::OpenAPI::toJsonValue(m_generation_started_time));
    }
    if (m_generation_completion_time_isSet) {
        obj.insert(QString("GenerationCompletionTime"), ::OpenAPI::toJsonValue(m_generation_completion_time));
    }
    if (m_estimated_completion_time_isSet) {
        obj.insert(QString("EstimatedCompletionTime"), ::OpenAPI::toJsonValue(m_estimated_completion_time));
    }
    return obj;
}

QString OAIGenerationSummary::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIGenerationSummary::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIGenerationSummary::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIGenerationSummary::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

OAIGenerationStatus OAIGenerationSummary::getGenerationStatus() const {
    return m_generation_status;
}
void OAIGenerationSummary::setGenerationStatus(const OAIGenerationStatus &generation_status) {
    m_generation_status = generation_status;
    m_generation_status_isSet = true;
}

bool OAIGenerationSummary::is_generation_status_Set() const{
    return m_generation_status_isSet;
}

bool OAIGenerationSummary::is_generation_status_Valid() const{
    return m_generation_status_isValid;
}

QString OAIGenerationSummary::getGenerationStartedTime() const {
    return m_generation_started_time;
}
void OAIGenerationSummary::setGenerationStartedTime(const QString &generation_started_time) {
    m_generation_started_time = generation_started_time;
    m_generation_started_time_isSet = true;
}

bool OAIGenerationSummary::is_generation_started_time_Set() const{
    return m_generation_started_time_isSet;
}

bool OAIGenerationSummary::is_generation_started_time_Valid() const{
    return m_generation_started_time_isValid;
}

QString OAIGenerationSummary::getGenerationCompletionTime() const {
    return m_generation_completion_time;
}
void OAIGenerationSummary::setGenerationCompletionTime(const QString &generation_completion_time) {
    m_generation_completion_time = generation_completion_time;
    m_generation_completion_time_isSet = true;
}

bool OAIGenerationSummary::is_generation_completion_time_Set() const{
    return m_generation_completion_time_isSet;
}

bool OAIGenerationSummary::is_generation_completion_time_Valid() const{
    return m_generation_completion_time_isValid;
}

QString OAIGenerationSummary::getEstimatedCompletionTime() const {
    return m_estimated_completion_time;
}
void OAIGenerationSummary::setEstimatedCompletionTime(const QString &estimated_completion_time) {
    m_estimated_completion_time = estimated_completion_time;
    m_estimated_completion_time_isSet = true;
}

bool OAIGenerationSummary::is_estimated_completion_time_Set() const{
    return m_estimated_completion_time_isSet;
}

bool OAIGenerationSummary::is_estimated_completion_time_Valid() const{
    return m_estimated_completion_time_isValid;
}

bool OAIGenerationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_started_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
