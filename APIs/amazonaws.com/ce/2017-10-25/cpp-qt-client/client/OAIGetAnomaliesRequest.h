/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetAnomaliesRequest.h
 *
 * 
 */

#ifndef OAIGetAnomaliesRequest_H
#define OAIGetAnomaliesRequest_H

#include <QJsonObject>

#include "OAIAnomalyFeedbackType.h"
#include "OAIGetAnomaliesRequest_DateInterval.h"
#include "OAIGetAnomaliesRequest_TotalImpact.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetAnomaliesRequest_DateInterval;
class OAIGetAnomaliesRequest_TotalImpact;

class OAIGetAnomaliesRequest : public OAIObject {
public:
    OAIGetAnomaliesRequest();
    OAIGetAnomaliesRequest(QString json);
    ~OAIGetAnomaliesRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMonitorArn() const;
    void setMonitorArn(const QString &monitor_arn);
    bool is_monitor_arn_Set() const;
    bool is_monitor_arn_Valid() const;

    OAIGetAnomaliesRequest_DateInterval getDateInterval() const;
    void setDateInterval(const OAIGetAnomaliesRequest_DateInterval &date_interval);
    bool is_date_interval_Set() const;
    bool is_date_interval_Valid() const;

    OAIAnomalyFeedbackType getFeedback() const;
    void setFeedback(const OAIAnomalyFeedbackType &feedback);
    bool is_feedback_Set() const;
    bool is_feedback_Valid() const;

    OAIGetAnomaliesRequest_TotalImpact getTotalImpact() const;
    void setTotalImpact(const OAIGetAnomaliesRequest_TotalImpact &total_impact);
    bool is_total_impact_Set() const;
    bool is_total_impact_Valid() const;

    QString getNextPageToken() const;
    void setNextPageToken(const QString &next_page_token);
    bool is_next_page_token_Set() const;
    bool is_next_page_token_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_monitor_arn;
    bool m_monitor_arn_isSet;
    bool m_monitor_arn_isValid;

    OAIGetAnomaliesRequest_DateInterval m_date_interval;
    bool m_date_interval_isSet;
    bool m_date_interval_isValid;

    OAIAnomalyFeedbackType m_feedback;
    bool m_feedback_isSet;
    bool m_feedback_isValid;

    OAIGetAnomaliesRequest_TotalImpact m_total_impact;
    bool m_total_impact_isSet;
    bool m_total_impact_isValid;

    QString m_next_page_token;
    bool m_next_page_token_isSet;
    bool m_next_page_token_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetAnomaliesRequest)

#endif // OAIGetAnomaliesRequest_H
