/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateAnomalyMonitorRequest.h"
#include "OAICreateAnomalyMonitorResponse.h"
#include "OAICreateAnomalySubscriptionRequest.h"
#include "OAICreateAnomalySubscriptionResponse.h"
#include "OAICreateCostCategoryDefinitionRequest.h"
#include "OAICreateCostCategoryDefinitionResponse.h"
#include "OAIDeleteAnomalyMonitorRequest.h"
#include "OAIDeleteAnomalySubscriptionRequest.h"
#include "OAIDeleteCostCategoryDefinitionRequest.h"
#include "OAIDeleteCostCategoryDefinitionResponse.h"
#include "OAIDescribeCostCategoryDefinitionRequest.h"
#include "OAIDescribeCostCategoryDefinitionResponse.h"
#include "OAIGetAnomaliesRequest.h"
#include "OAIGetAnomaliesResponse.h"
#include "OAIGetAnomalyMonitorsRequest.h"
#include "OAIGetAnomalyMonitorsResponse.h"
#include "OAIGetAnomalySubscriptionsRequest.h"
#include "OAIGetAnomalySubscriptionsResponse.h"
#include "OAIGetCostAndUsageRequest.h"
#include "OAIGetCostAndUsageResponse.h"
#include "OAIGetCostAndUsageWithResourcesRequest.h"
#include "OAIGetCostAndUsageWithResourcesResponse.h"
#include "OAIGetCostCategoriesRequest.h"
#include "OAIGetCostCategoriesResponse.h"
#include "OAIGetCostForecastRequest.h"
#include "OAIGetCostForecastResponse.h"
#include "OAIGetDimensionValuesRequest.h"
#include "OAIGetDimensionValuesResponse.h"
#include "OAIGetReservationCoverageRequest.h"
#include "OAIGetReservationCoverageResponse.h"
#include "OAIGetReservationPurchaseRecommendationRequest.h"
#include "OAIGetReservationPurchaseRecommendationResponse.h"
#include "OAIGetReservationUtilizationRequest.h"
#include "OAIGetReservationUtilizationResponse.h"
#include "OAIGetRightsizingRecommendationRequest.h"
#include "OAIGetRightsizingRecommendationResponse.h"
#include "OAIGetSavingsPlanPurchaseRecommendationDetailsRequest.h"
#include "OAIGetSavingsPlanPurchaseRecommendationDetailsResponse.h"
#include "OAIGetSavingsPlansCoverageRequest.h"
#include "OAIGetSavingsPlansCoverageResponse.h"
#include "OAIGetSavingsPlansPurchaseRecommendationRequest.h"
#include "OAIGetSavingsPlansPurchaseRecommendationResponse.h"
#include "OAIGetSavingsPlansUtilizationDetailsRequest.h"
#include "OAIGetSavingsPlansUtilizationDetailsResponse.h"
#include "OAIGetSavingsPlansUtilizationRequest.h"
#include "OAIGetSavingsPlansUtilizationResponse.h"
#include "OAIGetTagsRequest.h"
#include "OAIGetTagsResponse.h"
#include "OAIGetUsageForecastRequest.h"
#include "OAIGetUsageForecastResponse.h"
#include "OAIListCostAllocationTagsRequest.h"
#include "OAIListCostAllocationTagsResponse.h"
#include "OAIListCostCategoryDefinitionsRequest.h"
#include "OAIListCostCategoryDefinitionsResponse.h"
#include "OAIListSavingsPlansPurchaseRecommendationGenerationRequest.h"
#include "OAIListSavingsPlansPurchaseRecommendationGenerationResponse.h"
#include "OAIListTagsForResourceRequest.h"
#include "OAIListTagsForResourceResponse.h"
#include "OAIObject.h"
#include "OAIProvideAnomalyFeedbackRequest.h"
#include "OAIProvideAnomalyFeedbackResponse.h"
#include "OAIStartSavingsPlansPurchaseRecommendationGenerationResponse.h"
#include "OAITagResourceRequest.h"
#include "OAIUntagResourceRequest.h"
#include "OAIUpdateAnomalyMonitorRequest.h"
#include "OAIUpdateAnomalyMonitorResponse.h"
#include "OAIUpdateAnomalySubscriptionRequest.h"
#include "OAIUpdateAnomalySubscriptionResponse.h"
#include "OAIUpdateCostAllocationTagsStatusRequest.h"
#include "OAIUpdateCostAllocationTagsStatusResponse.h"
#include "OAIUpdateCostCategoryDefinitionRequest.h"
#include "OAIUpdateCostCategoryDefinitionResponse.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_anomaly_monitor_request OAICreateAnomalyMonitorRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createAnomalyMonitor(const QString &x_amz_target, const OAICreateAnomalyMonitorRequest &oai_create_anomaly_monitor_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_anomaly_subscription_request OAICreateAnomalySubscriptionRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createAnomalySubscription(const QString &x_amz_target, const OAICreateAnomalySubscriptionRequest &oai_create_anomaly_subscription_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_cost_category_definition_request OAICreateCostCategoryDefinitionRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createCostCategoryDefinition(const QString &x_amz_target, const OAICreateCostCategoryDefinitionRequest &oai_create_cost_category_definition_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_anomaly_monitor_request OAIDeleteAnomalyMonitorRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAnomalyMonitor(const QString &x_amz_target, const OAIDeleteAnomalyMonitorRequest &oai_delete_anomaly_monitor_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_anomaly_subscription_request OAIDeleteAnomalySubscriptionRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAnomalySubscription(const QString &x_amz_target, const OAIDeleteAnomalySubscriptionRequest &oai_delete_anomaly_subscription_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_cost_category_definition_request OAIDeleteCostCategoryDefinitionRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteCostCategoryDefinition(const QString &x_amz_target, const OAIDeleteCostCategoryDefinitionRequest &oai_delete_cost_category_definition_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_cost_category_definition_request OAIDescribeCostCategoryDefinitionRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeCostCategoryDefinition(const QString &x_amz_target, const OAIDescribeCostCategoryDefinitionRequest &oai_describe_cost_category_definition_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_anomalies_request OAIGetAnomaliesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAnomalies(const QString &x_amz_target, const OAIGetAnomaliesRequest &oai_get_anomalies_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_anomaly_monitors_request OAIGetAnomalyMonitorsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAnomalyMonitors(const QString &x_amz_target, const OAIGetAnomalyMonitorsRequest &oai_get_anomaly_monitors_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_anomaly_subscriptions_request OAIGetAnomalySubscriptionsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAnomalySubscriptions(const QString &x_amz_target, const OAIGetAnomalySubscriptionsRequest &oai_get_anomaly_subscriptions_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_cost_and_usage_request OAIGetCostAndUsageRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCostAndUsage(const QString &x_amz_target, const OAIGetCostAndUsageRequest &oai_get_cost_and_usage_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_cost_and_usage_with_resources_request OAIGetCostAndUsageWithResourcesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCostAndUsageWithResources(const QString &x_amz_target, const OAIGetCostAndUsageWithResourcesRequest &oai_get_cost_and_usage_with_resources_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_cost_categories_request OAIGetCostCategoriesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCostCategories(const QString &x_amz_target, const OAIGetCostCategoriesRequest &oai_get_cost_categories_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_cost_forecast_request OAIGetCostForecastRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCostForecast(const QString &x_amz_target, const OAIGetCostForecastRequest &oai_get_cost_forecast_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_dimension_values_request OAIGetDimensionValuesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDimensionValues(const QString &x_amz_target, const OAIGetDimensionValuesRequest &oai_get_dimension_values_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_reservation_coverage_request OAIGetReservationCoverageRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getReservationCoverage(const QString &x_amz_target, const OAIGetReservationCoverageRequest &oai_get_reservation_coverage_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_reservation_purchase_recommendation_request OAIGetReservationPurchaseRecommendationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getReservationPurchaseRecommendation(const QString &x_amz_target, const OAIGetReservationPurchaseRecommendationRequest &oai_get_reservation_purchase_recommendation_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_reservation_utilization_request OAIGetReservationUtilizationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getReservationUtilization(const QString &x_amz_target, const OAIGetReservationUtilizationRequest &oai_get_reservation_utilization_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_rightsizing_recommendation_request OAIGetRightsizingRecommendationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getRightsizingRecommendation(const QString &x_amz_target, const OAIGetRightsizingRecommendationRequest &oai_get_rightsizing_recommendation_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_savings_plan_purchase_recommendation_details_request OAIGetSavingsPlanPurchaseRecommendationDetailsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getSavingsPlanPurchaseRecommendationDetails(const QString &x_amz_target, const OAIGetSavingsPlanPurchaseRecommendationDetailsRequest &oai_get_savings_plan_purchase_recommendation_details_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_savings_plans_coverage_request OAIGetSavingsPlansCoverageRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void getSavingsPlansCoverage(const QString &x_amz_target, const OAIGetSavingsPlansCoverageRequest &oai_get_savings_plans_coverage_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_savings_plans_purchase_recommendation_request OAIGetSavingsPlansPurchaseRecommendationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getSavingsPlansPurchaseRecommendation(const QString &x_amz_target, const OAIGetSavingsPlansPurchaseRecommendationRequest &oai_get_savings_plans_purchase_recommendation_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_savings_plans_utilization_request OAIGetSavingsPlansUtilizationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getSavingsPlansUtilization(const QString &x_amz_target, const OAIGetSavingsPlansUtilizationRequest &oai_get_savings_plans_utilization_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_savings_plans_utilization_details_request OAIGetSavingsPlansUtilizationDetailsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void getSavingsPlansUtilizationDetails(const QString &x_amz_target, const OAIGetSavingsPlansUtilizationDetailsRequest &oai_get_savings_plans_utilization_details_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_tags_request OAIGetTagsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getTags(const QString &x_amz_target, const OAIGetTagsRequest &oai_get_tags_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_usage_forecast_request OAIGetUsageForecastRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getUsageForecast(const QString &x_amz_target, const OAIGetUsageForecastRequest &oai_get_usage_forecast_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_cost_allocation_tags_request OAIListCostAllocationTagsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listCostAllocationTags(const QString &x_amz_target, const OAIListCostAllocationTagsRequest &oai_list_cost_allocation_tags_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_cost_category_definitions_request OAIListCostCategoryDefinitionsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listCostCategoryDefinitions(const QString &x_amz_target, const OAIListCostCategoryDefinitionsRequest &oai_list_cost_category_definitions_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_savings_plans_purchase_recommendation_generation_request OAIListSavingsPlansPurchaseRecommendationGenerationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listSavingsPlansPurchaseRecommendationGeneration(const QString &x_amz_target, const OAIListSavingsPlansPurchaseRecommendationGenerationRequest &oai_list_savings_plans_purchase_recommendation_generation_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_tags_for_resource_request OAIListTagsForResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource(const QString &x_amz_target, const OAIListTagsForResourceRequest &oai_list_tags_for_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_provide_anomaly_feedback_request OAIProvideAnomalyFeedbackRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void provideAnomalyFeedback(const QString &x_amz_target, const OAIProvideAnomalyFeedbackRequest &oai_provide_anomaly_feedback_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  body OAIObject [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startSavingsPlansPurchaseRecommendationGeneration(const QString &x_amz_target, const OAIObject &body, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_tag_resource_request OAITagResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource(const QString &x_amz_target, const OAITagResourceRequest &oai_tag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_untag_resource_request OAIUntagResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource(const QString &x_amz_target, const OAIUntagResourceRequest &oai_untag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_anomaly_monitor_request OAIUpdateAnomalyMonitorRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAnomalyMonitor(const QString &x_amz_target, const OAIUpdateAnomalyMonitorRequest &oai_update_anomaly_monitor_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_anomaly_subscription_request OAIUpdateAnomalySubscriptionRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAnomalySubscription(const QString &x_amz_target, const OAIUpdateAnomalySubscriptionRequest &oai_update_anomaly_subscription_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_cost_allocation_tags_status_request OAIUpdateCostAllocationTagsStatusRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateCostAllocationTagsStatus(const QString &x_amz_target, const OAIUpdateCostAllocationTagsStatusRequest &oai_update_cost_allocation_tags_status_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_cost_category_definition_request OAIUpdateCostCategoryDefinitionRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateCostCategoryDefinition(const QString &x_amz_target, const OAIUpdateCostCategoryDefinitionRequest &oai_update_cost_category_definition_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAnomalyMonitorCallback(OAIHttpRequestWorker *worker);
    void createAnomalySubscriptionCallback(OAIHttpRequestWorker *worker);
    void createCostCategoryDefinitionCallback(OAIHttpRequestWorker *worker);
    void deleteAnomalyMonitorCallback(OAIHttpRequestWorker *worker);
    void deleteAnomalySubscriptionCallback(OAIHttpRequestWorker *worker);
    void deleteCostCategoryDefinitionCallback(OAIHttpRequestWorker *worker);
    void describeCostCategoryDefinitionCallback(OAIHttpRequestWorker *worker);
    void getAnomaliesCallback(OAIHttpRequestWorker *worker);
    void getAnomalyMonitorsCallback(OAIHttpRequestWorker *worker);
    void getAnomalySubscriptionsCallback(OAIHttpRequestWorker *worker);
    void getCostAndUsageCallback(OAIHttpRequestWorker *worker);
    void getCostAndUsageWithResourcesCallback(OAIHttpRequestWorker *worker);
    void getCostCategoriesCallback(OAIHttpRequestWorker *worker);
    void getCostForecastCallback(OAIHttpRequestWorker *worker);
    void getDimensionValuesCallback(OAIHttpRequestWorker *worker);
    void getReservationCoverageCallback(OAIHttpRequestWorker *worker);
    void getReservationPurchaseRecommendationCallback(OAIHttpRequestWorker *worker);
    void getReservationUtilizationCallback(OAIHttpRequestWorker *worker);
    void getRightsizingRecommendationCallback(OAIHttpRequestWorker *worker);
    void getSavingsPlanPurchaseRecommendationDetailsCallback(OAIHttpRequestWorker *worker);
    void getSavingsPlansCoverageCallback(OAIHttpRequestWorker *worker);
    void getSavingsPlansPurchaseRecommendationCallback(OAIHttpRequestWorker *worker);
    void getSavingsPlansUtilizationCallback(OAIHttpRequestWorker *worker);
    void getSavingsPlansUtilizationDetailsCallback(OAIHttpRequestWorker *worker);
    void getTagsCallback(OAIHttpRequestWorker *worker);
    void getUsageForecastCallback(OAIHttpRequestWorker *worker);
    void listCostAllocationTagsCallback(OAIHttpRequestWorker *worker);
    void listCostCategoryDefinitionsCallback(OAIHttpRequestWorker *worker);
    void listSavingsPlansPurchaseRecommendationGenerationCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void provideAnomalyFeedbackCallback(OAIHttpRequestWorker *worker);
    void startSavingsPlansPurchaseRecommendationGenerationCallback(OAIHttpRequestWorker *worker);
    void tagResourceCallback(OAIHttpRequestWorker *worker);
    void untagResourceCallback(OAIHttpRequestWorker *worker);
    void updateAnomalyMonitorCallback(OAIHttpRequestWorker *worker);
    void updateAnomalySubscriptionCallback(OAIHttpRequestWorker *worker);
    void updateCostAllocationTagsStatusCallback(OAIHttpRequestWorker *worker);
    void updateCostCategoryDefinitionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAnomalyMonitorSignal(OAICreateAnomalyMonitorResponse summary);
    void createAnomalySubscriptionSignal(OAICreateAnomalySubscriptionResponse summary);
    void createCostCategoryDefinitionSignal(OAICreateCostCategoryDefinitionResponse summary);
    void deleteAnomalyMonitorSignal(OAIObject summary);
    void deleteAnomalySubscriptionSignal(OAIObject summary);
    void deleteCostCategoryDefinitionSignal(OAIDeleteCostCategoryDefinitionResponse summary);
    void describeCostCategoryDefinitionSignal(OAIDescribeCostCategoryDefinitionResponse summary);
    void getAnomaliesSignal(OAIGetAnomaliesResponse summary);
    void getAnomalyMonitorsSignal(OAIGetAnomalyMonitorsResponse summary);
    void getAnomalySubscriptionsSignal(OAIGetAnomalySubscriptionsResponse summary);
    void getCostAndUsageSignal(OAIGetCostAndUsageResponse summary);
    void getCostAndUsageWithResourcesSignal(OAIGetCostAndUsageWithResourcesResponse summary);
    void getCostCategoriesSignal(OAIGetCostCategoriesResponse summary);
    void getCostForecastSignal(OAIGetCostForecastResponse summary);
    void getDimensionValuesSignal(OAIGetDimensionValuesResponse summary);
    void getReservationCoverageSignal(OAIGetReservationCoverageResponse summary);
    void getReservationPurchaseRecommendationSignal(OAIGetReservationPurchaseRecommendationResponse summary);
    void getReservationUtilizationSignal(OAIGetReservationUtilizationResponse summary);
    void getRightsizingRecommendationSignal(OAIGetRightsizingRecommendationResponse summary);
    void getSavingsPlanPurchaseRecommendationDetailsSignal(OAIGetSavingsPlanPurchaseRecommendationDetailsResponse summary);
    void getSavingsPlansCoverageSignal(OAIGetSavingsPlansCoverageResponse summary);
    void getSavingsPlansPurchaseRecommendationSignal(OAIGetSavingsPlansPurchaseRecommendationResponse summary);
    void getSavingsPlansUtilizationSignal(OAIGetSavingsPlansUtilizationResponse summary);
    void getSavingsPlansUtilizationDetailsSignal(OAIGetSavingsPlansUtilizationDetailsResponse summary);
    void getTagsSignal(OAIGetTagsResponse summary);
    void getUsageForecastSignal(OAIGetUsageForecastResponse summary);
    void listCostAllocationTagsSignal(OAIListCostAllocationTagsResponse summary);
    void listCostCategoryDefinitionsSignal(OAIListCostCategoryDefinitionsResponse summary);
    void listSavingsPlansPurchaseRecommendationGenerationSignal(OAIListSavingsPlansPurchaseRecommendationGenerationResponse summary);
    void listTagsForResourceSignal(OAIListTagsForResourceResponse summary);
    void provideAnomalyFeedbackSignal(OAIProvideAnomalyFeedbackResponse summary);
    void startSavingsPlansPurchaseRecommendationGenerationSignal(OAIStartSavingsPlansPurchaseRecommendationGenerationResponse summary);
    void tagResourceSignal(OAIObject summary);
    void untagResourceSignal(OAIObject summary);
    void updateAnomalyMonitorSignal(OAIUpdateAnomalyMonitorResponse summary);
    void updateAnomalySubscriptionSignal(OAIUpdateAnomalySubscriptionResponse summary);
    void updateCostAllocationTagsStatusSignal(OAIUpdateCostAllocationTagsStatusResponse summary);
    void updateCostCategoryDefinitionSignal(OAIUpdateCostCategoryDefinitionResponse summary);


    void createAnomalyMonitorSignalFull(OAIHttpRequestWorker *worker, OAICreateAnomalyMonitorResponse summary);
    void createAnomalySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAICreateAnomalySubscriptionResponse summary);
    void createCostCategoryDefinitionSignalFull(OAIHttpRequestWorker *worker, OAICreateCostCategoryDefinitionResponse summary);
    void deleteAnomalyMonitorSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteAnomalySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteCostCategoryDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteCostCategoryDefinitionResponse summary);
    void describeCostCategoryDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIDescribeCostCategoryDefinitionResponse summary);
    void getAnomaliesSignalFull(OAIHttpRequestWorker *worker, OAIGetAnomaliesResponse summary);
    void getAnomalyMonitorsSignalFull(OAIHttpRequestWorker *worker, OAIGetAnomalyMonitorsResponse summary);
    void getAnomalySubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAIGetAnomalySubscriptionsResponse summary);
    void getCostAndUsageSignalFull(OAIHttpRequestWorker *worker, OAIGetCostAndUsageResponse summary);
    void getCostAndUsageWithResourcesSignalFull(OAIHttpRequestWorker *worker, OAIGetCostAndUsageWithResourcesResponse summary);
    void getCostCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIGetCostCategoriesResponse summary);
    void getCostForecastSignalFull(OAIHttpRequestWorker *worker, OAIGetCostForecastResponse summary);
    void getDimensionValuesSignalFull(OAIHttpRequestWorker *worker, OAIGetDimensionValuesResponse summary);
    void getReservationCoverageSignalFull(OAIHttpRequestWorker *worker, OAIGetReservationCoverageResponse summary);
    void getReservationPurchaseRecommendationSignalFull(OAIHttpRequestWorker *worker, OAIGetReservationPurchaseRecommendationResponse summary);
    void getReservationUtilizationSignalFull(OAIHttpRequestWorker *worker, OAIGetReservationUtilizationResponse summary);
    void getRightsizingRecommendationSignalFull(OAIHttpRequestWorker *worker, OAIGetRightsizingRecommendationResponse summary);
    void getSavingsPlanPurchaseRecommendationDetailsSignalFull(OAIHttpRequestWorker *worker, OAIGetSavingsPlanPurchaseRecommendationDetailsResponse summary);
    void getSavingsPlansCoverageSignalFull(OAIHttpRequestWorker *worker, OAIGetSavingsPlansCoverageResponse summary);
    void getSavingsPlansPurchaseRecommendationSignalFull(OAIHttpRequestWorker *worker, OAIGetSavingsPlansPurchaseRecommendationResponse summary);
    void getSavingsPlansUtilizationSignalFull(OAIHttpRequestWorker *worker, OAIGetSavingsPlansUtilizationResponse summary);
    void getSavingsPlansUtilizationDetailsSignalFull(OAIHttpRequestWorker *worker, OAIGetSavingsPlansUtilizationDetailsResponse summary);
    void getTagsSignalFull(OAIHttpRequestWorker *worker, OAIGetTagsResponse summary);
    void getUsageForecastSignalFull(OAIHttpRequestWorker *worker, OAIGetUsageForecastResponse summary);
    void listCostAllocationTagsSignalFull(OAIHttpRequestWorker *worker, OAIListCostAllocationTagsResponse summary);
    void listCostCategoryDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIListCostCategoryDefinitionsResponse summary);
    void listSavingsPlansPurchaseRecommendationGenerationSignalFull(OAIHttpRequestWorker *worker, OAIListSavingsPlansPurchaseRecommendationGenerationResponse summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResponse summary);
    void provideAnomalyFeedbackSignalFull(OAIHttpRequestWorker *worker, OAIProvideAnomalyFeedbackResponse summary);
    void startSavingsPlansPurchaseRecommendationGenerationSignalFull(OAIHttpRequestWorker *worker, OAIStartSavingsPlansPurchaseRecommendationGenerationResponse summary);
    void tagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void untagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateAnomalyMonitorSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAnomalyMonitorResponse summary);
    void updateAnomalySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAnomalySubscriptionResponse summary);
    void updateCostAllocationTagsStatusSignalFull(OAIHttpRequestWorker *worker, OAIUpdateCostAllocationTagsStatusResponse summary);
    void updateCostCategoryDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateCostCategoryDefinitionResponse summary);

    Q_DECL_DEPRECATED_X("Use createAnomalyMonitorSignalError() instead")
    void createAnomalyMonitorSignalE(OAICreateAnomalyMonitorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnomalyMonitorSignalError(OAICreateAnomalyMonitorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnomalySubscriptionSignalError() instead")
    void createAnomalySubscriptionSignalE(OAICreateAnomalySubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnomalySubscriptionSignalError(OAICreateAnomalySubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCostCategoryDefinitionSignalError() instead")
    void createCostCategoryDefinitionSignalE(OAICreateCostCategoryDefinitionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCostCategoryDefinitionSignalError(OAICreateCostCategoryDefinitionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnomalyMonitorSignalError() instead")
    void deleteAnomalyMonitorSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnomalyMonitorSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnomalySubscriptionSignalError() instead")
    void deleteAnomalySubscriptionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnomalySubscriptionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCostCategoryDefinitionSignalError() instead")
    void deleteCostCategoryDefinitionSignalE(OAIDeleteCostCategoryDefinitionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCostCategoryDefinitionSignalError(OAIDeleteCostCategoryDefinitionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCostCategoryDefinitionSignalError() instead")
    void describeCostCategoryDefinitionSignalE(OAIDescribeCostCategoryDefinitionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCostCategoryDefinitionSignalError(OAIDescribeCostCategoryDefinitionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnomaliesSignalError() instead")
    void getAnomaliesSignalE(OAIGetAnomaliesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnomaliesSignalError(OAIGetAnomaliesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnomalyMonitorsSignalError() instead")
    void getAnomalyMonitorsSignalE(OAIGetAnomalyMonitorsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnomalyMonitorsSignalError(OAIGetAnomalyMonitorsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnomalySubscriptionsSignalError() instead")
    void getAnomalySubscriptionsSignalE(OAIGetAnomalySubscriptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnomalySubscriptionsSignalError(OAIGetAnomalySubscriptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCostAndUsageSignalError() instead")
    void getCostAndUsageSignalE(OAIGetCostAndUsageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCostAndUsageSignalError(OAIGetCostAndUsageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCostAndUsageWithResourcesSignalError() instead")
    void getCostAndUsageWithResourcesSignalE(OAIGetCostAndUsageWithResourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCostAndUsageWithResourcesSignalError(OAIGetCostAndUsageWithResourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCostCategoriesSignalError() instead")
    void getCostCategoriesSignalE(OAIGetCostCategoriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCostCategoriesSignalError(OAIGetCostCategoriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCostForecastSignalError() instead")
    void getCostForecastSignalE(OAIGetCostForecastResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCostForecastSignalError(OAIGetCostForecastResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDimensionValuesSignalError() instead")
    void getDimensionValuesSignalE(OAIGetDimensionValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDimensionValuesSignalError(OAIGetDimensionValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReservationCoverageSignalError() instead")
    void getReservationCoverageSignalE(OAIGetReservationCoverageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReservationCoverageSignalError(OAIGetReservationCoverageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReservationPurchaseRecommendationSignalError() instead")
    void getReservationPurchaseRecommendationSignalE(OAIGetReservationPurchaseRecommendationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReservationPurchaseRecommendationSignalError(OAIGetReservationPurchaseRecommendationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReservationUtilizationSignalError() instead")
    void getReservationUtilizationSignalE(OAIGetReservationUtilizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReservationUtilizationSignalError(OAIGetReservationUtilizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRightsizingRecommendationSignalError() instead")
    void getRightsizingRecommendationSignalE(OAIGetRightsizingRecommendationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRightsizingRecommendationSignalError(OAIGetRightsizingRecommendationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavingsPlanPurchaseRecommendationDetailsSignalError() instead")
    void getSavingsPlanPurchaseRecommendationDetailsSignalE(OAIGetSavingsPlanPurchaseRecommendationDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavingsPlanPurchaseRecommendationDetailsSignalError(OAIGetSavingsPlanPurchaseRecommendationDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavingsPlansCoverageSignalError() instead")
    void getSavingsPlansCoverageSignalE(OAIGetSavingsPlansCoverageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavingsPlansCoverageSignalError(OAIGetSavingsPlansCoverageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavingsPlansPurchaseRecommendationSignalError() instead")
    void getSavingsPlansPurchaseRecommendationSignalE(OAIGetSavingsPlansPurchaseRecommendationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavingsPlansPurchaseRecommendationSignalError(OAIGetSavingsPlansPurchaseRecommendationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavingsPlansUtilizationSignalError() instead")
    void getSavingsPlansUtilizationSignalE(OAIGetSavingsPlansUtilizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavingsPlansUtilizationSignalError(OAIGetSavingsPlansUtilizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavingsPlansUtilizationDetailsSignalError() instead")
    void getSavingsPlansUtilizationDetailsSignalE(OAIGetSavingsPlansUtilizationDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavingsPlansUtilizationDetailsSignalError(OAIGetSavingsPlansUtilizationDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagsSignalError() instead")
    void getTagsSignalE(OAIGetTagsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagsSignalError(OAIGetTagsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsageForecastSignalError() instead")
    void getUsageForecastSignalE(OAIGetUsageForecastResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsageForecastSignalError(OAIGetUsageForecastResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCostAllocationTagsSignalError() instead")
    void listCostAllocationTagsSignalE(OAIListCostAllocationTagsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCostAllocationTagsSignalError(OAIListCostAllocationTagsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCostCategoryDefinitionsSignalError() instead")
    void listCostCategoryDefinitionsSignalE(OAIListCostCategoryDefinitionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCostCategoryDefinitionsSignalError(OAIListCostCategoryDefinitionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSavingsPlansPurchaseRecommendationGenerationSignalError() instead")
    void listSavingsPlansPurchaseRecommendationGenerationSignalE(OAIListSavingsPlansPurchaseRecommendationGenerationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSavingsPlansPurchaseRecommendationGenerationSignalError(OAIListSavingsPlansPurchaseRecommendationGenerationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provideAnomalyFeedbackSignalError() instead")
    void provideAnomalyFeedbackSignalE(OAIProvideAnomalyFeedbackResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void provideAnomalyFeedbackSignalError(OAIProvideAnomalyFeedbackResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSavingsPlansPurchaseRecommendationGenerationSignalError() instead")
    void startSavingsPlansPurchaseRecommendationGenerationSignalE(OAIStartSavingsPlansPurchaseRecommendationGenerationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startSavingsPlansPurchaseRecommendationGenerationSignalError(OAIStartSavingsPlansPurchaseRecommendationGenerationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalError() instead")
    void tagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalError() instead")
    void untagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnomalyMonitorSignalError() instead")
    void updateAnomalyMonitorSignalE(OAIUpdateAnomalyMonitorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnomalyMonitorSignalError(OAIUpdateAnomalyMonitorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnomalySubscriptionSignalError() instead")
    void updateAnomalySubscriptionSignalE(OAIUpdateAnomalySubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnomalySubscriptionSignalError(OAIUpdateAnomalySubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCostAllocationTagsStatusSignalError() instead")
    void updateCostAllocationTagsStatusSignalE(OAIUpdateCostAllocationTagsStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCostAllocationTagsStatusSignalError(OAIUpdateCostAllocationTagsStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCostCategoryDefinitionSignalError() instead")
    void updateCostCategoryDefinitionSignalE(OAIUpdateCostCategoryDefinitionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCostCategoryDefinitionSignalError(OAIUpdateCostCategoryDefinitionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAnomalyMonitorSignalErrorFull() instead")
    void createAnomalyMonitorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnomalyMonitorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnomalySubscriptionSignalErrorFull() instead")
    void createAnomalySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnomalySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCostCategoryDefinitionSignalErrorFull() instead")
    void createCostCategoryDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCostCategoryDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnomalyMonitorSignalErrorFull() instead")
    void deleteAnomalyMonitorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnomalyMonitorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnomalySubscriptionSignalErrorFull() instead")
    void deleteAnomalySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnomalySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCostCategoryDefinitionSignalErrorFull() instead")
    void deleteCostCategoryDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCostCategoryDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCostCategoryDefinitionSignalErrorFull() instead")
    void describeCostCategoryDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCostCategoryDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnomaliesSignalErrorFull() instead")
    void getAnomaliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnomaliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnomalyMonitorsSignalErrorFull() instead")
    void getAnomalyMonitorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnomalyMonitorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnomalySubscriptionsSignalErrorFull() instead")
    void getAnomalySubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnomalySubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCostAndUsageSignalErrorFull() instead")
    void getCostAndUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCostAndUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCostAndUsageWithResourcesSignalErrorFull() instead")
    void getCostAndUsageWithResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCostAndUsageWithResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCostCategoriesSignalErrorFull() instead")
    void getCostCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCostCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCostForecastSignalErrorFull() instead")
    void getCostForecastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCostForecastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDimensionValuesSignalErrorFull() instead")
    void getDimensionValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDimensionValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReservationCoverageSignalErrorFull() instead")
    void getReservationCoverageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReservationCoverageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReservationPurchaseRecommendationSignalErrorFull() instead")
    void getReservationPurchaseRecommendationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReservationPurchaseRecommendationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReservationUtilizationSignalErrorFull() instead")
    void getReservationUtilizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReservationUtilizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRightsizingRecommendationSignalErrorFull() instead")
    void getRightsizingRecommendationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRightsizingRecommendationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavingsPlanPurchaseRecommendationDetailsSignalErrorFull() instead")
    void getSavingsPlanPurchaseRecommendationDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavingsPlanPurchaseRecommendationDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavingsPlansCoverageSignalErrorFull() instead")
    void getSavingsPlansCoverageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavingsPlansCoverageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavingsPlansPurchaseRecommendationSignalErrorFull() instead")
    void getSavingsPlansPurchaseRecommendationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavingsPlansPurchaseRecommendationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavingsPlansUtilizationSignalErrorFull() instead")
    void getSavingsPlansUtilizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavingsPlansUtilizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavingsPlansUtilizationDetailsSignalErrorFull() instead")
    void getSavingsPlansUtilizationDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavingsPlansUtilizationDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagsSignalErrorFull() instead")
    void getTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsageForecastSignalErrorFull() instead")
    void getUsageForecastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsageForecastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCostAllocationTagsSignalErrorFull() instead")
    void listCostAllocationTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCostAllocationTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCostCategoryDefinitionsSignalErrorFull() instead")
    void listCostCategoryDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCostCategoryDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSavingsPlansPurchaseRecommendationGenerationSignalErrorFull() instead")
    void listSavingsPlansPurchaseRecommendationGenerationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSavingsPlansPurchaseRecommendationGenerationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provideAnomalyFeedbackSignalErrorFull() instead")
    void provideAnomalyFeedbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provideAnomalyFeedbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSavingsPlansPurchaseRecommendationGenerationSignalErrorFull() instead")
    void startSavingsPlansPurchaseRecommendationGenerationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startSavingsPlansPurchaseRecommendationGenerationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalErrorFull() instead")
    void tagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalErrorFull() instead")
    void untagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnomalyMonitorSignalErrorFull() instead")
    void updateAnomalyMonitorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnomalyMonitorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnomalySubscriptionSignalErrorFull() instead")
    void updateAnomalySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnomalySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCostAllocationTagsStatusSignalErrorFull() instead")
    void updateCostAllocationTagsStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCostAllocationTagsStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCostCategoryDefinitionSignalErrorFull() instead")
    void updateCostCategoryDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCostCategoryDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
