/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlansAmortizedCommitment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlansAmortizedCommitment::OAISavingsPlansAmortizedCommitment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlansAmortizedCommitment::OAISavingsPlansAmortizedCommitment() {
    this->initializeModel();
}

OAISavingsPlansAmortizedCommitment::~OAISavingsPlansAmortizedCommitment() {}

void OAISavingsPlansAmortizedCommitment::initializeModel() {

    m_amortized_recurring_commitment_isSet = false;
    m_amortized_recurring_commitment_isValid = false;

    m_amortized_upfront_commitment_isSet = false;
    m_amortized_upfront_commitment_isValid = false;

    m_total_amortized_commitment_isSet = false;
    m_total_amortized_commitment_isValid = false;
}

void OAISavingsPlansAmortizedCommitment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavingsPlansAmortizedCommitment::fromJsonObject(QJsonObject json) {

    m_amortized_recurring_commitment_isValid = ::OpenAPI::fromJsonValue(m_amortized_recurring_commitment, json[QString("AmortizedRecurringCommitment")]);
    m_amortized_recurring_commitment_isSet = !json[QString("AmortizedRecurringCommitment")].isNull() && m_amortized_recurring_commitment_isValid;

    m_amortized_upfront_commitment_isValid = ::OpenAPI::fromJsonValue(m_amortized_upfront_commitment, json[QString("AmortizedUpfrontCommitment")]);
    m_amortized_upfront_commitment_isSet = !json[QString("AmortizedUpfrontCommitment")].isNull() && m_amortized_upfront_commitment_isValid;

    m_total_amortized_commitment_isValid = ::OpenAPI::fromJsonValue(m_total_amortized_commitment, json[QString("TotalAmortizedCommitment")]);
    m_total_amortized_commitment_isSet = !json[QString("TotalAmortizedCommitment")].isNull() && m_total_amortized_commitment_isValid;
}

QString OAISavingsPlansAmortizedCommitment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavingsPlansAmortizedCommitment::asJsonObject() const {
    QJsonObject obj;
    if (m_amortized_recurring_commitment_isSet) {
        obj.insert(QString("AmortizedRecurringCommitment"), ::OpenAPI::toJsonValue(m_amortized_recurring_commitment));
    }
    if (m_amortized_upfront_commitment_isSet) {
        obj.insert(QString("AmortizedUpfrontCommitment"), ::OpenAPI::toJsonValue(m_amortized_upfront_commitment));
    }
    if (m_total_amortized_commitment_isSet) {
        obj.insert(QString("TotalAmortizedCommitment"), ::OpenAPI::toJsonValue(m_total_amortized_commitment));
    }
    return obj;
}

QString OAISavingsPlansAmortizedCommitment::getAmortizedRecurringCommitment() const {
    return m_amortized_recurring_commitment;
}
void OAISavingsPlansAmortizedCommitment::setAmortizedRecurringCommitment(const QString &amortized_recurring_commitment) {
    m_amortized_recurring_commitment = amortized_recurring_commitment;
    m_amortized_recurring_commitment_isSet = true;
}

bool OAISavingsPlansAmortizedCommitment::is_amortized_recurring_commitment_Set() const{
    return m_amortized_recurring_commitment_isSet;
}

bool OAISavingsPlansAmortizedCommitment::is_amortized_recurring_commitment_Valid() const{
    return m_amortized_recurring_commitment_isValid;
}

QString OAISavingsPlansAmortizedCommitment::getAmortizedUpfrontCommitment() const {
    return m_amortized_upfront_commitment;
}
void OAISavingsPlansAmortizedCommitment::setAmortizedUpfrontCommitment(const QString &amortized_upfront_commitment) {
    m_amortized_upfront_commitment = amortized_upfront_commitment;
    m_amortized_upfront_commitment_isSet = true;
}

bool OAISavingsPlansAmortizedCommitment::is_amortized_upfront_commitment_Set() const{
    return m_amortized_upfront_commitment_isSet;
}

bool OAISavingsPlansAmortizedCommitment::is_amortized_upfront_commitment_Valid() const{
    return m_amortized_upfront_commitment_isValid;
}

QString OAISavingsPlansAmortizedCommitment::getTotalAmortizedCommitment() const {
    return m_total_amortized_commitment;
}
void OAISavingsPlansAmortizedCommitment::setTotalAmortizedCommitment(const QString &total_amortized_commitment) {
    m_total_amortized_commitment = total_amortized_commitment;
    m_total_amortized_commitment_isSet = true;
}

bool OAISavingsPlansAmortizedCommitment::is_total_amortized_commitment_Set() const{
    return m_total_amortized_commitment_isSet;
}

bool OAISavingsPlansAmortizedCommitment::is_total_amortized_commitment_Valid() const{
    return m_total_amortized_commitment_isValid;
}

bool OAISavingsPlansAmortizedCommitment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amortized_recurring_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amortized_upfront_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amortized_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavingsPlansAmortizedCommitment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
