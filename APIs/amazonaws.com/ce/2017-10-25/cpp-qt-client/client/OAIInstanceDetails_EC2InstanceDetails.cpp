/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceDetails_EC2InstanceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceDetails_EC2InstanceDetails::OAIInstanceDetails_EC2InstanceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceDetails_EC2InstanceDetails::OAIInstanceDetails_EC2InstanceDetails() {
    this->initializeModel();
}

OAIInstanceDetails_EC2InstanceDetails::~OAIInstanceDetails_EC2InstanceDetails() {}

void OAIInstanceDetails_EC2InstanceDetails::initializeModel() {

    m_family_isSet = false;
    m_family_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_tenancy_isSet = false;
    m_tenancy_isValid = false;

    m_current_generation_isSet = false;
    m_current_generation_isValid = false;

    m_size_flex_eligible_isSet = false;
    m_size_flex_eligible_isValid = false;
}

void OAIInstanceDetails_EC2InstanceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceDetails_EC2InstanceDetails::fromJsonObject(QJsonObject json) {

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("Family")]);
    m_family_isSet = !json[QString("Family")].isNull() && m_family_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("Platform")]);
    m_platform_isSet = !json[QString("Platform")].isNull() && m_platform_isValid;

    m_tenancy_isValid = ::OpenAPI::fromJsonValue(m_tenancy, json[QString("Tenancy")]);
    m_tenancy_isSet = !json[QString("Tenancy")].isNull() && m_tenancy_isValid;

    m_current_generation_isValid = ::OpenAPI::fromJsonValue(m_current_generation, json[QString("CurrentGeneration")]);
    m_current_generation_isSet = !json[QString("CurrentGeneration")].isNull() && m_current_generation_isValid;

    m_size_flex_eligible_isValid = ::OpenAPI::fromJsonValue(m_size_flex_eligible, json[QString("SizeFlexEligible")]);
    m_size_flex_eligible_isSet = !json[QString("SizeFlexEligible")].isNull() && m_size_flex_eligible_isValid;
}

QString OAIInstanceDetails_EC2InstanceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceDetails_EC2InstanceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_family_isSet) {
        obj.insert(QString("Family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_platform_isSet) {
        obj.insert(QString("Platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_tenancy_isSet) {
        obj.insert(QString("Tenancy"), ::OpenAPI::toJsonValue(m_tenancy));
    }
    if (m_current_generation_isSet) {
        obj.insert(QString("CurrentGeneration"), ::OpenAPI::toJsonValue(m_current_generation));
    }
    if (m_size_flex_eligible_isSet) {
        obj.insert(QString("SizeFlexEligible"), ::OpenAPI::toJsonValue(m_size_flex_eligible));
    }
    return obj;
}

QString OAIInstanceDetails_EC2InstanceDetails::getFamily() const {
    return m_family;
}
void OAIInstanceDetails_EC2InstanceDetails::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_family_Set() const{
    return m_family_isSet;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIInstanceDetails_EC2InstanceDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIInstanceDetails_EC2InstanceDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIInstanceDetails_EC2InstanceDetails::getRegion() const {
    return m_region;
}
void OAIInstanceDetails_EC2InstanceDetails::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_region_Set() const{
    return m_region_isSet;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIInstanceDetails_EC2InstanceDetails::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIInstanceDetails_EC2InstanceDetails::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAIInstanceDetails_EC2InstanceDetails::getPlatform() const {
    return m_platform;
}
void OAIInstanceDetails_EC2InstanceDetails::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIInstanceDetails_EC2InstanceDetails::getTenancy() const {
    return m_tenancy;
}
void OAIInstanceDetails_EC2InstanceDetails::setTenancy(const QString &tenancy) {
    m_tenancy = tenancy;
    m_tenancy_isSet = true;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_tenancy_Set() const{
    return m_tenancy_isSet;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_tenancy_Valid() const{
    return m_tenancy_isValid;
}

bool OAIInstanceDetails_EC2InstanceDetails::getCurrentGeneration() const {
    return m_current_generation;
}
void OAIInstanceDetails_EC2InstanceDetails::setCurrentGeneration(const bool &current_generation) {
    m_current_generation = current_generation;
    m_current_generation_isSet = true;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_current_generation_Set() const{
    return m_current_generation_isSet;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_current_generation_Valid() const{
    return m_current_generation_isValid;
}

bool OAIInstanceDetails_EC2InstanceDetails::getSizeFlexEligible() const {
    return m_size_flex_eligible;
}
void OAIInstanceDetails_EC2InstanceDetails::setSizeFlexEligible(const bool &size_flex_eligible) {
    m_size_flex_eligible = size_flex_eligible;
    m_size_flex_eligible_isSet = true;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_size_flex_eligible_Set() const{
    return m_size_flex_eligible_isSet;
}

bool OAIInstanceDetails_EC2InstanceDetails::is_size_flex_eligible_Valid() const{
    return m_size_flex_eligible_isValid;
}

bool OAIInstanceDetails_EC2InstanceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenancy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_flex_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceDetails_EC2InstanceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
