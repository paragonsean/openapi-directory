/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlansPurchaseRecommendationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlansPurchaseRecommendationSummary::OAISavingsPlansPurchaseRecommendationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlansPurchaseRecommendationSummary::OAISavingsPlansPurchaseRecommendationSummary() {
    this->initializeModel();
}

OAISavingsPlansPurchaseRecommendationSummary::~OAISavingsPlansPurchaseRecommendationSummary() {}

void OAISavingsPlansPurchaseRecommendationSummary::initializeModel() {

    m_estimated_roi_isSet = false;
    m_estimated_roi_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_estimated_total_cost_isSet = false;
    m_estimated_total_cost_isValid = false;

    m_current_on_demand_spend_isSet = false;
    m_current_on_demand_spend_isValid = false;

    m_estimated_savings_amount_isSet = false;
    m_estimated_savings_amount_isValid = false;

    m_total_recommendation_count_isSet = false;
    m_total_recommendation_count_isValid = false;

    m_daily_commitment_to_purchase_isSet = false;
    m_daily_commitment_to_purchase_isValid = false;

    m_hourly_commitment_to_purchase_isSet = false;
    m_hourly_commitment_to_purchase_isValid = false;

    m_estimated_savings_percentage_isSet = false;
    m_estimated_savings_percentage_isValid = false;

    m_estimated_monthly_savings_amount_isSet = false;
    m_estimated_monthly_savings_amount_isValid = false;

    m_estimated_on_demand_cost_with_current_commitment_isSet = false;
    m_estimated_on_demand_cost_with_current_commitment_isValid = false;
}

void OAISavingsPlansPurchaseRecommendationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavingsPlansPurchaseRecommendationSummary::fromJsonObject(QJsonObject json) {

    m_estimated_roi_isValid = ::OpenAPI::fromJsonValue(m_estimated_roi, json[QString("EstimatedROI")]);
    m_estimated_roi_isSet = !json[QString("EstimatedROI")].isNull() && m_estimated_roi_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_estimated_total_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_total_cost, json[QString("EstimatedTotalCost")]);
    m_estimated_total_cost_isSet = !json[QString("EstimatedTotalCost")].isNull() && m_estimated_total_cost_isValid;

    m_current_on_demand_spend_isValid = ::OpenAPI::fromJsonValue(m_current_on_demand_spend, json[QString("CurrentOnDemandSpend")]);
    m_current_on_demand_spend_isSet = !json[QString("CurrentOnDemandSpend")].isNull() && m_current_on_demand_spend_isValid;

    m_estimated_savings_amount_isValid = ::OpenAPI::fromJsonValue(m_estimated_savings_amount, json[QString("EstimatedSavingsAmount")]);
    m_estimated_savings_amount_isSet = !json[QString("EstimatedSavingsAmount")].isNull() && m_estimated_savings_amount_isValid;

    m_total_recommendation_count_isValid = ::OpenAPI::fromJsonValue(m_total_recommendation_count, json[QString("TotalRecommendationCount")]);
    m_total_recommendation_count_isSet = !json[QString("TotalRecommendationCount")].isNull() && m_total_recommendation_count_isValid;

    m_daily_commitment_to_purchase_isValid = ::OpenAPI::fromJsonValue(m_daily_commitment_to_purchase, json[QString("DailyCommitmentToPurchase")]);
    m_daily_commitment_to_purchase_isSet = !json[QString("DailyCommitmentToPurchase")].isNull() && m_daily_commitment_to_purchase_isValid;

    m_hourly_commitment_to_purchase_isValid = ::OpenAPI::fromJsonValue(m_hourly_commitment_to_purchase, json[QString("HourlyCommitmentToPurchase")]);
    m_hourly_commitment_to_purchase_isSet = !json[QString("HourlyCommitmentToPurchase")].isNull() && m_hourly_commitment_to_purchase_isValid;

    m_estimated_savings_percentage_isValid = ::OpenAPI::fromJsonValue(m_estimated_savings_percentage, json[QString("EstimatedSavingsPercentage")]);
    m_estimated_savings_percentage_isSet = !json[QString("EstimatedSavingsPercentage")].isNull() && m_estimated_savings_percentage_isValid;

    m_estimated_monthly_savings_amount_isValid = ::OpenAPI::fromJsonValue(m_estimated_monthly_savings_amount, json[QString("EstimatedMonthlySavingsAmount")]);
    m_estimated_monthly_savings_amount_isSet = !json[QString("EstimatedMonthlySavingsAmount")].isNull() && m_estimated_monthly_savings_amount_isValid;

    m_estimated_on_demand_cost_with_current_commitment_isValid = ::OpenAPI::fromJsonValue(m_estimated_on_demand_cost_with_current_commitment, json[QString("EstimatedOnDemandCostWithCurrentCommitment")]);
    m_estimated_on_demand_cost_with_current_commitment_isSet = !json[QString("EstimatedOnDemandCostWithCurrentCommitment")].isNull() && m_estimated_on_demand_cost_with_current_commitment_isValid;
}

QString OAISavingsPlansPurchaseRecommendationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavingsPlansPurchaseRecommendationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_estimated_roi_isSet) {
        obj.insert(QString("EstimatedROI"), ::OpenAPI::toJsonValue(m_estimated_roi));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_estimated_total_cost_isSet) {
        obj.insert(QString("EstimatedTotalCost"), ::OpenAPI::toJsonValue(m_estimated_total_cost));
    }
    if (m_current_on_demand_spend_isSet) {
        obj.insert(QString("CurrentOnDemandSpend"), ::OpenAPI::toJsonValue(m_current_on_demand_spend));
    }
    if (m_estimated_savings_amount_isSet) {
        obj.insert(QString("EstimatedSavingsAmount"), ::OpenAPI::toJsonValue(m_estimated_savings_amount));
    }
    if (m_total_recommendation_count_isSet) {
        obj.insert(QString("TotalRecommendationCount"), ::OpenAPI::toJsonValue(m_total_recommendation_count));
    }
    if (m_daily_commitment_to_purchase_isSet) {
        obj.insert(QString("DailyCommitmentToPurchase"), ::OpenAPI::toJsonValue(m_daily_commitment_to_purchase));
    }
    if (m_hourly_commitment_to_purchase_isSet) {
        obj.insert(QString("HourlyCommitmentToPurchase"), ::OpenAPI::toJsonValue(m_hourly_commitment_to_purchase));
    }
    if (m_estimated_savings_percentage_isSet) {
        obj.insert(QString("EstimatedSavingsPercentage"), ::OpenAPI::toJsonValue(m_estimated_savings_percentage));
    }
    if (m_estimated_monthly_savings_amount_isSet) {
        obj.insert(QString("EstimatedMonthlySavingsAmount"), ::OpenAPI::toJsonValue(m_estimated_monthly_savings_amount));
    }
    if (m_estimated_on_demand_cost_with_current_commitment_isSet) {
        obj.insert(QString("EstimatedOnDemandCostWithCurrentCommitment"), ::OpenAPI::toJsonValue(m_estimated_on_demand_cost_with_current_commitment));
    }
    return obj;
}

QString OAISavingsPlansPurchaseRecommendationSummary::getEstimatedRoi() const {
    return m_estimated_roi;
}
void OAISavingsPlansPurchaseRecommendationSummary::setEstimatedRoi(const QString &estimated_roi) {
    m_estimated_roi = estimated_roi;
    m_estimated_roi_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_estimated_roi_Set() const{
    return m_estimated_roi_isSet;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_estimated_roi_Valid() const{
    return m_estimated_roi_isValid;
}

QString OAISavingsPlansPurchaseRecommendationSummary::getCurrencyCode() const {
    return m_currency_code;
}
void OAISavingsPlansPurchaseRecommendationSummary::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAISavingsPlansPurchaseRecommendationSummary::getEstimatedTotalCost() const {
    return m_estimated_total_cost;
}
void OAISavingsPlansPurchaseRecommendationSummary::setEstimatedTotalCost(const QString &estimated_total_cost) {
    m_estimated_total_cost = estimated_total_cost;
    m_estimated_total_cost_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_estimated_total_cost_Set() const{
    return m_estimated_total_cost_isSet;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_estimated_total_cost_Valid() const{
    return m_estimated_total_cost_isValid;
}

QString OAISavingsPlansPurchaseRecommendationSummary::getCurrentOnDemandSpend() const {
    return m_current_on_demand_spend;
}
void OAISavingsPlansPurchaseRecommendationSummary::setCurrentOnDemandSpend(const QString &current_on_demand_spend) {
    m_current_on_demand_spend = current_on_demand_spend;
    m_current_on_demand_spend_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_current_on_demand_spend_Set() const{
    return m_current_on_demand_spend_isSet;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_current_on_demand_spend_Valid() const{
    return m_current_on_demand_spend_isValid;
}

QString OAISavingsPlansPurchaseRecommendationSummary::getEstimatedSavingsAmount() const {
    return m_estimated_savings_amount;
}
void OAISavingsPlansPurchaseRecommendationSummary::setEstimatedSavingsAmount(const QString &estimated_savings_amount) {
    m_estimated_savings_amount = estimated_savings_amount;
    m_estimated_savings_amount_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_estimated_savings_amount_Set() const{
    return m_estimated_savings_amount_isSet;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_estimated_savings_amount_Valid() const{
    return m_estimated_savings_amount_isValid;
}

QString OAISavingsPlansPurchaseRecommendationSummary::getTotalRecommendationCount() const {
    return m_total_recommendation_count;
}
void OAISavingsPlansPurchaseRecommendationSummary::setTotalRecommendationCount(const QString &total_recommendation_count) {
    m_total_recommendation_count = total_recommendation_count;
    m_total_recommendation_count_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_total_recommendation_count_Set() const{
    return m_total_recommendation_count_isSet;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_total_recommendation_count_Valid() const{
    return m_total_recommendation_count_isValid;
}

QString OAISavingsPlansPurchaseRecommendationSummary::getDailyCommitmentToPurchase() const {
    return m_daily_commitment_to_purchase;
}
void OAISavingsPlansPurchaseRecommendationSummary::setDailyCommitmentToPurchase(const QString &daily_commitment_to_purchase) {
    m_daily_commitment_to_purchase = daily_commitment_to_purchase;
    m_daily_commitment_to_purchase_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_daily_commitment_to_purchase_Set() const{
    return m_daily_commitment_to_purchase_isSet;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_daily_commitment_to_purchase_Valid() const{
    return m_daily_commitment_to_purchase_isValid;
}

QString OAISavingsPlansPurchaseRecommendationSummary::getHourlyCommitmentToPurchase() const {
    return m_hourly_commitment_to_purchase;
}
void OAISavingsPlansPurchaseRecommendationSummary::setHourlyCommitmentToPurchase(const QString &hourly_commitment_to_purchase) {
    m_hourly_commitment_to_purchase = hourly_commitment_to_purchase;
    m_hourly_commitment_to_purchase_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_hourly_commitment_to_purchase_Set() const{
    return m_hourly_commitment_to_purchase_isSet;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_hourly_commitment_to_purchase_Valid() const{
    return m_hourly_commitment_to_purchase_isValid;
}

QString OAISavingsPlansPurchaseRecommendationSummary::getEstimatedSavingsPercentage() const {
    return m_estimated_savings_percentage;
}
void OAISavingsPlansPurchaseRecommendationSummary::setEstimatedSavingsPercentage(const QString &estimated_savings_percentage) {
    m_estimated_savings_percentage = estimated_savings_percentage;
    m_estimated_savings_percentage_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_estimated_savings_percentage_Set() const{
    return m_estimated_savings_percentage_isSet;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_estimated_savings_percentage_Valid() const{
    return m_estimated_savings_percentage_isValid;
}

QString OAISavingsPlansPurchaseRecommendationSummary::getEstimatedMonthlySavingsAmount() const {
    return m_estimated_monthly_savings_amount;
}
void OAISavingsPlansPurchaseRecommendationSummary::setEstimatedMonthlySavingsAmount(const QString &estimated_monthly_savings_amount) {
    m_estimated_monthly_savings_amount = estimated_monthly_savings_amount;
    m_estimated_monthly_savings_amount_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_estimated_monthly_savings_amount_Set() const{
    return m_estimated_monthly_savings_amount_isSet;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_estimated_monthly_savings_amount_Valid() const{
    return m_estimated_monthly_savings_amount_isValid;
}

QString OAISavingsPlansPurchaseRecommendationSummary::getEstimatedOnDemandCostWithCurrentCommitment() const {
    return m_estimated_on_demand_cost_with_current_commitment;
}
void OAISavingsPlansPurchaseRecommendationSummary::setEstimatedOnDemandCostWithCurrentCommitment(const QString &estimated_on_demand_cost_with_current_commitment) {
    m_estimated_on_demand_cost_with_current_commitment = estimated_on_demand_cost_with_current_commitment;
    m_estimated_on_demand_cost_with_current_commitment_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_estimated_on_demand_cost_with_current_commitment_Set() const{
    return m_estimated_on_demand_cost_with_current_commitment_isSet;
}

bool OAISavingsPlansPurchaseRecommendationSummary::is_estimated_on_demand_cost_with_current_commitment_Valid() const{
    return m_estimated_on_demand_cost_with_current_commitment_isValid;
}

bool OAISavingsPlansPurchaseRecommendationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_estimated_roi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_total_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_on_demand_spend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_savings_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_recommendation_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_commitment_to_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly_commitment_to_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_savings_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_monthly_savings_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_on_demand_cost_with_current_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavingsPlansPurchaseRecommendationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
