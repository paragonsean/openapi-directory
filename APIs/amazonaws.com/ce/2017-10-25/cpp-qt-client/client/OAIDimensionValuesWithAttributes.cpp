/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionValuesWithAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionValuesWithAttributes::OAIDimensionValuesWithAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionValuesWithAttributes::OAIDimensionValuesWithAttributes() {
    this->initializeModel();
}

OAIDimensionValuesWithAttributes::~OAIDimensionValuesWithAttributes() {}

void OAIDimensionValuesWithAttributes::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAIDimensionValuesWithAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionValuesWithAttributes::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;
}

QString OAIDimensionValuesWithAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionValuesWithAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

QString OAIDimensionValuesWithAttributes::getValue() const {
    return m_value;
}
void OAIDimensionValuesWithAttributes::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDimensionValuesWithAttributes::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDimensionValuesWithAttributes::is_value_Valid() const{
    return m_value_isValid;
}

QMap OAIDimensionValuesWithAttributes::getAttributes() const {
    return m_attributes;
}
void OAIDimensionValuesWithAttributes::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIDimensionValuesWithAttributes::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIDimensionValuesWithAttributes::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIDimensionValuesWithAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionValuesWithAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
