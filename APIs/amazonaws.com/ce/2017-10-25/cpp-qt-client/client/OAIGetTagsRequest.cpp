/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTagsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTagsRequest::OAIGetTagsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTagsRequest::OAIGetTagsRequest() {
    this->initializeModel();
}

OAIGetTagsRequest::~OAIGetTagsRequest() {}

void OAIGetTagsRequest::initializeModel() {

    m_search_string_isSet = false;
    m_search_string_isValid = false;

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_tag_key_isSet = false;
    m_tag_key_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetTagsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTagsRequest::fromJsonObject(QJsonObject json) {

    m_search_string_isValid = ::OpenAPI::fromJsonValue(m_search_string, json[QString("SearchString")]);
    m_search_string_isSet = !json[QString("SearchString")].isNull() && m_search_string_isValid;

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("TimePeriod")]);
    m_time_period_isSet = !json[QString("TimePeriod")].isNull() && m_time_period_isValid;

    m_tag_key_isValid = ::OpenAPI::fromJsonValue(m_tag_key, json[QString("TagKey")]);
    m_tag_key_isSet = !json[QString("TagKey")].isNull() && m_tag_key_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetTagsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTagsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_search_string_isSet) {
        obj.insert(QString("SearchString"), ::OpenAPI::toJsonValue(m_search_string));
    }
    if (m_time_period.isSet()) {
        obj.insert(QString("TimePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_tag_key_isSet) {
        obj.insert(QString("TagKey"), ::OpenAPI::toJsonValue(m_tag_key));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QString OAIGetTagsRequest::getSearchString() const {
    return m_search_string;
}
void OAIGetTagsRequest::setSearchString(const QString &search_string) {
    m_search_string = search_string;
    m_search_string_isSet = true;
}

bool OAIGetTagsRequest::is_search_string_Set() const{
    return m_search_string_isSet;
}

bool OAIGetTagsRequest::is_search_string_Valid() const{
    return m_search_string_isValid;
}

OAIGetTagsRequest_TimePeriod OAIGetTagsRequest::getTimePeriod() const {
    return m_time_period;
}
void OAIGetTagsRequest::setTimePeriod(const OAIGetTagsRequest_TimePeriod &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIGetTagsRequest::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIGetTagsRequest::is_time_period_Valid() const{
    return m_time_period_isValid;
}

QString OAIGetTagsRequest::getTagKey() const {
    return m_tag_key;
}
void OAIGetTagsRequest::setTagKey(const QString &tag_key) {
    m_tag_key = tag_key;
    m_tag_key_isSet = true;
}

bool OAIGetTagsRequest::is_tag_key_Set() const{
    return m_tag_key_isSet;
}

bool OAIGetTagsRequest::is_tag_key_Valid() const{
    return m_tag_key_isValid;
}

OAIExpression OAIGetTagsRequest::getFilter() const {
    return m_filter;
}
void OAIGetTagsRequest::setFilter(const OAIExpression &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetTagsRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetTagsRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QList OAIGetTagsRequest::getSortBy() const {
    return m_sort_by;
}
void OAIGetTagsRequest::setSortBy(const QList &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIGetTagsRequest::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIGetTagsRequest::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

qint32 OAIGetTagsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetTagsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetTagsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetTagsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIGetTagsRequest::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetTagsRequest::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetTagsRequest::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetTagsRequest::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetTagsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_search_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTagsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_time_period_isValid && true;
}

} // namespace OpenAPI
