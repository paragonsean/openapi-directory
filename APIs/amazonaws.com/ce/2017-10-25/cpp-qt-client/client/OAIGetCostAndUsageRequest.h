/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetCostAndUsageRequest.h
 *
 * 
 */

#ifndef OAIGetCostAndUsageRequest_H
#define OAIGetCostAndUsageRequest_H

#include <QJsonObject>

#include "OAIGetCostAndUsageRequest_Filter.h"
#include "OAIGetCostAndUsageRequest_TimePeriod.h"
#include "OAIGranularity.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetCostAndUsageRequest_TimePeriod;
class OAIGetCostAndUsageRequest_Filter;

class OAIGetCostAndUsageRequest : public OAIObject {
public:
    OAIGetCostAndUsageRequest();
    OAIGetCostAndUsageRequest(QString json);
    ~OAIGetCostAndUsageRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGetCostAndUsageRequest_TimePeriod getTimePeriod() const;
    void setTimePeriod(const OAIGetCostAndUsageRequest_TimePeriod &time_period);
    bool is_time_period_Set() const;
    bool is_time_period_Valid() const;

    OAIGranularity getGranularity() const;
    void setGranularity(const OAIGranularity &granularity);
    bool is_granularity_Set() const;
    bool is_granularity_Valid() const;

    OAIGetCostAndUsageRequest_Filter getFilter() const;
    void setFilter(const OAIGetCostAndUsageRequest_Filter &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    QList getMetrics() const;
    void setMetrics(const QList &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    QList getGroupBy() const;
    void setGroupBy(const QList &group_by);
    bool is_group_by_Set() const;
    bool is_group_by_Valid() const;

    QString getNextPageToken() const;
    void setNextPageToken(const QString &next_page_token);
    bool is_next_page_token_Set() const;
    bool is_next_page_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGetCostAndUsageRequest_TimePeriod m_time_period;
    bool m_time_period_isSet;
    bool m_time_period_isValid;

    OAIGranularity m_granularity;
    bool m_granularity_isSet;
    bool m_granularity_isValid;

    OAIGetCostAndUsageRequest_Filter m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    QList m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;

    QList m_group_by;
    bool m_group_by_isSet;
    bool m_group_by_isValid;

    QString m_next_page_token;
    bool m_next_page_token_isSet;
    bool m_next_page_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetCostAndUsageRequest)

#endif // OAIGetCostAndUsageRequest_H
