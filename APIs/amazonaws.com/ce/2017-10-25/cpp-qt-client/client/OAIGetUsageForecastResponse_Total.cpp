/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetUsageForecastResponse_Total.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetUsageForecastResponse_Total::OAIGetUsageForecastResponse_Total(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetUsageForecastResponse_Total::OAIGetUsageForecastResponse_Total() {
    this->initializeModel();
}

OAIGetUsageForecastResponse_Total::~OAIGetUsageForecastResponse_Total() {}

void OAIGetUsageForecastResponse_Total::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIGetUsageForecastResponse_Total::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetUsageForecastResponse_Total::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;
}

QString OAIGetUsageForecastResponse_Total::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetUsageForecastResponse_Total::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_unit_isSet) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAIGetUsageForecastResponse_Total::getAmount() const {
    return m_amount;
}
void OAIGetUsageForecastResponse_Total::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIGetUsageForecastResponse_Total::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIGetUsageForecastResponse_Total::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIGetUsageForecastResponse_Total::getUnit() const {
    return m_unit;
}
void OAIGetUsageForecastResponse_Total::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIGetUsageForecastResponse_Total::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIGetUsageForecastResponse_Total::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIGetUsageForecastResponse_Total::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetUsageForecastResponse_Total::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
