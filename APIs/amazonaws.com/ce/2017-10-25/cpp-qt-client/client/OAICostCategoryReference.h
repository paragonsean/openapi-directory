/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICostCategoryReference.h
 *
 * &lt;p&gt;A reference to a Cost Category containing only enough information to identify the Cost Category.&lt;/p&gt; &lt;p&gt;You can use this information to retrieve the full Cost Category information using &lt;code&gt;DescribeCostCategory&lt;/code&gt;.&lt;/p&gt;
 */

#ifndef OAICostCategoryReference_H
#define OAICostCategoryReference_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICostCategoryReference : public OAIObject {
public:
    OAICostCategoryReference();
    OAICostCategoryReference(QString json);
    ~OAICostCategoryReference() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCostCategoryArn() const;
    void setCostCategoryArn(const QString &cost_category_arn);
    bool is_cost_category_arn_Set() const;
    bool is_cost_category_arn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getEffectiveStart() const;
    void setEffectiveStart(const QString &effective_start);
    bool is_effective_start_Set() const;
    bool is_effective_start_Valid() const;

    QString getEffectiveEnd() const;
    void setEffectiveEnd(const QString &effective_end);
    bool is_effective_end_Set() const;
    bool is_effective_end_Valid() const;

    qint32 getNumberOfRules() const;
    void setNumberOfRules(const qint32 &number_of_rules);
    bool is_number_of_rules_Set() const;
    bool is_number_of_rules_Valid() const;

    QList getProcessingStatus() const;
    void setProcessingStatus(const QList &processing_status);
    bool is_processing_status_Set() const;
    bool is_processing_status_Valid() const;

    QList getValues() const;
    void setValues(const QList &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    QString getDefaultValue() const;
    void setDefaultValue(const QString &default_value);
    bool is_default_value_Set() const;
    bool is_default_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cost_category_arn;
    bool m_cost_category_arn_isSet;
    bool m_cost_category_arn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_effective_start;
    bool m_effective_start_isSet;
    bool m_effective_start_isValid;

    QString m_effective_end;
    bool m_effective_end_isSet;
    bool m_effective_end_isValid;

    qint32 m_number_of_rules;
    bool m_number_of_rules_isSet;
    bool m_number_of_rules_isValid;

    QList m_processing_status;
    bool m_processing_status_isSet;
    bool m_processing_status_isValid;

    QList m_values;
    bool m_values_isSet;
    bool m_values_isValid;

    QString m_default_value;
    bool m_default_value_isSet;
    bool m_default_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICostCategoryReference)

#endif // OAICostCategoryReference_H
