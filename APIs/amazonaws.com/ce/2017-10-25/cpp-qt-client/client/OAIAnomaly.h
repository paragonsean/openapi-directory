/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnomaly.h
 *
 * An unusual cost pattern. This consists of the detailed metadata and the current status of the anomaly object. 
 */

#ifndef OAIAnomaly_H
#define OAIAnomaly_H

#include <QJsonObject>

#include "OAIAnomalyFeedbackType.h"
#include "OAIAnomaly_AnomalyScore.h"
#include "OAIAnomaly_Impact.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAnomaly_AnomalyScore;
class OAIAnomaly_Impact;

class OAIAnomaly : public OAIObject {
public:
    OAIAnomaly();
    OAIAnomaly(QString json);
    ~OAIAnomaly() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAnomalyId() const;
    void setAnomalyId(const QString &anomaly_id);
    bool is_anomaly_id_Set() const;
    bool is_anomaly_id_Valid() const;

    QString getAnomalyStartDate() const;
    void setAnomalyStartDate(const QString &anomaly_start_date);
    bool is_anomaly_start_date_Set() const;
    bool is_anomaly_start_date_Valid() const;

    QString getAnomalyEndDate() const;
    void setAnomalyEndDate(const QString &anomaly_end_date);
    bool is_anomaly_end_date_Set() const;
    bool is_anomaly_end_date_Valid() const;

    QString getDimensionValue() const;
    void setDimensionValue(const QString &dimension_value);
    bool is_dimension_value_Set() const;
    bool is_dimension_value_Valid() const;

    QList getRootCauses() const;
    void setRootCauses(const QList &root_causes);
    bool is_root_causes_Set() const;
    bool is_root_causes_Valid() const;

    OAIAnomaly_AnomalyScore getAnomalyScore() const;
    void setAnomalyScore(const OAIAnomaly_AnomalyScore &anomaly_score);
    bool is_anomaly_score_Set() const;
    bool is_anomaly_score_Valid() const;

    OAIAnomaly_Impact getImpact() const;
    void setImpact(const OAIAnomaly_Impact &impact);
    bool is_impact_Set() const;
    bool is_impact_Valid() const;

    QString getMonitorArn() const;
    void setMonitorArn(const QString &monitor_arn);
    bool is_monitor_arn_Set() const;
    bool is_monitor_arn_Valid() const;

    OAIAnomalyFeedbackType getFeedback() const;
    void setFeedback(const OAIAnomalyFeedbackType &feedback);
    bool is_feedback_Set() const;
    bool is_feedback_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_anomaly_id;
    bool m_anomaly_id_isSet;
    bool m_anomaly_id_isValid;

    QString m_anomaly_start_date;
    bool m_anomaly_start_date_isSet;
    bool m_anomaly_start_date_isValid;

    QString m_anomaly_end_date;
    bool m_anomaly_end_date_isSet;
    bool m_anomaly_end_date_isValid;

    QString m_dimension_value;
    bool m_dimension_value_isSet;
    bool m_dimension_value_isValid;

    QList m_root_causes;
    bool m_root_causes_isSet;
    bool m_root_causes_isValid;

    OAIAnomaly_AnomalyScore m_anomaly_score;
    bool m_anomaly_score_isSet;
    bool m_anomaly_score_isValid;

    OAIAnomaly_Impact m_impact;
    bool m_impact_isSet;
    bool m_impact_isValid;

    QString m_monitor_arn;
    bool m_monitor_arn_isSet;
    bool m_monitor_arn_isValid;

    OAIAnomalyFeedbackType m_feedback;
    bool m_feedback_isSet;
    bool m_feedback_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnomaly)

#endif // OAIAnomaly_H
