/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAnomalySubscriptionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAnomalySubscriptionsRequest::OAIGetAnomalySubscriptionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAnomalySubscriptionsRequest::OAIGetAnomalySubscriptionsRequest() {
    this->initializeModel();
}

OAIGetAnomalySubscriptionsRequest::~OAIGetAnomalySubscriptionsRequest() {}

void OAIGetAnomalySubscriptionsRequest::initializeModel() {

    m_subscription_arn_list_isSet = false;
    m_subscription_arn_list_isValid = false;

    m_monitor_arn_isSet = false;
    m_monitor_arn_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIGetAnomalySubscriptionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAnomalySubscriptionsRequest::fromJsonObject(QJsonObject json) {

    m_subscription_arn_list_isValid = ::OpenAPI::fromJsonValue(m_subscription_arn_list, json[QString("SubscriptionArnList")]);
    m_subscription_arn_list_isSet = !json[QString("SubscriptionArnList")].isNull() && m_subscription_arn_list_isValid;

    m_monitor_arn_isValid = ::OpenAPI::fromJsonValue(m_monitor_arn, json[QString("MonitorArn")]);
    m_monitor_arn_isSet = !json[QString("MonitorArn")].isNull() && m_monitor_arn_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIGetAnomalySubscriptionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAnomalySubscriptionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_subscription_arn_list.isSet()) {
        obj.insert(QString("SubscriptionArnList"), ::OpenAPI::toJsonValue(m_subscription_arn_list));
    }
    if (m_monitor_arn_isSet) {
        obj.insert(QString("MonitorArn"), ::OpenAPI::toJsonValue(m_monitor_arn));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QList OAIGetAnomalySubscriptionsRequest::getSubscriptionArnList() const {
    return m_subscription_arn_list;
}
void OAIGetAnomalySubscriptionsRequest::setSubscriptionArnList(const QList &subscription_arn_list) {
    m_subscription_arn_list = subscription_arn_list;
    m_subscription_arn_list_isSet = true;
}

bool OAIGetAnomalySubscriptionsRequest::is_subscription_arn_list_Set() const{
    return m_subscription_arn_list_isSet;
}

bool OAIGetAnomalySubscriptionsRequest::is_subscription_arn_list_Valid() const{
    return m_subscription_arn_list_isValid;
}

QString OAIGetAnomalySubscriptionsRequest::getMonitorArn() const {
    return m_monitor_arn;
}
void OAIGetAnomalySubscriptionsRequest::setMonitorArn(const QString &monitor_arn) {
    m_monitor_arn = monitor_arn;
    m_monitor_arn_isSet = true;
}

bool OAIGetAnomalySubscriptionsRequest::is_monitor_arn_Set() const{
    return m_monitor_arn_isSet;
}

bool OAIGetAnomalySubscriptionsRequest::is_monitor_arn_Valid() const{
    return m_monitor_arn_isValid;
}

QString OAIGetAnomalySubscriptionsRequest::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetAnomalySubscriptionsRequest::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetAnomalySubscriptionsRequest::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetAnomalySubscriptionsRequest::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

qint32 OAIGetAnomalySubscriptionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetAnomalySubscriptionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetAnomalySubscriptionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetAnomalySubscriptionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIGetAnomalySubscriptionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subscription_arn_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAnomalySubscriptionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
