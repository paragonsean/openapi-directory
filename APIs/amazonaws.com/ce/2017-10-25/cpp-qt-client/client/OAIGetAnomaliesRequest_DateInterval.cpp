/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAnomaliesRequest_DateInterval.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAnomaliesRequest_DateInterval::OAIGetAnomaliesRequest_DateInterval(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAnomaliesRequest_DateInterval::OAIGetAnomaliesRequest_DateInterval() {
    this->initializeModel();
}

OAIGetAnomaliesRequest_DateInterval::~OAIGetAnomaliesRequest_DateInterval() {}

void OAIGetAnomaliesRequest_DateInterval::initializeModel() {

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;
}

void OAIGetAnomaliesRequest_DateInterval::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAnomaliesRequest_DateInterval::fromJsonObject(QJsonObject json) {

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;
}

QString OAIGetAnomaliesRequest_DateInterval::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAnomaliesRequest_DateInterval::asJsonObject() const {
    QJsonObject obj;
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    return obj;
}

QString OAIGetAnomaliesRequest_DateInterval::getStartDate() const {
    return m_start_date;
}
void OAIGetAnomaliesRequest_DateInterval::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIGetAnomaliesRequest_DateInterval::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIGetAnomaliesRequest_DateInterval::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIGetAnomaliesRequest_DateInterval::getEndDate() const {
    return m_end_date;
}
void OAIGetAnomaliesRequest_DateInterval::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIGetAnomaliesRequest_DateInterval::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIGetAnomaliesRequest_DateInterval::is_end_date_Valid() const{
    return m_end_date_isValid;
}

bool OAIGetAnomaliesRequest_DateInterval::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAnomaliesRequest_DateInterval::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_date_isValid && true;
}

} // namespace OpenAPI
