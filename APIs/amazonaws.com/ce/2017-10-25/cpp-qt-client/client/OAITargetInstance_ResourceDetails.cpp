/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetInstance_ResourceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetInstance_ResourceDetails::OAITargetInstance_ResourceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetInstance_ResourceDetails::OAITargetInstance_ResourceDetails() {
    this->initializeModel();
}

OAITargetInstance_ResourceDetails::~OAITargetInstance_ResourceDetails() {}

void OAITargetInstance_ResourceDetails::initializeModel() {

    m_ec2_resource_details_isSet = false;
    m_ec2_resource_details_isValid = false;
}

void OAITargetInstance_ResourceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetInstance_ResourceDetails::fromJsonObject(QJsonObject json) {

    m_ec2_resource_details_isValid = ::OpenAPI::fromJsonValue(m_ec2_resource_details, json[QString("EC2ResourceDetails")]);
    m_ec2_resource_details_isSet = !json[QString("EC2ResourceDetails")].isNull() && m_ec2_resource_details_isValid;
}

QString OAITargetInstance_ResourceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetInstance_ResourceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_ec2_resource_details.isSet()) {
        obj.insert(QString("EC2ResourceDetails"), ::OpenAPI::toJsonValue(m_ec2_resource_details));
    }
    return obj;
}

OAIResourceDetails_EC2ResourceDetails OAITargetInstance_ResourceDetails::getEc2ResourceDetails() const {
    return m_ec2_resource_details;
}
void OAITargetInstance_ResourceDetails::setEc2ResourceDetails(const OAIResourceDetails_EC2ResourceDetails &ec2_resource_details) {
    m_ec2_resource_details = ec2_resource_details;
    m_ec2_resource_details_isSet = true;
}

bool OAITargetInstance_ResourceDetails::is_ec2_resource_details_Set() const{
    return m_ec2_resource_details_isSet;
}

bool OAITargetInstance_ResourceDetails::is_ec2_resource_details_Valid() const{
    return m_ec2_resource_details_isValid;
}

bool OAITargetInstance_ResourceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ec2_resource_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetInstance_ResourceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
