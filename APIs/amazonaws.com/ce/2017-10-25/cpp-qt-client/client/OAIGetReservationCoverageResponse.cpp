/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetReservationCoverageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetReservationCoverageResponse::OAIGetReservationCoverageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetReservationCoverageResponse::OAIGetReservationCoverageResponse() {
    this->initializeModel();
}

OAIGetReservationCoverageResponse::~OAIGetReservationCoverageResponse() {}

void OAIGetReservationCoverageResponse::initializeModel() {

    m_coverages_by_time_isSet = false;
    m_coverages_by_time_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetReservationCoverageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetReservationCoverageResponse::fromJsonObject(QJsonObject json) {

    m_coverages_by_time_isValid = ::OpenAPI::fromJsonValue(m_coverages_by_time, json[QString("CoveragesByTime")]);
    m_coverages_by_time_isSet = !json[QString("CoveragesByTime")].isNull() && m_coverages_by_time_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetReservationCoverageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetReservationCoverageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_coverages_by_time.isSet()) {
        obj.insert(QString("CoveragesByTime"), ::OpenAPI::toJsonValue(m_coverages_by_time));
    }
    if (m_total.isSet()) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIGetReservationCoverageResponse::getCoveragesByTime() const {
    return m_coverages_by_time;
}
void OAIGetReservationCoverageResponse::setCoveragesByTime(const QList &coverages_by_time) {
    m_coverages_by_time = coverages_by_time;
    m_coverages_by_time_isSet = true;
}

bool OAIGetReservationCoverageResponse::is_coverages_by_time_Set() const{
    return m_coverages_by_time_isSet;
}

bool OAIGetReservationCoverageResponse::is_coverages_by_time_Valid() const{
    return m_coverages_by_time_isValid;
}

OAIGetReservationCoverageResponse_Total OAIGetReservationCoverageResponse::getTotal() const {
    return m_total;
}
void OAIGetReservationCoverageResponse::setTotal(const OAIGetReservationCoverageResponse_Total &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIGetReservationCoverageResponse::is_total_Set() const{
    return m_total_isSet;
}

bool OAIGetReservationCoverageResponse::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIGetReservationCoverageResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetReservationCoverageResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetReservationCoverageResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetReservationCoverageResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetReservationCoverageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coverages_by_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetReservationCoverageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_coverages_by_time_isValid && true;
}

} // namespace OpenAPI
