/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRightsizingRecommendationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRightsizingRecommendationConfiguration::OAIRightsizingRecommendationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRightsizingRecommendationConfiguration::OAIRightsizingRecommendationConfiguration() {
    this->initializeModel();
}

OAIRightsizingRecommendationConfiguration::~OAIRightsizingRecommendationConfiguration() {}

void OAIRightsizingRecommendationConfiguration::initializeModel() {

    m_recommendation_target_isSet = false;
    m_recommendation_target_isValid = false;

    m_benefits_considered_isSet = false;
    m_benefits_considered_isValid = false;
}

void OAIRightsizingRecommendationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRightsizingRecommendationConfiguration::fromJsonObject(QJsonObject json) {

    m_recommendation_target_isValid = ::OpenAPI::fromJsonValue(m_recommendation_target, json[QString("RecommendationTarget")]);
    m_recommendation_target_isSet = !json[QString("RecommendationTarget")].isNull() && m_recommendation_target_isValid;

    m_benefits_considered_isValid = ::OpenAPI::fromJsonValue(m_benefits_considered, json[QString("BenefitsConsidered")]);
    m_benefits_considered_isSet = !json[QString("BenefitsConsidered")].isNull() && m_benefits_considered_isValid;
}

QString OAIRightsizingRecommendationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRightsizingRecommendationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_recommendation_target.isSet()) {
        obj.insert(QString("RecommendationTarget"), ::OpenAPI::toJsonValue(m_recommendation_target));
    }
    if (m_benefits_considered_isSet) {
        obj.insert(QString("BenefitsConsidered"), ::OpenAPI::toJsonValue(m_benefits_considered));
    }
    return obj;
}

OAIRecommendationTarget OAIRightsizingRecommendationConfiguration::getRecommendationTarget() const {
    return m_recommendation_target;
}
void OAIRightsizingRecommendationConfiguration::setRecommendationTarget(const OAIRecommendationTarget &recommendation_target) {
    m_recommendation_target = recommendation_target;
    m_recommendation_target_isSet = true;
}

bool OAIRightsizingRecommendationConfiguration::is_recommendation_target_Set() const{
    return m_recommendation_target_isSet;
}

bool OAIRightsizingRecommendationConfiguration::is_recommendation_target_Valid() const{
    return m_recommendation_target_isValid;
}

bool OAIRightsizingRecommendationConfiguration::getBenefitsConsidered() const {
    return m_benefits_considered;
}
void OAIRightsizingRecommendationConfiguration::setBenefitsConsidered(const bool &benefits_considered) {
    m_benefits_considered = benefits_considered;
    m_benefits_considered_isSet = true;
}

bool OAIRightsizingRecommendationConfiguration::is_benefits_considered_Set() const{
    return m_benefits_considered_isSet;
}

bool OAIRightsizingRecommendationConfiguration::is_benefits_considered_Valid() const{
    return m_benefits_considered_isValid;
}

bool OAIRightsizingRecommendationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recommendation_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_benefits_considered_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRightsizingRecommendationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recommendation_target_isValid && m_benefits_considered_isValid && true;
}

} // namespace OpenAPI
