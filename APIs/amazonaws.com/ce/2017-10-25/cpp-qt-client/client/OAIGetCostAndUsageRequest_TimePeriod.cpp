/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCostAndUsageRequest_TimePeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCostAndUsageRequest_TimePeriod::OAIGetCostAndUsageRequest_TimePeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCostAndUsageRequest_TimePeriod::OAIGetCostAndUsageRequest_TimePeriod() {
    this->initializeModel();
}

OAIGetCostAndUsageRequest_TimePeriod::~OAIGetCostAndUsageRequest_TimePeriod() {}

void OAIGetCostAndUsageRequest_TimePeriod::initializeModel() {

    m_start_isSet = false;
    m_start_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;
}

void OAIGetCostAndUsageRequest_TimePeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCostAndUsageRequest_TimePeriod::fromJsonObject(QJsonObject json) {

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("Start")]);
    m_start_isSet = !json[QString("Start")].isNull() && m_start_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("End")]);
    m_end_isSet = !json[QString("End")].isNull() && m_end_isValid;
}

QString OAIGetCostAndUsageRequest_TimePeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCostAndUsageRequest_TimePeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_start_isSet) {
        obj.insert(QString("Start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_end_isSet) {
        obj.insert(QString("End"), ::OpenAPI::toJsonValue(m_end));
    }
    return obj;
}

QString OAIGetCostAndUsageRequest_TimePeriod::getStart() const {
    return m_start;
}
void OAIGetCostAndUsageRequest_TimePeriod::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIGetCostAndUsageRequest_TimePeriod::is_start_Set() const{
    return m_start_isSet;
}

bool OAIGetCostAndUsageRequest_TimePeriod::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIGetCostAndUsageRequest_TimePeriod::getEnd() const {
    return m_end;
}
void OAIGetCostAndUsageRequest_TimePeriod::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIGetCostAndUsageRequest_TimePeriod::is_end_Set() const{
    return m_end_isSet;
}

bool OAIGetCostAndUsageRequest_TimePeriod::is_end_Valid() const{
    return m_end_isValid;
}

bool OAIGetCostAndUsageRequest_TimePeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCostAndUsageRequest_TimePeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_isValid && m_end_isValid && true;
}

} // namespace OpenAPI
