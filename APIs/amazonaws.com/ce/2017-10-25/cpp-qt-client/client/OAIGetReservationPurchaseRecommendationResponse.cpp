/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetReservationPurchaseRecommendationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetReservationPurchaseRecommendationResponse::OAIGetReservationPurchaseRecommendationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetReservationPurchaseRecommendationResponse::OAIGetReservationPurchaseRecommendationResponse() {
    this->initializeModel();
}

OAIGetReservationPurchaseRecommendationResponse::~OAIGetReservationPurchaseRecommendationResponse() {}

void OAIGetReservationPurchaseRecommendationResponse::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_recommendations_isSet = false;
    m_recommendations_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetReservationPurchaseRecommendationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetReservationPurchaseRecommendationResponse::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_recommendations_isValid = ::OpenAPI::fromJsonValue(m_recommendations, json[QString("Recommendations")]);
    m_recommendations_isSet = !json[QString("Recommendations")].isNull() && m_recommendations_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetReservationPurchaseRecommendationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetReservationPurchaseRecommendationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.isSet()) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_recommendations.isSet()) {
        obj.insert(QString("Recommendations"), ::OpenAPI::toJsonValue(m_recommendations));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

OAIGetReservationPurchaseRecommendationResponse_Metadata OAIGetReservationPurchaseRecommendationResponse::getMetadata() const {
    return m_metadata;
}
void OAIGetReservationPurchaseRecommendationResponse::setMetadata(const OAIGetReservationPurchaseRecommendationResponse_Metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGetReservationPurchaseRecommendationResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList OAIGetReservationPurchaseRecommendationResponse::getRecommendations() const {
    return m_recommendations;
}
void OAIGetReservationPurchaseRecommendationResponse::setRecommendations(const QList &recommendations) {
    m_recommendations = recommendations;
    m_recommendations_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationResponse::is_recommendations_Set() const{
    return m_recommendations_isSet;
}

bool OAIGetReservationPurchaseRecommendationResponse::is_recommendations_Valid() const{
    return m_recommendations_isValid;
}

QString OAIGetReservationPurchaseRecommendationResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetReservationPurchaseRecommendationResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetReservationPurchaseRecommendationResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetReservationPurchaseRecommendationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetReservationPurchaseRecommendationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
