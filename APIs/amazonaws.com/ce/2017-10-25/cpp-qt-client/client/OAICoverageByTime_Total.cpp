/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoverageByTime_Total.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoverageByTime_Total::OAICoverageByTime_Total(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoverageByTime_Total::OAICoverageByTime_Total() {
    this->initializeModel();
}

OAICoverageByTime_Total::~OAICoverageByTime_Total() {}

void OAICoverageByTime_Total::initializeModel() {

    m_coverage_hours_isSet = false;
    m_coverage_hours_isValid = false;

    m_coverage_normalized_units_isSet = false;
    m_coverage_normalized_units_isValid = false;

    m_coverage_cost_isSet = false;
    m_coverage_cost_isValid = false;
}

void OAICoverageByTime_Total::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoverageByTime_Total::fromJsonObject(QJsonObject json) {

    m_coverage_hours_isValid = ::OpenAPI::fromJsonValue(m_coverage_hours, json[QString("CoverageHours")]);
    m_coverage_hours_isSet = !json[QString("CoverageHours")].isNull() && m_coverage_hours_isValid;

    m_coverage_normalized_units_isValid = ::OpenAPI::fromJsonValue(m_coverage_normalized_units, json[QString("CoverageNormalizedUnits")]);
    m_coverage_normalized_units_isSet = !json[QString("CoverageNormalizedUnits")].isNull() && m_coverage_normalized_units_isValid;

    m_coverage_cost_isValid = ::OpenAPI::fromJsonValue(m_coverage_cost, json[QString("CoverageCost")]);
    m_coverage_cost_isSet = !json[QString("CoverageCost")].isNull() && m_coverage_cost_isValid;
}

QString OAICoverageByTime_Total::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoverageByTime_Total::asJsonObject() const {
    QJsonObject obj;
    if (m_coverage_hours.isSet()) {
        obj.insert(QString("CoverageHours"), ::OpenAPI::toJsonValue(m_coverage_hours));
    }
    if (m_coverage_normalized_units.isSet()) {
        obj.insert(QString("CoverageNormalizedUnits"), ::OpenAPI::toJsonValue(m_coverage_normalized_units));
    }
    if (m_coverage_cost.isSet()) {
        obj.insert(QString("CoverageCost"), ::OpenAPI::toJsonValue(m_coverage_cost));
    }
    return obj;
}

OAICoverage_CoverageHours OAICoverageByTime_Total::getCoverageHours() const {
    return m_coverage_hours;
}
void OAICoverageByTime_Total::setCoverageHours(const OAICoverage_CoverageHours &coverage_hours) {
    m_coverage_hours = coverage_hours;
    m_coverage_hours_isSet = true;
}

bool OAICoverageByTime_Total::is_coverage_hours_Set() const{
    return m_coverage_hours_isSet;
}

bool OAICoverageByTime_Total::is_coverage_hours_Valid() const{
    return m_coverage_hours_isValid;
}

OAICoverage_CoverageNormalizedUnits OAICoverageByTime_Total::getCoverageNormalizedUnits() const {
    return m_coverage_normalized_units;
}
void OAICoverageByTime_Total::setCoverageNormalizedUnits(const OAICoverage_CoverageNormalizedUnits &coverage_normalized_units) {
    m_coverage_normalized_units = coverage_normalized_units;
    m_coverage_normalized_units_isSet = true;
}

bool OAICoverageByTime_Total::is_coverage_normalized_units_Set() const{
    return m_coverage_normalized_units_isSet;
}

bool OAICoverageByTime_Total::is_coverage_normalized_units_Valid() const{
    return m_coverage_normalized_units_isValid;
}

OAICoverage_CoverageCost OAICoverageByTime_Total::getCoverageCost() const {
    return m_coverage_cost;
}
void OAICoverageByTime_Total::setCoverageCost(const OAICoverage_CoverageCost &coverage_cost) {
    m_coverage_cost = coverage_cost;
    m_coverage_cost_isSet = true;
}

bool OAICoverageByTime_Total::is_coverage_cost_Set() const{
    return m_coverage_cost_isSet;
}

bool OAICoverageByTime_Total::is_coverage_cost_Valid() const{
    return m_coverage_cost_isValid;
}

bool OAICoverageByTime_Total::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coverage_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_normalized_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoverageByTime_Total::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
