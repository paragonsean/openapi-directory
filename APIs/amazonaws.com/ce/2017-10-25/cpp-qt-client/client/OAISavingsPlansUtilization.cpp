/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlansUtilization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlansUtilization::OAISavingsPlansUtilization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlansUtilization::OAISavingsPlansUtilization() {
    this->initializeModel();
}

OAISavingsPlansUtilization::~OAISavingsPlansUtilization() {}

void OAISavingsPlansUtilization::initializeModel() {

    m_total_commitment_isSet = false;
    m_total_commitment_isValid = false;

    m_used_commitment_isSet = false;
    m_used_commitment_isValid = false;

    m_unused_commitment_isSet = false;
    m_unused_commitment_isValid = false;

    m_utilization_percentage_isSet = false;
    m_utilization_percentage_isValid = false;
}

void OAISavingsPlansUtilization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavingsPlansUtilization::fromJsonObject(QJsonObject json) {

    m_total_commitment_isValid = ::OpenAPI::fromJsonValue(m_total_commitment, json[QString("TotalCommitment")]);
    m_total_commitment_isSet = !json[QString("TotalCommitment")].isNull() && m_total_commitment_isValid;

    m_used_commitment_isValid = ::OpenAPI::fromJsonValue(m_used_commitment, json[QString("UsedCommitment")]);
    m_used_commitment_isSet = !json[QString("UsedCommitment")].isNull() && m_used_commitment_isValid;

    m_unused_commitment_isValid = ::OpenAPI::fromJsonValue(m_unused_commitment, json[QString("UnusedCommitment")]);
    m_unused_commitment_isSet = !json[QString("UnusedCommitment")].isNull() && m_unused_commitment_isValid;

    m_utilization_percentage_isValid = ::OpenAPI::fromJsonValue(m_utilization_percentage, json[QString("UtilizationPercentage")]);
    m_utilization_percentage_isSet = !json[QString("UtilizationPercentage")].isNull() && m_utilization_percentage_isValid;
}

QString OAISavingsPlansUtilization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavingsPlansUtilization::asJsonObject() const {
    QJsonObject obj;
    if (m_total_commitment_isSet) {
        obj.insert(QString("TotalCommitment"), ::OpenAPI::toJsonValue(m_total_commitment));
    }
    if (m_used_commitment_isSet) {
        obj.insert(QString("UsedCommitment"), ::OpenAPI::toJsonValue(m_used_commitment));
    }
    if (m_unused_commitment_isSet) {
        obj.insert(QString("UnusedCommitment"), ::OpenAPI::toJsonValue(m_unused_commitment));
    }
    if (m_utilization_percentage_isSet) {
        obj.insert(QString("UtilizationPercentage"), ::OpenAPI::toJsonValue(m_utilization_percentage));
    }
    return obj;
}

QString OAISavingsPlansUtilization::getTotalCommitment() const {
    return m_total_commitment;
}
void OAISavingsPlansUtilization::setTotalCommitment(const QString &total_commitment) {
    m_total_commitment = total_commitment;
    m_total_commitment_isSet = true;
}

bool OAISavingsPlansUtilization::is_total_commitment_Set() const{
    return m_total_commitment_isSet;
}

bool OAISavingsPlansUtilization::is_total_commitment_Valid() const{
    return m_total_commitment_isValid;
}

QString OAISavingsPlansUtilization::getUsedCommitment() const {
    return m_used_commitment;
}
void OAISavingsPlansUtilization::setUsedCommitment(const QString &used_commitment) {
    m_used_commitment = used_commitment;
    m_used_commitment_isSet = true;
}

bool OAISavingsPlansUtilization::is_used_commitment_Set() const{
    return m_used_commitment_isSet;
}

bool OAISavingsPlansUtilization::is_used_commitment_Valid() const{
    return m_used_commitment_isValid;
}

QString OAISavingsPlansUtilization::getUnusedCommitment() const {
    return m_unused_commitment;
}
void OAISavingsPlansUtilization::setUnusedCommitment(const QString &unused_commitment) {
    m_unused_commitment = unused_commitment;
    m_unused_commitment_isSet = true;
}

bool OAISavingsPlansUtilization::is_unused_commitment_Set() const{
    return m_unused_commitment_isSet;
}

bool OAISavingsPlansUtilization::is_unused_commitment_Valid() const{
    return m_unused_commitment_isValid;
}

QString OAISavingsPlansUtilization::getUtilizationPercentage() const {
    return m_utilization_percentage;
}
void OAISavingsPlansUtilization::setUtilizationPercentage(const QString &utilization_percentage) {
    m_utilization_percentage = utilization_percentage;
    m_utilization_percentage_isSet = true;
}

bool OAISavingsPlansUtilization::is_utilization_percentage_Set() const{
    return m_utilization_percentage_isSet;
}

bool OAISavingsPlansUtilization::is_utilization_percentage_Valid() const{
    return m_utilization_percentage_isValid;
}

bool OAISavingsPlansUtilization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unused_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utilization_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavingsPlansUtilization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
