/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostCategorySplitChargeRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostCategorySplitChargeRule::OAICostCategorySplitChargeRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostCategorySplitChargeRule::OAICostCategorySplitChargeRule() {
    this->initializeModel();
}

OAICostCategorySplitChargeRule::~OAICostCategorySplitChargeRule() {}

void OAICostCategorySplitChargeRule::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAICostCategorySplitChargeRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostCategorySplitChargeRule::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("Targets")]);
    m_targets_isSet = !json[QString("Targets")].isNull() && m_targets_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("Method")]);
    m_method_isSet = !json[QString("Method")].isNull() && m_method_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;
}

QString OAICostCategorySplitChargeRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostCategorySplitChargeRule::asJsonObject() const {
    QJsonObject obj;
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_targets.isSet()) {
        obj.insert(QString("Targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_method.isSet()) {
        obj.insert(QString("Method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QString OAICostCategorySplitChargeRule::getSource() const {
    return m_source;
}
void OAICostCategorySplitChargeRule::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICostCategorySplitChargeRule::is_source_Set() const{
    return m_source_isSet;
}

bool OAICostCategorySplitChargeRule::is_source_Valid() const{
    return m_source_isValid;
}

QList OAICostCategorySplitChargeRule::getTargets() const {
    return m_targets;
}
void OAICostCategorySplitChargeRule::setTargets(const QList &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAICostCategorySplitChargeRule::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAICostCategorySplitChargeRule::is_targets_Valid() const{
    return m_targets_isValid;
}

OAICostCategorySplitChargeMethod OAICostCategorySplitChargeRule::getMethod() const {
    return m_method;
}
void OAICostCategorySplitChargeRule::setMethod(const OAICostCategorySplitChargeMethod &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAICostCategorySplitChargeRule::is_method_Set() const{
    return m_method_isSet;
}

bool OAICostCategorySplitChargeRule::is_method_Valid() const{
    return m_method_isValid;
}

QList OAICostCategorySplitChargeRule::getParameters() const {
    return m_parameters;
}
void OAICostCategorySplitChargeRule::setParameters(const QList &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICostCategorySplitChargeRule::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICostCategorySplitChargeRule::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAICostCategorySplitChargeRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostCategorySplitChargeRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_isValid && m_targets_isValid && m_method_isValid && true;
}

} // namespace OpenAPI
