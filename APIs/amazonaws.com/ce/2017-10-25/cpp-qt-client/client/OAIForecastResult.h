/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIForecastResult.h
 *
 * The forecast that&#39;s created for your query.
 */

#ifndef OAIForecastResult_H
#define OAIForecastResult_H

#include <QJsonObject>

#include "OAIForecastResult_TimePeriod.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIForecastResult_TimePeriod;

class OAIForecastResult : public OAIObject {
public:
    OAIForecastResult();
    OAIForecastResult(QString json);
    ~OAIForecastResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIForecastResult_TimePeriod getTimePeriod() const;
    void setTimePeriod(const OAIForecastResult_TimePeriod &time_period);
    bool is_time_period_Set() const;
    bool is_time_period_Valid() const;

    QString getMeanValue() const;
    void setMeanValue(const QString &mean_value);
    bool is_mean_value_Set() const;
    bool is_mean_value_Valid() const;

    QString getPredictionIntervalLowerBound() const;
    void setPredictionIntervalLowerBound(const QString &prediction_interval_lower_bound);
    bool is_prediction_interval_lower_bound_Set() const;
    bool is_prediction_interval_lower_bound_Valid() const;

    QString getPredictionIntervalUpperBound() const;
    void setPredictionIntervalUpperBound(const QString &prediction_interval_upper_bound);
    bool is_prediction_interval_upper_bound_Set() const;
    bool is_prediction_interval_upper_bound_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIForecastResult_TimePeriod m_time_period;
    bool m_time_period_isSet;
    bool m_time_period_isValid;

    QString m_mean_value;
    bool m_mean_value_isSet;
    bool m_mean_value_isValid;

    QString m_prediction_interval_lower_bound;
    bool m_prediction_interval_lower_bound_isSet;
    bool m_prediction_interval_lower_bound_isValid;

    QString m_prediction_interval_upper_bound;
    bool m_prediction_interval_upper_bound_isSet;
    bool m_prediction_interval_upper_bound_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIForecastResult)

#endif // OAIForecastResult_H
