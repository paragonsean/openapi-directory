/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetReservationPurchaseRecommendationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetReservationPurchaseRecommendationRequest::OAIGetReservationPurchaseRecommendationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetReservationPurchaseRecommendationRequest::OAIGetReservationPurchaseRecommendationRequest() {
    this->initializeModel();
}

OAIGetReservationPurchaseRecommendationRequest::~OAIGetReservationPurchaseRecommendationRequest() {}

void OAIGetReservationPurchaseRecommendationRequest::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_account_scope_isSet = false;
    m_account_scope_isValid = false;

    m_lookback_period_in_days_isSet = false;
    m_lookback_period_in_days_isValid = false;

    m_term_in_years_isSet = false;
    m_term_in_years_isValid = false;

    m_payment_option_isSet = false;
    m_payment_option_isValid = false;

    m_service_specification_isSet = false;
    m_service_specification_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetReservationPurchaseRecommendationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetReservationPurchaseRecommendationRequest::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("Service")]);
    m_service_isSet = !json[QString("Service")].isNull() && m_service_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_account_scope_isValid = ::OpenAPI::fromJsonValue(m_account_scope, json[QString("AccountScope")]);
    m_account_scope_isSet = !json[QString("AccountScope")].isNull() && m_account_scope_isValid;

    m_lookback_period_in_days_isValid = ::OpenAPI::fromJsonValue(m_lookback_period_in_days, json[QString("LookbackPeriodInDays")]);
    m_lookback_period_in_days_isSet = !json[QString("LookbackPeriodInDays")].isNull() && m_lookback_period_in_days_isValid;

    m_term_in_years_isValid = ::OpenAPI::fromJsonValue(m_term_in_years, json[QString("TermInYears")]);
    m_term_in_years_isSet = !json[QString("TermInYears")].isNull() && m_term_in_years_isValid;

    m_payment_option_isValid = ::OpenAPI::fromJsonValue(m_payment_option, json[QString("PaymentOption")]);
    m_payment_option_isSet = !json[QString("PaymentOption")].isNull() && m_payment_option_isValid;

    m_service_specification_isValid = ::OpenAPI::fromJsonValue(m_service_specification, json[QString("ServiceSpecification")]);
    m_service_specification_isSet = !json[QString("ServiceSpecification")].isNull() && m_service_specification_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("PageSize")]);
    m_page_size_isSet = !json[QString("PageSize")].isNull() && m_page_size_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetReservationPurchaseRecommendationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetReservationPurchaseRecommendationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_service_isSet) {
        obj.insert(QString("Service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_account_scope.isSet()) {
        obj.insert(QString("AccountScope"), ::OpenAPI::toJsonValue(m_account_scope));
    }
    if (m_lookback_period_in_days.isSet()) {
        obj.insert(QString("LookbackPeriodInDays"), ::OpenAPI::toJsonValue(m_lookback_period_in_days));
    }
    if (m_term_in_years.isSet()) {
        obj.insert(QString("TermInYears"), ::OpenAPI::toJsonValue(m_term_in_years));
    }
    if (m_payment_option.isSet()) {
        obj.insert(QString("PaymentOption"), ::OpenAPI::toJsonValue(m_payment_option));
    }
    if (m_service_specification.isSet()) {
        obj.insert(QString("ServiceSpecification"), ::OpenAPI::toJsonValue(m_service_specification));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("PageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QString OAIGetReservationPurchaseRecommendationRequest::getAccountId() const {
    return m_account_id;
}
void OAIGetReservationPurchaseRecommendationRequest::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIGetReservationPurchaseRecommendationRequest::getService() const {
    return m_service;
}
void OAIGetReservationPurchaseRecommendationRequest::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_service_Set() const{
    return m_service_isSet;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_service_Valid() const{
    return m_service_isValid;
}

OAIExpression OAIGetReservationPurchaseRecommendationRequest::getFilter() const {
    return m_filter;
}
void OAIGetReservationPurchaseRecommendationRequest::setFilter(const OAIExpression &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIAccountScope OAIGetReservationPurchaseRecommendationRequest::getAccountScope() const {
    return m_account_scope;
}
void OAIGetReservationPurchaseRecommendationRequest::setAccountScope(const OAIAccountScope &account_scope) {
    m_account_scope = account_scope;
    m_account_scope_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_account_scope_Set() const{
    return m_account_scope_isSet;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_account_scope_Valid() const{
    return m_account_scope_isValid;
}

OAILookbackPeriodInDays OAIGetReservationPurchaseRecommendationRequest::getLookbackPeriodInDays() const {
    return m_lookback_period_in_days;
}
void OAIGetReservationPurchaseRecommendationRequest::setLookbackPeriodInDays(const OAILookbackPeriodInDays &lookback_period_in_days) {
    m_lookback_period_in_days = lookback_period_in_days;
    m_lookback_period_in_days_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_lookback_period_in_days_Set() const{
    return m_lookback_period_in_days_isSet;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_lookback_period_in_days_Valid() const{
    return m_lookback_period_in_days_isValid;
}

OAITermInYears OAIGetReservationPurchaseRecommendationRequest::getTermInYears() const {
    return m_term_in_years;
}
void OAIGetReservationPurchaseRecommendationRequest::setTermInYears(const OAITermInYears &term_in_years) {
    m_term_in_years = term_in_years;
    m_term_in_years_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_term_in_years_Set() const{
    return m_term_in_years_isSet;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_term_in_years_Valid() const{
    return m_term_in_years_isValid;
}

OAIPaymentOption OAIGetReservationPurchaseRecommendationRequest::getPaymentOption() const {
    return m_payment_option;
}
void OAIGetReservationPurchaseRecommendationRequest::setPaymentOption(const OAIPaymentOption &payment_option) {
    m_payment_option = payment_option;
    m_payment_option_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_payment_option_Set() const{
    return m_payment_option_isSet;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_payment_option_Valid() const{
    return m_payment_option_isValid;
}

OAIGetReservationPurchaseRecommendationRequest_ServiceSpecification OAIGetReservationPurchaseRecommendationRequest::getServiceSpecification() const {
    return m_service_specification;
}
void OAIGetReservationPurchaseRecommendationRequest::setServiceSpecification(const OAIGetReservationPurchaseRecommendationRequest_ServiceSpecification &service_specification) {
    m_service_specification = service_specification;
    m_service_specification_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_service_specification_Set() const{
    return m_service_specification_isSet;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_service_specification_Valid() const{
    return m_service_specification_isValid;
}

qint32 OAIGetReservationPurchaseRecommendationRequest::getPageSize() const {
    return m_page_size;
}
void OAIGetReservationPurchaseRecommendationRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIGetReservationPurchaseRecommendationRequest::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetReservationPurchaseRecommendationRequest::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetReservationPurchaseRecommendationRequest::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetReservationPurchaseRecommendationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookback_period_in_days.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_in_years.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetReservationPurchaseRecommendationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_isValid && true;
}

} // namespace OpenAPI
