/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceSpecification::OAIServiceSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceSpecification::OAIServiceSpecification() {
    this->initializeModel();
}

OAIServiceSpecification::~OAIServiceSpecification() {}

void OAIServiceSpecification::initializeModel() {

    m_ec2_specification_isSet = false;
    m_ec2_specification_isValid = false;
}

void OAIServiceSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceSpecification::fromJsonObject(QJsonObject json) {

    m_ec2_specification_isValid = ::OpenAPI::fromJsonValue(m_ec2_specification, json[QString("EC2Specification")]);
    m_ec2_specification_isSet = !json[QString("EC2Specification")].isNull() && m_ec2_specification_isValid;
}

QString OAIServiceSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_ec2_specification.isSet()) {
        obj.insert(QString("EC2Specification"), ::OpenAPI::toJsonValue(m_ec2_specification));
    }
    return obj;
}

OAIServiceSpecification_EC2Specification OAIServiceSpecification::getEc2Specification() const {
    return m_ec2_specification;
}
void OAIServiceSpecification::setEc2Specification(const OAIServiceSpecification_EC2Specification &ec2_specification) {
    m_ec2_specification = ec2_specification;
    m_ec2_specification_isSet = true;
}

bool OAIServiceSpecification::is_ec2_specification_Set() const{
    return m_ec2_specification_isSet;
}

bool OAIServiceSpecification::is_ec2_specification_Valid() const{
    return m_ec2_specification_isValid;
}

bool OAIServiceSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ec2_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
