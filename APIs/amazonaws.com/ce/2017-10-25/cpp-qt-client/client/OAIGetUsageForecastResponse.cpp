/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetUsageForecastResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetUsageForecastResponse::OAIGetUsageForecastResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetUsageForecastResponse::OAIGetUsageForecastResponse() {
    this->initializeModel();
}

OAIGetUsageForecastResponse::~OAIGetUsageForecastResponse() {}

void OAIGetUsageForecastResponse::initializeModel() {

    m_total_isSet = false;
    m_total_isValid = false;

    m_forecast_results_by_time_isSet = false;
    m_forecast_results_by_time_isValid = false;
}

void OAIGetUsageForecastResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetUsageForecastResponse::fromJsonObject(QJsonObject json) {

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_forecast_results_by_time_isValid = ::OpenAPI::fromJsonValue(m_forecast_results_by_time, json[QString("ForecastResultsByTime")]);
    m_forecast_results_by_time_isSet = !json[QString("ForecastResultsByTime")].isNull() && m_forecast_results_by_time_isValid;
}

QString OAIGetUsageForecastResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetUsageForecastResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_total.isSet()) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_forecast_results_by_time.isSet()) {
        obj.insert(QString("ForecastResultsByTime"), ::OpenAPI::toJsonValue(m_forecast_results_by_time));
    }
    return obj;
}

OAIGetUsageForecastResponse_Total OAIGetUsageForecastResponse::getTotal() const {
    return m_total;
}
void OAIGetUsageForecastResponse::setTotal(const OAIGetUsageForecastResponse_Total &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIGetUsageForecastResponse::is_total_Set() const{
    return m_total_isSet;
}

bool OAIGetUsageForecastResponse::is_total_Valid() const{
    return m_total_isValid;
}

QList OAIGetUsageForecastResponse::getForecastResultsByTime() const {
    return m_forecast_results_by_time;
}
void OAIGetUsageForecastResponse::setForecastResultsByTime(const QList &forecast_results_by_time) {
    m_forecast_results_by_time = forecast_results_by_time;
    m_forecast_results_by_time_isSet = true;
}

bool OAIGetUsageForecastResponse::is_forecast_results_by_time_Set() const{
    return m_forecast_results_by_time_isSet;
}

bool OAIGetUsageForecastResponse::is_forecast_results_by_time_Valid() const{
    return m_forecast_results_by_time_isValid;
}

bool OAIGetUsageForecastResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_results_by_time.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetUsageForecastResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
