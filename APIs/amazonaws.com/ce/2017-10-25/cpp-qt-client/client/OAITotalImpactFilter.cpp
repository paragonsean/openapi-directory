/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITotalImpactFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITotalImpactFilter::OAITotalImpactFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITotalImpactFilter::OAITotalImpactFilter() {
    this->initializeModel();
}

OAITotalImpactFilter::~OAITotalImpactFilter() {}

void OAITotalImpactFilter::initializeModel() {

    m_numeric_operator_isSet = false;
    m_numeric_operator_isValid = false;

    m_start_value_isSet = false;
    m_start_value_isValid = false;

    m_end_value_isSet = false;
    m_end_value_isValid = false;
}

void OAITotalImpactFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITotalImpactFilter::fromJsonObject(QJsonObject json) {

    m_numeric_operator_isValid = ::OpenAPI::fromJsonValue(m_numeric_operator, json[QString("NumericOperator")]);
    m_numeric_operator_isSet = !json[QString("NumericOperator")].isNull() && m_numeric_operator_isValid;

    m_start_value_isValid = ::OpenAPI::fromJsonValue(m_start_value, json[QString("StartValue")]);
    m_start_value_isSet = !json[QString("StartValue")].isNull() && m_start_value_isValid;

    m_end_value_isValid = ::OpenAPI::fromJsonValue(m_end_value, json[QString("EndValue")]);
    m_end_value_isSet = !json[QString("EndValue")].isNull() && m_end_value_isValid;
}

QString OAITotalImpactFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITotalImpactFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_numeric_operator.isSet()) {
        obj.insert(QString("NumericOperator"), ::OpenAPI::toJsonValue(m_numeric_operator));
    }
    if (m_start_value_isSet) {
        obj.insert(QString("StartValue"), ::OpenAPI::toJsonValue(m_start_value));
    }
    if (m_end_value_isSet) {
        obj.insert(QString("EndValue"), ::OpenAPI::toJsonValue(m_end_value));
    }
    return obj;
}

OAINumericOperator OAITotalImpactFilter::getNumericOperator() const {
    return m_numeric_operator;
}
void OAITotalImpactFilter::setNumericOperator(const OAINumericOperator &numeric_operator) {
    m_numeric_operator = numeric_operator;
    m_numeric_operator_isSet = true;
}

bool OAITotalImpactFilter::is_numeric_operator_Set() const{
    return m_numeric_operator_isSet;
}

bool OAITotalImpactFilter::is_numeric_operator_Valid() const{
    return m_numeric_operator_isValid;
}

double OAITotalImpactFilter::getStartValue() const {
    return m_start_value;
}
void OAITotalImpactFilter::setStartValue(const double &start_value) {
    m_start_value = start_value;
    m_start_value_isSet = true;
}

bool OAITotalImpactFilter::is_start_value_Set() const{
    return m_start_value_isSet;
}

bool OAITotalImpactFilter::is_start_value_Valid() const{
    return m_start_value_isValid;
}

double OAITotalImpactFilter::getEndValue() const {
    return m_end_value;
}
void OAITotalImpactFilter::setEndValue(const double &end_value) {
    m_end_value = end_value;
    m_end_value_isSet = true;
}

bool OAITotalImpactFilter::is_end_value_Set() const{
    return m_end_value_isSet;
}

bool OAITotalImpactFilter::is_end_value_Valid() const{
    return m_end_value_isValid;
}

bool OAITotalImpactFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_numeric_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITotalImpactFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_numeric_operator_isValid && m_start_value_isValid && true;
}

} // namespace OpenAPI
