/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationDetailHourlyMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationDetailHourlyMetrics::OAIRecommendationDetailHourlyMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationDetailHourlyMetrics::OAIRecommendationDetailHourlyMetrics() {
    this->initializeModel();
}

OAIRecommendationDetailHourlyMetrics::~OAIRecommendationDetailHourlyMetrics() {}

void OAIRecommendationDetailHourlyMetrics::initializeModel() {

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_estimated_on_demand_cost_isSet = false;
    m_estimated_on_demand_cost_isValid = false;

    m_current_coverage_isSet = false;
    m_current_coverage_isValid = false;

    m_estimated_coverage_isSet = false;
    m_estimated_coverage_isValid = false;

    m_estimated_new_commitment_utilization_isSet = false;
    m_estimated_new_commitment_utilization_isValid = false;
}

void OAIRecommendationDetailHourlyMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationDetailHourlyMetrics::fromJsonObject(QJsonObject json) {

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_estimated_on_demand_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_on_demand_cost, json[QString("EstimatedOnDemandCost")]);
    m_estimated_on_demand_cost_isSet = !json[QString("EstimatedOnDemandCost")].isNull() && m_estimated_on_demand_cost_isValid;

    m_current_coverage_isValid = ::OpenAPI::fromJsonValue(m_current_coverage, json[QString("CurrentCoverage")]);
    m_current_coverage_isSet = !json[QString("CurrentCoverage")].isNull() && m_current_coverage_isValid;

    m_estimated_coverage_isValid = ::OpenAPI::fromJsonValue(m_estimated_coverage, json[QString("EstimatedCoverage")]);
    m_estimated_coverage_isSet = !json[QString("EstimatedCoverage")].isNull() && m_estimated_coverage_isValid;

    m_estimated_new_commitment_utilization_isValid = ::OpenAPI::fromJsonValue(m_estimated_new_commitment_utilization, json[QString("EstimatedNewCommitmentUtilization")]);
    m_estimated_new_commitment_utilization_isSet = !json[QString("EstimatedNewCommitmentUtilization")].isNull() && m_estimated_new_commitment_utilization_isValid;
}

QString OAIRecommendationDetailHourlyMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationDetailHourlyMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_estimated_on_demand_cost_isSet) {
        obj.insert(QString("EstimatedOnDemandCost"), ::OpenAPI::toJsonValue(m_estimated_on_demand_cost));
    }
    if (m_current_coverage_isSet) {
        obj.insert(QString("CurrentCoverage"), ::OpenAPI::toJsonValue(m_current_coverage));
    }
    if (m_estimated_coverage_isSet) {
        obj.insert(QString("EstimatedCoverage"), ::OpenAPI::toJsonValue(m_estimated_coverage));
    }
    if (m_estimated_new_commitment_utilization_isSet) {
        obj.insert(QString("EstimatedNewCommitmentUtilization"), ::OpenAPI::toJsonValue(m_estimated_new_commitment_utilization));
    }
    return obj;
}

QString OAIRecommendationDetailHourlyMetrics::getStartTime() const {
    return m_start_time;
}
void OAIRecommendationDetailHourlyMetrics::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRecommendationDetailHourlyMetrics::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRecommendationDetailHourlyMetrics::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIRecommendationDetailHourlyMetrics::getEstimatedOnDemandCost() const {
    return m_estimated_on_demand_cost;
}
void OAIRecommendationDetailHourlyMetrics::setEstimatedOnDemandCost(const QString &estimated_on_demand_cost) {
    m_estimated_on_demand_cost = estimated_on_demand_cost;
    m_estimated_on_demand_cost_isSet = true;
}

bool OAIRecommendationDetailHourlyMetrics::is_estimated_on_demand_cost_Set() const{
    return m_estimated_on_demand_cost_isSet;
}

bool OAIRecommendationDetailHourlyMetrics::is_estimated_on_demand_cost_Valid() const{
    return m_estimated_on_demand_cost_isValid;
}

QString OAIRecommendationDetailHourlyMetrics::getCurrentCoverage() const {
    return m_current_coverage;
}
void OAIRecommendationDetailHourlyMetrics::setCurrentCoverage(const QString &current_coverage) {
    m_current_coverage = current_coverage;
    m_current_coverage_isSet = true;
}

bool OAIRecommendationDetailHourlyMetrics::is_current_coverage_Set() const{
    return m_current_coverage_isSet;
}

bool OAIRecommendationDetailHourlyMetrics::is_current_coverage_Valid() const{
    return m_current_coverage_isValid;
}

QString OAIRecommendationDetailHourlyMetrics::getEstimatedCoverage() const {
    return m_estimated_coverage;
}
void OAIRecommendationDetailHourlyMetrics::setEstimatedCoverage(const QString &estimated_coverage) {
    m_estimated_coverage = estimated_coverage;
    m_estimated_coverage_isSet = true;
}

bool OAIRecommendationDetailHourlyMetrics::is_estimated_coverage_Set() const{
    return m_estimated_coverage_isSet;
}

bool OAIRecommendationDetailHourlyMetrics::is_estimated_coverage_Valid() const{
    return m_estimated_coverage_isValid;
}

QString OAIRecommendationDetailHourlyMetrics::getEstimatedNewCommitmentUtilization() const {
    return m_estimated_new_commitment_utilization;
}
void OAIRecommendationDetailHourlyMetrics::setEstimatedNewCommitmentUtilization(const QString &estimated_new_commitment_utilization) {
    m_estimated_new_commitment_utilization = estimated_new_commitment_utilization;
    m_estimated_new_commitment_utilization_isSet = true;
}

bool OAIRecommendationDetailHourlyMetrics::is_estimated_new_commitment_utilization_Set() const{
    return m_estimated_new_commitment_utilization_isSet;
}

bool OAIRecommendationDetailHourlyMetrics::is_estimated_new_commitment_utilization_Valid() const{
    return m_estimated_new_commitment_utilization_isValid;
}

bool OAIRecommendationDetailHourlyMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_on_demand_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_new_commitment_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationDetailHourlyMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
