/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlansPurchaseRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlansPurchaseRecommendation::OAISavingsPlansPurchaseRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlansPurchaseRecommendation::OAISavingsPlansPurchaseRecommendation() {
    this->initializeModel();
}

OAISavingsPlansPurchaseRecommendation::~OAISavingsPlansPurchaseRecommendation() {}

void OAISavingsPlansPurchaseRecommendation::initializeModel() {

    m_account_scope_isSet = false;
    m_account_scope_isValid = false;

    m_savings_plans_type_isSet = false;
    m_savings_plans_type_isValid = false;

    m_term_in_years_isSet = false;
    m_term_in_years_isValid = false;

    m_payment_option_isSet = false;
    m_payment_option_isValid = false;

    m_lookback_period_in_days_isSet = false;
    m_lookback_period_in_days_isValid = false;

    m_savings_plans_purchase_recommendation_details_isSet = false;
    m_savings_plans_purchase_recommendation_details_isValid = false;

    m_savings_plans_purchase_recommendation_summary_isSet = false;
    m_savings_plans_purchase_recommendation_summary_isValid = false;
}

void OAISavingsPlansPurchaseRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavingsPlansPurchaseRecommendation::fromJsonObject(QJsonObject json) {

    m_account_scope_isValid = ::OpenAPI::fromJsonValue(m_account_scope, json[QString("AccountScope")]);
    m_account_scope_isSet = !json[QString("AccountScope")].isNull() && m_account_scope_isValid;

    m_savings_plans_type_isValid = ::OpenAPI::fromJsonValue(m_savings_plans_type, json[QString("SavingsPlansType")]);
    m_savings_plans_type_isSet = !json[QString("SavingsPlansType")].isNull() && m_savings_plans_type_isValid;

    m_term_in_years_isValid = ::OpenAPI::fromJsonValue(m_term_in_years, json[QString("TermInYears")]);
    m_term_in_years_isSet = !json[QString("TermInYears")].isNull() && m_term_in_years_isValid;

    m_payment_option_isValid = ::OpenAPI::fromJsonValue(m_payment_option, json[QString("PaymentOption")]);
    m_payment_option_isSet = !json[QString("PaymentOption")].isNull() && m_payment_option_isValid;

    m_lookback_period_in_days_isValid = ::OpenAPI::fromJsonValue(m_lookback_period_in_days, json[QString("LookbackPeriodInDays")]);
    m_lookback_period_in_days_isSet = !json[QString("LookbackPeriodInDays")].isNull() && m_lookback_period_in_days_isValid;

    m_savings_plans_purchase_recommendation_details_isValid = ::OpenAPI::fromJsonValue(m_savings_plans_purchase_recommendation_details, json[QString("SavingsPlansPurchaseRecommendationDetails")]);
    m_savings_plans_purchase_recommendation_details_isSet = !json[QString("SavingsPlansPurchaseRecommendationDetails")].isNull() && m_savings_plans_purchase_recommendation_details_isValid;

    m_savings_plans_purchase_recommendation_summary_isValid = ::OpenAPI::fromJsonValue(m_savings_plans_purchase_recommendation_summary, json[QString("SavingsPlansPurchaseRecommendationSummary")]);
    m_savings_plans_purchase_recommendation_summary_isSet = !json[QString("SavingsPlansPurchaseRecommendationSummary")].isNull() && m_savings_plans_purchase_recommendation_summary_isValid;
}

QString OAISavingsPlansPurchaseRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavingsPlansPurchaseRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_account_scope.isSet()) {
        obj.insert(QString("AccountScope"), ::OpenAPI::toJsonValue(m_account_scope));
    }
    if (m_savings_plans_type.isSet()) {
        obj.insert(QString("SavingsPlansType"), ::OpenAPI::toJsonValue(m_savings_plans_type));
    }
    if (m_term_in_years.isSet()) {
        obj.insert(QString("TermInYears"), ::OpenAPI::toJsonValue(m_term_in_years));
    }
    if (m_payment_option.isSet()) {
        obj.insert(QString("PaymentOption"), ::OpenAPI::toJsonValue(m_payment_option));
    }
    if (m_lookback_period_in_days.isSet()) {
        obj.insert(QString("LookbackPeriodInDays"), ::OpenAPI::toJsonValue(m_lookback_period_in_days));
    }
    if (m_savings_plans_purchase_recommendation_details.isSet()) {
        obj.insert(QString("SavingsPlansPurchaseRecommendationDetails"), ::OpenAPI::toJsonValue(m_savings_plans_purchase_recommendation_details));
    }
    if (m_savings_plans_purchase_recommendation_summary.isSet()) {
        obj.insert(QString("SavingsPlansPurchaseRecommendationSummary"), ::OpenAPI::toJsonValue(m_savings_plans_purchase_recommendation_summary));
    }
    return obj;
}

OAIAccountScope OAISavingsPlansPurchaseRecommendation::getAccountScope() const {
    return m_account_scope;
}
void OAISavingsPlansPurchaseRecommendation::setAccountScope(const OAIAccountScope &account_scope) {
    m_account_scope = account_scope;
    m_account_scope_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendation::is_account_scope_Set() const{
    return m_account_scope_isSet;
}

bool OAISavingsPlansPurchaseRecommendation::is_account_scope_Valid() const{
    return m_account_scope_isValid;
}

OAISupportedSavingsPlansType OAISavingsPlansPurchaseRecommendation::getSavingsPlansType() const {
    return m_savings_plans_type;
}
void OAISavingsPlansPurchaseRecommendation::setSavingsPlansType(const OAISupportedSavingsPlansType &savings_plans_type) {
    m_savings_plans_type = savings_plans_type;
    m_savings_plans_type_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendation::is_savings_plans_type_Set() const{
    return m_savings_plans_type_isSet;
}

bool OAISavingsPlansPurchaseRecommendation::is_savings_plans_type_Valid() const{
    return m_savings_plans_type_isValid;
}

OAITermInYears OAISavingsPlansPurchaseRecommendation::getTermInYears() const {
    return m_term_in_years;
}
void OAISavingsPlansPurchaseRecommendation::setTermInYears(const OAITermInYears &term_in_years) {
    m_term_in_years = term_in_years;
    m_term_in_years_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendation::is_term_in_years_Set() const{
    return m_term_in_years_isSet;
}

bool OAISavingsPlansPurchaseRecommendation::is_term_in_years_Valid() const{
    return m_term_in_years_isValid;
}

OAIPaymentOption OAISavingsPlansPurchaseRecommendation::getPaymentOption() const {
    return m_payment_option;
}
void OAISavingsPlansPurchaseRecommendation::setPaymentOption(const OAIPaymentOption &payment_option) {
    m_payment_option = payment_option;
    m_payment_option_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendation::is_payment_option_Set() const{
    return m_payment_option_isSet;
}

bool OAISavingsPlansPurchaseRecommendation::is_payment_option_Valid() const{
    return m_payment_option_isValid;
}

OAILookbackPeriodInDays OAISavingsPlansPurchaseRecommendation::getLookbackPeriodInDays() const {
    return m_lookback_period_in_days;
}
void OAISavingsPlansPurchaseRecommendation::setLookbackPeriodInDays(const OAILookbackPeriodInDays &lookback_period_in_days) {
    m_lookback_period_in_days = lookback_period_in_days;
    m_lookback_period_in_days_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendation::is_lookback_period_in_days_Set() const{
    return m_lookback_period_in_days_isSet;
}

bool OAISavingsPlansPurchaseRecommendation::is_lookback_period_in_days_Valid() const{
    return m_lookback_period_in_days_isValid;
}

QList OAISavingsPlansPurchaseRecommendation::getSavingsPlansPurchaseRecommendationDetails() const {
    return m_savings_plans_purchase_recommendation_details;
}
void OAISavingsPlansPurchaseRecommendation::setSavingsPlansPurchaseRecommendationDetails(const QList &savings_plans_purchase_recommendation_details) {
    m_savings_plans_purchase_recommendation_details = savings_plans_purchase_recommendation_details;
    m_savings_plans_purchase_recommendation_details_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendation::is_savings_plans_purchase_recommendation_details_Set() const{
    return m_savings_plans_purchase_recommendation_details_isSet;
}

bool OAISavingsPlansPurchaseRecommendation::is_savings_plans_purchase_recommendation_details_Valid() const{
    return m_savings_plans_purchase_recommendation_details_isValid;
}

OAISavingsPlansPurchaseRecommendation_SavingsPlansPurchaseRecommendationSummary OAISavingsPlansPurchaseRecommendation::getSavingsPlansPurchaseRecommendationSummary() const {
    return m_savings_plans_purchase_recommendation_summary;
}
void OAISavingsPlansPurchaseRecommendation::setSavingsPlansPurchaseRecommendationSummary(const OAISavingsPlansPurchaseRecommendation_SavingsPlansPurchaseRecommendationSummary &savings_plans_purchase_recommendation_summary) {
    m_savings_plans_purchase_recommendation_summary = savings_plans_purchase_recommendation_summary;
    m_savings_plans_purchase_recommendation_summary_isSet = true;
}

bool OAISavingsPlansPurchaseRecommendation::is_savings_plans_purchase_recommendation_summary_Set() const{
    return m_savings_plans_purchase_recommendation_summary_isSet;
}

bool OAISavingsPlansPurchaseRecommendation::is_savings_plans_purchase_recommendation_summary_Valid() const{
    return m_savings_plans_purchase_recommendation_summary_isValid;
}

bool OAISavingsPlansPurchaseRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_plans_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_in_years.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookback_period_in_days.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_plans_purchase_recommendation_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_plans_purchase_recommendation_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavingsPlansPurchaseRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
