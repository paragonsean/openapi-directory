/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriber.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriber::OAISubscriber(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriber::OAISubscriber() {
    this->initializeModel();
}

OAISubscriber::~OAISubscriber() {}

void OAISubscriber::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISubscriber::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriber::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAISubscriber::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriber::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAISubscriber::getAddress() const {
    return m_address;
}
void OAISubscriber::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAISubscriber::is_address_Set() const{
    return m_address_isSet;
}

bool OAISubscriber::is_address_Valid() const{
    return m_address_isValid;
}

OAISubscriberType OAISubscriber::getType() const {
    return m_type;
}
void OAISubscriber::setType(const OAISubscriberType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISubscriber::is_type_Set() const{
    return m_type_isSet;
}

bool OAISubscriber::is_type_Valid() const{
    return m_type_isValid;
}

OAISubscriberStatus OAISubscriber::getStatus() const {
    return m_status;
}
void OAISubscriber::setStatus(const OAISubscriberStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscriber::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscriber::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISubscriber::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriber::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
