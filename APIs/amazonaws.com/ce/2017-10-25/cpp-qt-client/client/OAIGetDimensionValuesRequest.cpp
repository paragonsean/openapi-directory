/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDimensionValuesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDimensionValuesRequest::OAIGetDimensionValuesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDimensionValuesRequest::OAIGetDimensionValuesRequest() {
    this->initializeModel();
}

OAIGetDimensionValuesRequest::~OAIGetDimensionValuesRequest() {}

void OAIGetDimensionValuesRequest::initializeModel() {

    m_search_string_isSet = false;
    m_search_string_isValid = false;

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetDimensionValuesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDimensionValuesRequest::fromJsonObject(QJsonObject json) {

    m_search_string_isValid = ::OpenAPI::fromJsonValue(m_search_string, json[QString("SearchString")]);
    m_search_string_isSet = !json[QString("SearchString")].isNull() && m_search_string_isValid;

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("TimePeriod")]);
    m_time_period_isSet = !json[QString("TimePeriod")].isNull() && m_time_period_isValid;

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("Dimension")]);
    m_dimension_isSet = !json[QString("Dimension")].isNull() && m_dimension_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("Context")]);
    m_context_isSet = !json[QString("Context")].isNull() && m_context_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetDimensionValuesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDimensionValuesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_search_string_isSet) {
        obj.insert(QString("SearchString"), ::OpenAPI::toJsonValue(m_search_string));
    }
    if (m_time_period.isSet()) {
        obj.insert(QString("TimePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_dimension.isSet()) {
        obj.insert(QString("Dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_context.isSet()) {
        obj.insert(QString("Context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QString OAIGetDimensionValuesRequest::getSearchString() const {
    return m_search_string;
}
void OAIGetDimensionValuesRequest::setSearchString(const QString &search_string) {
    m_search_string = search_string;
    m_search_string_isSet = true;
}

bool OAIGetDimensionValuesRequest::is_search_string_Set() const{
    return m_search_string_isSet;
}

bool OAIGetDimensionValuesRequest::is_search_string_Valid() const{
    return m_search_string_isValid;
}

OAIGetDimensionValuesRequest_TimePeriod OAIGetDimensionValuesRequest::getTimePeriod() const {
    return m_time_period;
}
void OAIGetDimensionValuesRequest::setTimePeriod(const OAIGetDimensionValuesRequest_TimePeriod &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIGetDimensionValuesRequest::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIGetDimensionValuesRequest::is_time_period_Valid() const{
    return m_time_period_isValid;
}

OAIDimension OAIGetDimensionValuesRequest::getDimension() const {
    return m_dimension;
}
void OAIGetDimensionValuesRequest::setDimension(const OAIDimension &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIGetDimensionValuesRequest::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIGetDimensionValuesRequest::is_dimension_Valid() const{
    return m_dimension_isValid;
}

OAIContext OAIGetDimensionValuesRequest::getContext() const {
    return m_context;
}
void OAIGetDimensionValuesRequest::setContext(const OAIContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIGetDimensionValuesRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAIGetDimensionValuesRequest::is_context_Valid() const{
    return m_context_isValid;
}

OAIExpression OAIGetDimensionValuesRequest::getFilter() const {
    return m_filter;
}
void OAIGetDimensionValuesRequest::setFilter(const OAIExpression &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetDimensionValuesRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetDimensionValuesRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QList OAIGetDimensionValuesRequest::getSortBy() const {
    return m_sort_by;
}
void OAIGetDimensionValuesRequest::setSortBy(const QList &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIGetDimensionValuesRequest::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIGetDimensionValuesRequest::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

qint32 OAIGetDimensionValuesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetDimensionValuesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetDimensionValuesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetDimensionValuesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIGetDimensionValuesRequest::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetDimensionValuesRequest::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetDimensionValuesRequest::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetDimensionValuesRequest::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetDimensionValuesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_search_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDimensionValuesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_time_period_isValid && m_dimension_isValid && true;
}

} // namespace OpenAPI
