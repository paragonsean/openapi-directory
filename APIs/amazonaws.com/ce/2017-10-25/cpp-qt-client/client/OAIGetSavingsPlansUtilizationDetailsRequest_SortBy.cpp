/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSavingsPlansUtilizationDetailsRequest_SortBy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::OAIGetSavingsPlansUtilizationDetailsRequest_SortBy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::OAIGetSavingsPlansUtilizationDetailsRequest_SortBy() {
    this->initializeModel();
}

OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::~OAIGetSavingsPlansUtilizationDetailsRequest_SortBy() {}

void OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

QString OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::getKey() const {
    return m_key;
}
void OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::is_key_Set() const{
    return m_key_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::is_key_Valid() const{
    return m_key_isValid;
}

OAISortOrder OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::getSortOrder() const {
    return m_sort_order;
}
void OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSavingsPlansUtilizationDetailsRequest_SortBy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && true;
}

} // namespace OpenAPI
