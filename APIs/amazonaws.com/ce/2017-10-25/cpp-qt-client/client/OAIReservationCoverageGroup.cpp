/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservationCoverageGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservationCoverageGroup::OAIReservationCoverageGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservationCoverageGroup::OAIReservationCoverageGroup() {
    this->initializeModel();
}

OAIReservationCoverageGroup::~OAIReservationCoverageGroup() {}

void OAIReservationCoverageGroup::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_coverage_isSet = false;
    m_coverage_isValid = false;
}

void OAIReservationCoverageGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservationCoverageGroup::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_coverage_isValid = ::OpenAPI::fromJsonValue(m_coverage, json[QString("Coverage")]);
    m_coverage_isSet = !json[QString("Coverage")].isNull() && m_coverage_isValid;
}

QString OAIReservationCoverageGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservationCoverageGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_coverage.isSet()) {
        obj.insert(QString("Coverage"), ::OpenAPI::toJsonValue(m_coverage));
    }
    return obj;
}

QMap OAIReservationCoverageGroup::getAttributes() const {
    return m_attributes;
}
void OAIReservationCoverageGroup::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIReservationCoverageGroup::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIReservationCoverageGroup::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIReservationCoverageGroup_Coverage OAIReservationCoverageGroup::getCoverage() const {
    return m_coverage;
}
void OAIReservationCoverageGroup::setCoverage(const OAIReservationCoverageGroup_Coverage &coverage) {
    m_coverage = coverage;
    m_coverage_isSet = true;
}

bool OAIReservationCoverageGroup::is_coverage_Set() const{
    return m_coverage_isSet;
}

bool OAIReservationCoverageGroup::is_coverage_Valid() const{
    return m_coverage_isValid;
}

bool OAIReservationCoverageGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservationCoverageGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
