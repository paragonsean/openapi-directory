/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImpact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImpact::OAIImpact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImpact::OAIImpact() {
    this->initializeModel();
}

OAIImpact::~OAIImpact() {}

void OAIImpact::initializeModel() {

    m_max_impact_isSet = false;
    m_max_impact_isValid = false;

    m_total_impact_isSet = false;
    m_total_impact_isValid = false;

    m_total_actual_spend_isSet = false;
    m_total_actual_spend_isValid = false;

    m_total_expected_spend_isSet = false;
    m_total_expected_spend_isValid = false;

    m_total_impact_percentage_isSet = false;
    m_total_impact_percentage_isValid = false;
}

void OAIImpact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImpact::fromJsonObject(QJsonObject json) {

    m_max_impact_isValid = ::OpenAPI::fromJsonValue(m_max_impact, json[QString("MaxImpact")]);
    m_max_impact_isSet = !json[QString("MaxImpact")].isNull() && m_max_impact_isValid;

    m_total_impact_isValid = ::OpenAPI::fromJsonValue(m_total_impact, json[QString("TotalImpact")]);
    m_total_impact_isSet = !json[QString("TotalImpact")].isNull() && m_total_impact_isValid;

    m_total_actual_spend_isValid = ::OpenAPI::fromJsonValue(m_total_actual_spend, json[QString("TotalActualSpend")]);
    m_total_actual_spend_isSet = !json[QString("TotalActualSpend")].isNull() && m_total_actual_spend_isValid;

    m_total_expected_spend_isValid = ::OpenAPI::fromJsonValue(m_total_expected_spend, json[QString("TotalExpectedSpend")]);
    m_total_expected_spend_isSet = !json[QString("TotalExpectedSpend")].isNull() && m_total_expected_spend_isValid;

    m_total_impact_percentage_isValid = ::OpenAPI::fromJsonValue(m_total_impact_percentage, json[QString("TotalImpactPercentage")]);
    m_total_impact_percentage_isSet = !json[QString("TotalImpactPercentage")].isNull() && m_total_impact_percentage_isValid;
}

QString OAIImpact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImpact::asJsonObject() const {
    QJsonObject obj;
    if (m_max_impact_isSet) {
        obj.insert(QString("MaxImpact"), ::OpenAPI::toJsonValue(m_max_impact));
    }
    if (m_total_impact_isSet) {
        obj.insert(QString("TotalImpact"), ::OpenAPI::toJsonValue(m_total_impact));
    }
    if (m_total_actual_spend_isSet) {
        obj.insert(QString("TotalActualSpend"), ::OpenAPI::toJsonValue(m_total_actual_spend));
    }
    if (m_total_expected_spend_isSet) {
        obj.insert(QString("TotalExpectedSpend"), ::OpenAPI::toJsonValue(m_total_expected_spend));
    }
    if (m_total_impact_percentage_isSet) {
        obj.insert(QString("TotalImpactPercentage"), ::OpenAPI::toJsonValue(m_total_impact_percentage));
    }
    return obj;
}

double OAIImpact::getMaxImpact() const {
    return m_max_impact;
}
void OAIImpact::setMaxImpact(const double &max_impact) {
    m_max_impact = max_impact;
    m_max_impact_isSet = true;
}

bool OAIImpact::is_max_impact_Set() const{
    return m_max_impact_isSet;
}

bool OAIImpact::is_max_impact_Valid() const{
    return m_max_impact_isValid;
}

double OAIImpact::getTotalImpact() const {
    return m_total_impact;
}
void OAIImpact::setTotalImpact(const double &total_impact) {
    m_total_impact = total_impact;
    m_total_impact_isSet = true;
}

bool OAIImpact::is_total_impact_Set() const{
    return m_total_impact_isSet;
}

bool OAIImpact::is_total_impact_Valid() const{
    return m_total_impact_isValid;
}

double OAIImpact::getTotalActualSpend() const {
    return m_total_actual_spend;
}
void OAIImpact::setTotalActualSpend(const double &total_actual_spend) {
    m_total_actual_spend = total_actual_spend;
    m_total_actual_spend_isSet = true;
}

bool OAIImpact::is_total_actual_spend_Set() const{
    return m_total_actual_spend_isSet;
}

bool OAIImpact::is_total_actual_spend_Valid() const{
    return m_total_actual_spend_isValid;
}

double OAIImpact::getTotalExpectedSpend() const {
    return m_total_expected_spend;
}
void OAIImpact::setTotalExpectedSpend(const double &total_expected_spend) {
    m_total_expected_spend = total_expected_spend;
    m_total_expected_spend_isSet = true;
}

bool OAIImpact::is_total_expected_spend_Set() const{
    return m_total_expected_spend_isSet;
}

bool OAIImpact::is_total_expected_spend_Valid() const{
    return m_total_expected_spend_isValid;
}

double OAIImpact::getTotalImpactPercentage() const {
    return m_total_impact_percentage;
}
void OAIImpact::setTotalImpactPercentage(const double &total_impact_percentage) {
    m_total_impact_percentage = total_impact_percentage;
    m_total_impact_percentage_isSet = true;
}

bool OAIImpact::is_total_impact_percentage_Set() const{
    return m_total_impact_percentage_isSet;
}

bool OAIImpact::is_total_impact_percentage_Valid() const{
    return m_total_impact_percentage_isValid;
}

bool OAIImpact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_impact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_impact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_actual_spend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_expected_spend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_impact_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImpact::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_impact_isValid && true;
}

} // namespace OpenAPI
