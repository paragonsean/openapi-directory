/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecommendationDetailHourlyMetrics.h
 *
 * Contains the hourly metrics for the given recommendation over the lookback period. 
 */

#ifndef OAIRecommendationDetailHourlyMetrics_H
#define OAIRecommendationDetailHourlyMetrics_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRecommendationDetailHourlyMetrics : public OAIObject {
public:
    OAIRecommendationDetailHourlyMetrics();
    OAIRecommendationDetailHourlyMetrics(QString json);
    ~OAIRecommendationDetailHourlyMetrics() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getStartTime() const;
    void setStartTime(const QString &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QString getEstimatedOnDemandCost() const;
    void setEstimatedOnDemandCost(const QString &estimated_on_demand_cost);
    bool is_estimated_on_demand_cost_Set() const;
    bool is_estimated_on_demand_cost_Valid() const;

    QString getCurrentCoverage() const;
    void setCurrentCoverage(const QString &current_coverage);
    bool is_current_coverage_Set() const;
    bool is_current_coverage_Valid() const;

    QString getEstimatedCoverage() const;
    void setEstimatedCoverage(const QString &estimated_coverage);
    bool is_estimated_coverage_Set() const;
    bool is_estimated_coverage_Valid() const;

    QString getEstimatedNewCommitmentUtilization() const;
    void setEstimatedNewCommitmentUtilization(const QString &estimated_new_commitment_utilization);
    bool is_estimated_new_commitment_utilization_Set() const;
    bool is_estimated_new_commitment_utilization_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QString m_estimated_on_demand_cost;
    bool m_estimated_on_demand_cost_isSet;
    bool m_estimated_on_demand_cost_isValid;

    QString m_current_coverage;
    bool m_current_coverage_isSet;
    bool m_current_coverage_isValid;

    QString m_estimated_coverage;
    bool m_estimated_coverage_isSet;
    bool m_estimated_coverage_isValid;

    QString m_estimated_new_commitment_utilization;
    bool m_estimated_new_commitment_utilization_isSet;
    bool m_estimated_new_commitment_utilization_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecommendationDetailHourlyMetrics)

#endif // OAIRecommendationDetailHourlyMetrics_H
