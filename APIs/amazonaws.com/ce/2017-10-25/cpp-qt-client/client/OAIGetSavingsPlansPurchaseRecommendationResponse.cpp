/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSavingsPlansPurchaseRecommendationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSavingsPlansPurchaseRecommendationResponse::OAIGetSavingsPlansPurchaseRecommendationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSavingsPlansPurchaseRecommendationResponse::OAIGetSavingsPlansPurchaseRecommendationResponse() {
    this->initializeModel();
}

OAIGetSavingsPlansPurchaseRecommendationResponse::~OAIGetSavingsPlansPurchaseRecommendationResponse() {}

void OAIGetSavingsPlansPurchaseRecommendationResponse::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_savings_plans_purchase_recommendation_isSet = false;
    m_savings_plans_purchase_recommendation_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetSavingsPlansPurchaseRecommendationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSavingsPlansPurchaseRecommendationResponse::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_savings_plans_purchase_recommendation_isValid = ::OpenAPI::fromJsonValue(m_savings_plans_purchase_recommendation, json[QString("SavingsPlansPurchaseRecommendation")]);
    m_savings_plans_purchase_recommendation_isSet = !json[QString("SavingsPlansPurchaseRecommendation")].isNull() && m_savings_plans_purchase_recommendation_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetSavingsPlansPurchaseRecommendationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSavingsPlansPurchaseRecommendationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.isSet()) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_savings_plans_purchase_recommendation.isSet()) {
        obj.insert(QString("SavingsPlansPurchaseRecommendation"), ::OpenAPI::toJsonValue(m_savings_plans_purchase_recommendation));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata OAIGetSavingsPlansPurchaseRecommendationResponse::getMetadata() const {
    return m_metadata;
}
void OAIGetSavingsPlansPurchaseRecommendationResponse::setMetadata(const OAIGetSavingsPlansPurchaseRecommendationResponse_Metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIGetSavingsPlansPurchaseRecommendationResponse_SavingsPlansPurchaseRecommendation OAIGetSavingsPlansPurchaseRecommendationResponse::getSavingsPlansPurchaseRecommendation() const {
    return m_savings_plans_purchase_recommendation;
}
void OAIGetSavingsPlansPurchaseRecommendationResponse::setSavingsPlansPurchaseRecommendation(const OAIGetSavingsPlansPurchaseRecommendationResponse_SavingsPlansPurchaseRecommendation &savings_plans_purchase_recommendation) {
    m_savings_plans_purchase_recommendation = savings_plans_purchase_recommendation;
    m_savings_plans_purchase_recommendation_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse::is_savings_plans_purchase_recommendation_Set() const{
    return m_savings_plans_purchase_recommendation_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse::is_savings_plans_purchase_recommendation_Valid() const{
    return m_savings_plans_purchase_recommendation_isValid;
}

QString OAIGetSavingsPlansPurchaseRecommendationResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetSavingsPlansPurchaseRecommendationResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_plans_purchase_recommendation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSavingsPlansPurchaseRecommendationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
