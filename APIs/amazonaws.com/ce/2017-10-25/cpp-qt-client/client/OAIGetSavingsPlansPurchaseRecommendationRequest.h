/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetSavingsPlansPurchaseRecommendationRequest.h
 *
 * 
 */

#ifndef OAIGetSavingsPlansPurchaseRecommendationRequest_H
#define OAIGetSavingsPlansPurchaseRecommendationRequest_H

#include <QJsonObject>

#include "OAIAccountScope.h"
#include "OAIGetSavingsPlansPurchaseRecommendationRequest_Filter.h"
#include "OAILookbackPeriodInDays.h"
#include "OAIPaymentOption.h"
#include "OAISupportedSavingsPlansType.h"
#include "OAITermInYears.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetSavingsPlansPurchaseRecommendationRequest_Filter;

class OAIGetSavingsPlansPurchaseRecommendationRequest : public OAIObject {
public:
    OAIGetSavingsPlansPurchaseRecommendationRequest();
    OAIGetSavingsPlansPurchaseRecommendationRequest(QString json);
    ~OAIGetSavingsPlansPurchaseRecommendationRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISupportedSavingsPlansType getSavingsPlansType() const;
    void setSavingsPlansType(const OAISupportedSavingsPlansType &savings_plans_type);
    bool is_savings_plans_type_Set() const;
    bool is_savings_plans_type_Valid() const;

    OAITermInYears getTermInYears() const;
    void setTermInYears(const OAITermInYears &term_in_years);
    bool is_term_in_years_Set() const;
    bool is_term_in_years_Valid() const;

    OAIPaymentOption getPaymentOption() const;
    void setPaymentOption(const OAIPaymentOption &payment_option);
    bool is_payment_option_Set() const;
    bool is_payment_option_Valid() const;

    OAIAccountScope getAccountScope() const;
    void setAccountScope(const OAIAccountScope &account_scope);
    bool is_account_scope_Set() const;
    bool is_account_scope_Valid() const;

    QString getNextPageToken() const;
    void setNextPageToken(const QString &next_page_token);
    bool is_next_page_token_Set() const;
    bool is_next_page_token_Valid() const;

    qint32 getPageSize() const;
    void setPageSize(const qint32 &page_size);
    bool is_page_size_Set() const;
    bool is_page_size_Valid() const;

    OAILookbackPeriodInDays getLookbackPeriodInDays() const;
    void setLookbackPeriodInDays(const OAILookbackPeriodInDays &lookback_period_in_days);
    bool is_lookback_period_in_days_Set() const;
    bool is_lookback_period_in_days_Valid() const;

    OAIGetSavingsPlansPurchaseRecommendationRequest_Filter getFilter() const;
    void setFilter(const OAIGetSavingsPlansPurchaseRecommendationRequest_Filter &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISupportedSavingsPlansType m_savings_plans_type;
    bool m_savings_plans_type_isSet;
    bool m_savings_plans_type_isValid;

    OAITermInYears m_term_in_years;
    bool m_term_in_years_isSet;
    bool m_term_in_years_isValid;

    OAIPaymentOption m_payment_option;
    bool m_payment_option_isSet;
    bool m_payment_option_isValid;

    OAIAccountScope m_account_scope;
    bool m_account_scope_isSet;
    bool m_account_scope_isValid;

    QString m_next_page_token;
    bool m_next_page_token_isSet;
    bool m_next_page_token_isValid;

    qint32 m_page_size;
    bool m_page_size_isSet;
    bool m_page_size_isValid;

    OAILookbackPeriodInDays m_lookback_period_in_days;
    bool m_lookback_period_in_days_isSet;
    bool m_lookback_period_in_days_isValid;

    OAIGetSavingsPlansPurchaseRecommendationRequest_Filter m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetSavingsPlansPurchaseRecommendationRequest)

#endif // OAIGetSavingsPlansPurchaseRecommendationRequest_H
