/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskResourceUtilization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskResourceUtilization::OAIDiskResourceUtilization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskResourceUtilization::OAIDiskResourceUtilization() {
    this->initializeModel();
}

OAIDiskResourceUtilization::~OAIDiskResourceUtilization() {}

void OAIDiskResourceUtilization::initializeModel() {

    m_disk_read_ops_per_second_isSet = false;
    m_disk_read_ops_per_second_isValid = false;

    m_disk_write_ops_per_second_isSet = false;
    m_disk_write_ops_per_second_isValid = false;

    m_disk_read_bytes_per_second_isSet = false;
    m_disk_read_bytes_per_second_isValid = false;

    m_disk_write_bytes_per_second_isSet = false;
    m_disk_write_bytes_per_second_isValid = false;
}

void OAIDiskResourceUtilization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskResourceUtilization::fromJsonObject(QJsonObject json) {

    m_disk_read_ops_per_second_isValid = ::OpenAPI::fromJsonValue(m_disk_read_ops_per_second, json[QString("DiskReadOpsPerSecond")]);
    m_disk_read_ops_per_second_isSet = !json[QString("DiskReadOpsPerSecond")].isNull() && m_disk_read_ops_per_second_isValid;

    m_disk_write_ops_per_second_isValid = ::OpenAPI::fromJsonValue(m_disk_write_ops_per_second, json[QString("DiskWriteOpsPerSecond")]);
    m_disk_write_ops_per_second_isSet = !json[QString("DiskWriteOpsPerSecond")].isNull() && m_disk_write_ops_per_second_isValid;

    m_disk_read_bytes_per_second_isValid = ::OpenAPI::fromJsonValue(m_disk_read_bytes_per_second, json[QString("DiskReadBytesPerSecond")]);
    m_disk_read_bytes_per_second_isSet = !json[QString("DiskReadBytesPerSecond")].isNull() && m_disk_read_bytes_per_second_isValid;

    m_disk_write_bytes_per_second_isValid = ::OpenAPI::fromJsonValue(m_disk_write_bytes_per_second, json[QString("DiskWriteBytesPerSecond")]);
    m_disk_write_bytes_per_second_isSet = !json[QString("DiskWriteBytesPerSecond")].isNull() && m_disk_write_bytes_per_second_isValid;
}

QString OAIDiskResourceUtilization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskResourceUtilization::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_read_ops_per_second_isSet) {
        obj.insert(QString("DiskReadOpsPerSecond"), ::OpenAPI::toJsonValue(m_disk_read_ops_per_second));
    }
    if (m_disk_write_ops_per_second_isSet) {
        obj.insert(QString("DiskWriteOpsPerSecond"), ::OpenAPI::toJsonValue(m_disk_write_ops_per_second));
    }
    if (m_disk_read_bytes_per_second_isSet) {
        obj.insert(QString("DiskReadBytesPerSecond"), ::OpenAPI::toJsonValue(m_disk_read_bytes_per_second));
    }
    if (m_disk_write_bytes_per_second_isSet) {
        obj.insert(QString("DiskWriteBytesPerSecond"), ::OpenAPI::toJsonValue(m_disk_write_bytes_per_second));
    }
    return obj;
}

QString OAIDiskResourceUtilization::getDiskReadOpsPerSecond() const {
    return m_disk_read_ops_per_second;
}
void OAIDiskResourceUtilization::setDiskReadOpsPerSecond(const QString &disk_read_ops_per_second) {
    m_disk_read_ops_per_second = disk_read_ops_per_second;
    m_disk_read_ops_per_second_isSet = true;
}

bool OAIDiskResourceUtilization::is_disk_read_ops_per_second_Set() const{
    return m_disk_read_ops_per_second_isSet;
}

bool OAIDiskResourceUtilization::is_disk_read_ops_per_second_Valid() const{
    return m_disk_read_ops_per_second_isValid;
}

QString OAIDiskResourceUtilization::getDiskWriteOpsPerSecond() const {
    return m_disk_write_ops_per_second;
}
void OAIDiskResourceUtilization::setDiskWriteOpsPerSecond(const QString &disk_write_ops_per_second) {
    m_disk_write_ops_per_second = disk_write_ops_per_second;
    m_disk_write_ops_per_second_isSet = true;
}

bool OAIDiskResourceUtilization::is_disk_write_ops_per_second_Set() const{
    return m_disk_write_ops_per_second_isSet;
}

bool OAIDiskResourceUtilization::is_disk_write_ops_per_second_Valid() const{
    return m_disk_write_ops_per_second_isValid;
}

QString OAIDiskResourceUtilization::getDiskReadBytesPerSecond() const {
    return m_disk_read_bytes_per_second;
}
void OAIDiskResourceUtilization::setDiskReadBytesPerSecond(const QString &disk_read_bytes_per_second) {
    m_disk_read_bytes_per_second = disk_read_bytes_per_second;
    m_disk_read_bytes_per_second_isSet = true;
}

bool OAIDiskResourceUtilization::is_disk_read_bytes_per_second_Set() const{
    return m_disk_read_bytes_per_second_isSet;
}

bool OAIDiskResourceUtilization::is_disk_read_bytes_per_second_Valid() const{
    return m_disk_read_bytes_per_second_isValid;
}

QString OAIDiskResourceUtilization::getDiskWriteBytesPerSecond() const {
    return m_disk_write_bytes_per_second;
}
void OAIDiskResourceUtilization::setDiskWriteBytesPerSecond(const QString &disk_write_bytes_per_second) {
    m_disk_write_bytes_per_second = disk_write_bytes_per_second;
    m_disk_write_bytes_per_second_isSet = true;
}

bool OAIDiskResourceUtilization::is_disk_write_bytes_per_second_Set() const{
    return m_disk_write_bytes_per_second_isSet;
}

bool OAIDiskResourceUtilization::is_disk_write_bytes_per_second_Valid() const{
    return m_disk_write_bytes_per_second_isValid;
}

bool OAIDiskResourceUtilization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_read_ops_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_write_ops_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_read_bytes_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_write_bytes_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskResourceUtilization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
