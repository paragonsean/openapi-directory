/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlansCoverage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlansCoverage::OAISavingsPlansCoverage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlansCoverage::OAISavingsPlansCoverage() {
    this->initializeModel();
}

OAISavingsPlansCoverage::~OAISavingsPlansCoverage() {}

void OAISavingsPlansCoverage::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_coverage_isSet = false;
    m_coverage_isValid = false;

    m_time_period_isSet = false;
    m_time_period_isValid = false;
}

void OAISavingsPlansCoverage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavingsPlansCoverage::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_coverage_isValid = ::OpenAPI::fromJsonValue(m_coverage, json[QString("Coverage")]);
    m_coverage_isSet = !json[QString("Coverage")].isNull() && m_coverage_isValid;

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("TimePeriod")]);
    m_time_period_isSet = !json[QString("TimePeriod")].isNull() && m_time_period_isValid;
}

QString OAISavingsPlansCoverage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavingsPlansCoverage::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_coverage.isSet()) {
        obj.insert(QString("Coverage"), ::OpenAPI::toJsonValue(m_coverage));
    }
    if (m_time_period.isSet()) {
        obj.insert(QString("TimePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    return obj;
}

QMap OAISavingsPlansCoverage::getAttributes() const {
    return m_attributes;
}
void OAISavingsPlansCoverage::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISavingsPlansCoverage::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISavingsPlansCoverage::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAISavingsPlansCoverage_Coverage OAISavingsPlansCoverage::getCoverage() const {
    return m_coverage;
}
void OAISavingsPlansCoverage::setCoverage(const OAISavingsPlansCoverage_Coverage &coverage) {
    m_coverage = coverage;
    m_coverage_isSet = true;
}

bool OAISavingsPlansCoverage::is_coverage_Set() const{
    return m_coverage_isSet;
}

bool OAISavingsPlansCoverage::is_coverage_Valid() const{
    return m_coverage_isValid;
}

OAIDateInterval OAISavingsPlansCoverage::getTimePeriod() const {
    return m_time_period;
}
void OAISavingsPlansCoverage::setTimePeriod(const OAIDateInterval &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAISavingsPlansCoverage::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAISavingsPlansCoverage::is_time_period_Valid() const{
    return m_time_period_isValid;
}

bool OAISavingsPlansCoverage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavingsPlansCoverage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
