/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTagsRequest.h
 *
 * 
 */

#ifndef OAIGetTagsRequest_H
#define OAIGetTagsRequest_H

#include <QJsonObject>

#include "OAIExpression.h"
#include "OAIGetTagsRequest_TimePeriod.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetTagsRequest_TimePeriod;
class OAIExpression;

class OAIGetTagsRequest : public OAIObject {
public:
    OAIGetTagsRequest();
    OAIGetTagsRequest(QString json);
    ~OAIGetTagsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSearchString() const;
    void setSearchString(const QString &search_string);
    bool is_search_string_Set() const;
    bool is_search_string_Valid() const;

    OAIGetTagsRequest_TimePeriod getTimePeriod() const;
    void setTimePeriod(const OAIGetTagsRequest_TimePeriod &time_period);
    bool is_time_period_Set() const;
    bool is_time_period_Valid() const;

    QString getTagKey() const;
    void setTagKey(const QString &tag_key);
    bool is_tag_key_Set() const;
    bool is_tag_key_Valid() const;

    OAIExpression getFilter() const;
    void setFilter(const OAIExpression &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    QList getSortBy() const;
    void setSortBy(const QList &sort_by);
    bool is_sort_by_Set() const;
    bool is_sort_by_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    QString getNextPageToken() const;
    void setNextPageToken(const QString &next_page_token);
    bool is_next_page_token_Set() const;
    bool is_next_page_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_search_string;
    bool m_search_string_isSet;
    bool m_search_string_isValid;

    OAIGetTagsRequest_TimePeriod m_time_period;
    bool m_time_period_isSet;
    bool m_time_period_isValid;

    QString m_tag_key;
    bool m_tag_key_isSet;
    bool m_tag_key_isValid;

    OAIExpression m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    QList m_sort_by;
    bool m_sort_by_isSet;
    bool m_sort_by_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;

    QString m_next_page_token;
    bool m_next_page_token_isSet;
    bool m_next_page_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTagsRequest)

#endif // OAIGetTagsRequest_H
