/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetAnomaliesRequest_TotalImpact.h
 *
 * 
 */

#ifndef OAIGetAnomaliesRequest_TotalImpact_H
#define OAIGetAnomaliesRequest_TotalImpact_H

#include <QJsonObject>

#include "OAINumericOperator.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetAnomaliesRequest_TotalImpact : public OAIObject {
public:
    OAIGetAnomaliesRequest_TotalImpact();
    OAIGetAnomaliesRequest_TotalImpact(QString json);
    ~OAIGetAnomaliesRequest_TotalImpact() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAINumericOperator getNumericOperator() const;
    void setNumericOperator(const OAINumericOperator &numeric_operator);
    bool is_numeric_operator_Set() const;
    bool is_numeric_operator_Valid() const;

    double getStartValue() const;
    void setStartValue(const double &start_value);
    bool is_start_value_Set() const;
    bool is_start_value_Valid() const;

    double getEndValue() const;
    void setEndValue(const double &end_value);
    bool is_end_value_Set() const;
    bool is_end_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAINumericOperator m_numeric_operator;
    bool m_numeric_operator_isSet;
    bool m_numeric_operator_isValid;

    double m_start_value;
    bool m_start_value_isSet;
    bool m_start_value_isValid;

    double m_end_value;
    bool m_end_value_isSet;
    bool m_end_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetAnomaliesRequest_TotalImpact)

#endif // OAIGetAnomaliesRequest_TotalImpact_H
