/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetUsageForecastResponse.h
 *
 * 
 */

#ifndef OAIGetUsageForecastResponse_H
#define OAIGetUsageForecastResponse_H

#include <QJsonObject>

#include "OAIGetUsageForecastResponse_Total.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetUsageForecastResponse_Total;

class OAIGetUsageForecastResponse : public OAIObject {
public:
    OAIGetUsageForecastResponse();
    OAIGetUsageForecastResponse(QString json);
    ~OAIGetUsageForecastResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGetUsageForecastResponse_Total getTotal() const;
    void setTotal(const OAIGetUsageForecastResponse_Total &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    QList getForecastResultsByTime() const;
    void setForecastResultsByTime(const QList &forecast_results_by_time);
    bool is_forecast_results_by_time_Set() const;
    bool is_forecast_results_by_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGetUsageForecastResponse_Total m_total;
    bool m_total_isSet;
    bool m_total_isValid;

    QList m_forecast_results_by_time;
    bool m_forecast_results_by_time_isSet;
    bool m_forecast_results_by_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetUsageForecastResponse)

#endif // OAIGetUsageForecastResponse_H
