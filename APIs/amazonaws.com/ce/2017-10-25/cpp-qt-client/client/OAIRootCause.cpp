/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRootCause.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRootCause::OAIRootCause(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRootCause::OAIRootCause() {
    this->initializeModel();
}

OAIRootCause::~OAIRootCause() {}

void OAIRootCause::initializeModel() {

    m_service_isSet = false;
    m_service_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_linked_account_isSet = false;
    m_linked_account_isValid = false;

    m_usage_type_isSet = false;
    m_usage_type_isValid = false;

    m_linked_account_name_isSet = false;
    m_linked_account_name_isValid = false;
}

void OAIRootCause::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRootCause::fromJsonObject(QJsonObject json) {

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("Service")]);
    m_service_isSet = !json[QString("Service")].isNull() && m_service_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_linked_account_isValid = ::OpenAPI::fromJsonValue(m_linked_account, json[QString("LinkedAccount")]);
    m_linked_account_isSet = !json[QString("LinkedAccount")].isNull() && m_linked_account_isValid;

    m_usage_type_isValid = ::OpenAPI::fromJsonValue(m_usage_type, json[QString("UsageType")]);
    m_usage_type_isSet = !json[QString("UsageType")].isNull() && m_usage_type_isValid;

    m_linked_account_name_isValid = ::OpenAPI::fromJsonValue(m_linked_account_name, json[QString("LinkedAccountName")]);
    m_linked_account_name_isSet = !json[QString("LinkedAccountName")].isNull() && m_linked_account_name_isValid;
}

QString OAIRootCause::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRootCause::asJsonObject() const {
    QJsonObject obj;
    if (m_service_isSet) {
        obj.insert(QString("Service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_linked_account_isSet) {
        obj.insert(QString("LinkedAccount"), ::OpenAPI::toJsonValue(m_linked_account));
    }
    if (m_usage_type_isSet) {
        obj.insert(QString("UsageType"), ::OpenAPI::toJsonValue(m_usage_type));
    }
    if (m_linked_account_name_isSet) {
        obj.insert(QString("LinkedAccountName"), ::OpenAPI::toJsonValue(m_linked_account_name));
    }
    return obj;
}

QString OAIRootCause::getService() const {
    return m_service;
}
void OAIRootCause::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIRootCause::is_service_Set() const{
    return m_service_isSet;
}

bool OAIRootCause::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIRootCause::getRegion() const {
    return m_region;
}
void OAIRootCause::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIRootCause::is_region_Set() const{
    return m_region_isSet;
}

bool OAIRootCause::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIRootCause::getLinkedAccount() const {
    return m_linked_account;
}
void OAIRootCause::setLinkedAccount(const QString &linked_account) {
    m_linked_account = linked_account;
    m_linked_account_isSet = true;
}

bool OAIRootCause::is_linked_account_Set() const{
    return m_linked_account_isSet;
}

bool OAIRootCause::is_linked_account_Valid() const{
    return m_linked_account_isValid;
}

QString OAIRootCause::getUsageType() const {
    return m_usage_type;
}
void OAIRootCause::setUsageType(const QString &usage_type) {
    m_usage_type = usage_type;
    m_usage_type_isSet = true;
}

bool OAIRootCause::is_usage_type_Set() const{
    return m_usage_type_isSet;
}

bool OAIRootCause::is_usage_type_Valid() const{
    return m_usage_type_isValid;
}

QString OAIRootCause::getLinkedAccountName() const {
    return m_linked_account_name;
}
void OAIRootCause::setLinkedAccountName(const QString &linked_account_name) {
    m_linked_account_name = linked_account_name;
    m_linked_account_name_isSet = true;
}

bool OAIRootCause::is_linked_account_name_Set() const{
    return m_linked_account_name_isSet;
}

bool OAIRootCause::is_linked_account_name_Valid() const{
    return m_linked_account_name_isValid;
}

bool OAIRootCause::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRootCause::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
