/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUtilizationByTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUtilizationByTime::OAIUtilizationByTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUtilizationByTime::OAIUtilizationByTime() {
    this->initializeModel();
}

OAIUtilizationByTime::~OAIUtilizationByTime() {}

void OAIUtilizationByTime::initializeModel() {

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIUtilizationByTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUtilizationByTime::fromJsonObject(QJsonObject json) {

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("TimePeriod")]);
    m_time_period_isSet = !json[QString("TimePeriod")].isNull() && m_time_period_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("Groups")]);
    m_groups_isSet = !json[QString("Groups")].isNull() && m_groups_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;
}

QString OAIUtilizationByTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUtilizationByTime::asJsonObject() const {
    QJsonObject obj;
    if (m_time_period.isSet()) {
        obj.insert(QString("TimePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_groups.isSet()) {
        obj.insert(QString("Groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_total.isSet()) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

OAIUtilizationByTime_TimePeriod OAIUtilizationByTime::getTimePeriod() const {
    return m_time_period;
}
void OAIUtilizationByTime::setTimePeriod(const OAIUtilizationByTime_TimePeriod &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIUtilizationByTime::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIUtilizationByTime::is_time_period_Valid() const{
    return m_time_period_isValid;
}

QList OAIUtilizationByTime::getGroups() const {
    return m_groups;
}
void OAIUtilizationByTime::setGroups(const QList &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIUtilizationByTime::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIUtilizationByTime::is_groups_Valid() const{
    return m_groups_isValid;
}

OAIUtilizationByTime_Total OAIUtilizationByTime::getTotal() const {
    return m_total;
}
void OAIUtilizationByTime::setTotal(const OAIUtilizationByTime_Total &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIUtilizationByTime::is_total_Set() const{
    return m_total_isSet;
}

bool OAIUtilizationByTime::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIUtilizationByTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUtilizationByTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
