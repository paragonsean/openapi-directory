/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSavingsPlansCoverageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSavingsPlansCoverageResponse::OAIGetSavingsPlansCoverageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSavingsPlansCoverageResponse::OAIGetSavingsPlansCoverageResponse() {
    this->initializeModel();
}

OAIGetSavingsPlansCoverageResponse::~OAIGetSavingsPlansCoverageResponse() {}

void OAIGetSavingsPlansCoverageResponse::initializeModel() {

    m_savings_plans_coverages_isSet = false;
    m_savings_plans_coverages_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetSavingsPlansCoverageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSavingsPlansCoverageResponse::fromJsonObject(QJsonObject json) {

    m_savings_plans_coverages_isValid = ::OpenAPI::fromJsonValue(m_savings_plans_coverages, json[QString("SavingsPlansCoverages")]);
    m_savings_plans_coverages_isSet = !json[QString("SavingsPlansCoverages")].isNull() && m_savings_plans_coverages_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetSavingsPlansCoverageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSavingsPlansCoverageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_savings_plans_coverages.isSet()) {
        obj.insert(QString("SavingsPlansCoverages"), ::OpenAPI::toJsonValue(m_savings_plans_coverages));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIGetSavingsPlansCoverageResponse::getSavingsPlansCoverages() const {
    return m_savings_plans_coverages;
}
void OAIGetSavingsPlansCoverageResponse::setSavingsPlansCoverages(const QList &savings_plans_coverages) {
    m_savings_plans_coverages = savings_plans_coverages;
    m_savings_plans_coverages_isSet = true;
}

bool OAIGetSavingsPlansCoverageResponse::is_savings_plans_coverages_Set() const{
    return m_savings_plans_coverages_isSet;
}

bool OAIGetSavingsPlansCoverageResponse::is_savings_plans_coverages_Valid() const{
    return m_savings_plans_coverages_isValid;
}

QString OAIGetSavingsPlansCoverageResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetSavingsPlansCoverageResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetSavingsPlansCoverageResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetSavingsPlansCoverageResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetSavingsPlansCoverageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_savings_plans_coverages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSavingsPlansCoverageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_savings_plans_coverages_isValid && true;
}

} // namespace OpenAPI
