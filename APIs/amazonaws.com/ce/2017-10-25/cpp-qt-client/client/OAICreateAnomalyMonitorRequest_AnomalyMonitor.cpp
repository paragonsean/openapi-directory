/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAnomalyMonitorRequest_AnomalyMonitor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAnomalyMonitorRequest_AnomalyMonitor::OAICreateAnomalyMonitorRequest_AnomalyMonitor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAnomalyMonitorRequest_AnomalyMonitor::OAICreateAnomalyMonitorRequest_AnomalyMonitor() {
    this->initializeModel();
}

OAICreateAnomalyMonitorRequest_AnomalyMonitor::~OAICreateAnomalyMonitorRequest_AnomalyMonitor() {}

void OAICreateAnomalyMonitorRequest_AnomalyMonitor::initializeModel() {

    m_monitor_arn_isSet = false;
    m_monitor_arn_isValid = false;

    m_monitor_name_isSet = false;
    m_monitor_name_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_last_updated_date_isSet = false;
    m_last_updated_date_isValid = false;

    m_last_evaluated_date_isSet = false;
    m_last_evaluated_date_isValid = false;

    m_monitor_type_isSet = false;
    m_monitor_type_isValid = false;

    m_monitor_dimension_isSet = false;
    m_monitor_dimension_isValid = false;

    m_monitor_specification_isSet = false;
    m_monitor_specification_isValid = false;

    m_dimensional_value_count_isSet = false;
    m_dimensional_value_count_isValid = false;
}

void OAICreateAnomalyMonitorRequest_AnomalyMonitor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAnomalyMonitorRequest_AnomalyMonitor::fromJsonObject(QJsonObject json) {

    m_monitor_arn_isValid = ::OpenAPI::fromJsonValue(m_monitor_arn, json[QString("MonitorArn")]);
    m_monitor_arn_isSet = !json[QString("MonitorArn")].isNull() && m_monitor_arn_isValid;

    m_monitor_name_isValid = ::OpenAPI::fromJsonValue(m_monitor_name, json[QString("MonitorName")]);
    m_monitor_name_isSet = !json[QString("MonitorName")].isNull() && m_monitor_name_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_last_updated_date_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date, json[QString("LastUpdatedDate")]);
    m_last_updated_date_isSet = !json[QString("LastUpdatedDate")].isNull() && m_last_updated_date_isValid;

    m_last_evaluated_date_isValid = ::OpenAPI::fromJsonValue(m_last_evaluated_date, json[QString("LastEvaluatedDate")]);
    m_last_evaluated_date_isSet = !json[QString("LastEvaluatedDate")].isNull() && m_last_evaluated_date_isValid;

    m_monitor_type_isValid = ::OpenAPI::fromJsonValue(m_monitor_type, json[QString("MonitorType")]);
    m_monitor_type_isSet = !json[QString("MonitorType")].isNull() && m_monitor_type_isValid;

    m_monitor_dimension_isValid = ::OpenAPI::fromJsonValue(m_monitor_dimension, json[QString("MonitorDimension")]);
    m_monitor_dimension_isSet = !json[QString("MonitorDimension")].isNull() && m_monitor_dimension_isValid;

    m_monitor_specification_isValid = ::OpenAPI::fromJsonValue(m_monitor_specification, json[QString("MonitorSpecification")]);
    m_monitor_specification_isSet = !json[QString("MonitorSpecification")].isNull() && m_monitor_specification_isValid;

    m_dimensional_value_count_isValid = ::OpenAPI::fromJsonValue(m_dimensional_value_count, json[QString("DimensionalValueCount")]);
    m_dimensional_value_count_isSet = !json[QString("DimensionalValueCount")].isNull() && m_dimensional_value_count_isValid;
}

QString OAICreateAnomalyMonitorRequest_AnomalyMonitor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAnomalyMonitorRequest_AnomalyMonitor::asJsonObject() const {
    QJsonObject obj;
    if (m_monitor_arn_isSet) {
        obj.insert(QString("MonitorArn"), ::OpenAPI::toJsonValue(m_monitor_arn));
    }
    if (m_monitor_name_isSet) {
        obj.insert(QString("MonitorName"), ::OpenAPI::toJsonValue(m_monitor_name));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_last_updated_date_isSet) {
        obj.insert(QString("LastUpdatedDate"), ::OpenAPI::toJsonValue(m_last_updated_date));
    }
    if (m_last_evaluated_date_isSet) {
        obj.insert(QString("LastEvaluatedDate"), ::OpenAPI::toJsonValue(m_last_evaluated_date));
    }
    if (m_monitor_type.isSet()) {
        obj.insert(QString("MonitorType"), ::OpenAPI::toJsonValue(m_monitor_type));
    }
    if (m_monitor_dimension.isSet()) {
        obj.insert(QString("MonitorDimension"), ::OpenAPI::toJsonValue(m_monitor_dimension));
    }
    if (m_monitor_specification.isSet()) {
        obj.insert(QString("MonitorSpecification"), ::OpenAPI::toJsonValue(m_monitor_specification));
    }
    if (m_dimensional_value_count_isSet) {
        obj.insert(QString("DimensionalValueCount"), ::OpenAPI::toJsonValue(m_dimensional_value_count));
    }
    return obj;
}

QString OAICreateAnomalyMonitorRequest_AnomalyMonitor::getMonitorArn() const {
    return m_monitor_arn;
}
void OAICreateAnomalyMonitorRequest_AnomalyMonitor::setMonitorArn(const QString &monitor_arn) {
    m_monitor_arn = monitor_arn;
    m_monitor_arn_isSet = true;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_monitor_arn_Set() const{
    return m_monitor_arn_isSet;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_monitor_arn_Valid() const{
    return m_monitor_arn_isValid;
}

QString OAICreateAnomalyMonitorRequest_AnomalyMonitor::getMonitorName() const {
    return m_monitor_name;
}
void OAICreateAnomalyMonitorRequest_AnomalyMonitor::setMonitorName(const QString &monitor_name) {
    m_monitor_name = monitor_name;
    m_monitor_name_isSet = true;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_monitor_name_Set() const{
    return m_monitor_name_isSet;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_monitor_name_Valid() const{
    return m_monitor_name_isValid;
}

QString OAICreateAnomalyMonitorRequest_AnomalyMonitor::getCreationDate() const {
    return m_creation_date;
}
void OAICreateAnomalyMonitorRequest_AnomalyMonitor::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAICreateAnomalyMonitorRequest_AnomalyMonitor::getLastUpdatedDate() const {
    return m_last_updated_date;
}
void OAICreateAnomalyMonitorRequest_AnomalyMonitor::setLastUpdatedDate(const QString &last_updated_date) {
    m_last_updated_date = last_updated_date;
    m_last_updated_date_isSet = true;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_last_updated_date_Set() const{
    return m_last_updated_date_isSet;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_last_updated_date_Valid() const{
    return m_last_updated_date_isValid;
}

QString OAICreateAnomalyMonitorRequest_AnomalyMonitor::getLastEvaluatedDate() const {
    return m_last_evaluated_date;
}
void OAICreateAnomalyMonitorRequest_AnomalyMonitor::setLastEvaluatedDate(const QString &last_evaluated_date) {
    m_last_evaluated_date = last_evaluated_date;
    m_last_evaluated_date_isSet = true;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_last_evaluated_date_Set() const{
    return m_last_evaluated_date_isSet;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_last_evaluated_date_Valid() const{
    return m_last_evaluated_date_isValid;
}

OAIMonitorType OAICreateAnomalyMonitorRequest_AnomalyMonitor::getMonitorType() const {
    return m_monitor_type;
}
void OAICreateAnomalyMonitorRequest_AnomalyMonitor::setMonitorType(const OAIMonitorType &monitor_type) {
    m_monitor_type = monitor_type;
    m_monitor_type_isSet = true;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_monitor_type_Set() const{
    return m_monitor_type_isSet;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_monitor_type_Valid() const{
    return m_monitor_type_isValid;
}

OAIMonitorDimension OAICreateAnomalyMonitorRequest_AnomalyMonitor::getMonitorDimension() const {
    return m_monitor_dimension;
}
void OAICreateAnomalyMonitorRequest_AnomalyMonitor::setMonitorDimension(const OAIMonitorDimension &monitor_dimension) {
    m_monitor_dimension = monitor_dimension;
    m_monitor_dimension_isSet = true;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_monitor_dimension_Set() const{
    return m_monitor_dimension_isSet;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_monitor_dimension_Valid() const{
    return m_monitor_dimension_isValid;
}

OAIExpression OAICreateAnomalyMonitorRequest_AnomalyMonitor::getMonitorSpecification() const {
    return m_monitor_specification;
}
void OAICreateAnomalyMonitorRequest_AnomalyMonitor::setMonitorSpecification(const OAIExpression &monitor_specification) {
    m_monitor_specification = monitor_specification;
    m_monitor_specification_isSet = true;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_monitor_specification_Set() const{
    return m_monitor_specification_isSet;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_monitor_specification_Valid() const{
    return m_monitor_specification_isValid;
}

qint32 OAICreateAnomalyMonitorRequest_AnomalyMonitor::getDimensionalValueCount() const {
    return m_dimensional_value_count;
}
void OAICreateAnomalyMonitorRequest_AnomalyMonitor::setDimensionalValueCount(const qint32 &dimensional_value_count) {
    m_dimensional_value_count = dimensional_value_count;
    m_dimensional_value_count_isSet = true;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_dimensional_value_count_Set() const{
    return m_dimensional_value_count_isSet;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::is_dimensional_value_count_Valid() const{
    return m_dimensional_value_count_isValid;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_monitor_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_evaluated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensional_value_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAnomalyMonitorRequest_AnomalyMonitor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_monitor_name_isValid && m_monitor_type_isValid && true;
}

} // namespace OpenAPI
