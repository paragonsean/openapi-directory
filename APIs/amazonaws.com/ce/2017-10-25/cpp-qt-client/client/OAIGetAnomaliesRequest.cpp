/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAnomaliesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAnomaliesRequest::OAIGetAnomaliesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAnomaliesRequest::OAIGetAnomaliesRequest() {
    this->initializeModel();
}

OAIGetAnomaliesRequest::~OAIGetAnomaliesRequest() {}

void OAIGetAnomaliesRequest::initializeModel() {

    m_monitor_arn_isSet = false;
    m_monitor_arn_isValid = false;

    m_date_interval_isSet = false;
    m_date_interval_isValid = false;

    m_feedback_isSet = false;
    m_feedback_isValid = false;

    m_total_impact_isSet = false;
    m_total_impact_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIGetAnomaliesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAnomaliesRequest::fromJsonObject(QJsonObject json) {

    m_monitor_arn_isValid = ::OpenAPI::fromJsonValue(m_monitor_arn, json[QString("MonitorArn")]);
    m_monitor_arn_isSet = !json[QString("MonitorArn")].isNull() && m_monitor_arn_isValid;

    m_date_interval_isValid = ::OpenAPI::fromJsonValue(m_date_interval, json[QString("DateInterval")]);
    m_date_interval_isSet = !json[QString("DateInterval")].isNull() && m_date_interval_isValid;

    m_feedback_isValid = ::OpenAPI::fromJsonValue(m_feedback, json[QString("Feedback")]);
    m_feedback_isSet = !json[QString("Feedback")].isNull() && m_feedback_isValid;

    m_total_impact_isValid = ::OpenAPI::fromJsonValue(m_total_impact, json[QString("TotalImpact")]);
    m_total_impact_isSet = !json[QString("TotalImpact")].isNull() && m_total_impact_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIGetAnomaliesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAnomaliesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_monitor_arn_isSet) {
        obj.insert(QString("MonitorArn"), ::OpenAPI::toJsonValue(m_monitor_arn));
    }
    if (m_date_interval.isSet()) {
        obj.insert(QString("DateInterval"), ::OpenAPI::toJsonValue(m_date_interval));
    }
    if (m_feedback.isSet()) {
        obj.insert(QString("Feedback"), ::OpenAPI::toJsonValue(m_feedback));
    }
    if (m_total_impact.isSet()) {
        obj.insert(QString("TotalImpact"), ::OpenAPI::toJsonValue(m_total_impact));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIGetAnomaliesRequest::getMonitorArn() const {
    return m_monitor_arn;
}
void OAIGetAnomaliesRequest::setMonitorArn(const QString &monitor_arn) {
    m_monitor_arn = monitor_arn;
    m_monitor_arn_isSet = true;
}

bool OAIGetAnomaliesRequest::is_monitor_arn_Set() const{
    return m_monitor_arn_isSet;
}

bool OAIGetAnomaliesRequest::is_monitor_arn_Valid() const{
    return m_monitor_arn_isValid;
}

OAIGetAnomaliesRequest_DateInterval OAIGetAnomaliesRequest::getDateInterval() const {
    return m_date_interval;
}
void OAIGetAnomaliesRequest::setDateInterval(const OAIGetAnomaliesRequest_DateInterval &date_interval) {
    m_date_interval = date_interval;
    m_date_interval_isSet = true;
}

bool OAIGetAnomaliesRequest::is_date_interval_Set() const{
    return m_date_interval_isSet;
}

bool OAIGetAnomaliesRequest::is_date_interval_Valid() const{
    return m_date_interval_isValid;
}

OAIAnomalyFeedbackType OAIGetAnomaliesRequest::getFeedback() const {
    return m_feedback;
}
void OAIGetAnomaliesRequest::setFeedback(const OAIAnomalyFeedbackType &feedback) {
    m_feedback = feedback;
    m_feedback_isSet = true;
}

bool OAIGetAnomaliesRequest::is_feedback_Set() const{
    return m_feedback_isSet;
}

bool OAIGetAnomaliesRequest::is_feedback_Valid() const{
    return m_feedback_isValid;
}

OAIGetAnomaliesRequest_TotalImpact OAIGetAnomaliesRequest::getTotalImpact() const {
    return m_total_impact;
}
void OAIGetAnomaliesRequest::setTotalImpact(const OAIGetAnomaliesRequest_TotalImpact &total_impact) {
    m_total_impact = total_impact;
    m_total_impact_isSet = true;
}

bool OAIGetAnomaliesRequest::is_total_impact_Set() const{
    return m_total_impact_isSet;
}

bool OAIGetAnomaliesRequest::is_total_impact_Valid() const{
    return m_total_impact_isValid;
}

QString OAIGetAnomaliesRequest::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetAnomaliesRequest::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetAnomaliesRequest::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetAnomaliesRequest::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

qint32 OAIGetAnomaliesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetAnomaliesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetAnomaliesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetAnomaliesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIGetAnomaliesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_monitor_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_impact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAnomaliesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_interval_isValid && true;
}

} // namespace OpenAPI
