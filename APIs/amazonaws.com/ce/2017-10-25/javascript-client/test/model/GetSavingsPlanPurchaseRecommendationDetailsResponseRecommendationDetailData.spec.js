/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCostExplorerService);
  }
}(this, function(expect, AwsCostExplorerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData', function() {
    it('should create an instance of GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData', function() {
      // uncomment below and update the code to test GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be.a(AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData);
    });

    it('should have the property accountScope (base name: "AccountScope")', function() {
      // uncomment below and update the code to test the property accountScope
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property lookbackPeriodInDays (base name: "LookbackPeriodInDays")', function() {
      // uncomment below and update the code to test the property lookbackPeriodInDays
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property savingsPlansType (base name: "SavingsPlansType")', function() {
      // uncomment below and update the code to test the property savingsPlansType
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property termInYears (base name: "TermInYears")', function() {
      // uncomment below and update the code to test the property termInYears
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property paymentOption (base name: "PaymentOption")', function() {
      // uncomment below and update the code to test the property paymentOption
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "AccountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "CurrencyCode")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property instanceFamily (base name: "InstanceFamily")', function() {
      // uncomment below and update the code to test the property instanceFamily
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property region (base name: "Region")', function() {
      // uncomment below and update the code to test the property region
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property offeringId (base name: "OfferingId")', function() {
      // uncomment below and update the code to test the property offeringId
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property generationTimestamp (base name: "GenerationTimestamp")', function() {
      // uncomment below and update the code to test the property generationTimestamp
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property latestUsageTimestamp (base name: "LatestUsageTimestamp")', function() {
      // uncomment below and update the code to test the property latestUsageTimestamp
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property currentAverageHourlyOnDemandSpend (base name: "CurrentAverageHourlyOnDemandSpend")', function() {
      // uncomment below and update the code to test the property currentAverageHourlyOnDemandSpend
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property currentMaximumHourlyOnDemandSpend (base name: "CurrentMaximumHourlyOnDemandSpend")', function() {
      // uncomment below and update the code to test the property currentMaximumHourlyOnDemandSpend
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property currentMinimumHourlyOnDemandSpend (base name: "CurrentMinimumHourlyOnDemandSpend")', function() {
      // uncomment below and update the code to test the property currentMinimumHourlyOnDemandSpend
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property estimatedAverageUtilization (base name: "EstimatedAverageUtilization")', function() {
      // uncomment below and update the code to test the property estimatedAverageUtilization
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property estimatedMonthlySavingsAmount (base name: "EstimatedMonthlySavingsAmount")', function() {
      // uncomment below and update the code to test the property estimatedMonthlySavingsAmount
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property estimatedOnDemandCost (base name: "EstimatedOnDemandCost")', function() {
      // uncomment below and update the code to test the property estimatedOnDemandCost
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property estimatedOnDemandCostWithCurrentCommitment (base name: "EstimatedOnDemandCostWithCurrentCommitment")', function() {
      // uncomment below and update the code to test the property estimatedOnDemandCostWithCurrentCommitment
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property estimatedROI (base name: "EstimatedROI")', function() {
      // uncomment below and update the code to test the property estimatedROI
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property estimatedSPCost (base name: "EstimatedSPCost")', function() {
      // uncomment below and update the code to test the property estimatedSPCost
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property estimatedSavingsAmount (base name: "EstimatedSavingsAmount")', function() {
      // uncomment below and update the code to test the property estimatedSavingsAmount
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property estimatedSavingsPercentage (base name: "EstimatedSavingsPercentage")', function() {
      // uncomment below and update the code to test the property estimatedSavingsPercentage
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property existingHourlyCommitment (base name: "ExistingHourlyCommitment")', function() {
      // uncomment below and update the code to test the property existingHourlyCommitment
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property hourlyCommitmentToPurchase (base name: "HourlyCommitmentToPurchase")', function() {
      // uncomment below and update the code to test the property hourlyCommitmentToPurchase
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property upfrontCost (base name: "UpfrontCost")', function() {
      // uncomment below and update the code to test the property upfrontCost
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property currentAverageCoverage (base name: "CurrentAverageCoverage")', function() {
      // uncomment below and update the code to test the property currentAverageCoverage
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property estimatedAverageCoverage (base name: "EstimatedAverageCoverage")', function() {
      // uncomment below and update the code to test the property estimatedAverageCoverage
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

    it('should have the property metricsOverLookbackPeriod (base name: "MetricsOverLookbackPeriod")', function() {
      // uncomment below and update the code to test the property metricsOverLookbackPeriod
      //var instance = new AwsCostExplorerService.GetSavingsPlanPurchaseRecommendationDetailsResponseRecommendationDetailData();
      //expect(instance).to.be();
    });

  });

}));
