/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCostExplorerService);
  }
}(this, function(expect, AwsCostExplorerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCostExplorerService.CurrentInstance();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CurrentInstance', function() {
    it('should create an instance of CurrentInstance', function() {
      // uncomment below and update the code to test CurrentInstance
      //var instance = new AwsCostExplorerService.CurrentInstance();
      //expect(instance).to.be.a(AwsCostExplorerService.CurrentInstance);
    });

    it('should have the property resourceId (base name: "ResourceId")', function() {
      // uncomment below and update the code to test the property resourceId
      //var instance = new AwsCostExplorerService.CurrentInstance();
      //expect(instance).to.be();
    });

    it('should have the property instanceName (base name: "InstanceName")', function() {
      // uncomment below and update the code to test the property instanceName
      //var instance = new AwsCostExplorerService.CurrentInstance();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AwsCostExplorerService.CurrentInstance();
      //expect(instance).to.be();
    });

    it('should have the property resourceDetails (base name: "ResourceDetails")', function() {
      // uncomment below and update the code to test the property resourceDetails
      //var instance = new AwsCostExplorerService.CurrentInstance();
      //expect(instance).to.be();
    });

    it('should have the property resourceUtilization (base name: "ResourceUtilization")', function() {
      // uncomment below and update the code to test the property resourceUtilization
      //var instance = new AwsCostExplorerService.CurrentInstance();
      //expect(instance).to.be();
    });

    it('should have the property reservationCoveredHoursInLookbackPeriod (base name: "ReservationCoveredHoursInLookbackPeriod")', function() {
      // uncomment below and update the code to test the property reservationCoveredHoursInLookbackPeriod
      //var instance = new AwsCostExplorerService.CurrentInstance();
      //expect(instance).to.be();
    });

    it('should have the property savingsPlansCoveredHoursInLookbackPeriod (base name: "SavingsPlansCoveredHoursInLookbackPeriod")', function() {
      // uncomment below and update the code to test the property savingsPlansCoveredHoursInLookbackPeriod
      //var instance = new AwsCostExplorerService.CurrentInstance();
      //expect(instance).to.be();
    });

    it('should have the property onDemandHoursInLookbackPeriod (base name: "OnDemandHoursInLookbackPeriod")', function() {
      // uncomment below and update the code to test the property onDemandHoursInLookbackPeriod
      //var instance = new AwsCostExplorerService.CurrentInstance();
      //expect(instance).to.be();
    });

    it('should have the property totalRunningHoursInLookbackPeriod (base name: "TotalRunningHoursInLookbackPeriod")', function() {
      // uncomment below and update the code to test the property totalRunningHoursInLookbackPeriod
      //var instance = new AwsCostExplorerService.CurrentInstance();
      //expect(instance).to.be();
    });

    it('should have the property monthlyCost (base name: "MonthlyCost")', function() {
      // uncomment below and update the code to test the property monthlyCost
      //var instance = new AwsCostExplorerService.CurrentInstance();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "CurrencyCode")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new AwsCostExplorerService.CurrentInstance();
      //expect(instance).to.be();
    });

  });

}));
