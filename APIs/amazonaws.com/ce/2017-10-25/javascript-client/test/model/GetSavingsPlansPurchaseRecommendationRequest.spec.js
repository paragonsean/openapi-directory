/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCostExplorerService);
  }
}(this, function(expect, AwsCostExplorerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCostExplorerService.GetSavingsPlansPurchaseRecommendationRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetSavingsPlansPurchaseRecommendationRequest', function() {
    it('should create an instance of GetSavingsPlansPurchaseRecommendationRequest', function() {
      // uncomment below and update the code to test GetSavingsPlansPurchaseRecommendationRequest
      //var instance = new AwsCostExplorerService.GetSavingsPlansPurchaseRecommendationRequest();
      //expect(instance).to.be.a(AwsCostExplorerService.GetSavingsPlansPurchaseRecommendationRequest);
    });

    it('should have the property savingsPlansType (base name: "SavingsPlansType")', function() {
      // uncomment below and update the code to test the property savingsPlansType
      //var instance = new AwsCostExplorerService.GetSavingsPlansPurchaseRecommendationRequest();
      //expect(instance).to.be();
    });

    it('should have the property termInYears (base name: "TermInYears")', function() {
      // uncomment below and update the code to test the property termInYears
      //var instance = new AwsCostExplorerService.GetSavingsPlansPurchaseRecommendationRequest();
      //expect(instance).to.be();
    });

    it('should have the property paymentOption (base name: "PaymentOption")', function() {
      // uncomment below and update the code to test the property paymentOption
      //var instance = new AwsCostExplorerService.GetSavingsPlansPurchaseRecommendationRequest();
      //expect(instance).to.be();
    });

    it('should have the property accountScope (base name: "AccountScope")', function() {
      // uncomment below and update the code to test the property accountScope
      //var instance = new AwsCostExplorerService.GetSavingsPlansPurchaseRecommendationRequest();
      //expect(instance).to.be();
    });

    it('should have the property nextPageToken (base name: "NextPageToken")', function() {
      // uncomment below and update the code to test the property nextPageToken
      //var instance = new AwsCostExplorerService.GetSavingsPlansPurchaseRecommendationRequest();
      //expect(instance).to.be();
    });

    it('should have the property pageSize (base name: "PageSize")', function() {
      // uncomment below and update the code to test the property pageSize
      //var instance = new AwsCostExplorerService.GetSavingsPlansPurchaseRecommendationRequest();
      //expect(instance).to.be();
    });

    it('should have the property lookbackPeriodInDays (base name: "LookbackPeriodInDays")', function() {
      // uncomment below and update the code to test the property lookbackPeriodInDays
      //var instance = new AwsCostExplorerService.GetSavingsPlansPurchaseRecommendationRequest();
      //expect(instance).to.be();
    });

    it('should have the property filter (base name: "Filter")', function() {
      // uncomment below and update the code to test the property filter
      //var instance = new AwsCostExplorerService.GetSavingsPlansPurchaseRecommendationRequest();
      //expect(instance).to.be();
    });

  });

}));
