/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCostExplorerService);
  }
}(this, function(expect, AwsCostExplorerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCostExplorerService.ReservationAggregates();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReservationAggregates', function() {
    it('should create an instance of ReservationAggregates', function() {
      // uncomment below and update the code to test ReservationAggregates
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be.a(AwsCostExplorerService.ReservationAggregates);
    });

    it('should have the property utilizationPercentage (base name: "UtilizationPercentage")', function() {
      // uncomment below and update the code to test the property utilizationPercentage
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property utilizationPercentageInUnits (base name: "UtilizationPercentageInUnits")', function() {
      // uncomment below and update the code to test the property utilizationPercentageInUnits
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property purchasedHours (base name: "PurchasedHours")', function() {
      // uncomment below and update the code to test the property purchasedHours
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property purchasedUnits (base name: "PurchasedUnits")', function() {
      // uncomment below and update the code to test the property purchasedUnits
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property totalActualHours (base name: "TotalActualHours")', function() {
      // uncomment below and update the code to test the property totalActualHours
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property totalActualUnits (base name: "TotalActualUnits")', function() {
      // uncomment below and update the code to test the property totalActualUnits
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property unusedHours (base name: "UnusedHours")', function() {
      // uncomment below and update the code to test the property unusedHours
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property unusedUnits (base name: "UnusedUnits")', function() {
      // uncomment below and update the code to test the property unusedUnits
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property onDemandCostOfRIHoursUsed (base name: "OnDemandCostOfRIHoursUsed")', function() {
      // uncomment below and update the code to test the property onDemandCostOfRIHoursUsed
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property netRISavings (base name: "NetRISavings")', function() {
      // uncomment below and update the code to test the property netRISavings
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property totalPotentialRISavings (base name: "TotalPotentialRISavings")', function() {
      // uncomment below and update the code to test the property totalPotentialRISavings
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property amortizedUpfrontFee (base name: "AmortizedUpfrontFee")', function() {
      // uncomment below and update the code to test the property amortizedUpfrontFee
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property amortizedRecurringFee (base name: "AmortizedRecurringFee")', function() {
      // uncomment below and update the code to test the property amortizedRecurringFee
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property totalAmortizedFee (base name: "TotalAmortizedFee")', function() {
      // uncomment below and update the code to test the property totalAmortizedFee
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property rICostForUnusedHours (base name: "RICostForUnusedHours")', function() {
      // uncomment below and update the code to test the property rICostForUnusedHours
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property realizedSavings (base name: "RealizedSavings")', function() {
      // uncomment below and update the code to test the property realizedSavings
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

    it('should have the property unrealizedSavings (base name: "UnrealizedSavings")', function() {
      // uncomment below and update the code to test the property unrealizedSavings
      //var instance = new AwsCostExplorerService.ReservationAggregates();
      //expect(instance).to.be();
    });

  });

}));
