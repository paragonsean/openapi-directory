/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCostExplorerService);
  }
}(this, function(expect, AwsCostExplorerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReservationPurchaseRecommendationDetail', function() {
    it('should create an instance of ReservationPurchaseRecommendationDetail', function() {
      // uncomment below and update the code to test ReservationPurchaseRecommendationDetail
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be.a(AwsCostExplorerService.ReservationPurchaseRecommendationDetail);
    });

    it('should have the property accountId (base name: "AccountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property instanceDetails (base name: "InstanceDetails")', function() {
      // uncomment below and update the code to test the property instanceDetails
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property recommendedNumberOfInstancesToPurchase (base name: "RecommendedNumberOfInstancesToPurchase")', function() {
      // uncomment below and update the code to test the property recommendedNumberOfInstancesToPurchase
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property recommendedNormalizedUnitsToPurchase (base name: "RecommendedNormalizedUnitsToPurchase")', function() {
      // uncomment below and update the code to test the property recommendedNormalizedUnitsToPurchase
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property minimumNumberOfInstancesUsedPerHour (base name: "MinimumNumberOfInstancesUsedPerHour")', function() {
      // uncomment below and update the code to test the property minimumNumberOfInstancesUsedPerHour
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property minimumNormalizedUnitsUsedPerHour (base name: "MinimumNormalizedUnitsUsedPerHour")', function() {
      // uncomment below and update the code to test the property minimumNormalizedUnitsUsedPerHour
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property maximumNumberOfInstancesUsedPerHour (base name: "MaximumNumberOfInstancesUsedPerHour")', function() {
      // uncomment below and update the code to test the property maximumNumberOfInstancesUsedPerHour
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property maximumNormalizedUnitsUsedPerHour (base name: "MaximumNormalizedUnitsUsedPerHour")', function() {
      // uncomment below and update the code to test the property maximumNormalizedUnitsUsedPerHour
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property averageNumberOfInstancesUsedPerHour (base name: "AverageNumberOfInstancesUsedPerHour")', function() {
      // uncomment below and update the code to test the property averageNumberOfInstancesUsedPerHour
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property averageNormalizedUnitsUsedPerHour (base name: "AverageNormalizedUnitsUsedPerHour")', function() {
      // uncomment below and update the code to test the property averageNormalizedUnitsUsedPerHour
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property averageUtilization (base name: "AverageUtilization")', function() {
      // uncomment below and update the code to test the property averageUtilization
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property estimatedBreakEvenInMonths (base name: "EstimatedBreakEvenInMonths")', function() {
      // uncomment below and update the code to test the property estimatedBreakEvenInMonths
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "CurrencyCode")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property estimatedMonthlySavingsAmount (base name: "EstimatedMonthlySavingsAmount")', function() {
      // uncomment below and update the code to test the property estimatedMonthlySavingsAmount
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property estimatedMonthlySavingsPercentage (base name: "EstimatedMonthlySavingsPercentage")', function() {
      // uncomment below and update the code to test the property estimatedMonthlySavingsPercentage
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property estimatedMonthlyOnDemandCost (base name: "EstimatedMonthlyOnDemandCost")', function() {
      // uncomment below and update the code to test the property estimatedMonthlyOnDemandCost
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property estimatedReservationCostForLookbackPeriod (base name: "EstimatedReservationCostForLookbackPeriod")', function() {
      // uncomment below and update the code to test the property estimatedReservationCostForLookbackPeriod
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property upfrontCost (base name: "UpfrontCost")', function() {
      // uncomment below and update the code to test the property upfrontCost
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

    it('should have the property recurringStandardMonthlyCost (base name: "RecurringStandardMonthlyCost")', function() {
      // uncomment below and update the code to test the property recurringStandardMonthlyCost
      //var instance = new AwsCostExplorerService.ReservationPurchaseRecommendationDetail();
      //expect(instance).to.be();
    });

  });

}));
