/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCostExplorerService);
  }
}(this, function(expect, AwsCostExplorerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCostExplorerService.ESInstanceDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ESInstanceDetails', function() {
    it('should create an instance of ESInstanceDetails', function() {
      // uncomment below and update the code to test ESInstanceDetails
      //var instance = new AwsCostExplorerService.ESInstanceDetails();
      //expect(instance).to.be.a(AwsCostExplorerService.ESInstanceDetails);
    });

    it('should have the property instanceClass (base name: "InstanceClass")', function() {
      // uncomment below and update the code to test the property instanceClass
      //var instance = new AwsCostExplorerService.ESInstanceDetails();
      //expect(instance).to.be();
    });

    it('should have the property instanceSize (base name: "InstanceSize")', function() {
      // uncomment below and update the code to test the property instanceSize
      //var instance = new AwsCostExplorerService.ESInstanceDetails();
      //expect(instance).to.be();
    });

    it('should have the property region (base name: "Region")', function() {
      // uncomment below and update the code to test the property region
      //var instance = new AwsCostExplorerService.ESInstanceDetails();
      //expect(instance).to.be();
    });

    it('should have the property currentGeneration (base name: "CurrentGeneration")', function() {
      // uncomment below and update the code to test the property currentGeneration
      //var instance = new AwsCostExplorerService.ESInstanceDetails();
      //expect(instance).to.be();
    });

    it('should have the property sizeFlexEligible (base name: "SizeFlexEligible")', function() {
      // uncomment below and update the code to test the property sizeFlexEligible
      //var instance = new AwsCostExplorerService.ESInstanceDetails();
      //expect(instance).to.be();
    });

  });

}));
