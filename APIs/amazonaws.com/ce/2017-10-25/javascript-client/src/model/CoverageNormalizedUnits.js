/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CoverageNormalizedUnits model module.
 * @module model/CoverageNormalizedUnits
 * @version 2017-10-25
 */
class CoverageNormalizedUnits {
    /**
     * Constructs a new <code>CoverageNormalizedUnits</code>.
     * &lt;p&gt;The amount of instance usage, in normalized units. You can use normalized units to see your EC2 usage for multiple sizes of instances in a uniform way. For example, suppose that you run an xlarge instance and a 2xlarge instance. If you run both instances for the same amount of time, the 2xlarge instance uses twice as much of your reservation as the xlarge instance, even though both instances show only one instance-hour. When you use normalized units instead of instance-hours, the xlarge instance used 8 normalized units, and the 2xlarge instance used 16 normalized units.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html\&quot;&gt;Modifying Reserved Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt;
     * @alias module:model/CoverageNormalizedUnits
     */
    constructor() { 
        
        CoverageNormalizedUnits.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CoverageNormalizedUnits</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CoverageNormalizedUnits} obj Optional instance to populate.
     * @return {module:model/CoverageNormalizedUnits} The populated <code>CoverageNormalizedUnits</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CoverageNormalizedUnits();

            if (data.hasOwnProperty('OnDemandNormalizedUnits')) {
                obj['OnDemandNormalizedUnits'] = ApiClient.convertToType(data['OnDemandNormalizedUnits'], 'String');
            }
            if (data.hasOwnProperty('ReservedNormalizedUnits')) {
                obj['ReservedNormalizedUnits'] = ApiClient.convertToType(data['ReservedNormalizedUnits'], 'String');
            }
            if (data.hasOwnProperty('TotalRunningNormalizedUnits')) {
                obj['TotalRunningNormalizedUnits'] = ApiClient.convertToType(data['TotalRunningNormalizedUnits'], 'String');
            }
            if (data.hasOwnProperty('CoverageNormalizedUnitsPercentage')) {
                obj['CoverageNormalizedUnitsPercentage'] = ApiClient.convertToType(data['CoverageNormalizedUnitsPercentage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CoverageNormalizedUnits</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CoverageNormalizedUnits</code>.
     */
    static validateJSON(data) {
        // validate the optional field `OnDemandNormalizedUnits`
        if (data['OnDemandNormalizedUnits']) { // data not null
          String.validateJSON(data['OnDemandNormalizedUnits']);
        }
        // validate the optional field `ReservedNormalizedUnits`
        if (data['ReservedNormalizedUnits']) { // data not null
          String.validateJSON(data['ReservedNormalizedUnits']);
        }
        // validate the optional field `TotalRunningNormalizedUnits`
        if (data['TotalRunningNormalizedUnits']) { // data not null
          String.validateJSON(data['TotalRunningNormalizedUnits']);
        }
        // validate the optional field `CoverageNormalizedUnitsPercentage`
        if (data['CoverageNormalizedUnitsPercentage']) { // data not null
          String.validateJSON(data['CoverageNormalizedUnitsPercentage']);
        }

        return true;
    }


}



/**
 * @member {String} OnDemandNormalizedUnits
 */
CoverageNormalizedUnits.prototype['OnDemandNormalizedUnits'] = undefined;

/**
 * @member {String} ReservedNormalizedUnits
 */
CoverageNormalizedUnits.prototype['ReservedNormalizedUnits'] = undefined;

/**
 * @member {String} TotalRunningNormalizedUnits
 */
CoverageNormalizedUnits.prototype['TotalRunningNormalizedUnits'] = undefined;

/**
 * @member {String} CoverageNormalizedUnitsPercentage
 */
CoverageNormalizedUnits.prototype['CoverageNormalizedUnitsPercentage'] = undefined;






export default CoverageNormalizedUnits;

