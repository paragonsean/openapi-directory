/**
 * AWS Cost Explorer Service
 * <p>You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment. </p> <p>Service Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p> <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>For information about the costs that are associated with the Cost Explorer API, see <a href=\"http://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExpressionCostCategories from './ExpressionCostCategories';
import ExpressionDimensions from './ExpressionDimensions';
import ExpressionNot from './ExpressionNot';
import ExpressionTags from './ExpressionTags';

/**
 * The Expression model module.
 * @module model/Expression
 * @version 2017-10-25
 */
class Expression {
    /**
     * Constructs a new <code>Expression</code>.
     * &lt;p&gt;Use &lt;code&gt;Expression&lt;/code&gt; to filter in various Cost Explorer APIs.&lt;/p&gt; &lt;p&gt;Not all &lt;code&gt;Expression&lt;/code&gt; types are supported in each API. Refer to the documentation for each specific API to see what is supported.&lt;/p&gt; &lt;p&gt;There are two patterns:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Simple dimension values.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;There are three types of simple dimension values: &lt;code&gt;CostCategories&lt;/code&gt;, &lt;code&gt;Tags&lt;/code&gt;, and &lt;code&gt;Dimensions&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Specify the &lt;code&gt;CostCategories&lt;/code&gt; field to define a filter that acts on Cost Categories.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Specify the &lt;code&gt;Tags&lt;/code&gt; field to define a filter that acts on Cost Allocation Tags.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Specify the &lt;code&gt;Dimensions&lt;/code&gt; field to define a filter that acts on the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_DimensionValues.html\&quot;&gt; &lt;code&gt;DimensionValues&lt;/code&gt; &lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For each filter type, you can set the dimension name and values for the filters that you plan to use.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For example, you can filter for &lt;code&gt;REGION&#x3D;&#x3D;us-east-1 OR REGION&#x3D;&#x3D;us-west-1&lt;/code&gt;. For &lt;code&gt;GetRightsizingRecommendation&lt;/code&gt;, the Region is a full name (for example, &lt;code&gt;REGION&#x3D;&#x3D;US East (N. Virginia)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The corresponding &lt;code&gt;Expression&lt;/code&gt; for this example is as follows: &lt;code&gt;{ \&quot;Dimensions\&quot;: { \&quot;Key\&quot;: \&quot;REGION\&quot;, \&quot;Values\&quot;: [ \&quot;us-east-1\&quot;, \&quot;us-west-1\&quot; ] } }&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;As shown in the previous example, lists of dimension values are combined with &lt;code&gt;OR&lt;/code&gt; when applying the filter.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can also set different match options to further control how the filter behaves. Not all APIs support match options. Refer to the documentation for each specific API to see what is supported.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For example, you can filter for linked account names that start with \&quot;a\&quot;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The corresponding &lt;code&gt;Expression&lt;/code&gt; for this example is as follows: &lt;code&gt;{ \&quot;Dimensions\&quot;: { \&quot;Key\&quot;: \&quot;LINKED_ACCOUNT_NAME\&quot;, \&quot;MatchOptions\&quot;: [ \&quot;STARTS_WITH\&quot; ], \&quot;Values\&quot;: [ \&quot;a\&quot; ] } }&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compound &lt;code&gt;Expression&lt;/code&gt; types with logical operations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can use multiple &lt;code&gt;Expression&lt;/code&gt; types and the logical operators &lt;code&gt;AND/OR/NOT&lt;/code&gt; to create a list of one or more &lt;code&gt;Expression&lt;/code&gt; objects. By doing this, you can filter by more advanced options.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For example, you can filter by &lt;code&gt;((REGION &#x3D;&#x3D; us-east-1 OR REGION &#x3D;&#x3D; us-west-1) OR (TAG.Type &#x3D;&#x3D; Type1)) AND (USAGE_TYPE !&#x3D; DataTransfer)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The corresponding &lt;code&gt;Expression&lt;/code&gt; for this example is as follows: &lt;code&gt;{ \&quot;And\&quot;: [ {\&quot;Or\&quot;: [ {\&quot;Dimensions\&quot;: { \&quot;Key\&quot;: \&quot;REGION\&quot;, \&quot;Values\&quot;: [ \&quot;us-east-1\&quot;, \&quot;us-west-1\&quot; ] }}, {\&quot;Tags\&quot;: { \&quot;Key\&quot;: \&quot;TagName\&quot;, \&quot;Values\&quot;: [\&quot;Value1\&quot;] } } ]}, {\&quot;Not\&quot;: {\&quot;Dimensions\&quot;: { \&quot;Key\&quot;: \&quot;USAGE_TYPE\&quot;, \&quot;Values\&quot;: [\&quot;DataTransfer\&quot;] }}} ] } &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Because each &lt;code&gt;Expression&lt;/code&gt; can have only one operator, the service returns an error if more than one is specified. The following example shows an &lt;code&gt;Expression&lt;/code&gt; object that creates an error: &lt;code&gt; { \&quot;And\&quot;: [ ... ], \&quot;Dimensions\&quot;: { \&quot;Key\&quot;: \&quot;USAGE_TYPE\&quot;, \&quot;Values\&quot;: [ \&quot;DataTransfer\&quot; ] } } &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The following is an example of the corresponding error message: &lt;code&gt;\&quot;Expression has more than one roots. Only one root operator is allowed for each expression: And, Or, Not, Dimensions, Tags, CostCategories\&quot;&lt;/code&gt; &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;For the &lt;code&gt;GetRightsizingRecommendation&lt;/code&gt; action, a combination of OR and NOT isn&#39;t supported. OR isn&#39;t supported between different dimensions, or dimensions and tags. NOT operators aren&#39;t supported. Dimensions are also limited to &lt;code&gt;LINKED_ACCOUNT&lt;/code&gt;, &lt;code&gt;REGION&lt;/code&gt;, or &lt;code&gt;RIGHTSIZING_TYPE&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For the &lt;code&gt;GetReservationPurchaseRecommendation&lt;/code&gt; action, only NOT is supported. AND and OR aren&#39;t supported. Dimensions are limited to &lt;code&gt;LINKED_ACCOUNT&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     * @alias module:model/Expression
     */
    constructor() { 
        
        Expression.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Expression</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Expression} obj Optional instance to populate.
     * @return {module:model/Expression} The populated <code>Expression</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Expression();

            if (data.hasOwnProperty('Or')) {
                obj['Or'] = ApiClient.convertToType(data['Or'], Array);
            }
            if (data.hasOwnProperty('And')) {
                obj['And'] = ApiClient.convertToType(data['And'], Array);
            }
            if (data.hasOwnProperty('Not')) {
                obj['Not'] = ExpressionNot.constructFromObject(data['Not']);
            }
            if (data.hasOwnProperty('Dimensions')) {
                obj['Dimensions'] = ExpressionDimensions.constructFromObject(data['Dimensions']);
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ExpressionTags.constructFromObject(data['Tags']);
            }
            if (data.hasOwnProperty('CostCategories')) {
                obj['CostCategories'] = ExpressionCostCategories.constructFromObject(data['CostCategories']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Expression</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Expression</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Or`
        if (data['Or']) { // data not null
          Array.validateJSON(data['Or']);
        }
        // validate the optional field `And`
        if (data['And']) { // data not null
          Array.validateJSON(data['And']);
        }
        // validate the optional field `Not`
        if (data['Not']) { // data not null
          ExpressionNot.validateJSON(data['Not']);
        }
        // validate the optional field `Dimensions`
        if (data['Dimensions']) { // data not null
          ExpressionDimensions.validateJSON(data['Dimensions']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          ExpressionTags.validateJSON(data['Tags']);
        }
        // validate the optional field `CostCategories`
        if (data['CostCategories']) { // data not null
          ExpressionCostCategories.validateJSON(data['CostCategories']);
        }

        return true;
    }


}



/**
 * @member {Array} Or
 */
Expression.prototype['Or'] = undefined;

/**
 * @member {Array} And
 */
Expression.prototype['And'] = undefined;

/**
 * @member {module:model/ExpressionNot} Not
 */
Expression.prototype['Not'] = undefined;

/**
 * @member {module:model/ExpressionDimensions} Dimensions
 */
Expression.prototype['Dimensions'] = undefined;

/**
 * @member {module:model/ExpressionTags} Tags
 */
Expression.prototype['Tags'] = undefined;

/**
 * @member {module:model/ExpressionCostCategories} CostCategories
 */
Expression.prototype['CostCategories'] = undefined;






export default Expression;

