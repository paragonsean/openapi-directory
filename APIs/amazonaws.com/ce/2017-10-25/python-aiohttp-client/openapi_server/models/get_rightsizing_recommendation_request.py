# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expression import Expression
from openapi_server.models.get_rightsizing_recommendation_response_configuration import GetRightsizingRecommendationResponseConfiguration
from openapi_server import util


class GetRightsizingRecommendationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: Expression=None, configuration: GetRightsizingRecommendationResponseConfiguration=None, service: str=None, page_size: int=None, next_page_token: str=None):
        """GetRightsizingRecommendationRequest - a model defined in OpenAPI

        :param filter: The filter of this GetRightsizingRecommendationRequest.
        :param configuration: The configuration of this GetRightsizingRecommendationRequest.
        :param service: The service of this GetRightsizingRecommendationRequest.
        :param page_size: The page_size of this GetRightsizingRecommendationRequest.
        :param next_page_token: The next_page_token of this GetRightsizingRecommendationRequest.
        """
        self.openapi_types = {
            'filter': Expression,
            'configuration': GetRightsizingRecommendationResponseConfiguration,
            'service': str,
            'page_size': int,
            'next_page_token': str
        }

        self.attribute_map = {
            'filter': 'Filter',
            'configuration': 'Configuration',
            'service': 'Service',
            'page_size': 'PageSize',
            'next_page_token': 'NextPageToken'
        }

        self._filter = filter
        self._configuration = configuration
        self._service = service
        self._page_size = page_size
        self._next_page_token = next_page_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRightsizingRecommendationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetRightsizingRecommendationRequest of this GetRightsizingRecommendationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this GetRightsizingRecommendationRequest.


        :return: The filter of this GetRightsizingRecommendationRequest.
        :rtype: Expression
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GetRightsizingRecommendationRequest.


        :param filter: The filter of this GetRightsizingRecommendationRequest.
        :type filter: Expression
        """

        self._filter = filter

    @property
    def configuration(self):
        """Gets the configuration of this GetRightsizingRecommendationRequest.


        :return: The configuration of this GetRightsizingRecommendationRequest.
        :rtype: GetRightsizingRecommendationResponseConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this GetRightsizingRecommendationRequest.


        :param configuration: The configuration of this GetRightsizingRecommendationRequest.
        :type configuration: GetRightsizingRecommendationResponseConfiguration
        """

        self._configuration = configuration

    @property
    def service(self):
        """Gets the service of this GetRightsizingRecommendationRequest.


        :return: The service of this GetRightsizingRecommendationRequest.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this GetRightsizingRecommendationRequest.


        :param service: The service of this GetRightsizingRecommendationRequest.
        :type service: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def page_size(self):
        """Gets the page_size of this GetRightsizingRecommendationRequest.


        :return: The page_size of this GetRightsizingRecommendationRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GetRightsizingRecommendationRequest.


        :param page_size: The page_size of this GetRightsizingRecommendationRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def next_page_token(self):
        """Gets the next_page_token of this GetRightsizingRecommendationRequest.


        :return: The next_page_token of this GetRightsizingRecommendationRequest.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this GetRightsizingRecommendationRequest.


        :param next_page_token: The next_page_token of this GetRightsizingRecommendationRequest.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token
