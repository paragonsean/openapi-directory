# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommendation_target import RecommendationTarget
from openapi_server import util


class RightsizingRecommendationConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recommendation_target: RecommendationTarget=None, benefits_considered: bool=None):
        """RightsizingRecommendationConfiguration - a model defined in OpenAPI

        :param recommendation_target: The recommendation_target of this RightsizingRecommendationConfiguration.
        :param benefits_considered: The benefits_considered of this RightsizingRecommendationConfiguration.
        """
        self.openapi_types = {
            'recommendation_target': RecommendationTarget,
            'benefits_considered': bool
        }

        self.attribute_map = {
            'recommendation_target': 'RecommendationTarget',
            'benefits_considered': 'BenefitsConsidered'
        }

        self._recommendation_target = recommendation_target
        self._benefits_considered = benefits_considered

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RightsizingRecommendationConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RightsizingRecommendationConfiguration of this RightsizingRecommendationConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recommendation_target(self):
        """Gets the recommendation_target of this RightsizingRecommendationConfiguration.


        :return: The recommendation_target of this RightsizingRecommendationConfiguration.
        :rtype: RecommendationTarget
        """
        return self._recommendation_target

    @recommendation_target.setter
    def recommendation_target(self, recommendation_target):
        """Sets the recommendation_target of this RightsizingRecommendationConfiguration.


        :param recommendation_target: The recommendation_target of this RightsizingRecommendationConfiguration.
        :type recommendation_target: RecommendationTarget
        """
        if recommendation_target is None:
            raise ValueError("Invalid value for `recommendation_target`, must not be `None`")

        self._recommendation_target = recommendation_target

    @property
    def benefits_considered(self):
        """Gets the benefits_considered of this RightsizingRecommendationConfiguration.


        :return: The benefits_considered of this RightsizingRecommendationConfiguration.
        :rtype: bool
        """
        return self._benefits_considered

    @benefits_considered.setter
    def benefits_considered(self, benefits_considered):
        """Sets the benefits_considered of this RightsizingRecommendationConfiguration.


        :param benefits_considered: The benefits_considered of this RightsizingRecommendationConfiguration.
        :type benefits_considered: bool
        """
        if benefits_considered is None:
            raise ValueError("Invalid value for `benefits_considered`, must not be `None`")

        self._benefits_considered = benefits_considered
