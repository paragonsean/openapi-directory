# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CostCategoryReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_category_arn: str=None, name: str=None, effective_start: str=None, effective_end: str=None, number_of_rules: int=None, processing_status: List=None, values: List=None, default_value: str=None):
        """CostCategoryReference - a model defined in OpenAPI

        :param cost_category_arn: The cost_category_arn of this CostCategoryReference.
        :param name: The name of this CostCategoryReference.
        :param effective_start: The effective_start of this CostCategoryReference.
        :param effective_end: The effective_end of this CostCategoryReference.
        :param number_of_rules: The number_of_rules of this CostCategoryReference.
        :param processing_status: The processing_status of this CostCategoryReference.
        :param values: The values of this CostCategoryReference.
        :param default_value: The default_value of this CostCategoryReference.
        """
        self.openapi_types = {
            'cost_category_arn': str,
            'name': str,
            'effective_start': str,
            'effective_end': str,
            'number_of_rules': int,
            'processing_status': List,
            'values': List,
            'default_value': str
        }

        self.attribute_map = {
            'cost_category_arn': 'CostCategoryArn',
            'name': 'Name',
            'effective_start': 'EffectiveStart',
            'effective_end': 'EffectiveEnd',
            'number_of_rules': 'NumberOfRules',
            'processing_status': 'ProcessingStatus',
            'values': 'Values',
            'default_value': 'DefaultValue'
        }

        self._cost_category_arn = cost_category_arn
        self._name = name
        self._effective_start = effective_start
        self._effective_end = effective_end
        self._number_of_rules = number_of_rules
        self._processing_status = processing_status
        self._values = values
        self._default_value = default_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostCategoryReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostCategoryReference of this CostCategoryReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_category_arn(self):
        """Gets the cost_category_arn of this CostCategoryReference.


        :return: The cost_category_arn of this CostCategoryReference.
        :rtype: str
        """
        return self._cost_category_arn

    @cost_category_arn.setter
    def cost_category_arn(self, cost_category_arn):
        """Sets the cost_category_arn of this CostCategoryReference.


        :param cost_category_arn: The cost_category_arn of this CostCategoryReference.
        :type cost_category_arn: str
        """

        self._cost_category_arn = cost_category_arn

    @property
    def name(self):
        """Gets the name of this CostCategoryReference.

        The unique name of the Cost Category.

        :return: The name of this CostCategoryReference.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CostCategoryReference.

        The unique name of the Cost Category.

        :param name: The name of this CostCategoryReference.
        :type name: str
        """
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def effective_start(self):
        """Gets the effective_start of this CostCategoryReference.


        :return: The effective_start of this CostCategoryReference.
        :rtype: str
        """
        return self._effective_start

    @effective_start.setter
    def effective_start(self, effective_start):
        """Sets the effective_start of this CostCategoryReference.


        :param effective_start: The effective_start of this CostCategoryReference.
        :type effective_start: str
        """

        self._effective_start = effective_start

    @property
    def effective_end(self):
        """Gets the effective_end of this CostCategoryReference.


        :return: The effective_end of this CostCategoryReference.
        :rtype: str
        """
        return self._effective_end

    @effective_end.setter
    def effective_end(self, effective_end):
        """Sets the effective_end of this CostCategoryReference.


        :param effective_end: The effective_end of this CostCategoryReference.
        :type effective_end: str
        """

        self._effective_end = effective_end

    @property
    def number_of_rules(self):
        """Gets the number_of_rules of this CostCategoryReference.


        :return: The number_of_rules of this CostCategoryReference.
        :rtype: int
        """
        return self._number_of_rules

    @number_of_rules.setter
    def number_of_rules(self, number_of_rules):
        """Sets the number_of_rules of this CostCategoryReference.


        :param number_of_rules: The number_of_rules of this CostCategoryReference.
        :type number_of_rules: int
        """

        self._number_of_rules = number_of_rules

    @property
    def processing_status(self):
        """Gets the processing_status of this CostCategoryReference.


        :return: The processing_status of this CostCategoryReference.
        :rtype: List
        """
        return self._processing_status

    @processing_status.setter
    def processing_status(self, processing_status):
        """Sets the processing_status of this CostCategoryReference.


        :param processing_status: The processing_status of this CostCategoryReference.
        :type processing_status: List
        """

        self._processing_status = processing_status

    @property
    def values(self):
        """Gets the values of this CostCategoryReference.


        :return: The values of this CostCategoryReference.
        :rtype: List
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this CostCategoryReference.


        :param values: The values of this CostCategoryReference.
        :type values: List
        """

        self._values = values

    @property
    def default_value(self):
        """Gets the default_value of this CostCategoryReference.

        The default value for the cost category.

        :return: The default_value of this CostCategoryReference.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this CostCategoryReference.

        The default value for the cost category.

        :param default_value: The default_value of this CostCategoryReference.
        :type default_value: str
        """
        if default_value is not None and len(default_value) > 50:
            raise ValueError("Invalid value for `default_value`, length must be less than or equal to `50`")
        if default_value is not None and len(default_value) < 1:
            raise ValueError("Invalid value for `default_value`, length must be greater than or equal to `1`")

        self._default_value = default_value
