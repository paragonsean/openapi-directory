# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expression_cost_categories import ExpressionCostCategories
from openapi_server.models.expression_dimensions import ExpressionDimensions
from openapi_server.models.expression_not import ExpressionNot
from openapi_server.models.expression_tags import ExpressionTags
from openapi_server import util


class GetCostAndUsageRequestFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _or: List=None, _and: List=None, _not: ExpressionNot=None, dimensions: ExpressionDimensions=None, tags: ExpressionTags=None, cost_categories: ExpressionCostCategories=None):
        """GetCostAndUsageRequestFilter - a model defined in OpenAPI

        :param _or: The _or of this GetCostAndUsageRequestFilter.
        :param _and: The _and of this GetCostAndUsageRequestFilter.
        :param _not: The _not of this GetCostAndUsageRequestFilter.
        :param dimensions: The dimensions of this GetCostAndUsageRequestFilter.
        :param tags: The tags of this GetCostAndUsageRequestFilter.
        :param cost_categories: The cost_categories of this GetCostAndUsageRequestFilter.
        """
        self.openapi_types = {
            '_or': List,
            '_and': List,
            '_not': ExpressionNot,
            'dimensions': ExpressionDimensions,
            'tags': ExpressionTags,
            'cost_categories': ExpressionCostCategories
        }

        self.attribute_map = {
            '_or': 'Or',
            '_and': 'And',
            '_not': 'Not',
            'dimensions': 'Dimensions',
            'tags': 'Tags',
            'cost_categories': 'CostCategories'
        }

        self.__or = _or
        self.__and = _and
        self.__not = _not
        self._dimensions = dimensions
        self._tags = tags
        self._cost_categories = cost_categories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCostAndUsageRequestFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCostAndUsageRequest_Filter of this GetCostAndUsageRequestFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _or(self):
        """Gets the _or of this GetCostAndUsageRequestFilter.


        :return: The _or of this GetCostAndUsageRequestFilter.
        :rtype: List
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this GetCostAndUsageRequestFilter.


        :param _or: The _or of this GetCostAndUsageRequestFilter.
        :type _or: List
        """

        self.__or = _or

    @property
    def _and(self):
        """Gets the _and of this GetCostAndUsageRequestFilter.


        :return: The _and of this GetCostAndUsageRequestFilter.
        :rtype: List
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this GetCostAndUsageRequestFilter.


        :param _and: The _and of this GetCostAndUsageRequestFilter.
        :type _and: List
        """

        self.__and = _and

    @property
    def _not(self):
        """Gets the _not of this GetCostAndUsageRequestFilter.


        :return: The _not of this GetCostAndUsageRequestFilter.
        :rtype: ExpressionNot
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this GetCostAndUsageRequestFilter.


        :param _not: The _not of this GetCostAndUsageRequestFilter.
        :type _not: ExpressionNot
        """

        self.__not = _not

    @property
    def dimensions(self):
        """Gets the dimensions of this GetCostAndUsageRequestFilter.


        :return: The dimensions of this GetCostAndUsageRequestFilter.
        :rtype: ExpressionDimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this GetCostAndUsageRequestFilter.


        :param dimensions: The dimensions of this GetCostAndUsageRequestFilter.
        :type dimensions: ExpressionDimensions
        """

        self._dimensions = dimensions

    @property
    def tags(self):
        """Gets the tags of this GetCostAndUsageRequestFilter.


        :return: The tags of this GetCostAndUsageRequestFilter.
        :rtype: ExpressionTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetCostAndUsageRequestFilter.


        :param tags: The tags of this GetCostAndUsageRequestFilter.
        :type tags: ExpressionTags
        """

        self._tags = tags

    @property
    def cost_categories(self):
        """Gets the cost_categories of this GetCostAndUsageRequestFilter.


        :return: The cost_categories of this GetCostAndUsageRequestFilter.
        :rtype: ExpressionCostCategories
        """
        return self._cost_categories

    @cost_categories.setter
    def cost_categories(self, cost_categories):
        """Sets the cost_categories of this GetCostAndUsageRequestFilter.


        :param cost_categories: The cost_categories of this GetCostAndUsageRequestFilter.
        :type cost_categories: ExpressionCostCategories
        """

        self._cost_categories = cost_categories
