# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_savings_plans_utilization_response_total import GetSavingsPlansUtilizationResponseTotal
from openapi_server import util


class GetSavingsPlansUtilizationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, savings_plans_utilizations_by_time: List=None, total: GetSavingsPlansUtilizationResponseTotal=None):
        """GetSavingsPlansUtilizationResponse - a model defined in OpenAPI

        :param savings_plans_utilizations_by_time: The savings_plans_utilizations_by_time of this GetSavingsPlansUtilizationResponse.
        :param total: The total of this GetSavingsPlansUtilizationResponse.
        """
        self.openapi_types = {
            'savings_plans_utilizations_by_time': List,
            'total': GetSavingsPlansUtilizationResponseTotal
        }

        self.attribute_map = {
            'savings_plans_utilizations_by_time': 'SavingsPlansUtilizationsByTime',
            'total': 'Total'
        }

        self._savings_plans_utilizations_by_time = savings_plans_utilizations_by_time
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSavingsPlansUtilizationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSavingsPlansUtilizationResponse of this GetSavingsPlansUtilizationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def savings_plans_utilizations_by_time(self):
        """Gets the savings_plans_utilizations_by_time of this GetSavingsPlansUtilizationResponse.


        :return: The savings_plans_utilizations_by_time of this GetSavingsPlansUtilizationResponse.
        :rtype: List
        """
        return self._savings_plans_utilizations_by_time

    @savings_plans_utilizations_by_time.setter
    def savings_plans_utilizations_by_time(self, savings_plans_utilizations_by_time):
        """Sets the savings_plans_utilizations_by_time of this GetSavingsPlansUtilizationResponse.


        :param savings_plans_utilizations_by_time: The savings_plans_utilizations_by_time of this GetSavingsPlansUtilizationResponse.
        :type savings_plans_utilizations_by_time: List
        """

        self._savings_plans_utilizations_by_time = savings_plans_utilizations_by_time

    @property
    def total(self):
        """Gets the total of this GetSavingsPlansUtilizationResponse.


        :return: The total of this GetSavingsPlansUtilizationResponse.
        :rtype: GetSavingsPlansUtilizationResponseTotal
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GetSavingsPlansUtilizationResponse.


        :param total: The total of this GetSavingsPlansUtilizationResponse.
        :type total: GetSavingsPlansUtilizationResponseTotal
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
