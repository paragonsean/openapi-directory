# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EC2ResourceDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hourly_on_demand_rate: str=None, instance_type: str=None, platform: str=None, region: str=None, sku: str=None, memory: str=None, network_performance: str=None, storage: str=None, vcpu: str=None):
        """EC2ResourceDetails - a model defined in OpenAPI

        :param hourly_on_demand_rate: The hourly_on_demand_rate of this EC2ResourceDetails.
        :param instance_type: The instance_type of this EC2ResourceDetails.
        :param platform: The platform of this EC2ResourceDetails.
        :param region: The region of this EC2ResourceDetails.
        :param sku: The sku of this EC2ResourceDetails.
        :param memory: The memory of this EC2ResourceDetails.
        :param network_performance: The network_performance of this EC2ResourceDetails.
        :param storage: The storage of this EC2ResourceDetails.
        :param vcpu: The vcpu of this EC2ResourceDetails.
        """
        self.openapi_types = {
            'hourly_on_demand_rate': str,
            'instance_type': str,
            'platform': str,
            'region': str,
            'sku': str,
            'memory': str,
            'network_performance': str,
            'storage': str,
            'vcpu': str
        }

        self.attribute_map = {
            'hourly_on_demand_rate': 'HourlyOnDemandRate',
            'instance_type': 'InstanceType',
            'platform': 'Platform',
            'region': 'Region',
            'sku': 'Sku',
            'memory': 'Memory',
            'network_performance': 'NetworkPerformance',
            'storage': 'Storage',
            'vcpu': 'Vcpu'
        }

        self._hourly_on_demand_rate = hourly_on_demand_rate
        self._instance_type = instance_type
        self._platform = platform
        self._region = region
        self._sku = sku
        self._memory = memory
        self._network_performance = network_performance
        self._storage = storage
        self._vcpu = vcpu

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EC2ResourceDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EC2ResourceDetails of this EC2ResourceDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hourly_on_demand_rate(self):
        """Gets the hourly_on_demand_rate of this EC2ResourceDetails.


        :return: The hourly_on_demand_rate of this EC2ResourceDetails.
        :rtype: str
        """
        return self._hourly_on_demand_rate

    @hourly_on_demand_rate.setter
    def hourly_on_demand_rate(self, hourly_on_demand_rate):
        """Sets the hourly_on_demand_rate of this EC2ResourceDetails.


        :param hourly_on_demand_rate: The hourly_on_demand_rate of this EC2ResourceDetails.
        :type hourly_on_demand_rate: str
        """

        self._hourly_on_demand_rate = hourly_on_demand_rate

    @property
    def instance_type(self):
        """Gets the instance_type of this EC2ResourceDetails.


        :return: The instance_type of this EC2ResourceDetails.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this EC2ResourceDetails.


        :param instance_type: The instance_type of this EC2ResourceDetails.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def platform(self):
        """Gets the platform of this EC2ResourceDetails.


        :return: The platform of this EC2ResourceDetails.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this EC2ResourceDetails.


        :param platform: The platform of this EC2ResourceDetails.
        :type platform: str
        """

        self._platform = platform

    @property
    def region(self):
        """Gets the region of this EC2ResourceDetails.


        :return: The region of this EC2ResourceDetails.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this EC2ResourceDetails.


        :param region: The region of this EC2ResourceDetails.
        :type region: str
        """

        self._region = region

    @property
    def sku(self):
        """Gets the sku of this EC2ResourceDetails.


        :return: The sku of this EC2ResourceDetails.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this EC2ResourceDetails.


        :param sku: The sku of this EC2ResourceDetails.
        :type sku: str
        """

        self._sku = sku

    @property
    def memory(self):
        """Gets the memory of this EC2ResourceDetails.


        :return: The memory of this EC2ResourceDetails.
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this EC2ResourceDetails.


        :param memory: The memory of this EC2ResourceDetails.
        :type memory: str
        """

        self._memory = memory

    @property
    def network_performance(self):
        """Gets the network_performance of this EC2ResourceDetails.


        :return: The network_performance of this EC2ResourceDetails.
        :rtype: str
        """
        return self._network_performance

    @network_performance.setter
    def network_performance(self, network_performance):
        """Sets the network_performance of this EC2ResourceDetails.


        :param network_performance: The network_performance of this EC2ResourceDetails.
        :type network_performance: str
        """

        self._network_performance = network_performance

    @property
    def storage(self):
        """Gets the storage of this EC2ResourceDetails.


        :return: The storage of this EC2ResourceDetails.
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this EC2ResourceDetails.


        :param storage: The storage of this EC2ResourceDetails.
        :type storage: str
        """

        self._storage = storage

    @property
    def vcpu(self):
        """Gets the vcpu of this EC2ResourceDetails.


        :return: The vcpu of this EC2ResourceDetails.
        :rtype: str
        """
        return self._vcpu

    @vcpu.setter
    def vcpu(self, vcpu):
        """Sets the vcpu of this EC2ResourceDetails.


        :param vcpu: The vcpu of this EC2ResourceDetails.
        :type vcpu: str
        """

        self._vcpu = vcpu
