# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstanceDetailsEC2InstanceDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, family: str=None, instance_type: str=None, region: str=None, availability_zone: str=None, platform: str=None, tenancy: str=None, current_generation: bool=None, size_flex_eligible: bool=None):
        """InstanceDetailsEC2InstanceDetails - a model defined in OpenAPI

        :param family: The family of this InstanceDetailsEC2InstanceDetails.
        :param instance_type: The instance_type of this InstanceDetailsEC2InstanceDetails.
        :param region: The region of this InstanceDetailsEC2InstanceDetails.
        :param availability_zone: The availability_zone of this InstanceDetailsEC2InstanceDetails.
        :param platform: The platform of this InstanceDetailsEC2InstanceDetails.
        :param tenancy: The tenancy of this InstanceDetailsEC2InstanceDetails.
        :param current_generation: The current_generation of this InstanceDetailsEC2InstanceDetails.
        :param size_flex_eligible: The size_flex_eligible of this InstanceDetailsEC2InstanceDetails.
        """
        self.openapi_types = {
            'family': str,
            'instance_type': str,
            'region': str,
            'availability_zone': str,
            'platform': str,
            'tenancy': str,
            'current_generation': bool,
            'size_flex_eligible': bool
        }

        self.attribute_map = {
            'family': 'Family',
            'instance_type': 'InstanceType',
            'region': 'Region',
            'availability_zone': 'AvailabilityZone',
            'platform': 'Platform',
            'tenancy': 'Tenancy',
            'current_generation': 'CurrentGeneration',
            'size_flex_eligible': 'SizeFlexEligible'
        }

        self._family = family
        self._instance_type = instance_type
        self._region = region
        self._availability_zone = availability_zone
        self._platform = platform
        self._tenancy = tenancy
        self._current_generation = current_generation
        self._size_flex_eligible = size_flex_eligible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceDetailsEC2InstanceDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceDetails_EC2InstanceDetails of this InstanceDetailsEC2InstanceDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def family(self):
        """Gets the family of this InstanceDetailsEC2InstanceDetails.


        :return: The family of this InstanceDetailsEC2InstanceDetails.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this InstanceDetailsEC2InstanceDetails.


        :param family: The family of this InstanceDetailsEC2InstanceDetails.
        :type family: str
        """

        self._family = family

    @property
    def instance_type(self):
        """Gets the instance_type of this InstanceDetailsEC2InstanceDetails.


        :return: The instance_type of this InstanceDetailsEC2InstanceDetails.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this InstanceDetailsEC2InstanceDetails.


        :param instance_type: The instance_type of this InstanceDetailsEC2InstanceDetails.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def region(self):
        """Gets the region of this InstanceDetailsEC2InstanceDetails.


        :return: The region of this InstanceDetailsEC2InstanceDetails.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this InstanceDetailsEC2InstanceDetails.


        :param region: The region of this InstanceDetailsEC2InstanceDetails.
        :type region: str
        """

        self._region = region

    @property
    def availability_zone(self):
        """Gets the availability_zone of this InstanceDetailsEC2InstanceDetails.


        :return: The availability_zone of this InstanceDetailsEC2InstanceDetails.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this InstanceDetailsEC2InstanceDetails.


        :param availability_zone: The availability_zone of this InstanceDetailsEC2InstanceDetails.
        :type availability_zone: str
        """

        self._availability_zone = availability_zone

    @property
    def platform(self):
        """Gets the platform of this InstanceDetailsEC2InstanceDetails.


        :return: The platform of this InstanceDetailsEC2InstanceDetails.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this InstanceDetailsEC2InstanceDetails.


        :param platform: The platform of this InstanceDetailsEC2InstanceDetails.
        :type platform: str
        """

        self._platform = platform

    @property
    def tenancy(self):
        """Gets the tenancy of this InstanceDetailsEC2InstanceDetails.


        :return: The tenancy of this InstanceDetailsEC2InstanceDetails.
        :rtype: str
        """
        return self._tenancy

    @tenancy.setter
    def tenancy(self, tenancy):
        """Sets the tenancy of this InstanceDetailsEC2InstanceDetails.


        :param tenancy: The tenancy of this InstanceDetailsEC2InstanceDetails.
        :type tenancy: str
        """

        self._tenancy = tenancy

    @property
    def current_generation(self):
        """Gets the current_generation of this InstanceDetailsEC2InstanceDetails.


        :return: The current_generation of this InstanceDetailsEC2InstanceDetails.
        :rtype: bool
        """
        return self._current_generation

    @current_generation.setter
    def current_generation(self, current_generation):
        """Sets the current_generation of this InstanceDetailsEC2InstanceDetails.


        :param current_generation: The current_generation of this InstanceDetailsEC2InstanceDetails.
        :type current_generation: bool
        """

        self._current_generation = current_generation

    @property
    def size_flex_eligible(self):
        """Gets the size_flex_eligible of this InstanceDetailsEC2InstanceDetails.


        :return: The size_flex_eligible of this InstanceDetailsEC2InstanceDetails.
        :rtype: bool
        """
        return self._size_flex_eligible

    @size_flex_eligible.setter
    def size_flex_eligible(self, size_flex_eligible):
        """Sets the size_flex_eligible of this InstanceDetailsEC2InstanceDetails.


        :param size_flex_eligible: The size_flex_eligible of this InstanceDetailsEC2InstanceDetails.
        :type size_flex_eligible: bool
        """

        self._size_flex_eligible = size_flex_eligible
