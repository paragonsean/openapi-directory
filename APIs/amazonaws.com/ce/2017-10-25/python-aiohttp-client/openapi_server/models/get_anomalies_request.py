# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.anomaly_feedback_type import AnomalyFeedbackType
from openapi_server.models.get_anomalies_request_date_interval import GetAnomaliesRequestDateInterval
from openapi_server.models.get_anomalies_request_total_impact import GetAnomaliesRequestTotalImpact
from openapi_server import util


class GetAnomaliesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, monitor_arn: str=None, date_interval: GetAnomaliesRequestDateInterval=None, feedback: AnomalyFeedbackType=None, total_impact: GetAnomaliesRequestTotalImpact=None, next_page_token: str=None, max_results: int=None):
        """GetAnomaliesRequest - a model defined in OpenAPI

        :param monitor_arn: The monitor_arn of this GetAnomaliesRequest.
        :param date_interval: The date_interval of this GetAnomaliesRequest.
        :param feedback: The feedback of this GetAnomaliesRequest.
        :param total_impact: The total_impact of this GetAnomaliesRequest.
        :param next_page_token: The next_page_token of this GetAnomaliesRequest.
        :param max_results: The max_results of this GetAnomaliesRequest.
        """
        self.openapi_types = {
            'monitor_arn': str,
            'date_interval': GetAnomaliesRequestDateInterval,
            'feedback': AnomalyFeedbackType,
            'total_impact': GetAnomaliesRequestTotalImpact,
            'next_page_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'monitor_arn': 'MonitorArn',
            'date_interval': 'DateInterval',
            'feedback': 'Feedback',
            'total_impact': 'TotalImpact',
            'next_page_token': 'NextPageToken',
            'max_results': 'MaxResults'
        }

        self._monitor_arn = monitor_arn
        self._date_interval = date_interval
        self._feedback = feedback
        self._total_impact = total_impact
        self._next_page_token = next_page_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAnomaliesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetAnomaliesRequest of this GetAnomaliesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def monitor_arn(self):
        """Gets the monitor_arn of this GetAnomaliesRequest.


        :return: The monitor_arn of this GetAnomaliesRequest.
        :rtype: str
        """
        return self._monitor_arn

    @monitor_arn.setter
    def monitor_arn(self, monitor_arn):
        """Sets the monitor_arn of this GetAnomaliesRequest.


        :param monitor_arn: The monitor_arn of this GetAnomaliesRequest.
        :type monitor_arn: str
        """

        self._monitor_arn = monitor_arn

    @property
    def date_interval(self):
        """Gets the date_interval of this GetAnomaliesRequest.


        :return: The date_interval of this GetAnomaliesRequest.
        :rtype: GetAnomaliesRequestDateInterval
        """
        return self._date_interval

    @date_interval.setter
    def date_interval(self, date_interval):
        """Sets the date_interval of this GetAnomaliesRequest.


        :param date_interval: The date_interval of this GetAnomaliesRequest.
        :type date_interval: GetAnomaliesRequestDateInterval
        """
        if date_interval is None:
            raise ValueError("Invalid value for `date_interval`, must not be `None`")

        self._date_interval = date_interval

    @property
    def feedback(self):
        """Gets the feedback of this GetAnomaliesRequest.


        :return: The feedback of this GetAnomaliesRequest.
        :rtype: AnomalyFeedbackType
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this GetAnomaliesRequest.


        :param feedback: The feedback of this GetAnomaliesRequest.
        :type feedback: AnomalyFeedbackType
        """

        self._feedback = feedback

    @property
    def total_impact(self):
        """Gets the total_impact of this GetAnomaliesRequest.


        :return: The total_impact of this GetAnomaliesRequest.
        :rtype: GetAnomaliesRequestTotalImpact
        """
        return self._total_impact

    @total_impact.setter
    def total_impact(self, total_impact):
        """Sets the total_impact of this GetAnomaliesRequest.


        :param total_impact: The total_impact of this GetAnomaliesRequest.
        :type total_impact: GetAnomaliesRequestTotalImpact
        """

        self._total_impact = total_impact

    @property
    def next_page_token(self):
        """Gets the next_page_token of this GetAnomaliesRequest.


        :return: The next_page_token of this GetAnomaliesRequest.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this GetAnomaliesRequest.


        :param next_page_token: The next_page_token of this GetAnomaliesRequest.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def max_results(self):
        """Gets the max_results of this GetAnomaliesRequest.


        :return: The max_results of this GetAnomaliesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetAnomaliesRequest.


        :param max_results: The max_results of this GetAnomaliesRequest.
        :type max_results: int
        """

        self._max_results = max_results
