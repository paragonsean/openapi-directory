# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UntagResourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_arn: str=None, resource_tag_keys: List=None):
        """UntagResourceRequest - a model defined in OpenAPI

        :param resource_arn: The resource_arn of this UntagResourceRequest.
        :param resource_tag_keys: The resource_tag_keys of this UntagResourceRequest.
        """
        self.openapi_types = {
            'resource_arn': str,
            'resource_tag_keys': List
        }

        self.attribute_map = {
            'resource_arn': 'ResourceArn',
            'resource_tag_keys': 'ResourceTagKeys'
        }

        self._resource_arn = resource_arn
        self._resource_tag_keys = resource_tag_keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UntagResourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UntagResourceRequest of this UntagResourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_arn(self):
        """Gets the resource_arn of this UntagResourceRequest.


        :return: The resource_arn of this UntagResourceRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this UntagResourceRequest.


        :param resource_arn: The resource_arn of this UntagResourceRequest.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")

        self._resource_arn = resource_arn

    @property
    def resource_tag_keys(self):
        """Gets the resource_tag_keys of this UntagResourceRequest.


        :return: The resource_tag_keys of this UntagResourceRequest.
        :rtype: List
        """
        return self._resource_tag_keys

    @resource_tag_keys.setter
    def resource_tag_keys(self, resource_tag_keys):
        """Sets the resource_tag_keys of this UntagResourceRequest.


        :param resource_tag_keys: The resource_tag_keys of this UntagResourceRequest.
        :type resource_tag_keys: List
        """
        if resource_tag_keys is None:
            raise ValueError("Invalid value for `resource_tag_keys`, must not be `None`")

        self._resource_tag_keys = resource_tag_keys
