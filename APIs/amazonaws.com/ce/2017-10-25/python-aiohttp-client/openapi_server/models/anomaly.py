# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.anomaly_anomaly_score import AnomalyAnomalyScore
from openapi_server.models.anomaly_feedback_type import AnomalyFeedbackType
from openapi_server.models.anomaly_impact import AnomalyImpact
from openapi_server import util


class Anomaly(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anomaly_id: str=None, anomaly_start_date: str=None, anomaly_end_date: str=None, dimension_value: str=None, root_causes: List=None, anomaly_score: AnomalyAnomalyScore=None, impact: AnomalyImpact=None, monitor_arn: str=None, feedback: AnomalyFeedbackType=None):
        """Anomaly - a model defined in OpenAPI

        :param anomaly_id: The anomaly_id of this Anomaly.
        :param anomaly_start_date: The anomaly_start_date of this Anomaly.
        :param anomaly_end_date: The anomaly_end_date of this Anomaly.
        :param dimension_value: The dimension_value of this Anomaly.
        :param root_causes: The root_causes of this Anomaly.
        :param anomaly_score: The anomaly_score of this Anomaly.
        :param impact: The impact of this Anomaly.
        :param monitor_arn: The monitor_arn of this Anomaly.
        :param feedback: The feedback of this Anomaly.
        """
        self.openapi_types = {
            'anomaly_id': str,
            'anomaly_start_date': str,
            'anomaly_end_date': str,
            'dimension_value': str,
            'root_causes': List,
            'anomaly_score': AnomalyAnomalyScore,
            'impact': AnomalyImpact,
            'monitor_arn': str,
            'feedback': AnomalyFeedbackType
        }

        self.attribute_map = {
            'anomaly_id': 'AnomalyId',
            'anomaly_start_date': 'AnomalyStartDate',
            'anomaly_end_date': 'AnomalyEndDate',
            'dimension_value': 'DimensionValue',
            'root_causes': 'RootCauses',
            'anomaly_score': 'AnomalyScore',
            'impact': 'Impact',
            'monitor_arn': 'MonitorArn',
            'feedback': 'Feedback'
        }

        self._anomaly_id = anomaly_id
        self._anomaly_start_date = anomaly_start_date
        self._anomaly_end_date = anomaly_end_date
        self._dimension_value = dimension_value
        self._root_causes = root_causes
        self._anomaly_score = anomaly_score
        self._impact = impact
        self._monitor_arn = monitor_arn
        self._feedback = feedback

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Anomaly':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Anomaly of this Anomaly.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anomaly_id(self):
        """Gets the anomaly_id of this Anomaly.


        :return: The anomaly_id of this Anomaly.
        :rtype: str
        """
        return self._anomaly_id

    @anomaly_id.setter
    def anomaly_id(self, anomaly_id):
        """Sets the anomaly_id of this Anomaly.


        :param anomaly_id: The anomaly_id of this Anomaly.
        :type anomaly_id: str
        """
        if anomaly_id is None:
            raise ValueError("Invalid value for `anomaly_id`, must not be `None`")

        self._anomaly_id = anomaly_id

    @property
    def anomaly_start_date(self):
        """Gets the anomaly_start_date of this Anomaly.


        :return: The anomaly_start_date of this Anomaly.
        :rtype: str
        """
        return self._anomaly_start_date

    @anomaly_start_date.setter
    def anomaly_start_date(self, anomaly_start_date):
        """Sets the anomaly_start_date of this Anomaly.


        :param anomaly_start_date: The anomaly_start_date of this Anomaly.
        :type anomaly_start_date: str
        """

        self._anomaly_start_date = anomaly_start_date

    @property
    def anomaly_end_date(self):
        """Gets the anomaly_end_date of this Anomaly.


        :return: The anomaly_end_date of this Anomaly.
        :rtype: str
        """
        return self._anomaly_end_date

    @anomaly_end_date.setter
    def anomaly_end_date(self, anomaly_end_date):
        """Sets the anomaly_end_date of this Anomaly.


        :param anomaly_end_date: The anomaly_end_date of this Anomaly.
        :type anomaly_end_date: str
        """

        self._anomaly_end_date = anomaly_end_date

    @property
    def dimension_value(self):
        """Gets the dimension_value of this Anomaly.


        :return: The dimension_value of this Anomaly.
        :rtype: str
        """
        return self._dimension_value

    @dimension_value.setter
    def dimension_value(self, dimension_value):
        """Sets the dimension_value of this Anomaly.


        :param dimension_value: The dimension_value of this Anomaly.
        :type dimension_value: str
        """

        self._dimension_value = dimension_value

    @property
    def root_causes(self):
        """Gets the root_causes of this Anomaly.


        :return: The root_causes of this Anomaly.
        :rtype: List
        """
        return self._root_causes

    @root_causes.setter
    def root_causes(self, root_causes):
        """Sets the root_causes of this Anomaly.


        :param root_causes: The root_causes of this Anomaly.
        :type root_causes: List
        """

        self._root_causes = root_causes

    @property
    def anomaly_score(self):
        """Gets the anomaly_score of this Anomaly.


        :return: The anomaly_score of this Anomaly.
        :rtype: AnomalyAnomalyScore
        """
        return self._anomaly_score

    @anomaly_score.setter
    def anomaly_score(self, anomaly_score):
        """Sets the anomaly_score of this Anomaly.


        :param anomaly_score: The anomaly_score of this Anomaly.
        :type anomaly_score: AnomalyAnomalyScore
        """
        if anomaly_score is None:
            raise ValueError("Invalid value for `anomaly_score`, must not be `None`")

        self._anomaly_score = anomaly_score

    @property
    def impact(self):
        """Gets the impact of this Anomaly.


        :return: The impact of this Anomaly.
        :rtype: AnomalyImpact
        """
        return self._impact

    @impact.setter
    def impact(self, impact):
        """Sets the impact of this Anomaly.


        :param impact: The impact of this Anomaly.
        :type impact: AnomalyImpact
        """
        if impact is None:
            raise ValueError("Invalid value for `impact`, must not be `None`")

        self._impact = impact

    @property
    def monitor_arn(self):
        """Gets the monitor_arn of this Anomaly.


        :return: The monitor_arn of this Anomaly.
        :rtype: str
        """
        return self._monitor_arn

    @monitor_arn.setter
    def monitor_arn(self, monitor_arn):
        """Sets the monitor_arn of this Anomaly.


        :param monitor_arn: The monitor_arn of this Anomaly.
        :type monitor_arn: str
        """
        if monitor_arn is None:
            raise ValueError("Invalid value for `monitor_arn`, must not be `None`")

        self._monitor_arn = monitor_arn

    @property
    def feedback(self):
        """Gets the feedback of this Anomaly.


        :return: The feedback of this Anomaly.
        :rtype: AnomalyFeedbackType
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this Anomaly.


        :param feedback: The feedback of this Anomaly.
        :type feedback: AnomalyFeedbackType
        """

        self._feedback = feedback
