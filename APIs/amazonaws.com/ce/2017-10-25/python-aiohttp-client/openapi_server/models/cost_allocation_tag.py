# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cost_allocation_tag_status import CostAllocationTagStatus
from openapi_server.models.cost_allocation_tag_type import CostAllocationTagType
from openapi_server import util


class CostAllocationTag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tag_key: str=None, type: CostAllocationTagType=None, status: CostAllocationTagStatus=None):
        """CostAllocationTag - a model defined in OpenAPI

        :param tag_key: The tag_key of this CostAllocationTag.
        :param type: The type of this CostAllocationTag.
        :param status: The status of this CostAllocationTag.
        """
        self.openapi_types = {
            'tag_key': str,
            'type': CostAllocationTagType,
            'status': CostAllocationTagStatus
        }

        self.attribute_map = {
            'tag_key': 'TagKey',
            'type': 'Type',
            'status': 'Status'
        }

        self._tag_key = tag_key
        self._type = type
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostAllocationTag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostAllocationTag of this CostAllocationTag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tag_key(self):
        """Gets the tag_key of this CostAllocationTag.


        :return: The tag_key of this CostAllocationTag.
        :rtype: str
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this CostAllocationTag.


        :param tag_key: The tag_key of this CostAllocationTag.
        :type tag_key: str
        """
        if tag_key is None:
            raise ValueError("Invalid value for `tag_key`, must not be `None`")

        self._tag_key = tag_key

    @property
    def type(self):
        """Gets the type of this CostAllocationTag.


        :return: The type of this CostAllocationTag.
        :rtype: CostAllocationTagType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CostAllocationTag.


        :param type: The type of this CostAllocationTag.
        :type type: CostAllocationTagType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def status(self):
        """Gets the status of this CostAllocationTag.


        :return: The status of this CostAllocationTag.
        :rtype: CostAllocationTagStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CostAllocationTag.


        :param status: The status of this CostAllocationTag.
        :type status: CostAllocationTagStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
