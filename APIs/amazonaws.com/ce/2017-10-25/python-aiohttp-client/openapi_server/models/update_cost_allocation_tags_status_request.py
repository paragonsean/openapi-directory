# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateCostAllocationTagsStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_allocation_tags_status: List=None):
        """UpdateCostAllocationTagsStatusRequest - a model defined in OpenAPI

        :param cost_allocation_tags_status: The cost_allocation_tags_status of this UpdateCostAllocationTagsStatusRequest.
        """
        self.openapi_types = {
            'cost_allocation_tags_status': List
        }

        self.attribute_map = {
            'cost_allocation_tags_status': 'CostAllocationTagsStatus'
        }

        self._cost_allocation_tags_status = cost_allocation_tags_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateCostAllocationTagsStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCostAllocationTagsStatusRequest of this UpdateCostAllocationTagsStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_allocation_tags_status(self):
        """Gets the cost_allocation_tags_status of this UpdateCostAllocationTagsStatusRequest.


        :return: The cost_allocation_tags_status of this UpdateCostAllocationTagsStatusRequest.
        :rtype: List
        """
        return self._cost_allocation_tags_status

    @cost_allocation_tags_status.setter
    def cost_allocation_tags_status(self, cost_allocation_tags_status):
        """Sets the cost_allocation_tags_status of this UpdateCostAllocationTagsStatusRequest.


        :param cost_allocation_tags_status: The cost_allocation_tags_status of this UpdateCostAllocationTagsStatusRequest.
        :type cost_allocation_tags_status: List
        """
        if cost_allocation_tags_status is None:
            raise ValueError("Invalid value for `cost_allocation_tags_status`, must not be `None`")

        self._cost_allocation_tags_status = cost_allocation_tags_status
