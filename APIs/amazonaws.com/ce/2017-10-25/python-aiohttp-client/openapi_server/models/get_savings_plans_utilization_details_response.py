# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_interval import DateInterval
from openapi_server.models.get_savings_plans_utilization_details_response_total import GetSavingsPlansUtilizationDetailsResponseTotal
from openapi_server import util


class GetSavingsPlansUtilizationDetailsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, savings_plans_utilization_details: List=None, total: GetSavingsPlansUtilizationDetailsResponseTotal=None, time_period: DateInterval=None, next_token: str=None):
        """GetSavingsPlansUtilizationDetailsResponse - a model defined in OpenAPI

        :param savings_plans_utilization_details: The savings_plans_utilization_details of this GetSavingsPlansUtilizationDetailsResponse.
        :param total: The total of this GetSavingsPlansUtilizationDetailsResponse.
        :param time_period: The time_period of this GetSavingsPlansUtilizationDetailsResponse.
        :param next_token: The next_token of this GetSavingsPlansUtilizationDetailsResponse.
        """
        self.openapi_types = {
            'savings_plans_utilization_details': List,
            'total': GetSavingsPlansUtilizationDetailsResponseTotal,
            'time_period': DateInterval,
            'next_token': str
        }

        self.attribute_map = {
            'savings_plans_utilization_details': 'SavingsPlansUtilizationDetails',
            'total': 'Total',
            'time_period': 'TimePeriod',
            'next_token': 'NextToken'
        }

        self._savings_plans_utilization_details = savings_plans_utilization_details
        self._total = total
        self._time_period = time_period
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSavingsPlansUtilizationDetailsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSavingsPlansUtilizationDetailsResponse of this GetSavingsPlansUtilizationDetailsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def savings_plans_utilization_details(self):
        """Gets the savings_plans_utilization_details of this GetSavingsPlansUtilizationDetailsResponse.


        :return: The savings_plans_utilization_details of this GetSavingsPlansUtilizationDetailsResponse.
        :rtype: List
        """
        return self._savings_plans_utilization_details

    @savings_plans_utilization_details.setter
    def savings_plans_utilization_details(self, savings_plans_utilization_details):
        """Sets the savings_plans_utilization_details of this GetSavingsPlansUtilizationDetailsResponse.


        :param savings_plans_utilization_details: The savings_plans_utilization_details of this GetSavingsPlansUtilizationDetailsResponse.
        :type savings_plans_utilization_details: List
        """
        if savings_plans_utilization_details is None:
            raise ValueError("Invalid value for `savings_plans_utilization_details`, must not be `None`")

        self._savings_plans_utilization_details = savings_plans_utilization_details

    @property
    def total(self):
        """Gets the total of this GetSavingsPlansUtilizationDetailsResponse.


        :return: The total of this GetSavingsPlansUtilizationDetailsResponse.
        :rtype: GetSavingsPlansUtilizationDetailsResponseTotal
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GetSavingsPlansUtilizationDetailsResponse.


        :param total: The total of this GetSavingsPlansUtilizationDetailsResponse.
        :type total: GetSavingsPlansUtilizationDetailsResponseTotal
        """

        self._total = total

    @property
    def time_period(self):
        """Gets the time_period of this GetSavingsPlansUtilizationDetailsResponse.


        :return: The time_period of this GetSavingsPlansUtilizationDetailsResponse.
        :rtype: DateInterval
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this GetSavingsPlansUtilizationDetailsResponse.


        :param time_period: The time_period of this GetSavingsPlansUtilizationDetailsResponse.
        :type time_period: DateInterval
        """
        if time_period is None:
            raise ValueError("Invalid value for `time_period`, must not be `None`")

        self._time_period = time_period

    @property
    def next_token(self):
        """Gets the next_token of this GetSavingsPlansUtilizationDetailsResponse.


        :return: The next_token of this GetSavingsPlansUtilizationDetailsResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetSavingsPlansUtilizationDetailsResponse.


        :param next_token: The next_token of this GetSavingsPlansUtilizationDetailsResponse.
        :type next_token: str
        """

        self._next_token = next_token
