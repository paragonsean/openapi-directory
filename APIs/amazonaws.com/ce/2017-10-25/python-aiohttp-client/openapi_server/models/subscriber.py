# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscriber_status import SubscriberStatus
from openapi_server.models.subscriber_type import SubscriberType
from openapi_server import util


class Subscriber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, type: SubscriberType=None, status: SubscriberStatus=None):
        """Subscriber - a model defined in OpenAPI

        :param address: The address of this Subscriber.
        :param type: The type of this Subscriber.
        :param status: The status of this Subscriber.
        """
        self.openapi_types = {
            'address': str,
            'type': SubscriberType,
            'status': SubscriberStatus
        }

        self.attribute_map = {
            'address': 'Address',
            'type': 'Type',
            'status': 'Status'
        }

        self._address = address
        self._type = type
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscriber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscriber of this Subscriber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Subscriber.


        :return: The address of this Subscriber.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Subscriber.


        :param address: The address of this Subscriber.
        :type address: str
        """

        self._address = address

    @property
    def type(self):
        """Gets the type of this Subscriber.


        :return: The type of this Subscriber.
        :rtype: SubscriberType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Subscriber.


        :param type: The type of this Subscriber.
        :type type: SubscriberType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this Subscriber.


        :return: The status of this Subscriber.
        :rtype: SubscriberStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Subscriber.


        :param status: The status of this Subscriber.
        :type status: SubscriberStatus
        """

        self._status = status
