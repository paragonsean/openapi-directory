# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.generation_status import GenerationStatus
from openapi_server import util


class GenerationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recommendation_id: str=None, generation_status: GenerationStatus=None, generation_started_time: str=None, generation_completion_time: str=None, estimated_completion_time: str=None):
        """GenerationSummary - a model defined in OpenAPI

        :param recommendation_id: The recommendation_id of this GenerationSummary.
        :param generation_status: The generation_status of this GenerationSummary.
        :param generation_started_time: The generation_started_time of this GenerationSummary.
        :param generation_completion_time: The generation_completion_time of this GenerationSummary.
        :param estimated_completion_time: The estimated_completion_time of this GenerationSummary.
        """
        self.openapi_types = {
            'recommendation_id': str,
            'generation_status': GenerationStatus,
            'generation_started_time': str,
            'generation_completion_time': str,
            'estimated_completion_time': str
        }

        self.attribute_map = {
            'recommendation_id': 'RecommendationId',
            'generation_status': 'GenerationStatus',
            'generation_started_time': 'GenerationStartedTime',
            'generation_completion_time': 'GenerationCompletionTime',
            'estimated_completion_time': 'EstimatedCompletionTime'
        }

        self._recommendation_id = recommendation_id
        self._generation_status = generation_status
        self._generation_started_time = generation_started_time
        self._generation_completion_time = generation_completion_time
        self._estimated_completion_time = estimated_completion_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerationSummary of this GenerationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recommendation_id(self):
        """Gets the recommendation_id of this GenerationSummary.


        :return: The recommendation_id of this GenerationSummary.
        :rtype: str
        """
        return self._recommendation_id

    @recommendation_id.setter
    def recommendation_id(self, recommendation_id):
        """Sets the recommendation_id of this GenerationSummary.


        :param recommendation_id: The recommendation_id of this GenerationSummary.
        :type recommendation_id: str
        """

        self._recommendation_id = recommendation_id

    @property
    def generation_status(self):
        """Gets the generation_status of this GenerationSummary.


        :return: The generation_status of this GenerationSummary.
        :rtype: GenerationStatus
        """
        return self._generation_status

    @generation_status.setter
    def generation_status(self, generation_status):
        """Sets the generation_status of this GenerationSummary.


        :param generation_status: The generation_status of this GenerationSummary.
        :type generation_status: GenerationStatus
        """

        self._generation_status = generation_status

    @property
    def generation_started_time(self):
        """Gets the generation_started_time of this GenerationSummary.


        :return: The generation_started_time of this GenerationSummary.
        :rtype: str
        """
        return self._generation_started_time

    @generation_started_time.setter
    def generation_started_time(self, generation_started_time):
        """Sets the generation_started_time of this GenerationSummary.


        :param generation_started_time: The generation_started_time of this GenerationSummary.
        :type generation_started_time: str
        """

        self._generation_started_time = generation_started_time

    @property
    def generation_completion_time(self):
        """Gets the generation_completion_time of this GenerationSummary.


        :return: The generation_completion_time of this GenerationSummary.
        :rtype: str
        """
        return self._generation_completion_time

    @generation_completion_time.setter
    def generation_completion_time(self, generation_completion_time):
        """Sets the generation_completion_time of this GenerationSummary.


        :param generation_completion_time: The generation_completion_time of this GenerationSummary.
        :type generation_completion_time: str
        """

        self._generation_completion_time = generation_completion_time

    @property
    def estimated_completion_time(self):
        """Gets the estimated_completion_time of this GenerationSummary.


        :return: The estimated_completion_time of this GenerationSummary.
        :rtype: str
        """
        return self._estimated_completion_time

    @estimated_completion_time.setter
    def estimated_completion_time(self, estimated_completion_time):
        """Sets the estimated_completion_time of this GenerationSummary.


        :param estimated_completion_time: The estimated_completion_time of this GenerationSummary.
        :type estimated_completion_time: str
        """

        self._estimated_completion_time = estimated_completion_time
