# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_usage_forecast_request_filter import GetUsageForecastRequestFilter
from openapi_server.models.get_usage_forecast_request_time_period import GetUsageForecastRequestTimePeriod
from openapi_server.models.granularity import Granularity
from openapi_server.models.metric import Metric
from openapi_server import util


class GetUsageForecastRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, time_period: GetUsageForecastRequestTimePeriod=None, metric: Metric=None, granularity: Granularity=None, filter: GetUsageForecastRequestFilter=None, prediction_interval_level: int=None):
        """GetUsageForecastRequest - a model defined in OpenAPI

        :param time_period: The time_period of this GetUsageForecastRequest.
        :param metric: The metric of this GetUsageForecastRequest.
        :param granularity: The granularity of this GetUsageForecastRequest.
        :param filter: The filter of this GetUsageForecastRequest.
        :param prediction_interval_level: The prediction_interval_level of this GetUsageForecastRequest.
        """
        self.openapi_types = {
            'time_period': GetUsageForecastRequestTimePeriod,
            'metric': Metric,
            'granularity': Granularity,
            'filter': GetUsageForecastRequestFilter,
            'prediction_interval_level': int
        }

        self.attribute_map = {
            'time_period': 'TimePeriod',
            'metric': 'Metric',
            'granularity': 'Granularity',
            'filter': 'Filter',
            'prediction_interval_level': 'PredictionIntervalLevel'
        }

        self._time_period = time_period
        self._metric = metric
        self._granularity = granularity
        self._filter = filter
        self._prediction_interval_level = prediction_interval_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUsageForecastRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetUsageForecastRequest of this GetUsageForecastRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_period(self):
        """Gets the time_period of this GetUsageForecastRequest.


        :return: The time_period of this GetUsageForecastRequest.
        :rtype: GetUsageForecastRequestTimePeriod
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this GetUsageForecastRequest.


        :param time_period: The time_period of this GetUsageForecastRequest.
        :type time_period: GetUsageForecastRequestTimePeriod
        """
        if time_period is None:
            raise ValueError("Invalid value for `time_period`, must not be `None`")

        self._time_period = time_period

    @property
    def metric(self):
        """Gets the metric of this GetUsageForecastRequest.


        :return: The metric of this GetUsageForecastRequest.
        :rtype: Metric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this GetUsageForecastRequest.


        :param metric: The metric of this GetUsageForecastRequest.
        :type metric: Metric
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")

        self._metric = metric

    @property
    def granularity(self):
        """Gets the granularity of this GetUsageForecastRequest.


        :return: The granularity of this GetUsageForecastRequest.
        :rtype: Granularity
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this GetUsageForecastRequest.


        :param granularity: The granularity of this GetUsageForecastRequest.
        :type granularity: Granularity
        """
        if granularity is None:
            raise ValueError("Invalid value for `granularity`, must not be `None`")

        self._granularity = granularity

    @property
    def filter(self):
        """Gets the filter of this GetUsageForecastRequest.


        :return: The filter of this GetUsageForecastRequest.
        :rtype: GetUsageForecastRequestFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GetUsageForecastRequest.


        :param filter: The filter of this GetUsageForecastRequest.
        :type filter: GetUsageForecastRequestFilter
        """

        self._filter = filter

    @property
    def prediction_interval_level(self):
        """Gets the prediction_interval_level of this GetUsageForecastRequest.


        :return: The prediction_interval_level of this GetUsageForecastRequest.
        :rtype: int
        """
        return self._prediction_interval_level

    @prediction_interval_level.setter
    def prediction_interval_level(self, prediction_interval_level):
        """Sets the prediction_interval_level of this GetUsageForecastRequest.


        :param prediction_interval_level: The prediction_interval_level of this GetUsageForecastRequest.
        :type prediction_interval_level: int
        """

        self._prediction_interval_level = prediction_interval_level
