# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.anomaly_feedback_type import AnomalyFeedbackType
from openapi_server import util


class ProvideAnomalyFeedbackRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anomaly_id: str=None, feedback: AnomalyFeedbackType=None):
        """ProvideAnomalyFeedbackRequest - a model defined in OpenAPI

        :param anomaly_id: The anomaly_id of this ProvideAnomalyFeedbackRequest.
        :param feedback: The feedback of this ProvideAnomalyFeedbackRequest.
        """
        self.openapi_types = {
            'anomaly_id': str,
            'feedback': AnomalyFeedbackType
        }

        self.attribute_map = {
            'anomaly_id': 'AnomalyId',
            'feedback': 'Feedback'
        }

        self._anomaly_id = anomaly_id
        self._feedback = feedback

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvideAnomalyFeedbackRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProvideAnomalyFeedbackRequest of this ProvideAnomalyFeedbackRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anomaly_id(self):
        """Gets the anomaly_id of this ProvideAnomalyFeedbackRequest.


        :return: The anomaly_id of this ProvideAnomalyFeedbackRequest.
        :rtype: str
        """
        return self._anomaly_id

    @anomaly_id.setter
    def anomaly_id(self, anomaly_id):
        """Sets the anomaly_id of this ProvideAnomalyFeedbackRequest.


        :param anomaly_id: The anomaly_id of this ProvideAnomalyFeedbackRequest.
        :type anomaly_id: str
        """
        if anomaly_id is None:
            raise ValueError("Invalid value for `anomaly_id`, must not be `None`")

        self._anomaly_id = anomaly_id

    @property
    def feedback(self):
        """Gets the feedback of this ProvideAnomalyFeedbackRequest.


        :return: The feedback of this ProvideAnomalyFeedbackRequest.
        :rtype: AnomalyFeedbackType
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this ProvideAnomalyFeedbackRequest.


        :param feedback: The feedback of this ProvideAnomalyFeedbackRequest.
        :type feedback: AnomalyFeedbackType
        """
        if feedback is None:
            raise ValueError("Invalid value for `feedback`, must not be `None`")

        self._feedback = feedback
