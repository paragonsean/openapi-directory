# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target_instance_expected_resource_utilization import TargetInstanceExpectedResourceUtilization
from openapi_server.models.target_instance_resource_details import TargetInstanceResourceDetails
from openapi_server import util


class TargetInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, estimated_monthly_cost: str=None, estimated_monthly_savings: str=None, currency_code: str=None, default_target_instance: bool=None, resource_details: TargetInstanceResourceDetails=None, expected_resource_utilization: TargetInstanceExpectedResourceUtilization=None, platform_differences: List=None):
        """TargetInstance - a model defined in OpenAPI

        :param estimated_monthly_cost: The estimated_monthly_cost of this TargetInstance.
        :param estimated_monthly_savings: The estimated_monthly_savings of this TargetInstance.
        :param currency_code: The currency_code of this TargetInstance.
        :param default_target_instance: The default_target_instance of this TargetInstance.
        :param resource_details: The resource_details of this TargetInstance.
        :param expected_resource_utilization: The expected_resource_utilization of this TargetInstance.
        :param platform_differences: The platform_differences of this TargetInstance.
        """
        self.openapi_types = {
            'estimated_monthly_cost': str,
            'estimated_monthly_savings': str,
            'currency_code': str,
            'default_target_instance': bool,
            'resource_details': TargetInstanceResourceDetails,
            'expected_resource_utilization': TargetInstanceExpectedResourceUtilization,
            'platform_differences': List
        }

        self.attribute_map = {
            'estimated_monthly_cost': 'EstimatedMonthlyCost',
            'estimated_monthly_savings': 'EstimatedMonthlySavings',
            'currency_code': 'CurrencyCode',
            'default_target_instance': 'DefaultTargetInstance',
            'resource_details': 'ResourceDetails',
            'expected_resource_utilization': 'ExpectedResourceUtilization',
            'platform_differences': 'PlatformDifferences'
        }

        self._estimated_monthly_cost = estimated_monthly_cost
        self._estimated_monthly_savings = estimated_monthly_savings
        self._currency_code = currency_code
        self._default_target_instance = default_target_instance
        self._resource_details = resource_details
        self._expected_resource_utilization = expected_resource_utilization
        self._platform_differences = platform_differences

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetInstance of this TargetInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def estimated_monthly_cost(self):
        """Gets the estimated_monthly_cost of this TargetInstance.


        :return: The estimated_monthly_cost of this TargetInstance.
        :rtype: str
        """
        return self._estimated_monthly_cost

    @estimated_monthly_cost.setter
    def estimated_monthly_cost(self, estimated_monthly_cost):
        """Sets the estimated_monthly_cost of this TargetInstance.


        :param estimated_monthly_cost: The estimated_monthly_cost of this TargetInstance.
        :type estimated_monthly_cost: str
        """

        self._estimated_monthly_cost = estimated_monthly_cost

    @property
    def estimated_monthly_savings(self):
        """Gets the estimated_monthly_savings of this TargetInstance.


        :return: The estimated_monthly_savings of this TargetInstance.
        :rtype: str
        """
        return self._estimated_monthly_savings

    @estimated_monthly_savings.setter
    def estimated_monthly_savings(self, estimated_monthly_savings):
        """Sets the estimated_monthly_savings of this TargetInstance.


        :param estimated_monthly_savings: The estimated_monthly_savings of this TargetInstance.
        :type estimated_monthly_savings: str
        """

        self._estimated_monthly_savings = estimated_monthly_savings

    @property
    def currency_code(self):
        """Gets the currency_code of this TargetInstance.


        :return: The currency_code of this TargetInstance.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this TargetInstance.


        :param currency_code: The currency_code of this TargetInstance.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def default_target_instance(self):
        """Gets the default_target_instance of this TargetInstance.


        :return: The default_target_instance of this TargetInstance.
        :rtype: bool
        """
        return self._default_target_instance

    @default_target_instance.setter
    def default_target_instance(self, default_target_instance):
        """Sets the default_target_instance of this TargetInstance.


        :param default_target_instance: The default_target_instance of this TargetInstance.
        :type default_target_instance: bool
        """

        self._default_target_instance = default_target_instance

    @property
    def resource_details(self):
        """Gets the resource_details of this TargetInstance.


        :return: The resource_details of this TargetInstance.
        :rtype: TargetInstanceResourceDetails
        """
        return self._resource_details

    @resource_details.setter
    def resource_details(self, resource_details):
        """Sets the resource_details of this TargetInstance.


        :param resource_details: The resource_details of this TargetInstance.
        :type resource_details: TargetInstanceResourceDetails
        """

        self._resource_details = resource_details

    @property
    def expected_resource_utilization(self):
        """Gets the expected_resource_utilization of this TargetInstance.


        :return: The expected_resource_utilization of this TargetInstance.
        :rtype: TargetInstanceExpectedResourceUtilization
        """
        return self._expected_resource_utilization

    @expected_resource_utilization.setter
    def expected_resource_utilization(self, expected_resource_utilization):
        """Sets the expected_resource_utilization of this TargetInstance.


        :param expected_resource_utilization: The expected_resource_utilization of this TargetInstance.
        :type expected_resource_utilization: TargetInstanceExpectedResourceUtilization
        """

        self._expected_resource_utilization = expected_resource_utilization

    @property
    def platform_differences(self):
        """Gets the platform_differences of this TargetInstance.


        :return: The platform_differences of this TargetInstance.
        :rtype: List
        """
        return self._platform_differences

    @platform_differences.setter
    def platform_differences(self, platform_differences):
        """Sets the platform_differences of this TargetInstance.


        :param platform_differences: The platform_differences of this TargetInstance.
        :type platform_differences: List
        """

        self._platform_differences = platform_differences
