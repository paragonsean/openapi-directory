# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.numeric_operator import NumericOperator
from openapi_server import util


class TotalImpactFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, numeric_operator: NumericOperator=None, start_value: float=None, end_value: float=None):
        """TotalImpactFilter - a model defined in OpenAPI

        :param numeric_operator: The numeric_operator of this TotalImpactFilter.
        :param start_value: The start_value of this TotalImpactFilter.
        :param end_value: The end_value of this TotalImpactFilter.
        """
        self.openapi_types = {
            'numeric_operator': NumericOperator,
            'start_value': float,
            'end_value': float
        }

        self.attribute_map = {
            'numeric_operator': 'NumericOperator',
            'start_value': 'StartValue',
            'end_value': 'EndValue'
        }

        self._numeric_operator = numeric_operator
        self._start_value = start_value
        self._end_value = end_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TotalImpactFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TotalImpactFilter of this TotalImpactFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def numeric_operator(self):
        """Gets the numeric_operator of this TotalImpactFilter.


        :return: The numeric_operator of this TotalImpactFilter.
        :rtype: NumericOperator
        """
        return self._numeric_operator

    @numeric_operator.setter
    def numeric_operator(self, numeric_operator):
        """Sets the numeric_operator of this TotalImpactFilter.


        :param numeric_operator: The numeric_operator of this TotalImpactFilter.
        :type numeric_operator: NumericOperator
        """
        if numeric_operator is None:
            raise ValueError("Invalid value for `numeric_operator`, must not be `None`")

        self._numeric_operator = numeric_operator

    @property
    def start_value(self):
        """Gets the start_value of this TotalImpactFilter.


        :return: The start_value of this TotalImpactFilter.
        :rtype: float
        """
        return self._start_value

    @start_value.setter
    def start_value(self, start_value):
        """Sets the start_value of this TotalImpactFilter.


        :param start_value: The start_value of this TotalImpactFilter.
        :type start_value: float
        """
        if start_value is None:
            raise ValueError("Invalid value for `start_value`, must not be `None`")

        self._start_value = start_value

    @property
    def end_value(self):
        """Gets the end_value of this TotalImpactFilter.


        :return: The end_value of this TotalImpactFilter.
        :rtype: float
        """
        return self._end_value

    @end_value.setter
    def end_value(self, end_value):
        """Sets the end_value of this TotalImpactFilter.


        :param end_value: The end_value of this TotalImpactFilter.
        :type end_value: float
        """

        self._end_value = end_value
