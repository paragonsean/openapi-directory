# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.savings_plans_utilization_aggregates_amortized_commitment import SavingsPlansUtilizationAggregatesAmortizedCommitment
from openapi_server.models.savings_plans_utilization_aggregates_savings import SavingsPlansUtilizationAggregatesSavings
from openapi_server.models.savings_plans_utilization_aggregates_utilization import SavingsPlansUtilizationAggregatesUtilization
from openapi_server import util


class GetSavingsPlansUtilizationDetailsResponseTotal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, utilization: SavingsPlansUtilizationAggregatesUtilization=None, savings: SavingsPlansUtilizationAggregatesSavings=None, amortized_commitment: SavingsPlansUtilizationAggregatesAmortizedCommitment=None):
        """GetSavingsPlansUtilizationDetailsResponseTotal - a model defined in OpenAPI

        :param utilization: The utilization of this GetSavingsPlansUtilizationDetailsResponseTotal.
        :param savings: The savings of this GetSavingsPlansUtilizationDetailsResponseTotal.
        :param amortized_commitment: The amortized_commitment of this GetSavingsPlansUtilizationDetailsResponseTotal.
        """
        self.openapi_types = {
            'utilization': SavingsPlansUtilizationAggregatesUtilization,
            'savings': SavingsPlansUtilizationAggregatesSavings,
            'amortized_commitment': SavingsPlansUtilizationAggregatesAmortizedCommitment
        }

        self.attribute_map = {
            'utilization': 'Utilization',
            'savings': 'Savings',
            'amortized_commitment': 'AmortizedCommitment'
        }

        self._utilization = utilization
        self._savings = savings
        self._amortized_commitment = amortized_commitment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSavingsPlansUtilizationDetailsResponseTotal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSavingsPlansUtilizationDetailsResponse_Total of this GetSavingsPlansUtilizationDetailsResponseTotal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def utilization(self):
        """Gets the utilization of this GetSavingsPlansUtilizationDetailsResponseTotal.


        :return: The utilization of this GetSavingsPlansUtilizationDetailsResponseTotal.
        :rtype: SavingsPlansUtilizationAggregatesUtilization
        """
        return self._utilization

    @utilization.setter
    def utilization(self, utilization):
        """Sets the utilization of this GetSavingsPlansUtilizationDetailsResponseTotal.


        :param utilization: The utilization of this GetSavingsPlansUtilizationDetailsResponseTotal.
        :type utilization: SavingsPlansUtilizationAggregatesUtilization
        """
        if utilization is None:
            raise ValueError("Invalid value for `utilization`, must not be `None`")

        self._utilization = utilization

    @property
    def savings(self):
        """Gets the savings of this GetSavingsPlansUtilizationDetailsResponseTotal.


        :return: The savings of this GetSavingsPlansUtilizationDetailsResponseTotal.
        :rtype: SavingsPlansUtilizationAggregatesSavings
        """
        return self._savings

    @savings.setter
    def savings(self, savings):
        """Sets the savings of this GetSavingsPlansUtilizationDetailsResponseTotal.


        :param savings: The savings of this GetSavingsPlansUtilizationDetailsResponseTotal.
        :type savings: SavingsPlansUtilizationAggregatesSavings
        """

        self._savings = savings

    @property
    def amortized_commitment(self):
        """Gets the amortized_commitment of this GetSavingsPlansUtilizationDetailsResponseTotal.


        :return: The amortized_commitment of this GetSavingsPlansUtilizationDetailsResponseTotal.
        :rtype: SavingsPlansUtilizationAggregatesAmortizedCommitment
        """
        return self._amortized_commitment

    @amortized_commitment.setter
    def amortized_commitment(self, amortized_commitment):
        """Sets the amortized_commitment of this GetSavingsPlansUtilizationDetailsResponseTotal.


        :param amortized_commitment: The amortized_commitment of this GetSavingsPlansUtilizationDetailsResponseTotal.
        :type amortized_commitment: SavingsPlansUtilizationAggregatesAmortizedCommitment
        """

        self._amortized_commitment = amortized_commitment
