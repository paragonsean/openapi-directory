# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.utilization_by_time_time_period import UtilizationByTimeTimePeriod
from openapi_server.models.utilization_by_time_total import UtilizationByTimeTotal
from openapi_server import util


class UtilizationByTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, time_period: UtilizationByTimeTimePeriod=None, groups: List=None, total: UtilizationByTimeTotal=None):
        """UtilizationByTime - a model defined in OpenAPI

        :param time_period: The time_period of this UtilizationByTime.
        :param groups: The groups of this UtilizationByTime.
        :param total: The total of this UtilizationByTime.
        """
        self.openapi_types = {
            'time_period': UtilizationByTimeTimePeriod,
            'groups': List,
            'total': UtilizationByTimeTotal
        }

        self.attribute_map = {
            'time_period': 'TimePeriod',
            'groups': 'Groups',
            'total': 'Total'
        }

        self._time_period = time_period
        self._groups = groups
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UtilizationByTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UtilizationByTime of this UtilizationByTime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_period(self):
        """Gets the time_period of this UtilizationByTime.


        :return: The time_period of this UtilizationByTime.
        :rtype: UtilizationByTimeTimePeriod
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this UtilizationByTime.


        :param time_period: The time_period of this UtilizationByTime.
        :type time_period: UtilizationByTimeTimePeriod
        """

        self._time_period = time_period

    @property
    def groups(self):
        """Gets the groups of this UtilizationByTime.


        :return: The groups of this UtilizationByTime.
        :rtype: List
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UtilizationByTime.


        :param groups: The groups of this UtilizationByTime.
        :type groups: List
        """

        self._groups = groups

    @property
    def total(self):
        """Gets the total of this UtilizationByTime.


        :return: The total of this UtilizationByTime.
        :rtype: UtilizationByTimeTotal
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this UtilizationByTime.


        :param total: The total of this UtilizationByTime.
        :type total: UtilizationByTimeTotal
        """

        self._total = total
