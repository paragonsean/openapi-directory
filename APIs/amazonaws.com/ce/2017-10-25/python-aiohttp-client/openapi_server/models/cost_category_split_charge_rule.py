# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cost_category_split_charge_method import CostCategorySplitChargeMethod
from openapi_server import util


class CostCategorySplitChargeRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source: str=None, targets: List=None, method: CostCategorySplitChargeMethod=None, parameters: List=None):
        """CostCategorySplitChargeRule - a model defined in OpenAPI

        :param source: The source of this CostCategorySplitChargeRule.
        :param targets: The targets of this CostCategorySplitChargeRule.
        :param method: The method of this CostCategorySplitChargeRule.
        :param parameters: The parameters of this CostCategorySplitChargeRule.
        """
        self.openapi_types = {
            'source': str,
            'targets': List,
            'method': CostCategorySplitChargeMethod,
            'parameters': List
        }

        self.attribute_map = {
            'source': 'Source',
            'targets': 'Targets',
            'method': 'Method',
            'parameters': 'Parameters'
        }

        self._source = source
        self._targets = targets
        self._method = method
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostCategorySplitChargeRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostCategorySplitChargeRule of this CostCategorySplitChargeRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self):
        """Gets the source of this CostCategorySplitChargeRule.


        :return: The source of this CostCategorySplitChargeRule.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CostCategorySplitChargeRule.


        :param source: The source of this CostCategorySplitChargeRule.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def targets(self):
        """Gets the targets of this CostCategorySplitChargeRule.


        :return: The targets of this CostCategorySplitChargeRule.
        :rtype: List
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this CostCategorySplitChargeRule.


        :param targets: The targets of this CostCategorySplitChargeRule.
        :type targets: List
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")

        self._targets = targets

    @property
    def method(self):
        """Gets the method of this CostCategorySplitChargeRule.


        :return: The method of this CostCategorySplitChargeRule.
        :rtype: CostCategorySplitChargeMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this CostCategorySplitChargeRule.


        :param method: The method of this CostCategorySplitChargeRule.
        :type method: CostCategorySplitChargeMethod
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def parameters(self):
        """Gets the parameters of this CostCategorySplitChargeRule.


        :return: The parameters of this CostCategorySplitChargeRule.
        :rtype: List
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CostCategorySplitChargeRule.


        :param parameters: The parameters of this CostCategorySplitChargeRule.
        :type parameters: List
        """

        self._parameters = parameters
