# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_definition_type import GroupDefinitionType
from openapi_server import util


class GroupDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: GroupDefinitionType=None, key: str=None):
        """GroupDefinition - a model defined in OpenAPI

        :param type: The type of this GroupDefinition.
        :param key: The key of this GroupDefinition.
        """
        self.openapi_types = {
            'type': GroupDefinitionType,
            'key': str
        }

        self.attribute_map = {
            'type': 'Type',
            'key': 'Key'
        }

        self._type = type
        self._key = key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupDefinition of this GroupDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this GroupDefinition.


        :return: The type of this GroupDefinition.
        :rtype: GroupDefinitionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GroupDefinition.


        :param type: The type of this GroupDefinition.
        :type type: GroupDefinitionType
        """

        self._type = type

    @property
    def key(self):
        """Gets the key of this GroupDefinition.


        :return: The key of this GroupDefinition.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this GroupDefinition.


        :param key: The key of this GroupDefinition.
        :type key: str
        """

        self._key = key
