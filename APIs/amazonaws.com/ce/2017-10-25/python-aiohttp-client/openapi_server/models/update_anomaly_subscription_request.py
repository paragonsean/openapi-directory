# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.anomaly_subscription_frequency import AnomalySubscriptionFrequency
from openapi_server.models.update_anomaly_subscription_request_threshold_expression import UpdateAnomalySubscriptionRequestThresholdExpression
from openapi_server import util


class UpdateAnomalySubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription_arn: str=None, threshold: float=None, frequency: AnomalySubscriptionFrequency=None, monitor_arn_list: List=None, subscribers: List=None, subscription_name: str=None, threshold_expression: UpdateAnomalySubscriptionRequestThresholdExpression=None):
        """UpdateAnomalySubscriptionRequest - a model defined in OpenAPI

        :param subscription_arn: The subscription_arn of this UpdateAnomalySubscriptionRequest.
        :param threshold: The threshold of this UpdateAnomalySubscriptionRequest.
        :param frequency: The frequency of this UpdateAnomalySubscriptionRequest.
        :param monitor_arn_list: The monitor_arn_list of this UpdateAnomalySubscriptionRequest.
        :param subscribers: The subscribers of this UpdateAnomalySubscriptionRequest.
        :param subscription_name: The subscription_name of this UpdateAnomalySubscriptionRequest.
        :param threshold_expression: The threshold_expression of this UpdateAnomalySubscriptionRequest.
        """
        self.openapi_types = {
            'subscription_arn': str,
            'threshold': float,
            'frequency': AnomalySubscriptionFrequency,
            'monitor_arn_list': List,
            'subscribers': List,
            'subscription_name': str,
            'threshold_expression': UpdateAnomalySubscriptionRequestThresholdExpression
        }

        self.attribute_map = {
            'subscription_arn': 'SubscriptionArn',
            'threshold': 'Threshold',
            'frequency': 'Frequency',
            'monitor_arn_list': 'MonitorArnList',
            'subscribers': 'Subscribers',
            'subscription_name': 'SubscriptionName',
            'threshold_expression': 'ThresholdExpression'
        }

        self._subscription_arn = subscription_arn
        self._threshold = threshold
        self._frequency = frequency
        self._monitor_arn_list = monitor_arn_list
        self._subscribers = subscribers
        self._subscription_name = subscription_name
        self._threshold_expression = threshold_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAnomalySubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAnomalySubscriptionRequest of this UpdateAnomalySubscriptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription_arn(self):
        """Gets the subscription_arn of this UpdateAnomalySubscriptionRequest.


        :return: The subscription_arn of this UpdateAnomalySubscriptionRequest.
        :rtype: str
        """
        return self._subscription_arn

    @subscription_arn.setter
    def subscription_arn(self, subscription_arn):
        """Sets the subscription_arn of this UpdateAnomalySubscriptionRequest.


        :param subscription_arn: The subscription_arn of this UpdateAnomalySubscriptionRequest.
        :type subscription_arn: str
        """
        if subscription_arn is None:
            raise ValueError("Invalid value for `subscription_arn`, must not be `None`")

        self._subscription_arn = subscription_arn

    @property
    def threshold(self):
        """Gets the threshold of this UpdateAnomalySubscriptionRequest.


        :return: The threshold of this UpdateAnomalySubscriptionRequest.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this UpdateAnomalySubscriptionRequest.


        :param threshold: The threshold of this UpdateAnomalySubscriptionRequest.
        :type threshold: float
        """

        self._threshold = threshold

    @property
    def frequency(self):
        """Gets the frequency of this UpdateAnomalySubscriptionRequest.


        :return: The frequency of this UpdateAnomalySubscriptionRequest.
        :rtype: AnomalySubscriptionFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this UpdateAnomalySubscriptionRequest.


        :param frequency: The frequency of this UpdateAnomalySubscriptionRequest.
        :type frequency: AnomalySubscriptionFrequency
        """

        self._frequency = frequency

    @property
    def monitor_arn_list(self):
        """Gets the monitor_arn_list of this UpdateAnomalySubscriptionRequest.


        :return: The monitor_arn_list of this UpdateAnomalySubscriptionRequest.
        :rtype: List
        """
        return self._monitor_arn_list

    @monitor_arn_list.setter
    def monitor_arn_list(self, monitor_arn_list):
        """Sets the monitor_arn_list of this UpdateAnomalySubscriptionRequest.


        :param monitor_arn_list: The monitor_arn_list of this UpdateAnomalySubscriptionRequest.
        :type monitor_arn_list: List
        """

        self._monitor_arn_list = monitor_arn_list

    @property
    def subscribers(self):
        """Gets the subscribers of this UpdateAnomalySubscriptionRequest.


        :return: The subscribers of this UpdateAnomalySubscriptionRequest.
        :rtype: List
        """
        return self._subscribers

    @subscribers.setter
    def subscribers(self, subscribers):
        """Sets the subscribers of this UpdateAnomalySubscriptionRequest.


        :param subscribers: The subscribers of this UpdateAnomalySubscriptionRequest.
        :type subscribers: List
        """

        self._subscribers = subscribers

    @property
    def subscription_name(self):
        """Gets the subscription_name of this UpdateAnomalySubscriptionRequest.


        :return: The subscription_name of this UpdateAnomalySubscriptionRequest.
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this UpdateAnomalySubscriptionRequest.


        :param subscription_name: The subscription_name of this UpdateAnomalySubscriptionRequest.
        :type subscription_name: str
        """

        self._subscription_name = subscription_name

    @property
    def threshold_expression(self):
        """Gets the threshold_expression of this UpdateAnomalySubscriptionRequest.


        :return: The threshold_expression of this UpdateAnomalySubscriptionRequest.
        :rtype: UpdateAnomalySubscriptionRequestThresholdExpression
        """
        return self._threshold_expression

    @threshold_expression.setter
    def threshold_expression(self, threshold_expression):
        """Sets the threshold_expression of this UpdateAnomalySubscriptionRequest.


        :param threshold_expression: The threshold_expression of this UpdateAnomalySubscriptionRequest.
        :type threshold_expression: UpdateAnomalySubscriptionRequestThresholdExpression
        """

        self._threshold_expression = threshold_expression
