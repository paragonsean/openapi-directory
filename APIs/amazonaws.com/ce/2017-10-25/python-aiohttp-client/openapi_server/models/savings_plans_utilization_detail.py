# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.savings_plans_utilization_aggregates_utilization import SavingsPlansUtilizationAggregatesUtilization
from openapi_server.models.savings_plans_utilization_detail_amortized_commitment import SavingsPlansUtilizationDetailAmortizedCommitment
from openapi_server.models.savings_plans_utilization_detail_savings import SavingsPlansUtilizationDetailSavings
from openapi_server import util


class SavingsPlansUtilizationDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, savings_plan_arn: str=None, attributes: Dict=None, utilization: SavingsPlansUtilizationAggregatesUtilization=None, savings: SavingsPlansUtilizationDetailSavings=None, amortized_commitment: SavingsPlansUtilizationDetailAmortizedCommitment=None):
        """SavingsPlansUtilizationDetail - a model defined in OpenAPI

        :param savings_plan_arn: The savings_plan_arn of this SavingsPlansUtilizationDetail.
        :param attributes: The attributes of this SavingsPlansUtilizationDetail.
        :param utilization: The utilization of this SavingsPlansUtilizationDetail.
        :param savings: The savings of this SavingsPlansUtilizationDetail.
        :param amortized_commitment: The amortized_commitment of this SavingsPlansUtilizationDetail.
        """
        self.openapi_types = {
            'savings_plan_arn': str,
            'attributes': Dict,
            'utilization': SavingsPlansUtilizationAggregatesUtilization,
            'savings': SavingsPlansUtilizationDetailSavings,
            'amortized_commitment': SavingsPlansUtilizationDetailAmortizedCommitment
        }

        self.attribute_map = {
            'savings_plan_arn': 'SavingsPlanArn',
            'attributes': 'Attributes',
            'utilization': 'Utilization',
            'savings': 'Savings',
            'amortized_commitment': 'AmortizedCommitment'
        }

        self._savings_plan_arn = savings_plan_arn
        self._attributes = attributes
        self._utilization = utilization
        self._savings = savings
        self._amortized_commitment = amortized_commitment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SavingsPlansUtilizationDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SavingsPlansUtilizationDetail of this SavingsPlansUtilizationDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def savings_plan_arn(self):
        """Gets the savings_plan_arn of this SavingsPlansUtilizationDetail.


        :return: The savings_plan_arn of this SavingsPlansUtilizationDetail.
        :rtype: str
        """
        return self._savings_plan_arn

    @savings_plan_arn.setter
    def savings_plan_arn(self, savings_plan_arn):
        """Sets the savings_plan_arn of this SavingsPlansUtilizationDetail.


        :param savings_plan_arn: The savings_plan_arn of this SavingsPlansUtilizationDetail.
        :type savings_plan_arn: str
        """

        self._savings_plan_arn = savings_plan_arn

    @property
    def attributes(self):
        """Gets the attributes of this SavingsPlansUtilizationDetail.


        :return: The attributes of this SavingsPlansUtilizationDetail.
        :rtype: Dict
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SavingsPlansUtilizationDetail.


        :param attributes: The attributes of this SavingsPlansUtilizationDetail.
        :type attributes: Dict
        """

        self._attributes = attributes

    @property
    def utilization(self):
        """Gets the utilization of this SavingsPlansUtilizationDetail.


        :return: The utilization of this SavingsPlansUtilizationDetail.
        :rtype: SavingsPlansUtilizationAggregatesUtilization
        """
        return self._utilization

    @utilization.setter
    def utilization(self, utilization):
        """Sets the utilization of this SavingsPlansUtilizationDetail.


        :param utilization: The utilization of this SavingsPlansUtilizationDetail.
        :type utilization: SavingsPlansUtilizationAggregatesUtilization
        """

        self._utilization = utilization

    @property
    def savings(self):
        """Gets the savings of this SavingsPlansUtilizationDetail.


        :return: The savings of this SavingsPlansUtilizationDetail.
        :rtype: SavingsPlansUtilizationDetailSavings
        """
        return self._savings

    @savings.setter
    def savings(self, savings):
        """Sets the savings of this SavingsPlansUtilizationDetail.


        :param savings: The savings of this SavingsPlansUtilizationDetail.
        :type savings: SavingsPlansUtilizationDetailSavings
        """

        self._savings = savings

    @property
    def amortized_commitment(self):
        """Gets the amortized_commitment of this SavingsPlansUtilizationDetail.


        :return: The amortized_commitment of this SavingsPlansUtilizationDetail.
        :rtype: SavingsPlansUtilizationDetailAmortizedCommitment
        """
        return self._amortized_commitment

    @amortized_commitment.setter
    def amortized_commitment(self, amortized_commitment):
        """Sets the amortized_commitment of this SavingsPlansUtilizationDetail.


        :param amortized_commitment: The amortized_commitment of this SavingsPlansUtilizationDetail.
        :type amortized_commitment: SavingsPlansUtilizationDetailAmortizedCommitment
        """

        self._amortized_commitment = amortized_commitment
