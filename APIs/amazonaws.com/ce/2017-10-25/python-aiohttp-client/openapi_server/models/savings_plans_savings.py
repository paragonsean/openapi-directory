# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SavingsPlansSavings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, net_savings: str=None, on_demand_cost_equivalent: str=None):
        """SavingsPlansSavings - a model defined in OpenAPI

        :param net_savings: The net_savings of this SavingsPlansSavings.
        :param on_demand_cost_equivalent: The on_demand_cost_equivalent of this SavingsPlansSavings.
        """
        self.openapi_types = {
            'net_savings': str,
            'on_demand_cost_equivalent': str
        }

        self.attribute_map = {
            'net_savings': 'NetSavings',
            'on_demand_cost_equivalent': 'OnDemandCostEquivalent'
        }

        self._net_savings = net_savings
        self._on_demand_cost_equivalent = on_demand_cost_equivalent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SavingsPlansSavings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SavingsPlansSavings of this SavingsPlansSavings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def net_savings(self):
        """Gets the net_savings of this SavingsPlansSavings.


        :return: The net_savings of this SavingsPlansSavings.
        :rtype: str
        """
        return self._net_savings

    @net_savings.setter
    def net_savings(self, net_savings):
        """Sets the net_savings of this SavingsPlansSavings.


        :param net_savings: The net_savings of this SavingsPlansSavings.
        :type net_savings: str
        """

        self._net_savings = net_savings

    @property
    def on_demand_cost_equivalent(self):
        """Gets the on_demand_cost_equivalent of this SavingsPlansSavings.


        :return: The on_demand_cost_equivalent of this SavingsPlansSavings.
        :rtype: str
        """
        return self._on_demand_cost_equivalent

    @on_demand_cost_equivalent.setter
    def on_demand_cost_equivalent(self, on_demand_cost_equivalent):
        """Sets the on_demand_cost_equivalent of this SavingsPlansSavings.


        :param on_demand_cost_equivalent: The on_demand_cost_equivalent of this SavingsPlansSavings.
        :type on_demand_cost_equivalent: str
        """

        self._on_demand_cost_equivalent = on_demand_cost_equivalent
