# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_interval import DateInterval
from openapi_server.models.expression import Expression
from openapi_server import util


class GetCostCategoriesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, search_string: str=None, time_period: DateInterval=None, cost_category_name: str=None, filter: Expression=None, sort_by: List=None, max_results: int=None, next_page_token: str=None):
        """GetCostCategoriesRequest - a model defined in OpenAPI

        :param search_string: The search_string of this GetCostCategoriesRequest.
        :param time_period: The time_period of this GetCostCategoriesRequest.
        :param cost_category_name: The cost_category_name of this GetCostCategoriesRequest.
        :param filter: The filter of this GetCostCategoriesRequest.
        :param sort_by: The sort_by of this GetCostCategoriesRequest.
        :param max_results: The max_results of this GetCostCategoriesRequest.
        :param next_page_token: The next_page_token of this GetCostCategoriesRequest.
        """
        self.openapi_types = {
            'search_string': str,
            'time_period': DateInterval,
            'cost_category_name': str,
            'filter': Expression,
            'sort_by': List,
            'max_results': int,
            'next_page_token': str
        }

        self.attribute_map = {
            'search_string': 'SearchString',
            'time_period': 'TimePeriod',
            'cost_category_name': 'CostCategoryName',
            'filter': 'Filter',
            'sort_by': 'SortBy',
            'max_results': 'MaxResults',
            'next_page_token': 'NextPageToken'
        }

        self._search_string = search_string
        self._time_period = time_period
        self._cost_category_name = cost_category_name
        self._filter = filter
        self._sort_by = sort_by
        self._max_results = max_results
        self._next_page_token = next_page_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCostCategoriesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCostCategoriesRequest of this GetCostCategoriesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def search_string(self):
        """Gets the search_string of this GetCostCategoriesRequest.


        :return: The search_string of this GetCostCategoriesRequest.
        :rtype: str
        """
        return self._search_string

    @search_string.setter
    def search_string(self, search_string):
        """Sets the search_string of this GetCostCategoriesRequest.


        :param search_string: The search_string of this GetCostCategoriesRequest.
        :type search_string: str
        """

        self._search_string = search_string

    @property
    def time_period(self):
        """Gets the time_period of this GetCostCategoriesRequest.


        :return: The time_period of this GetCostCategoriesRequest.
        :rtype: DateInterval
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this GetCostCategoriesRequest.


        :param time_period: The time_period of this GetCostCategoriesRequest.
        :type time_period: DateInterval
        """
        if time_period is None:
            raise ValueError("Invalid value for `time_period`, must not be `None`")

        self._time_period = time_period

    @property
    def cost_category_name(self):
        """Gets the cost_category_name of this GetCostCategoriesRequest.

        The unique name of the Cost Category.

        :return: The cost_category_name of this GetCostCategoriesRequest.
        :rtype: str
        """
        return self._cost_category_name

    @cost_category_name.setter
    def cost_category_name(self, cost_category_name):
        """Sets the cost_category_name of this GetCostCategoriesRequest.

        The unique name of the Cost Category.

        :param cost_category_name: The cost_category_name of this GetCostCategoriesRequest.
        :type cost_category_name: str
        """
        if cost_category_name is not None and len(cost_category_name) > 50:
            raise ValueError("Invalid value for `cost_category_name`, length must be less than or equal to `50`")
        if cost_category_name is not None and len(cost_category_name) < 1:
            raise ValueError("Invalid value for `cost_category_name`, length must be greater than or equal to `1`")

        self._cost_category_name = cost_category_name

    @property
    def filter(self):
        """Gets the filter of this GetCostCategoriesRequest.


        :return: The filter of this GetCostCategoriesRequest.
        :rtype: Expression
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GetCostCategoriesRequest.


        :param filter: The filter of this GetCostCategoriesRequest.
        :type filter: Expression
        """

        self._filter = filter

    @property
    def sort_by(self):
        """Gets the sort_by of this GetCostCategoriesRequest.


        :return: The sort_by of this GetCostCategoriesRequest.
        :rtype: List
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this GetCostCategoriesRequest.


        :param sort_by: The sort_by of this GetCostCategoriesRequest.
        :type sort_by: List
        """

        self._sort_by = sort_by

    @property
    def max_results(self):
        """Gets the max_results of this GetCostCategoriesRequest.


        :return: The max_results of this GetCostCategoriesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetCostCategoriesRequest.


        :param max_results: The max_results of this GetCostCategoriesRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_page_token(self):
        """Gets the next_page_token of this GetCostCategoriesRequest.


        :return: The next_page_token of this GetCostCategoriesRequest.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this GetCostCategoriesRequest.


        :param next_page_token: The next_page_token of this GetCostCategoriesRequest.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token
