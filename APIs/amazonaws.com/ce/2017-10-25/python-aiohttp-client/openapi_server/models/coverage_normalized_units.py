# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CoverageNormalizedUnits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, on_demand_normalized_units: str=None, reserved_normalized_units: str=None, total_running_normalized_units: str=None, coverage_normalized_units_percentage: str=None):
        """CoverageNormalizedUnits - a model defined in OpenAPI

        :param on_demand_normalized_units: The on_demand_normalized_units of this CoverageNormalizedUnits.
        :param reserved_normalized_units: The reserved_normalized_units of this CoverageNormalizedUnits.
        :param total_running_normalized_units: The total_running_normalized_units of this CoverageNormalizedUnits.
        :param coverage_normalized_units_percentage: The coverage_normalized_units_percentage of this CoverageNormalizedUnits.
        """
        self.openapi_types = {
            'on_demand_normalized_units': str,
            'reserved_normalized_units': str,
            'total_running_normalized_units': str,
            'coverage_normalized_units_percentage': str
        }

        self.attribute_map = {
            'on_demand_normalized_units': 'OnDemandNormalizedUnits',
            'reserved_normalized_units': 'ReservedNormalizedUnits',
            'total_running_normalized_units': 'TotalRunningNormalizedUnits',
            'coverage_normalized_units_percentage': 'CoverageNormalizedUnitsPercentage'
        }

        self._on_demand_normalized_units = on_demand_normalized_units
        self._reserved_normalized_units = reserved_normalized_units
        self._total_running_normalized_units = total_running_normalized_units
        self._coverage_normalized_units_percentage = coverage_normalized_units_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CoverageNormalizedUnits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CoverageNormalizedUnits of this CoverageNormalizedUnits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def on_demand_normalized_units(self):
        """Gets the on_demand_normalized_units of this CoverageNormalizedUnits.


        :return: The on_demand_normalized_units of this CoverageNormalizedUnits.
        :rtype: str
        """
        return self._on_demand_normalized_units

    @on_demand_normalized_units.setter
    def on_demand_normalized_units(self, on_demand_normalized_units):
        """Sets the on_demand_normalized_units of this CoverageNormalizedUnits.


        :param on_demand_normalized_units: The on_demand_normalized_units of this CoverageNormalizedUnits.
        :type on_demand_normalized_units: str
        """

        self._on_demand_normalized_units = on_demand_normalized_units

    @property
    def reserved_normalized_units(self):
        """Gets the reserved_normalized_units of this CoverageNormalizedUnits.


        :return: The reserved_normalized_units of this CoverageNormalizedUnits.
        :rtype: str
        """
        return self._reserved_normalized_units

    @reserved_normalized_units.setter
    def reserved_normalized_units(self, reserved_normalized_units):
        """Sets the reserved_normalized_units of this CoverageNormalizedUnits.


        :param reserved_normalized_units: The reserved_normalized_units of this CoverageNormalizedUnits.
        :type reserved_normalized_units: str
        """

        self._reserved_normalized_units = reserved_normalized_units

    @property
    def total_running_normalized_units(self):
        """Gets the total_running_normalized_units of this CoverageNormalizedUnits.


        :return: The total_running_normalized_units of this CoverageNormalizedUnits.
        :rtype: str
        """
        return self._total_running_normalized_units

    @total_running_normalized_units.setter
    def total_running_normalized_units(self, total_running_normalized_units):
        """Sets the total_running_normalized_units of this CoverageNormalizedUnits.


        :param total_running_normalized_units: The total_running_normalized_units of this CoverageNormalizedUnits.
        :type total_running_normalized_units: str
        """

        self._total_running_normalized_units = total_running_normalized_units

    @property
    def coverage_normalized_units_percentage(self):
        """Gets the coverage_normalized_units_percentage of this CoverageNormalizedUnits.


        :return: The coverage_normalized_units_percentage of this CoverageNormalizedUnits.
        :rtype: str
        """
        return self._coverage_normalized_units_percentage

    @coverage_normalized_units_percentage.setter
    def coverage_normalized_units_percentage(self, coverage_normalized_units_percentage):
        """Sets the coverage_normalized_units_percentage of this CoverageNormalizedUnits.


        :param coverage_normalized_units_percentage: The coverage_normalized_units_percentage of this CoverageNormalizedUnits.
        :type coverage_normalized_units_percentage: str
        """

        self._coverage_normalized_units_percentage = coverage_normalized_units_percentage
