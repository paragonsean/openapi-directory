# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reservation_purchase_recommendation_detail_instance_details import ReservationPurchaseRecommendationDetailInstanceDetails
from openapi_server import util


class ReservationPurchaseRecommendationDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, instance_details: ReservationPurchaseRecommendationDetailInstanceDetails=None, recommended_number_of_instances_to_purchase: str=None, recommended_normalized_units_to_purchase: str=None, minimum_number_of_instances_used_per_hour: str=None, minimum_normalized_units_used_per_hour: str=None, maximum_number_of_instances_used_per_hour: str=None, maximum_normalized_units_used_per_hour: str=None, average_number_of_instances_used_per_hour: str=None, average_normalized_units_used_per_hour: str=None, average_utilization: str=None, estimated_break_even_in_months: str=None, currency_code: str=None, estimated_monthly_savings_amount: str=None, estimated_monthly_savings_percentage: str=None, estimated_monthly_on_demand_cost: str=None, estimated_reservation_cost_for_lookback_period: str=None, upfront_cost: str=None, recurring_standard_monthly_cost: str=None):
        """ReservationPurchaseRecommendationDetail - a model defined in OpenAPI

        :param account_id: The account_id of this ReservationPurchaseRecommendationDetail.
        :param instance_details: The instance_details of this ReservationPurchaseRecommendationDetail.
        :param recommended_number_of_instances_to_purchase: The recommended_number_of_instances_to_purchase of this ReservationPurchaseRecommendationDetail.
        :param recommended_normalized_units_to_purchase: The recommended_normalized_units_to_purchase of this ReservationPurchaseRecommendationDetail.
        :param minimum_number_of_instances_used_per_hour: The minimum_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :param minimum_normalized_units_used_per_hour: The minimum_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :param maximum_number_of_instances_used_per_hour: The maximum_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :param maximum_normalized_units_used_per_hour: The maximum_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :param average_number_of_instances_used_per_hour: The average_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :param average_normalized_units_used_per_hour: The average_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :param average_utilization: The average_utilization of this ReservationPurchaseRecommendationDetail.
        :param estimated_break_even_in_months: The estimated_break_even_in_months of this ReservationPurchaseRecommendationDetail.
        :param currency_code: The currency_code of this ReservationPurchaseRecommendationDetail.
        :param estimated_monthly_savings_amount: The estimated_monthly_savings_amount of this ReservationPurchaseRecommendationDetail.
        :param estimated_monthly_savings_percentage: The estimated_monthly_savings_percentage of this ReservationPurchaseRecommendationDetail.
        :param estimated_monthly_on_demand_cost: The estimated_monthly_on_demand_cost of this ReservationPurchaseRecommendationDetail.
        :param estimated_reservation_cost_for_lookback_period: The estimated_reservation_cost_for_lookback_period of this ReservationPurchaseRecommendationDetail.
        :param upfront_cost: The upfront_cost of this ReservationPurchaseRecommendationDetail.
        :param recurring_standard_monthly_cost: The recurring_standard_monthly_cost of this ReservationPurchaseRecommendationDetail.
        """
        self.openapi_types = {
            'account_id': str,
            'instance_details': ReservationPurchaseRecommendationDetailInstanceDetails,
            'recommended_number_of_instances_to_purchase': str,
            'recommended_normalized_units_to_purchase': str,
            'minimum_number_of_instances_used_per_hour': str,
            'minimum_normalized_units_used_per_hour': str,
            'maximum_number_of_instances_used_per_hour': str,
            'maximum_normalized_units_used_per_hour': str,
            'average_number_of_instances_used_per_hour': str,
            'average_normalized_units_used_per_hour': str,
            'average_utilization': str,
            'estimated_break_even_in_months': str,
            'currency_code': str,
            'estimated_monthly_savings_amount': str,
            'estimated_monthly_savings_percentage': str,
            'estimated_monthly_on_demand_cost': str,
            'estimated_reservation_cost_for_lookback_period': str,
            'upfront_cost': str,
            'recurring_standard_monthly_cost': str
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'instance_details': 'InstanceDetails',
            'recommended_number_of_instances_to_purchase': 'RecommendedNumberOfInstancesToPurchase',
            'recommended_normalized_units_to_purchase': 'RecommendedNormalizedUnitsToPurchase',
            'minimum_number_of_instances_used_per_hour': 'MinimumNumberOfInstancesUsedPerHour',
            'minimum_normalized_units_used_per_hour': 'MinimumNormalizedUnitsUsedPerHour',
            'maximum_number_of_instances_used_per_hour': 'MaximumNumberOfInstancesUsedPerHour',
            'maximum_normalized_units_used_per_hour': 'MaximumNormalizedUnitsUsedPerHour',
            'average_number_of_instances_used_per_hour': 'AverageNumberOfInstancesUsedPerHour',
            'average_normalized_units_used_per_hour': 'AverageNormalizedUnitsUsedPerHour',
            'average_utilization': 'AverageUtilization',
            'estimated_break_even_in_months': 'EstimatedBreakEvenInMonths',
            'currency_code': 'CurrencyCode',
            'estimated_monthly_savings_amount': 'EstimatedMonthlySavingsAmount',
            'estimated_monthly_savings_percentage': 'EstimatedMonthlySavingsPercentage',
            'estimated_monthly_on_demand_cost': 'EstimatedMonthlyOnDemandCost',
            'estimated_reservation_cost_for_lookback_period': 'EstimatedReservationCostForLookbackPeriod',
            'upfront_cost': 'UpfrontCost',
            'recurring_standard_monthly_cost': 'RecurringStandardMonthlyCost'
        }

        self._account_id = account_id
        self._instance_details = instance_details
        self._recommended_number_of_instances_to_purchase = recommended_number_of_instances_to_purchase
        self._recommended_normalized_units_to_purchase = recommended_normalized_units_to_purchase
        self._minimum_number_of_instances_used_per_hour = minimum_number_of_instances_used_per_hour
        self._minimum_normalized_units_used_per_hour = minimum_normalized_units_used_per_hour
        self._maximum_number_of_instances_used_per_hour = maximum_number_of_instances_used_per_hour
        self._maximum_normalized_units_used_per_hour = maximum_normalized_units_used_per_hour
        self._average_number_of_instances_used_per_hour = average_number_of_instances_used_per_hour
        self._average_normalized_units_used_per_hour = average_normalized_units_used_per_hour
        self._average_utilization = average_utilization
        self._estimated_break_even_in_months = estimated_break_even_in_months
        self._currency_code = currency_code
        self._estimated_monthly_savings_amount = estimated_monthly_savings_amount
        self._estimated_monthly_savings_percentage = estimated_monthly_savings_percentage
        self._estimated_monthly_on_demand_cost = estimated_monthly_on_demand_cost
        self._estimated_reservation_cost_for_lookback_period = estimated_reservation_cost_for_lookback_period
        self._upfront_cost = upfront_cost
        self._recurring_standard_monthly_cost = recurring_standard_monthly_cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReservationPurchaseRecommendationDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReservationPurchaseRecommendationDetail of this ReservationPurchaseRecommendationDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this ReservationPurchaseRecommendationDetail.


        :return: The account_id of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ReservationPurchaseRecommendationDetail.


        :param account_id: The account_id of this ReservationPurchaseRecommendationDetail.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def instance_details(self):
        """Gets the instance_details of this ReservationPurchaseRecommendationDetail.


        :return: The instance_details of this ReservationPurchaseRecommendationDetail.
        :rtype: ReservationPurchaseRecommendationDetailInstanceDetails
        """
        return self._instance_details

    @instance_details.setter
    def instance_details(self, instance_details):
        """Sets the instance_details of this ReservationPurchaseRecommendationDetail.


        :param instance_details: The instance_details of this ReservationPurchaseRecommendationDetail.
        :type instance_details: ReservationPurchaseRecommendationDetailInstanceDetails
        """

        self._instance_details = instance_details

    @property
    def recommended_number_of_instances_to_purchase(self):
        """Gets the recommended_number_of_instances_to_purchase of this ReservationPurchaseRecommendationDetail.


        :return: The recommended_number_of_instances_to_purchase of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._recommended_number_of_instances_to_purchase

    @recommended_number_of_instances_to_purchase.setter
    def recommended_number_of_instances_to_purchase(self, recommended_number_of_instances_to_purchase):
        """Sets the recommended_number_of_instances_to_purchase of this ReservationPurchaseRecommendationDetail.


        :param recommended_number_of_instances_to_purchase: The recommended_number_of_instances_to_purchase of this ReservationPurchaseRecommendationDetail.
        :type recommended_number_of_instances_to_purchase: str
        """

        self._recommended_number_of_instances_to_purchase = recommended_number_of_instances_to_purchase

    @property
    def recommended_normalized_units_to_purchase(self):
        """Gets the recommended_normalized_units_to_purchase of this ReservationPurchaseRecommendationDetail.


        :return: The recommended_normalized_units_to_purchase of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._recommended_normalized_units_to_purchase

    @recommended_normalized_units_to_purchase.setter
    def recommended_normalized_units_to_purchase(self, recommended_normalized_units_to_purchase):
        """Sets the recommended_normalized_units_to_purchase of this ReservationPurchaseRecommendationDetail.


        :param recommended_normalized_units_to_purchase: The recommended_normalized_units_to_purchase of this ReservationPurchaseRecommendationDetail.
        :type recommended_normalized_units_to_purchase: str
        """

        self._recommended_normalized_units_to_purchase = recommended_normalized_units_to_purchase

    @property
    def minimum_number_of_instances_used_per_hour(self):
        """Gets the minimum_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.


        :return: The minimum_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._minimum_number_of_instances_used_per_hour

    @minimum_number_of_instances_used_per_hour.setter
    def minimum_number_of_instances_used_per_hour(self, minimum_number_of_instances_used_per_hour):
        """Sets the minimum_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.


        :param minimum_number_of_instances_used_per_hour: The minimum_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :type minimum_number_of_instances_used_per_hour: str
        """

        self._minimum_number_of_instances_used_per_hour = minimum_number_of_instances_used_per_hour

    @property
    def minimum_normalized_units_used_per_hour(self):
        """Gets the minimum_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.


        :return: The minimum_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._minimum_normalized_units_used_per_hour

    @minimum_normalized_units_used_per_hour.setter
    def minimum_normalized_units_used_per_hour(self, minimum_normalized_units_used_per_hour):
        """Sets the minimum_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.


        :param minimum_normalized_units_used_per_hour: The minimum_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :type minimum_normalized_units_used_per_hour: str
        """

        self._minimum_normalized_units_used_per_hour = minimum_normalized_units_used_per_hour

    @property
    def maximum_number_of_instances_used_per_hour(self):
        """Gets the maximum_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.


        :return: The maximum_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._maximum_number_of_instances_used_per_hour

    @maximum_number_of_instances_used_per_hour.setter
    def maximum_number_of_instances_used_per_hour(self, maximum_number_of_instances_used_per_hour):
        """Sets the maximum_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.


        :param maximum_number_of_instances_used_per_hour: The maximum_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :type maximum_number_of_instances_used_per_hour: str
        """

        self._maximum_number_of_instances_used_per_hour = maximum_number_of_instances_used_per_hour

    @property
    def maximum_normalized_units_used_per_hour(self):
        """Gets the maximum_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.


        :return: The maximum_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._maximum_normalized_units_used_per_hour

    @maximum_normalized_units_used_per_hour.setter
    def maximum_normalized_units_used_per_hour(self, maximum_normalized_units_used_per_hour):
        """Sets the maximum_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.


        :param maximum_normalized_units_used_per_hour: The maximum_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :type maximum_normalized_units_used_per_hour: str
        """

        self._maximum_normalized_units_used_per_hour = maximum_normalized_units_used_per_hour

    @property
    def average_number_of_instances_used_per_hour(self):
        """Gets the average_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.


        :return: The average_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._average_number_of_instances_used_per_hour

    @average_number_of_instances_used_per_hour.setter
    def average_number_of_instances_used_per_hour(self, average_number_of_instances_used_per_hour):
        """Sets the average_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.


        :param average_number_of_instances_used_per_hour: The average_number_of_instances_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :type average_number_of_instances_used_per_hour: str
        """

        self._average_number_of_instances_used_per_hour = average_number_of_instances_used_per_hour

    @property
    def average_normalized_units_used_per_hour(self):
        """Gets the average_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.


        :return: The average_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._average_normalized_units_used_per_hour

    @average_normalized_units_used_per_hour.setter
    def average_normalized_units_used_per_hour(self, average_normalized_units_used_per_hour):
        """Sets the average_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.


        :param average_normalized_units_used_per_hour: The average_normalized_units_used_per_hour of this ReservationPurchaseRecommendationDetail.
        :type average_normalized_units_used_per_hour: str
        """

        self._average_normalized_units_used_per_hour = average_normalized_units_used_per_hour

    @property
    def average_utilization(self):
        """Gets the average_utilization of this ReservationPurchaseRecommendationDetail.


        :return: The average_utilization of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._average_utilization

    @average_utilization.setter
    def average_utilization(self, average_utilization):
        """Sets the average_utilization of this ReservationPurchaseRecommendationDetail.


        :param average_utilization: The average_utilization of this ReservationPurchaseRecommendationDetail.
        :type average_utilization: str
        """

        self._average_utilization = average_utilization

    @property
    def estimated_break_even_in_months(self):
        """Gets the estimated_break_even_in_months of this ReservationPurchaseRecommendationDetail.


        :return: The estimated_break_even_in_months of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._estimated_break_even_in_months

    @estimated_break_even_in_months.setter
    def estimated_break_even_in_months(self, estimated_break_even_in_months):
        """Sets the estimated_break_even_in_months of this ReservationPurchaseRecommendationDetail.


        :param estimated_break_even_in_months: The estimated_break_even_in_months of this ReservationPurchaseRecommendationDetail.
        :type estimated_break_even_in_months: str
        """

        self._estimated_break_even_in_months = estimated_break_even_in_months

    @property
    def currency_code(self):
        """Gets the currency_code of this ReservationPurchaseRecommendationDetail.


        :return: The currency_code of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ReservationPurchaseRecommendationDetail.


        :param currency_code: The currency_code of this ReservationPurchaseRecommendationDetail.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def estimated_monthly_savings_amount(self):
        """Gets the estimated_monthly_savings_amount of this ReservationPurchaseRecommendationDetail.


        :return: The estimated_monthly_savings_amount of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._estimated_monthly_savings_amount

    @estimated_monthly_savings_amount.setter
    def estimated_monthly_savings_amount(self, estimated_monthly_savings_amount):
        """Sets the estimated_monthly_savings_amount of this ReservationPurchaseRecommendationDetail.


        :param estimated_monthly_savings_amount: The estimated_monthly_savings_amount of this ReservationPurchaseRecommendationDetail.
        :type estimated_monthly_savings_amount: str
        """

        self._estimated_monthly_savings_amount = estimated_monthly_savings_amount

    @property
    def estimated_monthly_savings_percentage(self):
        """Gets the estimated_monthly_savings_percentage of this ReservationPurchaseRecommendationDetail.


        :return: The estimated_monthly_savings_percentage of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._estimated_monthly_savings_percentage

    @estimated_monthly_savings_percentage.setter
    def estimated_monthly_savings_percentage(self, estimated_monthly_savings_percentage):
        """Sets the estimated_monthly_savings_percentage of this ReservationPurchaseRecommendationDetail.


        :param estimated_monthly_savings_percentage: The estimated_monthly_savings_percentage of this ReservationPurchaseRecommendationDetail.
        :type estimated_monthly_savings_percentage: str
        """

        self._estimated_monthly_savings_percentage = estimated_monthly_savings_percentage

    @property
    def estimated_monthly_on_demand_cost(self):
        """Gets the estimated_monthly_on_demand_cost of this ReservationPurchaseRecommendationDetail.


        :return: The estimated_monthly_on_demand_cost of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._estimated_monthly_on_demand_cost

    @estimated_monthly_on_demand_cost.setter
    def estimated_monthly_on_demand_cost(self, estimated_monthly_on_demand_cost):
        """Sets the estimated_monthly_on_demand_cost of this ReservationPurchaseRecommendationDetail.


        :param estimated_monthly_on_demand_cost: The estimated_monthly_on_demand_cost of this ReservationPurchaseRecommendationDetail.
        :type estimated_monthly_on_demand_cost: str
        """

        self._estimated_monthly_on_demand_cost = estimated_monthly_on_demand_cost

    @property
    def estimated_reservation_cost_for_lookback_period(self):
        """Gets the estimated_reservation_cost_for_lookback_period of this ReservationPurchaseRecommendationDetail.


        :return: The estimated_reservation_cost_for_lookback_period of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._estimated_reservation_cost_for_lookback_period

    @estimated_reservation_cost_for_lookback_period.setter
    def estimated_reservation_cost_for_lookback_period(self, estimated_reservation_cost_for_lookback_period):
        """Sets the estimated_reservation_cost_for_lookback_period of this ReservationPurchaseRecommendationDetail.


        :param estimated_reservation_cost_for_lookback_period: The estimated_reservation_cost_for_lookback_period of this ReservationPurchaseRecommendationDetail.
        :type estimated_reservation_cost_for_lookback_period: str
        """

        self._estimated_reservation_cost_for_lookback_period = estimated_reservation_cost_for_lookback_period

    @property
    def upfront_cost(self):
        """Gets the upfront_cost of this ReservationPurchaseRecommendationDetail.


        :return: The upfront_cost of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._upfront_cost

    @upfront_cost.setter
    def upfront_cost(self, upfront_cost):
        """Sets the upfront_cost of this ReservationPurchaseRecommendationDetail.


        :param upfront_cost: The upfront_cost of this ReservationPurchaseRecommendationDetail.
        :type upfront_cost: str
        """

        self._upfront_cost = upfront_cost

    @property
    def recurring_standard_monthly_cost(self):
        """Gets the recurring_standard_monthly_cost of this ReservationPurchaseRecommendationDetail.


        :return: The recurring_standard_monthly_cost of this ReservationPurchaseRecommendationDetail.
        :rtype: str
        """
        return self._recurring_standard_monthly_cost

    @recurring_standard_monthly_cost.setter
    def recurring_standard_monthly_cost(self, recurring_standard_monthly_cost):
        """Sets the recurring_standard_monthly_cost of this ReservationPurchaseRecommendationDetail.


        :param recurring_standard_monthly_cost: The recurring_standard_monthly_cost of this ReservationPurchaseRecommendationDetail.
        :type recurring_standard_monthly_cost: str
        """

        self._recurring_standard_monthly_cost = recurring_standard_monthly_cost
