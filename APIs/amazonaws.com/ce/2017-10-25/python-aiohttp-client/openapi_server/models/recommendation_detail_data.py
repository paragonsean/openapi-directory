# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_scope import AccountScope
from openapi_server.models.lookback_period_in_days import LookbackPeriodInDays
from openapi_server.models.payment_option import PaymentOption
from openapi_server.models.supported_savings_plans_type import SupportedSavingsPlansType
from openapi_server.models.term_in_years import TermInYears
import re
from openapi_server import util


class RecommendationDetailData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_scope: AccountScope=None, lookback_period_in_days: LookbackPeriodInDays=None, savings_plans_type: SupportedSavingsPlansType=None, term_in_years: TermInYears=None, payment_option: PaymentOption=None, account_id: str=None, currency_code: str=None, instance_family: str=None, region: str=None, offering_id: str=None, generation_timestamp: str=None, latest_usage_timestamp: str=None, current_average_hourly_on_demand_spend: str=None, current_maximum_hourly_on_demand_spend: str=None, current_minimum_hourly_on_demand_spend: str=None, estimated_average_utilization: str=None, estimated_monthly_savings_amount: str=None, estimated_on_demand_cost: str=None, estimated_on_demand_cost_with_current_commitment: str=None, estimated_roi: str=None, estimated_sp_cost: str=None, estimated_savings_amount: str=None, estimated_savings_percentage: str=None, existing_hourly_commitment: str=None, hourly_commitment_to_purchase: str=None, upfront_cost: str=None, current_average_coverage: str=None, estimated_average_coverage: str=None, metrics_over_lookback_period: List=None):
        """RecommendationDetailData - a model defined in OpenAPI

        :param account_scope: The account_scope of this RecommendationDetailData.
        :param lookback_period_in_days: The lookback_period_in_days of this RecommendationDetailData.
        :param savings_plans_type: The savings_plans_type of this RecommendationDetailData.
        :param term_in_years: The term_in_years of this RecommendationDetailData.
        :param payment_option: The payment_option of this RecommendationDetailData.
        :param account_id: The account_id of this RecommendationDetailData.
        :param currency_code: The currency_code of this RecommendationDetailData.
        :param instance_family: The instance_family of this RecommendationDetailData.
        :param region: The region of this RecommendationDetailData.
        :param offering_id: The offering_id of this RecommendationDetailData.
        :param generation_timestamp: The generation_timestamp of this RecommendationDetailData.
        :param latest_usage_timestamp: The latest_usage_timestamp of this RecommendationDetailData.
        :param current_average_hourly_on_demand_spend: The current_average_hourly_on_demand_spend of this RecommendationDetailData.
        :param current_maximum_hourly_on_demand_spend: The current_maximum_hourly_on_demand_spend of this RecommendationDetailData.
        :param current_minimum_hourly_on_demand_spend: The current_minimum_hourly_on_demand_spend of this RecommendationDetailData.
        :param estimated_average_utilization: The estimated_average_utilization of this RecommendationDetailData.
        :param estimated_monthly_savings_amount: The estimated_monthly_savings_amount of this RecommendationDetailData.
        :param estimated_on_demand_cost: The estimated_on_demand_cost of this RecommendationDetailData.
        :param estimated_on_demand_cost_with_current_commitment: The estimated_on_demand_cost_with_current_commitment of this RecommendationDetailData.
        :param estimated_roi: The estimated_roi of this RecommendationDetailData.
        :param estimated_sp_cost: The estimated_sp_cost of this RecommendationDetailData.
        :param estimated_savings_amount: The estimated_savings_amount of this RecommendationDetailData.
        :param estimated_savings_percentage: The estimated_savings_percentage of this RecommendationDetailData.
        :param existing_hourly_commitment: The existing_hourly_commitment of this RecommendationDetailData.
        :param hourly_commitment_to_purchase: The hourly_commitment_to_purchase of this RecommendationDetailData.
        :param upfront_cost: The upfront_cost of this RecommendationDetailData.
        :param current_average_coverage: The current_average_coverage of this RecommendationDetailData.
        :param estimated_average_coverage: The estimated_average_coverage of this RecommendationDetailData.
        :param metrics_over_lookback_period: The metrics_over_lookback_period of this RecommendationDetailData.
        """
        self.openapi_types = {
            'account_scope': AccountScope,
            'lookback_period_in_days': LookbackPeriodInDays,
            'savings_plans_type': SupportedSavingsPlansType,
            'term_in_years': TermInYears,
            'payment_option': PaymentOption,
            'account_id': str,
            'currency_code': str,
            'instance_family': str,
            'region': str,
            'offering_id': str,
            'generation_timestamp': str,
            'latest_usage_timestamp': str,
            'current_average_hourly_on_demand_spend': str,
            'current_maximum_hourly_on_demand_spend': str,
            'current_minimum_hourly_on_demand_spend': str,
            'estimated_average_utilization': str,
            'estimated_monthly_savings_amount': str,
            'estimated_on_demand_cost': str,
            'estimated_on_demand_cost_with_current_commitment': str,
            'estimated_roi': str,
            'estimated_sp_cost': str,
            'estimated_savings_amount': str,
            'estimated_savings_percentage': str,
            'existing_hourly_commitment': str,
            'hourly_commitment_to_purchase': str,
            'upfront_cost': str,
            'current_average_coverage': str,
            'estimated_average_coverage': str,
            'metrics_over_lookback_period': List
        }

        self.attribute_map = {
            'account_scope': 'AccountScope',
            'lookback_period_in_days': 'LookbackPeriodInDays',
            'savings_plans_type': 'SavingsPlansType',
            'term_in_years': 'TermInYears',
            'payment_option': 'PaymentOption',
            'account_id': 'AccountId',
            'currency_code': 'CurrencyCode',
            'instance_family': 'InstanceFamily',
            'region': 'Region',
            'offering_id': 'OfferingId',
            'generation_timestamp': 'GenerationTimestamp',
            'latest_usage_timestamp': 'LatestUsageTimestamp',
            'current_average_hourly_on_demand_spend': 'CurrentAverageHourlyOnDemandSpend',
            'current_maximum_hourly_on_demand_spend': 'CurrentMaximumHourlyOnDemandSpend',
            'current_minimum_hourly_on_demand_spend': 'CurrentMinimumHourlyOnDemandSpend',
            'estimated_average_utilization': 'EstimatedAverageUtilization',
            'estimated_monthly_savings_amount': 'EstimatedMonthlySavingsAmount',
            'estimated_on_demand_cost': 'EstimatedOnDemandCost',
            'estimated_on_demand_cost_with_current_commitment': 'EstimatedOnDemandCostWithCurrentCommitment',
            'estimated_roi': 'EstimatedROI',
            'estimated_sp_cost': 'EstimatedSPCost',
            'estimated_savings_amount': 'EstimatedSavingsAmount',
            'estimated_savings_percentage': 'EstimatedSavingsPercentage',
            'existing_hourly_commitment': 'ExistingHourlyCommitment',
            'hourly_commitment_to_purchase': 'HourlyCommitmentToPurchase',
            'upfront_cost': 'UpfrontCost',
            'current_average_coverage': 'CurrentAverageCoverage',
            'estimated_average_coverage': 'EstimatedAverageCoverage',
            'metrics_over_lookback_period': 'MetricsOverLookbackPeriod'
        }

        self._account_scope = account_scope
        self._lookback_period_in_days = lookback_period_in_days
        self._savings_plans_type = savings_plans_type
        self._term_in_years = term_in_years
        self._payment_option = payment_option
        self._account_id = account_id
        self._currency_code = currency_code
        self._instance_family = instance_family
        self._region = region
        self._offering_id = offering_id
        self._generation_timestamp = generation_timestamp
        self._latest_usage_timestamp = latest_usage_timestamp
        self._current_average_hourly_on_demand_spend = current_average_hourly_on_demand_spend
        self._current_maximum_hourly_on_demand_spend = current_maximum_hourly_on_demand_spend
        self._current_minimum_hourly_on_demand_spend = current_minimum_hourly_on_demand_spend
        self._estimated_average_utilization = estimated_average_utilization
        self._estimated_monthly_savings_amount = estimated_monthly_savings_amount
        self._estimated_on_demand_cost = estimated_on_demand_cost
        self._estimated_on_demand_cost_with_current_commitment = estimated_on_demand_cost_with_current_commitment
        self._estimated_roi = estimated_roi
        self._estimated_sp_cost = estimated_sp_cost
        self._estimated_savings_amount = estimated_savings_amount
        self._estimated_savings_percentage = estimated_savings_percentage
        self._existing_hourly_commitment = existing_hourly_commitment
        self._hourly_commitment_to_purchase = hourly_commitment_to_purchase
        self._upfront_cost = upfront_cost
        self._current_average_coverage = current_average_coverage
        self._estimated_average_coverage = estimated_average_coverage
        self._metrics_over_lookback_period = metrics_over_lookback_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationDetailData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendationDetailData of this RecommendationDetailData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_scope(self):
        """Gets the account_scope of this RecommendationDetailData.


        :return: The account_scope of this RecommendationDetailData.
        :rtype: AccountScope
        """
        return self._account_scope

    @account_scope.setter
    def account_scope(self, account_scope):
        """Sets the account_scope of this RecommendationDetailData.


        :param account_scope: The account_scope of this RecommendationDetailData.
        :type account_scope: AccountScope
        """

        self._account_scope = account_scope

    @property
    def lookback_period_in_days(self):
        """Gets the lookback_period_in_days of this RecommendationDetailData.


        :return: The lookback_period_in_days of this RecommendationDetailData.
        :rtype: LookbackPeriodInDays
        """
        return self._lookback_period_in_days

    @lookback_period_in_days.setter
    def lookback_period_in_days(self, lookback_period_in_days):
        """Sets the lookback_period_in_days of this RecommendationDetailData.


        :param lookback_period_in_days: The lookback_period_in_days of this RecommendationDetailData.
        :type lookback_period_in_days: LookbackPeriodInDays
        """

        self._lookback_period_in_days = lookback_period_in_days

    @property
    def savings_plans_type(self):
        """Gets the savings_plans_type of this RecommendationDetailData.


        :return: The savings_plans_type of this RecommendationDetailData.
        :rtype: SupportedSavingsPlansType
        """
        return self._savings_plans_type

    @savings_plans_type.setter
    def savings_plans_type(self, savings_plans_type):
        """Sets the savings_plans_type of this RecommendationDetailData.


        :param savings_plans_type: The savings_plans_type of this RecommendationDetailData.
        :type savings_plans_type: SupportedSavingsPlansType
        """

        self._savings_plans_type = savings_plans_type

    @property
    def term_in_years(self):
        """Gets the term_in_years of this RecommendationDetailData.


        :return: The term_in_years of this RecommendationDetailData.
        :rtype: TermInYears
        """
        return self._term_in_years

    @term_in_years.setter
    def term_in_years(self, term_in_years):
        """Sets the term_in_years of this RecommendationDetailData.


        :param term_in_years: The term_in_years of this RecommendationDetailData.
        :type term_in_years: TermInYears
        """

        self._term_in_years = term_in_years

    @property
    def payment_option(self):
        """Gets the payment_option of this RecommendationDetailData.


        :return: The payment_option of this RecommendationDetailData.
        :rtype: PaymentOption
        """
        return self._payment_option

    @payment_option.setter
    def payment_option(self, payment_option):
        """Sets the payment_option of this RecommendationDetailData.


        :param payment_option: The payment_option of this RecommendationDetailData.
        :type payment_option: PaymentOption
        """

        self._payment_option = payment_option

    @property
    def account_id(self):
        """Gets the account_id of this RecommendationDetailData.


        :return: The account_id of this RecommendationDetailData.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RecommendationDetailData.


        :param account_id: The account_id of this RecommendationDetailData.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def currency_code(self):
        """Gets the currency_code of this RecommendationDetailData.


        :return: The currency_code of this RecommendationDetailData.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this RecommendationDetailData.


        :param currency_code: The currency_code of this RecommendationDetailData.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def instance_family(self):
        """Gets the instance_family of this RecommendationDetailData.


        :return: The instance_family of this RecommendationDetailData.
        :rtype: str
        """
        return self._instance_family

    @instance_family.setter
    def instance_family(self, instance_family):
        """Sets the instance_family of this RecommendationDetailData.


        :param instance_family: The instance_family of this RecommendationDetailData.
        :type instance_family: str
        """

        self._instance_family = instance_family

    @property
    def region(self):
        """Gets the region of this RecommendationDetailData.


        :return: The region of this RecommendationDetailData.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RecommendationDetailData.


        :param region: The region of this RecommendationDetailData.
        :type region: str
        """

        self._region = region

    @property
    def offering_id(self):
        """Gets the offering_id of this RecommendationDetailData.


        :return: The offering_id of this RecommendationDetailData.
        :rtype: str
        """
        return self._offering_id

    @offering_id.setter
    def offering_id(self, offering_id):
        """Sets the offering_id of this RecommendationDetailData.


        :param offering_id: The offering_id of this RecommendationDetailData.
        :type offering_id: str
        """

        self._offering_id = offering_id

    @property
    def generation_timestamp(self):
        """Gets the generation_timestamp of this RecommendationDetailData.

        The period of time that you want the usage and costs for.

        :return: The generation_timestamp of this RecommendationDetailData.
        :rtype: str
        """
        return self._generation_timestamp

    @generation_timestamp.setter
    def generation_timestamp(self, generation_timestamp):
        """Sets the generation_timestamp of this RecommendationDetailData.

        The period of time that you want the usage and costs for.

        :param generation_timestamp: The generation_timestamp of this RecommendationDetailData.
        :type generation_timestamp: str
        """
        if generation_timestamp is not None and len(generation_timestamp) > 25:
            raise ValueError("Invalid value for `generation_timestamp`, length must be less than or equal to `25`")
        if generation_timestamp is not None and len(generation_timestamp) < 20:
            raise ValueError("Invalid value for `generation_timestamp`, length must be greater than or equal to `20`")
        if generation_timestamp is not None and not re.search(r'^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$', generation_timestamp):
            raise ValueError("Invalid value for `generation_timestamp`, must be a follow pattern or equal to `/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$/`")

        self._generation_timestamp = generation_timestamp

    @property
    def latest_usage_timestamp(self):
        """Gets the latest_usage_timestamp of this RecommendationDetailData.

        The period of time that you want the usage and costs for.

        :return: The latest_usage_timestamp of this RecommendationDetailData.
        :rtype: str
        """
        return self._latest_usage_timestamp

    @latest_usage_timestamp.setter
    def latest_usage_timestamp(self, latest_usage_timestamp):
        """Sets the latest_usage_timestamp of this RecommendationDetailData.

        The period of time that you want the usage and costs for.

        :param latest_usage_timestamp: The latest_usage_timestamp of this RecommendationDetailData.
        :type latest_usage_timestamp: str
        """
        if latest_usage_timestamp is not None and len(latest_usage_timestamp) > 25:
            raise ValueError("Invalid value for `latest_usage_timestamp`, length must be less than or equal to `25`")
        if latest_usage_timestamp is not None and len(latest_usage_timestamp) < 20:
            raise ValueError("Invalid value for `latest_usage_timestamp`, length must be greater than or equal to `20`")
        if latest_usage_timestamp is not None and not re.search(r'^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$', latest_usage_timestamp):
            raise ValueError("Invalid value for `latest_usage_timestamp`, must be a follow pattern or equal to `/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$/`")

        self._latest_usage_timestamp = latest_usage_timestamp

    @property
    def current_average_hourly_on_demand_spend(self):
        """Gets the current_average_hourly_on_demand_spend of this RecommendationDetailData.


        :return: The current_average_hourly_on_demand_spend of this RecommendationDetailData.
        :rtype: str
        """
        return self._current_average_hourly_on_demand_spend

    @current_average_hourly_on_demand_spend.setter
    def current_average_hourly_on_demand_spend(self, current_average_hourly_on_demand_spend):
        """Sets the current_average_hourly_on_demand_spend of this RecommendationDetailData.


        :param current_average_hourly_on_demand_spend: The current_average_hourly_on_demand_spend of this RecommendationDetailData.
        :type current_average_hourly_on_demand_spend: str
        """

        self._current_average_hourly_on_demand_spend = current_average_hourly_on_demand_spend

    @property
    def current_maximum_hourly_on_demand_spend(self):
        """Gets the current_maximum_hourly_on_demand_spend of this RecommendationDetailData.


        :return: The current_maximum_hourly_on_demand_spend of this RecommendationDetailData.
        :rtype: str
        """
        return self._current_maximum_hourly_on_demand_spend

    @current_maximum_hourly_on_demand_spend.setter
    def current_maximum_hourly_on_demand_spend(self, current_maximum_hourly_on_demand_spend):
        """Sets the current_maximum_hourly_on_demand_spend of this RecommendationDetailData.


        :param current_maximum_hourly_on_demand_spend: The current_maximum_hourly_on_demand_spend of this RecommendationDetailData.
        :type current_maximum_hourly_on_demand_spend: str
        """

        self._current_maximum_hourly_on_demand_spend = current_maximum_hourly_on_demand_spend

    @property
    def current_minimum_hourly_on_demand_spend(self):
        """Gets the current_minimum_hourly_on_demand_spend of this RecommendationDetailData.


        :return: The current_minimum_hourly_on_demand_spend of this RecommendationDetailData.
        :rtype: str
        """
        return self._current_minimum_hourly_on_demand_spend

    @current_minimum_hourly_on_demand_spend.setter
    def current_minimum_hourly_on_demand_spend(self, current_minimum_hourly_on_demand_spend):
        """Sets the current_minimum_hourly_on_demand_spend of this RecommendationDetailData.


        :param current_minimum_hourly_on_demand_spend: The current_minimum_hourly_on_demand_spend of this RecommendationDetailData.
        :type current_minimum_hourly_on_demand_spend: str
        """

        self._current_minimum_hourly_on_demand_spend = current_minimum_hourly_on_demand_spend

    @property
    def estimated_average_utilization(self):
        """Gets the estimated_average_utilization of this RecommendationDetailData.


        :return: The estimated_average_utilization of this RecommendationDetailData.
        :rtype: str
        """
        return self._estimated_average_utilization

    @estimated_average_utilization.setter
    def estimated_average_utilization(self, estimated_average_utilization):
        """Sets the estimated_average_utilization of this RecommendationDetailData.


        :param estimated_average_utilization: The estimated_average_utilization of this RecommendationDetailData.
        :type estimated_average_utilization: str
        """

        self._estimated_average_utilization = estimated_average_utilization

    @property
    def estimated_monthly_savings_amount(self):
        """Gets the estimated_monthly_savings_amount of this RecommendationDetailData.


        :return: The estimated_monthly_savings_amount of this RecommendationDetailData.
        :rtype: str
        """
        return self._estimated_monthly_savings_amount

    @estimated_monthly_savings_amount.setter
    def estimated_monthly_savings_amount(self, estimated_monthly_savings_amount):
        """Sets the estimated_monthly_savings_amount of this RecommendationDetailData.


        :param estimated_monthly_savings_amount: The estimated_monthly_savings_amount of this RecommendationDetailData.
        :type estimated_monthly_savings_amount: str
        """

        self._estimated_monthly_savings_amount = estimated_monthly_savings_amount

    @property
    def estimated_on_demand_cost(self):
        """Gets the estimated_on_demand_cost of this RecommendationDetailData.


        :return: The estimated_on_demand_cost of this RecommendationDetailData.
        :rtype: str
        """
        return self._estimated_on_demand_cost

    @estimated_on_demand_cost.setter
    def estimated_on_demand_cost(self, estimated_on_demand_cost):
        """Sets the estimated_on_demand_cost of this RecommendationDetailData.


        :param estimated_on_demand_cost: The estimated_on_demand_cost of this RecommendationDetailData.
        :type estimated_on_demand_cost: str
        """

        self._estimated_on_demand_cost = estimated_on_demand_cost

    @property
    def estimated_on_demand_cost_with_current_commitment(self):
        """Gets the estimated_on_demand_cost_with_current_commitment of this RecommendationDetailData.


        :return: The estimated_on_demand_cost_with_current_commitment of this RecommendationDetailData.
        :rtype: str
        """
        return self._estimated_on_demand_cost_with_current_commitment

    @estimated_on_demand_cost_with_current_commitment.setter
    def estimated_on_demand_cost_with_current_commitment(self, estimated_on_demand_cost_with_current_commitment):
        """Sets the estimated_on_demand_cost_with_current_commitment of this RecommendationDetailData.


        :param estimated_on_demand_cost_with_current_commitment: The estimated_on_demand_cost_with_current_commitment of this RecommendationDetailData.
        :type estimated_on_demand_cost_with_current_commitment: str
        """

        self._estimated_on_demand_cost_with_current_commitment = estimated_on_demand_cost_with_current_commitment

    @property
    def estimated_roi(self):
        """Gets the estimated_roi of this RecommendationDetailData.


        :return: The estimated_roi of this RecommendationDetailData.
        :rtype: str
        """
        return self._estimated_roi

    @estimated_roi.setter
    def estimated_roi(self, estimated_roi):
        """Sets the estimated_roi of this RecommendationDetailData.


        :param estimated_roi: The estimated_roi of this RecommendationDetailData.
        :type estimated_roi: str
        """

        self._estimated_roi = estimated_roi

    @property
    def estimated_sp_cost(self):
        """Gets the estimated_sp_cost of this RecommendationDetailData.


        :return: The estimated_sp_cost of this RecommendationDetailData.
        :rtype: str
        """
        return self._estimated_sp_cost

    @estimated_sp_cost.setter
    def estimated_sp_cost(self, estimated_sp_cost):
        """Sets the estimated_sp_cost of this RecommendationDetailData.


        :param estimated_sp_cost: The estimated_sp_cost of this RecommendationDetailData.
        :type estimated_sp_cost: str
        """

        self._estimated_sp_cost = estimated_sp_cost

    @property
    def estimated_savings_amount(self):
        """Gets the estimated_savings_amount of this RecommendationDetailData.


        :return: The estimated_savings_amount of this RecommendationDetailData.
        :rtype: str
        """
        return self._estimated_savings_amount

    @estimated_savings_amount.setter
    def estimated_savings_amount(self, estimated_savings_amount):
        """Sets the estimated_savings_amount of this RecommendationDetailData.


        :param estimated_savings_amount: The estimated_savings_amount of this RecommendationDetailData.
        :type estimated_savings_amount: str
        """

        self._estimated_savings_amount = estimated_savings_amount

    @property
    def estimated_savings_percentage(self):
        """Gets the estimated_savings_percentage of this RecommendationDetailData.


        :return: The estimated_savings_percentage of this RecommendationDetailData.
        :rtype: str
        """
        return self._estimated_savings_percentage

    @estimated_savings_percentage.setter
    def estimated_savings_percentage(self, estimated_savings_percentage):
        """Sets the estimated_savings_percentage of this RecommendationDetailData.


        :param estimated_savings_percentage: The estimated_savings_percentage of this RecommendationDetailData.
        :type estimated_savings_percentage: str
        """

        self._estimated_savings_percentage = estimated_savings_percentage

    @property
    def existing_hourly_commitment(self):
        """Gets the existing_hourly_commitment of this RecommendationDetailData.


        :return: The existing_hourly_commitment of this RecommendationDetailData.
        :rtype: str
        """
        return self._existing_hourly_commitment

    @existing_hourly_commitment.setter
    def existing_hourly_commitment(self, existing_hourly_commitment):
        """Sets the existing_hourly_commitment of this RecommendationDetailData.


        :param existing_hourly_commitment: The existing_hourly_commitment of this RecommendationDetailData.
        :type existing_hourly_commitment: str
        """

        self._existing_hourly_commitment = existing_hourly_commitment

    @property
    def hourly_commitment_to_purchase(self):
        """Gets the hourly_commitment_to_purchase of this RecommendationDetailData.


        :return: The hourly_commitment_to_purchase of this RecommendationDetailData.
        :rtype: str
        """
        return self._hourly_commitment_to_purchase

    @hourly_commitment_to_purchase.setter
    def hourly_commitment_to_purchase(self, hourly_commitment_to_purchase):
        """Sets the hourly_commitment_to_purchase of this RecommendationDetailData.


        :param hourly_commitment_to_purchase: The hourly_commitment_to_purchase of this RecommendationDetailData.
        :type hourly_commitment_to_purchase: str
        """

        self._hourly_commitment_to_purchase = hourly_commitment_to_purchase

    @property
    def upfront_cost(self):
        """Gets the upfront_cost of this RecommendationDetailData.


        :return: The upfront_cost of this RecommendationDetailData.
        :rtype: str
        """
        return self._upfront_cost

    @upfront_cost.setter
    def upfront_cost(self, upfront_cost):
        """Sets the upfront_cost of this RecommendationDetailData.


        :param upfront_cost: The upfront_cost of this RecommendationDetailData.
        :type upfront_cost: str
        """

        self._upfront_cost = upfront_cost

    @property
    def current_average_coverage(self):
        """Gets the current_average_coverage of this RecommendationDetailData.


        :return: The current_average_coverage of this RecommendationDetailData.
        :rtype: str
        """
        return self._current_average_coverage

    @current_average_coverage.setter
    def current_average_coverage(self, current_average_coverage):
        """Sets the current_average_coverage of this RecommendationDetailData.


        :param current_average_coverage: The current_average_coverage of this RecommendationDetailData.
        :type current_average_coverage: str
        """

        self._current_average_coverage = current_average_coverage

    @property
    def estimated_average_coverage(self):
        """Gets the estimated_average_coverage of this RecommendationDetailData.


        :return: The estimated_average_coverage of this RecommendationDetailData.
        :rtype: str
        """
        return self._estimated_average_coverage

    @estimated_average_coverage.setter
    def estimated_average_coverage(self, estimated_average_coverage):
        """Sets the estimated_average_coverage of this RecommendationDetailData.


        :param estimated_average_coverage: The estimated_average_coverage of this RecommendationDetailData.
        :type estimated_average_coverage: str
        """

        self._estimated_average_coverage = estimated_average_coverage

    @property
    def metrics_over_lookback_period(self):
        """Gets the metrics_over_lookback_period of this RecommendationDetailData.


        :return: The metrics_over_lookback_period of this RecommendationDetailData.
        :rtype: List
        """
        return self._metrics_over_lookback_period

    @metrics_over_lookback_period.setter
    def metrics_over_lookback_period(self, metrics_over_lookback_period):
        """Sets the metrics_over_lookback_period of this RecommendationDetailData.


        :param metrics_over_lookback_period: The metrics_over_lookback_period of this RecommendationDetailData.
        :type metrics_over_lookback_period: List
        """

        self._metrics_over_lookback_period = metrics_over_lookback_period
