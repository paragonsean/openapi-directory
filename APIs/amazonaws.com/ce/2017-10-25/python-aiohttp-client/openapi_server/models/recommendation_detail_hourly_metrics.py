# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RecommendationDetailHourlyMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_time: str=None, estimated_on_demand_cost: str=None, current_coverage: str=None, estimated_coverage: str=None, estimated_new_commitment_utilization: str=None):
        """RecommendationDetailHourlyMetrics - a model defined in OpenAPI

        :param start_time: The start_time of this RecommendationDetailHourlyMetrics.
        :param estimated_on_demand_cost: The estimated_on_demand_cost of this RecommendationDetailHourlyMetrics.
        :param current_coverage: The current_coverage of this RecommendationDetailHourlyMetrics.
        :param estimated_coverage: The estimated_coverage of this RecommendationDetailHourlyMetrics.
        :param estimated_new_commitment_utilization: The estimated_new_commitment_utilization of this RecommendationDetailHourlyMetrics.
        """
        self.openapi_types = {
            'start_time': str,
            'estimated_on_demand_cost': str,
            'current_coverage': str,
            'estimated_coverage': str,
            'estimated_new_commitment_utilization': str
        }

        self.attribute_map = {
            'start_time': 'StartTime',
            'estimated_on_demand_cost': 'EstimatedOnDemandCost',
            'current_coverage': 'CurrentCoverage',
            'estimated_coverage': 'EstimatedCoverage',
            'estimated_new_commitment_utilization': 'EstimatedNewCommitmentUtilization'
        }

        self._start_time = start_time
        self._estimated_on_demand_cost = estimated_on_demand_cost
        self._current_coverage = current_coverage
        self._estimated_coverage = estimated_coverage
        self._estimated_new_commitment_utilization = estimated_new_commitment_utilization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationDetailHourlyMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendationDetailHourlyMetrics of this RecommendationDetailHourlyMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_time(self):
        """Gets the start_time of this RecommendationDetailHourlyMetrics.

        The period of time that you want the usage and costs for.

        :return: The start_time of this RecommendationDetailHourlyMetrics.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RecommendationDetailHourlyMetrics.

        The period of time that you want the usage and costs for.

        :param start_time: The start_time of this RecommendationDetailHourlyMetrics.
        :type start_time: str
        """
        if start_time is not None and len(start_time) > 25:
            raise ValueError("Invalid value for `start_time`, length must be less than or equal to `25`")
        if start_time is not None and len(start_time) < 20:
            raise ValueError("Invalid value for `start_time`, length must be greater than or equal to `20`")
        if start_time is not None and not re.search(r'^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$', start_time):
            raise ValueError("Invalid value for `start_time`, must be a follow pattern or equal to `/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$/`")

        self._start_time = start_time

    @property
    def estimated_on_demand_cost(self):
        """Gets the estimated_on_demand_cost of this RecommendationDetailHourlyMetrics.


        :return: The estimated_on_demand_cost of this RecommendationDetailHourlyMetrics.
        :rtype: str
        """
        return self._estimated_on_demand_cost

    @estimated_on_demand_cost.setter
    def estimated_on_demand_cost(self, estimated_on_demand_cost):
        """Sets the estimated_on_demand_cost of this RecommendationDetailHourlyMetrics.


        :param estimated_on_demand_cost: The estimated_on_demand_cost of this RecommendationDetailHourlyMetrics.
        :type estimated_on_demand_cost: str
        """

        self._estimated_on_demand_cost = estimated_on_demand_cost

    @property
    def current_coverage(self):
        """Gets the current_coverage of this RecommendationDetailHourlyMetrics.


        :return: The current_coverage of this RecommendationDetailHourlyMetrics.
        :rtype: str
        """
        return self._current_coverage

    @current_coverage.setter
    def current_coverage(self, current_coverage):
        """Sets the current_coverage of this RecommendationDetailHourlyMetrics.


        :param current_coverage: The current_coverage of this RecommendationDetailHourlyMetrics.
        :type current_coverage: str
        """

        self._current_coverage = current_coverage

    @property
    def estimated_coverage(self):
        """Gets the estimated_coverage of this RecommendationDetailHourlyMetrics.


        :return: The estimated_coverage of this RecommendationDetailHourlyMetrics.
        :rtype: str
        """
        return self._estimated_coverage

    @estimated_coverage.setter
    def estimated_coverage(self, estimated_coverage):
        """Sets the estimated_coverage of this RecommendationDetailHourlyMetrics.


        :param estimated_coverage: The estimated_coverage of this RecommendationDetailHourlyMetrics.
        :type estimated_coverage: str
        """

        self._estimated_coverage = estimated_coverage

    @property
    def estimated_new_commitment_utilization(self):
        """Gets the estimated_new_commitment_utilization of this RecommendationDetailHourlyMetrics.


        :return: The estimated_new_commitment_utilization of this RecommendationDetailHourlyMetrics.
        :rtype: str
        """
        return self._estimated_new_commitment_utilization

    @estimated_new_commitment_utilization.setter
    def estimated_new_commitment_utilization(self, estimated_new_commitment_utilization):
        """Sets the estimated_new_commitment_utilization of this RecommendationDetailHourlyMetrics.


        :param estimated_new_commitment_utilization: The estimated_new_commitment_utilization of this RecommendationDetailHourlyMetrics.
        :type estimated_new_commitment_utilization: str
        """

        self._estimated_new_commitment_utilization = estimated_new_commitment_utilization
