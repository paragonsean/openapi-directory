# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SavingsPlansUtilizationAggregatesAmortizedCommitment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amortized_recurring_commitment: str=None, amortized_upfront_commitment: str=None, total_amortized_commitment: str=None):
        """SavingsPlansUtilizationAggregatesAmortizedCommitment - a model defined in OpenAPI

        :param amortized_recurring_commitment: The amortized_recurring_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.
        :param amortized_upfront_commitment: The amortized_upfront_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.
        :param total_amortized_commitment: The total_amortized_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.
        """
        self.openapi_types = {
            'amortized_recurring_commitment': str,
            'amortized_upfront_commitment': str,
            'total_amortized_commitment': str
        }

        self.attribute_map = {
            'amortized_recurring_commitment': 'AmortizedRecurringCommitment',
            'amortized_upfront_commitment': 'AmortizedUpfrontCommitment',
            'total_amortized_commitment': 'TotalAmortizedCommitment'
        }

        self._amortized_recurring_commitment = amortized_recurring_commitment
        self._amortized_upfront_commitment = amortized_upfront_commitment
        self._total_amortized_commitment = total_amortized_commitment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SavingsPlansUtilizationAggregatesAmortizedCommitment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SavingsPlansUtilizationAggregates_AmortizedCommitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amortized_recurring_commitment(self):
        """Gets the amortized_recurring_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.


        :return: The amortized_recurring_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.
        :rtype: str
        """
        return self._amortized_recurring_commitment

    @amortized_recurring_commitment.setter
    def amortized_recurring_commitment(self, amortized_recurring_commitment):
        """Sets the amortized_recurring_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.


        :param amortized_recurring_commitment: The amortized_recurring_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.
        :type amortized_recurring_commitment: str
        """

        self._amortized_recurring_commitment = amortized_recurring_commitment

    @property
    def amortized_upfront_commitment(self):
        """Gets the amortized_upfront_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.


        :return: The amortized_upfront_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.
        :rtype: str
        """
        return self._amortized_upfront_commitment

    @amortized_upfront_commitment.setter
    def amortized_upfront_commitment(self, amortized_upfront_commitment):
        """Sets the amortized_upfront_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.


        :param amortized_upfront_commitment: The amortized_upfront_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.
        :type amortized_upfront_commitment: str
        """

        self._amortized_upfront_commitment = amortized_upfront_commitment

    @property
    def total_amortized_commitment(self):
        """Gets the total_amortized_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.


        :return: The total_amortized_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.
        :rtype: str
        """
        return self._total_amortized_commitment

    @total_amortized_commitment.setter
    def total_amortized_commitment(self, total_amortized_commitment):
        """Sets the total_amortized_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.


        :param total_amortized_commitment: The total_amortized_commitment of this SavingsPlansUtilizationAggregatesAmortizedCommitment.
        :type total_amortized_commitment: str
        """

        self._total_amortized_commitment = total_amortized_commitment
