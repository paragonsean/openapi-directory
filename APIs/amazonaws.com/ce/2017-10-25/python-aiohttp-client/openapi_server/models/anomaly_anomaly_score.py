# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnomalyAnomalyScore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_score: float=None, current_score: float=None):
        """AnomalyAnomalyScore - a model defined in OpenAPI

        :param max_score: The max_score of this AnomalyAnomalyScore.
        :param current_score: The current_score of this AnomalyAnomalyScore.
        """
        self.openapi_types = {
            'max_score': float,
            'current_score': float
        }

        self.attribute_map = {
            'max_score': 'MaxScore',
            'current_score': 'CurrentScore'
        }

        self._max_score = max_score
        self._current_score = current_score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnomalyAnomalyScore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Anomaly_AnomalyScore of this AnomalyAnomalyScore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_score(self):
        """Gets the max_score of this AnomalyAnomalyScore.


        :return: The max_score of this AnomalyAnomalyScore.
        :rtype: float
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this AnomalyAnomalyScore.


        :param max_score: The max_score of this AnomalyAnomalyScore.
        :type max_score: float
        """
        if max_score is None:
            raise ValueError("Invalid value for `max_score`, must not be `None`")

        self._max_score = max_score

    @property
    def current_score(self):
        """Gets the current_score of this AnomalyAnomalyScore.


        :return: The current_score of this AnomalyAnomalyScore.
        :rtype: float
        """
        return self._current_score

    @current_score.setter
    def current_score(self, current_score):
        """Sets the current_score of this AnomalyAnomalyScore.


        :param current_score: The current_score of this AnomalyAnomalyScore.
        :type current_score: float
        """
        if current_score is None:
            raise ValueError("Invalid value for `current_score`, must not be `None`")

        self._current_score = current_score
