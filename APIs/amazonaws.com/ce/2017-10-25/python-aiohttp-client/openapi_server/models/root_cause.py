# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RootCause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service: str=None, region: str=None, linked_account: str=None, usage_type: str=None, linked_account_name: str=None):
        """RootCause - a model defined in OpenAPI

        :param service: The service of this RootCause.
        :param region: The region of this RootCause.
        :param linked_account: The linked_account of this RootCause.
        :param usage_type: The usage_type of this RootCause.
        :param linked_account_name: The linked_account_name of this RootCause.
        """
        self.openapi_types = {
            'service': str,
            'region': str,
            'linked_account': str,
            'usage_type': str,
            'linked_account_name': str
        }

        self.attribute_map = {
            'service': 'Service',
            'region': 'Region',
            'linked_account': 'LinkedAccount',
            'usage_type': 'UsageType',
            'linked_account_name': 'LinkedAccountName'
        }

        self._service = service
        self._region = region
        self._linked_account = linked_account
        self._usage_type = usage_type
        self._linked_account_name = linked_account_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RootCause':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RootCause of this RootCause.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service(self):
        """Gets the service of this RootCause.


        :return: The service of this RootCause.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this RootCause.


        :param service: The service of this RootCause.
        :type service: str
        """

        self._service = service

    @property
    def region(self):
        """Gets the region of this RootCause.


        :return: The region of this RootCause.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RootCause.


        :param region: The region of this RootCause.
        :type region: str
        """

        self._region = region

    @property
    def linked_account(self):
        """Gets the linked_account of this RootCause.


        :return: The linked_account of this RootCause.
        :rtype: str
        """
        return self._linked_account

    @linked_account.setter
    def linked_account(self, linked_account):
        """Sets the linked_account of this RootCause.


        :param linked_account: The linked_account of this RootCause.
        :type linked_account: str
        """

        self._linked_account = linked_account

    @property
    def usage_type(self):
        """Gets the usage_type of this RootCause.


        :return: The usage_type of this RootCause.
        :rtype: str
        """
        return self._usage_type

    @usage_type.setter
    def usage_type(self, usage_type):
        """Sets the usage_type of this RootCause.


        :param usage_type: The usage_type of this RootCause.
        :type usage_type: str
        """

        self._usage_type = usage_type

    @property
    def linked_account_name(self):
        """Gets the linked_account_name of this RootCause.


        :return: The linked_account_name of this RootCause.
        :rtype: str
        """
        return self._linked_account_name

    @linked_account_name.setter
    def linked_account_name(self, linked_account_name):
        """Sets the linked_account_name of this RootCause.


        :param linked_account_name: The linked_account_name of this RootCause.
        :type linked_account_name: str
        """

        self._linked_account_name = linked_account_name
