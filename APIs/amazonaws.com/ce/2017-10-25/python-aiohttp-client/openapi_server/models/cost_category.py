# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cost_category_rule_version import CostCategoryRuleVersion
from openapi_server import util


class CostCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_category_arn: str=None, effective_start: str=None, effective_end: str=None, name: str=None, rule_version: CostCategoryRuleVersion=None, rules: List=None, split_charge_rules: List=None, processing_status: List=None, default_value: str=None):
        """CostCategory - a model defined in OpenAPI

        :param cost_category_arn: The cost_category_arn of this CostCategory.
        :param effective_start: The effective_start of this CostCategory.
        :param effective_end: The effective_end of this CostCategory.
        :param name: The name of this CostCategory.
        :param rule_version: The rule_version of this CostCategory.
        :param rules: The rules of this CostCategory.
        :param split_charge_rules: The split_charge_rules of this CostCategory.
        :param processing_status: The processing_status of this CostCategory.
        :param default_value: The default_value of this CostCategory.
        """
        self.openapi_types = {
            'cost_category_arn': str,
            'effective_start': str,
            'effective_end': str,
            'name': str,
            'rule_version': CostCategoryRuleVersion,
            'rules': List,
            'split_charge_rules': List,
            'processing_status': List,
            'default_value': str
        }

        self.attribute_map = {
            'cost_category_arn': 'CostCategoryArn',
            'effective_start': 'EffectiveStart',
            'effective_end': 'EffectiveEnd',
            'name': 'Name',
            'rule_version': 'RuleVersion',
            'rules': 'Rules',
            'split_charge_rules': 'SplitChargeRules',
            'processing_status': 'ProcessingStatus',
            'default_value': 'DefaultValue'
        }

        self._cost_category_arn = cost_category_arn
        self._effective_start = effective_start
        self._effective_end = effective_end
        self._name = name
        self._rule_version = rule_version
        self._rules = rules
        self._split_charge_rules = split_charge_rules
        self._processing_status = processing_status
        self._default_value = default_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostCategory of this CostCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_category_arn(self):
        """Gets the cost_category_arn of this CostCategory.


        :return: The cost_category_arn of this CostCategory.
        :rtype: str
        """
        return self._cost_category_arn

    @cost_category_arn.setter
    def cost_category_arn(self, cost_category_arn):
        """Sets the cost_category_arn of this CostCategory.


        :param cost_category_arn: The cost_category_arn of this CostCategory.
        :type cost_category_arn: str
        """
        if cost_category_arn is None:
            raise ValueError("Invalid value for `cost_category_arn`, must not be `None`")

        self._cost_category_arn = cost_category_arn

    @property
    def effective_start(self):
        """Gets the effective_start of this CostCategory.


        :return: The effective_start of this CostCategory.
        :rtype: str
        """
        return self._effective_start

    @effective_start.setter
    def effective_start(self, effective_start):
        """Sets the effective_start of this CostCategory.


        :param effective_start: The effective_start of this CostCategory.
        :type effective_start: str
        """
        if effective_start is None:
            raise ValueError("Invalid value for `effective_start`, must not be `None`")

        self._effective_start = effective_start

    @property
    def effective_end(self):
        """Gets the effective_end of this CostCategory.


        :return: The effective_end of this CostCategory.
        :rtype: str
        """
        return self._effective_end

    @effective_end.setter
    def effective_end(self, effective_end):
        """Sets the effective_end of this CostCategory.


        :param effective_end: The effective_end of this CostCategory.
        :type effective_end: str
        """

        self._effective_end = effective_end

    @property
    def name(self):
        """Gets the name of this CostCategory.

        The unique name of the Cost Category.

        :return: The name of this CostCategory.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CostCategory.

        The unique name of the Cost Category.

        :param name: The name of this CostCategory.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def rule_version(self):
        """Gets the rule_version of this CostCategory.


        :return: The rule_version of this CostCategory.
        :rtype: CostCategoryRuleVersion
        """
        return self._rule_version

    @rule_version.setter
    def rule_version(self, rule_version):
        """Sets the rule_version of this CostCategory.


        :param rule_version: The rule_version of this CostCategory.
        :type rule_version: CostCategoryRuleVersion
        """
        if rule_version is None:
            raise ValueError("Invalid value for `rule_version`, must not be `None`")

        self._rule_version = rule_version

    @property
    def rules(self):
        """Gets the rules of this CostCategory.


        :return: The rules of this CostCategory.
        :rtype: List
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this CostCategory.


        :param rules: The rules of this CostCategory.
        :type rules: List
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules

    @property
    def split_charge_rules(self):
        """Gets the split_charge_rules of this CostCategory.


        :return: The split_charge_rules of this CostCategory.
        :rtype: List
        """
        return self._split_charge_rules

    @split_charge_rules.setter
    def split_charge_rules(self, split_charge_rules):
        """Sets the split_charge_rules of this CostCategory.


        :param split_charge_rules: The split_charge_rules of this CostCategory.
        :type split_charge_rules: List
        """

        self._split_charge_rules = split_charge_rules

    @property
    def processing_status(self):
        """Gets the processing_status of this CostCategory.


        :return: The processing_status of this CostCategory.
        :rtype: List
        """
        return self._processing_status

    @processing_status.setter
    def processing_status(self, processing_status):
        """Sets the processing_status of this CostCategory.


        :param processing_status: The processing_status of this CostCategory.
        :type processing_status: List
        """

        self._processing_status = processing_status

    @property
    def default_value(self):
        """Gets the default_value of this CostCategory.

        The default value for the cost category.

        :return: The default_value of this CostCategory.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this CostCategory.

        The default value for the cost category.

        :param default_value: The default_value of this CostCategory.
        :type default_value: str
        """
        if default_value is not None and len(default_value) > 50:
            raise ValueError("Invalid value for `default_value`, length must be less than or equal to `50`")
        if default_value is not None and len(default_value) < 1:
            raise ValueError("Invalid value for `default_value`, length must be greater than or equal to `1`")

        self._default_value = default_value
