# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Impact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_impact: float=None, total_impact: float=None, total_actual_spend: float=None, total_expected_spend: float=None, total_impact_percentage: float=None):
        """Impact - a model defined in OpenAPI

        :param max_impact: The max_impact of this Impact.
        :param total_impact: The total_impact of this Impact.
        :param total_actual_spend: The total_actual_spend of this Impact.
        :param total_expected_spend: The total_expected_spend of this Impact.
        :param total_impact_percentage: The total_impact_percentage of this Impact.
        """
        self.openapi_types = {
            'max_impact': float,
            'total_impact': float,
            'total_actual_spend': float,
            'total_expected_spend': float,
            'total_impact_percentage': float
        }

        self.attribute_map = {
            'max_impact': 'MaxImpact',
            'total_impact': 'TotalImpact',
            'total_actual_spend': 'TotalActualSpend',
            'total_expected_spend': 'TotalExpectedSpend',
            'total_impact_percentage': 'TotalImpactPercentage'
        }

        self._max_impact = max_impact
        self._total_impact = total_impact
        self._total_actual_spend = total_actual_spend
        self._total_expected_spend = total_expected_spend
        self._total_impact_percentage = total_impact_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Impact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Impact of this Impact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_impact(self):
        """Gets the max_impact of this Impact.


        :return: The max_impact of this Impact.
        :rtype: float
        """
        return self._max_impact

    @max_impact.setter
    def max_impact(self, max_impact):
        """Sets the max_impact of this Impact.


        :param max_impact: The max_impact of this Impact.
        :type max_impact: float
        """
        if max_impact is None:
            raise ValueError("Invalid value for `max_impact`, must not be `None`")

        self._max_impact = max_impact

    @property
    def total_impact(self):
        """Gets the total_impact of this Impact.


        :return: The total_impact of this Impact.
        :rtype: float
        """
        return self._total_impact

    @total_impact.setter
    def total_impact(self, total_impact):
        """Sets the total_impact of this Impact.


        :param total_impact: The total_impact of this Impact.
        :type total_impact: float
        """

        self._total_impact = total_impact

    @property
    def total_actual_spend(self):
        """Gets the total_actual_spend of this Impact.


        :return: The total_actual_spend of this Impact.
        :rtype: float
        """
        return self._total_actual_spend

    @total_actual_spend.setter
    def total_actual_spend(self, total_actual_spend):
        """Sets the total_actual_spend of this Impact.


        :param total_actual_spend: The total_actual_spend of this Impact.
        :type total_actual_spend: float
        """

        self._total_actual_spend = total_actual_spend

    @property
    def total_expected_spend(self):
        """Gets the total_expected_spend of this Impact.


        :return: The total_expected_spend of this Impact.
        :rtype: float
        """
        return self._total_expected_spend

    @total_expected_spend.setter
    def total_expected_spend(self, total_expected_spend):
        """Sets the total_expected_spend of this Impact.


        :param total_expected_spend: The total_expected_spend of this Impact.
        :type total_expected_spend: float
        """

        self._total_expected_spend = total_expected_spend

    @property
    def total_impact_percentage(self):
        """Gets the total_impact_percentage of this Impact.


        :return: The total_impact_percentage of this Impact.
        :rtype: float
        """
        return self._total_impact_percentage

    @total_impact_percentage.setter
    def total_impact_percentage(self, total_impact_percentage):
        """Sets the total_impact_percentage of this Impact.


        :param total_impact_percentage: The total_impact_percentage of this Impact.
        :type total_impact_percentage: float
        """

        self._total_impact_percentage = total_impact_percentage
