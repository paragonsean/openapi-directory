# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dimension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    AZ = 'AZ'
    INSTANCE_TYPE = 'INSTANCE_TYPE'
    LINKED_ACCOUNT = 'LINKED_ACCOUNT'
    LINKED_ACCOUNT_NAME = 'LINKED_ACCOUNT_NAME'
    OPERATION = 'OPERATION'
    PURCHASE_TYPE = 'PURCHASE_TYPE'
    REGION = 'REGION'
    SERVICE = 'SERVICE'
    SERVICE_CODE = 'SERVICE_CODE'
    USAGE_TYPE = 'USAGE_TYPE'
    USAGE_TYPE_GROUP = 'USAGE_TYPE_GROUP'
    RECORD_TYPE = 'RECORD_TYPE'
    OPERATING_SYSTEM = 'OPERATING_SYSTEM'
    TENANCY = 'TENANCY'
    SCOPE = 'SCOPE'
    PLATFORM = 'PLATFORM'
    SUBSCRIPTION_ID = 'SUBSCRIPTION_ID'
    LEGAL_ENTITY_NAME = 'LEGAL_ENTITY_NAME'
    DEPLOYMENT_OPTION = 'DEPLOYMENT_OPTION'
    DATABASE_ENGINE = 'DATABASE_ENGINE'
    CACHE_ENGINE = 'CACHE_ENGINE'
    INSTANCE_TYPE_FAMILY = 'INSTANCE_TYPE_FAMILY'
    BILLING_ENTITY = 'BILLING_ENTITY'
    RESERVATION_ID = 'RESERVATION_ID'
    RESOURCE_ID = 'RESOURCE_ID'
    RIGHTSIZING_TYPE = 'RIGHTSIZING_TYPE'
    SAVINGS_PLANS_TYPE = 'SAVINGS_PLANS_TYPE'
    SAVINGS_PLAN_ARN = 'SAVINGS_PLAN_ARN'
    PAYMENT_OPTION = 'PAYMENT_OPTION'
    AGREEMENT_END_DATE_TIME_AFTER = 'AGREEMENT_END_DATE_TIME_AFTER'
    AGREEMENT_END_DATE_TIME_BEFORE = 'AGREEMENT_END_DATE_TIME_BEFORE'
    INVOICING_ENTITY = 'INVOICING_ENTITY'
    ANOMALY_TOTAL_IMPACT_ABSOLUTE = 'ANOMALY_TOTAL_IMPACT_ABSOLUTE'
    ANOMALY_TOTAL_IMPACT_PERCENTAGE = 'ANOMALY_TOTAL_IMPACT_PERCENTAGE'

    def __init__(self):
        """Dimension - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dimension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dimension of this Dimension.
        """
        return util.deserialize_model(dikt, cls)
