# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_sol_network_package_metadata import GetSolNetworkPackageMetadata
from openapi_server.models.nsd_onboarding_state import NsdOnboardingState
from openapi_server.models.nsd_operational_state import NsdOperationalState
from openapi_server.models.nsd_usage_state import NsdUsageState
from openapi_server import util


class GetSolNetworkPackageOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, id: str=None, metadata: GetSolNetworkPackageMetadata=None, nsd_id: str=None, nsd_name: str=None, nsd_onboarding_state: NsdOnboardingState=None, nsd_operational_state: NsdOperationalState=None, nsd_usage_state: NsdUsageState=None, nsd_version: str=None, tags: Dict=None, vnf_pkg_ids: List=None):
        """GetSolNetworkPackageOutput - a model defined in OpenAPI

        :param arn: The arn of this GetSolNetworkPackageOutput.
        :param id: The id of this GetSolNetworkPackageOutput.
        :param metadata: The metadata of this GetSolNetworkPackageOutput.
        :param nsd_id: The nsd_id of this GetSolNetworkPackageOutput.
        :param nsd_name: The nsd_name of this GetSolNetworkPackageOutput.
        :param nsd_onboarding_state: The nsd_onboarding_state of this GetSolNetworkPackageOutput.
        :param nsd_operational_state: The nsd_operational_state of this GetSolNetworkPackageOutput.
        :param nsd_usage_state: The nsd_usage_state of this GetSolNetworkPackageOutput.
        :param nsd_version: The nsd_version of this GetSolNetworkPackageOutput.
        :param tags: The tags of this GetSolNetworkPackageOutput.
        :param vnf_pkg_ids: The vnf_pkg_ids of this GetSolNetworkPackageOutput.
        """
        self.openapi_types = {
            'arn': str,
            'id': str,
            'metadata': GetSolNetworkPackageMetadata,
            'nsd_id': str,
            'nsd_name': str,
            'nsd_onboarding_state': NsdOnboardingState,
            'nsd_operational_state': NsdOperationalState,
            'nsd_usage_state': NsdUsageState,
            'nsd_version': str,
            'tags': Dict,
            'vnf_pkg_ids': List
        }

        self.attribute_map = {
            'arn': 'arn',
            'id': 'id',
            'metadata': 'metadata',
            'nsd_id': 'nsdId',
            'nsd_name': 'nsdName',
            'nsd_onboarding_state': 'nsdOnboardingState',
            'nsd_operational_state': 'nsdOperationalState',
            'nsd_usage_state': 'nsdUsageState',
            'nsd_version': 'nsdVersion',
            'tags': 'tags',
            'vnf_pkg_ids': 'vnfPkgIds'
        }

        self._arn = arn
        self._id = id
        self._metadata = metadata
        self._nsd_id = nsd_id
        self._nsd_name = nsd_name
        self._nsd_onboarding_state = nsd_onboarding_state
        self._nsd_operational_state = nsd_operational_state
        self._nsd_usage_state = nsd_usage_state
        self._nsd_version = nsd_version
        self._tags = tags
        self._vnf_pkg_ids = vnf_pkg_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSolNetworkPackageOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSolNetworkPackageOutput of this GetSolNetworkPackageOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this GetSolNetworkPackageOutput.


        :return: The arn of this GetSolNetworkPackageOutput.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this GetSolNetworkPackageOutput.


        :param arn: The arn of this GetSolNetworkPackageOutput.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def id(self):
        """Gets the id of this GetSolNetworkPackageOutput.


        :return: The id of this GetSolNetworkPackageOutput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSolNetworkPackageOutput.


        :param id: The id of this GetSolNetworkPackageOutput.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this GetSolNetworkPackageOutput.


        :return: The metadata of this GetSolNetworkPackageOutput.
        :rtype: GetSolNetworkPackageMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GetSolNetworkPackageOutput.


        :param metadata: The metadata of this GetSolNetworkPackageOutput.
        :type metadata: GetSolNetworkPackageMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def nsd_id(self):
        """Gets the nsd_id of this GetSolNetworkPackageOutput.


        :return: The nsd_id of this GetSolNetworkPackageOutput.
        :rtype: str
        """
        return self._nsd_id

    @nsd_id.setter
    def nsd_id(self, nsd_id):
        """Sets the nsd_id of this GetSolNetworkPackageOutput.


        :param nsd_id: The nsd_id of this GetSolNetworkPackageOutput.
        :type nsd_id: str
        """
        if nsd_id is None:
            raise ValueError("Invalid value for `nsd_id`, must not be `None`")

        self._nsd_id = nsd_id

    @property
    def nsd_name(self):
        """Gets the nsd_name of this GetSolNetworkPackageOutput.


        :return: The nsd_name of this GetSolNetworkPackageOutput.
        :rtype: str
        """
        return self._nsd_name

    @nsd_name.setter
    def nsd_name(self, nsd_name):
        """Sets the nsd_name of this GetSolNetworkPackageOutput.


        :param nsd_name: The nsd_name of this GetSolNetworkPackageOutput.
        :type nsd_name: str
        """
        if nsd_name is None:
            raise ValueError("Invalid value for `nsd_name`, must not be `None`")

        self._nsd_name = nsd_name

    @property
    def nsd_onboarding_state(self):
        """Gets the nsd_onboarding_state of this GetSolNetworkPackageOutput.


        :return: The nsd_onboarding_state of this GetSolNetworkPackageOutput.
        :rtype: NsdOnboardingState
        """
        return self._nsd_onboarding_state

    @nsd_onboarding_state.setter
    def nsd_onboarding_state(self, nsd_onboarding_state):
        """Sets the nsd_onboarding_state of this GetSolNetworkPackageOutput.


        :param nsd_onboarding_state: The nsd_onboarding_state of this GetSolNetworkPackageOutput.
        :type nsd_onboarding_state: NsdOnboardingState
        """
        if nsd_onboarding_state is None:
            raise ValueError("Invalid value for `nsd_onboarding_state`, must not be `None`")

        self._nsd_onboarding_state = nsd_onboarding_state

    @property
    def nsd_operational_state(self):
        """Gets the nsd_operational_state of this GetSolNetworkPackageOutput.


        :return: The nsd_operational_state of this GetSolNetworkPackageOutput.
        :rtype: NsdOperationalState
        """
        return self._nsd_operational_state

    @nsd_operational_state.setter
    def nsd_operational_state(self, nsd_operational_state):
        """Sets the nsd_operational_state of this GetSolNetworkPackageOutput.


        :param nsd_operational_state: The nsd_operational_state of this GetSolNetworkPackageOutput.
        :type nsd_operational_state: NsdOperationalState
        """
        if nsd_operational_state is None:
            raise ValueError("Invalid value for `nsd_operational_state`, must not be `None`")

        self._nsd_operational_state = nsd_operational_state

    @property
    def nsd_usage_state(self):
        """Gets the nsd_usage_state of this GetSolNetworkPackageOutput.


        :return: The nsd_usage_state of this GetSolNetworkPackageOutput.
        :rtype: NsdUsageState
        """
        return self._nsd_usage_state

    @nsd_usage_state.setter
    def nsd_usage_state(self, nsd_usage_state):
        """Sets the nsd_usage_state of this GetSolNetworkPackageOutput.


        :param nsd_usage_state: The nsd_usage_state of this GetSolNetworkPackageOutput.
        :type nsd_usage_state: NsdUsageState
        """
        if nsd_usage_state is None:
            raise ValueError("Invalid value for `nsd_usage_state`, must not be `None`")

        self._nsd_usage_state = nsd_usage_state

    @property
    def nsd_version(self):
        """Gets the nsd_version of this GetSolNetworkPackageOutput.


        :return: The nsd_version of this GetSolNetworkPackageOutput.
        :rtype: str
        """
        return self._nsd_version

    @nsd_version.setter
    def nsd_version(self, nsd_version):
        """Sets the nsd_version of this GetSolNetworkPackageOutput.


        :param nsd_version: The nsd_version of this GetSolNetworkPackageOutput.
        :type nsd_version: str
        """
        if nsd_version is None:
            raise ValueError("Invalid value for `nsd_version`, must not be `None`")

        self._nsd_version = nsd_version

    @property
    def tags(self):
        """Gets the tags of this GetSolNetworkPackageOutput.


        :return: The tags of this GetSolNetworkPackageOutput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetSolNetworkPackageOutput.


        :param tags: The tags of this GetSolNetworkPackageOutput.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def vnf_pkg_ids(self):
        """Gets the vnf_pkg_ids of this GetSolNetworkPackageOutput.


        :return: The vnf_pkg_ids of this GetSolNetworkPackageOutput.
        :rtype: List
        """
        return self._vnf_pkg_ids

    @vnf_pkg_ids.setter
    def vnf_pkg_ids(self, vnf_pkg_ids):
        """Sets the vnf_pkg_ids of this GetSolNetworkPackageOutput.


        :param vnf_pkg_ids: The vnf_pkg_ids of this GetSolNetworkPackageOutput.
        :type vnf_pkg_ids: List
        """
        if vnf_pkg_ids is None:
            raise ValueError("Invalid value for `vnf_pkg_ids`, must not be `None`")

        self._vnf_pkg_ids = vnf_pkg_ids
