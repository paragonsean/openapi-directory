# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_sol_network_instance_metadata import GetSolNetworkInstanceMetadata
from openapi_server.models.lcm_operation_info import LcmOperationInfo
from openapi_server.models.ns_state import NsState
from openapi_server import util


class GetSolNetworkInstanceOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, id: str=None, lcm_op_info: LcmOperationInfo=None, metadata: GetSolNetworkInstanceMetadata=None, ns_instance_description: str=None, ns_instance_name: str=None, ns_state: NsState=None, nsd_id: str=None, nsd_info_id: str=None, tags: Dict=None):
        """GetSolNetworkInstanceOutput - a model defined in OpenAPI

        :param arn: The arn of this GetSolNetworkInstanceOutput.
        :param id: The id of this GetSolNetworkInstanceOutput.
        :param lcm_op_info: The lcm_op_info of this GetSolNetworkInstanceOutput.
        :param metadata: The metadata of this GetSolNetworkInstanceOutput.
        :param ns_instance_description: The ns_instance_description of this GetSolNetworkInstanceOutput.
        :param ns_instance_name: The ns_instance_name of this GetSolNetworkInstanceOutput.
        :param ns_state: The ns_state of this GetSolNetworkInstanceOutput.
        :param nsd_id: The nsd_id of this GetSolNetworkInstanceOutput.
        :param nsd_info_id: The nsd_info_id of this GetSolNetworkInstanceOutput.
        :param tags: The tags of this GetSolNetworkInstanceOutput.
        """
        self.openapi_types = {
            'arn': str,
            'id': str,
            'lcm_op_info': LcmOperationInfo,
            'metadata': GetSolNetworkInstanceMetadata,
            'ns_instance_description': str,
            'ns_instance_name': str,
            'ns_state': NsState,
            'nsd_id': str,
            'nsd_info_id': str,
            'tags': Dict
        }

        self.attribute_map = {
            'arn': 'arn',
            'id': 'id',
            'lcm_op_info': 'lcmOpInfo',
            'metadata': 'metadata',
            'ns_instance_description': 'nsInstanceDescription',
            'ns_instance_name': 'nsInstanceName',
            'ns_state': 'nsState',
            'nsd_id': 'nsdId',
            'nsd_info_id': 'nsdInfoId',
            'tags': 'tags'
        }

        self._arn = arn
        self._id = id
        self._lcm_op_info = lcm_op_info
        self._metadata = metadata
        self._ns_instance_description = ns_instance_description
        self._ns_instance_name = ns_instance_name
        self._ns_state = ns_state
        self._nsd_id = nsd_id
        self._nsd_info_id = nsd_info_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSolNetworkInstanceOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSolNetworkInstanceOutput of this GetSolNetworkInstanceOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this GetSolNetworkInstanceOutput.


        :return: The arn of this GetSolNetworkInstanceOutput.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this GetSolNetworkInstanceOutput.


        :param arn: The arn of this GetSolNetworkInstanceOutput.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def id(self):
        """Gets the id of this GetSolNetworkInstanceOutput.


        :return: The id of this GetSolNetworkInstanceOutput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSolNetworkInstanceOutput.


        :param id: The id of this GetSolNetworkInstanceOutput.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def lcm_op_info(self):
        """Gets the lcm_op_info of this GetSolNetworkInstanceOutput.


        :return: The lcm_op_info of this GetSolNetworkInstanceOutput.
        :rtype: LcmOperationInfo
        """
        return self._lcm_op_info

    @lcm_op_info.setter
    def lcm_op_info(self, lcm_op_info):
        """Sets the lcm_op_info of this GetSolNetworkInstanceOutput.


        :param lcm_op_info: The lcm_op_info of this GetSolNetworkInstanceOutput.
        :type lcm_op_info: LcmOperationInfo
        """

        self._lcm_op_info = lcm_op_info

    @property
    def metadata(self):
        """Gets the metadata of this GetSolNetworkInstanceOutput.


        :return: The metadata of this GetSolNetworkInstanceOutput.
        :rtype: GetSolNetworkInstanceMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GetSolNetworkInstanceOutput.


        :param metadata: The metadata of this GetSolNetworkInstanceOutput.
        :type metadata: GetSolNetworkInstanceMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def ns_instance_description(self):
        """Gets the ns_instance_description of this GetSolNetworkInstanceOutput.


        :return: The ns_instance_description of this GetSolNetworkInstanceOutput.
        :rtype: str
        """
        return self._ns_instance_description

    @ns_instance_description.setter
    def ns_instance_description(self, ns_instance_description):
        """Sets the ns_instance_description of this GetSolNetworkInstanceOutput.


        :param ns_instance_description: The ns_instance_description of this GetSolNetworkInstanceOutput.
        :type ns_instance_description: str
        """
        if ns_instance_description is None:
            raise ValueError("Invalid value for `ns_instance_description`, must not be `None`")

        self._ns_instance_description = ns_instance_description

    @property
    def ns_instance_name(self):
        """Gets the ns_instance_name of this GetSolNetworkInstanceOutput.


        :return: The ns_instance_name of this GetSolNetworkInstanceOutput.
        :rtype: str
        """
        return self._ns_instance_name

    @ns_instance_name.setter
    def ns_instance_name(self, ns_instance_name):
        """Sets the ns_instance_name of this GetSolNetworkInstanceOutput.


        :param ns_instance_name: The ns_instance_name of this GetSolNetworkInstanceOutput.
        :type ns_instance_name: str
        """
        if ns_instance_name is None:
            raise ValueError("Invalid value for `ns_instance_name`, must not be `None`")

        self._ns_instance_name = ns_instance_name

    @property
    def ns_state(self):
        """Gets the ns_state of this GetSolNetworkInstanceOutput.


        :return: The ns_state of this GetSolNetworkInstanceOutput.
        :rtype: NsState
        """
        return self._ns_state

    @ns_state.setter
    def ns_state(self, ns_state):
        """Sets the ns_state of this GetSolNetworkInstanceOutput.


        :param ns_state: The ns_state of this GetSolNetworkInstanceOutput.
        :type ns_state: NsState
        """

        self._ns_state = ns_state

    @property
    def nsd_id(self):
        """Gets the nsd_id of this GetSolNetworkInstanceOutput.


        :return: The nsd_id of this GetSolNetworkInstanceOutput.
        :rtype: str
        """
        return self._nsd_id

    @nsd_id.setter
    def nsd_id(self, nsd_id):
        """Sets the nsd_id of this GetSolNetworkInstanceOutput.


        :param nsd_id: The nsd_id of this GetSolNetworkInstanceOutput.
        :type nsd_id: str
        """
        if nsd_id is None:
            raise ValueError("Invalid value for `nsd_id`, must not be `None`")

        self._nsd_id = nsd_id

    @property
    def nsd_info_id(self):
        """Gets the nsd_info_id of this GetSolNetworkInstanceOutput.


        :return: The nsd_info_id of this GetSolNetworkInstanceOutput.
        :rtype: str
        """
        return self._nsd_info_id

    @nsd_info_id.setter
    def nsd_info_id(self, nsd_info_id):
        """Sets the nsd_info_id of this GetSolNetworkInstanceOutput.


        :param nsd_info_id: The nsd_info_id of this GetSolNetworkInstanceOutput.
        :type nsd_info_id: str
        """
        if nsd_info_id is None:
            raise ValueError("Invalid value for `nsd_info_id`, must not be `None`")

        self._nsd_info_id = nsd_info_id

    @property
    def tags(self):
        """Gets the tags of this GetSolNetworkInstanceOutput.


        :return: The tags of this GetSolNetworkInstanceOutput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetSolNetworkInstanceOutput.


        :param tags: The tags of this GetSolNetworkInstanceOutput.
        :type tags: Dict
        """

        self._tags = tags
