# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_sol_function_package_info_metadata import ListSolFunctionPackageInfoMetadata
from openapi_server.models.onboarding_state import OnboardingState
from openapi_server.models.operational_state import OperationalState
from openapi_server.models.usage_state import UsageState
from openapi_server import util


class ListSolFunctionPackageInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, id: str=None, metadata: ListSolFunctionPackageInfoMetadata=None, onboarding_state: OnboardingState=None, operational_state: OperationalState=None, usage_state: UsageState=None, vnf_product_name: str=None, vnf_provider: str=None, vnfd_id: str=None, vnfd_version: str=None):
        """ListSolFunctionPackageInfo - a model defined in OpenAPI

        :param arn: The arn of this ListSolFunctionPackageInfo.
        :param id: The id of this ListSolFunctionPackageInfo.
        :param metadata: The metadata of this ListSolFunctionPackageInfo.
        :param onboarding_state: The onboarding_state of this ListSolFunctionPackageInfo.
        :param operational_state: The operational_state of this ListSolFunctionPackageInfo.
        :param usage_state: The usage_state of this ListSolFunctionPackageInfo.
        :param vnf_product_name: The vnf_product_name of this ListSolFunctionPackageInfo.
        :param vnf_provider: The vnf_provider of this ListSolFunctionPackageInfo.
        :param vnfd_id: The vnfd_id of this ListSolFunctionPackageInfo.
        :param vnfd_version: The vnfd_version of this ListSolFunctionPackageInfo.
        """
        self.openapi_types = {
            'arn': str,
            'id': str,
            'metadata': ListSolFunctionPackageInfoMetadata,
            'onboarding_state': OnboardingState,
            'operational_state': OperationalState,
            'usage_state': UsageState,
            'vnf_product_name': str,
            'vnf_provider': str,
            'vnfd_id': str,
            'vnfd_version': str
        }

        self.attribute_map = {
            'arn': 'arn',
            'id': 'id',
            'metadata': 'metadata',
            'onboarding_state': 'onboardingState',
            'operational_state': 'operationalState',
            'usage_state': 'usageState',
            'vnf_product_name': 'vnfProductName',
            'vnf_provider': 'vnfProvider',
            'vnfd_id': 'vnfdId',
            'vnfd_version': 'vnfdVersion'
        }

        self._arn = arn
        self._id = id
        self._metadata = metadata
        self._onboarding_state = onboarding_state
        self._operational_state = operational_state
        self._usage_state = usage_state
        self._vnf_product_name = vnf_product_name
        self._vnf_provider = vnf_provider
        self._vnfd_id = vnfd_id
        self._vnfd_version = vnfd_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListSolFunctionPackageInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListSolFunctionPackageInfo of this ListSolFunctionPackageInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this ListSolFunctionPackageInfo.


        :return: The arn of this ListSolFunctionPackageInfo.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this ListSolFunctionPackageInfo.


        :param arn: The arn of this ListSolFunctionPackageInfo.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def id(self):
        """Gets the id of this ListSolFunctionPackageInfo.


        :return: The id of this ListSolFunctionPackageInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ListSolFunctionPackageInfo.


        :param id: The id of this ListSolFunctionPackageInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this ListSolFunctionPackageInfo.


        :return: The metadata of this ListSolFunctionPackageInfo.
        :rtype: ListSolFunctionPackageInfoMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ListSolFunctionPackageInfo.


        :param metadata: The metadata of this ListSolFunctionPackageInfo.
        :type metadata: ListSolFunctionPackageInfoMetadata
        """

        self._metadata = metadata

    @property
    def onboarding_state(self):
        """Gets the onboarding_state of this ListSolFunctionPackageInfo.


        :return: The onboarding_state of this ListSolFunctionPackageInfo.
        :rtype: OnboardingState
        """
        return self._onboarding_state

    @onboarding_state.setter
    def onboarding_state(self, onboarding_state):
        """Sets the onboarding_state of this ListSolFunctionPackageInfo.


        :param onboarding_state: The onboarding_state of this ListSolFunctionPackageInfo.
        :type onboarding_state: OnboardingState
        """
        if onboarding_state is None:
            raise ValueError("Invalid value for `onboarding_state`, must not be `None`")

        self._onboarding_state = onboarding_state

    @property
    def operational_state(self):
        """Gets the operational_state of this ListSolFunctionPackageInfo.


        :return: The operational_state of this ListSolFunctionPackageInfo.
        :rtype: OperationalState
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state):
        """Sets the operational_state of this ListSolFunctionPackageInfo.


        :param operational_state: The operational_state of this ListSolFunctionPackageInfo.
        :type operational_state: OperationalState
        """
        if operational_state is None:
            raise ValueError("Invalid value for `operational_state`, must not be `None`")

        self._operational_state = operational_state

    @property
    def usage_state(self):
        """Gets the usage_state of this ListSolFunctionPackageInfo.


        :return: The usage_state of this ListSolFunctionPackageInfo.
        :rtype: UsageState
        """
        return self._usage_state

    @usage_state.setter
    def usage_state(self, usage_state):
        """Sets the usage_state of this ListSolFunctionPackageInfo.


        :param usage_state: The usage_state of this ListSolFunctionPackageInfo.
        :type usage_state: UsageState
        """
        if usage_state is None:
            raise ValueError("Invalid value for `usage_state`, must not be `None`")

        self._usage_state = usage_state

    @property
    def vnf_product_name(self):
        """Gets the vnf_product_name of this ListSolFunctionPackageInfo.


        :return: The vnf_product_name of this ListSolFunctionPackageInfo.
        :rtype: str
        """
        return self._vnf_product_name

    @vnf_product_name.setter
    def vnf_product_name(self, vnf_product_name):
        """Sets the vnf_product_name of this ListSolFunctionPackageInfo.


        :param vnf_product_name: The vnf_product_name of this ListSolFunctionPackageInfo.
        :type vnf_product_name: str
        """

        self._vnf_product_name = vnf_product_name

    @property
    def vnf_provider(self):
        """Gets the vnf_provider of this ListSolFunctionPackageInfo.


        :return: The vnf_provider of this ListSolFunctionPackageInfo.
        :rtype: str
        """
        return self._vnf_provider

    @vnf_provider.setter
    def vnf_provider(self, vnf_provider):
        """Sets the vnf_provider of this ListSolFunctionPackageInfo.


        :param vnf_provider: The vnf_provider of this ListSolFunctionPackageInfo.
        :type vnf_provider: str
        """

        self._vnf_provider = vnf_provider

    @property
    def vnfd_id(self):
        """Gets the vnfd_id of this ListSolFunctionPackageInfo.


        :return: The vnfd_id of this ListSolFunctionPackageInfo.
        :rtype: str
        """
        return self._vnfd_id

    @vnfd_id.setter
    def vnfd_id(self, vnfd_id):
        """Sets the vnfd_id of this ListSolFunctionPackageInfo.


        :param vnfd_id: The vnfd_id of this ListSolFunctionPackageInfo.
        :type vnfd_id: str
        """

        self._vnfd_id = vnfd_id

    @property
    def vnfd_version(self):
        """Gets the vnfd_version of this ListSolFunctionPackageInfo.


        :return: The vnfd_version of this ListSolFunctionPackageInfo.
        :rtype: str
        """
        return self._vnfd_version

    @vnfd_version.setter
    def vnfd_version(self, vnfd_version):
        """Sets the vnfd_version of this ListSolFunctionPackageInfo.


        :param vnfd_version: The vnfd_version of this ListSolFunctionPackageInfo.
        :type vnfd_version: str
        """

        self._vnfd_version = vnfd_version
