# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSolFunctionPackageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operational_state: str=None):
        """UpdateSolFunctionPackageRequest - a model defined in OpenAPI

        :param operational_state: The operational_state of this UpdateSolFunctionPackageRequest.
        """
        self.openapi_types = {
            'operational_state': str
        }

        self.attribute_map = {
            'operational_state': 'operationalState'
        }

        self._operational_state = operational_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSolFunctionPackageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSolFunctionPackage_request of this UpdateSolFunctionPackageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operational_state(self):
        """Gets the operational_state of this UpdateSolFunctionPackageRequest.

        Operational state of the function package.

        :return: The operational_state of this UpdateSolFunctionPackageRequest.
        :rtype: str
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state):
        """Sets the operational_state of this UpdateSolFunctionPackageRequest.

        Operational state of the function package.

        :param operational_state: The operational_state of this UpdateSolFunctionPackageRequest.
        :type operational_state: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if operational_state not in allowed_values:
            raise ValueError(
                "Invalid value for `operational_state` ({0}), must be one of {1}"
                .format(operational_state, allowed_values)
            )

        self._operational_state = operational_state
