# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateSolNetworkInstanceOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, id: str=None, ns_instance_name: str=None, nsd_info_id: str=None, tags: Dict=None):
        """CreateSolNetworkInstanceOutput - a model defined in OpenAPI

        :param arn: The arn of this CreateSolNetworkInstanceOutput.
        :param id: The id of this CreateSolNetworkInstanceOutput.
        :param ns_instance_name: The ns_instance_name of this CreateSolNetworkInstanceOutput.
        :param nsd_info_id: The nsd_info_id of this CreateSolNetworkInstanceOutput.
        :param tags: The tags of this CreateSolNetworkInstanceOutput.
        """
        self.openapi_types = {
            'arn': str,
            'id': str,
            'ns_instance_name': str,
            'nsd_info_id': str,
            'tags': Dict
        }

        self.attribute_map = {
            'arn': 'arn',
            'id': 'id',
            'ns_instance_name': 'nsInstanceName',
            'nsd_info_id': 'nsdInfoId',
            'tags': 'tags'
        }

        self._arn = arn
        self._id = id
        self._ns_instance_name = ns_instance_name
        self._nsd_info_id = nsd_info_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSolNetworkInstanceOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSolNetworkInstanceOutput of this CreateSolNetworkInstanceOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this CreateSolNetworkInstanceOutput.


        :return: The arn of this CreateSolNetworkInstanceOutput.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CreateSolNetworkInstanceOutput.


        :param arn: The arn of this CreateSolNetworkInstanceOutput.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def id(self):
        """Gets the id of this CreateSolNetworkInstanceOutput.


        :return: The id of this CreateSolNetworkInstanceOutput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateSolNetworkInstanceOutput.


        :param id: The id of this CreateSolNetworkInstanceOutput.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ns_instance_name(self):
        """Gets the ns_instance_name of this CreateSolNetworkInstanceOutput.


        :return: The ns_instance_name of this CreateSolNetworkInstanceOutput.
        :rtype: str
        """
        return self._ns_instance_name

    @ns_instance_name.setter
    def ns_instance_name(self, ns_instance_name):
        """Sets the ns_instance_name of this CreateSolNetworkInstanceOutput.


        :param ns_instance_name: The ns_instance_name of this CreateSolNetworkInstanceOutput.
        :type ns_instance_name: str
        """
        if ns_instance_name is None:
            raise ValueError("Invalid value for `ns_instance_name`, must not be `None`")

        self._ns_instance_name = ns_instance_name

    @property
    def nsd_info_id(self):
        """Gets the nsd_info_id of this CreateSolNetworkInstanceOutput.


        :return: The nsd_info_id of this CreateSolNetworkInstanceOutput.
        :rtype: str
        """
        return self._nsd_info_id

    @nsd_info_id.setter
    def nsd_info_id(self, nsd_info_id):
        """Sets the nsd_info_id of this CreateSolNetworkInstanceOutput.


        :param nsd_info_id: The nsd_info_id of this CreateSolNetworkInstanceOutput.
        :type nsd_info_id: str
        """
        if nsd_info_id is None:
            raise ValueError("Invalid value for `nsd_info_id`, must not be `None`")

        self._nsd_info_id = nsd_info_id

    @property
    def tags(self):
        """Gets the tags of this CreateSolNetworkInstanceOutput.


        :return: The tags of this CreateSolNetworkInstanceOutput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSolNetworkInstanceOutput.


        :param tags: The tags of this CreateSolNetworkInstanceOutput.
        :type tags: Dict
        """

        self._tags = tags
