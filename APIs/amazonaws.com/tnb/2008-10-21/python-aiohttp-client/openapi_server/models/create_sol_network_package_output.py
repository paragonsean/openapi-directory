# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nsd_onboarding_state import NsdOnboardingState
from openapi_server.models.nsd_operational_state import NsdOperationalState
from openapi_server.models.nsd_usage_state import NsdUsageState
from openapi_server import util


class CreateSolNetworkPackageOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, id: str=None, nsd_onboarding_state: NsdOnboardingState=None, nsd_operational_state: NsdOperationalState=None, nsd_usage_state: NsdUsageState=None, tags: Dict=None):
        """CreateSolNetworkPackageOutput - a model defined in OpenAPI

        :param arn: The arn of this CreateSolNetworkPackageOutput.
        :param id: The id of this CreateSolNetworkPackageOutput.
        :param nsd_onboarding_state: The nsd_onboarding_state of this CreateSolNetworkPackageOutput.
        :param nsd_operational_state: The nsd_operational_state of this CreateSolNetworkPackageOutput.
        :param nsd_usage_state: The nsd_usage_state of this CreateSolNetworkPackageOutput.
        :param tags: The tags of this CreateSolNetworkPackageOutput.
        """
        self.openapi_types = {
            'arn': str,
            'id': str,
            'nsd_onboarding_state': NsdOnboardingState,
            'nsd_operational_state': NsdOperationalState,
            'nsd_usage_state': NsdUsageState,
            'tags': Dict
        }

        self.attribute_map = {
            'arn': 'arn',
            'id': 'id',
            'nsd_onboarding_state': 'nsdOnboardingState',
            'nsd_operational_state': 'nsdOperationalState',
            'nsd_usage_state': 'nsdUsageState',
            'tags': 'tags'
        }

        self._arn = arn
        self._id = id
        self._nsd_onboarding_state = nsd_onboarding_state
        self._nsd_operational_state = nsd_operational_state
        self._nsd_usage_state = nsd_usage_state
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSolNetworkPackageOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSolNetworkPackageOutput of this CreateSolNetworkPackageOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this CreateSolNetworkPackageOutput.


        :return: The arn of this CreateSolNetworkPackageOutput.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CreateSolNetworkPackageOutput.


        :param arn: The arn of this CreateSolNetworkPackageOutput.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def id(self):
        """Gets the id of this CreateSolNetworkPackageOutput.


        :return: The id of this CreateSolNetworkPackageOutput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateSolNetworkPackageOutput.


        :param id: The id of this CreateSolNetworkPackageOutput.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def nsd_onboarding_state(self):
        """Gets the nsd_onboarding_state of this CreateSolNetworkPackageOutput.


        :return: The nsd_onboarding_state of this CreateSolNetworkPackageOutput.
        :rtype: NsdOnboardingState
        """
        return self._nsd_onboarding_state

    @nsd_onboarding_state.setter
    def nsd_onboarding_state(self, nsd_onboarding_state):
        """Sets the nsd_onboarding_state of this CreateSolNetworkPackageOutput.


        :param nsd_onboarding_state: The nsd_onboarding_state of this CreateSolNetworkPackageOutput.
        :type nsd_onboarding_state: NsdOnboardingState
        """
        if nsd_onboarding_state is None:
            raise ValueError("Invalid value for `nsd_onboarding_state`, must not be `None`")

        self._nsd_onboarding_state = nsd_onboarding_state

    @property
    def nsd_operational_state(self):
        """Gets the nsd_operational_state of this CreateSolNetworkPackageOutput.


        :return: The nsd_operational_state of this CreateSolNetworkPackageOutput.
        :rtype: NsdOperationalState
        """
        return self._nsd_operational_state

    @nsd_operational_state.setter
    def nsd_operational_state(self, nsd_operational_state):
        """Sets the nsd_operational_state of this CreateSolNetworkPackageOutput.


        :param nsd_operational_state: The nsd_operational_state of this CreateSolNetworkPackageOutput.
        :type nsd_operational_state: NsdOperationalState
        """
        if nsd_operational_state is None:
            raise ValueError("Invalid value for `nsd_operational_state`, must not be `None`")

        self._nsd_operational_state = nsd_operational_state

    @property
    def nsd_usage_state(self):
        """Gets the nsd_usage_state of this CreateSolNetworkPackageOutput.


        :return: The nsd_usage_state of this CreateSolNetworkPackageOutput.
        :rtype: NsdUsageState
        """
        return self._nsd_usage_state

    @nsd_usage_state.setter
    def nsd_usage_state(self, nsd_usage_state):
        """Sets the nsd_usage_state of this CreateSolNetworkPackageOutput.


        :param nsd_usage_state: The nsd_usage_state of this CreateSolNetworkPackageOutput.
        :type nsd_usage_state: NsdUsageState
        """
        if nsd_usage_state is None:
            raise ValueError("Invalid value for `nsd_usage_state`, must not be `None`")

        self._nsd_usage_state = nsd_usage_state

    @property
    def tags(self):
        """Gets the tags of this CreateSolNetworkPackageOutput.


        :return: The tags of this CreateSolNetworkPackageOutput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSolNetworkPackageOutput.


        :param tags: The tags of this CreateSolNetworkPackageOutput.
        :type tags: Dict
        """

        self._tags = tags
