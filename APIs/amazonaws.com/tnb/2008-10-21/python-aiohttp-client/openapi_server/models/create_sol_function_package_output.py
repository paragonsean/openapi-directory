# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.onboarding_state import OnboardingState
from openapi_server.models.operational_state import OperationalState
from openapi_server.models.usage_state import UsageState
from openapi_server import util


class CreateSolFunctionPackageOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, id: str=None, onboarding_state: OnboardingState=None, operational_state: OperationalState=None, tags: Dict=None, usage_state: UsageState=None):
        """CreateSolFunctionPackageOutput - a model defined in OpenAPI

        :param arn: The arn of this CreateSolFunctionPackageOutput.
        :param id: The id of this CreateSolFunctionPackageOutput.
        :param onboarding_state: The onboarding_state of this CreateSolFunctionPackageOutput.
        :param operational_state: The operational_state of this CreateSolFunctionPackageOutput.
        :param tags: The tags of this CreateSolFunctionPackageOutput.
        :param usage_state: The usage_state of this CreateSolFunctionPackageOutput.
        """
        self.openapi_types = {
            'arn': str,
            'id': str,
            'onboarding_state': OnboardingState,
            'operational_state': OperationalState,
            'tags': Dict,
            'usage_state': UsageState
        }

        self.attribute_map = {
            'arn': 'arn',
            'id': 'id',
            'onboarding_state': 'onboardingState',
            'operational_state': 'operationalState',
            'tags': 'tags',
            'usage_state': 'usageState'
        }

        self._arn = arn
        self._id = id
        self._onboarding_state = onboarding_state
        self._operational_state = operational_state
        self._tags = tags
        self._usage_state = usage_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSolFunctionPackageOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSolFunctionPackageOutput of this CreateSolFunctionPackageOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this CreateSolFunctionPackageOutput.


        :return: The arn of this CreateSolFunctionPackageOutput.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CreateSolFunctionPackageOutput.


        :param arn: The arn of this CreateSolFunctionPackageOutput.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def id(self):
        """Gets the id of this CreateSolFunctionPackageOutput.


        :return: The id of this CreateSolFunctionPackageOutput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateSolFunctionPackageOutput.


        :param id: The id of this CreateSolFunctionPackageOutput.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def onboarding_state(self):
        """Gets the onboarding_state of this CreateSolFunctionPackageOutput.


        :return: The onboarding_state of this CreateSolFunctionPackageOutput.
        :rtype: OnboardingState
        """
        return self._onboarding_state

    @onboarding_state.setter
    def onboarding_state(self, onboarding_state):
        """Sets the onboarding_state of this CreateSolFunctionPackageOutput.


        :param onboarding_state: The onboarding_state of this CreateSolFunctionPackageOutput.
        :type onboarding_state: OnboardingState
        """
        if onboarding_state is None:
            raise ValueError("Invalid value for `onboarding_state`, must not be `None`")

        self._onboarding_state = onboarding_state

    @property
    def operational_state(self):
        """Gets the operational_state of this CreateSolFunctionPackageOutput.


        :return: The operational_state of this CreateSolFunctionPackageOutput.
        :rtype: OperationalState
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state):
        """Sets the operational_state of this CreateSolFunctionPackageOutput.


        :param operational_state: The operational_state of this CreateSolFunctionPackageOutput.
        :type operational_state: OperationalState
        """
        if operational_state is None:
            raise ValueError("Invalid value for `operational_state`, must not be `None`")

        self._operational_state = operational_state

    @property
    def tags(self):
        """Gets the tags of this CreateSolFunctionPackageOutput.


        :return: The tags of this CreateSolFunctionPackageOutput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSolFunctionPackageOutput.


        :param tags: The tags of this CreateSolFunctionPackageOutput.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def usage_state(self):
        """Gets the usage_state of this CreateSolFunctionPackageOutput.


        :return: The usage_state of this CreateSolFunctionPackageOutput.
        :rtype: UsageState
        """
        return self._usage_state

    @usage_state.setter
    def usage_state(self, usage_state):
        """Sets the usage_state of this CreateSolFunctionPackageOutput.


        :param usage_state: The usage_state of this CreateSolFunctionPackageOutput.
        :type usage_state: UsageState
        """
        if usage_state is None:
            raise ValueError("Invalid value for `usage_state`, must not be `None`")

        self._usage_state = usage_state
