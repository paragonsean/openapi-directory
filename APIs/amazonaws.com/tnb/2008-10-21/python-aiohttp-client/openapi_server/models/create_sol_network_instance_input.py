# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateSolNetworkInstanceInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ns_description: str=None, ns_name: str=None, nsd_info_id: str=None, tags: Dict=None):
        """CreateSolNetworkInstanceInput - a model defined in OpenAPI

        :param ns_description: The ns_description of this CreateSolNetworkInstanceInput.
        :param ns_name: The ns_name of this CreateSolNetworkInstanceInput.
        :param nsd_info_id: The nsd_info_id of this CreateSolNetworkInstanceInput.
        :param tags: The tags of this CreateSolNetworkInstanceInput.
        """
        self.openapi_types = {
            'ns_description': str,
            'ns_name': str,
            'nsd_info_id': str,
            'tags': Dict
        }

        self.attribute_map = {
            'ns_description': 'nsDescription',
            'ns_name': 'nsName',
            'nsd_info_id': 'nsdInfoId',
            'tags': 'tags'
        }

        self._ns_description = ns_description
        self._ns_name = ns_name
        self._nsd_info_id = nsd_info_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSolNetworkInstanceInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSolNetworkInstanceInput of this CreateSolNetworkInstanceInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ns_description(self):
        """Gets the ns_description of this CreateSolNetworkInstanceInput.


        :return: The ns_description of this CreateSolNetworkInstanceInput.
        :rtype: str
        """
        return self._ns_description

    @ns_description.setter
    def ns_description(self, ns_description):
        """Sets the ns_description of this CreateSolNetworkInstanceInput.


        :param ns_description: The ns_description of this CreateSolNetworkInstanceInput.
        :type ns_description: str
        """

        self._ns_description = ns_description

    @property
    def ns_name(self):
        """Gets the ns_name of this CreateSolNetworkInstanceInput.


        :return: The ns_name of this CreateSolNetworkInstanceInput.
        :rtype: str
        """
        return self._ns_name

    @ns_name.setter
    def ns_name(self, ns_name):
        """Sets the ns_name of this CreateSolNetworkInstanceInput.


        :param ns_name: The ns_name of this CreateSolNetworkInstanceInput.
        :type ns_name: str
        """
        if ns_name is None:
            raise ValueError("Invalid value for `ns_name`, must not be `None`")

        self._ns_name = ns_name

    @property
    def nsd_info_id(self):
        """Gets the nsd_info_id of this CreateSolNetworkInstanceInput.


        :return: The nsd_info_id of this CreateSolNetworkInstanceInput.
        :rtype: str
        """
        return self._nsd_info_id

    @nsd_info_id.setter
    def nsd_info_id(self, nsd_info_id):
        """Sets the nsd_info_id of this CreateSolNetworkInstanceInput.


        :param nsd_info_id: The nsd_info_id of this CreateSolNetworkInstanceInput.
        :type nsd_info_id: str
        """
        if nsd_info_id is None:
            raise ValueError("Invalid value for `nsd_info_id`, must not be `None`")

        self._nsd_info_id = nsd_info_id

    @property
    def tags(self):
        """Gets the tags of this CreateSolNetworkInstanceInput.


        :return: The tags of this CreateSolNetworkInstanceInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSolNetworkInstanceInput.


        :param tags: The tags of this CreateSolNetworkInstanceInput.
        :type tags: Dict
        """

        self._tags = tags
