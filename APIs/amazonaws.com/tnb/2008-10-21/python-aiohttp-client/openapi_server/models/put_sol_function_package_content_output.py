# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_sol_function_package_content_output_metadata import PutSolFunctionPackageContentOutputMetadata
from openapi_server import util


class PutSolFunctionPackageContentOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, metadata: PutSolFunctionPackageContentOutputMetadata=None, vnf_product_name: str=None, vnf_provider: str=None, vnfd_id: str=None, vnfd_version: str=None):
        """PutSolFunctionPackageContentOutput - a model defined in OpenAPI

        :param id: The id of this PutSolFunctionPackageContentOutput.
        :param metadata: The metadata of this PutSolFunctionPackageContentOutput.
        :param vnf_product_name: The vnf_product_name of this PutSolFunctionPackageContentOutput.
        :param vnf_provider: The vnf_provider of this PutSolFunctionPackageContentOutput.
        :param vnfd_id: The vnfd_id of this PutSolFunctionPackageContentOutput.
        :param vnfd_version: The vnfd_version of this PutSolFunctionPackageContentOutput.
        """
        self.openapi_types = {
            'id': str,
            'metadata': PutSolFunctionPackageContentOutputMetadata,
            'vnf_product_name': str,
            'vnf_provider': str,
            'vnfd_id': str,
            'vnfd_version': str
        }

        self.attribute_map = {
            'id': 'id',
            'metadata': 'metadata',
            'vnf_product_name': 'vnfProductName',
            'vnf_provider': 'vnfProvider',
            'vnfd_id': 'vnfdId',
            'vnfd_version': 'vnfdVersion'
        }

        self._id = id
        self._metadata = metadata
        self._vnf_product_name = vnf_product_name
        self._vnf_provider = vnf_provider
        self._vnfd_id = vnfd_id
        self._vnfd_version = vnfd_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutSolFunctionPackageContentOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutSolFunctionPackageContentOutput of this PutSolFunctionPackageContentOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PutSolFunctionPackageContentOutput.


        :return: The id of this PutSolFunctionPackageContentOutput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PutSolFunctionPackageContentOutput.


        :param id: The id of this PutSolFunctionPackageContentOutput.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this PutSolFunctionPackageContentOutput.


        :return: The metadata of this PutSolFunctionPackageContentOutput.
        :rtype: PutSolFunctionPackageContentOutputMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PutSolFunctionPackageContentOutput.


        :param metadata: The metadata of this PutSolFunctionPackageContentOutput.
        :type metadata: PutSolFunctionPackageContentOutputMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def vnf_product_name(self):
        """Gets the vnf_product_name of this PutSolFunctionPackageContentOutput.


        :return: The vnf_product_name of this PutSolFunctionPackageContentOutput.
        :rtype: str
        """
        return self._vnf_product_name

    @vnf_product_name.setter
    def vnf_product_name(self, vnf_product_name):
        """Sets the vnf_product_name of this PutSolFunctionPackageContentOutput.


        :param vnf_product_name: The vnf_product_name of this PutSolFunctionPackageContentOutput.
        :type vnf_product_name: str
        """
        if vnf_product_name is None:
            raise ValueError("Invalid value for `vnf_product_name`, must not be `None`")

        self._vnf_product_name = vnf_product_name

    @property
    def vnf_provider(self):
        """Gets the vnf_provider of this PutSolFunctionPackageContentOutput.


        :return: The vnf_provider of this PutSolFunctionPackageContentOutput.
        :rtype: str
        """
        return self._vnf_provider

    @vnf_provider.setter
    def vnf_provider(self, vnf_provider):
        """Sets the vnf_provider of this PutSolFunctionPackageContentOutput.


        :param vnf_provider: The vnf_provider of this PutSolFunctionPackageContentOutput.
        :type vnf_provider: str
        """
        if vnf_provider is None:
            raise ValueError("Invalid value for `vnf_provider`, must not be `None`")

        self._vnf_provider = vnf_provider

    @property
    def vnfd_id(self):
        """Gets the vnfd_id of this PutSolFunctionPackageContentOutput.


        :return: The vnfd_id of this PutSolFunctionPackageContentOutput.
        :rtype: str
        """
        return self._vnfd_id

    @vnfd_id.setter
    def vnfd_id(self, vnfd_id):
        """Sets the vnfd_id of this PutSolFunctionPackageContentOutput.


        :param vnfd_id: The vnfd_id of this PutSolFunctionPackageContentOutput.
        :type vnfd_id: str
        """
        if vnfd_id is None:
            raise ValueError("Invalid value for `vnfd_id`, must not be `None`")

        self._vnfd_id = vnfd_id

    @property
    def vnfd_version(self):
        """Gets the vnfd_version of this PutSolFunctionPackageContentOutput.


        :return: The vnfd_version of this PutSolFunctionPackageContentOutput.
        :rtype: str
        """
        return self._vnfd_version

    @vnfd_version.setter
    def vnfd_version(self, vnfd_version):
        """Sets the vnfd_version of this PutSolFunctionPackageContentOutput.


        :param vnfd_version: The vnfd_version of this PutSolFunctionPackageContentOutput.
        :type vnfd_version: str
        """
        if vnfd_version is None:
            raise ValueError("Invalid value for `vnfd_version`, must not be `None`")

        self._vnfd_version = vnfd_version
