# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_sol_network_instance_request_modify_vnf_info_data import UpdateSolNetworkInstanceRequestModifyVnfInfoData
from openapi_server import util


class UpdateSolNetworkInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, modify_vnf_info_data: UpdateSolNetworkInstanceRequestModifyVnfInfoData=None, tags: Dict[str, str]=None, update_type: str=None):
        """UpdateSolNetworkInstanceRequest - a model defined in OpenAPI

        :param modify_vnf_info_data: The modify_vnf_info_data of this UpdateSolNetworkInstanceRequest.
        :param tags: The tags of this UpdateSolNetworkInstanceRequest.
        :param update_type: The update_type of this UpdateSolNetworkInstanceRequest.
        """
        self.openapi_types = {
            'modify_vnf_info_data': UpdateSolNetworkInstanceRequestModifyVnfInfoData,
            'tags': Dict[str, str],
            'update_type': str
        }

        self.attribute_map = {
            'modify_vnf_info_data': 'modifyVnfInfoData',
            'tags': 'tags',
            'update_type': 'updateType'
        }

        self._modify_vnf_info_data = modify_vnf_info_data
        self._tags = tags
        self._update_type = update_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSolNetworkInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSolNetworkInstance_request of this UpdateSolNetworkInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def modify_vnf_info_data(self):
        """Gets the modify_vnf_info_data of this UpdateSolNetworkInstanceRequest.


        :return: The modify_vnf_info_data of this UpdateSolNetworkInstanceRequest.
        :rtype: UpdateSolNetworkInstanceRequestModifyVnfInfoData
        """
        return self._modify_vnf_info_data

    @modify_vnf_info_data.setter
    def modify_vnf_info_data(self, modify_vnf_info_data):
        """Sets the modify_vnf_info_data of this UpdateSolNetworkInstanceRequest.


        :param modify_vnf_info_data: The modify_vnf_info_data of this UpdateSolNetworkInstanceRequest.
        :type modify_vnf_info_data: UpdateSolNetworkInstanceRequestModifyVnfInfoData
        """

        self._modify_vnf_info_data = modify_vnf_info_data

    @property
    def tags(self):
        """Gets the tags of this UpdateSolNetworkInstanceRequest.

        A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. When you use this API, the tags are transferred to the network operation that is created. Use tags to search and filter your resources or track your Amazon Web Services costs.

        :return: The tags of this UpdateSolNetworkInstanceRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateSolNetworkInstanceRequest.

        A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. When you use this API, the tags are transferred to the network operation that is created. Use tags to search and filter your resources or track your Amazon Web Services costs.

        :param tags: The tags of this UpdateSolNetworkInstanceRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def update_type(self):
        """Gets the update_type of this UpdateSolNetworkInstanceRequest.

        The type of update.

        :return: The update_type of this UpdateSolNetworkInstanceRequest.
        :rtype: str
        """
        return self._update_type

    @update_type.setter
    def update_type(self, update_type):
        """Sets the update_type of this UpdateSolNetworkInstanceRequest.

        The type of update.

        :param update_type: The update_type of this UpdateSolNetworkInstanceRequest.
        :type update_type: str
        """
        allowed_values = ["MODIFY_VNF_INFORMATION"]  # noqa: E501
        if update_type not in allowed_values:
            raise ValueError(
                "Invalid value for `update_type` ({0}), must be one of {1}"
                .format(update_type, allowed_values)
            )

        self._update_type = update_type
