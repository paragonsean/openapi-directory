# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSolNetworkPackageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nsd_operational_state: str=None):
        """UpdateSolNetworkPackageRequest - a model defined in OpenAPI

        :param nsd_operational_state: The nsd_operational_state of this UpdateSolNetworkPackageRequest.
        """
        self.openapi_types = {
            'nsd_operational_state': str
        }

        self.attribute_map = {
            'nsd_operational_state': 'nsdOperationalState'
        }

        self._nsd_operational_state = nsd_operational_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSolNetworkPackageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSolNetworkPackage_request of this UpdateSolNetworkPackageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nsd_operational_state(self):
        """Gets the nsd_operational_state of this UpdateSolNetworkPackageRequest.

        Operational state of the network service descriptor in the network package.

        :return: The nsd_operational_state of this UpdateSolNetworkPackageRequest.
        :rtype: str
        """
        return self._nsd_operational_state

    @nsd_operational_state.setter
    def nsd_operational_state(self, nsd_operational_state):
        """Sets the nsd_operational_state of this UpdateSolNetworkPackageRequest.

        Operational state of the network service descriptor in the network package.

        :param nsd_operational_state: The nsd_operational_state of this UpdateSolNetworkPackageRequest.
        :type nsd_operational_state: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if nsd_operational_state not in allowed_values:
            raise ValueError(
                "Invalid value for `nsd_operational_state` ({0}), must be one of {1}"
                .format(nsd_operational_state, allowed_values)
            )

        self._nsd_operational_state = nsd_operational_state
