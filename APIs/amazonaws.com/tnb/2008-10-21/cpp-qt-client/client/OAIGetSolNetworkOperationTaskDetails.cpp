/**
 * AWS Telco Network Builder
 *  Amazon Web Services Telco Network Builder (TNB) is a network automation service that helps you deploy and manage telecom networks. AWS TNB helps you with the lifecycle management of your telecommunication network functions throughout planning, deployment, and post-deployment activities.
 *
 * The version of the OpenAPI document: 2008-10-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSolNetworkOperationTaskDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSolNetworkOperationTaskDetails::OAIGetSolNetworkOperationTaskDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSolNetworkOperationTaskDetails::OAIGetSolNetworkOperationTaskDetails() {
    this->initializeModel();
}

OAIGetSolNetworkOperationTaskDetails::~OAIGetSolNetworkOperationTaskDetails() {}

void OAIGetSolNetworkOperationTaskDetails::initializeModel() {

    m_task_context_isSet = false;
    m_task_context_isValid = false;

    m_task_end_time_isSet = false;
    m_task_end_time_isValid = false;

    m_task_error_details_isSet = false;
    m_task_error_details_isValid = false;

    m_task_name_isSet = false;
    m_task_name_isValid = false;

    m_task_start_time_isSet = false;
    m_task_start_time_isValid = false;

    m_task_status_isSet = false;
    m_task_status_isValid = false;
}

void OAIGetSolNetworkOperationTaskDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSolNetworkOperationTaskDetails::fromJsonObject(QJsonObject json) {

    m_task_context_isValid = ::OpenAPI::fromJsonValue(m_task_context, json[QString("taskContext")]);
    m_task_context_isSet = !json[QString("taskContext")].isNull() && m_task_context_isValid;

    m_task_end_time_isValid = ::OpenAPI::fromJsonValue(m_task_end_time, json[QString("taskEndTime")]);
    m_task_end_time_isSet = !json[QString("taskEndTime")].isNull() && m_task_end_time_isValid;

    m_task_error_details_isValid = ::OpenAPI::fromJsonValue(m_task_error_details, json[QString("taskErrorDetails")]);
    m_task_error_details_isSet = !json[QString("taskErrorDetails")].isNull() && m_task_error_details_isValid;

    m_task_name_isValid = ::OpenAPI::fromJsonValue(m_task_name, json[QString("taskName")]);
    m_task_name_isSet = !json[QString("taskName")].isNull() && m_task_name_isValid;

    m_task_start_time_isValid = ::OpenAPI::fromJsonValue(m_task_start_time, json[QString("taskStartTime")]);
    m_task_start_time_isSet = !json[QString("taskStartTime")].isNull() && m_task_start_time_isValid;

    m_task_status_isValid = ::OpenAPI::fromJsonValue(m_task_status, json[QString("taskStatus")]);
    m_task_status_isSet = !json[QString("taskStatus")].isNull() && m_task_status_isValid;
}

QString OAIGetSolNetworkOperationTaskDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSolNetworkOperationTaskDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_task_context.isSet()) {
        obj.insert(QString("taskContext"), ::OpenAPI::toJsonValue(m_task_context));
    }
    if (m_task_end_time_isSet) {
        obj.insert(QString("taskEndTime"), ::OpenAPI::toJsonValue(m_task_end_time));
    }
    if (m_task_error_details.isSet()) {
        obj.insert(QString("taskErrorDetails"), ::OpenAPI::toJsonValue(m_task_error_details));
    }
    if (m_task_name_isSet) {
        obj.insert(QString("taskName"), ::OpenAPI::toJsonValue(m_task_name));
    }
    if (m_task_start_time_isSet) {
        obj.insert(QString("taskStartTime"), ::OpenAPI::toJsonValue(m_task_start_time));
    }
    if (m_task_status.isSet()) {
        obj.insert(QString("taskStatus"), ::OpenAPI::toJsonValue(m_task_status));
    }
    return obj;
}

QMap OAIGetSolNetworkOperationTaskDetails::getTaskContext() const {
    return m_task_context;
}
void OAIGetSolNetworkOperationTaskDetails::setTaskContext(const QMap &task_context) {
    m_task_context = task_context;
    m_task_context_isSet = true;
}

bool OAIGetSolNetworkOperationTaskDetails::is_task_context_Set() const{
    return m_task_context_isSet;
}

bool OAIGetSolNetworkOperationTaskDetails::is_task_context_Valid() const{
    return m_task_context_isValid;
}

QDateTime OAIGetSolNetworkOperationTaskDetails::getTaskEndTime() const {
    return m_task_end_time;
}
void OAIGetSolNetworkOperationTaskDetails::setTaskEndTime(const QDateTime &task_end_time) {
    m_task_end_time = task_end_time;
    m_task_end_time_isSet = true;
}

bool OAIGetSolNetworkOperationTaskDetails::is_task_end_time_Set() const{
    return m_task_end_time_isSet;
}

bool OAIGetSolNetworkOperationTaskDetails::is_task_end_time_Valid() const{
    return m_task_end_time_isValid;
}

OAIGetSolNetworkOperationTaskDetails_taskErrorDetails OAIGetSolNetworkOperationTaskDetails::getTaskErrorDetails() const {
    return m_task_error_details;
}
void OAIGetSolNetworkOperationTaskDetails::setTaskErrorDetails(const OAIGetSolNetworkOperationTaskDetails_taskErrorDetails &task_error_details) {
    m_task_error_details = task_error_details;
    m_task_error_details_isSet = true;
}

bool OAIGetSolNetworkOperationTaskDetails::is_task_error_details_Set() const{
    return m_task_error_details_isSet;
}

bool OAIGetSolNetworkOperationTaskDetails::is_task_error_details_Valid() const{
    return m_task_error_details_isValid;
}

QString OAIGetSolNetworkOperationTaskDetails::getTaskName() const {
    return m_task_name;
}
void OAIGetSolNetworkOperationTaskDetails::setTaskName(const QString &task_name) {
    m_task_name = task_name;
    m_task_name_isSet = true;
}

bool OAIGetSolNetworkOperationTaskDetails::is_task_name_Set() const{
    return m_task_name_isSet;
}

bool OAIGetSolNetworkOperationTaskDetails::is_task_name_Valid() const{
    return m_task_name_isValid;
}

QDateTime OAIGetSolNetworkOperationTaskDetails::getTaskStartTime() const {
    return m_task_start_time;
}
void OAIGetSolNetworkOperationTaskDetails::setTaskStartTime(const QDateTime &task_start_time) {
    m_task_start_time = task_start_time;
    m_task_start_time_isSet = true;
}

bool OAIGetSolNetworkOperationTaskDetails::is_task_start_time_Set() const{
    return m_task_start_time_isSet;
}

bool OAIGetSolNetworkOperationTaskDetails::is_task_start_time_Valid() const{
    return m_task_start_time_isValid;
}

OAITaskStatus OAIGetSolNetworkOperationTaskDetails::getTaskStatus() const {
    return m_task_status;
}
void OAIGetSolNetworkOperationTaskDetails::setTaskStatus(const OAITaskStatus &task_status) {
    m_task_status = task_status;
    m_task_status_isSet = true;
}

bool OAIGetSolNetworkOperationTaskDetails::is_task_status_Set() const{
    return m_task_status_isSet;
}

bool OAIGetSolNetworkOperationTaskDetails::is_task_status_Valid() const{
    return m_task_status_isValid;
}

bool OAIGetSolNetworkOperationTaskDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_error_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSolNetworkOperationTaskDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
