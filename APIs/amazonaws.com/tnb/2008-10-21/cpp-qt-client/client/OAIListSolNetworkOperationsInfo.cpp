/**
 * AWS Telco Network Builder
 *  Amazon Web Services Telco Network Builder (TNB) is a network automation service that helps you deploy and manage telecom networks. AWS TNB helps you with the lifecycle management of your telecommunication network functions throughout planning, deployment, and post-deployment activities.
 *
 * The version of the OpenAPI document: 2008-10-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSolNetworkOperationsInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSolNetworkOperationsInfo::OAIListSolNetworkOperationsInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSolNetworkOperationsInfo::OAIListSolNetworkOperationsInfo() {
    this->initializeModel();
}

OAIListSolNetworkOperationsInfo::~OAIListSolNetworkOperationsInfo() {}

void OAIListSolNetworkOperationsInfo::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lcm_operation_type_isSet = false;
    m_lcm_operation_type_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_ns_instance_id_isSet = false;
    m_ns_instance_id_isValid = false;

    m_operation_state_isSet = false;
    m_operation_state_isValid = false;
}

void OAIListSolNetworkOperationsInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSolNetworkOperationsInfo::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lcm_operation_type_isValid = ::OpenAPI::fromJsonValue(m_lcm_operation_type, json[QString("lcmOperationType")]);
    m_lcm_operation_type_isSet = !json[QString("lcmOperationType")].isNull() && m_lcm_operation_type_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_ns_instance_id_isValid = ::OpenAPI::fromJsonValue(m_ns_instance_id, json[QString("nsInstanceId")]);
    m_ns_instance_id_isSet = !json[QString("nsInstanceId")].isNull() && m_ns_instance_id_isValid;

    m_operation_state_isValid = ::OpenAPI::fromJsonValue(m_operation_state, json[QString("operationState")]);
    m_operation_state_isSet = !json[QString("operationState")].isNull() && m_operation_state_isValid;
}

QString OAIListSolNetworkOperationsInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSolNetworkOperationsInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lcm_operation_type.isSet()) {
        obj.insert(QString("lcmOperationType"), ::OpenAPI::toJsonValue(m_lcm_operation_type));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_ns_instance_id_isSet) {
        obj.insert(QString("nsInstanceId"), ::OpenAPI::toJsonValue(m_ns_instance_id));
    }
    if (m_operation_state.isSet()) {
        obj.insert(QString("operationState"), ::OpenAPI::toJsonValue(m_operation_state));
    }
    return obj;
}

QString OAIListSolNetworkOperationsInfo::getArn() const {
    return m_arn;
}
void OAIListSolNetworkOperationsInfo::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIListSolNetworkOperationsInfo::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIListSolNetworkOperationsInfo::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIListSolNetworkOperationsInfo_error OAIListSolNetworkOperationsInfo::getError() const {
    return m_error;
}
void OAIListSolNetworkOperationsInfo::setError(const OAIListSolNetworkOperationsInfo_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIListSolNetworkOperationsInfo::is_error_Set() const{
    return m_error_isSet;
}

bool OAIListSolNetworkOperationsInfo::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIListSolNetworkOperationsInfo::getId() const {
    return m_id;
}
void OAIListSolNetworkOperationsInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIListSolNetworkOperationsInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIListSolNetworkOperationsInfo::is_id_Valid() const{
    return m_id_isValid;
}

OAILcmOperationType OAIListSolNetworkOperationsInfo::getLcmOperationType() const {
    return m_lcm_operation_type;
}
void OAIListSolNetworkOperationsInfo::setLcmOperationType(const OAILcmOperationType &lcm_operation_type) {
    m_lcm_operation_type = lcm_operation_type;
    m_lcm_operation_type_isSet = true;
}

bool OAIListSolNetworkOperationsInfo::is_lcm_operation_type_Set() const{
    return m_lcm_operation_type_isSet;
}

bool OAIListSolNetworkOperationsInfo::is_lcm_operation_type_Valid() const{
    return m_lcm_operation_type_isValid;
}

OAIListSolNetworkOperationsInfo_metadata OAIListSolNetworkOperationsInfo::getMetadata() const {
    return m_metadata;
}
void OAIListSolNetworkOperationsInfo::setMetadata(const OAIListSolNetworkOperationsInfo_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIListSolNetworkOperationsInfo::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIListSolNetworkOperationsInfo::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIListSolNetworkOperationsInfo::getNsInstanceId() const {
    return m_ns_instance_id;
}
void OAIListSolNetworkOperationsInfo::setNsInstanceId(const QString &ns_instance_id) {
    m_ns_instance_id = ns_instance_id;
    m_ns_instance_id_isSet = true;
}

bool OAIListSolNetworkOperationsInfo::is_ns_instance_id_Set() const{
    return m_ns_instance_id_isSet;
}

bool OAIListSolNetworkOperationsInfo::is_ns_instance_id_Valid() const{
    return m_ns_instance_id_isValid;
}

OAINsLcmOperationState OAIListSolNetworkOperationsInfo::getOperationState() const {
    return m_operation_state;
}
void OAIListSolNetworkOperationsInfo::setOperationState(const OAINsLcmOperationState &operation_state) {
    m_operation_state = operation_state;
    m_operation_state_isSet = true;
}

bool OAIListSolNetworkOperationsInfo::is_operation_state_Set() const{
    return m_operation_state_isSet;
}

bool OAIListSolNetworkOperationsInfo::is_operation_state_Valid() const{
    return m_operation_state_isValid;
}

bool OAIListSolNetworkOperationsInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lcm_operation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ns_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSolNetworkOperationsInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_id_isValid && m_lcm_operation_type_isValid && m_ns_instance_id_isValid && m_operation_state_isValid && true;
}

} // namespace OpenAPI
