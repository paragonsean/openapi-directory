/**
 * AWS Telco Network Builder
 *  Amazon Web Services Telco Network Builder (TNB) is a network automation service that helps you deploy and manage telecom networks. AWS TNB helps you with the lifecycle management of your telecommunication network functions throughout planning, deployment, and post-deployment activities.
 *
 * The version of the OpenAPI document: 2008-10-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSolNetworkInstanceOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSolNetworkInstanceOutput::OAIGetSolNetworkInstanceOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSolNetworkInstanceOutput::OAIGetSolNetworkInstanceOutput() {
    this->initializeModel();
}

OAIGetSolNetworkInstanceOutput::~OAIGetSolNetworkInstanceOutput() {}

void OAIGetSolNetworkInstanceOutput::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lcm_op_info_isSet = false;
    m_lcm_op_info_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_ns_instance_description_isSet = false;
    m_ns_instance_description_isValid = false;

    m_ns_instance_name_isSet = false;
    m_ns_instance_name_isValid = false;

    m_ns_state_isSet = false;
    m_ns_state_isValid = false;

    m_nsd_id_isSet = false;
    m_nsd_id_isValid = false;

    m_nsd_info_id_isSet = false;
    m_nsd_info_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetSolNetworkInstanceOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSolNetworkInstanceOutput::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lcm_op_info_isValid = ::OpenAPI::fromJsonValue(m_lcm_op_info, json[QString("lcmOpInfo")]);
    m_lcm_op_info_isSet = !json[QString("lcmOpInfo")].isNull() && m_lcm_op_info_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_ns_instance_description_isValid = ::OpenAPI::fromJsonValue(m_ns_instance_description, json[QString("nsInstanceDescription")]);
    m_ns_instance_description_isSet = !json[QString("nsInstanceDescription")].isNull() && m_ns_instance_description_isValid;

    m_ns_instance_name_isValid = ::OpenAPI::fromJsonValue(m_ns_instance_name, json[QString("nsInstanceName")]);
    m_ns_instance_name_isSet = !json[QString("nsInstanceName")].isNull() && m_ns_instance_name_isValid;

    m_ns_state_isValid = ::OpenAPI::fromJsonValue(m_ns_state, json[QString("nsState")]);
    m_ns_state_isSet = !json[QString("nsState")].isNull() && m_ns_state_isValid;

    m_nsd_id_isValid = ::OpenAPI::fromJsonValue(m_nsd_id, json[QString("nsdId")]);
    m_nsd_id_isSet = !json[QString("nsdId")].isNull() && m_nsd_id_isValid;

    m_nsd_info_id_isValid = ::OpenAPI::fromJsonValue(m_nsd_info_id, json[QString("nsdInfoId")]);
    m_nsd_info_id_isSet = !json[QString("nsdInfoId")].isNull() && m_nsd_info_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetSolNetworkInstanceOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSolNetworkInstanceOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lcm_op_info.isSet()) {
        obj.insert(QString("lcmOpInfo"), ::OpenAPI::toJsonValue(m_lcm_op_info));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_ns_instance_description_isSet) {
        obj.insert(QString("nsInstanceDescription"), ::OpenAPI::toJsonValue(m_ns_instance_description));
    }
    if (m_ns_instance_name_isSet) {
        obj.insert(QString("nsInstanceName"), ::OpenAPI::toJsonValue(m_ns_instance_name));
    }
    if (m_ns_state.isSet()) {
        obj.insert(QString("nsState"), ::OpenAPI::toJsonValue(m_ns_state));
    }
    if (m_nsd_id_isSet) {
        obj.insert(QString("nsdId"), ::OpenAPI::toJsonValue(m_nsd_id));
    }
    if (m_nsd_info_id_isSet) {
        obj.insert(QString("nsdInfoId"), ::OpenAPI::toJsonValue(m_nsd_info_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetSolNetworkInstanceOutput::getArn() const {
    return m_arn;
}
void OAIGetSolNetworkInstanceOutput::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetSolNetworkInstanceOutput::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetSolNetworkInstanceOutput::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetSolNetworkInstanceOutput::getId() const {
    return m_id;
}
void OAIGetSolNetworkInstanceOutput::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetSolNetworkInstanceOutput::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetSolNetworkInstanceOutput::is_id_Valid() const{
    return m_id_isValid;
}

OAILcmOperationInfo OAIGetSolNetworkInstanceOutput::getLcmOpInfo() const {
    return m_lcm_op_info;
}
void OAIGetSolNetworkInstanceOutput::setLcmOpInfo(const OAILcmOperationInfo &lcm_op_info) {
    m_lcm_op_info = lcm_op_info;
    m_lcm_op_info_isSet = true;
}

bool OAIGetSolNetworkInstanceOutput::is_lcm_op_info_Set() const{
    return m_lcm_op_info_isSet;
}

bool OAIGetSolNetworkInstanceOutput::is_lcm_op_info_Valid() const{
    return m_lcm_op_info_isValid;
}

OAIGetSolNetworkInstanceMetadata OAIGetSolNetworkInstanceOutput::getMetadata() const {
    return m_metadata;
}
void OAIGetSolNetworkInstanceOutput::setMetadata(const OAIGetSolNetworkInstanceMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGetSolNetworkInstanceOutput::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGetSolNetworkInstanceOutput::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIGetSolNetworkInstanceOutput::getNsInstanceDescription() const {
    return m_ns_instance_description;
}
void OAIGetSolNetworkInstanceOutput::setNsInstanceDescription(const QString &ns_instance_description) {
    m_ns_instance_description = ns_instance_description;
    m_ns_instance_description_isSet = true;
}

bool OAIGetSolNetworkInstanceOutput::is_ns_instance_description_Set() const{
    return m_ns_instance_description_isSet;
}

bool OAIGetSolNetworkInstanceOutput::is_ns_instance_description_Valid() const{
    return m_ns_instance_description_isValid;
}

QString OAIGetSolNetworkInstanceOutput::getNsInstanceName() const {
    return m_ns_instance_name;
}
void OAIGetSolNetworkInstanceOutput::setNsInstanceName(const QString &ns_instance_name) {
    m_ns_instance_name = ns_instance_name;
    m_ns_instance_name_isSet = true;
}

bool OAIGetSolNetworkInstanceOutput::is_ns_instance_name_Set() const{
    return m_ns_instance_name_isSet;
}

bool OAIGetSolNetworkInstanceOutput::is_ns_instance_name_Valid() const{
    return m_ns_instance_name_isValid;
}

OAINsState OAIGetSolNetworkInstanceOutput::getNsState() const {
    return m_ns_state;
}
void OAIGetSolNetworkInstanceOutput::setNsState(const OAINsState &ns_state) {
    m_ns_state = ns_state;
    m_ns_state_isSet = true;
}

bool OAIGetSolNetworkInstanceOutput::is_ns_state_Set() const{
    return m_ns_state_isSet;
}

bool OAIGetSolNetworkInstanceOutput::is_ns_state_Valid() const{
    return m_ns_state_isValid;
}

QString OAIGetSolNetworkInstanceOutput::getNsdId() const {
    return m_nsd_id;
}
void OAIGetSolNetworkInstanceOutput::setNsdId(const QString &nsd_id) {
    m_nsd_id = nsd_id;
    m_nsd_id_isSet = true;
}

bool OAIGetSolNetworkInstanceOutput::is_nsd_id_Set() const{
    return m_nsd_id_isSet;
}

bool OAIGetSolNetworkInstanceOutput::is_nsd_id_Valid() const{
    return m_nsd_id_isValid;
}

QString OAIGetSolNetworkInstanceOutput::getNsdInfoId() const {
    return m_nsd_info_id;
}
void OAIGetSolNetworkInstanceOutput::setNsdInfoId(const QString &nsd_info_id) {
    m_nsd_info_id = nsd_info_id;
    m_nsd_info_id_isSet = true;
}

bool OAIGetSolNetworkInstanceOutput::is_nsd_info_id_Set() const{
    return m_nsd_info_id_isSet;
}

bool OAIGetSolNetworkInstanceOutput::is_nsd_info_id_Valid() const{
    return m_nsd_info_id_isValid;
}

QMap OAIGetSolNetworkInstanceOutput::getTags() const {
    return m_tags;
}
void OAIGetSolNetworkInstanceOutput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetSolNetworkInstanceOutput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetSolNetworkInstanceOutput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetSolNetworkInstanceOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lcm_op_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ns_instance_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ns_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ns_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsd_info_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSolNetworkInstanceOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_id_isValid && m_metadata_isValid && m_ns_instance_description_isValid && m_ns_instance_name_isValid && m_nsd_id_isValid && m_nsd_info_id_isValid && true;
}

} // namespace OpenAPI
