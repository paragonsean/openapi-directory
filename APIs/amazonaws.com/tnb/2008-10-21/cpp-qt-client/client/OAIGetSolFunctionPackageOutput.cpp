/**
 * AWS Telco Network Builder
 *  Amazon Web Services Telco Network Builder (TNB) is a network automation service that helps you deploy and manage telecom networks. AWS TNB helps you with the lifecycle management of your telecommunication network functions throughout planning, deployment, and post-deployment activities.
 *
 * The version of the OpenAPI document: 2008-10-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSolFunctionPackageOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSolFunctionPackageOutput::OAIGetSolFunctionPackageOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSolFunctionPackageOutput::OAIGetSolFunctionPackageOutput() {
    this->initializeModel();
}

OAIGetSolFunctionPackageOutput::~OAIGetSolFunctionPackageOutput() {}

void OAIGetSolFunctionPackageOutput::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_onboarding_state_isSet = false;
    m_onboarding_state_isValid = false;

    m_operational_state_isSet = false;
    m_operational_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_usage_state_isSet = false;
    m_usage_state_isValid = false;

    m_vnf_product_name_isSet = false;
    m_vnf_product_name_isValid = false;

    m_vnf_provider_isSet = false;
    m_vnf_provider_isValid = false;

    m_vnfd_id_isSet = false;
    m_vnfd_id_isValid = false;

    m_vnfd_version_isSet = false;
    m_vnfd_version_isValid = false;
}

void OAIGetSolFunctionPackageOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSolFunctionPackageOutput::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_onboarding_state_isValid = ::OpenAPI::fromJsonValue(m_onboarding_state, json[QString("onboardingState")]);
    m_onboarding_state_isSet = !json[QString("onboardingState")].isNull() && m_onboarding_state_isValid;

    m_operational_state_isValid = ::OpenAPI::fromJsonValue(m_operational_state, json[QString("operationalState")]);
    m_operational_state_isSet = !json[QString("operationalState")].isNull() && m_operational_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_usage_state_isValid = ::OpenAPI::fromJsonValue(m_usage_state, json[QString("usageState")]);
    m_usage_state_isSet = !json[QString("usageState")].isNull() && m_usage_state_isValid;

    m_vnf_product_name_isValid = ::OpenAPI::fromJsonValue(m_vnf_product_name, json[QString("vnfProductName")]);
    m_vnf_product_name_isSet = !json[QString("vnfProductName")].isNull() && m_vnf_product_name_isValid;

    m_vnf_provider_isValid = ::OpenAPI::fromJsonValue(m_vnf_provider, json[QString("vnfProvider")]);
    m_vnf_provider_isSet = !json[QString("vnfProvider")].isNull() && m_vnf_provider_isValid;

    m_vnfd_id_isValid = ::OpenAPI::fromJsonValue(m_vnfd_id, json[QString("vnfdId")]);
    m_vnfd_id_isSet = !json[QString("vnfdId")].isNull() && m_vnfd_id_isValid;

    m_vnfd_version_isValid = ::OpenAPI::fromJsonValue(m_vnfd_version, json[QString("vnfdVersion")]);
    m_vnfd_version_isSet = !json[QString("vnfdVersion")].isNull() && m_vnfd_version_isValid;
}

QString OAIGetSolFunctionPackageOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSolFunctionPackageOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_onboarding_state.isSet()) {
        obj.insert(QString("onboardingState"), ::OpenAPI::toJsonValue(m_onboarding_state));
    }
    if (m_operational_state.isSet()) {
        obj.insert(QString("operationalState"), ::OpenAPI::toJsonValue(m_operational_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_usage_state.isSet()) {
        obj.insert(QString("usageState"), ::OpenAPI::toJsonValue(m_usage_state));
    }
    if (m_vnf_product_name_isSet) {
        obj.insert(QString("vnfProductName"), ::OpenAPI::toJsonValue(m_vnf_product_name));
    }
    if (m_vnf_provider_isSet) {
        obj.insert(QString("vnfProvider"), ::OpenAPI::toJsonValue(m_vnf_provider));
    }
    if (m_vnfd_id_isSet) {
        obj.insert(QString("vnfdId"), ::OpenAPI::toJsonValue(m_vnfd_id));
    }
    if (m_vnfd_version_isSet) {
        obj.insert(QString("vnfdVersion"), ::OpenAPI::toJsonValue(m_vnfd_version));
    }
    return obj;
}

QString OAIGetSolFunctionPackageOutput::getArn() const {
    return m_arn;
}
void OAIGetSolFunctionPackageOutput::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetSolFunctionPackageOutput::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetSolFunctionPackageOutput::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetSolFunctionPackageOutput::getId() const {
    return m_id;
}
void OAIGetSolFunctionPackageOutput::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetSolFunctionPackageOutput::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetSolFunctionPackageOutput::is_id_Valid() const{
    return m_id_isValid;
}

OAIGetSolFunctionPackageMetadata OAIGetSolFunctionPackageOutput::getMetadata() const {
    return m_metadata;
}
void OAIGetSolFunctionPackageOutput::setMetadata(const OAIGetSolFunctionPackageMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGetSolFunctionPackageOutput::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGetSolFunctionPackageOutput::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIOnboardingState OAIGetSolFunctionPackageOutput::getOnboardingState() const {
    return m_onboarding_state;
}
void OAIGetSolFunctionPackageOutput::setOnboardingState(const OAIOnboardingState &onboarding_state) {
    m_onboarding_state = onboarding_state;
    m_onboarding_state_isSet = true;
}

bool OAIGetSolFunctionPackageOutput::is_onboarding_state_Set() const{
    return m_onboarding_state_isSet;
}

bool OAIGetSolFunctionPackageOutput::is_onboarding_state_Valid() const{
    return m_onboarding_state_isValid;
}

OAIOperationalState OAIGetSolFunctionPackageOutput::getOperationalState() const {
    return m_operational_state;
}
void OAIGetSolFunctionPackageOutput::setOperationalState(const OAIOperationalState &operational_state) {
    m_operational_state = operational_state;
    m_operational_state_isSet = true;
}

bool OAIGetSolFunctionPackageOutput::is_operational_state_Set() const{
    return m_operational_state_isSet;
}

bool OAIGetSolFunctionPackageOutput::is_operational_state_Valid() const{
    return m_operational_state_isValid;
}

QMap OAIGetSolFunctionPackageOutput::getTags() const {
    return m_tags;
}
void OAIGetSolFunctionPackageOutput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetSolFunctionPackageOutput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetSolFunctionPackageOutput::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIUsageState OAIGetSolFunctionPackageOutput::getUsageState() const {
    return m_usage_state;
}
void OAIGetSolFunctionPackageOutput::setUsageState(const OAIUsageState &usage_state) {
    m_usage_state = usage_state;
    m_usage_state_isSet = true;
}

bool OAIGetSolFunctionPackageOutput::is_usage_state_Set() const{
    return m_usage_state_isSet;
}

bool OAIGetSolFunctionPackageOutput::is_usage_state_Valid() const{
    return m_usage_state_isValid;
}

QString OAIGetSolFunctionPackageOutput::getVnfProductName() const {
    return m_vnf_product_name;
}
void OAIGetSolFunctionPackageOutput::setVnfProductName(const QString &vnf_product_name) {
    m_vnf_product_name = vnf_product_name;
    m_vnf_product_name_isSet = true;
}

bool OAIGetSolFunctionPackageOutput::is_vnf_product_name_Set() const{
    return m_vnf_product_name_isSet;
}

bool OAIGetSolFunctionPackageOutput::is_vnf_product_name_Valid() const{
    return m_vnf_product_name_isValid;
}

QString OAIGetSolFunctionPackageOutput::getVnfProvider() const {
    return m_vnf_provider;
}
void OAIGetSolFunctionPackageOutput::setVnfProvider(const QString &vnf_provider) {
    m_vnf_provider = vnf_provider;
    m_vnf_provider_isSet = true;
}

bool OAIGetSolFunctionPackageOutput::is_vnf_provider_Set() const{
    return m_vnf_provider_isSet;
}

bool OAIGetSolFunctionPackageOutput::is_vnf_provider_Valid() const{
    return m_vnf_provider_isValid;
}

QString OAIGetSolFunctionPackageOutput::getVnfdId() const {
    return m_vnfd_id;
}
void OAIGetSolFunctionPackageOutput::setVnfdId(const QString &vnfd_id) {
    m_vnfd_id = vnfd_id;
    m_vnfd_id_isSet = true;
}

bool OAIGetSolFunctionPackageOutput::is_vnfd_id_Set() const{
    return m_vnfd_id_isSet;
}

bool OAIGetSolFunctionPackageOutput::is_vnfd_id_Valid() const{
    return m_vnfd_id_isValid;
}

QString OAIGetSolFunctionPackageOutput::getVnfdVersion() const {
    return m_vnfd_version;
}
void OAIGetSolFunctionPackageOutput::setVnfdVersion(const QString &vnfd_version) {
    m_vnfd_version = vnfd_version;
    m_vnfd_version_isSet = true;
}

bool OAIGetSolFunctionPackageOutput::is_vnfd_version_Set() const{
    return m_vnfd_version_isSet;
}

bool OAIGetSolFunctionPackageOutput::is_vnfd_version_Valid() const{
    return m_vnfd_version_isValid;
}

bool OAIGetSolFunctionPackageOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_onboarding_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operational_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnf_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnf_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnfd_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnfd_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSolFunctionPackageOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_id_isValid && m_onboarding_state_isValid && m_operational_state_isValid && m_usage_state_isValid && true;
}

} // namespace OpenAPI
