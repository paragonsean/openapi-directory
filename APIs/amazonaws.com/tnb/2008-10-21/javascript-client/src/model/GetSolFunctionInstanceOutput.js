/**
 * AWS Telco Network Builder
 *  Amazon Web Services Telco Network Builder (TNB) is a network automation service that helps you deploy and manage telecom networks. AWS TNB helps you with the lifecycle management of your telecommunication network functions throughout planning, deployment, and post-deployment activities.
 *
 * The version of the OpenAPI document: 2008-10-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetSolFunctionInstanceMetadata from './GetSolFunctionInstanceMetadata';
import GetSolVnfInfo from './GetSolVnfInfo';
import VnfInstantiationState from './VnfInstantiationState';

/**
 * The GetSolFunctionInstanceOutput model module.
 * @module model/GetSolFunctionInstanceOutput
 * @version 2008-10-21
 */
class GetSolFunctionInstanceOutput {
    /**
     * Constructs a new <code>GetSolFunctionInstanceOutput</code>.
     * @alias module:model/GetSolFunctionInstanceOutput
     * @param arn {String} 
     * @param id {String} 
     * @param instantiationState {module:model/VnfInstantiationState} 
     * @param metadata {module:model/GetSolFunctionInstanceMetadata} 
     * @param nsInstanceId {String} 
     * @param vnfPkgId {String} 
     * @param vnfdId {String} 
     */
    constructor(arn, id, instantiationState, metadata, nsInstanceId, vnfPkgId, vnfdId) { 
        
        GetSolFunctionInstanceOutput.initialize(this, arn, id, instantiationState, metadata, nsInstanceId, vnfPkgId, vnfdId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, arn, id, instantiationState, metadata, nsInstanceId, vnfPkgId, vnfdId) { 
        obj['arn'] = arn;
        obj['id'] = id;
        obj['instantiationState'] = instantiationState;
        obj['metadata'] = metadata;
        obj['nsInstanceId'] = nsInstanceId;
        obj['vnfPkgId'] = vnfPkgId;
        obj['vnfdId'] = vnfdId;
    }

    /**
     * Constructs a <code>GetSolFunctionInstanceOutput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetSolFunctionInstanceOutput} obj Optional instance to populate.
     * @return {module:model/GetSolFunctionInstanceOutput} The populated <code>GetSolFunctionInstanceOutput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetSolFunctionInstanceOutput();

            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instantiatedVnfInfo')) {
                obj['instantiatedVnfInfo'] = GetSolVnfInfo.constructFromObject(data['instantiatedVnfInfo']);
            }
            if (data.hasOwnProperty('instantiationState')) {
                obj['instantiationState'] = ApiClient.convertToType(data['instantiationState'], VnfInstantiationState);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = GetSolFunctionInstanceMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('nsInstanceId')) {
                obj['nsInstanceId'] = ApiClient.convertToType(data['nsInstanceId'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
            if (data.hasOwnProperty('vnfPkgId')) {
                obj['vnfPkgId'] = ApiClient.convertToType(data['vnfPkgId'], 'String');
            }
            if (data.hasOwnProperty('vnfProductName')) {
                obj['vnfProductName'] = ApiClient.convertToType(data['vnfProductName'], 'String');
            }
            if (data.hasOwnProperty('vnfProvider')) {
                obj['vnfProvider'] = ApiClient.convertToType(data['vnfProvider'], 'String');
            }
            if (data.hasOwnProperty('vnfdId')) {
                obj['vnfdId'] = ApiClient.convertToType(data['vnfdId'], 'String');
            }
            if (data.hasOwnProperty('vnfdVersion')) {
                obj['vnfdVersion'] = ApiClient.convertToType(data['vnfdVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetSolFunctionInstanceOutput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetSolFunctionInstanceOutput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetSolFunctionInstanceOutput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          String.validateJSON(data['id']);
        }
        // validate the optional field `instantiatedVnfInfo`
        if (data['instantiatedVnfInfo']) { // data not null
          GetSolVnfInfo.validateJSON(data['instantiatedVnfInfo']);
        }
        // validate the optional field `instantiationState`
        if (data['instantiationState']) { // data not null
          VnfInstantiationState.validateJSON(data['instantiationState']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          GetSolFunctionInstanceMetadata.validateJSON(data['metadata']);
        }
        // validate the optional field `nsInstanceId`
        if (data['nsInstanceId']) { // data not null
          String.validateJSON(data['nsInstanceId']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }
        // validate the optional field `vnfPkgId`
        if (data['vnfPkgId']) { // data not null
          String.validateJSON(data['vnfPkgId']);
        }
        // validate the optional field `vnfProductName`
        if (data['vnfProductName']) { // data not null
          String.validateJSON(data['vnfProductName']);
        }
        // validate the optional field `vnfProvider`
        if (data['vnfProvider']) { // data not null
          String.validateJSON(data['vnfProvider']);
        }
        // validate the optional field `vnfdId`
        if (data['vnfdId']) { // data not null
          String.validateJSON(data['vnfdId']);
        }
        // validate the optional field `vnfdVersion`
        if (data['vnfdVersion']) { // data not null
          String.validateJSON(data['vnfdVersion']);
        }

        return true;
    }


}

GetSolFunctionInstanceOutput.RequiredProperties = ["arn", "id", "instantiationState", "metadata", "nsInstanceId", "vnfPkgId", "vnfdId"];

/**
 * @member {String} arn
 */
GetSolFunctionInstanceOutput.prototype['arn'] = undefined;

/**
 * @member {String} id
 */
GetSolFunctionInstanceOutput.prototype['id'] = undefined;

/**
 * @member {module:model/GetSolVnfInfo} instantiatedVnfInfo
 */
GetSolFunctionInstanceOutput.prototype['instantiatedVnfInfo'] = undefined;

/**
 * @member {module:model/VnfInstantiationState} instantiationState
 */
GetSolFunctionInstanceOutput.prototype['instantiationState'] = undefined;

/**
 * @member {module:model/GetSolFunctionInstanceMetadata} metadata
 */
GetSolFunctionInstanceOutput.prototype['metadata'] = undefined;

/**
 * @member {String} nsInstanceId
 */
GetSolFunctionInstanceOutput.prototype['nsInstanceId'] = undefined;

/**
 * @member {Object} tags
 */
GetSolFunctionInstanceOutput.prototype['tags'] = undefined;

/**
 * @member {String} vnfPkgId
 */
GetSolFunctionInstanceOutput.prototype['vnfPkgId'] = undefined;

/**
 * @member {String} vnfProductName
 */
GetSolFunctionInstanceOutput.prototype['vnfProductName'] = undefined;

/**
 * @member {String} vnfProvider
 */
GetSolFunctionInstanceOutput.prototype['vnfProvider'] = undefined;

/**
 * @member {String} vnfdId
 */
GetSolFunctionInstanceOutput.prototype['vnfdId'] = undefined;

/**
 * @member {String} vnfdVersion
 */
GetSolFunctionInstanceOutput.prototype['vnfdVersion'] = undefined;






export default GetSolFunctionInstanceOutput;

