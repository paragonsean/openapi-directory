/**
 * AWS Telco Network Builder
 *  Amazon Web Services Telco Network Builder (TNB) is a network automation service that helps you deploy and manage telecom networks. AWS TNB helps you with the lifecycle management of your telecommunication network functions throughout planning, deployment, and post-deployment activities.
 *
 * The version of the OpenAPI document: 2008-10-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSolFunctionPackageOutput from '../model/CreateSolFunctionPackageOutput';
import CreateSolFunctionPackageRequest from '../model/CreateSolFunctionPackageRequest';
import CreateSolNetworkInstanceOutput from '../model/CreateSolNetworkInstanceOutput';
import CreateSolNetworkInstanceRequest from '../model/CreateSolNetworkInstanceRequest';
import CreateSolNetworkPackageOutput from '../model/CreateSolNetworkPackageOutput';
import GetSolFunctionInstanceOutput from '../model/GetSolFunctionInstanceOutput';
import GetSolFunctionPackageContentOutput from '../model/GetSolFunctionPackageContentOutput';
import GetSolFunctionPackageDescriptorOutput from '../model/GetSolFunctionPackageDescriptorOutput';
import GetSolFunctionPackageOutput from '../model/GetSolFunctionPackageOutput';
import GetSolNetworkInstanceOutput from '../model/GetSolNetworkInstanceOutput';
import GetSolNetworkOperationOutput from '../model/GetSolNetworkOperationOutput';
import GetSolNetworkPackageContentOutput from '../model/GetSolNetworkPackageContentOutput';
import GetSolNetworkPackageDescriptorOutput from '../model/GetSolNetworkPackageDescriptorOutput';
import GetSolNetworkPackageOutput from '../model/GetSolNetworkPackageOutput';
import InstantiateSolNetworkInstanceOutput from '../model/InstantiateSolNetworkInstanceOutput';
import InstantiateSolNetworkInstanceRequest from '../model/InstantiateSolNetworkInstanceRequest';
import ListSolFunctionInstancesOutput from '../model/ListSolFunctionInstancesOutput';
import ListSolFunctionPackagesOutput from '../model/ListSolFunctionPackagesOutput';
import ListSolNetworkInstancesOutput from '../model/ListSolNetworkInstancesOutput';
import ListSolNetworkOperationsOutput from '../model/ListSolNetworkOperationsOutput';
import ListSolNetworkPackagesOutput from '../model/ListSolNetworkPackagesOutput';
import ListTagsForResourceOutput from '../model/ListTagsForResourceOutput';
import PutSolFunctionPackageContentOutput from '../model/PutSolFunctionPackageContentOutput';
import PutSolFunctionPackageContentRequest from '../model/PutSolFunctionPackageContentRequest';
import PutSolNetworkPackageContentOutput from '../model/PutSolNetworkPackageContentOutput';
import PutSolNetworkPackageContentRequest from '../model/PutSolNetworkPackageContentRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import TerminateSolNetworkInstanceOutput from '../model/TerminateSolNetworkInstanceOutput';
import TerminateSolNetworkInstanceRequest from '../model/TerminateSolNetworkInstanceRequest';
import UpdateSolFunctionPackageOutput from '../model/UpdateSolFunctionPackageOutput';
import UpdateSolFunctionPackageRequest from '../model/UpdateSolFunctionPackageRequest';
import UpdateSolNetworkInstanceOutput from '../model/UpdateSolNetworkInstanceOutput';
import UpdateSolNetworkInstanceRequest from '../model/UpdateSolNetworkInstanceRequest';
import UpdateSolNetworkPackageOutput from '../model/UpdateSolNetworkPackageOutput';
import UpdateSolNetworkPackageRequest from '../model/UpdateSolNetworkPackageRequest';
import ValidateSolFunctionPackageContentOutput from '../model/ValidateSolFunctionPackageContentOutput';
import ValidateSolNetworkPackageContentOutput from '../model/ValidateSolNetworkPackageContentOutput';

/**
* Default service.
* @module api/DefaultApi
* @version 2008-10-21
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelSolNetworkOperation operation.
     * @callback module:api/DefaultApi~cancelSolNetworkOperationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Cancels a network operation.</p> <p>A network operation is any operation that is done to your network, such as network instance instantiation or termination.</p>
     * @param {String} nsLcmOpOccId The identifier of the network operation.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelSolNetworkOperationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelSolNetworkOperation(nsLcmOpOccId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nsLcmOpOccId' is set
      if (nsLcmOpOccId === undefined || nsLcmOpOccId === null) {
        throw new Error("Missing the required parameter 'nsLcmOpOccId' when calling cancelSolNetworkOperation");
      }

      let pathParams = {
        'nsLcmOpOccId': nsLcmOpOccId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sol/nslcm/v1/ns_lcm_op_occs/{nsLcmOpOccId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSolFunctionPackage operation.
     * @callback module:api/DefaultApi~createSolFunctionPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSolFunctionPackageOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a function package.</p> <p>A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network. For more information, see <a href=\"https://docs.aws.amazon.com/tnb/latest/ug/function-packages.html\">Function packages</a> in the <i>Amazon Web Services Telco Network Builder User Guide</i>. </p> <p>Creating a function package is the first step for creating a network in AWS TNB. This request creates an empty container with an ID. The next step is to upload the actual CSAR zip file into that empty container. To upload function package content, see <a href=\"https://docs.aws.amazon.com/tnb/latest/APIReference/API_PutSolFunctionPackageContent.html\">PutSolFunctionPackageContent</a>.</p>
     * @param {module:model/CreateSolFunctionPackageRequest} createSolFunctionPackageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSolFunctionPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSolFunctionPackageOutput}
     */
    createSolFunctionPackage(createSolFunctionPackageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSolFunctionPackageRequest;
      // verify the required parameter 'createSolFunctionPackageRequest' is set
      if (createSolFunctionPackageRequest === undefined || createSolFunctionPackageRequest === null) {
        throw new Error("Missing the required parameter 'createSolFunctionPackageRequest' when calling createSolFunctionPackage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSolFunctionPackageOutput;
      return this.apiClient.callApi(
        '/sol/vnfpkgm/v1/vnf_packages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSolNetworkInstance operation.
     * @callback module:api/DefaultApi~createSolNetworkInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSolNetworkInstanceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a network instance.</p> <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed. Creating a network instance is the third step after creating a network package. For more information about network instances, <a href=\"https://docs.aws.amazon.com/tnb/latest/ug/network-instances.html\">Network instances</a> in the <i>Amazon Web Services Telco Network Builder User Guide</i>.</p> <p>Once you create a network instance, you can instantiate it. To instantiate a network, see <a href=\"https://docs.aws.amazon.com/tnb/latest/APIReference/API_InstantiateSolNetworkInstance.html\">InstantiateSolNetworkInstance</a>.</p>
     * @param {module:model/CreateSolNetworkInstanceRequest} createSolNetworkInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSolNetworkInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSolNetworkInstanceOutput}
     */
    createSolNetworkInstance(createSolNetworkInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSolNetworkInstanceRequest;
      // verify the required parameter 'createSolNetworkInstanceRequest' is set
      if (createSolNetworkInstanceRequest === undefined || createSolNetworkInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createSolNetworkInstanceRequest' when calling createSolNetworkInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSolNetworkInstanceOutput;
      return this.apiClient.callApi(
        '/sol/nslcm/v1/ns_instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSolNetworkPackage operation.
     * @callback module:api/DefaultApi~createSolNetworkPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSolNetworkPackageOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a network package.</p> <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on. For more information, see <a href=\"https://docs.aws.amazon.com/tnb/latest/ug/network-instances.html\">Network instances</a> in the <i>Amazon Web Services Telco Network Builder User Guide</i>. </p> <p>A network package consists of a network service descriptor (NSD) file (required) and any additional files (optional), such as scripts specific to your needs. For example, if you have multiple function packages in your network package, you can use the NSD to define which network functions should run in certain VPCs, subnets, or EKS clusters.</p> <p>This request creates an empty network package container with an ID. Once you create a network package, you can upload the network package content using <a href=\"https://docs.aws.amazon.com/tnb/latest/APIReference/API_PutSolNetworkPackageContent.html\">PutSolNetworkPackageContent</a>.</p>
     * @param {module:model/CreateSolFunctionPackageRequest} createSolFunctionPackageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSolNetworkPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSolNetworkPackageOutput}
     */
    createSolNetworkPackage(createSolFunctionPackageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSolFunctionPackageRequest;
      // verify the required parameter 'createSolFunctionPackageRequest' is set
      if (createSolFunctionPackageRequest === undefined || createSolFunctionPackageRequest === null) {
        throw new Error("Missing the required parameter 'createSolFunctionPackageRequest' when calling createSolNetworkPackage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSolNetworkPackageOutput;
      return this.apiClient.callApi(
        '/sol/nsd/v1/ns_descriptors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSolFunctionPackage operation.
     * @callback module:api/DefaultApi~deleteSolFunctionPackageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a function package.</p> <p>A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.</p> <p>To delete a function package, the package must be in a disabled state. To disable a function package, see <a href=\"https://docs.aws.amazon.com/tnb/latest/APIReference/API_UpdateSolFunctionPackage.html\">UpdateSolFunctionPackage</a>. </p>
     * @param {String} vnfPkgId ID of the function package.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSolFunctionPackageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSolFunctionPackage(vnfPkgId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vnfPkgId' is set
      if (vnfPkgId === undefined || vnfPkgId === null) {
        throw new Error("Missing the required parameter 'vnfPkgId' when calling deleteSolFunctionPackage");
      }

      let pathParams = {
        'vnfPkgId': vnfPkgId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSolNetworkInstance operation.
     * @callback module:api/DefaultApi~deleteSolNetworkInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a network instance.</p> <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p> <p>To delete a network instance, the instance must be in a stopped or terminated state. To terminate a network instance, see <a href=\"https://docs.aws.amazon.com/tnb/latest/APIReference/API_TerminateSolNetworkInstance.html\">TerminateSolNetworkInstance</a>.</p>
     * @param {String} nsInstanceId Network instance ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSolNetworkInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSolNetworkInstance(nsInstanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nsInstanceId' is set
      if (nsInstanceId === undefined || nsInstanceId === null) {
        throw new Error("Missing the required parameter 'nsInstanceId' when calling deleteSolNetworkInstance");
      }

      let pathParams = {
        'nsInstanceId': nsInstanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sol/nslcm/v1/ns_instances/{nsInstanceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSolNetworkPackage operation.
     * @callback module:api/DefaultApi~deleteSolNetworkPackageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes network package.</p> <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p> <p>To delete a network package, the package must be in a disable state. To disable a network package, see <a href=\"https://docs.aws.amazon.com/tnb/latest/APIReference/API_UpdateSolNetworkPackage.html\">UpdateSolNetworkPackage</a>.</p>
     * @param {String} nsdInfoId ID of the network service descriptor in the network package.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSolNetworkPackageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSolNetworkPackage(nsdInfoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nsdInfoId' is set
      if (nsdInfoId === undefined || nsdInfoId === null) {
        throw new Error("Missing the required parameter 'nsdInfoId' when calling deleteSolNetworkPackage");
      }

      let pathParams = {
        'nsdInfoId': nsdInfoId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sol/nsd/v1/ns_descriptors/{nsdInfoId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSolFunctionInstance operation.
     * @callback module:api/DefaultApi~getSolFunctionInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSolFunctionInstanceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the details of a network function instance, including the instantation state and metadata from the function package descriptor in the network function package.</p> <p>A network function instance is a function in a function package .</p>
     * @param {String} vnfInstanceId ID of the network function.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSolFunctionInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSolFunctionInstanceOutput}
     */
    getSolFunctionInstance(vnfInstanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vnfInstanceId' is set
      if (vnfInstanceId === undefined || vnfInstanceId === null) {
        throw new Error("Missing the required parameter 'vnfInstanceId' when calling getSolFunctionInstance");
      }

      let pathParams = {
        'vnfInstanceId': vnfInstanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSolFunctionInstanceOutput;
      return this.apiClient.callApi(
        '/sol/vnflcm/v1/vnf_instances/{vnfInstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSolFunctionPackage operation.
     * @callback module:api/DefaultApi~getSolFunctionPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSolFunctionPackageOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the details of an individual function package, such as the operational state and whether the package is in use.</p> <p>A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network..</p>
     * @param {String} vnfPkgId ID of the function package.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSolFunctionPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSolFunctionPackageOutput}
     */
    getSolFunctionPackage(vnfPkgId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vnfPkgId' is set
      if (vnfPkgId === undefined || vnfPkgId === null) {
        throw new Error("Missing the required parameter 'vnfPkgId' when calling getSolFunctionPackage");
      }

      let pathParams = {
        'vnfPkgId': vnfPkgId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSolFunctionPackageOutput;
      return this.apiClient.callApi(
        '/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSolFunctionPackageContent operation.
     * @callback module:api/DefaultApi~getSolFunctionPackageContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSolFunctionPackageContentOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the contents of a function package.</p> <p>A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.</p>
     * @param {module:model/String} accept The format of the package that you want to download from the function packages.
     * @param {String} vnfPkgId ID of the function package.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSolFunctionPackageContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSolFunctionPackageContentOutput}
     */
    getSolFunctionPackageContent(accept, vnfPkgId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSolFunctionPackageContent");
      }
      // verify the required parameter 'vnfPkgId' is set
      if (vnfPkgId === undefined || vnfPkgId === null) {
        throw new Error("Missing the required parameter 'vnfPkgId' when calling getSolFunctionPackageContent");
      }

      let pathParams = {
        'vnfPkgId': vnfPkgId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSolFunctionPackageContentOutput;
      return this.apiClient.callApi(
        '/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}/package_content#Accept', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSolFunctionPackageDescriptor operation.
     * @callback module:api/DefaultApi~getSolFunctionPackageDescriptorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSolFunctionPackageDescriptorOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a function package descriptor in a function package.</p> <p>A function package descriptor is a .yaml file in a function package that uses the TOSCA standard to describe how the network function in the function package should run on your network.</p> <p>A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.</p>
     * @param {module:model/String} accept Indicates which content types, expressed as MIME types, the client is able to understand.
     * @param {String} vnfPkgId ID of the function package.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSolFunctionPackageDescriptorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSolFunctionPackageDescriptorOutput}
     */
    getSolFunctionPackageDescriptor(accept, vnfPkgId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSolFunctionPackageDescriptor");
      }
      // verify the required parameter 'vnfPkgId' is set
      if (vnfPkgId === undefined || vnfPkgId === null) {
        throw new Error("Missing the required parameter 'vnfPkgId' when calling getSolFunctionPackageDescriptor");
      }

      let pathParams = {
        'vnfPkgId': vnfPkgId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSolFunctionPackageDescriptorOutput;
      return this.apiClient.callApi(
        '/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}/vnfd#Accept', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSolNetworkInstance operation.
     * @callback module:api/DefaultApi~getSolNetworkInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSolNetworkInstanceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the details of the network instance.</p> <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
     * @param {String} nsInstanceId ID of the network instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSolNetworkInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSolNetworkInstanceOutput}
     */
    getSolNetworkInstance(nsInstanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nsInstanceId' is set
      if (nsInstanceId === undefined || nsInstanceId === null) {
        throw new Error("Missing the required parameter 'nsInstanceId' when calling getSolNetworkInstance");
      }

      let pathParams = {
        'nsInstanceId': nsInstanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSolNetworkInstanceOutput;
      return this.apiClient.callApi(
        '/sol/nslcm/v1/ns_instances/{nsInstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSolNetworkOperation operation.
     * @callback module:api/DefaultApi~getSolNetworkOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSolNetworkOperationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the details of a network operation, including the tasks involved in the network operation and the status of the tasks.</p> <p>A network operation is any operation that is done to your network, such as network instance instantiation or termination.</p>
     * @param {String} nsLcmOpOccId The identifier of the network operation.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSolNetworkOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSolNetworkOperationOutput}
     */
    getSolNetworkOperation(nsLcmOpOccId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nsLcmOpOccId' is set
      if (nsLcmOpOccId === undefined || nsLcmOpOccId === null) {
        throw new Error("Missing the required parameter 'nsLcmOpOccId' when calling getSolNetworkOperation");
      }

      let pathParams = {
        'nsLcmOpOccId': nsLcmOpOccId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSolNetworkOperationOutput;
      return this.apiClient.callApi(
        '/sol/nslcm/v1/ns_lcm_op_occs/{nsLcmOpOccId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSolNetworkPackage operation.
     * @callback module:api/DefaultApi~getSolNetworkPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSolNetworkPackageOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the details of a network package.</p> <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
     * @param {String} nsdInfoId ID of the network service descriptor in the network package.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSolNetworkPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSolNetworkPackageOutput}
     */
    getSolNetworkPackage(nsdInfoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nsdInfoId' is set
      if (nsdInfoId === undefined || nsdInfoId === null) {
        throw new Error("Missing the required parameter 'nsdInfoId' when calling getSolNetworkPackage");
      }

      let pathParams = {
        'nsdInfoId': nsdInfoId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSolNetworkPackageOutput;
      return this.apiClient.callApi(
        '/sol/nsd/v1/ns_descriptors/{nsdInfoId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSolNetworkPackageContent operation.
     * @callback module:api/DefaultApi~getSolNetworkPackageContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSolNetworkPackageContentOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the contents of a network package.</p> <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
     * @param {module:model/String} accept The format of the package you want to download from the network package.
     * @param {String} nsdInfoId ID of the network service descriptor in the network package.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSolNetworkPackageContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSolNetworkPackageContentOutput}
     */
    getSolNetworkPackageContent(accept, nsdInfoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSolNetworkPackageContent");
      }
      // verify the required parameter 'nsdInfoId' is set
      if (nsdInfoId === undefined || nsdInfoId === null) {
        throw new Error("Missing the required parameter 'nsdInfoId' when calling getSolNetworkPackageContent");
      }

      let pathParams = {
        'nsdInfoId': nsdInfoId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSolNetworkPackageContentOutput;
      return this.apiClient.callApi(
        '/sol/nsd/v1/ns_descriptors/{nsdInfoId}/nsd_content#Accept', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSolNetworkPackageDescriptor operation.
     * @callback module:api/DefaultApi~getSolNetworkPackageDescriptorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSolNetworkPackageDescriptorOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the content of the network service descriptor.</p> <p>A network service descriptor is a .yaml file in a network package that uses the TOSCA standard to describe the network functions you want to deploy and the Amazon Web Services infrastructure you want to deploy the network functions on.</p>
     * @param {String} nsdInfoId ID of the network service descriptor in the network package.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSolNetworkPackageDescriptorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSolNetworkPackageDescriptorOutput}
     */
    getSolNetworkPackageDescriptor(nsdInfoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nsdInfoId' is set
      if (nsdInfoId === undefined || nsdInfoId === null) {
        throw new Error("Missing the required parameter 'nsdInfoId' when calling getSolNetworkPackageDescriptor");
      }

      let pathParams = {
        'nsdInfoId': nsdInfoId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSolNetworkPackageDescriptorOutput;
      return this.apiClient.callApi(
        '/sol/nsd/v1/ns_descriptors/{nsdInfoId}/nsd', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the instantiateSolNetworkInstance operation.
     * @callback module:api/DefaultApi~instantiateSolNetworkInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstantiateSolNetworkInstanceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Instantiates a network instance.</p> <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p> <p>Before you can instantiate a network instance, you have to create a network instance. For more information, see <a href=\"https://docs.aws.amazon.com/tnb/latest/APIReference/API_CreateSolNetworkInstance.html\">CreateSolNetworkInstance</a>.</p>
     * @param {String} nsInstanceId ID of the network instance.
     * @param {module:model/InstantiateSolNetworkInstanceRequest} instantiateSolNetworkInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [dryRun] A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
     * @param {module:api/DefaultApi~instantiateSolNetworkInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstantiateSolNetworkInstanceOutput}
     */
    instantiateSolNetworkInstance(nsInstanceId, instantiateSolNetworkInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = instantiateSolNetworkInstanceRequest;
      // verify the required parameter 'nsInstanceId' is set
      if (nsInstanceId === undefined || nsInstanceId === null) {
        throw new Error("Missing the required parameter 'nsInstanceId' when calling instantiateSolNetworkInstance");
      }
      // verify the required parameter 'instantiateSolNetworkInstanceRequest' is set
      if (instantiateSolNetworkInstanceRequest === undefined || instantiateSolNetworkInstanceRequest === null) {
        throw new Error("Missing the required parameter 'instantiateSolNetworkInstanceRequest' when calling instantiateSolNetworkInstance");
      }

      let pathParams = {
        'nsInstanceId': nsInstanceId
      };
      let queryParams = {
        'dry_run': opts['dryRun']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstantiateSolNetworkInstanceOutput;
      return this.apiClient.callApi(
        '/sol/nslcm/v1/ns_instances/{nsInstanceId}/instantiate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSolFunctionInstances operation.
     * @callback module:api/DefaultApi~listSolFunctionInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSolFunctionInstancesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists network function instances.</p> <p>A network function instance is a function in a function package .</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to include in the response.
     * @param {String} [nextpageOpaqueMarker] The token for the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSolFunctionInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSolFunctionInstancesOutput}
     */
    listSolFunctionInstances(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'nextpage_opaque_marker': opts['nextpageOpaqueMarker'],
        'maxResults': opts['maxResults2'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSolFunctionInstancesOutput;
      return this.apiClient.callApi(
        '/sol/vnflcm/v1/vnf_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSolFunctionPackages operation.
     * @callback module:api/DefaultApi~listSolFunctionPackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSolFunctionPackagesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists information about function packages.</p> <p>A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to include in the response.
     * @param {String} [nextpageOpaqueMarker] The token for the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSolFunctionPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSolFunctionPackagesOutput}
     */
    listSolFunctionPackages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'nextpage_opaque_marker': opts['nextpageOpaqueMarker'],
        'maxResults': opts['maxResults2'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSolFunctionPackagesOutput;
      return this.apiClient.callApi(
        '/sol/vnfpkgm/v1/vnf_packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSolNetworkInstances operation.
     * @callback module:api/DefaultApi~listSolNetworkInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSolNetworkInstancesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists your network instances.</p> <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to include in the response.
     * @param {String} [nextpageOpaqueMarker] The token for the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSolNetworkInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSolNetworkInstancesOutput}
     */
    listSolNetworkInstances(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'nextpage_opaque_marker': opts['nextpageOpaqueMarker'],
        'maxResults': opts['maxResults2'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSolNetworkInstancesOutput;
      return this.apiClient.callApi(
        '/sol/nslcm/v1/ns_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSolNetworkOperations operation.
     * @callback module:api/DefaultApi~listSolNetworkOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSolNetworkOperationsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists details for a network operation, including when the operation started and the status of the operation.</p> <p>A network operation is any operation that is done to your network, such as network instance instantiation or termination.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to include in the response.
     * @param {String} [nextpageOpaqueMarker] The token for the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSolNetworkOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSolNetworkOperationsOutput}
     */
    listSolNetworkOperations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'nextpage_opaque_marker': opts['nextpageOpaqueMarker'],
        'maxResults': opts['maxResults2'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSolNetworkOperationsOutput;
      return this.apiClient.callApi(
        '/sol/nslcm/v1/ns_lcm_op_occs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSolNetworkPackages operation.
     * @callback module:api/DefaultApi~listSolNetworkPackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSolNetworkPackagesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists network packages.</p> <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to include in the response.
     * @param {String} [nextpageOpaqueMarker] The token for the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSolNetworkPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSolNetworkPackagesOutput}
     */
    listSolNetworkPackages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'nextpage_opaque_marker': opts['nextpageOpaqueMarker'],
        'maxResults': opts['maxResults2'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSolNetworkPackagesOutput;
      return this.apiClient.callApi(
        '/sol/nsd/v1/ns_descriptors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists tags for AWS TNB resources.
     * @param {String} resourceArn Resource ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceOutput}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceOutput;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSolFunctionPackageContent operation.
     * @callback module:api/DefaultApi~putSolFunctionPackageContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutSolFunctionPackageContentOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Uploads the contents of a function package.</p> <p>A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.</p>
     * @param {String} vnfPkgId Function package ID.
     * @param {module:model/PutSolFunctionPackageContentRequest} putSolFunctionPackageContentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [contentType] Function package content type.
     * @param {module:api/DefaultApi~putSolFunctionPackageContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutSolFunctionPackageContentOutput}
     */
    putSolFunctionPackageContent(vnfPkgId, putSolFunctionPackageContentRequest, opts, callback) {
      opts = opts || {};
      let postBody = putSolFunctionPackageContentRequest;
      // verify the required parameter 'vnfPkgId' is set
      if (vnfPkgId === undefined || vnfPkgId === null) {
        throw new Error("Missing the required parameter 'vnfPkgId' when calling putSolFunctionPackageContent");
      }
      // verify the required parameter 'putSolFunctionPackageContentRequest' is set
      if (putSolFunctionPackageContentRequest === undefined || putSolFunctionPackageContentRequest === null) {
        throw new Error("Missing the required parameter 'putSolFunctionPackageContentRequest' when calling putSolFunctionPackageContent");
      }

      let pathParams = {
        'vnfPkgId': vnfPkgId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutSolFunctionPackageContentOutput;
      return this.apiClient.callApi(
        '/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}/package_content', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSolNetworkPackageContent operation.
     * @callback module:api/DefaultApi~putSolNetworkPackageContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutSolNetworkPackageContentOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Uploads the contents of a network package.</p> <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
     * @param {String} nsdInfoId Network service descriptor info ID.
     * @param {module:model/PutSolNetworkPackageContentRequest} putSolNetworkPackageContentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [contentType] Network package content type.
     * @param {module:api/DefaultApi~putSolNetworkPackageContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutSolNetworkPackageContentOutput}
     */
    putSolNetworkPackageContent(nsdInfoId, putSolNetworkPackageContentRequest, opts, callback) {
      opts = opts || {};
      let postBody = putSolNetworkPackageContentRequest;
      // verify the required parameter 'nsdInfoId' is set
      if (nsdInfoId === undefined || nsdInfoId === null) {
        throw new Error("Missing the required parameter 'nsdInfoId' when calling putSolNetworkPackageContent");
      }
      // verify the required parameter 'putSolNetworkPackageContentRequest' is set
      if (putSolNetworkPackageContentRequest === undefined || putSolNetworkPackageContentRequest === null) {
        throw new Error("Missing the required parameter 'putSolNetworkPackageContentRequest' when calling putSolNetworkPackageContent");
      }

      let pathParams = {
        'nsdInfoId': nsdInfoId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutSolNetworkPackageContentOutput;
      return this.apiClient.callApi(
        '/sol/nsd/v1/ns_descriptors/{nsdInfoId}/nsd_content', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Tags an AWS TNB resource.</p> <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
     * @param {String} resourceArn Resource ARN.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the terminateSolNetworkInstance operation.
     * @callback module:api/DefaultApi~terminateSolNetworkInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TerminateSolNetworkInstanceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Terminates a network instance.</p> <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p> <p>You must terminate a network instance before you can delete it.</p>
     * @param {String} nsInstanceId ID of the network instance.
     * @param {module:model/TerminateSolNetworkInstanceRequest} terminateSolNetworkInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~terminateSolNetworkInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TerminateSolNetworkInstanceOutput}
     */
    terminateSolNetworkInstance(nsInstanceId, terminateSolNetworkInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = terminateSolNetworkInstanceRequest;
      // verify the required parameter 'nsInstanceId' is set
      if (nsInstanceId === undefined || nsInstanceId === null) {
        throw new Error("Missing the required parameter 'nsInstanceId' when calling terminateSolNetworkInstance");
      }
      // verify the required parameter 'terminateSolNetworkInstanceRequest' is set
      if (terminateSolNetworkInstanceRequest === undefined || terminateSolNetworkInstanceRequest === null) {
        throw new Error("Missing the required parameter 'terminateSolNetworkInstanceRequest' when calling terminateSolNetworkInstance");
      }

      let pathParams = {
        'nsInstanceId': nsInstanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TerminateSolNetworkInstanceOutput;
      return this.apiClient.callApi(
        '/sol/nslcm/v1/ns_instances/{nsInstanceId}/terminate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Untags an AWS TNB resource.</p> <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
     * @param {String} resourceArn Resource ARN.
     * @param {Array.<String>} tagKeys Tag keys.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSolFunctionPackage operation.
     * @callback module:api/DefaultApi~updateSolFunctionPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSolFunctionPackageOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the operational state of function package.</p> <p>A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.</p>
     * @param {String} vnfPkgId ID of the function package.
     * @param {module:model/UpdateSolFunctionPackageRequest} updateSolFunctionPackageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSolFunctionPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSolFunctionPackageOutput}
     */
    updateSolFunctionPackage(vnfPkgId, updateSolFunctionPackageRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSolFunctionPackageRequest;
      // verify the required parameter 'vnfPkgId' is set
      if (vnfPkgId === undefined || vnfPkgId === null) {
        throw new Error("Missing the required parameter 'vnfPkgId' when calling updateSolFunctionPackage");
      }
      // verify the required parameter 'updateSolFunctionPackageRequest' is set
      if (updateSolFunctionPackageRequest === undefined || updateSolFunctionPackageRequest === null) {
        throw new Error("Missing the required parameter 'updateSolFunctionPackageRequest' when calling updateSolFunctionPackage");
      }

      let pathParams = {
        'vnfPkgId': vnfPkgId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSolFunctionPackageOutput;
      return this.apiClient.callApi(
        '/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSolNetworkInstance operation.
     * @callback module:api/DefaultApi~updateSolNetworkInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSolNetworkInstanceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Update a network instance.</p> <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.</p>
     * @param {String} nsInstanceId ID of the network instance.
     * @param {module:model/UpdateSolNetworkInstanceRequest} updateSolNetworkInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSolNetworkInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSolNetworkInstanceOutput}
     */
    updateSolNetworkInstance(nsInstanceId, updateSolNetworkInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSolNetworkInstanceRequest;
      // verify the required parameter 'nsInstanceId' is set
      if (nsInstanceId === undefined || nsInstanceId === null) {
        throw new Error("Missing the required parameter 'nsInstanceId' when calling updateSolNetworkInstance");
      }
      // verify the required parameter 'updateSolNetworkInstanceRequest' is set
      if (updateSolNetworkInstanceRequest === undefined || updateSolNetworkInstanceRequest === null) {
        throw new Error("Missing the required parameter 'updateSolNetworkInstanceRequest' when calling updateSolNetworkInstance");
      }

      let pathParams = {
        'nsInstanceId': nsInstanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSolNetworkInstanceOutput;
      return this.apiClient.callApi(
        '/sol/nslcm/v1/ns_instances/{nsInstanceId}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSolNetworkPackage operation.
     * @callback module:api/DefaultApi~updateSolNetworkPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSolNetworkPackageOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the operational state of a network package.</p> <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p> <p>A network service descriptor is a .yaml file in a network package that uses the TOSCA standard to describe the network functions you want to deploy and the Amazon Web Services infrastructure you want to deploy the network functions on.</p>
     * @param {String} nsdInfoId ID of the network service descriptor in the network package.
     * @param {module:model/UpdateSolNetworkPackageRequest} updateSolNetworkPackageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSolNetworkPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSolNetworkPackageOutput}
     */
    updateSolNetworkPackage(nsdInfoId, updateSolNetworkPackageRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSolNetworkPackageRequest;
      // verify the required parameter 'nsdInfoId' is set
      if (nsdInfoId === undefined || nsdInfoId === null) {
        throw new Error("Missing the required parameter 'nsdInfoId' when calling updateSolNetworkPackage");
      }
      // verify the required parameter 'updateSolNetworkPackageRequest' is set
      if (updateSolNetworkPackageRequest === undefined || updateSolNetworkPackageRequest === null) {
        throw new Error("Missing the required parameter 'updateSolNetworkPackageRequest' when calling updateSolNetworkPackage");
      }

      let pathParams = {
        'nsdInfoId': nsdInfoId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSolNetworkPackageOutput;
      return this.apiClient.callApi(
        '/sol/nsd/v1/ns_descriptors/{nsdInfoId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateSolFunctionPackageContent operation.
     * @callback module:api/DefaultApi~validateSolFunctionPackageContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateSolFunctionPackageContentOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Validates function package content. This can be used as a dry run before uploading function package content with <a href=\"https://docs.aws.amazon.com/tnb/latest/APIReference/API_PutSolFunctionPackageContent.html\">PutSolFunctionPackageContent</a>.</p> <p>A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.</p>
     * @param {String} vnfPkgId Function package ID.
     * @param {module:model/PutSolFunctionPackageContentRequest} putSolFunctionPackageContentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [contentType] Function package content type.
     * @param {module:api/DefaultApi~validateSolFunctionPackageContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateSolFunctionPackageContentOutput}
     */
    validateSolFunctionPackageContent(vnfPkgId, putSolFunctionPackageContentRequest, opts, callback) {
      opts = opts || {};
      let postBody = putSolFunctionPackageContentRequest;
      // verify the required parameter 'vnfPkgId' is set
      if (vnfPkgId === undefined || vnfPkgId === null) {
        throw new Error("Missing the required parameter 'vnfPkgId' when calling validateSolFunctionPackageContent");
      }
      // verify the required parameter 'putSolFunctionPackageContentRequest' is set
      if (putSolFunctionPackageContentRequest === undefined || putSolFunctionPackageContentRequest === null) {
        throw new Error("Missing the required parameter 'putSolFunctionPackageContentRequest' when calling validateSolFunctionPackageContent");
      }

      let pathParams = {
        'vnfPkgId': vnfPkgId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ValidateSolFunctionPackageContentOutput;
      return this.apiClient.callApi(
        '/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}/package_content/validate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateSolNetworkPackageContent operation.
     * @callback module:api/DefaultApi~validateSolNetworkPackageContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateSolNetworkPackageContentOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Validates network package content. This can be used as a dry run before uploading network package content with <a href=\"https://docs.aws.amazon.com/tnb/latest/APIReference/API_PutSolNetworkPackageContent.html\">PutSolNetworkPackageContent</a>.</p> <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
     * @param {String} nsdInfoId Network service descriptor file.
     * @param {module:model/PutSolNetworkPackageContentRequest} putSolNetworkPackageContentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [contentType] Network package content type.
     * @param {module:api/DefaultApi~validateSolNetworkPackageContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateSolNetworkPackageContentOutput}
     */
    validateSolNetworkPackageContent(nsdInfoId, putSolNetworkPackageContentRequest, opts, callback) {
      opts = opts || {};
      let postBody = putSolNetworkPackageContentRequest;
      // verify the required parameter 'nsdInfoId' is set
      if (nsdInfoId === undefined || nsdInfoId === null) {
        throw new Error("Missing the required parameter 'nsdInfoId' when calling validateSolNetworkPackageContent");
      }
      // verify the required parameter 'putSolNetworkPackageContentRequest' is set
      if (putSolNetworkPackageContentRequest === undefined || putSolNetworkPackageContentRequest === null) {
        throw new Error("Missing the required parameter 'putSolNetworkPackageContentRequest' when calling validateSolNetworkPackageContent");
      }

      let pathParams = {
        'nsdInfoId': nsdInfoId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ValidateSolNetworkPackageContentOutput;
      return this.apiClient.callApi(
        '/sol/nsd/v1/ns_descriptors/{nsdInfoId}/nsd_content/validate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
