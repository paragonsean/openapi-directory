/*
 * AWS Telco Network Builder
 *  Amazon Web Services Telco Network Builder (TNB) is a network automation service that helps you deploy and manage telecom networks. AWS TNB helps you with the lifecycle management of your telecommunication network functions throughout planning, deployment, and post-deployment activities.
 *
 * The version of the OpenAPI document: 2008-10-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateSolFunctionPackageOutput;
import org.openapitools.client.model.CreateSolFunctionPackageRequest;
import org.openapitools.client.model.CreateSolNetworkInstanceOutput;
import org.openapitools.client.model.CreateSolNetworkInstanceRequest;
import org.openapitools.client.model.CreateSolNetworkPackageOutput;
import org.openapitools.client.model.GetSolFunctionInstanceOutput;
import org.openapitools.client.model.GetSolFunctionPackageContentOutput;
import org.openapitools.client.model.GetSolFunctionPackageDescriptorOutput;
import org.openapitools.client.model.GetSolFunctionPackageOutput;
import org.openapitools.client.model.GetSolNetworkInstanceOutput;
import org.openapitools.client.model.GetSolNetworkOperationOutput;
import org.openapitools.client.model.GetSolNetworkPackageContentOutput;
import org.openapitools.client.model.GetSolNetworkPackageDescriptorOutput;
import org.openapitools.client.model.GetSolNetworkPackageOutput;
import org.openapitools.client.model.InstantiateSolNetworkInstanceOutput;
import org.openapitools.client.model.InstantiateSolNetworkInstanceRequest;
import org.openapitools.client.model.ListSolFunctionInstancesOutput;
import org.openapitools.client.model.ListSolFunctionPackagesOutput;
import org.openapitools.client.model.ListSolNetworkInstancesOutput;
import org.openapitools.client.model.ListSolNetworkOperationsOutput;
import org.openapitools.client.model.ListSolNetworkPackagesOutput;
import org.openapitools.client.model.ListTagsForResourceOutput;
import org.openapitools.client.model.PutSolFunctionPackageContentOutput;
import org.openapitools.client.model.PutSolFunctionPackageContentRequest;
import org.openapitools.client.model.PutSolNetworkPackageContentOutput;
import org.openapitools.client.model.PutSolNetworkPackageContentRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.TerminateSolNetworkInstanceOutput;
import org.openapitools.client.model.TerminateSolNetworkInstanceRequest;
import org.openapitools.client.model.UpdateSolFunctionPackageOutput;
import org.openapitools.client.model.UpdateSolFunctionPackageRequest;
import org.openapitools.client.model.UpdateSolNetworkInstanceOutput;
import org.openapitools.client.model.UpdateSolNetworkInstanceRequest;
import org.openapitools.client.model.UpdateSolNetworkPackageOutput;
import org.openapitools.client.model.UpdateSolNetworkPackageRequest;
import org.openapitools.client.model.ValidateSolFunctionPackageContentOutput;
import org.openapitools.client.model.ValidateSolNetworkPackageContentOutput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Cancels a network operation.&lt;/p&gt; &lt;p&gt;A network operation is any operation that is done to your network, such as network instance instantiation or termination.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelSolNetworkOperationTest() throws ApiException {
        String nsLcmOpOccId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.cancelSolNetworkOperation(nsLcmOpOccId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a function package.&lt;/p&gt; &lt;p&gt;A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/tnb/latest/ug/function-packages.html\&quot;&gt;Function packages&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Telco Network Builder User Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;Creating a function package is the first step for creating a network in AWS TNB. This request creates an empty container with an ID. The next step is to upload the actual CSAR zip file into that empty container. To upload function package content, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/tnb/latest/APIReference/API_PutSolFunctionPackageContent.html\&quot;&gt;PutSolFunctionPackageContent&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSolFunctionPackageTest() throws ApiException {
        CreateSolFunctionPackageRequest createSolFunctionPackageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSolFunctionPackageOutput response = api.createSolFunctionPackage(createSolFunctionPackageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a network instance.&lt;/p&gt; &lt;p&gt;A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed. Creating a network instance is the third step after creating a network package. For more information about network instances, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/tnb/latest/ug/network-instances.html\&quot;&gt;Network instances&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Telco Network Builder User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Once you create a network instance, you can instantiate it. To instantiate a network, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/tnb/latest/APIReference/API_InstantiateSolNetworkInstance.html\&quot;&gt;InstantiateSolNetworkInstance&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSolNetworkInstanceTest() throws ApiException {
        CreateSolNetworkInstanceRequest createSolNetworkInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSolNetworkInstanceOutput response = api.createSolNetworkInstance(createSolNetworkInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a network package.&lt;/p&gt; &lt;p&gt;A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/tnb/latest/ug/network-instances.html\&quot;&gt;Network instances&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Telco Network Builder User Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;A network package consists of a network service descriptor (NSD) file (required) and any additional files (optional), such as scripts specific to your needs. For example, if you have multiple function packages in your network package, you can use the NSD to define which network functions should run in certain VPCs, subnets, or EKS clusters.&lt;/p&gt; &lt;p&gt;This request creates an empty network package container with an ID. Once you create a network package, you can upload the network package content using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/tnb/latest/APIReference/API_PutSolNetworkPackageContent.html\&quot;&gt;PutSolNetworkPackageContent&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSolNetworkPackageTest() throws ApiException {
        CreateSolFunctionPackageRequest createSolFunctionPackageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSolNetworkPackageOutput response = api.createSolNetworkPackage(createSolFunctionPackageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a function package.&lt;/p&gt; &lt;p&gt;A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.&lt;/p&gt; &lt;p&gt;To delete a function package, the package must be in a disabled state. To disable a function package, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/tnb/latest/APIReference/API_UpdateSolFunctionPackage.html\&quot;&gt;UpdateSolFunctionPackage&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSolFunctionPackageTest() throws ApiException {
        String vnfPkgId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteSolFunctionPackage(vnfPkgId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a network instance.&lt;/p&gt; &lt;p&gt;A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.&lt;/p&gt; &lt;p&gt;To delete a network instance, the instance must be in a stopped or terminated state. To terminate a network instance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/tnb/latest/APIReference/API_TerminateSolNetworkInstance.html\&quot;&gt;TerminateSolNetworkInstance&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSolNetworkInstanceTest() throws ApiException {
        String nsInstanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteSolNetworkInstance(nsInstanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes network package.&lt;/p&gt; &lt;p&gt;A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.&lt;/p&gt; &lt;p&gt;To delete a network package, the package must be in a disable state. To disable a network package, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/tnb/latest/APIReference/API_UpdateSolNetworkPackage.html\&quot;&gt;UpdateSolNetworkPackage&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSolNetworkPackageTest() throws ApiException {
        String nsdInfoId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteSolNetworkPackage(nsdInfoId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the details of a network function instance, including the instantation state and metadata from the function package descriptor in the network function package.&lt;/p&gt; &lt;p&gt;A network function instance is a function in a function package .&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSolFunctionInstanceTest() throws ApiException {
        String vnfInstanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSolFunctionInstanceOutput response = api.getSolFunctionInstance(vnfInstanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the details of an individual function package, such as the operational state and whether the package is in use.&lt;/p&gt; &lt;p&gt;A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network..&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSolFunctionPackageTest() throws ApiException {
        String vnfPkgId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSolFunctionPackageOutput response = api.getSolFunctionPackage(vnfPkgId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the contents of a function package.&lt;/p&gt; &lt;p&gt;A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSolFunctionPackageContentTest() throws ApiException {
        String accept = null;
        String vnfPkgId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSolFunctionPackageContentOutput response = api.getSolFunctionPackageContent(accept, vnfPkgId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a function package descriptor in a function package.&lt;/p&gt; &lt;p&gt;A function package descriptor is a .yaml file in a function package that uses the TOSCA standard to describe how the network function in the function package should run on your network.&lt;/p&gt; &lt;p&gt;A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSolFunctionPackageDescriptorTest() throws ApiException {
        String accept = null;
        String vnfPkgId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSolFunctionPackageDescriptorOutput response = api.getSolFunctionPackageDescriptor(accept, vnfPkgId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the details of the network instance.&lt;/p&gt; &lt;p&gt;A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSolNetworkInstanceTest() throws ApiException {
        String nsInstanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSolNetworkInstanceOutput response = api.getSolNetworkInstance(nsInstanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the details of a network operation, including the tasks involved in the network operation and the status of the tasks.&lt;/p&gt; &lt;p&gt;A network operation is any operation that is done to your network, such as network instance instantiation or termination.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSolNetworkOperationTest() throws ApiException {
        String nsLcmOpOccId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSolNetworkOperationOutput response = api.getSolNetworkOperation(nsLcmOpOccId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the details of a network package.&lt;/p&gt; &lt;p&gt;A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSolNetworkPackageTest() throws ApiException {
        String nsdInfoId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSolNetworkPackageOutput response = api.getSolNetworkPackage(nsdInfoId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the contents of a network package.&lt;/p&gt; &lt;p&gt;A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSolNetworkPackageContentTest() throws ApiException {
        String accept = null;
        String nsdInfoId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSolNetworkPackageContentOutput response = api.getSolNetworkPackageContent(accept, nsdInfoId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the content of the network service descriptor.&lt;/p&gt; &lt;p&gt;A network service descriptor is a .yaml file in a network package that uses the TOSCA standard to describe the network functions you want to deploy and the Amazon Web Services infrastructure you want to deploy the network functions on.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSolNetworkPackageDescriptorTest() throws ApiException {
        String nsdInfoId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSolNetworkPackageDescriptorOutput response = api.getSolNetworkPackageDescriptor(nsdInfoId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Instantiates a network instance.&lt;/p&gt; &lt;p&gt;A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.&lt;/p&gt; &lt;p&gt;Before you can instantiate a network instance, you have to create a network instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/tnb/latest/APIReference/API_CreateSolNetworkInstance.html\&quot;&gt;CreateSolNetworkInstance&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instantiateSolNetworkInstanceTest() throws ApiException {
        String nsInstanceId = null;
        InstantiateSolNetworkInstanceRequest instantiateSolNetworkInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean dryRun = null;
        InstantiateSolNetworkInstanceOutput response = api.instantiateSolNetworkInstance(nsInstanceId, instantiateSolNetworkInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dryRun);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists network function instances.&lt;/p&gt; &lt;p&gt;A network function instance is a function in a function package .&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSolFunctionInstancesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextpageOpaqueMarker = null;
        String maxResults2 = null;
        String nextToken = null;
        ListSolFunctionInstancesOutput response = api.listSolFunctionInstances(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextpageOpaqueMarker, maxResults2, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists information about function packages.&lt;/p&gt; &lt;p&gt;A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSolFunctionPackagesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextpageOpaqueMarker = null;
        String maxResults2 = null;
        String nextToken = null;
        ListSolFunctionPackagesOutput response = api.listSolFunctionPackages(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextpageOpaqueMarker, maxResults2, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists your network instances.&lt;/p&gt; &lt;p&gt;A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSolNetworkInstancesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextpageOpaqueMarker = null;
        String maxResults2 = null;
        String nextToken = null;
        ListSolNetworkInstancesOutput response = api.listSolNetworkInstances(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextpageOpaqueMarker, maxResults2, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists details for a network operation, including when the operation started and the status of the operation.&lt;/p&gt; &lt;p&gt;A network operation is any operation that is done to your network, such as network instance instantiation or termination.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSolNetworkOperationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextpageOpaqueMarker = null;
        String maxResults2 = null;
        String nextToken = null;
        ListSolNetworkOperationsOutput response = api.listSolNetworkOperations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextpageOpaqueMarker, maxResults2, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists network packages.&lt;/p&gt; &lt;p&gt;A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSolNetworkPackagesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextpageOpaqueMarker = null;
        String maxResults2 = null;
        String nextToken = null;
        ListSolNetworkPackagesOutput response = api.listSolNetworkPackages(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextpageOpaqueMarker, maxResults2, nextToken);
        // TODO: test validations
    }

    /**
     * Lists tags for AWS TNB resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceOutput response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Uploads the contents of a function package.&lt;/p&gt; &lt;p&gt;A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSolFunctionPackageContentTest() throws ApiException {
        String vnfPkgId = null;
        PutSolFunctionPackageContentRequest putSolFunctionPackageContentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String contentType = null;
        PutSolFunctionPackageContentOutput response = api.putSolFunctionPackageContent(vnfPkgId, putSolFunctionPackageContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, contentType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Uploads the contents of a network package.&lt;/p&gt; &lt;p&gt;A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSolNetworkPackageContentTest() throws ApiException {
        String nsdInfoId = null;
        PutSolNetworkPackageContentRequest putSolNetworkPackageContentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String contentType = null;
        PutSolNetworkPackageContentOutput response = api.putSolNetworkPackageContent(nsdInfoId, putSolNetworkPackageContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, contentType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Tags an AWS TNB resource.&lt;/p&gt; &lt;p&gt;A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Terminates a network instance.&lt;/p&gt; &lt;p&gt;A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.&lt;/p&gt; &lt;p&gt;You must terminate a network instance before you can delete it.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void terminateSolNetworkInstanceTest() throws ApiException {
        String nsInstanceId = null;
        TerminateSolNetworkInstanceRequest terminateSolNetworkInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TerminateSolNetworkInstanceOutput response = api.terminateSolNetworkInstance(nsInstanceId, terminateSolNetworkInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Untags an AWS TNB resource.&lt;/p&gt; &lt;p&gt;A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the operational state of function package.&lt;/p&gt; &lt;p&gt;A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSolFunctionPackageTest() throws ApiException {
        String vnfPkgId = null;
        UpdateSolFunctionPackageRequest updateSolFunctionPackageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSolFunctionPackageOutput response = api.updateSolFunctionPackage(vnfPkgId, updateSolFunctionPackageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Update a network instance.&lt;/p&gt; &lt;p&gt;A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSolNetworkInstanceTest() throws ApiException {
        String nsInstanceId = null;
        UpdateSolNetworkInstanceRequest updateSolNetworkInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSolNetworkInstanceOutput response = api.updateSolNetworkInstance(nsInstanceId, updateSolNetworkInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the operational state of a network package.&lt;/p&gt; &lt;p&gt;A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.&lt;/p&gt; &lt;p&gt;A network service descriptor is a .yaml file in a network package that uses the TOSCA standard to describe the network functions you want to deploy and the Amazon Web Services infrastructure you want to deploy the network functions on.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSolNetworkPackageTest() throws ApiException {
        String nsdInfoId = null;
        UpdateSolNetworkPackageRequest updateSolNetworkPackageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSolNetworkPackageOutput response = api.updateSolNetworkPackage(nsdInfoId, updateSolNetworkPackageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Validates function package content. This can be used as a dry run before uploading function package content with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/tnb/latest/APIReference/API_PutSolFunctionPackageContent.html\&quot;&gt;PutSolFunctionPackageContent&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateSolFunctionPackageContentTest() throws ApiException {
        String vnfPkgId = null;
        PutSolFunctionPackageContentRequest putSolFunctionPackageContentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String contentType = null;
        ValidateSolFunctionPackageContentOutput response = api.validateSolFunctionPackageContent(vnfPkgId, putSolFunctionPackageContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, contentType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Validates network package content. This can be used as a dry run before uploading network package content with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/tnb/latest/APIReference/API_PutSolNetworkPackageContent.html\&quot;&gt;PutSolNetworkPackageContent&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateSolNetworkPackageContentTest() throws ApiException {
        String nsdInfoId = null;
        PutSolNetworkPackageContentRequest putSolNetworkPackageContentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String contentType = null;
        ValidateSolNetworkPackageContentOutput response = api.validateSolNetworkPackageContent(nsdInfoId, putSolNetworkPackageContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, contentType);
        // TODO: test validations
    }

}
