/*
 * AWS Telco Network Builder
 *  Amazon Web Services Telco Network Builder (TNB) is a network automation service that helps you deploy and manage telecom networks. AWS TNB helps you with the lifecycle management of your telecommunication network functions throughout planning, deployment, and post-deployment activities.
 *
 * The version of the OpenAPI document: 2008-10-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.GetSolNetworkInstanceMetadata;
import org.openapitools.client.model.LcmOperationInfo;
import org.openapitools.client.model.NsState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSolNetworkInstanceOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:23.879487-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSolNetworkInstanceOutput {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LCM_OP_INFO = "lcmOpInfo";
  @SerializedName(SERIALIZED_NAME_LCM_OP_INFO)
  private LcmOperationInfo lcmOpInfo;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private GetSolNetworkInstanceMetadata metadata;

  public static final String SERIALIZED_NAME_NS_INSTANCE_DESCRIPTION = "nsInstanceDescription";
  @SerializedName(SERIALIZED_NAME_NS_INSTANCE_DESCRIPTION)
  private String nsInstanceDescription;

  public static final String SERIALIZED_NAME_NS_INSTANCE_NAME = "nsInstanceName";
  @SerializedName(SERIALIZED_NAME_NS_INSTANCE_NAME)
  private String nsInstanceName;

  public static final String SERIALIZED_NAME_NS_STATE = "nsState";
  @SerializedName(SERIALIZED_NAME_NS_STATE)
  private NsState nsState;

  public static final String SERIALIZED_NAME_NSD_ID = "nsdId";
  @SerializedName(SERIALIZED_NAME_NSD_ID)
  private String nsdId;

  public static final String SERIALIZED_NAME_NSD_INFO_ID = "nsdInfoId";
  @SerializedName(SERIALIZED_NAME_NSD_INFO_ID)
  private String nsdInfoId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public GetSolNetworkInstanceOutput() {
  }

  public GetSolNetworkInstanceOutput arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public GetSolNetworkInstanceOutput id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetSolNetworkInstanceOutput lcmOpInfo(LcmOperationInfo lcmOpInfo) {
    this.lcmOpInfo = lcmOpInfo;
    return this;
  }

  /**
   * Get lcmOpInfo
   * @return lcmOpInfo
   */
  @javax.annotation.Nullable
  public LcmOperationInfo getLcmOpInfo() {
    return lcmOpInfo;
  }

  public void setLcmOpInfo(LcmOperationInfo lcmOpInfo) {
    this.lcmOpInfo = lcmOpInfo;
  }


  public GetSolNetworkInstanceOutput metadata(GetSolNetworkInstanceMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public GetSolNetworkInstanceMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(GetSolNetworkInstanceMetadata metadata) {
    this.metadata = metadata;
  }


  public GetSolNetworkInstanceOutput nsInstanceDescription(String nsInstanceDescription) {
    this.nsInstanceDescription = nsInstanceDescription;
    return this;
  }

  /**
   * Get nsInstanceDescription
   * @return nsInstanceDescription
   */
  @javax.annotation.Nonnull
  public String getNsInstanceDescription() {
    return nsInstanceDescription;
  }

  public void setNsInstanceDescription(String nsInstanceDescription) {
    this.nsInstanceDescription = nsInstanceDescription;
  }


  public GetSolNetworkInstanceOutput nsInstanceName(String nsInstanceName) {
    this.nsInstanceName = nsInstanceName;
    return this;
  }

  /**
   * Get nsInstanceName
   * @return nsInstanceName
   */
  @javax.annotation.Nonnull
  public String getNsInstanceName() {
    return nsInstanceName;
  }

  public void setNsInstanceName(String nsInstanceName) {
    this.nsInstanceName = nsInstanceName;
  }


  public GetSolNetworkInstanceOutput nsState(NsState nsState) {
    this.nsState = nsState;
    return this;
  }

  /**
   * Get nsState
   * @return nsState
   */
  @javax.annotation.Nullable
  public NsState getNsState() {
    return nsState;
  }

  public void setNsState(NsState nsState) {
    this.nsState = nsState;
  }


  public GetSolNetworkInstanceOutput nsdId(String nsdId) {
    this.nsdId = nsdId;
    return this;
  }

  /**
   * Get nsdId
   * @return nsdId
   */
  @javax.annotation.Nonnull
  public String getNsdId() {
    return nsdId;
  }

  public void setNsdId(String nsdId) {
    this.nsdId = nsdId;
  }


  public GetSolNetworkInstanceOutput nsdInfoId(String nsdInfoId) {
    this.nsdInfoId = nsdInfoId;
    return this;
  }

  /**
   * Get nsdInfoId
   * @return nsdInfoId
   */
  @javax.annotation.Nonnull
  public String getNsdInfoId() {
    return nsdInfoId;
  }

  public void setNsdInfoId(String nsdInfoId) {
    this.nsdInfoId = nsdInfoId;
  }


  public GetSolNetworkInstanceOutput tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSolNetworkInstanceOutput getSolNetworkInstanceOutput = (GetSolNetworkInstanceOutput) o;
    return Objects.equals(this.arn, getSolNetworkInstanceOutput.arn) &&
        Objects.equals(this.id, getSolNetworkInstanceOutput.id) &&
        Objects.equals(this.lcmOpInfo, getSolNetworkInstanceOutput.lcmOpInfo) &&
        Objects.equals(this.metadata, getSolNetworkInstanceOutput.metadata) &&
        Objects.equals(this.nsInstanceDescription, getSolNetworkInstanceOutput.nsInstanceDescription) &&
        Objects.equals(this.nsInstanceName, getSolNetworkInstanceOutput.nsInstanceName) &&
        Objects.equals(this.nsState, getSolNetworkInstanceOutput.nsState) &&
        Objects.equals(this.nsdId, getSolNetworkInstanceOutput.nsdId) &&
        Objects.equals(this.nsdInfoId, getSolNetworkInstanceOutput.nsdInfoId) &&
        Objects.equals(this.tags, getSolNetworkInstanceOutput.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, id, lcmOpInfo, metadata, nsInstanceDescription, nsInstanceName, nsState, nsdId, nsdInfoId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSolNetworkInstanceOutput {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lcmOpInfo: ").append(toIndentedString(lcmOpInfo)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    nsInstanceDescription: ").append(toIndentedString(nsInstanceDescription)).append("\n");
    sb.append("    nsInstanceName: ").append(toIndentedString(nsInstanceName)).append("\n");
    sb.append("    nsState: ").append(toIndentedString(nsState)).append("\n");
    sb.append("    nsdId: ").append(toIndentedString(nsdId)).append("\n");
    sb.append("    nsdInfoId: ").append(toIndentedString(nsdInfoId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("id");
    openapiFields.add("lcmOpInfo");
    openapiFields.add("metadata");
    openapiFields.add("nsInstanceDescription");
    openapiFields.add("nsInstanceName");
    openapiFields.add("nsState");
    openapiFields.add("nsdId");
    openapiFields.add("nsdInfoId");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("nsInstanceDescription");
    openapiRequiredFields.add("nsInstanceName");
    openapiRequiredFields.add("nsdId");
    openapiRequiredFields.add("nsdInfoId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSolNetworkInstanceOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSolNetworkInstanceOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSolNetworkInstanceOutput is not found in the empty JSON string", GetSolNetworkInstanceOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSolNetworkInstanceOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSolNetworkInstanceOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSolNetworkInstanceOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the optional field `lcmOpInfo`
      if (jsonObj.get("lcmOpInfo") != null && !jsonObj.get("lcmOpInfo").isJsonNull()) {
        LcmOperationInfo.validateJsonElement(jsonObj.get("lcmOpInfo"));
      }
      // validate the required field `metadata`
      GetSolNetworkInstanceMetadata.validateJsonElement(jsonObj.get("metadata"));
      // validate the required field `nsInstanceDescription`
      String.validateJsonElement(jsonObj.get("nsInstanceDescription"));
      // validate the required field `nsInstanceName`
      String.validateJsonElement(jsonObj.get("nsInstanceName"));
      // validate the optional field `nsState`
      if (jsonObj.get("nsState") != null && !jsonObj.get("nsState").isJsonNull()) {
        NsState.validateJsonElement(jsonObj.get("nsState"));
      }
      // validate the required field `nsdId`
      String.validateJsonElement(jsonObj.get("nsdId"));
      // validate the required field `nsdInfoId`
      String.validateJsonElement(jsonObj.get("nsdInfoId"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSolNetworkInstanceOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSolNetworkInstanceOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSolNetworkInstanceOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSolNetworkInstanceOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSolNetworkInstanceOutput>() {
           @Override
           public void write(JsonWriter out, GetSolNetworkInstanceOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSolNetworkInstanceOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSolNetworkInstanceOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSolNetworkInstanceOutput
   * @throws IOException if the JSON string is invalid with respect to GetSolNetworkInstanceOutput
   */
  public static GetSolNetworkInstanceOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSolNetworkInstanceOutput.class);
  }

  /**
   * Convert an instance of GetSolNetworkInstanceOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

