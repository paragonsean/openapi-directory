/*
 * AWS Telco Network Builder
 *  Amazon Web Services Telco Network Builder (TNB) is a network automation service that helps you deploy and manage telecom networks. AWS TNB helps you with the lifecycle management of your telecommunication network functions throughout planning, deployment, and post-deployment activities.
 *
 * The version of the OpenAPI document: 2008-10-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.GetSolFunctionInstanceMetadata;
import org.openapitools.client.model.GetSolVnfInfo;
import org.openapitools.client.model.VnfInstantiationState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSolFunctionInstanceOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:23.879487-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSolFunctionInstanceOutput {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTANTIATED_VNF_INFO = "instantiatedVnfInfo";
  @SerializedName(SERIALIZED_NAME_INSTANTIATED_VNF_INFO)
  private GetSolVnfInfo instantiatedVnfInfo;

  public static final String SERIALIZED_NAME_INSTANTIATION_STATE = "instantiationState";
  @SerializedName(SERIALIZED_NAME_INSTANTIATION_STATE)
  private VnfInstantiationState instantiationState;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private GetSolFunctionInstanceMetadata metadata;

  public static final String SERIALIZED_NAME_NS_INSTANCE_ID = "nsInstanceId";
  @SerializedName(SERIALIZED_NAME_NS_INSTANCE_ID)
  private String nsInstanceId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_VNF_PKG_ID = "vnfPkgId";
  @SerializedName(SERIALIZED_NAME_VNF_PKG_ID)
  private String vnfPkgId;

  public static final String SERIALIZED_NAME_VNF_PRODUCT_NAME = "vnfProductName";
  @SerializedName(SERIALIZED_NAME_VNF_PRODUCT_NAME)
  private String vnfProductName;

  public static final String SERIALIZED_NAME_VNF_PROVIDER = "vnfProvider";
  @SerializedName(SERIALIZED_NAME_VNF_PROVIDER)
  private String vnfProvider;

  public static final String SERIALIZED_NAME_VNFD_ID = "vnfdId";
  @SerializedName(SERIALIZED_NAME_VNFD_ID)
  private String vnfdId;

  public static final String SERIALIZED_NAME_VNFD_VERSION = "vnfdVersion";
  @SerializedName(SERIALIZED_NAME_VNFD_VERSION)
  private String vnfdVersion;

  public GetSolFunctionInstanceOutput() {
  }

  public GetSolFunctionInstanceOutput arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public GetSolFunctionInstanceOutput id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetSolFunctionInstanceOutput instantiatedVnfInfo(GetSolVnfInfo instantiatedVnfInfo) {
    this.instantiatedVnfInfo = instantiatedVnfInfo;
    return this;
  }

  /**
   * Get instantiatedVnfInfo
   * @return instantiatedVnfInfo
   */
  @javax.annotation.Nullable
  public GetSolVnfInfo getInstantiatedVnfInfo() {
    return instantiatedVnfInfo;
  }

  public void setInstantiatedVnfInfo(GetSolVnfInfo instantiatedVnfInfo) {
    this.instantiatedVnfInfo = instantiatedVnfInfo;
  }


  public GetSolFunctionInstanceOutput instantiationState(VnfInstantiationState instantiationState) {
    this.instantiationState = instantiationState;
    return this;
  }

  /**
   * Get instantiationState
   * @return instantiationState
   */
  @javax.annotation.Nonnull
  public VnfInstantiationState getInstantiationState() {
    return instantiationState;
  }

  public void setInstantiationState(VnfInstantiationState instantiationState) {
    this.instantiationState = instantiationState;
  }


  public GetSolFunctionInstanceOutput metadata(GetSolFunctionInstanceMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public GetSolFunctionInstanceMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(GetSolFunctionInstanceMetadata metadata) {
    this.metadata = metadata;
  }


  public GetSolFunctionInstanceOutput nsInstanceId(String nsInstanceId) {
    this.nsInstanceId = nsInstanceId;
    return this;
  }

  /**
   * Get nsInstanceId
   * @return nsInstanceId
   */
  @javax.annotation.Nonnull
  public String getNsInstanceId() {
    return nsInstanceId;
  }

  public void setNsInstanceId(String nsInstanceId) {
    this.nsInstanceId = nsInstanceId;
  }


  public GetSolFunctionInstanceOutput tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public GetSolFunctionInstanceOutput vnfPkgId(String vnfPkgId) {
    this.vnfPkgId = vnfPkgId;
    return this;
  }

  /**
   * Get vnfPkgId
   * @return vnfPkgId
   */
  @javax.annotation.Nonnull
  public String getVnfPkgId() {
    return vnfPkgId;
  }

  public void setVnfPkgId(String vnfPkgId) {
    this.vnfPkgId = vnfPkgId;
  }


  public GetSolFunctionInstanceOutput vnfProductName(String vnfProductName) {
    this.vnfProductName = vnfProductName;
    return this;
  }

  /**
   * Get vnfProductName
   * @return vnfProductName
   */
  @javax.annotation.Nullable
  public String getVnfProductName() {
    return vnfProductName;
  }

  public void setVnfProductName(String vnfProductName) {
    this.vnfProductName = vnfProductName;
  }


  public GetSolFunctionInstanceOutput vnfProvider(String vnfProvider) {
    this.vnfProvider = vnfProvider;
    return this;
  }

  /**
   * Get vnfProvider
   * @return vnfProvider
   */
  @javax.annotation.Nullable
  public String getVnfProvider() {
    return vnfProvider;
  }

  public void setVnfProvider(String vnfProvider) {
    this.vnfProvider = vnfProvider;
  }


  public GetSolFunctionInstanceOutput vnfdId(String vnfdId) {
    this.vnfdId = vnfdId;
    return this;
  }

  /**
   * Get vnfdId
   * @return vnfdId
   */
  @javax.annotation.Nonnull
  public String getVnfdId() {
    return vnfdId;
  }

  public void setVnfdId(String vnfdId) {
    this.vnfdId = vnfdId;
  }


  public GetSolFunctionInstanceOutput vnfdVersion(String vnfdVersion) {
    this.vnfdVersion = vnfdVersion;
    return this;
  }

  /**
   * Get vnfdVersion
   * @return vnfdVersion
   */
  @javax.annotation.Nullable
  public String getVnfdVersion() {
    return vnfdVersion;
  }

  public void setVnfdVersion(String vnfdVersion) {
    this.vnfdVersion = vnfdVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSolFunctionInstanceOutput getSolFunctionInstanceOutput = (GetSolFunctionInstanceOutput) o;
    return Objects.equals(this.arn, getSolFunctionInstanceOutput.arn) &&
        Objects.equals(this.id, getSolFunctionInstanceOutput.id) &&
        Objects.equals(this.instantiatedVnfInfo, getSolFunctionInstanceOutput.instantiatedVnfInfo) &&
        Objects.equals(this.instantiationState, getSolFunctionInstanceOutput.instantiationState) &&
        Objects.equals(this.metadata, getSolFunctionInstanceOutput.metadata) &&
        Objects.equals(this.nsInstanceId, getSolFunctionInstanceOutput.nsInstanceId) &&
        Objects.equals(this.tags, getSolFunctionInstanceOutput.tags) &&
        Objects.equals(this.vnfPkgId, getSolFunctionInstanceOutput.vnfPkgId) &&
        Objects.equals(this.vnfProductName, getSolFunctionInstanceOutput.vnfProductName) &&
        Objects.equals(this.vnfProvider, getSolFunctionInstanceOutput.vnfProvider) &&
        Objects.equals(this.vnfdId, getSolFunctionInstanceOutput.vnfdId) &&
        Objects.equals(this.vnfdVersion, getSolFunctionInstanceOutput.vnfdVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, id, instantiatedVnfInfo, instantiationState, metadata, nsInstanceId, tags, vnfPkgId, vnfProductName, vnfProvider, vnfdId, vnfdVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSolFunctionInstanceOutput {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instantiatedVnfInfo: ").append(toIndentedString(instantiatedVnfInfo)).append("\n");
    sb.append("    instantiationState: ").append(toIndentedString(instantiationState)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    nsInstanceId: ").append(toIndentedString(nsInstanceId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    vnfPkgId: ").append(toIndentedString(vnfPkgId)).append("\n");
    sb.append("    vnfProductName: ").append(toIndentedString(vnfProductName)).append("\n");
    sb.append("    vnfProvider: ").append(toIndentedString(vnfProvider)).append("\n");
    sb.append("    vnfdId: ").append(toIndentedString(vnfdId)).append("\n");
    sb.append("    vnfdVersion: ").append(toIndentedString(vnfdVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("id");
    openapiFields.add("instantiatedVnfInfo");
    openapiFields.add("instantiationState");
    openapiFields.add("metadata");
    openapiFields.add("nsInstanceId");
    openapiFields.add("tags");
    openapiFields.add("vnfPkgId");
    openapiFields.add("vnfProductName");
    openapiFields.add("vnfProvider");
    openapiFields.add("vnfdId");
    openapiFields.add("vnfdVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("instantiationState");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("nsInstanceId");
    openapiRequiredFields.add("vnfPkgId");
    openapiRequiredFields.add("vnfdId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSolFunctionInstanceOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSolFunctionInstanceOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSolFunctionInstanceOutput is not found in the empty JSON string", GetSolFunctionInstanceOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSolFunctionInstanceOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSolFunctionInstanceOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSolFunctionInstanceOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the optional field `instantiatedVnfInfo`
      if (jsonObj.get("instantiatedVnfInfo") != null && !jsonObj.get("instantiatedVnfInfo").isJsonNull()) {
        GetSolVnfInfo.validateJsonElement(jsonObj.get("instantiatedVnfInfo"));
      }
      // validate the required field `instantiationState`
      VnfInstantiationState.validateJsonElement(jsonObj.get("instantiationState"));
      // validate the required field `metadata`
      GetSolFunctionInstanceMetadata.validateJsonElement(jsonObj.get("metadata"));
      // validate the required field `nsInstanceId`
      String.validateJsonElement(jsonObj.get("nsInstanceId"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the required field `vnfPkgId`
      String.validateJsonElement(jsonObj.get("vnfPkgId"));
      // validate the optional field `vnfProductName`
      if (jsonObj.get("vnfProductName") != null && !jsonObj.get("vnfProductName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vnfProductName"));
      }
      // validate the optional field `vnfProvider`
      if (jsonObj.get("vnfProvider") != null && !jsonObj.get("vnfProvider").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vnfProvider"));
      }
      // validate the required field `vnfdId`
      String.validateJsonElement(jsonObj.get("vnfdId"));
      // validate the optional field `vnfdVersion`
      if (jsonObj.get("vnfdVersion") != null && !jsonObj.get("vnfdVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vnfdVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSolFunctionInstanceOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSolFunctionInstanceOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSolFunctionInstanceOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSolFunctionInstanceOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSolFunctionInstanceOutput>() {
           @Override
           public void write(JsonWriter out, GetSolFunctionInstanceOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSolFunctionInstanceOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSolFunctionInstanceOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSolFunctionInstanceOutput
   * @throws IOException if the JSON string is invalid with respect to GetSolFunctionInstanceOutput
   */
  public static GetSolFunctionInstanceOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSolFunctionInstanceOutput.class);
  }

  /**
   * Convert an instance of GetSolFunctionInstanceOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

