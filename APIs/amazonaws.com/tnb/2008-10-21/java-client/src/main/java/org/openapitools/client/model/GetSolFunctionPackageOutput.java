/*
 * AWS Telco Network Builder
 *  Amazon Web Services Telco Network Builder (TNB) is a network automation service that helps you deploy and manage telecom networks. AWS TNB helps you with the lifecycle management of your telecommunication network functions throughout planning, deployment, and post-deployment activities.
 *
 * The version of the OpenAPI document: 2008-10-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.GetSolFunctionPackageMetadata;
import org.openapitools.client.model.OnboardingState;
import org.openapitools.client.model.OperationalState;
import org.openapitools.client.model.UsageState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSolFunctionPackageOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:23.879487-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSolFunctionPackageOutput {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private GetSolFunctionPackageMetadata metadata;

  public static final String SERIALIZED_NAME_ONBOARDING_STATE = "onboardingState";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_STATE)
  private OnboardingState onboardingState;

  public static final String SERIALIZED_NAME_OPERATIONAL_STATE = "operationalState";
  @SerializedName(SERIALIZED_NAME_OPERATIONAL_STATE)
  private OperationalState operationalState;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_USAGE_STATE = "usageState";
  @SerializedName(SERIALIZED_NAME_USAGE_STATE)
  private UsageState usageState;

  public static final String SERIALIZED_NAME_VNF_PRODUCT_NAME = "vnfProductName";
  @SerializedName(SERIALIZED_NAME_VNF_PRODUCT_NAME)
  private String vnfProductName;

  public static final String SERIALIZED_NAME_VNF_PROVIDER = "vnfProvider";
  @SerializedName(SERIALIZED_NAME_VNF_PROVIDER)
  private String vnfProvider;

  public static final String SERIALIZED_NAME_VNFD_ID = "vnfdId";
  @SerializedName(SERIALIZED_NAME_VNFD_ID)
  private String vnfdId;

  public static final String SERIALIZED_NAME_VNFD_VERSION = "vnfdVersion";
  @SerializedName(SERIALIZED_NAME_VNFD_VERSION)
  private String vnfdVersion;

  public GetSolFunctionPackageOutput() {
  }

  public GetSolFunctionPackageOutput arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public GetSolFunctionPackageOutput id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetSolFunctionPackageOutput metadata(GetSolFunctionPackageMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public GetSolFunctionPackageMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(GetSolFunctionPackageMetadata metadata) {
    this.metadata = metadata;
  }


  public GetSolFunctionPackageOutput onboardingState(OnboardingState onboardingState) {
    this.onboardingState = onboardingState;
    return this;
  }

  /**
   * Get onboardingState
   * @return onboardingState
   */
  @javax.annotation.Nonnull
  public OnboardingState getOnboardingState() {
    return onboardingState;
  }

  public void setOnboardingState(OnboardingState onboardingState) {
    this.onboardingState = onboardingState;
  }


  public GetSolFunctionPackageOutput operationalState(OperationalState operationalState) {
    this.operationalState = operationalState;
    return this;
  }

  /**
   * Get operationalState
   * @return operationalState
   */
  @javax.annotation.Nonnull
  public OperationalState getOperationalState() {
    return operationalState;
  }

  public void setOperationalState(OperationalState operationalState) {
    this.operationalState = operationalState;
  }


  public GetSolFunctionPackageOutput tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public GetSolFunctionPackageOutput usageState(UsageState usageState) {
    this.usageState = usageState;
    return this;
  }

  /**
   * Get usageState
   * @return usageState
   */
  @javax.annotation.Nonnull
  public UsageState getUsageState() {
    return usageState;
  }

  public void setUsageState(UsageState usageState) {
    this.usageState = usageState;
  }


  public GetSolFunctionPackageOutput vnfProductName(String vnfProductName) {
    this.vnfProductName = vnfProductName;
    return this;
  }

  /**
   * Get vnfProductName
   * @return vnfProductName
   */
  @javax.annotation.Nullable
  public String getVnfProductName() {
    return vnfProductName;
  }

  public void setVnfProductName(String vnfProductName) {
    this.vnfProductName = vnfProductName;
  }


  public GetSolFunctionPackageOutput vnfProvider(String vnfProvider) {
    this.vnfProvider = vnfProvider;
    return this;
  }

  /**
   * Get vnfProvider
   * @return vnfProvider
   */
  @javax.annotation.Nullable
  public String getVnfProvider() {
    return vnfProvider;
  }

  public void setVnfProvider(String vnfProvider) {
    this.vnfProvider = vnfProvider;
  }


  public GetSolFunctionPackageOutput vnfdId(String vnfdId) {
    this.vnfdId = vnfdId;
    return this;
  }

  /**
   * Get vnfdId
   * @return vnfdId
   */
  @javax.annotation.Nullable
  public String getVnfdId() {
    return vnfdId;
  }

  public void setVnfdId(String vnfdId) {
    this.vnfdId = vnfdId;
  }


  public GetSolFunctionPackageOutput vnfdVersion(String vnfdVersion) {
    this.vnfdVersion = vnfdVersion;
    return this;
  }

  /**
   * Get vnfdVersion
   * @return vnfdVersion
   */
  @javax.annotation.Nullable
  public String getVnfdVersion() {
    return vnfdVersion;
  }

  public void setVnfdVersion(String vnfdVersion) {
    this.vnfdVersion = vnfdVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSolFunctionPackageOutput getSolFunctionPackageOutput = (GetSolFunctionPackageOutput) o;
    return Objects.equals(this.arn, getSolFunctionPackageOutput.arn) &&
        Objects.equals(this.id, getSolFunctionPackageOutput.id) &&
        Objects.equals(this.metadata, getSolFunctionPackageOutput.metadata) &&
        Objects.equals(this.onboardingState, getSolFunctionPackageOutput.onboardingState) &&
        Objects.equals(this.operationalState, getSolFunctionPackageOutput.operationalState) &&
        Objects.equals(this.tags, getSolFunctionPackageOutput.tags) &&
        Objects.equals(this.usageState, getSolFunctionPackageOutput.usageState) &&
        Objects.equals(this.vnfProductName, getSolFunctionPackageOutput.vnfProductName) &&
        Objects.equals(this.vnfProvider, getSolFunctionPackageOutput.vnfProvider) &&
        Objects.equals(this.vnfdId, getSolFunctionPackageOutput.vnfdId) &&
        Objects.equals(this.vnfdVersion, getSolFunctionPackageOutput.vnfdVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, id, metadata, onboardingState, operationalState, tags, usageState, vnfProductName, vnfProvider, vnfdId, vnfdVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSolFunctionPackageOutput {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    onboardingState: ").append(toIndentedString(onboardingState)).append("\n");
    sb.append("    operationalState: ").append(toIndentedString(operationalState)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    usageState: ").append(toIndentedString(usageState)).append("\n");
    sb.append("    vnfProductName: ").append(toIndentedString(vnfProductName)).append("\n");
    sb.append("    vnfProvider: ").append(toIndentedString(vnfProvider)).append("\n");
    sb.append("    vnfdId: ").append(toIndentedString(vnfdId)).append("\n");
    sb.append("    vnfdVersion: ").append(toIndentedString(vnfdVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("id");
    openapiFields.add("metadata");
    openapiFields.add("onboardingState");
    openapiFields.add("operationalState");
    openapiFields.add("tags");
    openapiFields.add("usageState");
    openapiFields.add("vnfProductName");
    openapiFields.add("vnfProvider");
    openapiFields.add("vnfdId");
    openapiFields.add("vnfdVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("onboardingState");
    openapiRequiredFields.add("operationalState");
    openapiRequiredFields.add("usageState");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSolFunctionPackageOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSolFunctionPackageOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSolFunctionPackageOutput is not found in the empty JSON string", GetSolFunctionPackageOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSolFunctionPackageOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSolFunctionPackageOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSolFunctionPackageOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        GetSolFunctionPackageMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      // validate the required field `onboardingState`
      OnboardingState.validateJsonElement(jsonObj.get("onboardingState"));
      // validate the required field `operationalState`
      OperationalState.validateJsonElement(jsonObj.get("operationalState"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the required field `usageState`
      UsageState.validateJsonElement(jsonObj.get("usageState"));
      // validate the optional field `vnfProductName`
      if (jsonObj.get("vnfProductName") != null && !jsonObj.get("vnfProductName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vnfProductName"));
      }
      // validate the optional field `vnfProvider`
      if (jsonObj.get("vnfProvider") != null && !jsonObj.get("vnfProvider").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vnfProvider"));
      }
      // validate the optional field `vnfdId`
      if (jsonObj.get("vnfdId") != null && !jsonObj.get("vnfdId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vnfdId"));
      }
      // validate the optional field `vnfdVersion`
      if (jsonObj.get("vnfdVersion") != null && !jsonObj.get("vnfdVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vnfdVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSolFunctionPackageOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSolFunctionPackageOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSolFunctionPackageOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSolFunctionPackageOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSolFunctionPackageOutput>() {
           @Override
           public void write(JsonWriter out, GetSolFunctionPackageOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSolFunctionPackageOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSolFunctionPackageOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSolFunctionPackageOutput
   * @throws IOException if the JSON string is invalid with respect to GetSolFunctionPackageOutput
   */
  public static GetSolFunctionPackageOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSolFunctionPackageOutput.class);
  }

  /**
   * Convert an instance of GetSolFunctionPackageOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

