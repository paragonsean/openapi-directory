/*
 * AWS Telco Network Builder
 *  Amazon Web Services Telco Network Builder (TNB) is a network automation service that helps you deploy and manage telecom networks. AWS TNB helps you with the lifecycle management of your telecommunication network functions throughout planning, deployment, and post-deployment activities.
 *
 * The version of the OpenAPI document: 2008-10-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.UpdateSolNetworkInstanceRequestModifyVnfInfoData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSolNetworkInstanceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:23.879487-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSolNetworkInstanceRequest {
  public static final String SERIALIZED_NAME_MODIFY_VNF_INFO_DATA = "modifyVnfInfoData";
  @SerializedName(SERIALIZED_NAME_MODIFY_VNF_INFO_DATA)
  private UpdateSolNetworkInstanceRequestModifyVnfInfoData modifyVnfInfoData;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  /**
   * The type of update.
   */
  @JsonAdapter(UpdateTypeEnum.Adapter.class)
  public enum UpdateTypeEnum {
    MODIFY_VNF_INFORMATION("MODIFY_VNF_INFORMATION");

    private String value;

    UpdateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpdateTypeEnum fromValue(String value) {
      for (UpdateTypeEnum b : UpdateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpdateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpdateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpdateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpdateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UpdateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPDATE_TYPE = "updateType";
  @SerializedName(SERIALIZED_NAME_UPDATE_TYPE)
  private UpdateTypeEnum updateType;

  public UpdateSolNetworkInstanceRequest() {
  }

  public UpdateSolNetworkInstanceRequest modifyVnfInfoData(UpdateSolNetworkInstanceRequestModifyVnfInfoData modifyVnfInfoData) {
    this.modifyVnfInfoData = modifyVnfInfoData;
    return this;
  }

  /**
   * Get modifyVnfInfoData
   * @return modifyVnfInfoData
   */
  @javax.annotation.Nullable
  public UpdateSolNetworkInstanceRequestModifyVnfInfoData getModifyVnfInfoData() {
    return modifyVnfInfoData;
  }

  public void setModifyVnfInfoData(UpdateSolNetworkInstanceRequestModifyVnfInfoData modifyVnfInfoData) {
    this.modifyVnfInfoData = modifyVnfInfoData;
  }


  public UpdateSolNetworkInstanceRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public UpdateSolNetworkInstanceRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. When you use this API, the tags are transferred to the network operation that is created. Use tags to search and filter your resources or track your Amazon Web Services costs.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public UpdateSolNetworkInstanceRequest updateType(UpdateTypeEnum updateType) {
    this.updateType = updateType;
    return this;
  }

  /**
   * The type of update.
   * @return updateType
   */
  @javax.annotation.Nonnull
  public UpdateTypeEnum getUpdateType() {
    return updateType;
  }

  public void setUpdateType(UpdateTypeEnum updateType) {
    this.updateType = updateType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSolNetworkInstanceRequest updateSolNetworkInstanceRequest = (UpdateSolNetworkInstanceRequest) o;
    return Objects.equals(this.modifyVnfInfoData, updateSolNetworkInstanceRequest.modifyVnfInfoData) &&
        Objects.equals(this.tags, updateSolNetworkInstanceRequest.tags) &&
        Objects.equals(this.updateType, updateSolNetworkInstanceRequest.updateType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modifyVnfInfoData, tags, updateType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSolNetworkInstanceRequest {\n");
    sb.append("    modifyVnfInfoData: ").append(toIndentedString(modifyVnfInfoData)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updateType: ").append(toIndentedString(updateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("modifyVnfInfoData");
    openapiFields.add("tags");
    openapiFields.add("updateType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("updateType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSolNetworkInstanceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSolNetworkInstanceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSolNetworkInstanceRequest is not found in the empty JSON string", UpdateSolNetworkInstanceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSolNetworkInstanceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSolNetworkInstanceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSolNetworkInstanceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `modifyVnfInfoData`
      if (jsonObj.get("modifyVnfInfoData") != null && !jsonObj.get("modifyVnfInfoData").isJsonNull()) {
        UpdateSolNetworkInstanceRequestModifyVnfInfoData.validateJsonElement(jsonObj.get("modifyVnfInfoData"));
      }
      if (!jsonObj.get("updateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateType").toString()));
      }
      // validate the required field `updateType`
      UpdateTypeEnum.validateJsonElement(jsonObj.get("updateType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSolNetworkInstanceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSolNetworkInstanceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSolNetworkInstanceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSolNetworkInstanceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSolNetworkInstanceRequest>() {
           @Override
           public void write(JsonWriter out, UpdateSolNetworkInstanceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSolNetworkInstanceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSolNetworkInstanceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSolNetworkInstanceRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateSolNetworkInstanceRequest
   */
  public static UpdateSolNetworkInstanceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSolNetworkInstanceRequest.class);
  }

  /**
   * Convert an instance of UpdateSolNetworkInstanceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

