/*
 * AWS Telco Network Builder
 *  Amazon Web Services Telco Network Builder (TNB) is a network automation service that helps you deploy and manage telecom networks. AWS TNB helps you with the lifecycle management of your telecommunication network functions throughout planning, deployment, and post-deployment activities.
 *
 * The version of the OpenAPI document: 2008-10-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSolNetworkInstanceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:23.879487-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSolNetworkInstanceRequest {
  public static final String SERIALIZED_NAME_NS_DESCRIPTION = "nsDescription";
  @SerializedName(SERIALIZED_NAME_NS_DESCRIPTION)
  private String nsDescription;

  public static final String SERIALIZED_NAME_NS_NAME = "nsName";
  @SerializedName(SERIALIZED_NAME_NS_NAME)
  private String nsName;

  public static final String SERIALIZED_NAME_NSD_INFO_ID = "nsdInfoId";
  @SerializedName(SERIALIZED_NAME_NSD_INFO_ID)
  private String nsdInfoId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateSolNetworkInstanceRequest() {
  }

  public CreateSolNetworkInstanceRequest nsDescription(String nsDescription) {
    this.nsDescription = nsDescription;
    return this;
  }

  /**
   * Network instance description.
   * @return nsDescription
   */
  @javax.annotation.Nullable
  public String getNsDescription() {
    return nsDescription;
  }

  public void setNsDescription(String nsDescription) {
    this.nsDescription = nsDescription;
  }


  public CreateSolNetworkInstanceRequest nsName(String nsName) {
    this.nsName = nsName;
    return this;
  }

  /**
   * Network instance name.
   * @return nsName
   */
  @javax.annotation.Nonnull
  public String getNsName() {
    return nsName;
  }

  public void setNsName(String nsName) {
    this.nsName = nsName;
  }


  public CreateSolNetworkInstanceRequest nsdInfoId(String nsdInfoId) {
    this.nsdInfoId = nsdInfoId;
    return this;
  }

  /**
   * ID for network service descriptor.
   * @return nsdInfoId
   */
  @javax.annotation.Nonnull
  public String getNsdInfoId() {
    return nsdInfoId;
  }

  public void setNsdInfoId(String nsdInfoId) {
    this.nsdInfoId = nsdInfoId;
  }


  public CreateSolNetworkInstanceRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateSolNetworkInstanceRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSolNetworkInstanceRequest createSolNetworkInstanceRequest = (CreateSolNetworkInstanceRequest) o;
    return Objects.equals(this.nsDescription, createSolNetworkInstanceRequest.nsDescription) &&
        Objects.equals(this.nsName, createSolNetworkInstanceRequest.nsName) &&
        Objects.equals(this.nsdInfoId, createSolNetworkInstanceRequest.nsdInfoId) &&
        Objects.equals(this.tags, createSolNetworkInstanceRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nsDescription, nsName, nsdInfoId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSolNetworkInstanceRequest {\n");
    sb.append("    nsDescription: ").append(toIndentedString(nsDescription)).append("\n");
    sb.append("    nsName: ").append(toIndentedString(nsName)).append("\n");
    sb.append("    nsdInfoId: ").append(toIndentedString(nsdInfoId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nsDescription");
    openapiFields.add("nsName");
    openapiFields.add("nsdInfoId");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nsName");
    openapiRequiredFields.add("nsdInfoId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSolNetworkInstanceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSolNetworkInstanceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSolNetworkInstanceRequest is not found in the empty JSON string", CreateSolNetworkInstanceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSolNetworkInstanceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSolNetworkInstanceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSolNetworkInstanceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nsDescription") != null && !jsonObj.get("nsDescription").isJsonNull()) && !jsonObj.get("nsDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nsDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nsDescription").toString()));
      }
      if (!jsonObj.get("nsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nsName").toString()));
      }
      if (!jsonObj.get("nsdInfoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nsdInfoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nsdInfoId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSolNetworkInstanceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSolNetworkInstanceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSolNetworkInstanceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSolNetworkInstanceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSolNetworkInstanceRequest>() {
           @Override
           public void write(JsonWriter out, CreateSolNetworkInstanceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSolNetworkInstanceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSolNetworkInstanceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSolNetworkInstanceRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSolNetworkInstanceRequest
   */
  public static CreateSolNetworkInstanceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSolNetworkInstanceRequest.class);
  }

  /**
   * Convert an instance of CreateSolNetworkInstanceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

