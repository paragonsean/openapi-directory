/*
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateLegalHoldRequestRecoveryPointSelection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateLegalHoldRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:47.732009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLegalHoldRequest {
  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_TOKEN = "IdempotencyToken";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_TOKEN)
  private String idempotencyToken;

  public static final String SERIALIZED_NAME_RECOVERY_POINT_SELECTION = "RecoveryPointSelection";
  @SerializedName(SERIALIZED_NAME_RECOVERY_POINT_SELECTION)
  private CreateLegalHoldRequestRecoveryPointSelection recoveryPointSelection;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateLegalHoldRequest() {
  }

  public CreateLegalHoldRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * This is the string title of the legal hold.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CreateLegalHoldRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * This is the string description of the legal hold.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateLegalHoldRequest idempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
    return this;
  }

  /**
   * This is a user-chosen string used to distinguish between otherwise identical calls. Retrying a successful request with the same idempotency token results in a success message with no action taken.
   * @return idempotencyToken
   */
  @javax.annotation.Nullable
  public String getIdempotencyToken() {
    return idempotencyToken;
  }

  public void setIdempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
  }


  public CreateLegalHoldRequest recoveryPointSelection(CreateLegalHoldRequestRecoveryPointSelection recoveryPointSelection) {
    this.recoveryPointSelection = recoveryPointSelection;
    return this;
  }

  /**
   * Get recoveryPointSelection
   * @return recoveryPointSelection
   */
  @javax.annotation.Nullable
  public CreateLegalHoldRequestRecoveryPointSelection getRecoveryPointSelection() {
    return recoveryPointSelection;
  }

  public void setRecoveryPointSelection(CreateLegalHoldRequestRecoveryPointSelection recoveryPointSelection) {
    this.recoveryPointSelection = recoveryPointSelection;
  }


  public CreateLegalHoldRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateLegalHoldRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Optional tags to include. A tag is a key-value pair you can use to manage, filter, and search for your resources. Allowed characters include UTF-8 letters, numbers, spaces, and the following characters: + - &#x3D; . _ : /. 
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLegalHoldRequest createLegalHoldRequest = (CreateLegalHoldRequest) o;
    return Objects.equals(this.title, createLegalHoldRequest.title) &&
        Objects.equals(this.description, createLegalHoldRequest.description) &&
        Objects.equals(this.idempotencyToken, createLegalHoldRequest.idempotencyToken) &&
        Objects.equals(this.recoveryPointSelection, createLegalHoldRequest.recoveryPointSelection) &&
        Objects.equals(this.tags, createLegalHoldRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, idempotencyToken, recoveryPointSelection, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLegalHoldRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    idempotencyToken: ").append(toIndentedString(idempotencyToken)).append("\n");
    sb.append("    recoveryPointSelection: ").append(toIndentedString(recoveryPointSelection)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Title");
    openapiFields.add("Description");
    openapiFields.add("IdempotencyToken");
    openapiFields.add("RecoveryPointSelection");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Title");
    openapiRequiredFields.add("Description");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLegalHoldRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLegalHoldRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLegalHoldRequest is not found in the empty JSON string", CreateLegalHoldRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLegalHoldRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLegalHoldRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateLegalHoldRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if (!jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("IdempotencyToken") != null && !jsonObj.get("IdempotencyToken").isJsonNull()) && !jsonObj.get("IdempotencyToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IdempotencyToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IdempotencyToken").toString()));
      }
      // validate the optional field `RecoveryPointSelection`
      if (jsonObj.get("RecoveryPointSelection") != null && !jsonObj.get("RecoveryPointSelection").isJsonNull()) {
        CreateLegalHoldRequestRecoveryPointSelection.validateJsonElement(jsonObj.get("RecoveryPointSelection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLegalHoldRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLegalHoldRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLegalHoldRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLegalHoldRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLegalHoldRequest>() {
           @Override
           public void write(JsonWriter out, CreateLegalHoldRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLegalHoldRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLegalHoldRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLegalHoldRequest
   * @throws IOException if the JSON string is invalid with respect to CreateLegalHoldRequest
   */
  public static CreateLegalHoldRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLegalHoldRequest.class);
  }

  /**
   * Convert an instance of CreateLegalHoldRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

