/*
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBackupSelectionOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:47.732009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateBackupSelectionOutput {
  public static final String SERIALIZED_NAME_SELECTION_ID = "SelectionId";
  @SerializedName(SERIALIZED_NAME_SELECTION_ID)
  private String selectionId;

  public static final String SERIALIZED_NAME_BACKUP_PLAN_ID = "BackupPlanId";
  @SerializedName(SERIALIZED_NAME_BACKUP_PLAN_ID)
  private String backupPlanId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public CreateBackupSelectionOutput() {
  }

  public CreateBackupSelectionOutput selectionId(String selectionId) {
    this.selectionId = selectionId;
    return this;
  }

  /**
   * Get selectionId
   * @return selectionId
   */
  @javax.annotation.Nullable
  public String getSelectionId() {
    return selectionId;
  }

  public void setSelectionId(String selectionId) {
    this.selectionId = selectionId;
  }


  public CreateBackupSelectionOutput backupPlanId(String backupPlanId) {
    this.backupPlanId = backupPlanId;
    return this;
  }

  /**
   * Get backupPlanId
   * @return backupPlanId
   */
  @javax.annotation.Nullable
  public String getBackupPlanId() {
    return backupPlanId;
  }

  public void setBackupPlanId(String backupPlanId) {
    this.backupPlanId = backupPlanId;
  }


  public CreateBackupSelectionOutput creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBackupSelectionOutput createBackupSelectionOutput = (CreateBackupSelectionOutput) o;
    return Objects.equals(this.selectionId, createBackupSelectionOutput.selectionId) &&
        Objects.equals(this.backupPlanId, createBackupSelectionOutput.backupPlanId) &&
        Objects.equals(this.creationDate, createBackupSelectionOutput.creationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(selectionId, backupPlanId, creationDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBackupSelectionOutput {\n");
    sb.append("    selectionId: ").append(toIndentedString(selectionId)).append("\n");
    sb.append("    backupPlanId: ").append(toIndentedString(backupPlanId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SelectionId");
    openapiFields.add("BackupPlanId");
    openapiFields.add("CreationDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBackupSelectionOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBackupSelectionOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBackupSelectionOutput is not found in the empty JSON string", CreateBackupSelectionOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBackupSelectionOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBackupSelectionOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SelectionId`
      if (jsonObj.get("SelectionId") != null && !jsonObj.get("SelectionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SelectionId"));
      }
      // validate the optional field `BackupPlanId`
      if (jsonObj.get("BackupPlanId") != null && !jsonObj.get("BackupPlanId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BackupPlanId"));
      }
      // validate the optional field `CreationDate`
      if (jsonObj.get("CreationDate") != null && !jsonObj.get("CreationDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBackupSelectionOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBackupSelectionOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBackupSelectionOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBackupSelectionOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBackupSelectionOutput>() {
           @Override
           public void write(JsonWriter out, CreateBackupSelectionOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBackupSelectionOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBackupSelectionOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBackupSelectionOutput
   * @throws IOException if the JSON string is invalid with respect to CreateBackupSelectionOutput
   */
  public static CreateBackupSelectionOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBackupSelectionOutput.class);
  }

  /**
   * Convert an instance of CreateBackupSelectionOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

