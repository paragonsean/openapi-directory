/*
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains metadata about a backup plan.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:47.732009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupPlansListMember {
  public static final String SERIALIZED_NAME_BACKUP_PLAN_ARN = "BackupPlanArn";
  @SerializedName(SERIALIZED_NAME_BACKUP_PLAN_ARN)
  private String backupPlanArn;

  public static final String SERIALIZED_NAME_BACKUP_PLAN_ID = "BackupPlanId";
  @SerializedName(SERIALIZED_NAME_BACKUP_PLAN_ID)
  private String backupPlanId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DELETION_DATE = "DeletionDate";
  @SerializedName(SERIALIZED_NAME_DELETION_DATE)
  private OffsetDateTime deletionDate;

  public static final String SERIALIZED_NAME_VERSION_ID = "VersionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public static final String SERIALIZED_NAME_BACKUP_PLAN_NAME = "BackupPlanName";
  @SerializedName(SERIALIZED_NAME_BACKUP_PLAN_NAME)
  private String backupPlanName;

  public static final String SERIALIZED_NAME_CREATOR_REQUEST_ID = "CreatorRequestId";
  @SerializedName(SERIALIZED_NAME_CREATOR_REQUEST_ID)
  private String creatorRequestId;

  public static final String SERIALIZED_NAME_LAST_EXECUTION_DATE = "LastExecutionDate";
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTION_DATE)
  private OffsetDateTime lastExecutionDate;

  public static final String SERIALIZED_NAME_ADVANCED_BACKUP_SETTINGS = "AdvancedBackupSettings";
  @SerializedName(SERIALIZED_NAME_ADVANCED_BACKUP_SETTINGS)
  private List advancedBackupSettings;

  public BackupPlansListMember() {
  }

  public BackupPlansListMember backupPlanArn(String backupPlanArn) {
    this.backupPlanArn = backupPlanArn;
    return this;
  }

  /**
   * Get backupPlanArn
   * @return backupPlanArn
   */
  @javax.annotation.Nullable
  public String getBackupPlanArn() {
    return backupPlanArn;
  }

  public void setBackupPlanArn(String backupPlanArn) {
    this.backupPlanArn = backupPlanArn;
  }


  public BackupPlansListMember backupPlanId(String backupPlanId) {
    this.backupPlanId = backupPlanId;
    return this;
  }

  /**
   * Get backupPlanId
   * @return backupPlanId
   */
  @javax.annotation.Nullable
  public String getBackupPlanId() {
    return backupPlanId;
  }

  public void setBackupPlanId(String backupPlanId) {
    this.backupPlanId = backupPlanId;
  }


  public BackupPlansListMember creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public BackupPlansListMember deletionDate(OffsetDateTime deletionDate) {
    this.deletionDate = deletionDate;
    return this;
  }

  /**
   * Get deletionDate
   * @return deletionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletionDate() {
    return deletionDate;
  }

  public void setDeletionDate(OffsetDateTime deletionDate) {
    this.deletionDate = deletionDate;
  }


  public BackupPlansListMember versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * Get versionId
   * @return versionId
   */
  @javax.annotation.Nullable
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }


  public BackupPlansListMember backupPlanName(String backupPlanName) {
    this.backupPlanName = backupPlanName;
    return this;
  }

  /**
   * Get backupPlanName
   * @return backupPlanName
   */
  @javax.annotation.Nullable
  public String getBackupPlanName() {
    return backupPlanName;
  }

  public void setBackupPlanName(String backupPlanName) {
    this.backupPlanName = backupPlanName;
  }


  public BackupPlansListMember creatorRequestId(String creatorRequestId) {
    this.creatorRequestId = creatorRequestId;
    return this;
  }

  /**
   * Get creatorRequestId
   * @return creatorRequestId
   */
  @javax.annotation.Nullable
  public String getCreatorRequestId() {
    return creatorRequestId;
  }

  public void setCreatorRequestId(String creatorRequestId) {
    this.creatorRequestId = creatorRequestId;
  }


  public BackupPlansListMember lastExecutionDate(OffsetDateTime lastExecutionDate) {
    this.lastExecutionDate = lastExecutionDate;
    return this;
  }

  /**
   * Get lastExecutionDate
   * @return lastExecutionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastExecutionDate() {
    return lastExecutionDate;
  }

  public void setLastExecutionDate(OffsetDateTime lastExecutionDate) {
    this.lastExecutionDate = lastExecutionDate;
  }


  public BackupPlansListMember advancedBackupSettings(List advancedBackupSettings) {
    this.advancedBackupSettings = advancedBackupSettings;
    return this;
  }

  /**
   * Get advancedBackupSettings
   * @return advancedBackupSettings
   */
  @javax.annotation.Nullable
  public List getAdvancedBackupSettings() {
    return advancedBackupSettings;
  }

  public void setAdvancedBackupSettings(List advancedBackupSettings) {
    this.advancedBackupSettings = advancedBackupSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupPlansListMember backupPlansListMember = (BackupPlansListMember) o;
    return Objects.equals(this.backupPlanArn, backupPlansListMember.backupPlanArn) &&
        Objects.equals(this.backupPlanId, backupPlansListMember.backupPlanId) &&
        Objects.equals(this.creationDate, backupPlansListMember.creationDate) &&
        Objects.equals(this.deletionDate, backupPlansListMember.deletionDate) &&
        Objects.equals(this.versionId, backupPlansListMember.versionId) &&
        Objects.equals(this.backupPlanName, backupPlansListMember.backupPlanName) &&
        Objects.equals(this.creatorRequestId, backupPlansListMember.creatorRequestId) &&
        Objects.equals(this.lastExecutionDate, backupPlansListMember.lastExecutionDate) &&
        Objects.equals(this.advancedBackupSettings, backupPlansListMember.advancedBackupSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupPlanArn, backupPlanId, creationDate, deletionDate, versionId, backupPlanName, creatorRequestId, lastExecutionDate, advancedBackupSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupPlansListMember {\n");
    sb.append("    backupPlanArn: ").append(toIndentedString(backupPlanArn)).append("\n");
    sb.append("    backupPlanId: ").append(toIndentedString(backupPlanId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    deletionDate: ").append(toIndentedString(deletionDate)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("    backupPlanName: ").append(toIndentedString(backupPlanName)).append("\n");
    sb.append("    creatorRequestId: ").append(toIndentedString(creatorRequestId)).append("\n");
    sb.append("    lastExecutionDate: ").append(toIndentedString(lastExecutionDate)).append("\n");
    sb.append("    advancedBackupSettings: ").append(toIndentedString(advancedBackupSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BackupPlanArn");
    openapiFields.add("BackupPlanId");
    openapiFields.add("CreationDate");
    openapiFields.add("DeletionDate");
    openapiFields.add("VersionId");
    openapiFields.add("BackupPlanName");
    openapiFields.add("CreatorRequestId");
    openapiFields.add("LastExecutionDate");
    openapiFields.add("AdvancedBackupSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupPlansListMember
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupPlansListMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupPlansListMember is not found in the empty JSON string", BackupPlansListMember.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupPlansListMember.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupPlansListMember` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BackupPlanArn`
      if (jsonObj.get("BackupPlanArn") != null && !jsonObj.get("BackupPlanArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BackupPlanArn"));
      }
      // validate the optional field `BackupPlanId`
      if (jsonObj.get("BackupPlanId") != null && !jsonObj.get("BackupPlanId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BackupPlanId"));
      }
      // validate the optional field `CreationDate`
      if (jsonObj.get("CreationDate") != null && !jsonObj.get("CreationDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationDate"));
      }
      // validate the optional field `DeletionDate`
      if (jsonObj.get("DeletionDate") != null && !jsonObj.get("DeletionDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DeletionDate"));
      }
      // validate the optional field `VersionId`
      if (jsonObj.get("VersionId") != null && !jsonObj.get("VersionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VersionId"));
      }
      // validate the optional field `BackupPlanName`
      if (jsonObj.get("BackupPlanName") != null && !jsonObj.get("BackupPlanName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BackupPlanName"));
      }
      // validate the optional field `CreatorRequestId`
      if (jsonObj.get("CreatorRequestId") != null && !jsonObj.get("CreatorRequestId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreatorRequestId"));
      }
      // validate the optional field `LastExecutionDate`
      if (jsonObj.get("LastExecutionDate") != null && !jsonObj.get("LastExecutionDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastExecutionDate"));
      }
      // validate the optional field `AdvancedBackupSettings`
      if (jsonObj.get("AdvancedBackupSettings") != null && !jsonObj.get("AdvancedBackupSettings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdvancedBackupSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupPlansListMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupPlansListMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupPlansListMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupPlansListMember.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupPlansListMember>() {
           @Override
           public void write(JsonWriter out, BackupPlansListMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupPlansListMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupPlansListMember given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupPlansListMember
   * @throws IOException if the JSON string is invalid with respect to BackupPlansListMember
   */
  public static BackupPlansListMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupPlansListMember.class);
  }

  /**
   * Convert an instance of BackupPlansListMember to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

