/*
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains &lt;code&gt;DeleteAt&lt;/code&gt; and &lt;code&gt;MoveToColdStorageAt&lt;/code&gt; timestamps, which are used to specify a lifecycle for a recovery point.&lt;/p&gt; &lt;p&gt;The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. Backup transitions and expires backups automatically according to the lifecycle that you define.&lt;/p&gt; &lt;p&gt;Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.&lt;/p&gt; &lt;p&gt;Resource types that are able to be transitioned to cold storage are listed in the \&quot;Lifecycle to cold storage\&quot; section of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource\&quot;&gt; Feature availability by resource&lt;/a&gt; table. Backup ignores this expression for other resource types.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:47.732009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CalculatedLifecycle {
  public static final String SERIALIZED_NAME_MOVE_TO_COLD_STORAGE_AT = "MoveToColdStorageAt";
  @SerializedName(SERIALIZED_NAME_MOVE_TO_COLD_STORAGE_AT)
  private OffsetDateTime moveToColdStorageAt;

  public static final String SERIALIZED_NAME_DELETE_AT = "DeleteAt";
  @SerializedName(SERIALIZED_NAME_DELETE_AT)
  private OffsetDateTime deleteAt;

  public CalculatedLifecycle() {
  }

  public CalculatedLifecycle moveToColdStorageAt(OffsetDateTime moveToColdStorageAt) {
    this.moveToColdStorageAt = moveToColdStorageAt;
    return this;
  }

  /**
   * Get moveToColdStorageAt
   * @return moveToColdStorageAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMoveToColdStorageAt() {
    return moveToColdStorageAt;
  }

  public void setMoveToColdStorageAt(OffsetDateTime moveToColdStorageAt) {
    this.moveToColdStorageAt = moveToColdStorageAt;
  }


  public CalculatedLifecycle deleteAt(OffsetDateTime deleteAt) {
    this.deleteAt = deleteAt;
    return this;
  }

  /**
   * Get deleteAt
   * @return deleteAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeleteAt() {
    return deleteAt;
  }

  public void setDeleteAt(OffsetDateTime deleteAt) {
    this.deleteAt = deleteAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculatedLifecycle calculatedLifecycle = (CalculatedLifecycle) o;
    return Objects.equals(this.moveToColdStorageAt, calculatedLifecycle.moveToColdStorageAt) &&
        Objects.equals(this.deleteAt, calculatedLifecycle.deleteAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(moveToColdStorageAt, deleteAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculatedLifecycle {\n");
    sb.append("    moveToColdStorageAt: ").append(toIndentedString(moveToColdStorageAt)).append("\n");
    sb.append("    deleteAt: ").append(toIndentedString(deleteAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MoveToColdStorageAt");
    openapiFields.add("DeleteAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CalculatedLifecycle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CalculatedLifecycle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CalculatedLifecycle is not found in the empty JSON string", CalculatedLifecycle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CalculatedLifecycle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CalculatedLifecycle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MoveToColdStorageAt`
      if (jsonObj.get("MoveToColdStorageAt") != null && !jsonObj.get("MoveToColdStorageAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("MoveToColdStorageAt"));
      }
      // validate the optional field `DeleteAt`
      if (jsonObj.get("DeleteAt") != null && !jsonObj.get("DeleteAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DeleteAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CalculatedLifecycle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CalculatedLifecycle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CalculatedLifecycle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CalculatedLifecycle.class));

       return (TypeAdapter<T>) new TypeAdapter<CalculatedLifecycle>() {
           @Override
           public void write(JsonWriter out, CalculatedLifecycle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CalculatedLifecycle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CalculatedLifecycle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CalculatedLifecycle
   * @throws IOException if the JSON string is invalid with respect to CalculatedLifecycle
   */
  public static CalculatedLifecycle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CalculatedLifecycle.class);
  }

  /**
   * Convert an instance of CalculatedLifecycle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

