/*
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutBackupVaultLockConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:47.732009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutBackupVaultLockConfigurationRequest {
  public static final String SERIALIZED_NAME_MIN_RETENTION_DAYS = "MinRetentionDays";
  @SerializedName(SERIALIZED_NAME_MIN_RETENTION_DAYS)
  private Integer minRetentionDays;

  public static final String SERIALIZED_NAME_MAX_RETENTION_DAYS = "MaxRetentionDays";
  @SerializedName(SERIALIZED_NAME_MAX_RETENTION_DAYS)
  private Integer maxRetentionDays;

  public static final String SERIALIZED_NAME_CHANGEABLE_FOR_DAYS = "ChangeableForDays";
  @SerializedName(SERIALIZED_NAME_CHANGEABLE_FOR_DAYS)
  private Integer changeableForDays;

  public PutBackupVaultLockConfigurationRequest() {
  }

  public PutBackupVaultLockConfigurationRequest minRetentionDays(Integer minRetentionDays) {
    this.minRetentionDays = minRetentionDays;
    return this;
  }

  /**
   * &lt;p&gt;The Backup Vault Lock configuration that specifies the minimum retention period that the vault retains its recovery points. This setting can be useful if, for example, your organization&#39;s policies require you to retain certain data for at least seven years (2555 days).&lt;/p&gt; &lt;p&gt;If this parameter is not specified, Vault Lock will not enforce a minimum retention period.&lt;/p&gt; &lt;p&gt;If this parameter is specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or longer than the minimum retention period. If the job&#39;s retention period is shorter than that minimum retention period, then the vault fails that backup or copy job, and you should either modify your lifecycle settings or use a different vault. The shortest minimum retention period you can specify is 1 day. Recovery points already saved in the vault prior to Vault Lock are not affected.&lt;/p&gt;
   * @return minRetentionDays
   */
  @javax.annotation.Nullable
  public Integer getMinRetentionDays() {
    return minRetentionDays;
  }

  public void setMinRetentionDays(Integer minRetentionDays) {
    this.minRetentionDays = minRetentionDays;
  }


  public PutBackupVaultLockConfigurationRequest maxRetentionDays(Integer maxRetentionDays) {
    this.maxRetentionDays = maxRetentionDays;
    return this;
  }

  /**
   * &lt;p&gt;The Backup Vault Lock configuration that specifies the maximum retention period that the vault retains its recovery points. This setting can be useful if, for example, your organization&#39;s policies require you to destroy certain data after retaining it for four years (1460 days).&lt;/p&gt; &lt;p&gt;If this parameter is not included, Vault Lock does not enforce a maximum retention period on the recovery points in the vault. If this parameter is included without a value, Vault Lock will not enforce a maximum retention period.&lt;/p&gt; &lt;p&gt;If this parameter is specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or shorter than the maximum retention period. If the job&#39;s retention period is longer than that maximum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. The longest maximum retention period you can specify is 36500 days (approximately 100 years). Recovery points already saved in the vault prior to Vault Lock are not affected.&lt;/p&gt;
   * @return maxRetentionDays
   */
  @javax.annotation.Nullable
  public Integer getMaxRetentionDays() {
    return maxRetentionDays;
  }

  public void setMaxRetentionDays(Integer maxRetentionDays) {
    this.maxRetentionDays = maxRetentionDays;
  }


  public PutBackupVaultLockConfigurationRequest changeableForDays(Integer changeableForDays) {
    this.changeableForDays = changeableForDays;
    return this;
  }

  /**
   * &lt;p&gt;The Backup Vault Lock configuration that specifies the number of days before the lock date. For example, setting &lt;code&gt;ChangeableForDays&lt;/code&gt; to 30 on Jan. 1, 2022 at 8pm UTC will set the lock date to Jan. 31, 2022 at 8pm UTC.&lt;/p&gt; &lt;p&gt;Backup enforces a 72-hour cooling-off period before Vault Lock takes effect and becomes immutable. Therefore, you must set &lt;code&gt;ChangeableForDays&lt;/code&gt; to 3 or greater.&lt;/p&gt; &lt;p&gt;Before the lock date, you can delete Vault Lock from the vault using &lt;code&gt;DeleteBackupVaultLockConfiguration&lt;/code&gt; or change the Vault Lock configuration using &lt;code&gt;PutBackupVaultLockConfiguration&lt;/code&gt;. On and after the lock date, the Vault Lock becomes immutable and cannot be changed or deleted.&lt;/p&gt; &lt;p&gt;If this parameter is not specified, you can delete Vault Lock from the vault using &lt;code&gt;DeleteBackupVaultLockConfiguration&lt;/code&gt; or change the Vault Lock configuration using &lt;code&gt;PutBackupVaultLockConfiguration&lt;/code&gt; at any time.&lt;/p&gt;
   * @return changeableForDays
   */
  @javax.annotation.Nullable
  public Integer getChangeableForDays() {
    return changeableForDays;
  }

  public void setChangeableForDays(Integer changeableForDays) {
    this.changeableForDays = changeableForDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutBackupVaultLockConfigurationRequest putBackupVaultLockConfigurationRequest = (PutBackupVaultLockConfigurationRequest) o;
    return Objects.equals(this.minRetentionDays, putBackupVaultLockConfigurationRequest.minRetentionDays) &&
        Objects.equals(this.maxRetentionDays, putBackupVaultLockConfigurationRequest.maxRetentionDays) &&
        Objects.equals(this.changeableForDays, putBackupVaultLockConfigurationRequest.changeableForDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minRetentionDays, maxRetentionDays, changeableForDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutBackupVaultLockConfigurationRequest {\n");
    sb.append("    minRetentionDays: ").append(toIndentedString(minRetentionDays)).append("\n");
    sb.append("    maxRetentionDays: ").append(toIndentedString(maxRetentionDays)).append("\n");
    sb.append("    changeableForDays: ").append(toIndentedString(changeableForDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MinRetentionDays");
    openapiFields.add("MaxRetentionDays");
    openapiFields.add("ChangeableForDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutBackupVaultLockConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutBackupVaultLockConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutBackupVaultLockConfigurationRequest is not found in the empty JSON string", PutBackupVaultLockConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutBackupVaultLockConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutBackupVaultLockConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutBackupVaultLockConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutBackupVaultLockConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutBackupVaultLockConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutBackupVaultLockConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutBackupVaultLockConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, PutBackupVaultLockConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutBackupVaultLockConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutBackupVaultLockConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutBackupVaultLockConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to PutBackupVaultLockConfigurationRequest
   */
  public static PutBackupVaultLockConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutBackupVaultLockConfigurationRequest.class);
  }

  /**
   * Convert an instance of PutBackupVaultLockConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

