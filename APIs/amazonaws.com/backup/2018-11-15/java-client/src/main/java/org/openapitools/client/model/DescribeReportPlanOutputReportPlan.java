/*
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CreateReportPlanInputReportSetting;
import org.openapitools.client.model.ReportPlanReportDeliveryChannel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeReportPlanOutputReportPlan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:47.732009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeReportPlanOutputReportPlan {
  public static final String SERIALIZED_NAME_REPORT_PLAN_ARN = "ReportPlanArn";
  @SerializedName(SERIALIZED_NAME_REPORT_PLAN_ARN)
  private String reportPlanArn;

  public static final String SERIALIZED_NAME_REPORT_PLAN_NAME = "ReportPlanName";
  @SerializedName(SERIALIZED_NAME_REPORT_PLAN_NAME)
  private String reportPlanName;

  public static final String SERIALIZED_NAME_REPORT_PLAN_DESCRIPTION = "ReportPlanDescription";
  @SerializedName(SERIALIZED_NAME_REPORT_PLAN_DESCRIPTION)
  private String reportPlanDescription;

  public static final String SERIALIZED_NAME_REPORT_SETTING = "ReportSetting";
  @SerializedName(SERIALIZED_NAME_REPORT_SETTING)
  private CreateReportPlanInputReportSetting reportSetting;

  public static final String SERIALIZED_NAME_REPORT_DELIVERY_CHANNEL = "ReportDeliveryChannel";
  @SerializedName(SERIALIZED_NAME_REPORT_DELIVERY_CHANNEL)
  private ReportPlanReportDeliveryChannel reportDeliveryChannel;

  public static final String SERIALIZED_NAME_DEPLOYMENT_STATUS = "DeploymentStatus";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_STATUS)
  private String deploymentStatus;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_ATTEMPTED_EXECUTION_TIME = "LastAttemptedExecutionTime";
  @SerializedName(SERIALIZED_NAME_LAST_ATTEMPTED_EXECUTION_TIME)
  private OffsetDateTime lastAttemptedExecutionTime;

  public static final String SERIALIZED_NAME_LAST_SUCCESSFUL_EXECUTION_TIME = "LastSuccessfulExecutionTime";
  @SerializedName(SERIALIZED_NAME_LAST_SUCCESSFUL_EXECUTION_TIME)
  private OffsetDateTime lastSuccessfulExecutionTime;

  public DescribeReportPlanOutputReportPlan() {
  }

  public DescribeReportPlanOutputReportPlan reportPlanArn(String reportPlanArn) {
    this.reportPlanArn = reportPlanArn;
    return this;
  }

  /**
   * Get reportPlanArn
   * @return reportPlanArn
   */
  @javax.annotation.Nullable
  public String getReportPlanArn() {
    return reportPlanArn;
  }

  public void setReportPlanArn(String reportPlanArn) {
    this.reportPlanArn = reportPlanArn;
  }


  public DescribeReportPlanOutputReportPlan reportPlanName(String reportPlanName) {
    this.reportPlanName = reportPlanName;
    return this;
  }

  /**
   * Get reportPlanName
   * @return reportPlanName
   */
  @javax.annotation.Nullable
  public String getReportPlanName() {
    return reportPlanName;
  }

  public void setReportPlanName(String reportPlanName) {
    this.reportPlanName = reportPlanName;
  }


  public DescribeReportPlanOutputReportPlan reportPlanDescription(String reportPlanDescription) {
    this.reportPlanDescription = reportPlanDescription;
    return this;
  }

  /**
   * Get reportPlanDescription
   * @return reportPlanDescription
   */
  @javax.annotation.Nullable
  public String getReportPlanDescription() {
    return reportPlanDescription;
  }

  public void setReportPlanDescription(String reportPlanDescription) {
    this.reportPlanDescription = reportPlanDescription;
  }


  public DescribeReportPlanOutputReportPlan reportSetting(CreateReportPlanInputReportSetting reportSetting) {
    this.reportSetting = reportSetting;
    return this;
  }

  /**
   * Get reportSetting
   * @return reportSetting
   */
  @javax.annotation.Nullable
  public CreateReportPlanInputReportSetting getReportSetting() {
    return reportSetting;
  }

  public void setReportSetting(CreateReportPlanInputReportSetting reportSetting) {
    this.reportSetting = reportSetting;
  }


  public DescribeReportPlanOutputReportPlan reportDeliveryChannel(ReportPlanReportDeliveryChannel reportDeliveryChannel) {
    this.reportDeliveryChannel = reportDeliveryChannel;
    return this;
  }

  /**
   * Get reportDeliveryChannel
   * @return reportDeliveryChannel
   */
  @javax.annotation.Nullable
  public ReportPlanReportDeliveryChannel getReportDeliveryChannel() {
    return reportDeliveryChannel;
  }

  public void setReportDeliveryChannel(ReportPlanReportDeliveryChannel reportDeliveryChannel) {
    this.reportDeliveryChannel = reportDeliveryChannel;
  }


  public DescribeReportPlanOutputReportPlan deploymentStatus(String deploymentStatus) {
    this.deploymentStatus = deploymentStatus;
    return this;
  }

  /**
   * Get deploymentStatus
   * @return deploymentStatus
   */
  @javax.annotation.Nullable
  public String getDeploymentStatus() {
    return deploymentStatus;
  }

  public void setDeploymentStatus(String deploymentStatus) {
    this.deploymentStatus = deploymentStatus;
  }


  public DescribeReportPlanOutputReportPlan creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DescribeReportPlanOutputReportPlan lastAttemptedExecutionTime(OffsetDateTime lastAttemptedExecutionTime) {
    this.lastAttemptedExecutionTime = lastAttemptedExecutionTime;
    return this;
  }

  /**
   * Get lastAttemptedExecutionTime
   * @return lastAttemptedExecutionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAttemptedExecutionTime() {
    return lastAttemptedExecutionTime;
  }

  public void setLastAttemptedExecutionTime(OffsetDateTime lastAttemptedExecutionTime) {
    this.lastAttemptedExecutionTime = lastAttemptedExecutionTime;
  }


  public DescribeReportPlanOutputReportPlan lastSuccessfulExecutionTime(OffsetDateTime lastSuccessfulExecutionTime) {
    this.lastSuccessfulExecutionTime = lastSuccessfulExecutionTime;
    return this;
  }

  /**
   * Get lastSuccessfulExecutionTime
   * @return lastSuccessfulExecutionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSuccessfulExecutionTime() {
    return lastSuccessfulExecutionTime;
  }

  public void setLastSuccessfulExecutionTime(OffsetDateTime lastSuccessfulExecutionTime) {
    this.lastSuccessfulExecutionTime = lastSuccessfulExecutionTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeReportPlanOutputReportPlan describeReportPlanOutputReportPlan = (DescribeReportPlanOutputReportPlan) o;
    return Objects.equals(this.reportPlanArn, describeReportPlanOutputReportPlan.reportPlanArn) &&
        Objects.equals(this.reportPlanName, describeReportPlanOutputReportPlan.reportPlanName) &&
        Objects.equals(this.reportPlanDescription, describeReportPlanOutputReportPlan.reportPlanDescription) &&
        Objects.equals(this.reportSetting, describeReportPlanOutputReportPlan.reportSetting) &&
        Objects.equals(this.reportDeliveryChannel, describeReportPlanOutputReportPlan.reportDeliveryChannel) &&
        Objects.equals(this.deploymentStatus, describeReportPlanOutputReportPlan.deploymentStatus) &&
        Objects.equals(this.creationTime, describeReportPlanOutputReportPlan.creationTime) &&
        Objects.equals(this.lastAttemptedExecutionTime, describeReportPlanOutputReportPlan.lastAttemptedExecutionTime) &&
        Objects.equals(this.lastSuccessfulExecutionTime, describeReportPlanOutputReportPlan.lastSuccessfulExecutionTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reportPlanArn, reportPlanName, reportPlanDescription, reportSetting, reportDeliveryChannel, deploymentStatus, creationTime, lastAttemptedExecutionTime, lastSuccessfulExecutionTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeReportPlanOutputReportPlan {\n");
    sb.append("    reportPlanArn: ").append(toIndentedString(reportPlanArn)).append("\n");
    sb.append("    reportPlanName: ").append(toIndentedString(reportPlanName)).append("\n");
    sb.append("    reportPlanDescription: ").append(toIndentedString(reportPlanDescription)).append("\n");
    sb.append("    reportSetting: ").append(toIndentedString(reportSetting)).append("\n");
    sb.append("    reportDeliveryChannel: ").append(toIndentedString(reportDeliveryChannel)).append("\n");
    sb.append("    deploymentStatus: ").append(toIndentedString(deploymentStatus)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastAttemptedExecutionTime: ").append(toIndentedString(lastAttemptedExecutionTime)).append("\n");
    sb.append("    lastSuccessfulExecutionTime: ").append(toIndentedString(lastSuccessfulExecutionTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReportPlanArn");
    openapiFields.add("ReportPlanName");
    openapiFields.add("ReportPlanDescription");
    openapiFields.add("ReportSetting");
    openapiFields.add("ReportDeliveryChannel");
    openapiFields.add("DeploymentStatus");
    openapiFields.add("CreationTime");
    openapiFields.add("LastAttemptedExecutionTime");
    openapiFields.add("LastSuccessfulExecutionTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeReportPlanOutputReportPlan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeReportPlanOutputReportPlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeReportPlanOutputReportPlan is not found in the empty JSON string", DescribeReportPlanOutputReportPlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeReportPlanOutputReportPlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeReportPlanOutputReportPlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReportPlanArn`
      if (jsonObj.get("ReportPlanArn") != null && !jsonObj.get("ReportPlanArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReportPlanArn"));
      }
      // validate the optional field `ReportPlanName`
      if (jsonObj.get("ReportPlanName") != null && !jsonObj.get("ReportPlanName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReportPlanName"));
      }
      // validate the optional field `ReportPlanDescription`
      if (jsonObj.get("ReportPlanDescription") != null && !jsonObj.get("ReportPlanDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReportPlanDescription"));
      }
      // validate the optional field `ReportSetting`
      if (jsonObj.get("ReportSetting") != null && !jsonObj.get("ReportSetting").isJsonNull()) {
        CreateReportPlanInputReportSetting.validateJsonElement(jsonObj.get("ReportSetting"));
      }
      // validate the optional field `ReportDeliveryChannel`
      if (jsonObj.get("ReportDeliveryChannel") != null && !jsonObj.get("ReportDeliveryChannel").isJsonNull()) {
        ReportPlanReportDeliveryChannel.validateJsonElement(jsonObj.get("ReportDeliveryChannel"));
      }
      // validate the optional field `DeploymentStatus`
      if (jsonObj.get("DeploymentStatus") != null && !jsonObj.get("DeploymentStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeploymentStatus"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `LastAttemptedExecutionTime`
      if (jsonObj.get("LastAttemptedExecutionTime") != null && !jsonObj.get("LastAttemptedExecutionTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastAttemptedExecutionTime"));
      }
      // validate the optional field `LastSuccessfulExecutionTime`
      if (jsonObj.get("LastSuccessfulExecutionTime") != null && !jsonObj.get("LastSuccessfulExecutionTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastSuccessfulExecutionTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeReportPlanOutputReportPlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeReportPlanOutputReportPlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeReportPlanOutputReportPlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeReportPlanOutputReportPlan.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeReportPlanOutputReportPlan>() {
           @Override
           public void write(JsonWriter out, DescribeReportPlanOutputReportPlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeReportPlanOutputReportPlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeReportPlanOutputReportPlan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeReportPlanOutputReportPlan
   * @throws IOException if the JSON string is invalid with respect to DescribeReportPlanOutputReportPlan
   */
  public static DescribeReportPlanOutputReportPlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeReportPlanOutputReportPlan.class);
  }

  /**
   * Convert an instance of DescribeReportPlanOutputReportPlan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

