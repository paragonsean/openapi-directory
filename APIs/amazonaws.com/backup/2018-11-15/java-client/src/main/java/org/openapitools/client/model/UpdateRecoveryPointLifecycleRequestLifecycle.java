/*
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains an array of &lt;code&gt;Transition&lt;/code&gt; objects specifying how long in days before a recovery point transitions to cold storage or is deleted.&lt;/p&gt; &lt;p&gt;Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.&lt;/p&gt; &lt;p&gt;Resource types that are able to be transitioned to cold storage are listed in the \&quot;Lifecycle to cold storage\&quot; section of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource\&quot;&gt; Feature availability by resource&lt;/a&gt; table. Backup ignores this expression for other resource types.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:47.732009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateRecoveryPointLifecycleRequestLifecycle {
  public static final String SERIALIZED_NAME_MOVE_TO_COLD_STORAGE_AFTER_DAYS = "MoveToColdStorageAfterDays";
  @SerializedName(SERIALIZED_NAME_MOVE_TO_COLD_STORAGE_AFTER_DAYS)
  private Integer moveToColdStorageAfterDays;

  public static final String SERIALIZED_NAME_DELETE_AFTER_DAYS = "DeleteAfterDays";
  @SerializedName(SERIALIZED_NAME_DELETE_AFTER_DAYS)
  private Integer deleteAfterDays;

  public UpdateRecoveryPointLifecycleRequestLifecycle() {
  }

  public UpdateRecoveryPointLifecycleRequestLifecycle moveToColdStorageAfterDays(Integer moveToColdStorageAfterDays) {
    this.moveToColdStorageAfterDays = moveToColdStorageAfterDays;
    return this;
  }

  /**
   * Get moveToColdStorageAfterDays
   * @return moveToColdStorageAfterDays
   */
  @javax.annotation.Nullable
  public Integer getMoveToColdStorageAfterDays() {
    return moveToColdStorageAfterDays;
  }

  public void setMoveToColdStorageAfterDays(Integer moveToColdStorageAfterDays) {
    this.moveToColdStorageAfterDays = moveToColdStorageAfterDays;
  }


  public UpdateRecoveryPointLifecycleRequestLifecycle deleteAfterDays(Integer deleteAfterDays) {
    this.deleteAfterDays = deleteAfterDays;
    return this;
  }

  /**
   * Get deleteAfterDays
   * @return deleteAfterDays
   */
  @javax.annotation.Nullable
  public Integer getDeleteAfterDays() {
    return deleteAfterDays;
  }

  public void setDeleteAfterDays(Integer deleteAfterDays) {
    this.deleteAfterDays = deleteAfterDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateRecoveryPointLifecycleRequestLifecycle updateRecoveryPointLifecycleRequestLifecycle = (UpdateRecoveryPointLifecycleRequestLifecycle) o;
    return Objects.equals(this.moveToColdStorageAfterDays, updateRecoveryPointLifecycleRequestLifecycle.moveToColdStorageAfterDays) &&
        Objects.equals(this.deleteAfterDays, updateRecoveryPointLifecycleRequestLifecycle.deleteAfterDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(moveToColdStorageAfterDays, deleteAfterDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateRecoveryPointLifecycleRequestLifecycle {\n");
    sb.append("    moveToColdStorageAfterDays: ").append(toIndentedString(moveToColdStorageAfterDays)).append("\n");
    sb.append("    deleteAfterDays: ").append(toIndentedString(deleteAfterDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MoveToColdStorageAfterDays");
    openapiFields.add("DeleteAfterDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateRecoveryPointLifecycleRequestLifecycle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateRecoveryPointLifecycleRequestLifecycle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateRecoveryPointLifecycleRequestLifecycle is not found in the empty JSON string", UpdateRecoveryPointLifecycleRequestLifecycle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateRecoveryPointLifecycleRequestLifecycle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateRecoveryPointLifecycleRequestLifecycle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MoveToColdStorageAfterDays`
      if (jsonObj.get("MoveToColdStorageAfterDays") != null && !jsonObj.get("MoveToColdStorageAfterDays").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MoveToColdStorageAfterDays"));
      }
      // validate the optional field `DeleteAfterDays`
      if (jsonObj.get("DeleteAfterDays") != null && !jsonObj.get("DeleteAfterDays").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DeleteAfterDays"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateRecoveryPointLifecycleRequestLifecycle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateRecoveryPointLifecycleRequestLifecycle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateRecoveryPointLifecycleRequestLifecycle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateRecoveryPointLifecycleRequestLifecycle.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateRecoveryPointLifecycleRequestLifecycle>() {
           @Override
           public void write(JsonWriter out, UpdateRecoveryPointLifecycleRequestLifecycle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateRecoveryPointLifecycleRequestLifecycle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateRecoveryPointLifecycleRequestLifecycle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateRecoveryPointLifecycleRequestLifecycle
   * @throws IOException if the JSON string is invalid with respect to UpdateRecoveryPointLifecycleRequestLifecycle
   */
  public static UpdateRecoveryPointLifecycleRequestLifecycle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateRecoveryPointLifecycleRequestLifecycle.class);
  }

  /**
   * Convert an instance of UpdateRecoveryPointLifecycleRequestLifecycle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

