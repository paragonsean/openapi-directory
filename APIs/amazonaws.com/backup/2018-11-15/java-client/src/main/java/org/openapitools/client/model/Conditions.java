/*
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about which resources to include or exclude from a backup plan using their tags. Conditions are case sensitive.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:47.732009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Conditions {
  public static final String SERIALIZED_NAME_STRING_EQUALS = "StringEquals";
  @SerializedName(SERIALIZED_NAME_STRING_EQUALS)
  private List stringEquals;

  public static final String SERIALIZED_NAME_STRING_NOT_EQUALS = "StringNotEquals";
  @SerializedName(SERIALIZED_NAME_STRING_NOT_EQUALS)
  private List stringNotEquals;

  public static final String SERIALIZED_NAME_STRING_LIKE = "StringLike";
  @SerializedName(SERIALIZED_NAME_STRING_LIKE)
  private List stringLike;

  public static final String SERIALIZED_NAME_STRING_NOT_LIKE = "StringNotLike";
  @SerializedName(SERIALIZED_NAME_STRING_NOT_LIKE)
  private List stringNotLike;

  public Conditions() {
  }

  public Conditions stringEquals(List stringEquals) {
    this.stringEquals = stringEquals;
    return this;
  }

  /**
   * Get stringEquals
   * @return stringEquals
   */
  @javax.annotation.Nullable
  public List getStringEquals() {
    return stringEquals;
  }

  public void setStringEquals(List stringEquals) {
    this.stringEquals = stringEquals;
  }


  public Conditions stringNotEquals(List stringNotEquals) {
    this.stringNotEquals = stringNotEquals;
    return this;
  }

  /**
   * Get stringNotEquals
   * @return stringNotEquals
   */
  @javax.annotation.Nullable
  public List getStringNotEquals() {
    return stringNotEquals;
  }

  public void setStringNotEquals(List stringNotEquals) {
    this.stringNotEquals = stringNotEquals;
  }


  public Conditions stringLike(List stringLike) {
    this.stringLike = stringLike;
    return this;
  }

  /**
   * Get stringLike
   * @return stringLike
   */
  @javax.annotation.Nullable
  public List getStringLike() {
    return stringLike;
  }

  public void setStringLike(List stringLike) {
    this.stringLike = stringLike;
  }


  public Conditions stringNotLike(List stringNotLike) {
    this.stringNotLike = stringNotLike;
    return this;
  }

  /**
   * Get stringNotLike
   * @return stringNotLike
   */
  @javax.annotation.Nullable
  public List getStringNotLike() {
    return stringNotLike;
  }

  public void setStringNotLike(List stringNotLike) {
    this.stringNotLike = stringNotLike;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Conditions conditions = (Conditions) o;
    return Objects.equals(this.stringEquals, conditions.stringEquals) &&
        Objects.equals(this.stringNotEquals, conditions.stringNotEquals) &&
        Objects.equals(this.stringLike, conditions.stringLike) &&
        Objects.equals(this.stringNotLike, conditions.stringNotLike);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stringEquals, stringNotEquals, stringLike, stringNotLike);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Conditions {\n");
    sb.append("    stringEquals: ").append(toIndentedString(stringEquals)).append("\n");
    sb.append("    stringNotEquals: ").append(toIndentedString(stringNotEquals)).append("\n");
    sb.append("    stringLike: ").append(toIndentedString(stringLike)).append("\n");
    sb.append("    stringNotLike: ").append(toIndentedString(stringNotLike)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StringEquals");
    openapiFields.add("StringNotEquals");
    openapiFields.add("StringLike");
    openapiFields.add("StringNotLike");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Conditions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Conditions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Conditions is not found in the empty JSON string", Conditions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Conditions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Conditions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StringEquals`
      if (jsonObj.get("StringEquals") != null && !jsonObj.get("StringEquals").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StringEquals"));
      }
      // validate the optional field `StringNotEquals`
      if (jsonObj.get("StringNotEquals") != null && !jsonObj.get("StringNotEquals").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StringNotEquals"));
      }
      // validate the optional field `StringLike`
      if (jsonObj.get("StringLike") != null && !jsonObj.get("StringLike").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StringLike"));
      }
      // validate the optional field `StringNotLike`
      if (jsonObj.get("StringNotLike") != null && !jsonObj.get("StringNotLike").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StringNotLike"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Conditions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Conditions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Conditions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Conditions.class));

       return (TypeAdapter<T>) new TypeAdapter<Conditions>() {
           @Override
           public void write(JsonWriter out, Conditions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Conditions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Conditions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Conditions
   * @throws IOException if the JSON string is invalid with respect to Conditions
   */
  public static Conditions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Conditions.class);
  }

  /**
   * Convert an instance of Conditions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

