/*
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains detailed information about a report setting.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:47.732009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateReportPlanRequestReportSetting {
  public static final String SERIALIZED_NAME_REPORT_TEMPLATE = "ReportTemplate";
  @SerializedName(SERIALIZED_NAME_REPORT_TEMPLATE)
  private String reportTemplate;

  public static final String SERIALIZED_NAME_FRAMEWORK_ARNS = "FrameworkArns";
  @SerializedName(SERIALIZED_NAME_FRAMEWORK_ARNS)
  private List frameworkArns;

  public static final String SERIALIZED_NAME_NUMBER_OF_FRAMEWORKS = "NumberOfFrameworks";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_FRAMEWORKS)
  private Integer numberOfFrameworks;

  public static final String SERIALIZED_NAME_ACCOUNTS = "Accounts";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS)
  private List accounts;

  public static final String SERIALIZED_NAME_ORGANIZATION_UNITS = "OrganizationUnits";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_UNITS)
  private List organizationUnits;

  public static final String SERIALIZED_NAME_REGIONS = "Regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List regions;

  public CreateReportPlanRequestReportSetting() {
  }

  public CreateReportPlanRequestReportSetting reportTemplate(String reportTemplate) {
    this.reportTemplate = reportTemplate;
    return this;
  }

  /**
   * Get reportTemplate
   * @return reportTemplate
   */
  @javax.annotation.Nullable
  public String getReportTemplate() {
    return reportTemplate;
  }

  public void setReportTemplate(String reportTemplate) {
    this.reportTemplate = reportTemplate;
  }


  public CreateReportPlanRequestReportSetting frameworkArns(List frameworkArns) {
    this.frameworkArns = frameworkArns;
    return this;
  }

  /**
   * Get frameworkArns
   * @return frameworkArns
   */
  @javax.annotation.Nullable
  public List getFrameworkArns() {
    return frameworkArns;
  }

  public void setFrameworkArns(List frameworkArns) {
    this.frameworkArns = frameworkArns;
  }


  public CreateReportPlanRequestReportSetting numberOfFrameworks(Integer numberOfFrameworks) {
    this.numberOfFrameworks = numberOfFrameworks;
    return this;
  }

  /**
   * Get numberOfFrameworks
   * @return numberOfFrameworks
   */
  @javax.annotation.Nullable
  public Integer getNumberOfFrameworks() {
    return numberOfFrameworks;
  }

  public void setNumberOfFrameworks(Integer numberOfFrameworks) {
    this.numberOfFrameworks = numberOfFrameworks;
  }


  public CreateReportPlanRequestReportSetting accounts(List accounts) {
    this.accounts = accounts;
    return this;
  }

  /**
   * Get accounts
   * @return accounts
   */
  @javax.annotation.Nullable
  public List getAccounts() {
    return accounts;
  }

  public void setAccounts(List accounts) {
    this.accounts = accounts;
  }


  public CreateReportPlanRequestReportSetting organizationUnits(List organizationUnits) {
    this.organizationUnits = organizationUnits;
    return this;
  }

  /**
   * Get organizationUnits
   * @return organizationUnits
   */
  @javax.annotation.Nullable
  public List getOrganizationUnits() {
    return organizationUnits;
  }

  public void setOrganizationUnits(List organizationUnits) {
    this.organizationUnits = organizationUnits;
  }


  public CreateReportPlanRequestReportSetting regions(List regions) {
    this.regions = regions;
    return this;
  }

  /**
   * Get regions
   * @return regions
   */
  @javax.annotation.Nullable
  public List getRegions() {
    return regions;
  }

  public void setRegions(List regions) {
    this.regions = regions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateReportPlanRequestReportSetting createReportPlanRequestReportSetting = (CreateReportPlanRequestReportSetting) o;
    return Objects.equals(this.reportTemplate, createReportPlanRequestReportSetting.reportTemplate) &&
        Objects.equals(this.frameworkArns, createReportPlanRequestReportSetting.frameworkArns) &&
        Objects.equals(this.numberOfFrameworks, createReportPlanRequestReportSetting.numberOfFrameworks) &&
        Objects.equals(this.accounts, createReportPlanRequestReportSetting.accounts) &&
        Objects.equals(this.organizationUnits, createReportPlanRequestReportSetting.organizationUnits) &&
        Objects.equals(this.regions, createReportPlanRequestReportSetting.regions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reportTemplate, frameworkArns, numberOfFrameworks, accounts, organizationUnits, regions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateReportPlanRequestReportSetting {\n");
    sb.append("    reportTemplate: ").append(toIndentedString(reportTemplate)).append("\n");
    sb.append("    frameworkArns: ").append(toIndentedString(frameworkArns)).append("\n");
    sb.append("    numberOfFrameworks: ").append(toIndentedString(numberOfFrameworks)).append("\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    organizationUnits: ").append(toIndentedString(organizationUnits)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReportTemplate");
    openapiFields.add("FrameworkArns");
    openapiFields.add("NumberOfFrameworks");
    openapiFields.add("Accounts");
    openapiFields.add("OrganizationUnits");
    openapiFields.add("Regions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateReportPlanRequestReportSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateReportPlanRequestReportSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateReportPlanRequestReportSetting is not found in the empty JSON string", CreateReportPlanRequestReportSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateReportPlanRequestReportSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateReportPlanRequestReportSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReportTemplate`
      if (jsonObj.get("ReportTemplate") != null && !jsonObj.get("ReportTemplate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReportTemplate"));
      }
      // validate the optional field `FrameworkArns`
      if (jsonObj.get("FrameworkArns") != null && !jsonObj.get("FrameworkArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FrameworkArns"));
      }
      // validate the optional field `NumberOfFrameworks`
      if (jsonObj.get("NumberOfFrameworks") != null && !jsonObj.get("NumberOfFrameworks").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfFrameworks"));
      }
      // validate the optional field `Accounts`
      if (jsonObj.get("Accounts") != null && !jsonObj.get("Accounts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Accounts"));
      }
      // validate the optional field `OrganizationUnits`
      if (jsonObj.get("OrganizationUnits") != null && !jsonObj.get("OrganizationUnits").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OrganizationUnits"));
      }
      // validate the optional field `Regions`
      if (jsonObj.get("Regions") != null && !jsonObj.get("Regions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Regions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateReportPlanRequestReportSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateReportPlanRequestReportSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateReportPlanRequestReportSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateReportPlanRequestReportSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateReportPlanRequestReportSetting>() {
           @Override
           public void write(JsonWriter out, CreateReportPlanRequestReportSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateReportPlanRequestReportSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateReportPlanRequestReportSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateReportPlanRequestReportSetting
   * @throws IOException if the JSON string is invalid with respect to CreateReportPlanRequestReportSetting
   */
  public static CreateReportPlanRequestReportSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateReportPlanRequestReportSetting.class);
  }

  /**
   * Convert an instance of CreateReportPlanRequestReportSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

