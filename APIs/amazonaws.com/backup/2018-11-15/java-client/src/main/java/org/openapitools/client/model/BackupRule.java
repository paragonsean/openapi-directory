/*
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BackupRuleLifecycle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies a scheduled task used to back up a selection of resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:47.732009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupRule {
  public static final String SERIALIZED_NAME_RULE_NAME = "RuleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_TARGET_BACKUP_VAULT_NAME = "TargetBackupVaultName";
  @SerializedName(SERIALIZED_NAME_TARGET_BACKUP_VAULT_NAME)
  private String targetBackupVaultName;

  public static final String SERIALIZED_NAME_SCHEDULE_EXPRESSION = "ScheduleExpression";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_EXPRESSION)
  private String scheduleExpression;

  public static final String SERIALIZED_NAME_START_WINDOW_MINUTES = "StartWindowMinutes";
  @SerializedName(SERIALIZED_NAME_START_WINDOW_MINUTES)
  private Integer startWindowMinutes;

  public static final String SERIALIZED_NAME_COMPLETION_WINDOW_MINUTES = "CompletionWindowMinutes";
  @SerializedName(SERIALIZED_NAME_COMPLETION_WINDOW_MINUTES)
  private Integer completionWindowMinutes;

  public static final String SERIALIZED_NAME_LIFECYCLE = "Lifecycle";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE)
  private BackupRuleLifecycle lifecycle;

  public static final String SERIALIZED_NAME_RECOVERY_POINT_TAGS = "RecoveryPointTags";
  @SerializedName(SERIALIZED_NAME_RECOVERY_POINT_TAGS)
  private Map recoveryPointTags;

  public static final String SERIALIZED_NAME_RULE_ID = "RuleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_COPY_ACTIONS = "CopyActions";
  @SerializedName(SERIALIZED_NAME_COPY_ACTIONS)
  private List copyActions;

  public static final String SERIALIZED_NAME_ENABLE_CONTINUOUS_BACKUP = "EnableContinuousBackup";
  @SerializedName(SERIALIZED_NAME_ENABLE_CONTINUOUS_BACKUP)
  private Boolean enableContinuousBackup;

  public BackupRule() {
  }

  public BackupRule ruleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

  /**
   * Get ruleName
   * @return ruleName
   */
  @javax.annotation.Nonnull
  public String getRuleName() {
    return ruleName;
  }

  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public BackupRule targetBackupVaultName(String targetBackupVaultName) {
    this.targetBackupVaultName = targetBackupVaultName;
    return this;
  }

  /**
   * Get targetBackupVaultName
   * @return targetBackupVaultName
   */
  @javax.annotation.Nonnull
  public String getTargetBackupVaultName() {
    return targetBackupVaultName;
  }

  public void setTargetBackupVaultName(String targetBackupVaultName) {
    this.targetBackupVaultName = targetBackupVaultName;
  }


  public BackupRule scheduleExpression(String scheduleExpression) {
    this.scheduleExpression = scheduleExpression;
    return this;
  }

  /**
   * Get scheduleExpression
   * @return scheduleExpression
   */
  @javax.annotation.Nullable
  public String getScheduleExpression() {
    return scheduleExpression;
  }

  public void setScheduleExpression(String scheduleExpression) {
    this.scheduleExpression = scheduleExpression;
  }


  public BackupRule startWindowMinutes(Integer startWindowMinutes) {
    this.startWindowMinutes = startWindowMinutes;
    return this;
  }

  /**
   * Get startWindowMinutes
   * @return startWindowMinutes
   */
  @javax.annotation.Nullable
  public Integer getStartWindowMinutes() {
    return startWindowMinutes;
  }

  public void setStartWindowMinutes(Integer startWindowMinutes) {
    this.startWindowMinutes = startWindowMinutes;
  }


  public BackupRule completionWindowMinutes(Integer completionWindowMinutes) {
    this.completionWindowMinutes = completionWindowMinutes;
    return this;
  }

  /**
   * Get completionWindowMinutes
   * @return completionWindowMinutes
   */
  @javax.annotation.Nullable
  public Integer getCompletionWindowMinutes() {
    return completionWindowMinutes;
  }

  public void setCompletionWindowMinutes(Integer completionWindowMinutes) {
    this.completionWindowMinutes = completionWindowMinutes;
  }


  public BackupRule lifecycle(BackupRuleLifecycle lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

  /**
   * Get lifecycle
   * @return lifecycle
   */
  @javax.annotation.Nullable
  public BackupRuleLifecycle getLifecycle() {
    return lifecycle;
  }

  public void setLifecycle(BackupRuleLifecycle lifecycle) {
    this.lifecycle = lifecycle;
  }


  public BackupRule recoveryPointTags(Map recoveryPointTags) {
    this.recoveryPointTags = recoveryPointTags;
    return this;
  }

  /**
   * Get recoveryPointTags
   * @return recoveryPointTags
   */
  @javax.annotation.Nullable
  public Map getRecoveryPointTags() {
    return recoveryPointTags;
  }

  public void setRecoveryPointTags(Map recoveryPointTags) {
    this.recoveryPointTags = recoveryPointTags;
  }


  public BackupRule ruleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

  /**
   * Get ruleId
   * @return ruleId
   */
  @javax.annotation.Nullable
  public String getRuleId() {
    return ruleId;
  }

  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public BackupRule copyActions(List copyActions) {
    this.copyActions = copyActions;
    return this;
  }

  /**
   * Get copyActions
   * @return copyActions
   */
  @javax.annotation.Nullable
  public List getCopyActions() {
    return copyActions;
  }

  public void setCopyActions(List copyActions) {
    this.copyActions = copyActions;
  }


  public BackupRule enableContinuousBackup(Boolean enableContinuousBackup) {
    this.enableContinuousBackup = enableContinuousBackup;
    return this;
  }

  /**
   * Get enableContinuousBackup
   * @return enableContinuousBackup
   */
  @javax.annotation.Nullable
  public Boolean getEnableContinuousBackup() {
    return enableContinuousBackup;
  }

  public void setEnableContinuousBackup(Boolean enableContinuousBackup) {
    this.enableContinuousBackup = enableContinuousBackup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupRule backupRule = (BackupRule) o;
    return Objects.equals(this.ruleName, backupRule.ruleName) &&
        Objects.equals(this.targetBackupVaultName, backupRule.targetBackupVaultName) &&
        Objects.equals(this.scheduleExpression, backupRule.scheduleExpression) &&
        Objects.equals(this.startWindowMinutes, backupRule.startWindowMinutes) &&
        Objects.equals(this.completionWindowMinutes, backupRule.completionWindowMinutes) &&
        Objects.equals(this.lifecycle, backupRule.lifecycle) &&
        Objects.equals(this.recoveryPointTags, backupRule.recoveryPointTags) &&
        Objects.equals(this.ruleId, backupRule.ruleId) &&
        Objects.equals(this.copyActions, backupRule.copyActions) &&
        Objects.equals(this.enableContinuousBackup, backupRule.enableContinuousBackup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleName, targetBackupVaultName, scheduleExpression, startWindowMinutes, completionWindowMinutes, lifecycle, recoveryPointTags, ruleId, copyActions, enableContinuousBackup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupRule {\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    targetBackupVaultName: ").append(toIndentedString(targetBackupVaultName)).append("\n");
    sb.append("    scheduleExpression: ").append(toIndentedString(scheduleExpression)).append("\n");
    sb.append("    startWindowMinutes: ").append(toIndentedString(startWindowMinutes)).append("\n");
    sb.append("    completionWindowMinutes: ").append(toIndentedString(completionWindowMinutes)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    recoveryPointTags: ").append(toIndentedString(recoveryPointTags)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    copyActions: ").append(toIndentedString(copyActions)).append("\n");
    sb.append("    enableContinuousBackup: ").append(toIndentedString(enableContinuousBackup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RuleName");
    openapiFields.add("TargetBackupVaultName");
    openapiFields.add("ScheduleExpression");
    openapiFields.add("StartWindowMinutes");
    openapiFields.add("CompletionWindowMinutes");
    openapiFields.add("Lifecycle");
    openapiFields.add("RecoveryPointTags");
    openapiFields.add("RuleId");
    openapiFields.add("CopyActions");
    openapiFields.add("EnableContinuousBackup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RuleName");
    openapiRequiredFields.add("TargetBackupVaultName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupRule is not found in the empty JSON string", BackupRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BackupRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `RuleName`
      String.validateJsonElement(jsonObj.get("RuleName"));
      // validate the required field `TargetBackupVaultName`
      String.validateJsonElement(jsonObj.get("TargetBackupVaultName"));
      // validate the optional field `ScheduleExpression`
      if (jsonObj.get("ScheduleExpression") != null && !jsonObj.get("ScheduleExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ScheduleExpression"));
      }
      // validate the optional field `StartWindowMinutes`
      if (jsonObj.get("StartWindowMinutes") != null && !jsonObj.get("StartWindowMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("StartWindowMinutes"));
      }
      // validate the optional field `CompletionWindowMinutes`
      if (jsonObj.get("CompletionWindowMinutes") != null && !jsonObj.get("CompletionWindowMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CompletionWindowMinutes"));
      }
      // validate the optional field `Lifecycle`
      if (jsonObj.get("Lifecycle") != null && !jsonObj.get("Lifecycle").isJsonNull()) {
        BackupRuleLifecycle.validateJsonElement(jsonObj.get("Lifecycle"));
      }
      // validate the optional field `RecoveryPointTags`
      if (jsonObj.get("RecoveryPointTags") != null && !jsonObj.get("RecoveryPointTags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("RecoveryPointTags"));
      }
      // validate the optional field `RuleId`
      if (jsonObj.get("RuleId") != null && !jsonObj.get("RuleId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RuleId"));
      }
      // validate the optional field `CopyActions`
      if (jsonObj.get("CopyActions") != null && !jsonObj.get("CopyActions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CopyActions"));
      }
      // validate the optional field `EnableContinuousBackup`
      if (jsonObj.get("EnableContinuousBackup") != null && !jsonObj.get("EnableContinuousBackup").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableContinuousBackup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupRule.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupRule>() {
           @Override
           public void write(JsonWriter out, BackupRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupRule
   * @throws IOException if the JSON string is invalid with respect to BackupRule
   */
  public static BackupRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupRule.class);
  }

  /**
   * Convert an instance of BackupRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

