/*
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateBackupPlanOutput;
import org.openapitools.client.model.CreateBackupPlanRequest;
import org.openapitools.client.model.CreateBackupSelectionOutput;
import org.openapitools.client.model.CreateBackupSelectionRequest;
import org.openapitools.client.model.CreateBackupVaultOutput;
import org.openapitools.client.model.CreateBackupVaultRequest;
import org.openapitools.client.model.CreateFrameworkOutput;
import org.openapitools.client.model.CreateFrameworkRequest;
import org.openapitools.client.model.CreateLegalHoldOutput;
import org.openapitools.client.model.CreateLegalHoldRequest;
import org.openapitools.client.model.CreateReportPlanOutput;
import org.openapitools.client.model.CreateReportPlanRequest;
import org.openapitools.client.model.DeleteBackupPlanOutput;
import org.openapitools.client.model.DescribeBackupJobOutput;
import org.openapitools.client.model.DescribeBackupVaultOutput;
import org.openapitools.client.model.DescribeCopyJobOutput;
import org.openapitools.client.model.DescribeFrameworkOutput;
import org.openapitools.client.model.DescribeGlobalSettingsOutput;
import org.openapitools.client.model.DescribeProtectedResourceOutput;
import org.openapitools.client.model.DescribeRecoveryPointOutput;
import org.openapitools.client.model.DescribeRegionSettingsOutput;
import org.openapitools.client.model.DescribeReportJobOutput;
import org.openapitools.client.model.DescribeReportPlanOutput;
import org.openapitools.client.model.DescribeRestoreJobOutput;
import org.openapitools.client.model.ExportBackupPlanTemplateOutput;
import org.openapitools.client.model.GetBackupPlanFromJSONOutput;
import org.openapitools.client.model.GetBackupPlanFromJSONRequest;
import org.openapitools.client.model.GetBackupPlanFromTemplateOutput;
import org.openapitools.client.model.GetBackupPlanOutput;
import org.openapitools.client.model.GetBackupSelectionOutput;
import org.openapitools.client.model.GetBackupVaultAccessPolicyOutput;
import org.openapitools.client.model.GetBackupVaultNotificationsOutput;
import org.openapitools.client.model.GetLegalHoldOutput;
import org.openapitools.client.model.GetRecoveryPointRestoreMetadataOutput;
import org.openapitools.client.model.GetSupportedResourceTypesOutput;
import org.openapitools.client.model.ListBackupJobsOutput;
import org.openapitools.client.model.ListBackupPlanTemplatesOutput;
import org.openapitools.client.model.ListBackupPlanVersionsOutput;
import org.openapitools.client.model.ListBackupPlansOutput;
import org.openapitools.client.model.ListBackupSelectionsOutput;
import org.openapitools.client.model.ListBackupVaultsOutput;
import org.openapitools.client.model.ListCopyJobsOutput;
import org.openapitools.client.model.ListFrameworksOutput;
import org.openapitools.client.model.ListLegalHoldsOutput;
import org.openapitools.client.model.ListProtectedResourcesOutput;
import org.openapitools.client.model.ListRecoveryPointsByBackupVaultOutput;
import org.openapitools.client.model.ListRecoveryPointsByLegalHoldOutput;
import org.openapitools.client.model.ListRecoveryPointsByResourceOutput;
import org.openapitools.client.model.ListReportJobsOutput;
import org.openapitools.client.model.ListReportPlansOutput;
import org.openapitools.client.model.ListRestoreJobsOutput;
import org.openapitools.client.model.ListTagsOutput;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PutBackupVaultAccessPolicyRequest;
import org.openapitools.client.model.PutBackupVaultLockConfigurationRequest;
import org.openapitools.client.model.PutBackupVaultNotificationsRequest;
import org.openapitools.client.model.StartBackupJobOutput;
import org.openapitools.client.model.StartBackupJobRequest;
import org.openapitools.client.model.StartCopyJobOutput;
import org.openapitools.client.model.StartCopyJobRequest;
import org.openapitools.client.model.StartReportJobOutput;
import org.openapitools.client.model.StartReportJobRequest;
import org.openapitools.client.model.StartRestoreJobOutput;
import org.openapitools.client.model.StartRestoreJobRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateBackupPlanOutput;
import org.openapitools.client.model.UpdateBackupPlanRequest;
import org.openapitools.client.model.UpdateFrameworkOutput;
import org.openapitools.client.model.UpdateFrameworkRequest;
import org.openapitools.client.model.UpdateGlobalSettingsRequest;
import org.openapitools.client.model.UpdateRecoveryPointLifecycleOutput;
import org.openapitools.client.model.UpdateRecoveryPointLifecycleRequest;
import org.openapitools.client.model.UpdateRegionSettingsRequest;
import org.openapitools.client.model.UpdateReportPlanOutput;
import org.openapitools.client.model.UpdateReportPlanRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * This action removes the specified legal hold on a recovery point. This action can only be performed by a user with sufficient permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelLegalHoldTest() throws ApiException {
        String legalHoldId = null;
        String cancelDescription = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer retainRecordInDays = null;
        Object response = api.cancelLegalHold(legalHoldId, cancelDescription, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retainRecordInDays);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a backup plan using a backup plan name and backup rules. A backup plan is a document that contains information that Backup uses to schedule tasks that create recovery points for resources.&lt;/p&gt; &lt;p&gt;If you call &lt;code&gt;CreateBackupPlan&lt;/code&gt; with a plan that already exists, you receive an &lt;code&gt;AlreadyExistsException&lt;/code&gt; exception.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBackupPlanTest() throws ApiException {
        CreateBackupPlanRequest createBackupPlanRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBackupPlanOutput response = api.createBackupPlan(createBackupPlanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a JSON document that specifies a set of resources to assign to a backup plan. For examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-backup/latest/devguide/assigning-resources.html#assigning-resources-json\&quot;&gt;Assigning resources programmatically&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBackupSelectionTest() throws ApiException {
        String backupPlanId = null;
        CreateBackupSelectionRequest createBackupSelectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBackupSelectionOutput response = api.createBackupSelection(backupPlanId, createBackupSelectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a logical container where backups are stored. A &lt;code&gt;CreateBackupVault&lt;/code&gt; request includes a name, optionally one or more resource tags, an encryption key, and a request ID.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Do not include sensitive data, such as passport numbers, in the name of a backup vault.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBackupVaultTest() throws ApiException {
        String backupVaultName = null;
        CreateBackupVaultRequest createBackupVaultRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBackupVaultOutput response = api.createBackupVault(backupVaultName, createBackupVaultRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a framework with one or more controls. A framework is a collection of controls that you can use to evaluate your backup practices. By using pre-built customizable controls to define your policies, you can evaluate whether your backup practices comply with your policies and which resources are not yet in compliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFrameworkTest() throws ApiException {
        CreateFrameworkRequest createFrameworkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFrameworkOutput response = api.createFramework(createFrameworkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This action creates a legal hold on a recovery point (backup). A legal hold is a restraint on altering or deleting a backup until an authorized user cancels the legal hold. Any actions to delete or disassociate a recovery point will fail with an error if one or more active legal holds are on the recovery point.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLegalHoldTest() throws ApiException {
        CreateLegalHoldRequest createLegalHoldRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLegalHoldOutput response = api.createLegalHold(createLegalHoldRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a report plan. A report plan is a document that contains information about the contents of the report and where Backup will deliver it.&lt;/p&gt; &lt;p&gt;If you call &lt;code&gt;CreateReportPlan&lt;/code&gt; with a plan that already exists, you receive an &lt;code&gt;AlreadyExistsException&lt;/code&gt; exception.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReportPlanTest() throws ApiException {
        CreateReportPlanRequest createReportPlanRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateReportPlanOutput response = api.createReportPlan(createReportPlanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a backup plan. A backup plan can only be deleted after all associated selections of resources have been deleted. Deleting a backup plan deletes the current version of a backup plan. Previous versions, if any, will still exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBackupPlanTest() throws ApiException {
        String backupPlanId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBackupPlanOutput response = api.deleteBackupPlan(backupPlanId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the resource selection associated with a backup plan that is specified by the &lt;code&gt;SelectionId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBackupSelectionTest() throws ApiException {
        String backupPlanId = null;
        String selectionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteBackupSelection(backupPlanId, selectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the backup vault identified by its name. A vault can be deleted only if it is empty.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBackupVaultTest() throws ApiException {
        String backupVaultName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteBackupVault(backupVaultName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the policy document that manages permissions on a backup vault.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBackupVaultAccessPolicyTest() throws ApiException {
        String backupVaultName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteBackupVaultAccessPolicy(backupVaultName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes Backup Vault Lock from a backup vault specified by a backup vault name.&lt;/p&gt; &lt;p&gt;If the Vault Lock configuration is immutable, then you cannot delete Vault Lock using API operations, and you will receive an &lt;code&gt;InvalidRequestException&lt;/code&gt; if you attempt to do so. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-backup/latest/devguide/vault-lock.html\&quot;&gt;Vault Lock&lt;/a&gt; in the &lt;i&gt;Backup Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBackupVaultLockConfigurationTest() throws ApiException {
        String backupVaultName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteBackupVaultLockConfiguration(backupVaultName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes event notifications for the specified backup vault.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBackupVaultNotificationsTest() throws ApiException {
        String backupVaultName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteBackupVaultNotifications(backupVaultName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the framework specified by a framework name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFrameworkTest() throws ApiException {
        String frameworkName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteFramework(frameworkName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the recovery point specified by a recovery point ID.&lt;/p&gt; &lt;p&gt;If the recovery point ID belongs to a continuous backup, calling this endpoint deletes the existing continuous backup and stops future continuous backup.&lt;/p&gt; &lt;p&gt;When an IAM role&#39;s permissions are insufficient to call this API, the service sends back an HTTP 200 response with an empty HTTP body, but the recovery point is not deleted. Instead, it enters an &lt;code&gt;EXPIRED&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt; &lt;code&gt;EXPIRED&lt;/code&gt; recovery points can be deleted with this API once the IAM role has the &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; action. To learn more about adding this role, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-backup/latest/devguide/deleting-backups.html#deleting-backups-troubleshooting\&quot;&gt; Troubleshooting manual deletions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the user or role is deleted or the permission within the role is removed, the deletion will not be successful and will enter an &lt;code&gt;EXPIRED&lt;/code&gt; state.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRecoveryPointTest() throws ApiException {
        String backupVaultName = null;
        String recoveryPointArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRecoveryPoint(backupVaultName, recoveryPointArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the report plan specified by a report plan name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReportPlanTest() throws ApiException {
        String reportPlanName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteReportPlan(reportPlanName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns backup job details for the specified &lt;code&gt;BackupJobId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBackupJobTest() throws ApiException {
        String backupJobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeBackupJobOutput response = api.describeBackupJob(backupJobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns metadata about a backup vault specified by its name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBackupVaultTest() throws ApiException {
        String backupVaultName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeBackupVaultOutput response = api.describeBackupVault(backupVaultName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns metadata associated with creating a copy of a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCopyJobTest() throws ApiException {
        String copyJobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeCopyJobOutput response = api.describeCopyJob(copyJobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the framework details for the specified &lt;code&gt;FrameworkName&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFrameworkTest() throws ApiException {
        String frameworkName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFrameworkOutput response = api.describeFramework(frameworkName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes whether the Amazon Web Services account is opted in to cross-account backup. Returns an error if the account is not a member of an Organizations organization. Example: &lt;code&gt;describe-global-settings --region us-west-2&lt;/code&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeGlobalSettingsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeGlobalSettingsOutput response = api.describeGlobalSettings(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a saved resource, including the last time it was backed up, its Amazon Resource Name (ARN), and the Amazon Web Services service type of the saved resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProtectedResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProtectedResourceOutput response = api.describeProtectedResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns metadata associated with a recovery point, including ID, status, encryption, and lifecycle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRecoveryPointTest() throws ApiException {
        String backupVaultName = null;
        String recoveryPointArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRecoveryPointOutput response = api.describeRecoveryPoint(backupVaultName, recoveryPointArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the current service opt-in settings for the Region. If service opt-in is enabled for a service, Backup tries to protect that service&#39;s resources in this Region, when the resource is included in an on-demand backup or scheduled backup plan. Otherwise, Backup does not try to protect that service&#39;s resources in this Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRegionSettingsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRegionSettingsOutput response = api.describeRegionSettings(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the details associated with creating a report as specified by its &lt;code&gt;ReportJobId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReportJobTest() throws ApiException {
        String reportJobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeReportJobOutput response = api.describeReportJob(reportJobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of all report plans for an Amazon Web Services account and Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReportPlanTest() throws ApiException {
        String reportPlanName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeReportPlanOutput response = api.describeReportPlan(reportPlanName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns metadata associated with a restore job that is specified by a job ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRestoreJobTest() throws ApiException {
        String restoreJobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRestoreJobOutput response = api.describeRestoreJob(restoreJobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified continuous backup recovery point from Backup and releases control of that continuous backup to the source service, such as Amazon RDS. The source service will continue to create and retain continuous backups using the lifecycle that you specified in your original backup plan.&lt;/p&gt; &lt;p&gt;Does not support snapshot backup recovery points.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateRecoveryPointTest() throws ApiException {
        String backupVaultName = null;
        String recoveryPointArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociateRecoveryPoint(backupVaultName, recoveryPointArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This action to a specific child (nested) recovery point removes the relationship between the specified recovery point and its parent (composite) recovery point.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateRecoveryPointFromParentTest() throws ApiException {
        String backupVaultName = null;
        String recoveryPointArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociateRecoveryPointFromParent(backupVaultName, recoveryPointArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the backup plan that is specified by the plan ID as a backup template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportBackupPlanTemplateTest() throws ApiException {
        String backupPlanId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ExportBackupPlanTemplateOutput response = api.exportBackupPlanTemplate(backupPlanId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns &lt;code&gt;BackupPlan&lt;/code&gt; details for the specified &lt;code&gt;BackupPlanId&lt;/code&gt;. The details are the body of a backup plan in JSON format, in addition to plan metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackupPlanTest() throws ApiException {
        String backupPlanId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String versionId = null;
        GetBackupPlanOutput response = api.getBackupPlan(backupPlanId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, versionId);
        // TODO: test validations
    }

    /**
     * Returns a valid JSON document specifying a backup plan or an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackupPlanFromJSONTest() throws ApiException {
        GetBackupPlanFromJSONRequest getBackupPlanFromJSONRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBackupPlanFromJSONOutput response = api.getBackupPlanFromJSON(getBackupPlanFromJSONRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the template specified by its &lt;code&gt;templateId&lt;/code&gt; as a backup plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackupPlanFromTemplateTest() throws ApiException {
        String templateId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBackupPlanFromTemplateOutput response = api.getBackupPlanFromTemplate(templateId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns selection metadata and a document in JSON format that specifies a list of resources that are associated with a backup plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackupSelectionTest() throws ApiException {
        String backupPlanId = null;
        String selectionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBackupSelectionOutput response = api.getBackupSelection(backupPlanId, selectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the access policy document that is associated with the named backup vault.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackupVaultAccessPolicyTest() throws ApiException {
        String backupVaultName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBackupVaultAccessPolicyOutput response = api.getBackupVaultAccessPolicy(backupVaultName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns event notifications for the specified backup vault.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackupVaultNotificationsTest() throws ApiException {
        String backupVaultName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBackupVaultNotificationsOutput response = api.getBackupVaultNotifications(backupVaultName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This action returns details for a specified legal hold. The details are the body of a legal hold in JSON format, in addition to metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLegalHoldTest() throws ApiException {
        String legalHoldId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLegalHoldOutput response = api.getLegalHold(legalHoldId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a set of metadata key-value pairs that were used to create the backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecoveryPointRestoreMetadataTest() throws ApiException {
        String backupVaultName = null;
        String recoveryPointArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRecoveryPointRestoreMetadataOutput response = api.getRecoveryPointRestoreMetadata(backupVaultName, recoveryPointArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the Amazon Web Services resource types supported by Backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSupportedResourceTypesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSupportedResourceTypesOutput response = api.getSupportedResourceTypes(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of existing backup jobs for an authenticated account for the last 30 days. For a longer period of time, consider using these &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html\&quot;&gt;monitoring tools&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBackupJobsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String resourceArn = null;
        String state = null;
        String backupVaultName = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String resourceType = null;
        String accountId = null;
        OffsetDateTime completeAfter = null;
        OffsetDateTime completeBefore = null;
        String parentJobId = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListBackupJobsOutput response = api.listBackupJobs(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, resourceArn, state, backupVaultName, createdBefore, createdAfter, resourceType, accountId, completeAfter, completeBefore, parentJobId, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns metadata of your saved backup plan templates, including the template ID, name, and the creation and deletion dates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBackupPlanTemplatesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListBackupPlanTemplatesOutput response = api.listBackupPlanTemplates(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns version metadata of your backup plans, including Amazon Resource Names (ARNs), backup plan IDs, creation and deletion dates, plan names, and version IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBackupPlanVersionsTest() throws ApiException {
        String backupPlanId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListBackupPlanVersionsOutput response = api.listBackupPlanVersions(backupPlanId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns a list of all active backup plans for an authenticated account. The list contains information such as Amazon Resource Names (ARNs), plan IDs, creation and deletion dates, version IDs, plan names, and creator request IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBackupPlansTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        Boolean includeDeleted = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListBackupPlansOutput response = api.listBackupPlans(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, includeDeleted, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns an array containing metadata of the resources associated with the target backup plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBackupSelectionsTest() throws ApiException {
        String backupPlanId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListBackupSelectionsOutput response = api.listBackupSelections(backupPlanId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns a list of recovery point storage containers along with information about them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBackupVaultsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListBackupVaultsOutput response = api.listBackupVaults(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns metadata about your copy jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCopyJobsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String resourceArn = null;
        String state = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String resourceType = null;
        String destinationVaultArn = null;
        String accountId = null;
        OffsetDateTime completeBefore = null;
        OffsetDateTime completeAfter = null;
        String parentJobId = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListCopyJobsOutput response = api.listCopyJobs(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, resourceArn, state, createdBefore, createdAfter, resourceType, destinationVaultArn, accountId, completeBefore, completeAfter, parentJobId, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns a list of all frameworks for an Amazon Web Services account and Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFrameworksTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListFrameworksOutput response = api.listFrameworks(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * This action returns metadata about active and previous legal holds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLegalHoldsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListLegalHoldsOutput response = api.listLegalHolds(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns an array of resources successfully backed up by Backup, including the time the resource was saved, an Amazon Resource Name (ARN) of the resource, and a resource type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProtectedResourcesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListProtectedResourcesOutput response = api.listProtectedResources(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns detailed information about the recovery points stored in a backup vault.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecoveryPointsByBackupVaultTest() throws ApiException {
        String backupVaultName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String resourceArn = null;
        String resourceType = null;
        String backupPlanId = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String parentRecoveryPointArn = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListRecoveryPointsByBackupVaultOutput response = api.listRecoveryPointsByBackupVault(backupVaultName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, resourceArn, resourceType, backupPlanId, createdBefore, createdAfter, parentRecoveryPointArn, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * This action returns recovery point ARNs (Amazon Resource Names) of the specified legal hold.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecoveryPointsByLegalHoldTest() throws ApiException {
        String legalHoldId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListRecoveryPointsByLegalHoldOutput response = api.listRecoveryPointsByLegalHold(legalHoldId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns detailed information about all the recovery points of the type specified by a resource Amazon Resource Name (ARN).&lt;/p&gt; &lt;note&gt; &lt;p&gt;For Amazon EFS and Amazon EC2, this action only lists recovery points created by Backup.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecoveryPointsByResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListRecoveryPointsByResourceOutput response = api.listRecoveryPointsByResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns details about your report jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReportJobsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String reportPlanName = null;
        OffsetDateTime creationBefore = null;
        OffsetDateTime creationAfter = null;
        String status = null;
        Integer maxResults = null;
        String nextToken = null;
        ListReportJobsOutput response = api.listReportJobs(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reportPlanName, creationBefore, creationAfter, status, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of your report plans. For detailed information about a single report plan, use &lt;code&gt;DescribeReportPlan&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReportPlansTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListReportPlansOutput response = api.listReportPlans(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of jobs that Backup initiated to restore a saved resource, including details about the recovery process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRestoreJobsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String accountId = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String status = null;
        OffsetDateTime completeBefore = null;
        OffsetDateTime completeAfter = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListRestoreJobsOutput response = api.listRestoreJobs(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, accountId, createdBefore, createdAfter, status, completeBefore, completeAfter, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of key-value pairs assigned to a target recovery point, backup plan, or backup vault.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ListTags&lt;/code&gt; only works for resource types that support full Backup management of their backups. Those resource types are listed in the \&quot;Full Backup management\&quot; section of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource\&quot;&gt; Feature availability by resource&lt;/a&gt; table.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListTagsOutput response = api.listTags(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Sets a resource-based policy that is used to manage access permissions on the target backup vault. Requires a backup vault name and an access policy document in JSON format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putBackupVaultAccessPolicyTest() throws ApiException {
        String backupVaultName = null;
        PutBackupVaultAccessPolicyRequest putBackupVaultAccessPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.putBackupVaultAccessPolicy(backupVaultName, putBackupVaultAccessPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Applies Backup Vault Lock to a backup vault, preventing attempts to delete any recovery point stored in or created in a backup vault. Vault Lock also prevents attempts to update the lifecycle policy that controls the retention period of any recovery point currently stored in a backup vault. If specified, Vault Lock enforces a minimum and maximum retention period for future backup and copy jobs that target a backup vault.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Backup Vault Lock has been assessed by Cohasset Associates for use in environments that are subject to SEC 17a-4, CFTC, and FINRA regulations. For more information about how Backup Vault Lock relates to these regulations, see the &lt;a href&#x3D;\&quot;samples/cohassetreport.zip\&quot;&gt;Cohasset Associates Compliance Assessment.&lt;/a&gt; &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putBackupVaultLockConfigurationTest() throws ApiException {
        String backupVaultName = null;
        PutBackupVaultLockConfigurationRequest putBackupVaultLockConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.putBackupVaultLockConfiguration(backupVaultName, putBackupVaultLockConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Turns on notifications on a backup vault for the specified topic and events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putBackupVaultNotificationsTest() throws ApiException {
        String backupVaultName = null;
        PutBackupVaultNotificationsRequest putBackupVaultNotificationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.putBackupVaultNotifications(backupVaultName, putBackupVaultNotificationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an on-demand backup job for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startBackupJobTest() throws ApiException {
        StartBackupJobRequest startBackupJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartBackupJobOutput response = api.startBackupJob(startBackupJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts a job to create a one-time copy of the specified resource.&lt;/p&gt; &lt;p&gt;Does not support continuous backups.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startCopyJobTest() throws ApiException {
        StartCopyJobRequest startCopyJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartCopyJobOutput response = api.startCopyJob(startCopyJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an on-demand report job for the specified report plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startReportJobTest() throws ApiException {
        String reportPlanName = null;
        StartReportJobRequest startReportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartReportJobOutput response = api.startReportJob(reportPlanName, startReportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Recovers the saved resource identified by an Amazon Resource Name (ARN).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startRestoreJobTest() throws ApiException {
        StartRestoreJobRequest startRestoreJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartRestoreJobOutput response = api.startRestoreJob(startRestoreJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Attempts to cancel a job to create a one-time backup of a resource.&lt;/p&gt; &lt;p&gt;This action is not supported for the following services: Amazon FSx for Windows File Server, Amazon FSx for Lustre, FSx for ONTAP , Amazon FSx for OpenZFS, Amazon DocumentDB (with MongoDB compatibility), Amazon RDS, Amazon Aurora, and Amazon Neptune.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopBackupJobTest() throws ApiException {
        String backupJobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopBackupJob(backupJobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Assigns a set of key-value pairs to a recovery point, backup plan, or backup vault identified by an Amazon Resource Name (ARN).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a set of key-value pairs from a recovery point, backup plan, or backup vault identified by an Amazon Resource Name (ARN)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing backup plan identified by its &lt;code&gt;backupPlanId&lt;/code&gt; with the input document in JSON format. The new version is uniquely identified by a &lt;code&gt;VersionId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBackupPlanTest() throws ApiException {
        String backupPlanId = null;
        UpdateBackupPlanRequest updateBackupPlanRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBackupPlanOutput response = api.updateBackupPlan(backupPlanId, updateBackupPlanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing framework identified by its &lt;code&gt;FrameworkName&lt;/code&gt; with the input document in JSON format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFrameworkTest() throws ApiException {
        String frameworkName = null;
        UpdateFrameworkRequest updateFrameworkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFrameworkOutput response = api.updateFramework(frameworkName, updateFrameworkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates whether the Amazon Web Services account is opted in to cross-account backup. Returns an error if the account is not an Organizations management account. Use the &lt;code&gt;DescribeGlobalSettings&lt;/code&gt; API to determine the current settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGlobalSettingsTest() throws ApiException {
        UpdateGlobalSettingsRequest updateGlobalSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateGlobalSettings(updateGlobalSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the transition lifecycle of a recovery point.&lt;/p&gt; &lt;p&gt;The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. Backup transitions and expires backups automatically according to the lifecycle that you define.&lt;/p&gt; &lt;p&gt;Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.&lt;/p&gt; &lt;p&gt;Resource types that are able to be transitioned to cold storage are listed in the \&quot;Lifecycle to cold storage\&quot; section of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource\&quot;&gt; Feature availability by resource&lt;/a&gt; table. Backup ignores this expression for other resource types.&lt;/p&gt; &lt;p&gt;This operation does not support continuous backups.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRecoveryPointLifecycleTest() throws ApiException {
        String backupVaultName = null;
        String recoveryPointArn = null;
        UpdateRecoveryPointLifecycleRequest updateRecoveryPointLifecycleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRecoveryPointLifecycleOutput response = api.updateRecoveryPointLifecycle(backupVaultName, recoveryPointArn, updateRecoveryPointLifecycleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the current service opt-in settings for the Region. If service-opt-in is enabled for a service, Backup tries to protect that service&#39;s resources in this Region, when the resource is included in an on-demand backup or scheduled backup plan. Otherwise, Backup does not try to protect that service&#39;s resources in this Region. Use the &lt;code&gt;DescribeRegionSettings&lt;/code&gt; API to determine the resource types that are supported.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRegionSettingsTest() throws ApiException {
        UpdateRegionSettingsRequest updateRegionSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateRegionSettings(updateRegionSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing report plan identified by its &lt;code&gt;ReportPlanName&lt;/code&gt; with the input document in JSON format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReportPlanTest() throws ApiException {
        String reportPlanName = null;
        UpdateReportPlanRequest updateReportPlanRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateReportPlanOutput response = api.updateReportPlan(reportPlanName, updateReportPlanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
