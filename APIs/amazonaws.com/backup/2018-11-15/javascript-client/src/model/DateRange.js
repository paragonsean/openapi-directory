/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DateRange model module.
 * @module model/DateRange
 * @version 2018-11-15
 */
class DateRange {
    /**
     * Constructs a new <code>DateRange</code>.
     * &lt;p&gt;This is a resource filter containing FromDate: DateTime and ToDate: DateTime. Both values are required. Future DateTime values are not permitted.&lt;/p&gt; &lt;p&gt;The date and time are in Unix format and Coordinated Universal Time (UTC), and it is accurate to milliseconds ((milliseconds are optional). For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.&lt;/p&gt;
     * @alias module:model/DateRange
     * @param fromDate {Date} 
     * @param toDate {Date} 
     */
    constructor(fromDate, toDate) { 
        
        DateRange.initialize(this, fromDate, toDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fromDate, toDate) { 
        obj['FromDate'] = fromDate;
        obj['ToDate'] = toDate;
    }

    /**
     * Constructs a <code>DateRange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DateRange} obj Optional instance to populate.
     * @return {module:model/DateRange} The populated <code>DateRange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DateRange();

            if (data.hasOwnProperty('FromDate')) {
                obj['FromDate'] = ApiClient.convertToType(data['FromDate'], 'Date');
            }
            if (data.hasOwnProperty('ToDate')) {
                obj['ToDate'] = ApiClient.convertToType(data['ToDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DateRange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DateRange</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DateRange.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `FromDate`
        if (data['FromDate']) { // data not null
          Date.validateJSON(data['FromDate']);
        }
        // validate the optional field `ToDate`
        if (data['ToDate']) { // data not null
          Date.validateJSON(data['ToDate']);
        }

        return true;
    }


}

DateRange.RequiredProperties = ["FromDate", "ToDate"];

/**
 * @member {Date} FromDate
 */
DateRange.prototype['FromDate'] = undefined;

/**
 * @member {Date} ToDate
 */
DateRange.prototype['ToDate'] = undefined;






export default DateRange;

