/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LegalHoldStatus from './LegalHoldStatus';

/**
 * The LegalHold model module.
 * @module model/LegalHold
 * @version 2018-11-15
 */
class LegalHold {
    /**
     * Constructs a new <code>LegalHold</code>.
     * A legal hold is an administrative tool that helps prevent backups from being deleted while under a hold. While the hold is in place, backups under a hold cannot be deleted and lifecycle policies that would alter the backup status (such as transition to cold storage) are delayed until the legal hold is removed. A backup can have more than one legal hold. Legal holds are applied to one or more backups (also known as recovery points). These backups can be filtered by resource types and by resource IDs.
     * @alias module:model/LegalHold
     */
    constructor() { 
        
        LegalHold.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LegalHold</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LegalHold} obj Optional instance to populate.
     * @return {module:model/LegalHold} The populated <code>LegalHold</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LegalHold();

            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], LegalHoldStatus);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('LegalHoldId')) {
                obj['LegalHoldId'] = ApiClient.convertToType(data['LegalHoldId'], 'String');
            }
            if (data.hasOwnProperty('LegalHoldArn')) {
                obj['LegalHoldArn'] = ApiClient.convertToType(data['LegalHoldArn'], 'String');
            }
            if (data.hasOwnProperty('CreationDate')) {
                obj['CreationDate'] = ApiClient.convertToType(data['CreationDate'], 'Date');
            }
            if (data.hasOwnProperty('CancellationDate')) {
                obj['CancellationDate'] = ApiClient.convertToType(data['CancellationDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LegalHold</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LegalHold</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Title`
        if (data['Title']) { // data not null
          String.validateJSON(data['Title']);
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          LegalHoldStatus.validateJSON(data['Status']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `LegalHoldId`
        if (data['LegalHoldId']) { // data not null
          String.validateJSON(data['LegalHoldId']);
        }
        // validate the optional field `LegalHoldArn`
        if (data['LegalHoldArn']) { // data not null
          String.validateJSON(data['LegalHoldArn']);
        }
        // validate the optional field `CreationDate`
        if (data['CreationDate']) { // data not null
          Date.validateJSON(data['CreationDate']);
        }
        // validate the optional field `CancellationDate`
        if (data['CancellationDate']) { // data not null
          Date.validateJSON(data['CancellationDate']);
        }

        return true;
    }


}



/**
 * @member {String} Title
 */
LegalHold.prototype['Title'] = undefined;

/**
 * @member {module:model/LegalHoldStatus} Status
 */
LegalHold.prototype['Status'] = undefined;

/**
 * @member {String} Description
 */
LegalHold.prototype['Description'] = undefined;

/**
 * @member {String} LegalHoldId
 */
LegalHold.prototype['LegalHoldId'] = undefined;

/**
 * @member {String} LegalHoldArn
 */
LegalHold.prototype['LegalHoldArn'] = undefined;

/**
 * @member {Date} CreationDate
 */
LegalHold.prototype['CreationDate'] = undefined;

/**
 * @member {Date} CancellationDate
 */
LegalHold.prototype['CancellationDate'] = undefined;






export default LegalHold;

