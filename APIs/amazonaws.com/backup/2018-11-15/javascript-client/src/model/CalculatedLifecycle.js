/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CalculatedLifecycle model module.
 * @module model/CalculatedLifecycle
 * @version 2018-11-15
 */
class CalculatedLifecycle {
    /**
     * Constructs a new <code>CalculatedLifecycle</code>.
     * &lt;p&gt;Contains &lt;code&gt;DeleteAt&lt;/code&gt; and &lt;code&gt;MoveToColdStorageAt&lt;/code&gt; timestamps, which are used to specify a lifecycle for a recovery point.&lt;/p&gt; &lt;p&gt;The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. Backup transitions and expires backups automatically according to the lifecycle that you define.&lt;/p&gt; &lt;p&gt;Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.&lt;/p&gt; &lt;p&gt;Resource types that are able to be transitioned to cold storage are listed in the \&quot;Lifecycle to cold storage\&quot; section of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource\&quot;&gt; Feature availability by resource&lt;/a&gt; table. Backup ignores this expression for other resource types.&lt;/p&gt;
     * @alias module:model/CalculatedLifecycle
     */
    constructor() { 
        
        CalculatedLifecycle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CalculatedLifecycle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CalculatedLifecycle} obj Optional instance to populate.
     * @return {module:model/CalculatedLifecycle} The populated <code>CalculatedLifecycle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CalculatedLifecycle();

            if (data.hasOwnProperty('MoveToColdStorageAt')) {
                obj['MoveToColdStorageAt'] = ApiClient.convertToType(data['MoveToColdStorageAt'], 'Date');
            }
            if (data.hasOwnProperty('DeleteAt')) {
                obj['DeleteAt'] = ApiClient.convertToType(data['DeleteAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CalculatedLifecycle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CalculatedLifecycle</code>.
     */
    static validateJSON(data) {
        // validate the optional field `MoveToColdStorageAt`
        if (data['MoveToColdStorageAt']) { // data not null
          Date.validateJSON(data['MoveToColdStorageAt']);
        }
        // validate the optional field `DeleteAt`
        if (data['DeleteAt']) { // data not null
          Date.validateJSON(data['DeleteAt']);
        }

        return true;
    }


}



/**
 * @member {Date} MoveToColdStorageAt
 */
CalculatedLifecycle.prototype['MoveToColdStorageAt'] = undefined;

/**
 * @member {Date} DeleteAt
 */
CalculatedLifecycle.prototype['DeleteAt'] = undefined;






export default CalculatedLifecycle;

