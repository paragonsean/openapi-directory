/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FrameworkControlControlScope from './FrameworkControlControlScope';

/**
 * The FrameworkControl model module.
 * @module model/FrameworkControl
 * @version 2018-11-15
 */
class FrameworkControl {
    /**
     * Constructs a new <code>FrameworkControl</code>.
     * Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
     * @alias module:model/FrameworkControl
     * @param controlName {String} 
     */
    constructor(controlName) { 
        
        FrameworkControl.initialize(this, controlName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, controlName) { 
        obj['ControlName'] = controlName;
    }

    /**
     * Constructs a <code>FrameworkControl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FrameworkControl} obj Optional instance to populate.
     * @return {module:model/FrameworkControl} The populated <code>FrameworkControl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FrameworkControl();

            if (data.hasOwnProperty('ControlName')) {
                obj['ControlName'] = ApiClient.convertToType(data['ControlName'], 'String');
            }
            if (data.hasOwnProperty('ControlInputParameters')) {
                obj['ControlInputParameters'] = ApiClient.convertToType(data['ControlInputParameters'], Array);
            }
            if (data.hasOwnProperty('ControlScope')) {
                obj['ControlScope'] = FrameworkControlControlScope.constructFromObject(data['ControlScope']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FrameworkControl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FrameworkControl</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FrameworkControl.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ControlName`
        if (data['ControlName']) { // data not null
          String.validateJSON(data['ControlName']);
        }
        // validate the optional field `ControlInputParameters`
        if (data['ControlInputParameters']) { // data not null
          Array.validateJSON(data['ControlInputParameters']);
        }
        // validate the optional field `ControlScope`
        if (data['ControlScope']) { // data not null
          FrameworkControlControlScope.validateJSON(data['ControlScope']);
        }

        return true;
    }


}

FrameworkControl.RequiredProperties = ["ControlName"];

/**
 * @member {String} ControlName
 */
FrameworkControl.prototype['ControlName'] = undefined;

/**
 * @member {Array} ControlInputParameters
 */
FrameworkControl.prototype['ControlInputParameters'] = undefined;

/**
 * @member {module:model/FrameworkControlControlScope} ControlScope
 */
FrameworkControl.prototype['ControlScope'] = undefined;






export default FrameworkControl;

