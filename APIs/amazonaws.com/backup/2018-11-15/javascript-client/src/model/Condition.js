/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConditionType from './ConditionType';

/**
 * The Condition model module.
 * @module model/Condition
 * @version 2018-11-15
 */
class Condition {
    /**
     * Constructs a new <code>Condition</code>.
     * Contains an array of triplets made up of a condition type (such as &lt;code&gt;StringEquals&lt;/code&gt;), a key, and a value. Used to filter resources using their tags and assign them to a backup plan. Case sensitive.
     * @alias module:model/Condition
     * @param conditionType {module:model/ConditionType} 
     * @param conditionKey {String} 
     * @param conditionValue {String} 
     */
    constructor(conditionType, conditionKey, conditionValue) { 
        
        Condition.initialize(this, conditionType, conditionKey, conditionValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, conditionType, conditionKey, conditionValue) { 
        obj['ConditionType'] = conditionType;
        obj['ConditionKey'] = conditionKey;
        obj['ConditionValue'] = conditionValue;
    }

    /**
     * Constructs a <code>Condition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Condition} obj Optional instance to populate.
     * @return {module:model/Condition} The populated <code>Condition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Condition();

            if (data.hasOwnProperty('ConditionType')) {
                obj['ConditionType'] = ApiClient.convertToType(data['ConditionType'], ConditionType);
            }
            if (data.hasOwnProperty('ConditionKey')) {
                obj['ConditionKey'] = ApiClient.convertToType(data['ConditionKey'], 'String');
            }
            if (data.hasOwnProperty('ConditionValue')) {
                obj['ConditionValue'] = ApiClient.convertToType(data['ConditionValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Condition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Condition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Condition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ConditionType`
        if (data['ConditionType']) { // data not null
          ConditionType.validateJSON(data['ConditionType']);
        }
        // validate the optional field `ConditionKey`
        if (data['ConditionKey']) { // data not null
          String.validateJSON(data['ConditionKey']);
        }
        // validate the optional field `ConditionValue`
        if (data['ConditionValue']) { // data not null
          String.validateJSON(data['ConditionValue']);
        }

        return true;
    }


}

Condition.RequiredProperties = ["ConditionType", "ConditionKey", "ConditionValue"];

/**
 * @member {module:model/ConditionType} ConditionType
 */
Condition.prototype['ConditionType'] = undefined;

/**
 * @member {String} ConditionKey
 */
Condition.prototype['ConditionKey'] = undefined;

/**
 * @member {String} ConditionValue
 */
Condition.prototype['ConditionValue'] = undefined;






export default Condition;

