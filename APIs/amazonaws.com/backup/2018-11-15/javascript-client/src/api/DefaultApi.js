/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateBackupPlanOutput from '../model/CreateBackupPlanOutput';
import CreateBackupPlanRequest from '../model/CreateBackupPlanRequest';
import CreateBackupSelectionOutput from '../model/CreateBackupSelectionOutput';
import CreateBackupSelectionRequest from '../model/CreateBackupSelectionRequest';
import CreateBackupVaultOutput from '../model/CreateBackupVaultOutput';
import CreateBackupVaultRequest from '../model/CreateBackupVaultRequest';
import CreateFrameworkOutput from '../model/CreateFrameworkOutput';
import CreateFrameworkRequest from '../model/CreateFrameworkRequest';
import CreateLegalHoldOutput from '../model/CreateLegalHoldOutput';
import CreateLegalHoldRequest from '../model/CreateLegalHoldRequest';
import CreateReportPlanOutput from '../model/CreateReportPlanOutput';
import CreateReportPlanRequest from '../model/CreateReportPlanRequest';
import DeleteBackupPlanOutput from '../model/DeleteBackupPlanOutput';
import DescribeBackupJobOutput from '../model/DescribeBackupJobOutput';
import DescribeBackupVaultOutput from '../model/DescribeBackupVaultOutput';
import DescribeCopyJobOutput from '../model/DescribeCopyJobOutput';
import DescribeFrameworkOutput from '../model/DescribeFrameworkOutput';
import DescribeGlobalSettingsOutput from '../model/DescribeGlobalSettingsOutput';
import DescribeProtectedResourceOutput from '../model/DescribeProtectedResourceOutput';
import DescribeRecoveryPointOutput from '../model/DescribeRecoveryPointOutput';
import DescribeRegionSettingsOutput from '../model/DescribeRegionSettingsOutput';
import DescribeReportJobOutput from '../model/DescribeReportJobOutput';
import DescribeReportPlanOutput from '../model/DescribeReportPlanOutput';
import DescribeRestoreJobOutput from '../model/DescribeRestoreJobOutput';
import ExportBackupPlanTemplateOutput from '../model/ExportBackupPlanTemplateOutput';
import GetBackupPlanFromJSONOutput from '../model/GetBackupPlanFromJSONOutput';
import GetBackupPlanFromJSONRequest from '../model/GetBackupPlanFromJSONRequest';
import GetBackupPlanFromTemplateOutput from '../model/GetBackupPlanFromTemplateOutput';
import GetBackupPlanOutput from '../model/GetBackupPlanOutput';
import GetBackupSelectionOutput from '../model/GetBackupSelectionOutput';
import GetBackupVaultAccessPolicyOutput from '../model/GetBackupVaultAccessPolicyOutput';
import GetBackupVaultNotificationsOutput from '../model/GetBackupVaultNotificationsOutput';
import GetLegalHoldOutput from '../model/GetLegalHoldOutput';
import GetRecoveryPointRestoreMetadataOutput from '../model/GetRecoveryPointRestoreMetadataOutput';
import GetSupportedResourceTypesOutput from '../model/GetSupportedResourceTypesOutput';
import ListBackupJobsOutput from '../model/ListBackupJobsOutput';
import ListBackupPlanTemplatesOutput from '../model/ListBackupPlanTemplatesOutput';
import ListBackupPlanVersionsOutput from '../model/ListBackupPlanVersionsOutput';
import ListBackupPlansOutput from '../model/ListBackupPlansOutput';
import ListBackupSelectionsOutput from '../model/ListBackupSelectionsOutput';
import ListBackupVaultsOutput from '../model/ListBackupVaultsOutput';
import ListCopyJobsOutput from '../model/ListCopyJobsOutput';
import ListFrameworksOutput from '../model/ListFrameworksOutput';
import ListLegalHoldsOutput from '../model/ListLegalHoldsOutput';
import ListProtectedResourcesOutput from '../model/ListProtectedResourcesOutput';
import ListRecoveryPointsByBackupVaultOutput from '../model/ListRecoveryPointsByBackupVaultOutput';
import ListRecoveryPointsByLegalHoldOutput from '../model/ListRecoveryPointsByLegalHoldOutput';
import ListRecoveryPointsByResourceOutput from '../model/ListRecoveryPointsByResourceOutput';
import ListReportJobsOutput from '../model/ListReportJobsOutput';
import ListReportPlansOutput from '../model/ListReportPlansOutput';
import ListRestoreJobsOutput from '../model/ListRestoreJobsOutput';
import ListTagsOutput from '../model/ListTagsOutput';
import PutBackupVaultAccessPolicyRequest from '../model/PutBackupVaultAccessPolicyRequest';
import PutBackupVaultLockConfigurationRequest from '../model/PutBackupVaultLockConfigurationRequest';
import PutBackupVaultNotificationsRequest from '../model/PutBackupVaultNotificationsRequest';
import StartBackupJobOutput from '../model/StartBackupJobOutput';
import StartBackupJobRequest from '../model/StartBackupJobRequest';
import StartCopyJobOutput from '../model/StartCopyJobOutput';
import StartCopyJobRequest from '../model/StartCopyJobRequest';
import StartReportJobOutput from '../model/StartReportJobOutput';
import StartReportJobRequest from '../model/StartReportJobRequest';
import StartRestoreJobOutput from '../model/StartRestoreJobOutput';
import StartRestoreJobRequest from '../model/StartRestoreJobRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateBackupPlanOutput from '../model/UpdateBackupPlanOutput';
import UpdateBackupPlanRequest from '../model/UpdateBackupPlanRequest';
import UpdateFrameworkOutput from '../model/UpdateFrameworkOutput';
import UpdateFrameworkRequest from '../model/UpdateFrameworkRequest';
import UpdateGlobalSettingsRequest from '../model/UpdateGlobalSettingsRequest';
import UpdateRecoveryPointLifecycleOutput from '../model/UpdateRecoveryPointLifecycleOutput';
import UpdateRecoveryPointLifecycleRequest from '../model/UpdateRecoveryPointLifecycleRequest';
import UpdateRegionSettingsRequest from '../model/UpdateRegionSettingsRequest';
import UpdateReportPlanOutput from '../model/UpdateReportPlanOutput';
import UpdateReportPlanRequest from '../model/UpdateReportPlanRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-11-15
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelLegalHold operation.
     * @callback module:api/DefaultApi~cancelLegalHoldCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This action removes the specified legal hold on a recovery point. This action can only be performed by a user with sufficient permissions.
     * @param {String} legalHoldId Legal hold ID required to remove the specified legal hold on a recovery point.
     * @param {String} cancelDescription String describing the reason for removing the legal hold.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [retainRecordInDays] The integer amount in days specifying amount of days after this API operation to remove legal hold.
     * @param {module:api/DefaultApi~cancelLegalHoldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelLegalHold(legalHoldId, cancelDescription, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'legalHoldId' is set
      if (legalHoldId === undefined || legalHoldId === null) {
        throw new Error("Missing the required parameter 'legalHoldId' when calling cancelLegalHold");
      }
      // verify the required parameter 'cancelDescription' is set
      if (cancelDescription === undefined || cancelDescription === null) {
        throw new Error("Missing the required parameter 'cancelDescription' when calling cancelLegalHold");
      }

      let pathParams = {
        'legalHoldId': legalHoldId
      };
      let queryParams = {
        'cancelDescription': cancelDescription,
        'retainRecordInDays': opts['retainRecordInDays']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/legal-holds/{legalHoldId}#cancelDescription', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBackupPlan operation.
     * @callback module:api/DefaultApi~createBackupPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBackupPlanOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a backup plan using a backup plan name and backup rules. A backup plan is a document that contains information that Backup uses to schedule tasks that create recovery points for resources.</p> <p>If you call <code>CreateBackupPlan</code> with a plan that already exists, you receive an <code>AlreadyExistsException</code> exception.</p>
     * @param {module:model/CreateBackupPlanRequest} createBackupPlanRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBackupPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBackupPlanOutput}
     */
    createBackupPlan(createBackupPlanRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBackupPlanRequest;
      // verify the required parameter 'createBackupPlanRequest' is set
      if (createBackupPlanRequest === undefined || createBackupPlanRequest === null) {
        throw new Error("Missing the required parameter 'createBackupPlanRequest' when calling createBackupPlan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBackupPlanOutput;
      return this.apiClient.callApi(
        '/backup/plans/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBackupSelection operation.
     * @callback module:api/DefaultApi~createBackupSelectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBackupSelectionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a JSON document that specifies a set of resources to assign to a backup plan. For examples, see <a href=\"https://docs.aws.amazon.com/aws-backup/latest/devguide/assigning-resources.html#assigning-resources-json\">Assigning resources programmatically</a>. 
     * @param {String} backupPlanId Uniquely identifies the backup plan to be associated with the selection of resources.
     * @param {module:model/CreateBackupSelectionRequest} createBackupSelectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBackupSelectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBackupSelectionOutput}
     */
    createBackupSelection(backupPlanId, createBackupSelectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBackupSelectionRequest;
      // verify the required parameter 'backupPlanId' is set
      if (backupPlanId === undefined || backupPlanId === null) {
        throw new Error("Missing the required parameter 'backupPlanId' when calling createBackupSelection");
      }
      // verify the required parameter 'createBackupSelectionRequest' is set
      if (createBackupSelectionRequest === undefined || createBackupSelectionRequest === null) {
        throw new Error("Missing the required parameter 'createBackupSelectionRequest' when calling createBackupSelection");
      }

      let pathParams = {
        'backupPlanId': backupPlanId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBackupSelectionOutput;
      return this.apiClient.callApi(
        '/backup/plans/{backupPlanId}/selections/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBackupVault operation.
     * @callback module:api/DefaultApi~createBackupVaultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBackupVaultOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a logical container where backups are stored. A <code>CreateBackupVault</code> request includes a name, optionally one or more resource tags, an encryption key, and a request ID.</p> <note> <p>Do not include sensitive data, such as passport numbers, in the name of a backup vault.</p> </note>
     * @param {String} backupVaultName The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of letters, numbers, and hyphens.
     * @param {module:model/CreateBackupVaultRequest} createBackupVaultRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBackupVaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBackupVaultOutput}
     */
    createBackupVault(backupVaultName, createBackupVaultRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBackupVaultRequest;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling createBackupVault");
      }
      // verify the required parameter 'createBackupVaultRequest' is set
      if (createBackupVaultRequest === undefined || createBackupVaultRequest === null) {
        throw new Error("Missing the required parameter 'createBackupVaultRequest' when calling createBackupVault");
      }

      let pathParams = {
        'backupVaultName': backupVaultName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBackupVaultOutput;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFramework operation.
     * @callback module:api/DefaultApi~createFrameworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFrameworkOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a framework with one or more controls. A framework is a collection of controls that you can use to evaluate your backup practices. By using pre-built customizable controls to define your policies, you can evaluate whether your backup practices comply with your policies and which resources are not yet in compliance.
     * @param {module:model/CreateFrameworkRequest} createFrameworkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFrameworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFrameworkOutput}
     */
    createFramework(createFrameworkRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFrameworkRequest;
      // verify the required parameter 'createFrameworkRequest' is set
      if (createFrameworkRequest === undefined || createFrameworkRequest === null) {
        throw new Error("Missing the required parameter 'createFrameworkRequest' when calling createFramework");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFrameworkOutput;
      return this.apiClient.callApi(
        '/audit/frameworks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLegalHold operation.
     * @callback module:api/DefaultApi~createLegalHoldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLegalHoldOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This action creates a legal hold on a recovery point (backup). A legal hold is a restraint on altering or deleting a backup until an authorized user cancels the legal hold. Any actions to delete or disassociate a recovery point will fail with an error if one or more active legal holds are on the recovery point.
     * @param {module:model/CreateLegalHoldRequest} createLegalHoldRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLegalHoldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLegalHoldOutput}
     */
    createLegalHold(createLegalHoldRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLegalHoldRequest;
      // verify the required parameter 'createLegalHoldRequest' is set
      if (createLegalHoldRequest === undefined || createLegalHoldRequest === null) {
        throw new Error("Missing the required parameter 'createLegalHoldRequest' when calling createLegalHold");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLegalHoldOutput;
      return this.apiClient.callApi(
        '/legal-holds/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReportPlan operation.
     * @callback module:api/DefaultApi~createReportPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateReportPlanOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a report plan. A report plan is a document that contains information about the contents of the report and where Backup will deliver it.</p> <p>If you call <code>CreateReportPlan</code> with a plan that already exists, you receive an <code>AlreadyExistsException</code> exception.</p>
     * @param {module:model/CreateReportPlanRequest} createReportPlanRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createReportPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateReportPlanOutput}
     */
    createReportPlan(createReportPlanRequest, opts, callback) {
      opts = opts || {};
      let postBody = createReportPlanRequest;
      // verify the required parameter 'createReportPlanRequest' is set
      if (createReportPlanRequest === undefined || createReportPlanRequest === null) {
        throw new Error("Missing the required parameter 'createReportPlanRequest' when calling createReportPlan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateReportPlanOutput;
      return this.apiClient.callApi(
        '/audit/report-plans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBackupPlan operation.
     * @callback module:api/DefaultApi~deleteBackupPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBackupPlanOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a backup plan. A backup plan can only be deleted after all associated selections of resources have been deleted. Deleting a backup plan deletes the current version of a backup plan. Previous versions, if any, will still exist.
     * @param {String} backupPlanId Uniquely identifies a backup plan.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBackupPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBackupPlanOutput}
     */
    deleteBackupPlan(backupPlanId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupPlanId' is set
      if (backupPlanId === undefined || backupPlanId === null) {
        throw new Error("Missing the required parameter 'backupPlanId' when calling deleteBackupPlan");
      }

      let pathParams = {
        'backupPlanId': backupPlanId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteBackupPlanOutput;
      return this.apiClient.callApi(
        '/backup/plans/{backupPlanId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBackupSelection operation.
     * @callback module:api/DefaultApi~deleteBackupSelectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the resource selection associated with a backup plan that is specified by the <code>SelectionId</code>.
     * @param {String} backupPlanId Uniquely identifies a backup plan.
     * @param {String} selectionId Uniquely identifies the body of a request to assign a set of resources to a backup plan.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBackupSelectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBackupSelection(backupPlanId, selectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupPlanId' is set
      if (backupPlanId === undefined || backupPlanId === null) {
        throw new Error("Missing the required parameter 'backupPlanId' when calling deleteBackupSelection");
      }
      // verify the required parameter 'selectionId' is set
      if (selectionId === undefined || selectionId === null) {
        throw new Error("Missing the required parameter 'selectionId' when calling deleteBackupSelection");
      }

      let pathParams = {
        'backupPlanId': backupPlanId,
        'selectionId': selectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backup/plans/{backupPlanId}/selections/{selectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBackupVault operation.
     * @callback module:api/DefaultApi~deleteBackupVaultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the backup vault identified by its name. A vault can be deleted only if it is empty.
     * @param {String} backupVaultName The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBackupVaultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBackupVault(backupVaultName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling deleteBackupVault");
      }

      let pathParams = {
        'backupVaultName': backupVaultName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBackupVaultAccessPolicy operation.
     * @callback module:api/DefaultApi~deleteBackupVaultAccessPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the policy document that manages permissions on a backup vault.
     * @param {String} backupVaultName The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBackupVaultAccessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBackupVaultAccessPolicy(backupVaultName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling deleteBackupVaultAccessPolicy");
      }

      let pathParams = {
        'backupVaultName': backupVaultName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/access-policy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBackupVaultLockConfiguration operation.
     * @callback module:api/DefaultApi~deleteBackupVaultLockConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes Backup Vault Lock from a backup vault specified by a backup vault name.</p> <p>If the Vault Lock configuration is immutable, then you cannot delete Vault Lock using API operations, and you will receive an <code>InvalidRequestException</code> if you attempt to do so. For more information, see <a href=\"https://docs.aws.amazon.com/aws-backup/latest/devguide/vault-lock.html\">Vault Lock</a> in the <i>Backup Developer Guide</i>.</p>
     * @param {String} backupVaultName The name of the backup vault from which to delete Backup Vault Lock.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBackupVaultLockConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBackupVaultLockConfiguration(backupVaultName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling deleteBackupVaultLockConfiguration");
      }

      let pathParams = {
        'backupVaultName': backupVaultName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/vault-lock', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBackupVaultNotifications operation.
     * @callback module:api/DefaultApi~deleteBackupVaultNotificationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes event notifications for the specified backup vault.
     * @param {String} backupVaultName The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBackupVaultNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBackupVaultNotifications(backupVaultName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling deleteBackupVaultNotifications");
      }

      let pathParams = {
        'backupVaultName': backupVaultName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/notification-configuration', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFramework operation.
     * @callback module:api/DefaultApi~deleteFrameworkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the framework specified by a framework name.
     * @param {String} frameworkName The unique name of a framework.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFrameworkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFramework(frameworkName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frameworkName' is set
      if (frameworkName === undefined || frameworkName === null) {
        throw new Error("Missing the required parameter 'frameworkName' when calling deleteFramework");
      }

      let pathParams = {
        'frameworkName': frameworkName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/audit/frameworks/{frameworkName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecoveryPoint operation.
     * @callback module:api/DefaultApi~deleteRecoveryPointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the recovery point specified by a recovery point ID.</p> <p>If the recovery point ID belongs to a continuous backup, calling this endpoint deletes the existing continuous backup and stops future continuous backup.</p> <p>When an IAM role's permissions are insufficient to call this API, the service sends back an HTTP 200 response with an empty HTTP body, but the recovery point is not deleted. Instead, it enters an <code>EXPIRED</code> state.</p> <p> <code>EXPIRED</code> recovery points can be deleted with this API once the IAM role has the <code>iam:CreateServiceLinkedRole</code> action. To learn more about adding this role, see <a href=\"https://docs.aws.amazon.com/aws-backup/latest/devguide/deleting-backups.html#deleting-backups-troubleshooting\"> Troubleshooting manual deletions</a>.</p> <p>If the user or role is deleted or the permission within the role is removed, the deletion will not be successful and will enter an <code>EXPIRED</code> state.</p>
     * @param {String} backupVaultName The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {String} recoveryPointArn An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRecoveryPointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecoveryPoint(backupVaultName, recoveryPointArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling deleteRecoveryPoint");
      }
      // verify the required parameter 'recoveryPointArn' is set
      if (recoveryPointArn === undefined || recoveryPointArn === null) {
        throw new Error("Missing the required parameter 'recoveryPointArn' when calling deleteRecoveryPoint");
      }

      let pathParams = {
        'backupVaultName': backupVaultName,
        'recoveryPointArn': recoveryPointArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReportPlan operation.
     * @callback module:api/DefaultApi~deleteReportPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the report plan specified by a report plan name.
     * @param {String} reportPlanName The unique name of a report plan.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteReportPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReportPlan(reportPlanName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reportPlanName' is set
      if (reportPlanName === undefined || reportPlanName === null) {
        throw new Error("Missing the required parameter 'reportPlanName' when calling deleteReportPlan");
      }

      let pathParams = {
        'reportPlanName': reportPlanName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/audit/report-plans/{reportPlanName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeBackupJob operation.
     * @callback module:api/DefaultApi~describeBackupJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeBackupJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns backup job details for the specified <code>BackupJobId</code>.
     * @param {String} backupJobId Uniquely identifies a request to Backup to back up a resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeBackupJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeBackupJobOutput}
     */
    describeBackupJob(backupJobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupJobId' is set
      if (backupJobId === undefined || backupJobId === null) {
        throw new Error("Missing the required parameter 'backupJobId' when calling describeBackupJob");
      }

      let pathParams = {
        'backupJobId': backupJobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeBackupJobOutput;
      return this.apiClient.callApi(
        '/backup-jobs/{backupJobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeBackupVault operation.
     * @callback module:api/DefaultApi~describeBackupVaultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeBackupVaultOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata about a backup vault specified by its name.
     * @param {String} backupVaultName The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeBackupVaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeBackupVaultOutput}
     */
    describeBackupVault(backupVaultName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling describeBackupVault");
      }

      let pathParams = {
        'backupVaultName': backupVaultName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeBackupVaultOutput;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeCopyJob operation.
     * @callback module:api/DefaultApi~describeCopyJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeCopyJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata associated with creating a copy of a resource.
     * @param {String} copyJobId Uniquely identifies a copy job.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeCopyJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeCopyJobOutput}
     */
    describeCopyJob(copyJobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'copyJobId' is set
      if (copyJobId === undefined || copyJobId === null) {
        throw new Error("Missing the required parameter 'copyJobId' when calling describeCopyJob");
      }

      let pathParams = {
        'copyJobId': copyJobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeCopyJobOutput;
      return this.apiClient.callApi(
        '/copy-jobs/{copyJobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFramework operation.
     * @callback module:api/DefaultApi~describeFrameworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFrameworkOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the framework details for the specified <code>FrameworkName</code>.
     * @param {String} frameworkName The unique name of a framework.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFrameworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFrameworkOutput}
     */
    describeFramework(frameworkName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frameworkName' is set
      if (frameworkName === undefined || frameworkName === null) {
        throw new Error("Missing the required parameter 'frameworkName' when calling describeFramework");
      }

      let pathParams = {
        'frameworkName': frameworkName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeFrameworkOutput;
      return this.apiClient.callApi(
        '/audit/frameworks/{frameworkName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeGlobalSettings operation.
     * @callback module:api/DefaultApi~describeGlobalSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeGlobalSettingsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes whether the Amazon Web Services account is opted in to cross-account backup. Returns an error if the account is not a member of an Organizations organization. Example: <code>describe-global-settings --region us-west-2</code> 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeGlobalSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeGlobalSettingsOutput}
     */
    describeGlobalSettings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeGlobalSettingsOutput;
      return this.apiClient.callApi(
        '/global-settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProtectedResource operation.
     * @callback module:api/DefaultApi~describeProtectedResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProtectedResourceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a saved resource, including the last time it was backed up, its Amazon Resource Name (ARN), and the Amazon Web Services service type of the saved resource.
     * @param {String} resourceArn An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProtectedResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProtectedResourceOutput}
     */
    describeProtectedResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling describeProtectedResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeProtectedResourceOutput;
      return this.apiClient.callApi(
        '/resources/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRecoveryPoint operation.
     * @callback module:api/DefaultApi~describeRecoveryPointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRecoveryPointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata associated with a recovery point, including ID, status, encryption, and lifecycle.
     * @param {String} backupVaultName The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {String} recoveryPointArn An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRecoveryPointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRecoveryPointOutput}
     */
    describeRecoveryPoint(backupVaultName, recoveryPointArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling describeRecoveryPoint");
      }
      // verify the required parameter 'recoveryPointArn' is set
      if (recoveryPointArn === undefined || recoveryPointArn === null) {
        throw new Error("Missing the required parameter 'recoveryPointArn' when calling describeRecoveryPoint");
      }

      let pathParams = {
        'backupVaultName': backupVaultName,
        'recoveryPointArn': recoveryPointArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeRecoveryPointOutput;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRegionSettings operation.
     * @callback module:api/DefaultApi~describeRegionSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRegionSettingsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current service opt-in settings for the Region. If service opt-in is enabled for a service, Backup tries to protect that service's resources in this Region, when the resource is included in an on-demand backup or scheduled backup plan. Otherwise, Backup does not try to protect that service's resources in this Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRegionSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRegionSettingsOutput}
     */
    describeRegionSettings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeRegionSettingsOutput;
      return this.apiClient.callApi(
        '/account-settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeReportJob operation.
     * @callback module:api/DefaultApi~describeReportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReportJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details associated with creating a report as specified by its <code>ReportJobId</code>.
     * @param {String} reportJobId The identifier of the report job. A unique, randomly generated, Unicode, UTF-8 encoded string that is at most 1,024 bytes long. The report job ID cannot be edited.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeReportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReportJobOutput}
     */
    describeReportJob(reportJobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reportJobId' is set
      if (reportJobId === undefined || reportJobId === null) {
        throw new Error("Missing the required parameter 'reportJobId' when calling describeReportJob");
      }

      let pathParams = {
        'reportJobId': reportJobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeReportJobOutput;
      return this.apiClient.callApi(
        '/audit/report-jobs/{reportJobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeReportPlan operation.
     * @callback module:api/DefaultApi~describeReportPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReportPlanOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all report plans for an Amazon Web Services account and Amazon Web Services Region.
     * @param {String} reportPlanName The unique name of a report plan.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeReportPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReportPlanOutput}
     */
    describeReportPlan(reportPlanName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reportPlanName' is set
      if (reportPlanName === undefined || reportPlanName === null) {
        throw new Error("Missing the required parameter 'reportPlanName' when calling describeReportPlan");
      }

      let pathParams = {
        'reportPlanName': reportPlanName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeReportPlanOutput;
      return this.apiClient.callApi(
        '/audit/report-plans/{reportPlanName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRestoreJob operation.
     * @callback module:api/DefaultApi~describeRestoreJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRestoreJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata associated with a restore job that is specified by a job ID.
     * @param {String} restoreJobId Uniquely identifies the job that restores a recovery point.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRestoreJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRestoreJobOutput}
     */
    describeRestoreJob(restoreJobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restoreJobId' is set
      if (restoreJobId === undefined || restoreJobId === null) {
        throw new Error("Missing the required parameter 'restoreJobId' when calling describeRestoreJob");
      }

      let pathParams = {
        'restoreJobId': restoreJobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeRestoreJobOutput;
      return this.apiClient.callApi(
        '/restore-jobs/{restoreJobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateRecoveryPoint operation.
     * @callback module:api/DefaultApi~disassociateRecoveryPointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified continuous backup recovery point from Backup and releases control of that continuous backup to the source service, such as Amazon RDS. The source service will continue to create and retain continuous backups using the lifecycle that you specified in your original backup plan.</p> <p>Does not support snapshot backup recovery points.</p>
     * @param {String} backupVaultName The unique name of an Backup vault.
     * @param {String} recoveryPointArn An Amazon Resource Name (ARN) that uniquely identifies an Backup recovery point.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateRecoveryPointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociateRecoveryPoint(backupVaultName, recoveryPointArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling disassociateRecoveryPoint");
      }
      // verify the required parameter 'recoveryPointArn' is set
      if (recoveryPointArn === undefined || recoveryPointArn === null) {
        throw new Error("Missing the required parameter 'recoveryPointArn' when calling disassociateRecoveryPoint");
      }

      let pathParams = {
        'backupVaultName': backupVaultName,
        'recoveryPointArn': recoveryPointArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}/disassociate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateRecoveryPointFromParent operation.
     * @callback module:api/DefaultApi~disassociateRecoveryPointFromParentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This action to a specific child (nested) recovery point removes the relationship between the specified recovery point and its parent (composite) recovery point.
     * @param {String} backupVaultName This is the name of a logical container where the child (nested) recovery point is stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {String} recoveryPointArn This is the Amazon Resource Name (ARN) that uniquely identifies the child (nested) recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45.</code> 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateRecoveryPointFromParentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociateRecoveryPointFromParent(backupVaultName, recoveryPointArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling disassociateRecoveryPointFromParent");
      }
      // verify the required parameter 'recoveryPointArn' is set
      if (recoveryPointArn === undefined || recoveryPointArn === null) {
        throw new Error("Missing the required parameter 'recoveryPointArn' when calling disassociateRecoveryPointFromParent");
      }

      let pathParams = {
        'backupVaultName': backupVaultName,
        'recoveryPointArn': recoveryPointArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}/parentAssociation', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportBackupPlanTemplate operation.
     * @callback module:api/DefaultApi~exportBackupPlanTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportBackupPlanTemplateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the backup plan that is specified by the plan ID as a backup template.
     * @param {String} backupPlanId Uniquely identifies a backup plan.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~exportBackupPlanTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportBackupPlanTemplateOutput}
     */
    exportBackupPlanTemplate(backupPlanId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupPlanId' is set
      if (backupPlanId === undefined || backupPlanId === null) {
        throw new Error("Missing the required parameter 'backupPlanId' when calling exportBackupPlanTemplate");
      }

      let pathParams = {
        'backupPlanId': backupPlanId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportBackupPlanTemplateOutput;
      return this.apiClient.callApi(
        '/backup/plans/{backupPlanId}/toTemplate/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackupPlan operation.
     * @callback module:api/DefaultApi~getBackupPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBackupPlanOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns <code>BackupPlan</code> details for the specified <code>BackupPlanId</code>. The details are the body of a backup plan in JSON format, in addition to plan metadata.
     * @param {String} backupPlanId Uniquely identifies a backup plan.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [versionId] Unique, randomly generated, Unicode, UTF-8 encoded strings that are at most 1,024 bytes long. Version IDs cannot be edited.
     * @param {module:api/DefaultApi~getBackupPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBackupPlanOutput}
     */
    getBackupPlan(backupPlanId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupPlanId' is set
      if (backupPlanId === undefined || backupPlanId === null) {
        throw new Error("Missing the required parameter 'backupPlanId' when calling getBackupPlan");
      }

      let pathParams = {
        'backupPlanId': backupPlanId
      };
      let queryParams = {
        'versionId': opts['versionId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBackupPlanOutput;
      return this.apiClient.callApi(
        '/backup/plans/{backupPlanId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackupPlanFromJSON operation.
     * @callback module:api/DefaultApi~getBackupPlanFromJSONCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBackupPlanFromJSONOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a valid JSON document specifying a backup plan or an error.
     * @param {module:model/GetBackupPlanFromJSONRequest} getBackupPlanFromJSONRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBackupPlanFromJSONCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBackupPlanFromJSONOutput}
     */
    getBackupPlanFromJSON(getBackupPlanFromJSONRequest, opts, callback) {
      opts = opts || {};
      let postBody = getBackupPlanFromJSONRequest;
      // verify the required parameter 'getBackupPlanFromJSONRequest' is set
      if (getBackupPlanFromJSONRequest === undefined || getBackupPlanFromJSONRequest === null) {
        throw new Error("Missing the required parameter 'getBackupPlanFromJSONRequest' when calling getBackupPlanFromJSON");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBackupPlanFromJSONOutput;
      return this.apiClient.callApi(
        '/backup/template/json/toPlan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackupPlanFromTemplate operation.
     * @callback module:api/DefaultApi~getBackupPlanFromTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBackupPlanFromTemplateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the template specified by its <code>templateId</code> as a backup plan.
     * @param {String} templateId Uniquely identifies a stored backup plan template.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBackupPlanFromTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBackupPlanFromTemplateOutput}
     */
    getBackupPlanFromTemplate(templateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getBackupPlanFromTemplate");
      }

      let pathParams = {
        'templateId': templateId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBackupPlanFromTemplateOutput;
      return this.apiClient.callApi(
        '/backup/template/plans/{templateId}/toPlan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackupSelection operation.
     * @callback module:api/DefaultApi~getBackupSelectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBackupSelectionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns selection metadata and a document in JSON format that specifies a list of resources that are associated with a backup plan.
     * @param {String} backupPlanId Uniquely identifies a backup plan.
     * @param {String} selectionId Uniquely identifies the body of a request to assign a set of resources to a backup plan.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBackupSelectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBackupSelectionOutput}
     */
    getBackupSelection(backupPlanId, selectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupPlanId' is set
      if (backupPlanId === undefined || backupPlanId === null) {
        throw new Error("Missing the required parameter 'backupPlanId' when calling getBackupSelection");
      }
      // verify the required parameter 'selectionId' is set
      if (selectionId === undefined || selectionId === null) {
        throw new Error("Missing the required parameter 'selectionId' when calling getBackupSelection");
      }

      let pathParams = {
        'backupPlanId': backupPlanId,
        'selectionId': selectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBackupSelectionOutput;
      return this.apiClient.callApi(
        '/backup/plans/{backupPlanId}/selections/{selectionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackupVaultAccessPolicy operation.
     * @callback module:api/DefaultApi~getBackupVaultAccessPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBackupVaultAccessPolicyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the access policy document that is associated with the named backup vault.
     * @param {String} backupVaultName The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBackupVaultAccessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBackupVaultAccessPolicyOutput}
     */
    getBackupVaultAccessPolicy(backupVaultName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling getBackupVaultAccessPolicy");
      }

      let pathParams = {
        'backupVaultName': backupVaultName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBackupVaultAccessPolicyOutput;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/access-policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackupVaultNotifications operation.
     * @callback module:api/DefaultApi~getBackupVaultNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBackupVaultNotificationsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns event notifications for the specified backup vault.
     * @param {String} backupVaultName The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBackupVaultNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBackupVaultNotificationsOutput}
     */
    getBackupVaultNotifications(backupVaultName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling getBackupVaultNotifications");
      }

      let pathParams = {
        'backupVaultName': backupVaultName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBackupVaultNotificationsOutput;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/notification-configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLegalHold operation.
     * @callback module:api/DefaultApi~getLegalHoldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLegalHoldOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This action returns details for a specified legal hold. The details are the body of a legal hold in JSON format, in addition to metadata.
     * @param {String} legalHoldId This is the ID required to use <code>GetLegalHold</code>. This unique ID is associated with a specific legal hold.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLegalHoldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLegalHoldOutput}
     */
    getLegalHold(legalHoldId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'legalHoldId' is set
      if (legalHoldId === undefined || legalHoldId === null) {
        throw new Error("Missing the required parameter 'legalHoldId' when calling getLegalHold");
      }

      let pathParams = {
        'legalHoldId': legalHoldId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLegalHoldOutput;
      return this.apiClient.callApi(
        '/legal-holds/{legalHoldId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecoveryPointRestoreMetadata operation.
     * @callback module:api/DefaultApi~getRecoveryPointRestoreMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecoveryPointRestoreMetadataOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a set of metadata key-value pairs that were used to create the backup.
     * @param {String} backupVaultName The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {String} recoveryPointArn An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRecoveryPointRestoreMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecoveryPointRestoreMetadataOutput}
     */
    getRecoveryPointRestoreMetadata(backupVaultName, recoveryPointArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling getRecoveryPointRestoreMetadata");
      }
      // verify the required parameter 'recoveryPointArn' is set
      if (recoveryPointArn === undefined || recoveryPointArn === null) {
        throw new Error("Missing the required parameter 'recoveryPointArn' when calling getRecoveryPointRestoreMetadata");
      }

      let pathParams = {
        'backupVaultName': backupVaultName,
        'recoveryPointArn': recoveryPointArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecoveryPointRestoreMetadataOutput;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}/restore-metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportedResourceTypes operation.
     * @callback module:api/DefaultApi~getSupportedResourceTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSupportedResourceTypesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the Amazon Web Services resource types supported by Backup.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSupportedResourceTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSupportedResourceTypesOutput}
     */
    getSupportedResourceTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSupportedResourceTypesOutput;
      return this.apiClient.callApi(
        '/supported-resource-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBackupJobs operation.
     * @callback module:api/DefaultApi~listBackupJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBackupJobsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of existing backup jobs for an authenticated account for the last 30 days. For a longer period of time, consider using these <a href=\"https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html\">monitoring tools</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.
     * @param {Number} [maxResults] The maximum number of items to be returned.
     * @param {String} [resourceArn] Returns only backup jobs that match the specified resource Amazon Resource Name (ARN).
     * @param {module:model/String} [state] Returns only backup jobs that are in the specified state.
     * @param {String} [backupVaultName] Returns only backup jobs that will be stored in the specified backup vault. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {Date} [createdBefore] Returns only backup jobs that were created before the specified date.
     * @param {Date} [createdAfter] Returns only backup jobs that were created after the specified date.
     * @param {String} [resourceType] <p>Returns only backup jobs for the specified resources:</p> <ul> <li> <p> <code>Aurora</code> for Amazon Aurora</p> </li> <li> <p> <code>DocumentDB</code> for Amazon DocumentDB (with MongoDB compatibility)</p> </li> <li> <p> <code>DynamoDB</code> for Amazon DynamoDB</p> </li> <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li> <li> <p> <code>EC2</code> for Amazon Elastic Compute Cloud</p> </li> <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li> <li> <p> <code>FSx</code> for Amazon FSx</p> </li> <li> <p> <code>Neptune</code> for Amazon Neptune</p> </li> <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li> <li> <p> <code>Storage Gateway</code> for Storage Gateway</p> </li> <li> <p> <code>S3</code> for Amazon S3</p> </li> <li> <p> <code>VirtualMachine</code> for virtual machines</p> </li> </ul>
     * @param {String} [accountId] <p>The account ID to list the jobs from. Returns only backup jobs associated with the specified account ID.</p> <p>If used from an Organizations management account, passing <code>*</code> returns all jobs across the organization.</p>
     * @param {Date} [completeAfter] Returns only backup jobs completed after a date expressed in Unix format and Coordinated Universal Time (UTC).
     * @param {Date} [completeBefore] Returns only backup jobs completed before a date expressed in Unix format and Coordinated Universal Time (UTC).
     * @param {String} [parentJobId] This is a filter to list child (nested) jobs based on parent job ID.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listBackupJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBackupJobsOutput}
     */
    listBackupJobs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'resourceArn': opts['resourceArn'],
        'state': opts['state'],
        'backupVaultName': opts['backupVaultName'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'resourceType': opts['resourceType'],
        'accountId': opts['accountId'],
        'completeAfter': opts['completeAfter'],
        'completeBefore': opts['completeBefore'],
        'parentJobId': opts['parentJobId'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBackupJobsOutput;
      return this.apiClient.callApi(
        '/backup-jobs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBackupPlanTemplates operation.
     * @callback module:api/DefaultApi~listBackupPlanTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBackupPlanTemplatesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata of your saved backup plan templates, including the template ID, name, and the creation and deletion dates.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.
     * @param {Number} [maxResults] The maximum number of items to be returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listBackupPlanTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBackupPlanTemplatesOutput}
     */
    listBackupPlanTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBackupPlanTemplatesOutput;
      return this.apiClient.callApi(
        '/backup/template/plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBackupPlanVersions operation.
     * @callback module:api/DefaultApi~listBackupPlanVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBackupPlanVersionsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns version metadata of your backup plans, including Amazon Resource Names (ARNs), backup plan IDs, creation and deletion dates, plan names, and version IDs.
     * @param {String} backupPlanId Uniquely identifies a backup plan.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.
     * @param {Number} [maxResults] The maximum number of items to be returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listBackupPlanVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBackupPlanVersionsOutput}
     */
    listBackupPlanVersions(backupPlanId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupPlanId' is set
      if (backupPlanId === undefined || backupPlanId === null) {
        throw new Error("Missing the required parameter 'backupPlanId' when calling listBackupPlanVersions");
      }

      let pathParams = {
        'backupPlanId': backupPlanId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBackupPlanVersionsOutput;
      return this.apiClient.callApi(
        '/backup/plans/{backupPlanId}/versions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBackupPlans operation.
     * @callback module:api/DefaultApi~listBackupPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBackupPlansOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all active backup plans for an authenticated account. The list contains information such as Amazon Resource Names (ARNs), plan IDs, creation and deletion dates, version IDs, plan names, and creator request IDs.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.
     * @param {Number} [maxResults] The maximum number of items to be returned.
     * @param {Boolean} [includeDeleted] A Boolean value with a default value of <code>FALSE</code> that returns deleted backup plans when set to <code>TRUE</code>.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listBackupPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBackupPlansOutput}
     */
    listBackupPlans(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'includeDeleted': opts['includeDeleted'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBackupPlansOutput;
      return this.apiClient.callApi(
        '/backup/plans/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBackupSelections operation.
     * @callback module:api/DefaultApi~listBackupSelectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBackupSelectionsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array containing metadata of the resources associated with the target backup plan.
     * @param {String} backupPlanId Uniquely identifies a backup plan.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.
     * @param {Number} [maxResults] The maximum number of items to be returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listBackupSelectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBackupSelectionsOutput}
     */
    listBackupSelections(backupPlanId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupPlanId' is set
      if (backupPlanId === undefined || backupPlanId === null) {
        throw new Error("Missing the required parameter 'backupPlanId' when calling listBackupSelections");
      }

      let pathParams = {
        'backupPlanId': backupPlanId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBackupSelectionsOutput;
      return this.apiClient.callApi(
        '/backup/plans/{backupPlanId}/selections/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBackupVaults operation.
     * @callback module:api/DefaultApi~listBackupVaultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBackupVaultsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of recovery point storage containers along with information about them.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.
     * @param {Number} [maxResults] The maximum number of items to be returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listBackupVaultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBackupVaultsOutput}
     */
    listBackupVaults(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBackupVaultsOutput;
      return this.apiClient.callApi(
        '/backup-vaults/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCopyJobs operation.
     * @callback module:api/DefaultApi~listCopyJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCopyJobsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata about your copy jobs.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The next item following a partial list of returned items. For example, if a request is made to return maxResults number of items, NextToken allows you to return more items in your list starting at the location pointed to by the next token. 
     * @param {Number} [maxResults] The maximum number of items to be returned.
     * @param {String} [resourceArn] Returns only copy jobs that match the specified resource Amazon Resource Name (ARN). 
     * @param {module:model/String} [state] Returns only copy jobs that are in the specified state.
     * @param {Date} [createdBefore] Returns only copy jobs that were created before the specified date.
     * @param {Date} [createdAfter] Returns only copy jobs that were created after the specified date.
     * @param {String} [resourceType] <p>Returns only backup jobs for the specified resources:</p> <ul> <li> <p> <code>Aurora</code> for Amazon Aurora</p> </li> <li> <p> <code>DocumentDB</code> for Amazon DocumentDB (with MongoDB compatibility)</p> </li> <li> <p> <code>DynamoDB</code> for Amazon DynamoDB</p> </li> <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li> <li> <p> <code>EC2</code> for Amazon Elastic Compute Cloud</p> </li> <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li> <li> <p> <code>FSx</code> for Amazon FSx</p> </li> <li> <p> <code>Neptune</code> for Amazon Neptune</p> </li> <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li> <li> <p> <code>Storage Gateway</code> for Storage Gateway</p> </li> <li> <p> <code>S3</code> for Amazon S3</p> </li> <li> <p> <code>VirtualMachine</code> for virtual machines</p> </li> </ul>
     * @param {String} [destinationVaultArn] An Amazon Resource Name (ARN) that uniquely identifies a source backup vault to copy from; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>. 
     * @param {String} [accountId] The account ID to list the jobs from. Returns only copy jobs associated with the specified account ID.
     * @param {Date} [completeBefore] Returns only copy jobs completed before a date expressed in Unix format and Coordinated Universal Time (UTC).
     * @param {Date} [completeAfter] Returns only copy jobs completed after a date expressed in Unix format and Coordinated Universal Time (UTC).
     * @param {String} [parentJobId] This is a filter to list child (nested) jobs based on parent job ID.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listCopyJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCopyJobsOutput}
     */
    listCopyJobs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'resourceArn': opts['resourceArn'],
        'state': opts['state'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'resourceType': opts['resourceType'],
        'destinationVaultArn': opts['destinationVaultArn'],
        'accountId': opts['accountId'],
        'completeBefore': opts['completeBefore'],
        'completeAfter': opts['completeAfter'],
        'parentJobId': opts['parentJobId'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCopyJobsOutput;
      return this.apiClient.callApi(
        '/copy-jobs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFrameworks operation.
     * @callback module:api/DefaultApi~listFrameworksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFrameworksOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all frameworks for an Amazon Web Services account and Amazon Web Services Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.
     * @param {String} [nextToken] An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
     * @param {module:api/DefaultApi~listFrameworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFrameworksOutput}
     */
    listFrameworks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFrameworksOutput;
      return this.apiClient.callApi(
        '/audit/frameworks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLegalHolds operation.
     * @callback module:api/DefaultApi~listLegalHoldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLegalHoldsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This action returns metadata about active and previous legal holds.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The next item following a partial list of returned resources. For example, if a request is made to return <code>maxResults</code> number of resources, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.
     * @param {Number} [maxResults] The maximum number of resource list items to be returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listLegalHoldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLegalHoldsOutput}
     */
    listLegalHolds(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLegalHoldsOutput;
      return this.apiClient.callApi(
        '/legal-holds/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProtectedResources operation.
     * @callback module:api/DefaultApi~listProtectedResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProtectedResourcesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of resources successfully backed up by Backup, including the time the resource was saved, an Amazon Resource Name (ARN) of the resource, and a resource type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.
     * @param {Number} [maxResults] The maximum number of items to be returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listProtectedResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProtectedResourcesOutput}
     */
    listProtectedResources(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProtectedResourcesOutput;
      return this.apiClient.callApi(
        '/resources/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRecoveryPointsByBackupVault operation.
     * @callback module:api/DefaultApi~listRecoveryPointsByBackupVaultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRecoveryPointsByBackupVaultOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns detailed information about the recovery points stored in a backup vault.
     * @param {String} backupVaultName <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p> <note> <p>Backup vault name might not be available when a supported service creates the backup.</p> </note>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.
     * @param {Number} [maxResults] The maximum number of items to be returned.
     * @param {String} [resourceArn] Returns only recovery points that match the specified resource Amazon Resource Name (ARN).
     * @param {String} [resourceType] Returns only recovery points that match the specified resource type.
     * @param {String} [backupPlanId] Returns only recovery points that match the specified backup plan ID.
     * @param {Date} [createdBefore] Returns only recovery points that were created before the specified timestamp.
     * @param {Date} [createdAfter] Returns only recovery points that were created after the specified timestamp.
     * @param {String} [parentRecoveryPointArn] This returns only recovery points that match the specified parent (composite) recovery point Amazon Resource Name (ARN).
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listRecoveryPointsByBackupVaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRecoveryPointsByBackupVaultOutput}
     */
    listRecoveryPointsByBackupVault(backupVaultName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling listRecoveryPointsByBackupVault");
      }

      let pathParams = {
        'backupVaultName': backupVaultName
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'resourceArn': opts['resourceArn'],
        'resourceType': opts['resourceType'],
        'backupPlanId': opts['backupPlanId'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'parentRecoveryPointArn': opts['parentRecoveryPointArn'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRecoveryPointsByBackupVaultOutput;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/recovery-points/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRecoveryPointsByLegalHold operation.
     * @callback module:api/DefaultApi~listRecoveryPointsByLegalHoldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRecoveryPointsByLegalHoldOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This action returns recovery point ARNs (Amazon Resource Names) of the specified legal hold.
     * @param {String} legalHoldId This is the ID of the legal hold.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] This is the next item following a partial list of returned resources. For example, if a request is made to return <code>maxResults</code> number of resources, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.
     * @param {Number} [maxResults] This is the maximum number of resource list items to be returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listRecoveryPointsByLegalHoldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRecoveryPointsByLegalHoldOutput}
     */
    listRecoveryPointsByLegalHold(legalHoldId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'legalHoldId' is set
      if (legalHoldId === undefined || legalHoldId === null) {
        throw new Error("Missing the required parameter 'legalHoldId' when calling listRecoveryPointsByLegalHold");
      }

      let pathParams = {
        'legalHoldId': legalHoldId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRecoveryPointsByLegalHoldOutput;
      return this.apiClient.callApi(
        '/legal-holds/{legalHoldId}/recovery-points', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRecoveryPointsByResource operation.
     * @callback module:api/DefaultApi~listRecoveryPointsByResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRecoveryPointsByResourceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns detailed information about all the recovery points of the type specified by a resource Amazon Resource Name (ARN).</p> <note> <p>For Amazon EFS and Amazon EC2, this action only lists recovery points created by Backup.</p> </note>
     * @param {String} resourceArn An ARN that uniquely identifies a resource. The format of the ARN depends on the resource type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.
     * @param {Number} [maxResults] <p>The maximum number of items to be returned.</p> <note> <p>Amazon RDS requires a value of at least 20.</p> </note>
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listRecoveryPointsByResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRecoveryPointsByResourceOutput}
     */
    listRecoveryPointsByResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listRecoveryPointsByResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRecoveryPointsByResourceOutput;
      return this.apiClient.callApi(
        '/resources/{resourceArn}/recovery-points/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReportJobs operation.
     * @callback module:api/DefaultApi~listReportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReportJobsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details about your report jobs.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [reportPlanName] Returns only report jobs with the specified report plan name.
     * @param {Date} [creationBefore] Returns only report jobs that were created before the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.
     * @param {Date} [creationAfter] Returns only report jobs that were created after the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.
     * @param {String} [status] <p>Returns only report jobs that are in the specified status. The statuses are:</p> <p> <code>CREATED | RUNNING | COMPLETED | FAILED</code> </p>
     * @param {Number} [maxResults] The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.
     * @param {String} [nextToken] An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
     * @param {module:api/DefaultApi~listReportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReportJobsOutput}
     */
    listReportJobs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ReportPlanName': opts['reportPlanName'],
        'CreationBefore': opts['creationBefore'],
        'CreationAfter': opts['creationAfter'],
        'Status': opts['status'],
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListReportJobsOutput;
      return this.apiClient.callApi(
        '/audit/report-jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReportPlans operation.
     * @callback module:api/DefaultApi~listReportPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReportPlansOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of your report plans. For detailed information about a single report plan, use <code>DescribeReportPlan</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.
     * @param {String} [nextToken] An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
     * @param {module:api/DefaultApi~listReportPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReportPlansOutput}
     */
    listReportPlans(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListReportPlansOutput;
      return this.apiClient.callApi(
        '/audit/report-plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRestoreJobs operation.
     * @callback module:api/DefaultApi~listRestoreJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRestoreJobsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of jobs that Backup initiated to restore a saved resource, including details about the recovery process.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.
     * @param {Number} [maxResults] The maximum number of items to be returned.
     * @param {String} [accountId] The account ID to list the jobs from. Returns only restore jobs associated with the specified account ID.
     * @param {Date} [createdBefore] Returns only restore jobs that were created before the specified date.
     * @param {Date} [createdAfter] Returns only restore jobs that were created after the specified date.
     * @param {module:model/String} [status] Returns only restore jobs associated with the specified job status.
     * @param {Date} [completeBefore] Returns only copy jobs completed before a date expressed in Unix format and Coordinated Universal Time (UTC).
     * @param {Date} [completeAfter] Returns only copy jobs completed after a date expressed in Unix format and Coordinated Universal Time (UTC).
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listRestoreJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRestoreJobsOutput}
     */
    listRestoreJobs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'accountId': opts['accountId'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'status': opts['status'],
        'completeBefore': opts['completeBefore'],
        'completeAfter': opts['completeAfter'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRestoreJobsOutput;
      return this.apiClient.callApi(
        '/restore-jobs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTags operation.
     * @callback module:api/DefaultApi~listTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of key-value pairs assigned to a target recovery point, backup plan, or backup vault.</p> <p> <code>ListTags</code> only works for resource types that support full Backup management of their backups. Those resource types are listed in the \"Full Backup management\" section of the <a href=\"https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource\"> Feature availability by resource</a> table.</p>
     * @param {String} resourceArn An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the type of resource. Valid targets for <code>ListTags</code> are recovery points, backup plans, and backup vaults.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.
     * @param {Number} [maxResults] The maximum number of items to be returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsOutput}
     */
    listTags(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTags");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsOutput;
      return this.apiClient.callApi(
        '/tags/{resourceArn}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBackupVaultAccessPolicy operation.
     * @callback module:api/DefaultApi~putBackupVaultAccessPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a resource-based policy that is used to manage access permissions on the target backup vault. Requires a backup vault name and an access policy document in JSON format.
     * @param {String} backupVaultName The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {module:model/PutBackupVaultAccessPolicyRequest} putBackupVaultAccessPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putBackupVaultAccessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBackupVaultAccessPolicy(backupVaultName, putBackupVaultAccessPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putBackupVaultAccessPolicyRequest;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling putBackupVaultAccessPolicy");
      }
      // verify the required parameter 'putBackupVaultAccessPolicyRequest' is set
      if (putBackupVaultAccessPolicyRequest === undefined || putBackupVaultAccessPolicyRequest === null) {
        throw new Error("Missing the required parameter 'putBackupVaultAccessPolicyRequest' when calling putBackupVaultAccessPolicy");
      }

      let pathParams = {
        'backupVaultName': backupVaultName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/access-policy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBackupVaultLockConfiguration operation.
     * @callback module:api/DefaultApi~putBackupVaultLockConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Applies Backup Vault Lock to a backup vault, preventing attempts to delete any recovery point stored in or created in a backup vault. Vault Lock also prevents attempts to update the lifecycle policy that controls the retention period of any recovery point currently stored in a backup vault. If specified, Vault Lock enforces a minimum and maximum retention period for future backup and copy jobs that target a backup vault.</p> <note> <p>Backup Vault Lock has been assessed by Cohasset Associates for use in environments that are subject to SEC 17a-4, CFTC, and FINRA regulations. For more information about how Backup Vault Lock relates to these regulations, see the <a href=\"samples/cohassetreport.zip\">Cohasset Associates Compliance Assessment.</a> </p> </note>
     * @param {String} backupVaultName The Backup Vault Lock configuration that specifies the name of the backup vault it protects.
     * @param {module:model/PutBackupVaultLockConfigurationRequest} putBackupVaultLockConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putBackupVaultLockConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBackupVaultLockConfiguration(backupVaultName, putBackupVaultLockConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = putBackupVaultLockConfigurationRequest;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling putBackupVaultLockConfiguration");
      }
      // verify the required parameter 'putBackupVaultLockConfigurationRequest' is set
      if (putBackupVaultLockConfigurationRequest === undefined || putBackupVaultLockConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'putBackupVaultLockConfigurationRequest' when calling putBackupVaultLockConfiguration");
      }

      let pathParams = {
        'backupVaultName': backupVaultName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/vault-lock', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBackupVaultNotifications operation.
     * @callback module:api/DefaultApi~putBackupVaultNotificationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Turns on notifications on a backup vault for the specified topic and events.
     * @param {String} backupVaultName The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {module:model/PutBackupVaultNotificationsRequest} putBackupVaultNotificationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putBackupVaultNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBackupVaultNotifications(backupVaultName, putBackupVaultNotificationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putBackupVaultNotificationsRequest;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling putBackupVaultNotifications");
      }
      // verify the required parameter 'putBackupVaultNotificationsRequest' is set
      if (putBackupVaultNotificationsRequest === undefined || putBackupVaultNotificationsRequest === null) {
        throw new Error("Missing the required parameter 'putBackupVaultNotificationsRequest' when calling putBackupVaultNotifications");
      }

      let pathParams = {
        'backupVaultName': backupVaultName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/notification-configuration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startBackupJob operation.
     * @callback module:api/DefaultApi~startBackupJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartBackupJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an on-demand backup job for the specified resource.
     * @param {module:model/StartBackupJobRequest} startBackupJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startBackupJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartBackupJobOutput}
     */
    startBackupJob(startBackupJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startBackupJobRequest;
      // verify the required parameter 'startBackupJobRequest' is set
      if (startBackupJobRequest === undefined || startBackupJobRequest === null) {
        throw new Error("Missing the required parameter 'startBackupJobRequest' when calling startBackupJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartBackupJobOutput;
      return this.apiClient.callApi(
        '/backup-jobs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startCopyJob operation.
     * @callback module:api/DefaultApi~startCopyJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartCopyJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts a job to create a one-time copy of the specified resource.</p> <p>Does not support continuous backups.</p>
     * @param {module:model/StartCopyJobRequest} startCopyJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startCopyJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartCopyJobOutput}
     */
    startCopyJob(startCopyJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startCopyJobRequest;
      // verify the required parameter 'startCopyJobRequest' is set
      if (startCopyJobRequest === undefined || startCopyJobRequest === null) {
        throw new Error("Missing the required parameter 'startCopyJobRequest' when calling startCopyJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartCopyJobOutput;
      return this.apiClient.callApi(
        '/copy-jobs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startReportJob operation.
     * @callback module:api/DefaultApi~startReportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartReportJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an on-demand report job for the specified report plan.
     * @param {String} reportPlanName The unique name of a report plan.
     * @param {module:model/StartReportJobRequest} startReportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startReportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartReportJobOutput}
     */
    startReportJob(reportPlanName, startReportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startReportJobRequest;
      // verify the required parameter 'reportPlanName' is set
      if (reportPlanName === undefined || reportPlanName === null) {
        throw new Error("Missing the required parameter 'reportPlanName' when calling startReportJob");
      }
      // verify the required parameter 'startReportJobRequest' is set
      if (startReportJobRequest === undefined || startReportJobRequest === null) {
        throw new Error("Missing the required parameter 'startReportJobRequest' when calling startReportJob");
      }

      let pathParams = {
        'reportPlanName': reportPlanName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartReportJobOutput;
      return this.apiClient.callApi(
        '/audit/report-jobs/{reportPlanName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startRestoreJob operation.
     * @callback module:api/DefaultApi~startRestoreJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartRestoreJobOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recovers the saved resource identified by an Amazon Resource Name (ARN).
     * @param {module:model/StartRestoreJobRequest} startRestoreJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startRestoreJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartRestoreJobOutput}
     */
    startRestoreJob(startRestoreJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startRestoreJobRequest;
      // verify the required parameter 'startRestoreJobRequest' is set
      if (startRestoreJobRequest === undefined || startRestoreJobRequest === null) {
        throw new Error("Missing the required parameter 'startRestoreJobRequest' when calling startRestoreJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartRestoreJobOutput;
      return this.apiClient.callApi(
        '/restore-jobs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopBackupJob operation.
     * @callback module:api/DefaultApi~stopBackupJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Attempts to cancel a job to create a one-time backup of a resource.</p> <p>This action is not supported for the following services: Amazon FSx for Windows File Server, Amazon FSx for Lustre, FSx for ONTAP , Amazon FSx for OpenZFS, Amazon DocumentDB (with MongoDB compatibility), Amazon RDS, Amazon Aurora, and Amazon Neptune.</p>
     * @param {String} backupJobId Uniquely identifies a request to Backup to back up a resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopBackupJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopBackupJob(backupJobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupJobId' is set
      if (backupJobId === undefined || backupJobId === null) {
        throw new Error("Missing the required parameter 'backupJobId' when calling stopBackupJob");
      }

      let pathParams = {
        'backupJobId': backupJobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backup-jobs/{backupJobId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns a set of key-value pairs to a recovery point, backup plan, or backup vault identified by an Amazon Resource Name (ARN).
     * @param {String} resourceArn An ARN that uniquely identifies a resource. The format of the ARN depends on the type of the tagged resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a set of key-value pairs from a recovery point, backup plan, or backup vault identified by an Amazon Resource Name (ARN)
     * @param {String} resourceArn An ARN that uniquely identifies a resource. The format of the ARN depends on the type of the tagged resource.
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(resourceArn, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/untag/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBackupPlan operation.
     * @callback module:api/DefaultApi~updateBackupPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBackupPlanOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing backup plan identified by its <code>backupPlanId</code> with the input document in JSON format. The new version is uniquely identified by a <code>VersionId</code>.
     * @param {String} backupPlanId Uniquely identifies a backup plan.
     * @param {module:model/UpdateBackupPlanRequest} updateBackupPlanRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBackupPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBackupPlanOutput}
     */
    updateBackupPlan(backupPlanId, updateBackupPlanRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBackupPlanRequest;
      // verify the required parameter 'backupPlanId' is set
      if (backupPlanId === undefined || backupPlanId === null) {
        throw new Error("Missing the required parameter 'backupPlanId' when calling updateBackupPlan");
      }
      // verify the required parameter 'updateBackupPlanRequest' is set
      if (updateBackupPlanRequest === undefined || updateBackupPlanRequest === null) {
        throw new Error("Missing the required parameter 'updateBackupPlanRequest' when calling updateBackupPlan");
      }

      let pathParams = {
        'backupPlanId': backupPlanId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBackupPlanOutput;
      return this.apiClient.callApi(
        '/backup/plans/{backupPlanId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFramework operation.
     * @callback module:api/DefaultApi~updateFrameworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFrameworkOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing framework identified by its <code>FrameworkName</code> with the input document in JSON format.
     * @param {String} frameworkName The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
     * @param {module:model/UpdateFrameworkRequest} updateFrameworkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFrameworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFrameworkOutput}
     */
    updateFramework(frameworkName, updateFrameworkRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFrameworkRequest;
      // verify the required parameter 'frameworkName' is set
      if (frameworkName === undefined || frameworkName === null) {
        throw new Error("Missing the required parameter 'frameworkName' when calling updateFramework");
      }
      // verify the required parameter 'updateFrameworkRequest' is set
      if (updateFrameworkRequest === undefined || updateFrameworkRequest === null) {
        throw new Error("Missing the required parameter 'updateFrameworkRequest' when calling updateFramework");
      }

      let pathParams = {
        'frameworkName': frameworkName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFrameworkOutput;
      return this.apiClient.callApi(
        '/audit/frameworks/{frameworkName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGlobalSettings operation.
     * @callback module:api/DefaultApi~updateGlobalSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates whether the Amazon Web Services account is opted in to cross-account backup. Returns an error if the account is not an Organizations management account. Use the <code>DescribeGlobalSettings</code> API to determine the current settings.
     * @param {module:model/UpdateGlobalSettingsRequest} updateGlobalSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateGlobalSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGlobalSettings(updateGlobalSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateGlobalSettingsRequest;
      // verify the required parameter 'updateGlobalSettingsRequest' is set
      if (updateGlobalSettingsRequest === undefined || updateGlobalSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateGlobalSettingsRequest' when calling updateGlobalSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/global-settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRecoveryPointLifecycle operation.
     * @callback module:api/DefaultApi~updateRecoveryPointLifecycleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRecoveryPointLifecycleOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sets the transition lifecycle of a recovery point.</p> <p>The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. Backup transitions and expires backups automatically according to the lifecycle that you define.</p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.</p> <p>Resource types that are able to be transitioned to cold storage are listed in the \"Lifecycle to cold storage\" section of the <a href=\"https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource\"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p> <p>This operation does not support continuous backups.</p>
     * @param {String} backupVaultName The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
     * @param {String} recoveryPointArn An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.
     * @param {module:model/UpdateRecoveryPointLifecycleRequest} updateRecoveryPointLifecycleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRecoveryPointLifecycleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRecoveryPointLifecycleOutput}
     */
    updateRecoveryPointLifecycle(backupVaultName, recoveryPointArn, updateRecoveryPointLifecycleRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRecoveryPointLifecycleRequest;
      // verify the required parameter 'backupVaultName' is set
      if (backupVaultName === undefined || backupVaultName === null) {
        throw new Error("Missing the required parameter 'backupVaultName' when calling updateRecoveryPointLifecycle");
      }
      // verify the required parameter 'recoveryPointArn' is set
      if (recoveryPointArn === undefined || recoveryPointArn === null) {
        throw new Error("Missing the required parameter 'recoveryPointArn' when calling updateRecoveryPointLifecycle");
      }
      // verify the required parameter 'updateRecoveryPointLifecycleRequest' is set
      if (updateRecoveryPointLifecycleRequest === undefined || updateRecoveryPointLifecycleRequest === null) {
        throw new Error("Missing the required parameter 'updateRecoveryPointLifecycleRequest' when calling updateRecoveryPointLifecycle");
      }

      let pathParams = {
        'backupVaultName': backupVaultName,
        'recoveryPointArn': recoveryPointArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRecoveryPointLifecycleOutput;
      return this.apiClient.callApi(
        '/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRegionSettings operation.
     * @callback module:api/DefaultApi~updateRegionSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the current service opt-in settings for the Region. If service-opt-in is enabled for a service, Backup tries to protect that service's resources in this Region, when the resource is included in an on-demand backup or scheduled backup plan. Otherwise, Backup does not try to protect that service's resources in this Region. Use the <code>DescribeRegionSettings</code> API to determine the resource types that are supported.
     * @param {module:model/UpdateRegionSettingsRequest} updateRegionSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRegionSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRegionSettings(updateRegionSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRegionSettingsRequest;
      // verify the required parameter 'updateRegionSettingsRequest' is set
      if (updateRegionSettingsRequest === undefined || updateRegionSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateRegionSettingsRequest' when calling updateRegionSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account-settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReportPlan operation.
     * @callback module:api/DefaultApi~updateReportPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateReportPlanOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing report plan identified by its <code>ReportPlanName</code> with the input document in JSON format.
     * @param {String} reportPlanName The unique name of the report plan. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
     * @param {module:model/UpdateReportPlanRequest} updateReportPlanRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateReportPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateReportPlanOutput}
     */
    updateReportPlan(reportPlanName, updateReportPlanRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateReportPlanRequest;
      // verify the required parameter 'reportPlanName' is set
      if (reportPlanName === undefined || reportPlanName === null) {
        throw new Error("Missing the required parameter 'reportPlanName' when calling updateReportPlan");
      }
      // verify the required parameter 'updateReportPlanRequest' is set
      if (updateReportPlanRequest === undefined || updateReportPlanRequest === null) {
        throw new Error("Missing the required parameter 'updateReportPlanRequest' when calling updateReportPlan");
      }

      let pathParams = {
        'reportPlanName': reportPlanName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateReportPlanOutput;
      return this.apiClient.callApi(
        '/audit/report-plans/{reportPlanName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
