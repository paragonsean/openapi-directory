# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.framework_control_control_scope import FrameworkControlControlScope
from openapi_server import util


class FrameworkControl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, control_name: str=None, control_input_parameters: List=None, control_scope: FrameworkControlControlScope=None):
        """FrameworkControl - a model defined in OpenAPI

        :param control_name: The control_name of this FrameworkControl.
        :param control_input_parameters: The control_input_parameters of this FrameworkControl.
        :param control_scope: The control_scope of this FrameworkControl.
        """
        self.openapi_types = {
            'control_name': str,
            'control_input_parameters': List,
            'control_scope': FrameworkControlControlScope
        }

        self.attribute_map = {
            'control_name': 'ControlName',
            'control_input_parameters': 'ControlInputParameters',
            'control_scope': 'ControlScope'
        }

        self._control_name = control_name
        self._control_input_parameters = control_input_parameters
        self._control_scope = control_scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrameworkControl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FrameworkControl of this FrameworkControl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def control_name(self):
        """Gets the control_name of this FrameworkControl.


        :return: The control_name of this FrameworkControl.
        :rtype: str
        """
        return self._control_name

    @control_name.setter
    def control_name(self, control_name):
        """Sets the control_name of this FrameworkControl.


        :param control_name: The control_name of this FrameworkControl.
        :type control_name: str
        """
        if control_name is None:
            raise ValueError("Invalid value for `control_name`, must not be `None`")

        self._control_name = control_name

    @property
    def control_input_parameters(self):
        """Gets the control_input_parameters of this FrameworkControl.


        :return: The control_input_parameters of this FrameworkControl.
        :rtype: List
        """
        return self._control_input_parameters

    @control_input_parameters.setter
    def control_input_parameters(self, control_input_parameters):
        """Sets the control_input_parameters of this FrameworkControl.


        :param control_input_parameters: The control_input_parameters of this FrameworkControl.
        :type control_input_parameters: List
        """

        self._control_input_parameters = control_input_parameters

    @property
    def control_scope(self):
        """Gets the control_scope of this FrameworkControl.


        :return: The control_scope of this FrameworkControl.
        :rtype: FrameworkControlControlScope
        """
        return self._control_scope

    @control_scope.setter
    def control_scope(self, control_scope):
        """Sets the control_scope of this FrameworkControl.


        :param control_scope: The control_scope of this FrameworkControl.
        :type control_scope: FrameworkControlControlScope
        """

        self._control_scope = control_scope
