# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_rule_input_lifecycle import BackupRuleInputLifecycle
from openapi_server import util


class BackupRuleInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_name: str=None, target_backup_vault_name: str=None, schedule_expression: str=None, start_window_minutes: int=None, completion_window_minutes: int=None, lifecycle: BackupRuleInputLifecycle=None, recovery_point_tags: Dict=None, copy_actions: List=None, enable_continuous_backup: bool=None):
        """BackupRuleInput - a model defined in OpenAPI

        :param rule_name: The rule_name of this BackupRuleInput.
        :param target_backup_vault_name: The target_backup_vault_name of this BackupRuleInput.
        :param schedule_expression: The schedule_expression of this BackupRuleInput.
        :param start_window_minutes: The start_window_minutes of this BackupRuleInput.
        :param completion_window_minutes: The completion_window_minutes of this BackupRuleInput.
        :param lifecycle: The lifecycle of this BackupRuleInput.
        :param recovery_point_tags: The recovery_point_tags of this BackupRuleInput.
        :param copy_actions: The copy_actions of this BackupRuleInput.
        :param enable_continuous_backup: The enable_continuous_backup of this BackupRuleInput.
        """
        self.openapi_types = {
            'rule_name': str,
            'target_backup_vault_name': str,
            'schedule_expression': str,
            'start_window_minutes': int,
            'completion_window_minutes': int,
            'lifecycle': BackupRuleInputLifecycle,
            'recovery_point_tags': Dict,
            'copy_actions': List,
            'enable_continuous_backup': bool
        }

        self.attribute_map = {
            'rule_name': 'RuleName',
            'target_backup_vault_name': 'TargetBackupVaultName',
            'schedule_expression': 'ScheduleExpression',
            'start_window_minutes': 'StartWindowMinutes',
            'completion_window_minutes': 'CompletionWindowMinutes',
            'lifecycle': 'Lifecycle',
            'recovery_point_tags': 'RecoveryPointTags',
            'copy_actions': 'CopyActions',
            'enable_continuous_backup': 'EnableContinuousBackup'
        }

        self._rule_name = rule_name
        self._target_backup_vault_name = target_backup_vault_name
        self._schedule_expression = schedule_expression
        self._start_window_minutes = start_window_minutes
        self._completion_window_minutes = completion_window_minutes
        self._lifecycle = lifecycle
        self._recovery_point_tags = recovery_point_tags
        self._copy_actions = copy_actions
        self._enable_continuous_backup = enable_continuous_backup

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupRuleInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupRuleInput of this BackupRuleInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_name(self):
        """Gets the rule_name of this BackupRuleInput.


        :return: The rule_name of this BackupRuleInput.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this BackupRuleInput.


        :param rule_name: The rule_name of this BackupRuleInput.
        :type rule_name: str
        """
        if rule_name is None:
            raise ValueError("Invalid value for `rule_name`, must not be `None`")

        self._rule_name = rule_name

    @property
    def target_backup_vault_name(self):
        """Gets the target_backup_vault_name of this BackupRuleInput.


        :return: The target_backup_vault_name of this BackupRuleInput.
        :rtype: str
        """
        return self._target_backup_vault_name

    @target_backup_vault_name.setter
    def target_backup_vault_name(self, target_backup_vault_name):
        """Sets the target_backup_vault_name of this BackupRuleInput.


        :param target_backup_vault_name: The target_backup_vault_name of this BackupRuleInput.
        :type target_backup_vault_name: str
        """
        if target_backup_vault_name is None:
            raise ValueError("Invalid value for `target_backup_vault_name`, must not be `None`")

        self._target_backup_vault_name = target_backup_vault_name

    @property
    def schedule_expression(self):
        """Gets the schedule_expression of this BackupRuleInput.


        :return: The schedule_expression of this BackupRuleInput.
        :rtype: str
        """
        return self._schedule_expression

    @schedule_expression.setter
    def schedule_expression(self, schedule_expression):
        """Sets the schedule_expression of this BackupRuleInput.


        :param schedule_expression: The schedule_expression of this BackupRuleInput.
        :type schedule_expression: str
        """

        self._schedule_expression = schedule_expression

    @property
    def start_window_minutes(self):
        """Gets the start_window_minutes of this BackupRuleInput.


        :return: The start_window_minutes of this BackupRuleInput.
        :rtype: int
        """
        return self._start_window_minutes

    @start_window_minutes.setter
    def start_window_minutes(self, start_window_minutes):
        """Sets the start_window_minutes of this BackupRuleInput.


        :param start_window_minutes: The start_window_minutes of this BackupRuleInput.
        :type start_window_minutes: int
        """

        self._start_window_minutes = start_window_minutes

    @property
    def completion_window_minutes(self):
        """Gets the completion_window_minutes of this BackupRuleInput.


        :return: The completion_window_minutes of this BackupRuleInput.
        :rtype: int
        """
        return self._completion_window_minutes

    @completion_window_minutes.setter
    def completion_window_minutes(self, completion_window_minutes):
        """Sets the completion_window_minutes of this BackupRuleInput.


        :param completion_window_minutes: The completion_window_minutes of this BackupRuleInput.
        :type completion_window_minutes: int
        """

        self._completion_window_minutes = completion_window_minutes

    @property
    def lifecycle(self):
        """Gets the lifecycle of this BackupRuleInput.


        :return: The lifecycle of this BackupRuleInput.
        :rtype: BackupRuleInputLifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this BackupRuleInput.


        :param lifecycle: The lifecycle of this BackupRuleInput.
        :type lifecycle: BackupRuleInputLifecycle
        """

        self._lifecycle = lifecycle

    @property
    def recovery_point_tags(self):
        """Gets the recovery_point_tags of this BackupRuleInput.


        :return: The recovery_point_tags of this BackupRuleInput.
        :rtype: Dict
        """
        return self._recovery_point_tags

    @recovery_point_tags.setter
    def recovery_point_tags(self, recovery_point_tags):
        """Sets the recovery_point_tags of this BackupRuleInput.


        :param recovery_point_tags: The recovery_point_tags of this BackupRuleInput.
        :type recovery_point_tags: Dict
        """

        self._recovery_point_tags = recovery_point_tags

    @property
    def copy_actions(self):
        """Gets the copy_actions of this BackupRuleInput.


        :return: The copy_actions of this BackupRuleInput.
        :rtype: List
        """
        return self._copy_actions

    @copy_actions.setter
    def copy_actions(self, copy_actions):
        """Sets the copy_actions of this BackupRuleInput.


        :param copy_actions: The copy_actions of this BackupRuleInput.
        :type copy_actions: List
        """

        self._copy_actions = copy_actions

    @property
    def enable_continuous_backup(self):
        """Gets the enable_continuous_backup of this BackupRuleInput.


        :return: The enable_continuous_backup of this BackupRuleInput.
        :rtype: bool
        """
        return self._enable_continuous_backup

    @enable_continuous_backup.setter
    def enable_continuous_backup(self, enable_continuous_backup):
        """Sets the enable_continuous_backup of this BackupRuleInput.


        :param enable_continuous_backup: The enable_continuous_backup of this BackupRuleInput.
        :type enable_continuous_backup: bool
        """

        self._enable_continuous_backup = enable_continuous_backup
