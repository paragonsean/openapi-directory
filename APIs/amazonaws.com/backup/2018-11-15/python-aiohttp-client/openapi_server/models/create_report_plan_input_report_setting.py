# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateReportPlanInputReportSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_template: str=None, framework_arns: List=None, number_of_frameworks: int=None, accounts: List=None, organization_units: List=None, regions: List=None):
        """CreateReportPlanInputReportSetting - a model defined in OpenAPI

        :param report_template: The report_template of this CreateReportPlanInputReportSetting.
        :param framework_arns: The framework_arns of this CreateReportPlanInputReportSetting.
        :param number_of_frameworks: The number_of_frameworks of this CreateReportPlanInputReportSetting.
        :param accounts: The accounts of this CreateReportPlanInputReportSetting.
        :param organization_units: The organization_units of this CreateReportPlanInputReportSetting.
        :param regions: The regions of this CreateReportPlanInputReportSetting.
        """
        self.openapi_types = {
            'report_template': str,
            'framework_arns': List,
            'number_of_frameworks': int,
            'accounts': List,
            'organization_units': List,
            'regions': List
        }

        self.attribute_map = {
            'report_template': 'ReportTemplate',
            'framework_arns': 'FrameworkArns',
            'number_of_frameworks': 'NumberOfFrameworks',
            'accounts': 'Accounts',
            'organization_units': 'OrganizationUnits',
            'regions': 'Regions'
        }

        self._report_template = report_template
        self._framework_arns = framework_arns
        self._number_of_frameworks = number_of_frameworks
        self._accounts = accounts
        self._organization_units = organization_units
        self._regions = regions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateReportPlanInputReportSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateReportPlanInput_ReportSetting of this CreateReportPlanInputReportSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_template(self):
        """Gets the report_template of this CreateReportPlanInputReportSetting.


        :return: The report_template of this CreateReportPlanInputReportSetting.
        :rtype: str
        """
        return self._report_template

    @report_template.setter
    def report_template(self, report_template):
        """Sets the report_template of this CreateReportPlanInputReportSetting.


        :param report_template: The report_template of this CreateReportPlanInputReportSetting.
        :type report_template: str
        """
        if report_template is None:
            raise ValueError("Invalid value for `report_template`, must not be `None`")

        self._report_template = report_template

    @property
    def framework_arns(self):
        """Gets the framework_arns of this CreateReportPlanInputReportSetting.


        :return: The framework_arns of this CreateReportPlanInputReportSetting.
        :rtype: List
        """
        return self._framework_arns

    @framework_arns.setter
    def framework_arns(self, framework_arns):
        """Sets the framework_arns of this CreateReportPlanInputReportSetting.


        :param framework_arns: The framework_arns of this CreateReportPlanInputReportSetting.
        :type framework_arns: List
        """

        self._framework_arns = framework_arns

    @property
    def number_of_frameworks(self):
        """Gets the number_of_frameworks of this CreateReportPlanInputReportSetting.


        :return: The number_of_frameworks of this CreateReportPlanInputReportSetting.
        :rtype: int
        """
        return self._number_of_frameworks

    @number_of_frameworks.setter
    def number_of_frameworks(self, number_of_frameworks):
        """Sets the number_of_frameworks of this CreateReportPlanInputReportSetting.


        :param number_of_frameworks: The number_of_frameworks of this CreateReportPlanInputReportSetting.
        :type number_of_frameworks: int
        """

        self._number_of_frameworks = number_of_frameworks

    @property
    def accounts(self):
        """Gets the accounts of this CreateReportPlanInputReportSetting.


        :return: The accounts of this CreateReportPlanInputReportSetting.
        :rtype: List
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this CreateReportPlanInputReportSetting.


        :param accounts: The accounts of this CreateReportPlanInputReportSetting.
        :type accounts: List
        """

        self._accounts = accounts

    @property
    def organization_units(self):
        """Gets the organization_units of this CreateReportPlanInputReportSetting.


        :return: The organization_units of this CreateReportPlanInputReportSetting.
        :rtype: List
        """
        return self._organization_units

    @organization_units.setter
    def organization_units(self, organization_units):
        """Sets the organization_units of this CreateReportPlanInputReportSetting.


        :param organization_units: The organization_units of this CreateReportPlanInputReportSetting.
        :type organization_units: List
        """

        self._organization_units = organization_units

    @property
    def regions(self):
        """Gets the regions of this CreateReportPlanInputReportSetting.


        :return: The regions of this CreateReportPlanInputReportSetting.
        :rtype: List
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this CreateReportPlanInputReportSetting.


        :param regions: The regions of this CreateReportPlanInputReportSetting.
        :type regions: List
        """

        self._regions = regions
