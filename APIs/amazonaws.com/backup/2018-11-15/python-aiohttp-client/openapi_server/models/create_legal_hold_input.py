# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_legal_hold_output_recovery_point_selection import CreateLegalHoldOutputRecoveryPointSelection
from openapi_server import util


class CreateLegalHoldInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, description: str=None, idempotency_token: str=None, recovery_point_selection: CreateLegalHoldOutputRecoveryPointSelection=None, tags: Dict=None):
        """CreateLegalHoldInput - a model defined in OpenAPI

        :param title: The title of this CreateLegalHoldInput.
        :param description: The description of this CreateLegalHoldInput.
        :param idempotency_token: The idempotency_token of this CreateLegalHoldInput.
        :param recovery_point_selection: The recovery_point_selection of this CreateLegalHoldInput.
        :param tags: The tags of this CreateLegalHoldInput.
        """
        self.openapi_types = {
            'title': str,
            'description': str,
            'idempotency_token': str,
            'recovery_point_selection': CreateLegalHoldOutputRecoveryPointSelection,
            'tags': Dict
        }

        self.attribute_map = {
            'title': 'Title',
            'description': 'Description',
            'idempotency_token': 'IdempotencyToken',
            'recovery_point_selection': 'RecoveryPointSelection',
            'tags': 'Tags'
        }

        self._title = title
        self._description = description
        self._idempotency_token = idempotency_token
        self._recovery_point_selection = recovery_point_selection
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLegalHoldInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLegalHoldInput of this CreateLegalHoldInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this CreateLegalHoldInput.


        :return: The title of this CreateLegalHoldInput.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateLegalHoldInput.


        :param title: The title of this CreateLegalHoldInput.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def description(self):
        """Gets the description of this CreateLegalHoldInput.


        :return: The description of this CreateLegalHoldInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateLegalHoldInput.


        :param description: The description of this CreateLegalHoldInput.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateLegalHoldInput.


        :return: The idempotency_token of this CreateLegalHoldInput.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateLegalHoldInput.


        :param idempotency_token: The idempotency_token of this CreateLegalHoldInput.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token

    @property
    def recovery_point_selection(self):
        """Gets the recovery_point_selection of this CreateLegalHoldInput.


        :return: The recovery_point_selection of this CreateLegalHoldInput.
        :rtype: CreateLegalHoldOutputRecoveryPointSelection
        """
        return self._recovery_point_selection

    @recovery_point_selection.setter
    def recovery_point_selection(self, recovery_point_selection):
        """Sets the recovery_point_selection of this CreateLegalHoldInput.


        :param recovery_point_selection: The recovery_point_selection of this CreateLegalHoldInput.
        :type recovery_point_selection: CreateLegalHoldOutputRecoveryPointSelection
        """

        self._recovery_point_selection = recovery_point_selection

    @property
    def tags(self):
        """Gets the tags of this CreateLegalHoldInput.


        :return: The tags of this CreateLegalHoldInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLegalHoldInput.


        :param tags: The tags of this CreateLegalHoldInput.
        :type tags: Dict
        """

        self._tags = tags
