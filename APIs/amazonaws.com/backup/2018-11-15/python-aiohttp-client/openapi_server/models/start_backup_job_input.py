# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_backup_job_input_lifecycle import StartBackupJobInputLifecycle
from openapi_server import util


class StartBackupJobInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_vault_name: str=None, resource_arn: str=None, iam_role_arn: str=None, idempotency_token: str=None, start_window_minutes: int=None, complete_window_minutes: int=None, lifecycle: StartBackupJobInputLifecycle=None, recovery_point_tags: Dict=None, backup_options: Dict=None):
        """StartBackupJobInput - a model defined in OpenAPI

        :param backup_vault_name: The backup_vault_name of this StartBackupJobInput.
        :param resource_arn: The resource_arn of this StartBackupJobInput.
        :param iam_role_arn: The iam_role_arn of this StartBackupJobInput.
        :param idempotency_token: The idempotency_token of this StartBackupJobInput.
        :param start_window_minutes: The start_window_minutes of this StartBackupJobInput.
        :param complete_window_minutes: The complete_window_minutes of this StartBackupJobInput.
        :param lifecycle: The lifecycle of this StartBackupJobInput.
        :param recovery_point_tags: The recovery_point_tags of this StartBackupJobInput.
        :param backup_options: The backup_options of this StartBackupJobInput.
        """
        self.openapi_types = {
            'backup_vault_name': str,
            'resource_arn': str,
            'iam_role_arn': str,
            'idempotency_token': str,
            'start_window_minutes': int,
            'complete_window_minutes': int,
            'lifecycle': StartBackupJobInputLifecycle,
            'recovery_point_tags': Dict,
            'backup_options': Dict
        }

        self.attribute_map = {
            'backup_vault_name': 'BackupVaultName',
            'resource_arn': 'ResourceArn',
            'iam_role_arn': 'IamRoleArn',
            'idempotency_token': 'IdempotencyToken',
            'start_window_minutes': 'StartWindowMinutes',
            'complete_window_minutes': 'CompleteWindowMinutes',
            'lifecycle': 'Lifecycle',
            'recovery_point_tags': 'RecoveryPointTags',
            'backup_options': 'BackupOptions'
        }

        self._backup_vault_name = backup_vault_name
        self._resource_arn = resource_arn
        self._iam_role_arn = iam_role_arn
        self._idempotency_token = idempotency_token
        self._start_window_minutes = start_window_minutes
        self._complete_window_minutes = complete_window_minutes
        self._lifecycle = lifecycle
        self._recovery_point_tags = recovery_point_tags
        self._backup_options = backup_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartBackupJobInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartBackupJobInput of this StartBackupJobInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_vault_name(self):
        """Gets the backup_vault_name of this StartBackupJobInput.


        :return: The backup_vault_name of this StartBackupJobInput.
        :rtype: str
        """
        return self._backup_vault_name

    @backup_vault_name.setter
    def backup_vault_name(self, backup_vault_name):
        """Sets the backup_vault_name of this StartBackupJobInput.


        :param backup_vault_name: The backup_vault_name of this StartBackupJobInput.
        :type backup_vault_name: str
        """
        if backup_vault_name is None:
            raise ValueError("Invalid value for `backup_vault_name`, must not be `None`")

        self._backup_vault_name = backup_vault_name

    @property
    def resource_arn(self):
        """Gets the resource_arn of this StartBackupJobInput.


        :return: The resource_arn of this StartBackupJobInput.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this StartBackupJobInput.


        :param resource_arn: The resource_arn of this StartBackupJobInput.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")

        self._resource_arn = resource_arn

    @property
    def iam_role_arn(self):
        """Gets the iam_role_arn of this StartBackupJobInput.


        :return: The iam_role_arn of this StartBackupJobInput.
        :rtype: str
        """
        return self._iam_role_arn

    @iam_role_arn.setter
    def iam_role_arn(self, iam_role_arn):
        """Sets the iam_role_arn of this StartBackupJobInput.


        :param iam_role_arn: The iam_role_arn of this StartBackupJobInput.
        :type iam_role_arn: str
        """
        if iam_role_arn is None:
            raise ValueError("Invalid value for `iam_role_arn`, must not be `None`")

        self._iam_role_arn = iam_role_arn

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this StartBackupJobInput.


        :return: The idempotency_token of this StartBackupJobInput.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this StartBackupJobInput.


        :param idempotency_token: The idempotency_token of this StartBackupJobInput.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token

    @property
    def start_window_minutes(self):
        """Gets the start_window_minutes of this StartBackupJobInput.


        :return: The start_window_minutes of this StartBackupJobInput.
        :rtype: int
        """
        return self._start_window_minutes

    @start_window_minutes.setter
    def start_window_minutes(self, start_window_minutes):
        """Sets the start_window_minutes of this StartBackupJobInput.


        :param start_window_minutes: The start_window_minutes of this StartBackupJobInput.
        :type start_window_minutes: int
        """

        self._start_window_minutes = start_window_minutes

    @property
    def complete_window_minutes(self):
        """Gets the complete_window_minutes of this StartBackupJobInput.


        :return: The complete_window_minutes of this StartBackupJobInput.
        :rtype: int
        """
        return self._complete_window_minutes

    @complete_window_minutes.setter
    def complete_window_minutes(self, complete_window_minutes):
        """Sets the complete_window_minutes of this StartBackupJobInput.


        :param complete_window_minutes: The complete_window_minutes of this StartBackupJobInput.
        :type complete_window_minutes: int
        """

        self._complete_window_minutes = complete_window_minutes

    @property
    def lifecycle(self):
        """Gets the lifecycle of this StartBackupJobInput.


        :return: The lifecycle of this StartBackupJobInput.
        :rtype: StartBackupJobInputLifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this StartBackupJobInput.


        :param lifecycle: The lifecycle of this StartBackupJobInput.
        :type lifecycle: StartBackupJobInputLifecycle
        """

        self._lifecycle = lifecycle

    @property
    def recovery_point_tags(self):
        """Gets the recovery_point_tags of this StartBackupJobInput.


        :return: The recovery_point_tags of this StartBackupJobInput.
        :rtype: Dict
        """
        return self._recovery_point_tags

    @recovery_point_tags.setter
    def recovery_point_tags(self, recovery_point_tags):
        """Sets the recovery_point_tags of this StartBackupJobInput.


        :param recovery_point_tags: The recovery_point_tags of this StartBackupJobInput.
        :type recovery_point_tags: Dict
        """

        self._recovery_point_tags = recovery_point_tags

    @property
    def backup_options(self):
        """Gets the backup_options of this StartBackupJobInput.


        :return: The backup_options of this StartBackupJobInput.
        :rtype: Dict
        """
        return self._backup_options

    @backup_options.setter
    def backup_options(self, backup_options):
        """Sets the backup_options of this StartBackupJobInput.


        :param backup_options: The backup_options of this StartBackupJobInput.
        :type backup_options: Dict
        """

        self._backup_options = backup_options
