# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_backup_selection_output_backup_selection import GetBackupSelectionOutputBackupSelection
from openapi_server import util


class CreateBackupSelectionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_selection: GetBackupSelectionOutputBackupSelection=None, creator_request_id: str=None):
        """CreateBackupSelectionInput - a model defined in OpenAPI

        :param backup_selection: The backup_selection of this CreateBackupSelectionInput.
        :param creator_request_id: The creator_request_id of this CreateBackupSelectionInput.
        """
        self.openapi_types = {
            'backup_selection': GetBackupSelectionOutputBackupSelection,
            'creator_request_id': str
        }

        self.attribute_map = {
            'backup_selection': 'BackupSelection',
            'creator_request_id': 'CreatorRequestId'
        }

        self._backup_selection = backup_selection
        self._creator_request_id = creator_request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBackupSelectionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBackupSelectionInput of this CreateBackupSelectionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_selection(self):
        """Gets the backup_selection of this CreateBackupSelectionInput.


        :return: The backup_selection of this CreateBackupSelectionInput.
        :rtype: GetBackupSelectionOutputBackupSelection
        """
        return self._backup_selection

    @backup_selection.setter
    def backup_selection(self, backup_selection):
        """Sets the backup_selection of this CreateBackupSelectionInput.


        :param backup_selection: The backup_selection of this CreateBackupSelectionInput.
        :type backup_selection: GetBackupSelectionOutputBackupSelection
        """
        if backup_selection is None:
            raise ValueError("Invalid value for `backup_selection`, must not be `None`")

        self._backup_selection = backup_selection

    @property
    def creator_request_id(self):
        """Gets the creator_request_id of this CreateBackupSelectionInput.


        :return: The creator_request_id of this CreateBackupSelectionInput.
        :rtype: str
        """
        return self._creator_request_id

    @creator_request_id.setter
    def creator_request_id(self, creator_request_id):
        """Sets the creator_request_id of this CreateBackupSelectionInput.


        :param creator_request_id: The creator_request_id of this CreateBackupSelectionInput.
        :type creator_request_id: str
        """

        self._creator_request_id = creator_request_id
