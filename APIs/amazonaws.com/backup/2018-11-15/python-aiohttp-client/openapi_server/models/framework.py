# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Framework(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, framework_name: str=None, framework_arn: str=None, framework_description: str=None, number_of_controls: int=None, creation_time: datetime=None, deployment_status: str=None):
        """Framework - a model defined in OpenAPI

        :param framework_name: The framework_name of this Framework.
        :param framework_arn: The framework_arn of this Framework.
        :param framework_description: The framework_description of this Framework.
        :param number_of_controls: The number_of_controls of this Framework.
        :param creation_time: The creation_time of this Framework.
        :param deployment_status: The deployment_status of this Framework.
        """
        self.openapi_types = {
            'framework_name': str,
            'framework_arn': str,
            'framework_description': str,
            'number_of_controls': int,
            'creation_time': datetime,
            'deployment_status': str
        }

        self.attribute_map = {
            'framework_name': 'FrameworkName',
            'framework_arn': 'FrameworkArn',
            'framework_description': 'FrameworkDescription',
            'number_of_controls': 'NumberOfControls',
            'creation_time': 'CreationTime',
            'deployment_status': 'DeploymentStatus'
        }

        self._framework_name = framework_name
        self._framework_arn = framework_arn
        self._framework_description = framework_description
        self._number_of_controls = number_of_controls
        self._creation_time = creation_time
        self._deployment_status = deployment_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Framework':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Framework of this Framework.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def framework_name(self):
        """Gets the framework_name of this Framework.


        :return: The framework_name of this Framework.
        :rtype: str
        """
        return self._framework_name

    @framework_name.setter
    def framework_name(self, framework_name):
        """Sets the framework_name of this Framework.


        :param framework_name: The framework_name of this Framework.
        :type framework_name: str
        """

        self._framework_name = framework_name

    @property
    def framework_arn(self):
        """Gets the framework_arn of this Framework.


        :return: The framework_arn of this Framework.
        :rtype: str
        """
        return self._framework_arn

    @framework_arn.setter
    def framework_arn(self, framework_arn):
        """Sets the framework_arn of this Framework.


        :param framework_arn: The framework_arn of this Framework.
        :type framework_arn: str
        """

        self._framework_arn = framework_arn

    @property
    def framework_description(self):
        """Gets the framework_description of this Framework.


        :return: The framework_description of this Framework.
        :rtype: str
        """
        return self._framework_description

    @framework_description.setter
    def framework_description(self, framework_description):
        """Sets the framework_description of this Framework.


        :param framework_description: The framework_description of this Framework.
        :type framework_description: str
        """

        self._framework_description = framework_description

    @property
    def number_of_controls(self):
        """Gets the number_of_controls of this Framework.


        :return: The number_of_controls of this Framework.
        :rtype: int
        """
        return self._number_of_controls

    @number_of_controls.setter
    def number_of_controls(self, number_of_controls):
        """Sets the number_of_controls of this Framework.


        :param number_of_controls: The number_of_controls of this Framework.
        :type number_of_controls: int
        """

        self._number_of_controls = number_of_controls

    @property
    def creation_time(self):
        """Gets the creation_time of this Framework.


        :return: The creation_time of this Framework.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Framework.


        :param creation_time: The creation_time of this Framework.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def deployment_status(self):
        """Gets the deployment_status of this Framework.


        :return: The deployment_status of this Framework.
        :rtype: str
        """
        return self._deployment_status

    @deployment_status.setter
    def deployment_status(self, deployment_status):
        """Sets the deployment_status of this Framework.


        :param deployment_status: The deployment_status of this Framework.
        :type deployment_status: str
        """

        self._deployment_status = deployment_status
