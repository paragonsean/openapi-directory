# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateBackupPlanInputBackupPlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_plan_name: str=None, rules: List=None, advanced_backup_settings: List=None):
        """CreateBackupPlanInputBackupPlan - a model defined in OpenAPI

        :param backup_plan_name: The backup_plan_name of this CreateBackupPlanInputBackupPlan.
        :param rules: The rules of this CreateBackupPlanInputBackupPlan.
        :param advanced_backup_settings: The advanced_backup_settings of this CreateBackupPlanInputBackupPlan.
        """
        self.openapi_types = {
            'backup_plan_name': str,
            'rules': List,
            'advanced_backup_settings': List
        }

        self.attribute_map = {
            'backup_plan_name': 'BackupPlanName',
            'rules': 'Rules',
            'advanced_backup_settings': 'AdvancedBackupSettings'
        }

        self._backup_plan_name = backup_plan_name
        self._rules = rules
        self._advanced_backup_settings = advanced_backup_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBackupPlanInputBackupPlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBackupPlanInput_BackupPlan of this CreateBackupPlanInputBackupPlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_plan_name(self):
        """Gets the backup_plan_name of this CreateBackupPlanInputBackupPlan.


        :return: The backup_plan_name of this CreateBackupPlanInputBackupPlan.
        :rtype: str
        """
        return self._backup_plan_name

    @backup_plan_name.setter
    def backup_plan_name(self, backup_plan_name):
        """Sets the backup_plan_name of this CreateBackupPlanInputBackupPlan.


        :param backup_plan_name: The backup_plan_name of this CreateBackupPlanInputBackupPlan.
        :type backup_plan_name: str
        """
        if backup_plan_name is None:
            raise ValueError("Invalid value for `backup_plan_name`, must not be `None`")

        self._backup_plan_name = backup_plan_name

    @property
    def rules(self):
        """Gets the rules of this CreateBackupPlanInputBackupPlan.


        :return: The rules of this CreateBackupPlanInputBackupPlan.
        :rtype: List
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this CreateBackupPlanInputBackupPlan.


        :param rules: The rules of this CreateBackupPlanInputBackupPlan.
        :type rules: List
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules

    @property
    def advanced_backup_settings(self):
        """Gets the advanced_backup_settings of this CreateBackupPlanInputBackupPlan.


        :return: The advanced_backup_settings of this CreateBackupPlanInputBackupPlan.
        :rtype: List
        """
        return self._advanced_backup_settings

    @advanced_backup_settings.setter
    def advanced_backup_settings(self, advanced_backup_settings):
        """Sets the advanced_backup_settings of this CreateBackupPlanInputBackupPlan.


        :param advanced_backup_settings: The advanced_backup_settings of this CreateBackupPlanInputBackupPlan.
        :type advanced_backup_settings: List
        """

        self._advanced_backup_settings = advanced_backup_settings
