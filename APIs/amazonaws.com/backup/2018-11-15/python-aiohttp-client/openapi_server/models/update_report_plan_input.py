# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_report_plan_input_report_setting import CreateReportPlanInputReportSetting
from openapi_server.models.update_report_plan_input_report_delivery_channel import UpdateReportPlanInputReportDeliveryChannel
from openapi_server import util


class UpdateReportPlanInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_plan_description: str=None, report_delivery_channel: UpdateReportPlanInputReportDeliveryChannel=None, report_setting: CreateReportPlanInputReportSetting=None, idempotency_token: str=None):
        """UpdateReportPlanInput - a model defined in OpenAPI

        :param report_plan_description: The report_plan_description of this UpdateReportPlanInput.
        :param report_delivery_channel: The report_delivery_channel of this UpdateReportPlanInput.
        :param report_setting: The report_setting of this UpdateReportPlanInput.
        :param idempotency_token: The idempotency_token of this UpdateReportPlanInput.
        """
        self.openapi_types = {
            'report_plan_description': str,
            'report_delivery_channel': UpdateReportPlanInputReportDeliveryChannel,
            'report_setting': CreateReportPlanInputReportSetting,
            'idempotency_token': str
        }

        self.attribute_map = {
            'report_plan_description': 'ReportPlanDescription',
            'report_delivery_channel': 'ReportDeliveryChannel',
            'report_setting': 'ReportSetting',
            'idempotency_token': 'IdempotencyToken'
        }

        self._report_plan_description = report_plan_description
        self._report_delivery_channel = report_delivery_channel
        self._report_setting = report_setting
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateReportPlanInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateReportPlanInput of this UpdateReportPlanInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_plan_description(self):
        """Gets the report_plan_description of this UpdateReportPlanInput.


        :return: The report_plan_description of this UpdateReportPlanInput.
        :rtype: str
        """
        return self._report_plan_description

    @report_plan_description.setter
    def report_plan_description(self, report_plan_description):
        """Sets the report_plan_description of this UpdateReportPlanInput.


        :param report_plan_description: The report_plan_description of this UpdateReportPlanInput.
        :type report_plan_description: str
        """

        self._report_plan_description = report_plan_description

    @property
    def report_delivery_channel(self):
        """Gets the report_delivery_channel of this UpdateReportPlanInput.


        :return: The report_delivery_channel of this UpdateReportPlanInput.
        :rtype: UpdateReportPlanInputReportDeliveryChannel
        """
        return self._report_delivery_channel

    @report_delivery_channel.setter
    def report_delivery_channel(self, report_delivery_channel):
        """Sets the report_delivery_channel of this UpdateReportPlanInput.


        :param report_delivery_channel: The report_delivery_channel of this UpdateReportPlanInput.
        :type report_delivery_channel: UpdateReportPlanInputReportDeliveryChannel
        """

        self._report_delivery_channel = report_delivery_channel

    @property
    def report_setting(self):
        """Gets the report_setting of this UpdateReportPlanInput.


        :return: The report_setting of this UpdateReportPlanInput.
        :rtype: CreateReportPlanInputReportSetting
        """
        return self._report_setting

    @report_setting.setter
    def report_setting(self, report_setting):
        """Sets the report_setting of this UpdateReportPlanInput.


        :param report_setting: The report_setting of this UpdateReportPlanInput.
        :type report_setting: CreateReportPlanInputReportSetting
        """

        self._report_setting = report_setting

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this UpdateReportPlanInput.


        :return: The idempotency_token of this UpdateReportPlanInput.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this UpdateReportPlanInput.


        :param idempotency_token: The idempotency_token of this UpdateReportPlanInput.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token
