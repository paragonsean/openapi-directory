# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DateRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_date: datetime=None, to_date: datetime=None):
        """DateRange - a model defined in OpenAPI

        :param from_date: The from_date of this DateRange.
        :param to_date: The to_date of this DateRange.
        """
        self.openapi_types = {
            'from_date': datetime,
            'to_date': datetime
        }

        self.attribute_map = {
            'from_date': 'FromDate',
            'to_date': 'ToDate'
        }

        self._from_date = from_date
        self._to_date = to_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DateRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DateRange of this DateRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_date(self):
        """Gets the from_date of this DateRange.


        :return: The from_date of this DateRange.
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this DateRange.


        :param from_date: The from_date of this DateRange.
        :type from_date: datetime
        """
        if from_date is None:
            raise ValueError("Invalid value for `from_date`, must not be `None`")

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this DateRange.


        :return: The to_date of this DateRange.
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this DateRange.


        :param to_date: The to_date of this DateRange.
        :type to_date: datetime
        """
        if to_date is None:
            raise ValueError("Invalid value for `to_date`, must not be `None`")

        self._to_date = to_date
