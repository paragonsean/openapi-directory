# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition_type import ConditionType
from openapi_server import util


class Condition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition_type: ConditionType=None, condition_key: str=None, condition_value: str=None):
        """Condition - a model defined in OpenAPI

        :param condition_type: The condition_type of this Condition.
        :param condition_key: The condition_key of this Condition.
        :param condition_value: The condition_value of this Condition.
        """
        self.openapi_types = {
            'condition_type': ConditionType,
            'condition_key': str,
            'condition_value': str
        }

        self.attribute_map = {
            'condition_type': 'ConditionType',
            'condition_key': 'ConditionKey',
            'condition_value': 'ConditionValue'
        }

        self._condition_type = condition_type
        self._condition_key = condition_key
        self._condition_value = condition_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Condition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Condition of this Condition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition_type(self):
        """Gets the condition_type of this Condition.


        :return: The condition_type of this Condition.
        :rtype: ConditionType
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """Sets the condition_type of this Condition.


        :param condition_type: The condition_type of this Condition.
        :type condition_type: ConditionType
        """
        if condition_type is None:
            raise ValueError("Invalid value for `condition_type`, must not be `None`")

        self._condition_type = condition_type

    @property
    def condition_key(self):
        """Gets the condition_key of this Condition.


        :return: The condition_key of this Condition.
        :rtype: str
        """
        return self._condition_key

    @condition_key.setter
    def condition_key(self, condition_key):
        """Sets the condition_key of this Condition.


        :param condition_key: The condition_key of this Condition.
        :type condition_key: str
        """
        if condition_key is None:
            raise ValueError("Invalid value for `condition_key`, must not be `None`")

        self._condition_key = condition_key

    @property
    def condition_value(self):
        """Gets the condition_value of this Condition.


        :return: The condition_value of this Condition.
        :rtype: str
        """
        return self._condition_value

    @condition_value.setter
    def condition_value(self, condition_value):
        """Sets the condition_value of this Condition.


        :param condition_value: The condition_value of this Condition.
        :type condition_value: str
        """
        if condition_value is None:
            raise ValueError("Invalid value for `condition_value`, must not be `None`")

        self._condition_value = condition_value
