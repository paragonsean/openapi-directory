# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateFrameworkInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, framework_name: str=None, framework_description: str=None, framework_controls: List=None, idempotency_token: str=None, framework_tags: Dict=None):
        """CreateFrameworkInput - a model defined in OpenAPI

        :param framework_name: The framework_name of this CreateFrameworkInput.
        :param framework_description: The framework_description of this CreateFrameworkInput.
        :param framework_controls: The framework_controls of this CreateFrameworkInput.
        :param idempotency_token: The idempotency_token of this CreateFrameworkInput.
        :param framework_tags: The framework_tags of this CreateFrameworkInput.
        """
        self.openapi_types = {
            'framework_name': str,
            'framework_description': str,
            'framework_controls': List,
            'idempotency_token': str,
            'framework_tags': Dict
        }

        self.attribute_map = {
            'framework_name': 'FrameworkName',
            'framework_description': 'FrameworkDescription',
            'framework_controls': 'FrameworkControls',
            'idempotency_token': 'IdempotencyToken',
            'framework_tags': 'FrameworkTags'
        }

        self._framework_name = framework_name
        self._framework_description = framework_description
        self._framework_controls = framework_controls
        self._idempotency_token = idempotency_token
        self._framework_tags = framework_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFrameworkInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFrameworkInput of this CreateFrameworkInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def framework_name(self):
        """Gets the framework_name of this CreateFrameworkInput.


        :return: The framework_name of this CreateFrameworkInput.
        :rtype: str
        """
        return self._framework_name

    @framework_name.setter
    def framework_name(self, framework_name):
        """Sets the framework_name of this CreateFrameworkInput.


        :param framework_name: The framework_name of this CreateFrameworkInput.
        :type framework_name: str
        """
        if framework_name is None:
            raise ValueError("Invalid value for `framework_name`, must not be `None`")

        self._framework_name = framework_name

    @property
    def framework_description(self):
        """Gets the framework_description of this CreateFrameworkInput.


        :return: The framework_description of this CreateFrameworkInput.
        :rtype: str
        """
        return self._framework_description

    @framework_description.setter
    def framework_description(self, framework_description):
        """Sets the framework_description of this CreateFrameworkInput.


        :param framework_description: The framework_description of this CreateFrameworkInput.
        :type framework_description: str
        """

        self._framework_description = framework_description

    @property
    def framework_controls(self):
        """Gets the framework_controls of this CreateFrameworkInput.


        :return: The framework_controls of this CreateFrameworkInput.
        :rtype: List
        """
        return self._framework_controls

    @framework_controls.setter
    def framework_controls(self, framework_controls):
        """Sets the framework_controls of this CreateFrameworkInput.


        :param framework_controls: The framework_controls of this CreateFrameworkInput.
        :type framework_controls: List
        """
        if framework_controls is None:
            raise ValueError("Invalid value for `framework_controls`, must not be `None`")

        self._framework_controls = framework_controls

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateFrameworkInput.


        :return: The idempotency_token of this CreateFrameworkInput.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateFrameworkInput.


        :param idempotency_token: The idempotency_token of this CreateFrameworkInput.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token

    @property
    def framework_tags(self):
        """Gets the framework_tags of this CreateFrameworkInput.


        :return: The framework_tags of this CreateFrameworkInput.
        :rtype: Dict
        """
        return self._framework_tags

    @framework_tags.setter
    def framework_tags(self, framework_tags):
        """Sets the framework_tags of this CreateFrameworkInput.


        :param framework_tags: The framework_tags of this CreateFrameworkInput.
        :type framework_tags: Dict
        """

        self._framework_tags = framework_tags
