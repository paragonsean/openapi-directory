# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.framework_control import FrameworkControl
import re
from openapi_server import util


class CreateFrameworkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, framework_name: str=None, framework_description: str=None, framework_controls: List[FrameworkControl]=None, idempotency_token: str=None, framework_tags: Dict[str, str]=None):
        """CreateFrameworkRequest - a model defined in OpenAPI

        :param framework_name: The framework_name of this CreateFrameworkRequest.
        :param framework_description: The framework_description of this CreateFrameworkRequest.
        :param framework_controls: The framework_controls of this CreateFrameworkRequest.
        :param idempotency_token: The idempotency_token of this CreateFrameworkRequest.
        :param framework_tags: The framework_tags of this CreateFrameworkRequest.
        """
        self.openapi_types = {
            'framework_name': str,
            'framework_description': str,
            'framework_controls': List[FrameworkControl],
            'idempotency_token': str,
            'framework_tags': Dict[str, str]
        }

        self.attribute_map = {
            'framework_name': 'FrameworkName',
            'framework_description': 'FrameworkDescription',
            'framework_controls': 'FrameworkControls',
            'idempotency_token': 'IdempotencyToken',
            'framework_tags': 'FrameworkTags'
        }

        self._framework_name = framework_name
        self._framework_description = framework_description
        self._framework_controls = framework_controls
        self._idempotency_token = idempotency_token
        self._framework_tags = framework_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFrameworkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFramework_request of this CreateFrameworkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def framework_name(self):
        """Gets the framework_name of this CreateFrameworkRequest.

        The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).

        :return: The framework_name of this CreateFrameworkRequest.
        :rtype: str
        """
        return self._framework_name

    @framework_name.setter
    def framework_name(self, framework_name):
        """Sets the framework_name of this CreateFrameworkRequest.

        The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).

        :param framework_name: The framework_name of this CreateFrameworkRequest.
        :type framework_name: str
        """
        if framework_name is None:
            raise ValueError("Invalid value for `framework_name`, must not be `None`")
        if framework_name is not None and len(framework_name) > 256:
            raise ValueError("Invalid value for `framework_name`, length must be less than or equal to `256`")
        if framework_name is not None and len(framework_name) < 1:
            raise ValueError("Invalid value for `framework_name`, length must be greater than or equal to `1`")
        if framework_name is not None and not re.search(r'[a-zA-Z][_a-zA-Z0-9]*', framework_name):
            raise ValueError("Invalid value for `framework_name`, must be a follow pattern or equal to `/[a-zA-Z][_a-zA-Z0-9]*/`")

        self._framework_name = framework_name

    @property
    def framework_description(self):
        """Gets the framework_description of this CreateFrameworkRequest.

        An optional description of the framework with a maximum of 1,024 characters.

        :return: The framework_description of this CreateFrameworkRequest.
        :rtype: str
        """
        return self._framework_description

    @framework_description.setter
    def framework_description(self, framework_description):
        """Sets the framework_description of this CreateFrameworkRequest.

        An optional description of the framework with a maximum of 1,024 characters.

        :param framework_description: The framework_description of this CreateFrameworkRequest.
        :type framework_description: str
        """
        if framework_description is not None and len(framework_description) > 1024:
            raise ValueError("Invalid value for `framework_description`, length must be less than or equal to `1024`")
        if framework_description is not None and len(framework_description) < 0:
            raise ValueError("Invalid value for `framework_description`, length must be greater than or equal to `0`")
        if framework_description is not None and not re.search(r'.*\S.*', framework_description):
            raise ValueError("Invalid value for `framework_description`, must be a follow pattern or equal to `/.*\S.*/`")

        self._framework_description = framework_description

    @property
    def framework_controls(self):
        """Gets the framework_controls of this CreateFrameworkRequest.

        A list of the controls that make up the framework. Each control in the list has a name, input parameters, and scope.

        :return: The framework_controls of this CreateFrameworkRequest.
        :rtype: List[FrameworkControl]
        """
        return self._framework_controls

    @framework_controls.setter
    def framework_controls(self, framework_controls):
        """Sets the framework_controls of this CreateFrameworkRequest.

        A list of the controls that make up the framework. Each control in the list has a name, input parameters, and scope.

        :param framework_controls: The framework_controls of this CreateFrameworkRequest.
        :type framework_controls: List[FrameworkControl]
        """
        if framework_controls is None:
            raise ValueError("Invalid value for `framework_controls`, must not be `None`")

        self._framework_controls = framework_controls

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateFrameworkRequest.

        A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>CreateFrameworkInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.

        :return: The idempotency_token of this CreateFrameworkRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateFrameworkRequest.

        A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>CreateFrameworkInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.

        :param idempotency_token: The idempotency_token of this CreateFrameworkRequest.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token

    @property
    def framework_tags(self):
        """Gets the framework_tags of this CreateFrameworkRequest.

        Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.

        :return: The framework_tags of this CreateFrameworkRequest.
        :rtype: Dict[str, str]
        """
        return self._framework_tags

    @framework_tags.setter
    def framework_tags(self, framework_tags):
        """Sets the framework_tags of this CreateFrameworkRequest.

        Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.

        :param framework_tags: The framework_tags of this CreateFrameworkRequest.
        :type framework_tags: Dict[str, str]
        """

        self._framework_tags = framework_tags
