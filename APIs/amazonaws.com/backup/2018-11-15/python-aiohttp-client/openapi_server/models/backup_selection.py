# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_backup_selection_request_backup_selection_conditions import CreateBackupSelectionRequestBackupSelectionConditions
from openapi_server import util


class BackupSelection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, selection_name: str=None, iam_role_arn: str=None, resources: List=None, list_of_tags: List=None, not_resources: List=None, conditions: CreateBackupSelectionRequestBackupSelectionConditions=None):
        """BackupSelection - a model defined in OpenAPI

        :param selection_name: The selection_name of this BackupSelection.
        :param iam_role_arn: The iam_role_arn of this BackupSelection.
        :param resources: The resources of this BackupSelection.
        :param list_of_tags: The list_of_tags of this BackupSelection.
        :param not_resources: The not_resources of this BackupSelection.
        :param conditions: The conditions of this BackupSelection.
        """
        self.openapi_types = {
            'selection_name': str,
            'iam_role_arn': str,
            'resources': List,
            'list_of_tags': List,
            'not_resources': List,
            'conditions': CreateBackupSelectionRequestBackupSelectionConditions
        }

        self.attribute_map = {
            'selection_name': 'SelectionName',
            'iam_role_arn': 'IamRoleArn',
            'resources': 'Resources',
            'list_of_tags': 'ListOfTags',
            'not_resources': 'NotResources',
            'conditions': 'Conditions'
        }

        self._selection_name = selection_name
        self._iam_role_arn = iam_role_arn
        self._resources = resources
        self._list_of_tags = list_of_tags
        self._not_resources = not_resources
        self._conditions = conditions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupSelection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupSelection of this BackupSelection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def selection_name(self):
        """Gets the selection_name of this BackupSelection.


        :return: The selection_name of this BackupSelection.
        :rtype: str
        """
        return self._selection_name

    @selection_name.setter
    def selection_name(self, selection_name):
        """Sets the selection_name of this BackupSelection.


        :param selection_name: The selection_name of this BackupSelection.
        :type selection_name: str
        """
        if selection_name is None:
            raise ValueError("Invalid value for `selection_name`, must not be `None`")

        self._selection_name = selection_name

    @property
    def iam_role_arn(self):
        """Gets the iam_role_arn of this BackupSelection.


        :return: The iam_role_arn of this BackupSelection.
        :rtype: str
        """
        return self._iam_role_arn

    @iam_role_arn.setter
    def iam_role_arn(self, iam_role_arn):
        """Sets the iam_role_arn of this BackupSelection.


        :param iam_role_arn: The iam_role_arn of this BackupSelection.
        :type iam_role_arn: str
        """
        if iam_role_arn is None:
            raise ValueError("Invalid value for `iam_role_arn`, must not be `None`")

        self._iam_role_arn = iam_role_arn

    @property
    def resources(self):
        """Gets the resources of this BackupSelection.


        :return: The resources of this BackupSelection.
        :rtype: List
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this BackupSelection.


        :param resources: The resources of this BackupSelection.
        :type resources: List
        """

        self._resources = resources

    @property
    def list_of_tags(self):
        """Gets the list_of_tags of this BackupSelection.


        :return: The list_of_tags of this BackupSelection.
        :rtype: List
        """
        return self._list_of_tags

    @list_of_tags.setter
    def list_of_tags(self, list_of_tags):
        """Sets the list_of_tags of this BackupSelection.


        :param list_of_tags: The list_of_tags of this BackupSelection.
        :type list_of_tags: List
        """

        self._list_of_tags = list_of_tags

    @property
    def not_resources(self):
        """Gets the not_resources of this BackupSelection.


        :return: The not_resources of this BackupSelection.
        :rtype: List
        """
        return self._not_resources

    @not_resources.setter
    def not_resources(self, not_resources):
        """Sets the not_resources of this BackupSelection.


        :param not_resources: The not_resources of this BackupSelection.
        :type not_resources: List
        """

        self._not_resources = not_resources

    @property
    def conditions(self):
        """Gets the conditions of this BackupSelection.


        :return: The conditions of this BackupSelection.
        :rtype: CreateBackupSelectionRequestBackupSelectionConditions
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this BackupSelection.


        :param conditions: The conditions of this BackupSelection.
        :type conditions: CreateBackupSelectionRequestBackupSelectionConditions
        """

        self._conditions = conditions
