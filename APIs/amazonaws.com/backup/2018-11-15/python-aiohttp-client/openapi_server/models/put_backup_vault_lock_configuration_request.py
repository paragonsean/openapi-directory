# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutBackupVaultLockConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_retention_days: int=None, max_retention_days: int=None, changeable_for_days: int=None):
        """PutBackupVaultLockConfigurationRequest - a model defined in OpenAPI

        :param min_retention_days: The min_retention_days of this PutBackupVaultLockConfigurationRequest.
        :param max_retention_days: The max_retention_days of this PutBackupVaultLockConfigurationRequest.
        :param changeable_for_days: The changeable_for_days of this PutBackupVaultLockConfigurationRequest.
        """
        self.openapi_types = {
            'min_retention_days': int,
            'max_retention_days': int,
            'changeable_for_days': int
        }

        self.attribute_map = {
            'min_retention_days': 'MinRetentionDays',
            'max_retention_days': 'MaxRetentionDays',
            'changeable_for_days': 'ChangeableForDays'
        }

        self._min_retention_days = min_retention_days
        self._max_retention_days = max_retention_days
        self._changeable_for_days = changeable_for_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutBackupVaultLockConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutBackupVaultLockConfiguration_request of this PutBackupVaultLockConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_retention_days(self):
        """Gets the min_retention_days of this PutBackupVaultLockConfigurationRequest.

        <p>The Backup Vault Lock configuration that specifies the minimum retention period that the vault retains its recovery points. This setting can be useful if, for example, your organization's policies require you to retain certain data for at least seven years (2555 days).</p> <p>If this parameter is not specified, Vault Lock will not enforce a minimum retention period.</p> <p>If this parameter is specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or longer than the minimum retention period. If the job's retention period is shorter than that minimum retention period, then the vault fails that backup or copy job, and you should either modify your lifecycle settings or use a different vault. The shortest minimum retention period you can specify is 1 day. Recovery points already saved in the vault prior to Vault Lock are not affected.</p>

        :return: The min_retention_days of this PutBackupVaultLockConfigurationRequest.
        :rtype: int
        """
        return self._min_retention_days

    @min_retention_days.setter
    def min_retention_days(self, min_retention_days):
        """Sets the min_retention_days of this PutBackupVaultLockConfigurationRequest.

        <p>The Backup Vault Lock configuration that specifies the minimum retention period that the vault retains its recovery points. This setting can be useful if, for example, your organization's policies require you to retain certain data for at least seven years (2555 days).</p> <p>If this parameter is not specified, Vault Lock will not enforce a minimum retention period.</p> <p>If this parameter is specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or longer than the minimum retention period. If the job's retention period is shorter than that minimum retention period, then the vault fails that backup or copy job, and you should either modify your lifecycle settings or use a different vault. The shortest minimum retention period you can specify is 1 day. Recovery points already saved in the vault prior to Vault Lock are not affected.</p>

        :param min_retention_days: The min_retention_days of this PutBackupVaultLockConfigurationRequest.
        :type min_retention_days: int
        """

        self._min_retention_days = min_retention_days

    @property
    def max_retention_days(self):
        """Gets the max_retention_days of this PutBackupVaultLockConfigurationRequest.

        <p>The Backup Vault Lock configuration that specifies the maximum retention period that the vault retains its recovery points. This setting can be useful if, for example, your organization's policies require you to destroy certain data after retaining it for four years (1460 days).</p> <p>If this parameter is not included, Vault Lock does not enforce a maximum retention period on the recovery points in the vault. If this parameter is included without a value, Vault Lock will not enforce a maximum retention period.</p> <p>If this parameter is specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or shorter than the maximum retention period. If the job's retention period is longer than that maximum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. The longest maximum retention period you can specify is 36500 days (approximately 100 years). Recovery points already saved in the vault prior to Vault Lock are not affected.</p>

        :return: The max_retention_days of this PutBackupVaultLockConfigurationRequest.
        :rtype: int
        """
        return self._max_retention_days

    @max_retention_days.setter
    def max_retention_days(self, max_retention_days):
        """Sets the max_retention_days of this PutBackupVaultLockConfigurationRequest.

        <p>The Backup Vault Lock configuration that specifies the maximum retention period that the vault retains its recovery points. This setting can be useful if, for example, your organization's policies require you to destroy certain data after retaining it for four years (1460 days).</p> <p>If this parameter is not included, Vault Lock does not enforce a maximum retention period on the recovery points in the vault. If this parameter is included without a value, Vault Lock will not enforce a maximum retention period.</p> <p>If this parameter is specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or shorter than the maximum retention period. If the job's retention period is longer than that maximum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. The longest maximum retention period you can specify is 36500 days (approximately 100 years). Recovery points already saved in the vault prior to Vault Lock are not affected.</p>

        :param max_retention_days: The max_retention_days of this PutBackupVaultLockConfigurationRequest.
        :type max_retention_days: int
        """

        self._max_retention_days = max_retention_days

    @property
    def changeable_for_days(self):
        """Gets the changeable_for_days of this PutBackupVaultLockConfigurationRequest.

        <p>The Backup Vault Lock configuration that specifies the number of days before the lock date. For example, setting <code>ChangeableForDays</code> to 30 on Jan. 1, 2022 at 8pm UTC will set the lock date to Jan. 31, 2022 at 8pm UTC.</p> <p>Backup enforces a 72-hour cooling-off period before Vault Lock takes effect and becomes immutable. Therefore, you must set <code>ChangeableForDays</code> to 3 or greater.</p> <p>Before the lock date, you can delete Vault Lock from the vault using <code>DeleteBackupVaultLockConfiguration</code> or change the Vault Lock configuration using <code>PutBackupVaultLockConfiguration</code>. On and after the lock date, the Vault Lock becomes immutable and cannot be changed or deleted.</p> <p>If this parameter is not specified, you can delete Vault Lock from the vault using <code>DeleteBackupVaultLockConfiguration</code> or change the Vault Lock configuration using <code>PutBackupVaultLockConfiguration</code> at any time.</p>

        :return: The changeable_for_days of this PutBackupVaultLockConfigurationRequest.
        :rtype: int
        """
        return self._changeable_for_days

    @changeable_for_days.setter
    def changeable_for_days(self, changeable_for_days):
        """Sets the changeable_for_days of this PutBackupVaultLockConfigurationRequest.

        <p>The Backup Vault Lock configuration that specifies the number of days before the lock date. For example, setting <code>ChangeableForDays</code> to 30 on Jan. 1, 2022 at 8pm UTC will set the lock date to Jan. 31, 2022 at 8pm UTC.</p> <p>Backup enforces a 72-hour cooling-off period before Vault Lock takes effect and becomes immutable. Therefore, you must set <code>ChangeableForDays</code> to 3 or greater.</p> <p>Before the lock date, you can delete Vault Lock from the vault using <code>DeleteBackupVaultLockConfiguration</code> or change the Vault Lock configuration using <code>PutBackupVaultLockConfiguration</code>. On and after the lock date, the Vault Lock becomes immutable and cannot be changed or deleted.</p> <p>If this parameter is not specified, you can delete Vault Lock from the vault using <code>DeleteBackupVaultLockConfiguration</code> or change the Vault Lock configuration using <code>PutBackupVaultLockConfiguration</code> at any time.</p>

        :param changeable_for_days: The changeable_for_days of this PutBackupVaultLockConfigurationRequest.
        :type changeable_for_days: int
        """

        self._changeable_for_days = changeable_for_days
