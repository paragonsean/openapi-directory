# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_report_plan_request_report_delivery_channel import CreateReportPlanRequestReportDeliveryChannel
from openapi_server.models.create_report_plan_request_report_setting import CreateReportPlanRequestReportSetting
import re
from openapi_server import util


class CreateReportPlanRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_plan_name: str=None, report_plan_description: str=None, report_delivery_channel: CreateReportPlanRequestReportDeliveryChannel=None, report_setting: CreateReportPlanRequestReportSetting=None, report_plan_tags: Dict[str, str]=None, idempotency_token: str=None):
        """CreateReportPlanRequest - a model defined in OpenAPI

        :param report_plan_name: The report_plan_name of this CreateReportPlanRequest.
        :param report_plan_description: The report_plan_description of this CreateReportPlanRequest.
        :param report_delivery_channel: The report_delivery_channel of this CreateReportPlanRequest.
        :param report_setting: The report_setting of this CreateReportPlanRequest.
        :param report_plan_tags: The report_plan_tags of this CreateReportPlanRequest.
        :param idempotency_token: The idempotency_token of this CreateReportPlanRequest.
        """
        self.openapi_types = {
            'report_plan_name': str,
            'report_plan_description': str,
            'report_delivery_channel': CreateReportPlanRequestReportDeliveryChannel,
            'report_setting': CreateReportPlanRequestReportSetting,
            'report_plan_tags': Dict[str, str],
            'idempotency_token': str
        }

        self.attribute_map = {
            'report_plan_name': 'ReportPlanName',
            'report_plan_description': 'ReportPlanDescription',
            'report_delivery_channel': 'ReportDeliveryChannel',
            'report_setting': 'ReportSetting',
            'report_plan_tags': 'ReportPlanTags',
            'idempotency_token': 'IdempotencyToken'
        }

        self._report_plan_name = report_plan_name
        self._report_plan_description = report_plan_description
        self._report_delivery_channel = report_delivery_channel
        self._report_setting = report_setting
        self._report_plan_tags = report_plan_tags
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateReportPlanRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateReportPlan_request of this CreateReportPlanRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_plan_name(self):
        """Gets the report_plan_name of this CreateReportPlanRequest.

        The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).

        :return: The report_plan_name of this CreateReportPlanRequest.
        :rtype: str
        """
        return self._report_plan_name

    @report_plan_name.setter
    def report_plan_name(self, report_plan_name):
        """Sets the report_plan_name of this CreateReportPlanRequest.

        The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).

        :param report_plan_name: The report_plan_name of this CreateReportPlanRequest.
        :type report_plan_name: str
        """
        if report_plan_name is None:
            raise ValueError("Invalid value for `report_plan_name`, must not be `None`")
        if report_plan_name is not None and len(report_plan_name) > 256:
            raise ValueError("Invalid value for `report_plan_name`, length must be less than or equal to `256`")
        if report_plan_name is not None and len(report_plan_name) < 1:
            raise ValueError("Invalid value for `report_plan_name`, length must be greater than or equal to `1`")
        if report_plan_name is not None and not re.search(r'[a-zA-Z][_a-zA-Z0-9]*', report_plan_name):
            raise ValueError("Invalid value for `report_plan_name`, must be a follow pattern or equal to `/[a-zA-Z][_a-zA-Z0-9]*/`")

        self._report_plan_name = report_plan_name

    @property
    def report_plan_description(self):
        """Gets the report_plan_description of this CreateReportPlanRequest.

        An optional description of the report plan with a maximum of 1,024 characters.

        :return: The report_plan_description of this CreateReportPlanRequest.
        :rtype: str
        """
        return self._report_plan_description

    @report_plan_description.setter
    def report_plan_description(self, report_plan_description):
        """Sets the report_plan_description of this CreateReportPlanRequest.

        An optional description of the report plan with a maximum of 1,024 characters.

        :param report_plan_description: The report_plan_description of this CreateReportPlanRequest.
        :type report_plan_description: str
        """
        if report_plan_description is not None and len(report_plan_description) > 1024:
            raise ValueError("Invalid value for `report_plan_description`, length must be less than or equal to `1024`")
        if report_plan_description is not None and len(report_plan_description) < 0:
            raise ValueError("Invalid value for `report_plan_description`, length must be greater than or equal to `0`")
        if report_plan_description is not None and not re.search(r'.*\S.*', report_plan_description):
            raise ValueError("Invalid value for `report_plan_description`, must be a follow pattern or equal to `/.*\S.*/`")

        self._report_plan_description = report_plan_description

    @property
    def report_delivery_channel(self):
        """Gets the report_delivery_channel of this CreateReportPlanRequest.


        :return: The report_delivery_channel of this CreateReportPlanRequest.
        :rtype: CreateReportPlanRequestReportDeliveryChannel
        """
        return self._report_delivery_channel

    @report_delivery_channel.setter
    def report_delivery_channel(self, report_delivery_channel):
        """Sets the report_delivery_channel of this CreateReportPlanRequest.


        :param report_delivery_channel: The report_delivery_channel of this CreateReportPlanRequest.
        :type report_delivery_channel: CreateReportPlanRequestReportDeliveryChannel
        """
        if report_delivery_channel is None:
            raise ValueError("Invalid value for `report_delivery_channel`, must not be `None`")

        self._report_delivery_channel = report_delivery_channel

    @property
    def report_setting(self):
        """Gets the report_setting of this CreateReportPlanRequest.


        :return: The report_setting of this CreateReportPlanRequest.
        :rtype: CreateReportPlanRequestReportSetting
        """
        return self._report_setting

    @report_setting.setter
    def report_setting(self, report_setting):
        """Sets the report_setting of this CreateReportPlanRequest.


        :param report_setting: The report_setting of this CreateReportPlanRequest.
        :type report_setting: CreateReportPlanRequestReportSetting
        """
        if report_setting is None:
            raise ValueError("Invalid value for `report_setting`, must not be `None`")

        self._report_setting = report_setting

    @property
    def report_plan_tags(self):
        """Gets the report_plan_tags of this CreateReportPlanRequest.

        Metadata that you can assign to help organize the report plans that you create. Each tag is a key-value pair.

        :return: The report_plan_tags of this CreateReportPlanRequest.
        :rtype: Dict[str, str]
        """
        return self._report_plan_tags

    @report_plan_tags.setter
    def report_plan_tags(self, report_plan_tags):
        """Sets the report_plan_tags of this CreateReportPlanRequest.

        Metadata that you can assign to help organize the report plans that you create. Each tag is a key-value pair.

        :param report_plan_tags: The report_plan_tags of this CreateReportPlanRequest.
        :type report_plan_tags: Dict[str, str]
        """

        self._report_plan_tags = report_plan_tags

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateReportPlanRequest.

        A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>CreateReportPlanInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.

        :return: The idempotency_token of this CreateReportPlanRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateReportPlanRequest.

        A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>CreateReportPlanInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.

        :param idempotency_token: The idempotency_token of this CreateReportPlanRequest.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token
