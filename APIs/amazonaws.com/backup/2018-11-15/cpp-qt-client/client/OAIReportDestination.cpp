/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportDestination::OAIReportDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportDestination::OAIReportDestination() {
    this->initializeModel();
}

OAIReportDestination::~OAIReportDestination() {}

void OAIReportDestination::initializeModel() {

    m_s3_bucket_name_isSet = false;
    m_s3_bucket_name_isValid = false;

    m_s3_keys_isSet = false;
    m_s3_keys_isValid = false;
}

void OAIReportDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportDestination::fromJsonObject(QJsonObject json) {

    m_s3_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_name, json[QString("S3BucketName")]);
    m_s3_bucket_name_isSet = !json[QString("S3BucketName")].isNull() && m_s3_bucket_name_isValid;

    m_s3_keys_isValid = ::OpenAPI::fromJsonValue(m_s3_keys, json[QString("S3Keys")]);
    m_s3_keys_isSet = !json[QString("S3Keys")].isNull() && m_s3_keys_isValid;
}

QString OAIReportDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_bucket_name_isSet) {
        obj.insert(QString("S3BucketName"), ::OpenAPI::toJsonValue(m_s3_bucket_name));
    }
    if (m_s3_keys.isSet()) {
        obj.insert(QString("S3Keys"), ::OpenAPI::toJsonValue(m_s3_keys));
    }
    return obj;
}

QString OAIReportDestination::getS3BucketName() const {
    return m_s3_bucket_name;
}
void OAIReportDestination::setS3BucketName(const QString &s3_bucket_name) {
    m_s3_bucket_name = s3_bucket_name;
    m_s3_bucket_name_isSet = true;
}

bool OAIReportDestination::is_s3_bucket_name_Set() const{
    return m_s3_bucket_name_isSet;
}

bool OAIReportDestination::is_s3_bucket_name_Valid() const{
    return m_s3_bucket_name_isValid;
}

QList OAIReportDestination::getS3Keys() const {
    return m_s3_keys;
}
void OAIReportDestination::setS3Keys(const QList &s3_keys) {
    m_s3_keys = s3_keys;
    m_s3_keys_isSet = true;
}

bool OAIReportDestination::is_s3_keys_Set() const{
    return m_s3_keys_isSet;
}

bool OAIReportDestination::is_s3_keys_Valid() const{
    return m_s3_keys_isValid;
}

bool OAIReportDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
