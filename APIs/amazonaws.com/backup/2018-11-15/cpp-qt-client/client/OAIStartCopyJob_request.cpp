/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartCopyJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartCopyJob_request::OAIStartCopyJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartCopyJob_request::OAIStartCopyJob_request() {
    this->initializeModel();
}

OAIStartCopyJob_request::~OAIStartCopyJob_request() {}

void OAIStartCopyJob_request::initializeModel() {

    m_recovery_point_arn_isSet = false;
    m_recovery_point_arn_isValid = false;

    m_source_backup_vault_name_isSet = false;
    m_source_backup_vault_name_isValid = false;

    m_destination_backup_vault_arn_isSet = false;
    m_destination_backup_vault_arn_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;
}

void OAIStartCopyJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartCopyJob_request::fromJsonObject(QJsonObject json) {

    m_recovery_point_arn_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_arn, json[QString("RecoveryPointArn")]);
    m_recovery_point_arn_isSet = !json[QString("RecoveryPointArn")].isNull() && m_recovery_point_arn_isValid;

    m_source_backup_vault_name_isValid = ::OpenAPI::fromJsonValue(m_source_backup_vault_name, json[QString("SourceBackupVaultName")]);
    m_source_backup_vault_name_isSet = !json[QString("SourceBackupVaultName")].isNull() && m_source_backup_vault_name_isValid;

    m_destination_backup_vault_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_backup_vault_arn, json[QString("DestinationBackupVaultArn")]);
    m_destination_backup_vault_arn_isSet = !json[QString("DestinationBackupVaultArn")].isNull() && m_destination_backup_vault_arn_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("IamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("IamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;
}

QString OAIStartCopyJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartCopyJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_recovery_point_arn_isSet) {
        obj.insert(QString("RecoveryPointArn"), ::OpenAPI::toJsonValue(m_recovery_point_arn));
    }
    if (m_source_backup_vault_name_isSet) {
        obj.insert(QString("SourceBackupVaultName"), ::OpenAPI::toJsonValue(m_source_backup_vault_name));
    }
    if (m_destination_backup_vault_arn_isSet) {
        obj.insert(QString("DestinationBackupVaultArn"), ::OpenAPI::toJsonValue(m_destination_backup_vault_arn));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("IamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    return obj;
}

QString OAIStartCopyJob_request::getRecoveryPointArn() const {
    return m_recovery_point_arn;
}
void OAIStartCopyJob_request::setRecoveryPointArn(const QString &recovery_point_arn) {
    m_recovery_point_arn = recovery_point_arn;
    m_recovery_point_arn_isSet = true;
}

bool OAIStartCopyJob_request::is_recovery_point_arn_Set() const{
    return m_recovery_point_arn_isSet;
}

bool OAIStartCopyJob_request::is_recovery_point_arn_Valid() const{
    return m_recovery_point_arn_isValid;
}

QString OAIStartCopyJob_request::getSourceBackupVaultName() const {
    return m_source_backup_vault_name;
}
void OAIStartCopyJob_request::setSourceBackupVaultName(const QString &source_backup_vault_name) {
    m_source_backup_vault_name = source_backup_vault_name;
    m_source_backup_vault_name_isSet = true;
}

bool OAIStartCopyJob_request::is_source_backup_vault_name_Set() const{
    return m_source_backup_vault_name_isSet;
}

bool OAIStartCopyJob_request::is_source_backup_vault_name_Valid() const{
    return m_source_backup_vault_name_isValid;
}

QString OAIStartCopyJob_request::getDestinationBackupVaultArn() const {
    return m_destination_backup_vault_arn;
}
void OAIStartCopyJob_request::setDestinationBackupVaultArn(const QString &destination_backup_vault_arn) {
    m_destination_backup_vault_arn = destination_backup_vault_arn;
    m_destination_backup_vault_arn_isSet = true;
}

bool OAIStartCopyJob_request::is_destination_backup_vault_arn_Set() const{
    return m_destination_backup_vault_arn_isSet;
}

bool OAIStartCopyJob_request::is_destination_backup_vault_arn_Valid() const{
    return m_destination_backup_vault_arn_isValid;
}

QString OAIStartCopyJob_request::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAIStartCopyJob_request::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAIStartCopyJob_request::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAIStartCopyJob_request::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

QString OAIStartCopyJob_request::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAIStartCopyJob_request::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAIStartCopyJob_request::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAIStartCopyJob_request::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

OAIUpdateRecoveryPointLifecycle_request_Lifecycle OAIStartCopyJob_request::getLifecycle() const {
    return m_lifecycle;
}
void OAIStartCopyJob_request::setLifecycle(const OAIUpdateRecoveryPointLifecycle_request_Lifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIStartCopyJob_request::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIStartCopyJob_request::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

bool OAIStartCopyJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recovery_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_backup_vault_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_backup_vault_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartCopyJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recovery_point_arn_isValid && m_source_backup_vault_name_isValid && m_destination_backup_vault_arn_isValid && m_iam_role_arn_isValid && true;
}

} // namespace OpenAPI
