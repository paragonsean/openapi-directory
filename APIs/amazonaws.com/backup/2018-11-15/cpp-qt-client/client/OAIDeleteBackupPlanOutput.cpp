/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteBackupPlanOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteBackupPlanOutput::OAIDeleteBackupPlanOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteBackupPlanOutput::OAIDeleteBackupPlanOutput() {
    this->initializeModel();
}

OAIDeleteBackupPlanOutput::~OAIDeleteBackupPlanOutput() {}

void OAIDeleteBackupPlanOutput::initializeModel() {

    m_backup_plan_id_isSet = false;
    m_backup_plan_id_isValid = false;

    m_backup_plan_arn_isSet = false;
    m_backup_plan_arn_isValid = false;

    m_deletion_date_isSet = false;
    m_deletion_date_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIDeleteBackupPlanOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteBackupPlanOutput::fromJsonObject(QJsonObject json) {

    m_backup_plan_id_isValid = ::OpenAPI::fromJsonValue(m_backup_plan_id, json[QString("BackupPlanId")]);
    m_backup_plan_id_isSet = !json[QString("BackupPlanId")].isNull() && m_backup_plan_id_isValid;

    m_backup_plan_arn_isValid = ::OpenAPI::fromJsonValue(m_backup_plan_arn, json[QString("BackupPlanArn")]);
    m_backup_plan_arn_isSet = !json[QString("BackupPlanArn")].isNull() && m_backup_plan_arn_isValid;

    m_deletion_date_isValid = ::OpenAPI::fromJsonValue(m_deletion_date, json[QString("DeletionDate")]);
    m_deletion_date_isSet = !json[QString("DeletionDate")].isNull() && m_deletion_date_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("VersionId")]);
    m_version_id_isSet = !json[QString("VersionId")].isNull() && m_version_id_isValid;
}

QString OAIDeleteBackupPlanOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteBackupPlanOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_plan_id_isSet) {
        obj.insert(QString("BackupPlanId"), ::OpenAPI::toJsonValue(m_backup_plan_id));
    }
    if (m_backup_plan_arn_isSet) {
        obj.insert(QString("BackupPlanArn"), ::OpenAPI::toJsonValue(m_backup_plan_arn));
    }
    if (m_deletion_date_isSet) {
        obj.insert(QString("DeletionDate"), ::OpenAPI::toJsonValue(m_deletion_date));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("VersionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

QString OAIDeleteBackupPlanOutput::getBackupPlanId() const {
    return m_backup_plan_id;
}
void OAIDeleteBackupPlanOutput::setBackupPlanId(const QString &backup_plan_id) {
    m_backup_plan_id = backup_plan_id;
    m_backup_plan_id_isSet = true;
}

bool OAIDeleteBackupPlanOutput::is_backup_plan_id_Set() const{
    return m_backup_plan_id_isSet;
}

bool OAIDeleteBackupPlanOutput::is_backup_plan_id_Valid() const{
    return m_backup_plan_id_isValid;
}

QString OAIDeleteBackupPlanOutput::getBackupPlanArn() const {
    return m_backup_plan_arn;
}
void OAIDeleteBackupPlanOutput::setBackupPlanArn(const QString &backup_plan_arn) {
    m_backup_plan_arn = backup_plan_arn;
    m_backup_plan_arn_isSet = true;
}

bool OAIDeleteBackupPlanOutput::is_backup_plan_arn_Set() const{
    return m_backup_plan_arn_isSet;
}

bool OAIDeleteBackupPlanOutput::is_backup_plan_arn_Valid() const{
    return m_backup_plan_arn_isValid;
}

QDateTime OAIDeleteBackupPlanOutput::getDeletionDate() const {
    return m_deletion_date;
}
void OAIDeleteBackupPlanOutput::setDeletionDate(const QDateTime &deletion_date) {
    m_deletion_date = deletion_date;
    m_deletion_date_isSet = true;
}

bool OAIDeleteBackupPlanOutput::is_deletion_date_Set() const{
    return m_deletion_date_isSet;
}

bool OAIDeleteBackupPlanOutput::is_deletion_date_Valid() const{
    return m_deletion_date_isValid;
}

QString OAIDeleteBackupPlanOutput::getVersionId() const {
    return m_version_id;
}
void OAIDeleteBackupPlanOutput::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIDeleteBackupPlanOutput::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIDeleteBackupPlanOutput::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIDeleteBackupPlanOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_plan_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteBackupPlanOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
