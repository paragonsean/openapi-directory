/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegalHold.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegalHold::OAILegalHold(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegalHold::OAILegalHold() {
    this->initializeModel();
}

OAILegalHold::~OAILegalHold() {}

void OAILegalHold::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_legal_hold_id_isSet = false;
    m_legal_hold_id_isValid = false;

    m_legal_hold_arn_isSet = false;
    m_legal_hold_arn_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_cancellation_date_isSet = false;
    m_cancellation_date_isValid = false;
}

void OAILegalHold::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegalHold::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_legal_hold_id_isValid = ::OpenAPI::fromJsonValue(m_legal_hold_id, json[QString("LegalHoldId")]);
    m_legal_hold_id_isSet = !json[QString("LegalHoldId")].isNull() && m_legal_hold_id_isValid;

    m_legal_hold_arn_isValid = ::OpenAPI::fromJsonValue(m_legal_hold_arn, json[QString("LegalHoldArn")]);
    m_legal_hold_arn_isSet = !json[QString("LegalHoldArn")].isNull() && m_legal_hold_arn_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_cancellation_date_isValid = ::OpenAPI::fromJsonValue(m_cancellation_date, json[QString("CancellationDate")]);
    m_cancellation_date_isSet = !json[QString("CancellationDate")].isNull() && m_cancellation_date_isValid;
}

QString OAILegalHold::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegalHold::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_legal_hold_id_isSet) {
        obj.insert(QString("LegalHoldId"), ::OpenAPI::toJsonValue(m_legal_hold_id));
    }
    if (m_legal_hold_arn_isSet) {
        obj.insert(QString("LegalHoldArn"), ::OpenAPI::toJsonValue(m_legal_hold_arn));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_cancellation_date_isSet) {
        obj.insert(QString("CancellationDate"), ::OpenAPI::toJsonValue(m_cancellation_date));
    }
    return obj;
}

QString OAILegalHold::getTitle() const {
    return m_title;
}
void OAILegalHold::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILegalHold::is_title_Set() const{
    return m_title_isSet;
}

bool OAILegalHold::is_title_Valid() const{
    return m_title_isValid;
}

OAILegalHoldStatus OAILegalHold::getStatus() const {
    return m_status;
}
void OAILegalHold::setStatus(const OAILegalHoldStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILegalHold::is_status_Set() const{
    return m_status_isSet;
}

bool OAILegalHold::is_status_Valid() const{
    return m_status_isValid;
}

QString OAILegalHold::getDescription() const {
    return m_description;
}
void OAILegalHold::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILegalHold::is_description_Set() const{
    return m_description_isSet;
}

bool OAILegalHold::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILegalHold::getLegalHoldId() const {
    return m_legal_hold_id;
}
void OAILegalHold::setLegalHoldId(const QString &legal_hold_id) {
    m_legal_hold_id = legal_hold_id;
    m_legal_hold_id_isSet = true;
}

bool OAILegalHold::is_legal_hold_id_Set() const{
    return m_legal_hold_id_isSet;
}

bool OAILegalHold::is_legal_hold_id_Valid() const{
    return m_legal_hold_id_isValid;
}

QString OAILegalHold::getLegalHoldArn() const {
    return m_legal_hold_arn;
}
void OAILegalHold::setLegalHoldArn(const QString &legal_hold_arn) {
    m_legal_hold_arn = legal_hold_arn;
    m_legal_hold_arn_isSet = true;
}

bool OAILegalHold::is_legal_hold_arn_Set() const{
    return m_legal_hold_arn_isSet;
}

bool OAILegalHold::is_legal_hold_arn_Valid() const{
    return m_legal_hold_arn_isValid;
}

QDateTime OAILegalHold::getCreationDate() const {
    return m_creation_date;
}
void OAILegalHold::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAILegalHold::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAILegalHold::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAILegalHold::getCancellationDate() const {
    return m_cancellation_date;
}
void OAILegalHold::setCancellationDate(const QDateTime &cancellation_date) {
    m_cancellation_date = cancellation_date;
    m_cancellation_date_isSet = true;
}

bool OAILegalHold::is_cancellation_date_Set() const{
    return m_cancellation_date_isSet;
}

bool OAILegalHold::is_cancellation_date_Valid() const{
    return m_cancellation_date_isValid;
}

bool OAILegalHold::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_hold_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_hold_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegalHold::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
