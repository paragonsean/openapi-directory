/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeCopyJobOutput_CopyJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeCopyJobOutput_CopyJob::OAIDescribeCopyJobOutput_CopyJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeCopyJobOutput_CopyJob::OAIDescribeCopyJobOutput_CopyJob() {
    this->initializeModel();
}

OAIDescribeCopyJobOutput_CopyJob::~OAIDescribeCopyJobOutput_CopyJob() {}

void OAIDescribeCopyJobOutput_CopyJob::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_copy_job_id_isSet = false;
    m_copy_job_id_isValid = false;

    m_source_backup_vault_arn_isSet = false;
    m_source_backup_vault_arn_isValid = false;

    m_source_recovery_point_arn_isSet = false;
    m_source_recovery_point_arn_isValid = false;

    m_destination_backup_vault_arn_isSet = false;
    m_destination_backup_vault_arn_isValid = false;

    m_destination_recovery_point_arn_isSet = false;
    m_destination_recovery_point_arn_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_completion_date_isSet = false;
    m_completion_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_backup_size_in_bytes_isSet = false;
    m_backup_size_in_bytes_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_parent_job_id_isSet = false;
    m_parent_job_id_isValid = false;

    m_is_parent_isSet = false;
    m_is_parent_isValid = false;

    m_composite_member_identifier_isSet = false;
    m_composite_member_identifier_isValid = false;

    m_number_of_child_jobs_isSet = false;
    m_number_of_child_jobs_isValid = false;

    m_child_jobs_in_state_isSet = false;
    m_child_jobs_in_state_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAIDescribeCopyJobOutput_CopyJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeCopyJobOutput_CopyJob::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_copy_job_id_isValid = ::OpenAPI::fromJsonValue(m_copy_job_id, json[QString("CopyJobId")]);
    m_copy_job_id_isSet = !json[QString("CopyJobId")].isNull() && m_copy_job_id_isValid;

    m_source_backup_vault_arn_isValid = ::OpenAPI::fromJsonValue(m_source_backup_vault_arn, json[QString("SourceBackupVaultArn")]);
    m_source_backup_vault_arn_isSet = !json[QString("SourceBackupVaultArn")].isNull() && m_source_backup_vault_arn_isValid;

    m_source_recovery_point_arn_isValid = ::OpenAPI::fromJsonValue(m_source_recovery_point_arn, json[QString("SourceRecoveryPointArn")]);
    m_source_recovery_point_arn_isSet = !json[QString("SourceRecoveryPointArn")].isNull() && m_source_recovery_point_arn_isValid;

    m_destination_backup_vault_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_backup_vault_arn, json[QString("DestinationBackupVaultArn")]);
    m_destination_backup_vault_arn_isSet = !json[QString("DestinationBackupVaultArn")].isNull() && m_destination_backup_vault_arn_isValid;

    m_destination_recovery_point_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_recovery_point_arn, json[QString("DestinationRecoveryPointArn")]);
    m_destination_recovery_point_arn_isSet = !json[QString("DestinationRecoveryPointArn")].isNull() && m_destination_recovery_point_arn_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_completion_date_isValid = ::OpenAPI::fromJsonValue(m_completion_date, json[QString("CompletionDate")]);
    m_completion_date_isSet = !json[QString("CompletionDate")].isNull() && m_completion_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_backup_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_backup_size_in_bytes, json[QString("BackupSizeInBytes")]);
    m_backup_size_in_bytes_isSet = !json[QString("BackupSizeInBytes")].isNull() && m_backup_size_in_bytes_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("IamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("IamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_parent_job_id_isValid = ::OpenAPI::fromJsonValue(m_parent_job_id, json[QString("ParentJobId")]);
    m_parent_job_id_isSet = !json[QString("ParentJobId")].isNull() && m_parent_job_id_isValid;

    m_is_parent_isValid = ::OpenAPI::fromJsonValue(m_is_parent, json[QString("IsParent")]);
    m_is_parent_isSet = !json[QString("IsParent")].isNull() && m_is_parent_isValid;

    m_composite_member_identifier_isValid = ::OpenAPI::fromJsonValue(m_composite_member_identifier, json[QString("CompositeMemberIdentifier")]);
    m_composite_member_identifier_isSet = !json[QString("CompositeMemberIdentifier")].isNull() && m_composite_member_identifier_isValid;

    m_number_of_child_jobs_isValid = ::OpenAPI::fromJsonValue(m_number_of_child_jobs, json[QString("NumberOfChildJobs")]);
    m_number_of_child_jobs_isSet = !json[QString("NumberOfChildJobs")].isNull() && m_number_of_child_jobs_isValid;

    m_child_jobs_in_state_isValid = ::OpenAPI::fromJsonValue(m_child_jobs_in_state, json[QString("ChildJobsInState")]);
    m_child_jobs_in_state_isSet = !json[QString("ChildJobsInState")].isNull() && m_child_jobs_in_state_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("ResourceName")]);
    m_resource_name_isSet = !json[QString("ResourceName")].isNull() && m_resource_name_isValid;
}

QString OAIDescribeCopyJobOutput_CopyJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeCopyJobOutput_CopyJob::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_copy_job_id_isSet) {
        obj.insert(QString("CopyJobId"), ::OpenAPI::toJsonValue(m_copy_job_id));
    }
    if (m_source_backup_vault_arn_isSet) {
        obj.insert(QString("SourceBackupVaultArn"), ::OpenAPI::toJsonValue(m_source_backup_vault_arn));
    }
    if (m_source_recovery_point_arn_isSet) {
        obj.insert(QString("SourceRecoveryPointArn"), ::OpenAPI::toJsonValue(m_source_recovery_point_arn));
    }
    if (m_destination_backup_vault_arn_isSet) {
        obj.insert(QString("DestinationBackupVaultArn"), ::OpenAPI::toJsonValue(m_destination_backup_vault_arn));
    }
    if (m_destination_recovery_point_arn_isSet) {
        obj.insert(QString("DestinationRecoveryPointArn"), ::OpenAPI::toJsonValue(m_destination_recovery_point_arn));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_completion_date_isSet) {
        obj.insert(QString("CompletionDate"), ::OpenAPI::toJsonValue(m_completion_date));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_backup_size_in_bytes_isSet) {
        obj.insert(QString("BackupSizeInBytes"), ::OpenAPI::toJsonValue(m_backup_size_in_bytes));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("IamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_parent_job_id_isSet) {
        obj.insert(QString("ParentJobId"), ::OpenAPI::toJsonValue(m_parent_job_id));
    }
    if (m_is_parent_isSet) {
        obj.insert(QString("IsParent"), ::OpenAPI::toJsonValue(m_is_parent));
    }
    if (m_composite_member_identifier_isSet) {
        obj.insert(QString("CompositeMemberIdentifier"), ::OpenAPI::toJsonValue(m_composite_member_identifier));
    }
    if (m_number_of_child_jobs_isSet) {
        obj.insert(QString("NumberOfChildJobs"), ::OpenAPI::toJsonValue(m_number_of_child_jobs));
    }
    if (m_child_jobs_in_state.isSet()) {
        obj.insert(QString("ChildJobsInState"), ::OpenAPI::toJsonValue(m_child_jobs_in_state));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("ResourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

QString OAIDescribeCopyJobOutput_CopyJob::getAccountId() const {
    return m_account_id;
}
void OAIDescribeCopyJobOutput_CopyJob::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIDescribeCopyJobOutput_CopyJob::getCopyJobId() const {
    return m_copy_job_id;
}
void OAIDescribeCopyJobOutput_CopyJob::setCopyJobId(const QString &copy_job_id) {
    m_copy_job_id = copy_job_id;
    m_copy_job_id_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_copy_job_id_Set() const{
    return m_copy_job_id_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_copy_job_id_Valid() const{
    return m_copy_job_id_isValid;
}

QString OAIDescribeCopyJobOutput_CopyJob::getSourceBackupVaultArn() const {
    return m_source_backup_vault_arn;
}
void OAIDescribeCopyJobOutput_CopyJob::setSourceBackupVaultArn(const QString &source_backup_vault_arn) {
    m_source_backup_vault_arn = source_backup_vault_arn;
    m_source_backup_vault_arn_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_source_backup_vault_arn_Set() const{
    return m_source_backup_vault_arn_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_source_backup_vault_arn_Valid() const{
    return m_source_backup_vault_arn_isValid;
}

QString OAIDescribeCopyJobOutput_CopyJob::getSourceRecoveryPointArn() const {
    return m_source_recovery_point_arn;
}
void OAIDescribeCopyJobOutput_CopyJob::setSourceRecoveryPointArn(const QString &source_recovery_point_arn) {
    m_source_recovery_point_arn = source_recovery_point_arn;
    m_source_recovery_point_arn_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_source_recovery_point_arn_Set() const{
    return m_source_recovery_point_arn_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_source_recovery_point_arn_Valid() const{
    return m_source_recovery_point_arn_isValid;
}

QString OAIDescribeCopyJobOutput_CopyJob::getDestinationBackupVaultArn() const {
    return m_destination_backup_vault_arn;
}
void OAIDescribeCopyJobOutput_CopyJob::setDestinationBackupVaultArn(const QString &destination_backup_vault_arn) {
    m_destination_backup_vault_arn = destination_backup_vault_arn;
    m_destination_backup_vault_arn_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_destination_backup_vault_arn_Set() const{
    return m_destination_backup_vault_arn_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_destination_backup_vault_arn_Valid() const{
    return m_destination_backup_vault_arn_isValid;
}

QString OAIDescribeCopyJobOutput_CopyJob::getDestinationRecoveryPointArn() const {
    return m_destination_recovery_point_arn;
}
void OAIDescribeCopyJobOutput_CopyJob::setDestinationRecoveryPointArn(const QString &destination_recovery_point_arn) {
    m_destination_recovery_point_arn = destination_recovery_point_arn;
    m_destination_recovery_point_arn_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_destination_recovery_point_arn_Set() const{
    return m_destination_recovery_point_arn_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_destination_recovery_point_arn_Valid() const{
    return m_destination_recovery_point_arn_isValid;
}

QString OAIDescribeCopyJobOutput_CopyJob::getResourceArn() const {
    return m_resource_arn;
}
void OAIDescribeCopyJobOutput_CopyJob::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QDateTime OAIDescribeCopyJobOutput_CopyJob::getCreationDate() const {
    return m_creation_date;
}
void OAIDescribeCopyJobOutput_CopyJob::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIDescribeCopyJobOutput_CopyJob::getCompletionDate() const {
    return m_completion_date;
}
void OAIDescribeCopyJobOutput_CopyJob::setCompletionDate(const QDateTime &completion_date) {
    m_completion_date = completion_date;
    m_completion_date_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_completion_date_Set() const{
    return m_completion_date_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_completion_date_Valid() const{
    return m_completion_date_isValid;
}

OAICopyJobState OAIDescribeCopyJobOutput_CopyJob::getState() const {
    return m_state;
}
void OAIDescribeCopyJobOutput_CopyJob::setState(const OAICopyJobState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDescribeCopyJobOutput_CopyJob::getStatusMessage() const {
    return m_status_message;
}
void OAIDescribeCopyJobOutput_CopyJob::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_status_message_Valid() const{
    return m_status_message_isValid;
}

qint32 OAIDescribeCopyJobOutput_CopyJob::getBackupSizeInBytes() const {
    return m_backup_size_in_bytes;
}
void OAIDescribeCopyJobOutput_CopyJob::setBackupSizeInBytes(const qint32 &backup_size_in_bytes) {
    m_backup_size_in_bytes = backup_size_in_bytes;
    m_backup_size_in_bytes_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_backup_size_in_bytes_Set() const{
    return m_backup_size_in_bytes_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_backup_size_in_bytes_Valid() const{
    return m_backup_size_in_bytes_isValid;
}

QString OAIDescribeCopyJobOutput_CopyJob::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAIDescribeCopyJobOutput_CopyJob::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

OAIRecoveryPointCreator OAIDescribeCopyJobOutput_CopyJob::getCreatedBy() const {
    return m_created_by;
}
void OAIDescribeCopyJobOutput_CopyJob::setCreatedBy(const OAIRecoveryPointCreator &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIDescribeCopyJobOutput_CopyJob::getResourceType() const {
    return m_resource_type;
}
void OAIDescribeCopyJobOutput_CopyJob::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIDescribeCopyJobOutput_CopyJob::getParentJobId() const {
    return m_parent_job_id;
}
void OAIDescribeCopyJobOutput_CopyJob::setParentJobId(const QString &parent_job_id) {
    m_parent_job_id = parent_job_id;
    m_parent_job_id_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_parent_job_id_Set() const{
    return m_parent_job_id_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_parent_job_id_Valid() const{
    return m_parent_job_id_isValid;
}

bool OAIDescribeCopyJobOutput_CopyJob::getIsParent() const {
    return m_is_parent;
}
void OAIDescribeCopyJobOutput_CopyJob::setIsParent(const bool &is_parent) {
    m_is_parent = is_parent;
    m_is_parent_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_is_parent_Set() const{
    return m_is_parent_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_is_parent_Valid() const{
    return m_is_parent_isValid;
}

QString OAIDescribeCopyJobOutput_CopyJob::getCompositeMemberIdentifier() const {
    return m_composite_member_identifier;
}
void OAIDescribeCopyJobOutput_CopyJob::setCompositeMemberIdentifier(const QString &composite_member_identifier) {
    m_composite_member_identifier = composite_member_identifier;
    m_composite_member_identifier_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_composite_member_identifier_Set() const{
    return m_composite_member_identifier_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_composite_member_identifier_Valid() const{
    return m_composite_member_identifier_isValid;
}

qint32 OAIDescribeCopyJobOutput_CopyJob::getNumberOfChildJobs() const {
    return m_number_of_child_jobs;
}
void OAIDescribeCopyJobOutput_CopyJob::setNumberOfChildJobs(const qint32 &number_of_child_jobs) {
    m_number_of_child_jobs = number_of_child_jobs;
    m_number_of_child_jobs_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_number_of_child_jobs_Set() const{
    return m_number_of_child_jobs_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_number_of_child_jobs_Valid() const{
    return m_number_of_child_jobs_isValid;
}

QMap OAIDescribeCopyJobOutput_CopyJob::getChildJobsInState() const {
    return m_child_jobs_in_state;
}
void OAIDescribeCopyJobOutput_CopyJob::setChildJobsInState(const QMap &child_jobs_in_state) {
    m_child_jobs_in_state = child_jobs_in_state;
    m_child_jobs_in_state_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_child_jobs_in_state_Set() const{
    return m_child_jobs_in_state_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_child_jobs_in_state_Valid() const{
    return m_child_jobs_in_state_isValid;
}

QString OAIDescribeCopyJobOutput_CopyJob::getResourceName() const {
    return m_resource_name;
}
void OAIDescribeCopyJobOutput_CopyJob::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIDescribeCopyJobOutput_CopyJob::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAIDescribeCopyJobOutput_CopyJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_backup_vault_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_recovery_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_backup_vault_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_recovery_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_composite_member_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_child_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_jobs_in_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeCopyJobOutput_CopyJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
