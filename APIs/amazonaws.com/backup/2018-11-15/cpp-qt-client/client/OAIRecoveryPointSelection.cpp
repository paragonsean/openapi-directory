/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecoveryPointSelection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecoveryPointSelection::OAIRecoveryPointSelection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecoveryPointSelection::OAIRecoveryPointSelection() {
    this->initializeModel();
}

OAIRecoveryPointSelection::~OAIRecoveryPointSelection() {}

void OAIRecoveryPointSelection::initializeModel() {

    m_vault_names_isSet = false;
    m_vault_names_isValid = false;

    m_resource_identifiers_isSet = false;
    m_resource_identifiers_isValid = false;

    m_date_range_isSet = false;
    m_date_range_isValid = false;
}

void OAIRecoveryPointSelection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecoveryPointSelection::fromJsonObject(QJsonObject json) {

    m_vault_names_isValid = ::OpenAPI::fromJsonValue(m_vault_names, json[QString("VaultNames")]);
    m_vault_names_isSet = !json[QString("VaultNames")].isNull() && m_vault_names_isValid;

    m_resource_identifiers_isValid = ::OpenAPI::fromJsonValue(m_resource_identifiers, json[QString("ResourceIdentifiers")]);
    m_resource_identifiers_isSet = !json[QString("ResourceIdentifiers")].isNull() && m_resource_identifiers_isValid;

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("DateRange")]);
    m_date_range_isSet = !json[QString("DateRange")].isNull() && m_date_range_isValid;
}

QString OAIRecoveryPointSelection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecoveryPointSelection::asJsonObject() const {
    QJsonObject obj;
    if (m_vault_names.isSet()) {
        obj.insert(QString("VaultNames"), ::OpenAPI::toJsonValue(m_vault_names));
    }
    if (m_resource_identifiers.isSet()) {
        obj.insert(QString("ResourceIdentifiers"), ::OpenAPI::toJsonValue(m_resource_identifiers));
    }
    if (m_date_range.isSet()) {
        obj.insert(QString("DateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    return obj;
}

QList OAIRecoveryPointSelection::getVaultNames() const {
    return m_vault_names;
}
void OAIRecoveryPointSelection::setVaultNames(const QList &vault_names) {
    m_vault_names = vault_names;
    m_vault_names_isSet = true;
}

bool OAIRecoveryPointSelection::is_vault_names_Set() const{
    return m_vault_names_isSet;
}

bool OAIRecoveryPointSelection::is_vault_names_Valid() const{
    return m_vault_names_isValid;
}

QList OAIRecoveryPointSelection::getResourceIdentifiers() const {
    return m_resource_identifiers;
}
void OAIRecoveryPointSelection::setResourceIdentifiers(const QList &resource_identifiers) {
    m_resource_identifiers = resource_identifiers;
    m_resource_identifiers_isSet = true;
}

bool OAIRecoveryPointSelection::is_resource_identifiers_Set() const{
    return m_resource_identifiers_isSet;
}

bool OAIRecoveryPointSelection::is_resource_identifiers_Valid() const{
    return m_resource_identifiers_isValid;
}

OAIDateRange OAIRecoveryPointSelection::getDateRange() const {
    return m_date_range;
}
void OAIRecoveryPointSelection::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAIRecoveryPointSelection::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAIRecoveryPointSelection::is_date_range_Valid() const{
    return m_date_range_isValid;
}

bool OAIRecoveryPointSelection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vault_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecoveryPointSelection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
