/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupSelection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupSelection::OAIBackupSelection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupSelection::OAIBackupSelection() {
    this->initializeModel();
}

OAIBackupSelection::~OAIBackupSelection() {}

void OAIBackupSelection::initializeModel() {

    m_selection_name_isSet = false;
    m_selection_name_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_list_of_tags_isSet = false;
    m_list_of_tags_isValid = false;

    m_not_resources_isSet = false;
    m_not_resources_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;
}

void OAIBackupSelection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupSelection::fromJsonObject(QJsonObject json) {

    m_selection_name_isValid = ::OpenAPI::fromJsonValue(m_selection_name, json[QString("SelectionName")]);
    m_selection_name_isSet = !json[QString("SelectionName")].isNull() && m_selection_name_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("IamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("IamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;

    m_list_of_tags_isValid = ::OpenAPI::fromJsonValue(m_list_of_tags, json[QString("ListOfTags")]);
    m_list_of_tags_isSet = !json[QString("ListOfTags")].isNull() && m_list_of_tags_isValid;

    m_not_resources_isValid = ::OpenAPI::fromJsonValue(m_not_resources, json[QString("NotResources")]);
    m_not_resources_isSet = !json[QString("NotResources")].isNull() && m_not_resources_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("Conditions")]);
    m_conditions_isSet = !json[QString("Conditions")].isNull() && m_conditions_isValid;
}

QString OAIBackupSelection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupSelection::asJsonObject() const {
    QJsonObject obj;
    if (m_selection_name_isSet) {
        obj.insert(QString("SelectionName"), ::OpenAPI::toJsonValue(m_selection_name));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("IamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_list_of_tags.isSet()) {
        obj.insert(QString("ListOfTags"), ::OpenAPI::toJsonValue(m_list_of_tags));
    }
    if (m_not_resources.isSet()) {
        obj.insert(QString("NotResources"), ::OpenAPI::toJsonValue(m_not_resources));
    }
    if (m_conditions.isSet()) {
        obj.insert(QString("Conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    return obj;
}

QString OAIBackupSelection::getSelectionName() const {
    return m_selection_name;
}
void OAIBackupSelection::setSelectionName(const QString &selection_name) {
    m_selection_name = selection_name;
    m_selection_name_isSet = true;
}

bool OAIBackupSelection::is_selection_name_Set() const{
    return m_selection_name_isSet;
}

bool OAIBackupSelection::is_selection_name_Valid() const{
    return m_selection_name_isValid;
}

QString OAIBackupSelection::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAIBackupSelection::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAIBackupSelection::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAIBackupSelection::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

QList OAIBackupSelection::getResources() const {
    return m_resources;
}
void OAIBackupSelection::setResources(const QList &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIBackupSelection::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIBackupSelection::is_resources_Valid() const{
    return m_resources_isValid;
}

QList OAIBackupSelection::getListOfTags() const {
    return m_list_of_tags;
}
void OAIBackupSelection::setListOfTags(const QList &list_of_tags) {
    m_list_of_tags = list_of_tags;
    m_list_of_tags_isSet = true;
}

bool OAIBackupSelection::is_list_of_tags_Set() const{
    return m_list_of_tags_isSet;
}

bool OAIBackupSelection::is_list_of_tags_Valid() const{
    return m_list_of_tags_isValid;
}

QList OAIBackupSelection::getNotResources() const {
    return m_not_resources;
}
void OAIBackupSelection::setNotResources(const QList &not_resources) {
    m_not_resources = not_resources;
    m_not_resources_isSet = true;
}

bool OAIBackupSelection::is_not_resources_Set() const{
    return m_not_resources_isSet;
}

bool OAIBackupSelection::is_not_resources_Valid() const{
    return m_not_resources_isValid;
}

OAICreateBackupSelection_request_BackupSelection_Conditions OAIBackupSelection::getConditions() const {
    return m_conditions;
}
void OAIBackupSelection::setConditions(const OAICreateBackupSelection_request_BackupSelection_Conditions &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIBackupSelection::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIBackupSelection::is_conditions_Valid() const{
    return m_conditions_isValid;
}

bool OAIBackupSelection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_of_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupSelection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_selection_name_isValid && m_iam_role_arn_isValid && true;
}

} // namespace OpenAPI
