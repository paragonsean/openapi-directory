/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBackupPlan_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBackupPlan_request::OAICreateBackupPlan_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBackupPlan_request::OAICreateBackupPlan_request() {
    this->initializeModel();
}

OAICreateBackupPlan_request::~OAICreateBackupPlan_request() {}

void OAICreateBackupPlan_request::initializeModel() {

    m_backup_plan_isSet = false;
    m_backup_plan_isValid = false;

    m_backup_plan_tags_isSet = false;
    m_backup_plan_tags_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;
}

void OAICreateBackupPlan_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBackupPlan_request::fromJsonObject(QJsonObject json) {

    m_backup_plan_isValid = ::OpenAPI::fromJsonValue(m_backup_plan, json[QString("BackupPlan")]);
    m_backup_plan_isSet = !json[QString("BackupPlan")].isNull() && m_backup_plan_isValid;

    m_backup_plan_tags_isValid = ::OpenAPI::fromJsonValue(m_backup_plan_tags, json[QString("BackupPlanTags")]);
    m_backup_plan_tags_isSet = !json[QString("BackupPlanTags")].isNull() && m_backup_plan_tags_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;
}

QString OAICreateBackupPlan_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBackupPlan_request::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_plan.isSet()) {
        obj.insert(QString("BackupPlan"), ::OpenAPI::toJsonValue(m_backup_plan));
    }
    if (m_backup_plan_tags.size() > 0) {
        obj.insert(QString("BackupPlanTags"), ::OpenAPI::toJsonValue(m_backup_plan_tags));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    return obj;
}

OAICreateBackupPlan_request_BackupPlan OAICreateBackupPlan_request::getBackupPlan() const {
    return m_backup_plan;
}
void OAICreateBackupPlan_request::setBackupPlan(const OAICreateBackupPlan_request_BackupPlan &backup_plan) {
    m_backup_plan = backup_plan;
    m_backup_plan_isSet = true;
}

bool OAICreateBackupPlan_request::is_backup_plan_Set() const{
    return m_backup_plan_isSet;
}

bool OAICreateBackupPlan_request::is_backup_plan_Valid() const{
    return m_backup_plan_isValid;
}

QMap<QString, QString> OAICreateBackupPlan_request::getBackupPlanTags() const {
    return m_backup_plan_tags;
}
void OAICreateBackupPlan_request::setBackupPlanTags(const QMap<QString, QString> &backup_plan_tags) {
    m_backup_plan_tags = backup_plan_tags;
    m_backup_plan_tags_isSet = true;
}

bool OAICreateBackupPlan_request::is_backup_plan_tags_Set() const{
    return m_backup_plan_tags_isSet;
}

bool OAICreateBackupPlan_request::is_backup_plan_tags_Valid() const{
    return m_backup_plan_tags_isValid;
}

QString OAICreateBackupPlan_request::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAICreateBackupPlan_request::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAICreateBackupPlan_request::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAICreateBackupPlan_request::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

bool OAICreateBackupPlan_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_plan_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBackupPlan_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backup_plan_isValid && true;
}

} // namespace OpenAPI
