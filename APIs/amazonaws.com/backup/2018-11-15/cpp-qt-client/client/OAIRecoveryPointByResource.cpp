/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecoveryPointByResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecoveryPointByResource::OAIRecoveryPointByResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecoveryPointByResource::OAIRecoveryPointByResource() {
    this->initializeModel();
}

OAIRecoveryPointByResource::~OAIRecoveryPointByResource() {}

void OAIRecoveryPointByResource::initializeModel() {

    m_recovery_point_arn_isSet = false;
    m_recovery_point_arn_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_encryption_key_arn_isSet = false;
    m_encryption_key_arn_isValid = false;

    m_backup_size_bytes_isSet = false;
    m_backup_size_bytes_isValid = false;

    m_backup_vault_name_isSet = false;
    m_backup_vault_name_isValid = false;

    m_is_parent_isSet = false;
    m_is_parent_isValid = false;

    m_parent_recovery_point_arn_isSet = false;
    m_parent_recovery_point_arn_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAIRecoveryPointByResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecoveryPointByResource::fromJsonObject(QJsonObject json) {

    m_recovery_point_arn_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_arn, json[QString("RecoveryPointArn")]);
    m_recovery_point_arn_isSet = !json[QString("RecoveryPointArn")].isNull() && m_recovery_point_arn_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_encryption_key_arn_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_arn, json[QString("EncryptionKeyArn")]);
    m_encryption_key_arn_isSet = !json[QString("EncryptionKeyArn")].isNull() && m_encryption_key_arn_isValid;

    m_backup_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_backup_size_bytes, json[QString("BackupSizeBytes")]);
    m_backup_size_bytes_isSet = !json[QString("BackupSizeBytes")].isNull() && m_backup_size_bytes_isValid;

    m_backup_vault_name_isValid = ::OpenAPI::fromJsonValue(m_backup_vault_name, json[QString("BackupVaultName")]);
    m_backup_vault_name_isSet = !json[QString("BackupVaultName")].isNull() && m_backup_vault_name_isValid;

    m_is_parent_isValid = ::OpenAPI::fromJsonValue(m_is_parent, json[QString("IsParent")]);
    m_is_parent_isSet = !json[QString("IsParent")].isNull() && m_is_parent_isValid;

    m_parent_recovery_point_arn_isValid = ::OpenAPI::fromJsonValue(m_parent_recovery_point_arn, json[QString("ParentRecoveryPointArn")]);
    m_parent_recovery_point_arn_isSet = !json[QString("ParentRecoveryPointArn")].isNull() && m_parent_recovery_point_arn_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("ResourceName")]);
    m_resource_name_isSet = !json[QString("ResourceName")].isNull() && m_resource_name_isValid;
}

QString OAIRecoveryPointByResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecoveryPointByResource::asJsonObject() const {
    QJsonObject obj;
    if (m_recovery_point_arn_isSet) {
        obj.insert(QString("RecoveryPointArn"), ::OpenAPI::toJsonValue(m_recovery_point_arn));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_encryption_key_arn_isSet) {
        obj.insert(QString("EncryptionKeyArn"), ::OpenAPI::toJsonValue(m_encryption_key_arn));
    }
    if (m_backup_size_bytes_isSet) {
        obj.insert(QString("BackupSizeBytes"), ::OpenAPI::toJsonValue(m_backup_size_bytes));
    }
    if (m_backup_vault_name_isSet) {
        obj.insert(QString("BackupVaultName"), ::OpenAPI::toJsonValue(m_backup_vault_name));
    }
    if (m_is_parent_isSet) {
        obj.insert(QString("IsParent"), ::OpenAPI::toJsonValue(m_is_parent));
    }
    if (m_parent_recovery_point_arn_isSet) {
        obj.insert(QString("ParentRecoveryPointArn"), ::OpenAPI::toJsonValue(m_parent_recovery_point_arn));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("ResourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

QString OAIRecoveryPointByResource::getRecoveryPointArn() const {
    return m_recovery_point_arn;
}
void OAIRecoveryPointByResource::setRecoveryPointArn(const QString &recovery_point_arn) {
    m_recovery_point_arn = recovery_point_arn;
    m_recovery_point_arn_isSet = true;
}

bool OAIRecoveryPointByResource::is_recovery_point_arn_Set() const{
    return m_recovery_point_arn_isSet;
}

bool OAIRecoveryPointByResource::is_recovery_point_arn_Valid() const{
    return m_recovery_point_arn_isValid;
}

QDateTime OAIRecoveryPointByResource::getCreationDate() const {
    return m_creation_date;
}
void OAIRecoveryPointByResource::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIRecoveryPointByResource::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIRecoveryPointByResource::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAIRecoveryPointStatus OAIRecoveryPointByResource::getStatus() const {
    return m_status;
}
void OAIRecoveryPointByResource::setStatus(const OAIRecoveryPointStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRecoveryPointByResource::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRecoveryPointByResource::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRecoveryPointByResource::getStatusMessage() const {
    return m_status_message;
}
void OAIRecoveryPointByResource::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIRecoveryPointByResource::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIRecoveryPointByResource::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIRecoveryPointByResource::getEncryptionKeyArn() const {
    return m_encryption_key_arn;
}
void OAIRecoveryPointByResource::setEncryptionKeyArn(const QString &encryption_key_arn) {
    m_encryption_key_arn = encryption_key_arn;
    m_encryption_key_arn_isSet = true;
}

bool OAIRecoveryPointByResource::is_encryption_key_arn_Set() const{
    return m_encryption_key_arn_isSet;
}

bool OAIRecoveryPointByResource::is_encryption_key_arn_Valid() const{
    return m_encryption_key_arn_isValid;
}

qint32 OAIRecoveryPointByResource::getBackupSizeBytes() const {
    return m_backup_size_bytes;
}
void OAIRecoveryPointByResource::setBackupSizeBytes(const qint32 &backup_size_bytes) {
    m_backup_size_bytes = backup_size_bytes;
    m_backup_size_bytes_isSet = true;
}

bool OAIRecoveryPointByResource::is_backup_size_bytes_Set() const{
    return m_backup_size_bytes_isSet;
}

bool OAIRecoveryPointByResource::is_backup_size_bytes_Valid() const{
    return m_backup_size_bytes_isValid;
}

QString OAIRecoveryPointByResource::getBackupVaultName() const {
    return m_backup_vault_name;
}
void OAIRecoveryPointByResource::setBackupVaultName(const QString &backup_vault_name) {
    m_backup_vault_name = backup_vault_name;
    m_backup_vault_name_isSet = true;
}

bool OAIRecoveryPointByResource::is_backup_vault_name_Set() const{
    return m_backup_vault_name_isSet;
}

bool OAIRecoveryPointByResource::is_backup_vault_name_Valid() const{
    return m_backup_vault_name_isValid;
}

bool OAIRecoveryPointByResource::getIsParent() const {
    return m_is_parent;
}
void OAIRecoveryPointByResource::setIsParent(const bool &is_parent) {
    m_is_parent = is_parent;
    m_is_parent_isSet = true;
}

bool OAIRecoveryPointByResource::is_is_parent_Set() const{
    return m_is_parent_isSet;
}

bool OAIRecoveryPointByResource::is_is_parent_Valid() const{
    return m_is_parent_isValid;
}

QString OAIRecoveryPointByResource::getParentRecoveryPointArn() const {
    return m_parent_recovery_point_arn;
}
void OAIRecoveryPointByResource::setParentRecoveryPointArn(const QString &parent_recovery_point_arn) {
    m_parent_recovery_point_arn = parent_recovery_point_arn;
    m_parent_recovery_point_arn_isSet = true;
}

bool OAIRecoveryPointByResource::is_parent_recovery_point_arn_Set() const{
    return m_parent_recovery_point_arn_isSet;
}

bool OAIRecoveryPointByResource::is_parent_recovery_point_arn_Valid() const{
    return m_parent_recovery_point_arn_isValid;
}

QString OAIRecoveryPointByResource::getResourceName() const {
    return m_resource_name;
}
void OAIRecoveryPointByResource::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIRecoveryPointByResource::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIRecoveryPointByResource::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAIRecoveryPointByResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recovery_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_vault_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_recovery_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecoveryPointByResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
