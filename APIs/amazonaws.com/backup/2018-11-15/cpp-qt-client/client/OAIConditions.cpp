/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditions::OAIConditions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditions::OAIConditions() {
    this->initializeModel();
}

OAIConditions::~OAIConditions() {}

void OAIConditions::initializeModel() {

    m_string_equals_isSet = false;
    m_string_equals_isValid = false;

    m_string_not_equals_isSet = false;
    m_string_not_equals_isValid = false;

    m_string_like_isSet = false;
    m_string_like_isValid = false;

    m_string_not_like_isSet = false;
    m_string_not_like_isValid = false;
}

void OAIConditions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditions::fromJsonObject(QJsonObject json) {

    m_string_equals_isValid = ::OpenAPI::fromJsonValue(m_string_equals, json[QString("StringEquals")]);
    m_string_equals_isSet = !json[QString("StringEquals")].isNull() && m_string_equals_isValid;

    m_string_not_equals_isValid = ::OpenAPI::fromJsonValue(m_string_not_equals, json[QString("StringNotEquals")]);
    m_string_not_equals_isSet = !json[QString("StringNotEquals")].isNull() && m_string_not_equals_isValid;

    m_string_like_isValid = ::OpenAPI::fromJsonValue(m_string_like, json[QString("StringLike")]);
    m_string_like_isSet = !json[QString("StringLike")].isNull() && m_string_like_isValid;

    m_string_not_like_isValid = ::OpenAPI::fromJsonValue(m_string_not_like, json[QString("StringNotLike")]);
    m_string_not_like_isSet = !json[QString("StringNotLike")].isNull() && m_string_not_like_isValid;
}

QString OAIConditions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditions::asJsonObject() const {
    QJsonObject obj;
    if (m_string_equals.isSet()) {
        obj.insert(QString("StringEquals"), ::OpenAPI::toJsonValue(m_string_equals));
    }
    if (m_string_not_equals.isSet()) {
        obj.insert(QString("StringNotEquals"), ::OpenAPI::toJsonValue(m_string_not_equals));
    }
    if (m_string_like.isSet()) {
        obj.insert(QString("StringLike"), ::OpenAPI::toJsonValue(m_string_like));
    }
    if (m_string_not_like.isSet()) {
        obj.insert(QString("StringNotLike"), ::OpenAPI::toJsonValue(m_string_not_like));
    }
    return obj;
}

QList OAIConditions::getStringEquals() const {
    return m_string_equals;
}
void OAIConditions::setStringEquals(const QList &string_equals) {
    m_string_equals = string_equals;
    m_string_equals_isSet = true;
}

bool OAIConditions::is_string_equals_Set() const{
    return m_string_equals_isSet;
}

bool OAIConditions::is_string_equals_Valid() const{
    return m_string_equals_isValid;
}

QList OAIConditions::getStringNotEquals() const {
    return m_string_not_equals;
}
void OAIConditions::setStringNotEquals(const QList &string_not_equals) {
    m_string_not_equals = string_not_equals;
    m_string_not_equals_isSet = true;
}

bool OAIConditions::is_string_not_equals_Set() const{
    return m_string_not_equals_isSet;
}

bool OAIConditions::is_string_not_equals_Valid() const{
    return m_string_not_equals_isValid;
}

QList OAIConditions::getStringLike() const {
    return m_string_like;
}
void OAIConditions::setStringLike(const QList &string_like) {
    m_string_like = string_like;
    m_string_like_isSet = true;
}

bool OAIConditions::is_string_like_Set() const{
    return m_string_like_isSet;
}

bool OAIConditions::is_string_like_Valid() const{
    return m_string_like_isValid;
}

QList OAIConditions::getStringNotLike() const {
    return m_string_not_like;
}
void OAIConditions::setStringNotLike(const QList &string_not_like) {
    m_string_not_like = string_not_like;
    m_string_not_like_isSet = true;
}

bool OAIConditions::is_string_not_like_Set() const{
    return m_string_not_like_isSet;
}

bool OAIConditions::is_string_not_like_Valid() const{
    return m_string_not_like_isValid;
}

bool OAIConditions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_string_equals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_not_equals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_like.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_not_like.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
