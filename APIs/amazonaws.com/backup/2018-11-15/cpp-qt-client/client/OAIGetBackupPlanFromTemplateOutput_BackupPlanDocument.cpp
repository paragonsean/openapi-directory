/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument() {
    this->initializeModel();
}

OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::~OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument() {}

void OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::initializeModel() {

    m_backup_plan_name_isSet = false;
    m_backup_plan_name_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_advanced_backup_settings_isSet = false;
    m_advanced_backup_settings_isValid = false;
}

void OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::fromJsonObject(QJsonObject json) {

    m_backup_plan_name_isValid = ::OpenAPI::fromJsonValue(m_backup_plan_name, json[QString("BackupPlanName")]);
    m_backup_plan_name_isSet = !json[QString("BackupPlanName")].isNull() && m_backup_plan_name_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("Rules")]);
    m_rules_isSet = !json[QString("Rules")].isNull() && m_rules_isValid;

    m_advanced_backup_settings_isValid = ::OpenAPI::fromJsonValue(m_advanced_backup_settings, json[QString("AdvancedBackupSettings")]);
    m_advanced_backup_settings_isSet = !json[QString("AdvancedBackupSettings")].isNull() && m_advanced_backup_settings_isValid;
}

QString OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_plan_name_isSet) {
        obj.insert(QString("BackupPlanName"), ::OpenAPI::toJsonValue(m_backup_plan_name));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("Rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_advanced_backup_settings.isSet()) {
        obj.insert(QString("AdvancedBackupSettings"), ::OpenAPI::toJsonValue(m_advanced_backup_settings));
    }
    return obj;
}

QString OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::getBackupPlanName() const {
    return m_backup_plan_name;
}
void OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::setBackupPlanName(const QString &backup_plan_name) {
    m_backup_plan_name = backup_plan_name;
    m_backup_plan_name_isSet = true;
}

bool OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::is_backup_plan_name_Set() const{
    return m_backup_plan_name_isSet;
}

bool OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::is_backup_plan_name_Valid() const{
    return m_backup_plan_name_isValid;
}

QList OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::getRules() const {
    return m_rules;
}
void OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::setRules(const QList &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::is_rules_Valid() const{
    return m_rules_isValid;
}

QList OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::getAdvancedBackupSettings() const {
    return m_advanced_backup_settings;
}
void OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::setAdvancedBackupSettings(const QList &advanced_backup_settings) {
    m_advanced_backup_settings = advanced_backup_settings;
    m_advanced_backup_settings_isSet = true;
}

bool OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::is_advanced_backup_settings_Set() const{
    return m_advanced_backup_settings_isSet;
}

bool OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::is_advanced_backup_settings_Valid() const{
    return m_advanced_backup_settings_isValid;
}

bool OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_plan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_backup_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBackupPlanFromTemplateOutput_BackupPlanDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backup_plan_name_isValid && m_rules_isValid && true;
}

} // namespace OpenAPI
