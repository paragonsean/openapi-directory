/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeBackupVaultOutput.h
 *
 * 
 */

#ifndef OAIDescribeBackupVaultOutput_H
#define OAIDescribeBackupVaultOutput_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeBackupVaultOutput : public OAIObject {
public:
    OAIDescribeBackupVaultOutput();
    OAIDescribeBackupVaultOutput(QString json);
    ~OAIDescribeBackupVaultOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBackupVaultName() const;
    void setBackupVaultName(const QString &backup_vault_name);
    bool is_backup_vault_name_Set() const;
    bool is_backup_vault_name_Valid() const;

    QString getBackupVaultArn() const;
    void setBackupVaultArn(const QString &backup_vault_arn);
    bool is_backup_vault_arn_Set() const;
    bool is_backup_vault_arn_Valid() const;

    QString getEncryptionKeyArn() const;
    void setEncryptionKeyArn(const QString &encryption_key_arn);
    bool is_encryption_key_arn_Set() const;
    bool is_encryption_key_arn_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QString getCreatorRequestId() const;
    void setCreatorRequestId(const QString &creator_request_id);
    bool is_creator_request_id_Set() const;
    bool is_creator_request_id_Valid() const;

    qint32 getNumberOfRecoveryPoints() const;
    void setNumberOfRecoveryPoints(const qint32 &number_of_recovery_points);
    bool is_number_of_recovery_points_Set() const;
    bool is_number_of_recovery_points_Valid() const;

    bool getLocked() const;
    void setLocked(const bool &locked);
    bool is_locked_Set() const;
    bool is_locked_Valid() const;

    qint32 getMinRetentionDays() const;
    void setMinRetentionDays(const qint32 &min_retention_days);
    bool is_min_retention_days_Set() const;
    bool is_min_retention_days_Valid() const;

    qint32 getMaxRetentionDays() const;
    void setMaxRetentionDays(const qint32 &max_retention_days);
    bool is_max_retention_days_Set() const;
    bool is_max_retention_days_Valid() const;

    QDateTime getLockDate() const;
    void setLockDate(const QDateTime &lock_date);
    bool is_lock_date_Set() const;
    bool is_lock_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_backup_vault_name;
    bool m_backup_vault_name_isSet;
    bool m_backup_vault_name_isValid;

    QString m_backup_vault_arn;
    bool m_backup_vault_arn_isSet;
    bool m_backup_vault_arn_isValid;

    QString m_encryption_key_arn;
    bool m_encryption_key_arn_isSet;
    bool m_encryption_key_arn_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QString m_creator_request_id;
    bool m_creator_request_id_isSet;
    bool m_creator_request_id_isValid;

    qint32 m_number_of_recovery_points;
    bool m_number_of_recovery_points_isSet;
    bool m_number_of_recovery_points_isValid;

    bool m_locked;
    bool m_locked_isSet;
    bool m_locked_isValid;

    qint32 m_min_retention_days;
    bool m_min_retention_days_isSet;
    bool m_min_retention_days_isValid;

    qint32 m_max_retention_days;
    bool m_max_retention_days_isSet;
    bool m_max_retention_days_isValid;

    QDateTime m_lock_date;
    bool m_lock_date_isSet;
    bool m_lock_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeBackupVaultOutput)

#endif // OAIDescribeBackupVaultOutput_H
