/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeBackupJobOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeBackupJobOutput::OAIDescribeBackupJobOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeBackupJobOutput::OAIDescribeBackupJobOutput() {
    this->initializeModel();
}

OAIDescribeBackupJobOutput::~OAIDescribeBackupJobOutput() {}

void OAIDescribeBackupJobOutput::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_backup_job_id_isSet = false;
    m_backup_job_id_isValid = false;

    m_backup_vault_name_isSet = false;
    m_backup_vault_name_isValid = false;

    m_backup_vault_arn_isSet = false;
    m_backup_vault_arn_isValid = false;

    m_recovery_point_arn_isSet = false;
    m_recovery_point_arn_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_completion_date_isSet = false;
    m_completion_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_percent_done_isSet = false;
    m_percent_done_isValid = false;

    m_backup_size_in_bytes_isSet = false;
    m_backup_size_in_bytes_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_bytes_transferred_isSet = false;
    m_bytes_transferred_isValid = false;

    m_expected_completion_date_isSet = false;
    m_expected_completion_date_isValid = false;

    m_start_by_isSet = false;
    m_start_by_isValid = false;

    m_backup_options_isSet = false;
    m_backup_options_isValid = false;

    m_backup_type_isSet = false;
    m_backup_type_isValid = false;

    m_parent_job_id_isSet = false;
    m_parent_job_id_isValid = false;

    m_is_parent_isSet = false;
    m_is_parent_isValid = false;

    m_number_of_child_jobs_isSet = false;
    m_number_of_child_jobs_isValid = false;

    m_child_jobs_in_state_isSet = false;
    m_child_jobs_in_state_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAIDescribeBackupJobOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeBackupJobOutput::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_backup_job_id_isValid = ::OpenAPI::fromJsonValue(m_backup_job_id, json[QString("BackupJobId")]);
    m_backup_job_id_isSet = !json[QString("BackupJobId")].isNull() && m_backup_job_id_isValid;

    m_backup_vault_name_isValid = ::OpenAPI::fromJsonValue(m_backup_vault_name, json[QString("BackupVaultName")]);
    m_backup_vault_name_isSet = !json[QString("BackupVaultName")].isNull() && m_backup_vault_name_isValid;

    m_backup_vault_arn_isValid = ::OpenAPI::fromJsonValue(m_backup_vault_arn, json[QString("BackupVaultArn")]);
    m_backup_vault_arn_isSet = !json[QString("BackupVaultArn")].isNull() && m_backup_vault_arn_isValid;

    m_recovery_point_arn_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_arn, json[QString("RecoveryPointArn")]);
    m_recovery_point_arn_isSet = !json[QString("RecoveryPointArn")].isNull() && m_recovery_point_arn_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_completion_date_isValid = ::OpenAPI::fromJsonValue(m_completion_date, json[QString("CompletionDate")]);
    m_completion_date_isSet = !json[QString("CompletionDate")].isNull() && m_completion_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_percent_done_isValid = ::OpenAPI::fromJsonValue(m_percent_done, json[QString("PercentDone")]);
    m_percent_done_isSet = !json[QString("PercentDone")].isNull() && m_percent_done_isValid;

    m_backup_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_backup_size_in_bytes, json[QString("BackupSizeInBytes")]);
    m_backup_size_in_bytes_isSet = !json[QString("BackupSizeInBytes")].isNull() && m_backup_size_in_bytes_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("IamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("IamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_bytes_transferred_isValid = ::OpenAPI::fromJsonValue(m_bytes_transferred, json[QString("BytesTransferred")]);
    m_bytes_transferred_isSet = !json[QString("BytesTransferred")].isNull() && m_bytes_transferred_isValid;

    m_expected_completion_date_isValid = ::OpenAPI::fromJsonValue(m_expected_completion_date, json[QString("ExpectedCompletionDate")]);
    m_expected_completion_date_isSet = !json[QString("ExpectedCompletionDate")].isNull() && m_expected_completion_date_isValid;

    m_start_by_isValid = ::OpenAPI::fromJsonValue(m_start_by, json[QString("StartBy")]);
    m_start_by_isSet = !json[QString("StartBy")].isNull() && m_start_by_isValid;

    m_backup_options_isValid = ::OpenAPI::fromJsonValue(m_backup_options, json[QString("BackupOptions")]);
    m_backup_options_isSet = !json[QString("BackupOptions")].isNull() && m_backup_options_isValid;

    m_backup_type_isValid = ::OpenAPI::fromJsonValue(m_backup_type, json[QString("BackupType")]);
    m_backup_type_isSet = !json[QString("BackupType")].isNull() && m_backup_type_isValid;

    m_parent_job_id_isValid = ::OpenAPI::fromJsonValue(m_parent_job_id, json[QString("ParentJobId")]);
    m_parent_job_id_isSet = !json[QString("ParentJobId")].isNull() && m_parent_job_id_isValid;

    m_is_parent_isValid = ::OpenAPI::fromJsonValue(m_is_parent, json[QString("IsParent")]);
    m_is_parent_isSet = !json[QString("IsParent")].isNull() && m_is_parent_isValid;

    m_number_of_child_jobs_isValid = ::OpenAPI::fromJsonValue(m_number_of_child_jobs, json[QString("NumberOfChildJobs")]);
    m_number_of_child_jobs_isSet = !json[QString("NumberOfChildJobs")].isNull() && m_number_of_child_jobs_isValid;

    m_child_jobs_in_state_isValid = ::OpenAPI::fromJsonValue(m_child_jobs_in_state, json[QString("ChildJobsInState")]);
    m_child_jobs_in_state_isSet = !json[QString("ChildJobsInState")].isNull() && m_child_jobs_in_state_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("ResourceName")]);
    m_resource_name_isSet = !json[QString("ResourceName")].isNull() && m_resource_name_isValid;
}

QString OAIDescribeBackupJobOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeBackupJobOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_backup_job_id_isSet) {
        obj.insert(QString("BackupJobId"), ::OpenAPI::toJsonValue(m_backup_job_id));
    }
    if (m_backup_vault_name_isSet) {
        obj.insert(QString("BackupVaultName"), ::OpenAPI::toJsonValue(m_backup_vault_name));
    }
    if (m_backup_vault_arn_isSet) {
        obj.insert(QString("BackupVaultArn"), ::OpenAPI::toJsonValue(m_backup_vault_arn));
    }
    if (m_recovery_point_arn_isSet) {
        obj.insert(QString("RecoveryPointArn"), ::OpenAPI::toJsonValue(m_recovery_point_arn));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_completion_date_isSet) {
        obj.insert(QString("CompletionDate"), ::OpenAPI::toJsonValue(m_completion_date));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_percent_done_isSet) {
        obj.insert(QString("PercentDone"), ::OpenAPI::toJsonValue(m_percent_done));
    }
    if (m_backup_size_in_bytes_isSet) {
        obj.insert(QString("BackupSizeInBytes"), ::OpenAPI::toJsonValue(m_backup_size_in_bytes));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("IamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_bytes_transferred_isSet) {
        obj.insert(QString("BytesTransferred"), ::OpenAPI::toJsonValue(m_bytes_transferred));
    }
    if (m_expected_completion_date_isSet) {
        obj.insert(QString("ExpectedCompletionDate"), ::OpenAPI::toJsonValue(m_expected_completion_date));
    }
    if (m_start_by_isSet) {
        obj.insert(QString("StartBy"), ::OpenAPI::toJsonValue(m_start_by));
    }
    if (m_backup_options.isSet()) {
        obj.insert(QString("BackupOptions"), ::OpenAPI::toJsonValue(m_backup_options));
    }
    if (m_backup_type_isSet) {
        obj.insert(QString("BackupType"), ::OpenAPI::toJsonValue(m_backup_type));
    }
    if (m_parent_job_id_isSet) {
        obj.insert(QString("ParentJobId"), ::OpenAPI::toJsonValue(m_parent_job_id));
    }
    if (m_is_parent_isSet) {
        obj.insert(QString("IsParent"), ::OpenAPI::toJsonValue(m_is_parent));
    }
    if (m_number_of_child_jobs_isSet) {
        obj.insert(QString("NumberOfChildJobs"), ::OpenAPI::toJsonValue(m_number_of_child_jobs));
    }
    if (m_child_jobs_in_state.isSet()) {
        obj.insert(QString("ChildJobsInState"), ::OpenAPI::toJsonValue(m_child_jobs_in_state));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("ResourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

QString OAIDescribeBackupJobOutput::getAccountId() const {
    return m_account_id;
}
void OAIDescribeBackupJobOutput::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDescribeBackupJobOutput::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIDescribeBackupJobOutput::getBackupJobId() const {
    return m_backup_job_id;
}
void OAIDescribeBackupJobOutput::setBackupJobId(const QString &backup_job_id) {
    m_backup_job_id = backup_job_id;
    m_backup_job_id_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_backup_job_id_Set() const{
    return m_backup_job_id_isSet;
}

bool OAIDescribeBackupJobOutput::is_backup_job_id_Valid() const{
    return m_backup_job_id_isValid;
}

QString OAIDescribeBackupJobOutput::getBackupVaultName() const {
    return m_backup_vault_name;
}
void OAIDescribeBackupJobOutput::setBackupVaultName(const QString &backup_vault_name) {
    m_backup_vault_name = backup_vault_name;
    m_backup_vault_name_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_backup_vault_name_Set() const{
    return m_backup_vault_name_isSet;
}

bool OAIDescribeBackupJobOutput::is_backup_vault_name_Valid() const{
    return m_backup_vault_name_isValid;
}

QString OAIDescribeBackupJobOutput::getBackupVaultArn() const {
    return m_backup_vault_arn;
}
void OAIDescribeBackupJobOutput::setBackupVaultArn(const QString &backup_vault_arn) {
    m_backup_vault_arn = backup_vault_arn;
    m_backup_vault_arn_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_backup_vault_arn_Set() const{
    return m_backup_vault_arn_isSet;
}

bool OAIDescribeBackupJobOutput::is_backup_vault_arn_Valid() const{
    return m_backup_vault_arn_isValid;
}

QString OAIDescribeBackupJobOutput::getRecoveryPointArn() const {
    return m_recovery_point_arn;
}
void OAIDescribeBackupJobOutput::setRecoveryPointArn(const QString &recovery_point_arn) {
    m_recovery_point_arn = recovery_point_arn;
    m_recovery_point_arn_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_recovery_point_arn_Set() const{
    return m_recovery_point_arn_isSet;
}

bool OAIDescribeBackupJobOutput::is_recovery_point_arn_Valid() const{
    return m_recovery_point_arn_isValid;
}

QString OAIDescribeBackupJobOutput::getResourceArn() const {
    return m_resource_arn;
}
void OAIDescribeBackupJobOutput::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIDescribeBackupJobOutput::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QDateTime OAIDescribeBackupJobOutput::getCreationDate() const {
    return m_creation_date;
}
void OAIDescribeBackupJobOutput::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIDescribeBackupJobOutput::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIDescribeBackupJobOutput::getCompletionDate() const {
    return m_completion_date;
}
void OAIDescribeBackupJobOutput::setCompletionDate(const QDateTime &completion_date) {
    m_completion_date = completion_date;
    m_completion_date_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_completion_date_Set() const{
    return m_completion_date_isSet;
}

bool OAIDescribeBackupJobOutput::is_completion_date_Valid() const{
    return m_completion_date_isValid;
}

OAIBackupJobState OAIDescribeBackupJobOutput::getState() const {
    return m_state;
}
void OAIDescribeBackupJobOutput::setState(const OAIBackupJobState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDescribeBackupJobOutput::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDescribeBackupJobOutput::getStatusMessage() const {
    return m_status_message;
}
void OAIDescribeBackupJobOutput::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIDescribeBackupJobOutput::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIDescribeBackupJobOutput::getPercentDone() const {
    return m_percent_done;
}
void OAIDescribeBackupJobOutput::setPercentDone(const QString &percent_done) {
    m_percent_done = percent_done;
    m_percent_done_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_percent_done_Set() const{
    return m_percent_done_isSet;
}

bool OAIDescribeBackupJobOutput::is_percent_done_Valid() const{
    return m_percent_done_isValid;
}

qint32 OAIDescribeBackupJobOutput::getBackupSizeInBytes() const {
    return m_backup_size_in_bytes;
}
void OAIDescribeBackupJobOutput::setBackupSizeInBytes(const qint32 &backup_size_in_bytes) {
    m_backup_size_in_bytes = backup_size_in_bytes;
    m_backup_size_in_bytes_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_backup_size_in_bytes_Set() const{
    return m_backup_size_in_bytes_isSet;
}

bool OAIDescribeBackupJobOutput::is_backup_size_in_bytes_Valid() const{
    return m_backup_size_in_bytes_isValid;
}

QString OAIDescribeBackupJobOutput::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAIDescribeBackupJobOutput::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAIDescribeBackupJobOutput::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

OAIDescribeBackupJobOutput_CreatedBy OAIDescribeBackupJobOutput::getCreatedBy() const {
    return m_created_by;
}
void OAIDescribeBackupJobOutput::setCreatedBy(const OAIDescribeBackupJobOutput_CreatedBy &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDescribeBackupJobOutput::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIDescribeBackupJobOutput::getResourceType() const {
    return m_resource_type;
}
void OAIDescribeBackupJobOutput::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIDescribeBackupJobOutput::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

qint32 OAIDescribeBackupJobOutput::getBytesTransferred() const {
    return m_bytes_transferred;
}
void OAIDescribeBackupJobOutput::setBytesTransferred(const qint32 &bytes_transferred) {
    m_bytes_transferred = bytes_transferred;
    m_bytes_transferred_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_bytes_transferred_Set() const{
    return m_bytes_transferred_isSet;
}

bool OAIDescribeBackupJobOutput::is_bytes_transferred_Valid() const{
    return m_bytes_transferred_isValid;
}

QDateTime OAIDescribeBackupJobOutput::getExpectedCompletionDate() const {
    return m_expected_completion_date;
}
void OAIDescribeBackupJobOutput::setExpectedCompletionDate(const QDateTime &expected_completion_date) {
    m_expected_completion_date = expected_completion_date;
    m_expected_completion_date_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_expected_completion_date_Set() const{
    return m_expected_completion_date_isSet;
}

bool OAIDescribeBackupJobOutput::is_expected_completion_date_Valid() const{
    return m_expected_completion_date_isValid;
}

QDateTime OAIDescribeBackupJobOutput::getStartBy() const {
    return m_start_by;
}
void OAIDescribeBackupJobOutput::setStartBy(const QDateTime &start_by) {
    m_start_by = start_by;
    m_start_by_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_start_by_Set() const{
    return m_start_by_isSet;
}

bool OAIDescribeBackupJobOutput::is_start_by_Valid() const{
    return m_start_by_isValid;
}

QMap OAIDescribeBackupJobOutput::getBackupOptions() const {
    return m_backup_options;
}
void OAIDescribeBackupJobOutput::setBackupOptions(const QMap &backup_options) {
    m_backup_options = backup_options;
    m_backup_options_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_backup_options_Set() const{
    return m_backup_options_isSet;
}

bool OAIDescribeBackupJobOutput::is_backup_options_Valid() const{
    return m_backup_options_isValid;
}

QString OAIDescribeBackupJobOutput::getBackupType() const {
    return m_backup_type;
}
void OAIDescribeBackupJobOutput::setBackupType(const QString &backup_type) {
    m_backup_type = backup_type;
    m_backup_type_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_backup_type_Set() const{
    return m_backup_type_isSet;
}

bool OAIDescribeBackupJobOutput::is_backup_type_Valid() const{
    return m_backup_type_isValid;
}

QString OAIDescribeBackupJobOutput::getParentJobId() const {
    return m_parent_job_id;
}
void OAIDescribeBackupJobOutput::setParentJobId(const QString &parent_job_id) {
    m_parent_job_id = parent_job_id;
    m_parent_job_id_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_parent_job_id_Set() const{
    return m_parent_job_id_isSet;
}

bool OAIDescribeBackupJobOutput::is_parent_job_id_Valid() const{
    return m_parent_job_id_isValid;
}

bool OAIDescribeBackupJobOutput::getIsParent() const {
    return m_is_parent;
}
void OAIDescribeBackupJobOutput::setIsParent(const bool &is_parent) {
    m_is_parent = is_parent;
    m_is_parent_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_is_parent_Set() const{
    return m_is_parent_isSet;
}

bool OAIDescribeBackupJobOutput::is_is_parent_Valid() const{
    return m_is_parent_isValid;
}

qint32 OAIDescribeBackupJobOutput::getNumberOfChildJobs() const {
    return m_number_of_child_jobs;
}
void OAIDescribeBackupJobOutput::setNumberOfChildJobs(const qint32 &number_of_child_jobs) {
    m_number_of_child_jobs = number_of_child_jobs;
    m_number_of_child_jobs_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_number_of_child_jobs_Set() const{
    return m_number_of_child_jobs_isSet;
}

bool OAIDescribeBackupJobOutput::is_number_of_child_jobs_Valid() const{
    return m_number_of_child_jobs_isValid;
}

QMap OAIDescribeBackupJobOutput::getChildJobsInState() const {
    return m_child_jobs_in_state;
}
void OAIDescribeBackupJobOutput::setChildJobsInState(const QMap &child_jobs_in_state) {
    m_child_jobs_in_state = child_jobs_in_state;
    m_child_jobs_in_state_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_child_jobs_in_state_Set() const{
    return m_child_jobs_in_state_isSet;
}

bool OAIDescribeBackupJobOutput::is_child_jobs_in_state_Valid() const{
    return m_child_jobs_in_state_isValid;
}

QString OAIDescribeBackupJobOutput::getResourceName() const {
    return m_resource_name;
}
void OAIDescribeBackupJobOutput::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIDescribeBackupJobOutput::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIDescribeBackupJobOutput::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAIDescribeBackupJobOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_vault_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_vault_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_done_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_child_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_jobs_in_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeBackupJobOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
