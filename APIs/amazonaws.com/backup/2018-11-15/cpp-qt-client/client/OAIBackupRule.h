/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBackupRule.h
 *
 * Specifies a scheduled task used to back up a selection of resources.
 */

#ifndef OAIBackupRule_H
#define OAIBackupRule_H

#include <QJsonObject>

#include "OAIBackupRule_Lifecycle.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBackupRule_Lifecycle;

class OAIBackupRule : public OAIObject {
public:
    OAIBackupRule();
    OAIBackupRule(QString json);
    ~OAIBackupRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRuleName() const;
    void setRuleName(const QString &rule_name);
    bool is_rule_name_Set() const;
    bool is_rule_name_Valid() const;

    QString getTargetBackupVaultName() const;
    void setTargetBackupVaultName(const QString &target_backup_vault_name);
    bool is_target_backup_vault_name_Set() const;
    bool is_target_backup_vault_name_Valid() const;

    QString getScheduleExpression() const;
    void setScheduleExpression(const QString &schedule_expression);
    bool is_schedule_expression_Set() const;
    bool is_schedule_expression_Valid() const;

    qint32 getStartWindowMinutes() const;
    void setStartWindowMinutes(const qint32 &start_window_minutes);
    bool is_start_window_minutes_Set() const;
    bool is_start_window_minutes_Valid() const;

    qint32 getCompletionWindowMinutes() const;
    void setCompletionWindowMinutes(const qint32 &completion_window_minutes);
    bool is_completion_window_minutes_Set() const;
    bool is_completion_window_minutes_Valid() const;

    OAIBackupRule_Lifecycle getLifecycle() const;
    void setLifecycle(const OAIBackupRule_Lifecycle &lifecycle);
    bool is_lifecycle_Set() const;
    bool is_lifecycle_Valid() const;

    QMap getRecoveryPointTags() const;
    void setRecoveryPointTags(const QMap &recovery_point_tags);
    bool is_recovery_point_tags_Set() const;
    bool is_recovery_point_tags_Valid() const;

    QString getRuleId() const;
    void setRuleId(const QString &rule_id);
    bool is_rule_id_Set() const;
    bool is_rule_id_Valid() const;

    QList getCopyActions() const;
    void setCopyActions(const QList &copy_actions);
    bool is_copy_actions_Set() const;
    bool is_copy_actions_Valid() const;

    bool getEnableContinuousBackup() const;
    void setEnableContinuousBackup(const bool &enable_continuous_backup);
    bool is_enable_continuous_backup_Set() const;
    bool is_enable_continuous_backup_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_rule_name;
    bool m_rule_name_isSet;
    bool m_rule_name_isValid;

    QString m_target_backup_vault_name;
    bool m_target_backup_vault_name_isSet;
    bool m_target_backup_vault_name_isValid;

    QString m_schedule_expression;
    bool m_schedule_expression_isSet;
    bool m_schedule_expression_isValid;

    qint32 m_start_window_minutes;
    bool m_start_window_minutes_isSet;
    bool m_start_window_minutes_isValid;

    qint32 m_completion_window_minutes;
    bool m_completion_window_minutes_isSet;
    bool m_completion_window_minutes_isValid;

    OAIBackupRule_Lifecycle m_lifecycle;
    bool m_lifecycle_isSet;
    bool m_lifecycle_isValid;

    QMap m_recovery_point_tags;
    bool m_recovery_point_tags_isSet;
    bool m_recovery_point_tags_isValid;

    QString m_rule_id;
    bool m_rule_id_isSet;
    bool m_rule_id_isValid;

    QList m_copy_actions;
    bool m_copy_actions_isSet;
    bool m_copy_actions_isValid;

    bool m_enable_continuous_backup;
    bool m_enable_continuous_backup_isSet;
    bool m_enable_continuous_backup_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBackupRule)

#endif // OAIBackupRule_H
