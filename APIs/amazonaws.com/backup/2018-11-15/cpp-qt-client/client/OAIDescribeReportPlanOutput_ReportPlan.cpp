/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeReportPlanOutput_ReportPlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeReportPlanOutput_ReportPlan::OAIDescribeReportPlanOutput_ReportPlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeReportPlanOutput_ReportPlan::OAIDescribeReportPlanOutput_ReportPlan() {
    this->initializeModel();
}

OAIDescribeReportPlanOutput_ReportPlan::~OAIDescribeReportPlanOutput_ReportPlan() {}

void OAIDescribeReportPlanOutput_ReportPlan::initializeModel() {

    m_report_plan_arn_isSet = false;
    m_report_plan_arn_isValid = false;

    m_report_plan_name_isSet = false;
    m_report_plan_name_isValid = false;

    m_report_plan_description_isSet = false;
    m_report_plan_description_isValid = false;

    m_report_setting_isSet = false;
    m_report_setting_isValid = false;

    m_report_delivery_channel_isSet = false;
    m_report_delivery_channel_isValid = false;

    m_deployment_status_isSet = false;
    m_deployment_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_attempted_execution_time_isSet = false;
    m_last_attempted_execution_time_isValid = false;

    m_last_successful_execution_time_isSet = false;
    m_last_successful_execution_time_isValid = false;
}

void OAIDescribeReportPlanOutput_ReportPlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeReportPlanOutput_ReportPlan::fromJsonObject(QJsonObject json) {

    m_report_plan_arn_isValid = ::OpenAPI::fromJsonValue(m_report_plan_arn, json[QString("ReportPlanArn")]);
    m_report_plan_arn_isSet = !json[QString("ReportPlanArn")].isNull() && m_report_plan_arn_isValid;

    m_report_plan_name_isValid = ::OpenAPI::fromJsonValue(m_report_plan_name, json[QString("ReportPlanName")]);
    m_report_plan_name_isSet = !json[QString("ReportPlanName")].isNull() && m_report_plan_name_isValid;

    m_report_plan_description_isValid = ::OpenAPI::fromJsonValue(m_report_plan_description, json[QString("ReportPlanDescription")]);
    m_report_plan_description_isSet = !json[QString("ReportPlanDescription")].isNull() && m_report_plan_description_isValid;

    m_report_setting_isValid = ::OpenAPI::fromJsonValue(m_report_setting, json[QString("ReportSetting")]);
    m_report_setting_isSet = !json[QString("ReportSetting")].isNull() && m_report_setting_isValid;

    m_report_delivery_channel_isValid = ::OpenAPI::fromJsonValue(m_report_delivery_channel, json[QString("ReportDeliveryChannel")]);
    m_report_delivery_channel_isSet = !json[QString("ReportDeliveryChannel")].isNull() && m_report_delivery_channel_isValid;

    m_deployment_status_isValid = ::OpenAPI::fromJsonValue(m_deployment_status, json[QString("DeploymentStatus")]);
    m_deployment_status_isSet = !json[QString("DeploymentStatus")].isNull() && m_deployment_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_attempted_execution_time_isValid = ::OpenAPI::fromJsonValue(m_last_attempted_execution_time, json[QString("LastAttemptedExecutionTime")]);
    m_last_attempted_execution_time_isSet = !json[QString("LastAttemptedExecutionTime")].isNull() && m_last_attempted_execution_time_isValid;

    m_last_successful_execution_time_isValid = ::OpenAPI::fromJsonValue(m_last_successful_execution_time, json[QString("LastSuccessfulExecutionTime")]);
    m_last_successful_execution_time_isSet = !json[QString("LastSuccessfulExecutionTime")].isNull() && m_last_successful_execution_time_isValid;
}

QString OAIDescribeReportPlanOutput_ReportPlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeReportPlanOutput_ReportPlan::asJsonObject() const {
    QJsonObject obj;
    if (m_report_plan_arn_isSet) {
        obj.insert(QString("ReportPlanArn"), ::OpenAPI::toJsonValue(m_report_plan_arn));
    }
    if (m_report_plan_name_isSet) {
        obj.insert(QString("ReportPlanName"), ::OpenAPI::toJsonValue(m_report_plan_name));
    }
    if (m_report_plan_description_isSet) {
        obj.insert(QString("ReportPlanDescription"), ::OpenAPI::toJsonValue(m_report_plan_description));
    }
    if (m_report_setting.isSet()) {
        obj.insert(QString("ReportSetting"), ::OpenAPI::toJsonValue(m_report_setting));
    }
    if (m_report_delivery_channel.isSet()) {
        obj.insert(QString("ReportDeliveryChannel"), ::OpenAPI::toJsonValue(m_report_delivery_channel));
    }
    if (m_deployment_status_isSet) {
        obj.insert(QString("DeploymentStatus"), ::OpenAPI::toJsonValue(m_deployment_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_attempted_execution_time_isSet) {
        obj.insert(QString("LastAttemptedExecutionTime"), ::OpenAPI::toJsonValue(m_last_attempted_execution_time));
    }
    if (m_last_successful_execution_time_isSet) {
        obj.insert(QString("LastSuccessfulExecutionTime"), ::OpenAPI::toJsonValue(m_last_successful_execution_time));
    }
    return obj;
}

QString OAIDescribeReportPlanOutput_ReportPlan::getReportPlanArn() const {
    return m_report_plan_arn;
}
void OAIDescribeReportPlanOutput_ReportPlan::setReportPlanArn(const QString &report_plan_arn) {
    m_report_plan_arn = report_plan_arn;
    m_report_plan_arn_isSet = true;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_report_plan_arn_Set() const{
    return m_report_plan_arn_isSet;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_report_plan_arn_Valid() const{
    return m_report_plan_arn_isValid;
}

QString OAIDescribeReportPlanOutput_ReportPlan::getReportPlanName() const {
    return m_report_plan_name;
}
void OAIDescribeReportPlanOutput_ReportPlan::setReportPlanName(const QString &report_plan_name) {
    m_report_plan_name = report_plan_name;
    m_report_plan_name_isSet = true;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_report_plan_name_Set() const{
    return m_report_plan_name_isSet;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_report_plan_name_Valid() const{
    return m_report_plan_name_isValid;
}

QString OAIDescribeReportPlanOutput_ReportPlan::getReportPlanDescription() const {
    return m_report_plan_description;
}
void OAIDescribeReportPlanOutput_ReportPlan::setReportPlanDescription(const QString &report_plan_description) {
    m_report_plan_description = report_plan_description;
    m_report_plan_description_isSet = true;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_report_plan_description_Set() const{
    return m_report_plan_description_isSet;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_report_plan_description_Valid() const{
    return m_report_plan_description_isValid;
}

OAICreateReportPlanInput_ReportSetting OAIDescribeReportPlanOutput_ReportPlan::getReportSetting() const {
    return m_report_setting;
}
void OAIDescribeReportPlanOutput_ReportPlan::setReportSetting(const OAICreateReportPlanInput_ReportSetting &report_setting) {
    m_report_setting = report_setting;
    m_report_setting_isSet = true;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_report_setting_Set() const{
    return m_report_setting_isSet;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_report_setting_Valid() const{
    return m_report_setting_isValid;
}

OAIReportPlan_ReportDeliveryChannel OAIDescribeReportPlanOutput_ReportPlan::getReportDeliveryChannel() const {
    return m_report_delivery_channel;
}
void OAIDescribeReportPlanOutput_ReportPlan::setReportDeliveryChannel(const OAIReportPlan_ReportDeliveryChannel &report_delivery_channel) {
    m_report_delivery_channel = report_delivery_channel;
    m_report_delivery_channel_isSet = true;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_report_delivery_channel_Set() const{
    return m_report_delivery_channel_isSet;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_report_delivery_channel_Valid() const{
    return m_report_delivery_channel_isValid;
}

QString OAIDescribeReportPlanOutput_ReportPlan::getDeploymentStatus() const {
    return m_deployment_status;
}
void OAIDescribeReportPlanOutput_ReportPlan::setDeploymentStatus(const QString &deployment_status) {
    m_deployment_status = deployment_status;
    m_deployment_status_isSet = true;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_deployment_status_Set() const{
    return m_deployment_status_isSet;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_deployment_status_Valid() const{
    return m_deployment_status_isValid;
}

QDateTime OAIDescribeReportPlanOutput_ReportPlan::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeReportPlanOutput_ReportPlan::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeReportPlanOutput_ReportPlan::getLastAttemptedExecutionTime() const {
    return m_last_attempted_execution_time;
}
void OAIDescribeReportPlanOutput_ReportPlan::setLastAttemptedExecutionTime(const QDateTime &last_attempted_execution_time) {
    m_last_attempted_execution_time = last_attempted_execution_time;
    m_last_attempted_execution_time_isSet = true;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_last_attempted_execution_time_Set() const{
    return m_last_attempted_execution_time_isSet;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_last_attempted_execution_time_Valid() const{
    return m_last_attempted_execution_time_isValid;
}

QDateTime OAIDescribeReportPlanOutput_ReportPlan::getLastSuccessfulExecutionTime() const {
    return m_last_successful_execution_time;
}
void OAIDescribeReportPlanOutput_ReportPlan::setLastSuccessfulExecutionTime(const QDateTime &last_successful_execution_time) {
    m_last_successful_execution_time = last_successful_execution_time;
    m_last_successful_execution_time_isSet = true;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_last_successful_execution_time_Set() const{
    return m_last_successful_execution_time_isSet;
}

bool OAIDescribeReportPlanOutput_ReportPlan::is_last_successful_execution_time_Valid() const{
    return m_last_successful_execution_time_isValid;
}

bool OAIDescribeReportPlanOutput_ReportPlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_plan_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_plan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_plan_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_delivery_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_attempted_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_successful_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeReportPlanOutput_ReportPlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
