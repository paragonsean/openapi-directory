/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProtectedResourceOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProtectedResourceOutput::OAIDescribeProtectedResourceOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProtectedResourceOutput::OAIDescribeProtectedResourceOutput() {
    this->initializeModel();
}

OAIDescribeProtectedResourceOutput::~OAIDescribeProtectedResourceOutput() {}

void OAIDescribeProtectedResourceOutput::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_last_backup_time_isSet = false;
    m_last_backup_time_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAIDescribeProtectedResourceOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProtectedResourceOutput::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_last_backup_time_isValid = ::OpenAPI::fromJsonValue(m_last_backup_time, json[QString("LastBackupTime")]);
    m_last_backup_time_isSet = !json[QString("LastBackupTime")].isNull() && m_last_backup_time_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("ResourceName")]);
    m_resource_name_isSet = !json[QString("ResourceName")].isNull() && m_resource_name_isValid;
}

QString OAIDescribeProtectedResourceOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProtectedResourceOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_last_backup_time_isSet) {
        obj.insert(QString("LastBackupTime"), ::OpenAPI::toJsonValue(m_last_backup_time));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("ResourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

QString OAIDescribeProtectedResourceOutput::getResourceArn() const {
    return m_resource_arn;
}
void OAIDescribeProtectedResourceOutput::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIDescribeProtectedResourceOutput::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIDescribeProtectedResourceOutput::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAIDescribeProtectedResourceOutput::getResourceType() const {
    return m_resource_type;
}
void OAIDescribeProtectedResourceOutput::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIDescribeProtectedResourceOutput::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIDescribeProtectedResourceOutput::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QDateTime OAIDescribeProtectedResourceOutput::getLastBackupTime() const {
    return m_last_backup_time;
}
void OAIDescribeProtectedResourceOutput::setLastBackupTime(const QDateTime &last_backup_time) {
    m_last_backup_time = last_backup_time;
    m_last_backup_time_isSet = true;
}

bool OAIDescribeProtectedResourceOutput::is_last_backup_time_Set() const{
    return m_last_backup_time_isSet;
}

bool OAIDescribeProtectedResourceOutput::is_last_backup_time_Valid() const{
    return m_last_backup_time_isValid;
}

QString OAIDescribeProtectedResourceOutput::getResourceName() const {
    return m_resource_name;
}
void OAIDescribeProtectedResourceOutput::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIDescribeProtectedResourceOutput::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIDescribeProtectedResourceOutput::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAIDescribeProtectedResourceOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_backup_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProtectedResourceOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
