/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecoveryPointByBackupVault.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecoveryPointByBackupVault::OAIRecoveryPointByBackupVault(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecoveryPointByBackupVault::OAIRecoveryPointByBackupVault() {
    this->initializeModel();
}

OAIRecoveryPointByBackupVault::~OAIRecoveryPointByBackupVault() {}

void OAIRecoveryPointByBackupVault::initializeModel() {

    m_recovery_point_arn_isSet = false;
    m_recovery_point_arn_isValid = false;

    m_backup_vault_name_isSet = false;
    m_backup_vault_name_isValid = false;

    m_backup_vault_arn_isSet = false;
    m_backup_vault_arn_isValid = false;

    m_source_backup_vault_arn_isSet = false;
    m_source_backup_vault_arn_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_completion_date_isSet = false;
    m_completion_date_isValid = false;

    m_backup_size_in_bytes_isSet = false;
    m_backup_size_in_bytes_isValid = false;

    m_calculated_lifecycle_isSet = false;
    m_calculated_lifecycle_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_encryption_key_arn_isSet = false;
    m_encryption_key_arn_isValid = false;

    m_is_encrypted_isSet = false;
    m_is_encrypted_isValid = false;

    m_last_restore_time_isSet = false;
    m_last_restore_time_isValid = false;

    m_parent_recovery_point_arn_isSet = false;
    m_parent_recovery_point_arn_isValid = false;

    m_composite_member_identifier_isSet = false;
    m_composite_member_identifier_isValid = false;

    m_is_parent_isSet = false;
    m_is_parent_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAIRecoveryPointByBackupVault::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecoveryPointByBackupVault::fromJsonObject(QJsonObject json) {

    m_recovery_point_arn_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_arn, json[QString("RecoveryPointArn")]);
    m_recovery_point_arn_isSet = !json[QString("RecoveryPointArn")].isNull() && m_recovery_point_arn_isValid;

    m_backup_vault_name_isValid = ::OpenAPI::fromJsonValue(m_backup_vault_name, json[QString("BackupVaultName")]);
    m_backup_vault_name_isSet = !json[QString("BackupVaultName")].isNull() && m_backup_vault_name_isValid;

    m_backup_vault_arn_isValid = ::OpenAPI::fromJsonValue(m_backup_vault_arn, json[QString("BackupVaultArn")]);
    m_backup_vault_arn_isSet = !json[QString("BackupVaultArn")].isNull() && m_backup_vault_arn_isValid;

    m_source_backup_vault_arn_isValid = ::OpenAPI::fromJsonValue(m_source_backup_vault_arn, json[QString("SourceBackupVaultArn")]);
    m_source_backup_vault_arn_isSet = !json[QString("SourceBackupVaultArn")].isNull() && m_source_backup_vault_arn_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("IamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("IamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_completion_date_isValid = ::OpenAPI::fromJsonValue(m_completion_date, json[QString("CompletionDate")]);
    m_completion_date_isSet = !json[QString("CompletionDate")].isNull() && m_completion_date_isValid;

    m_backup_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_backup_size_in_bytes, json[QString("BackupSizeInBytes")]);
    m_backup_size_in_bytes_isSet = !json[QString("BackupSizeInBytes")].isNull() && m_backup_size_in_bytes_isValid;

    m_calculated_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_calculated_lifecycle, json[QString("CalculatedLifecycle")]);
    m_calculated_lifecycle_isSet = !json[QString("CalculatedLifecycle")].isNull() && m_calculated_lifecycle_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;

    m_encryption_key_arn_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_arn, json[QString("EncryptionKeyArn")]);
    m_encryption_key_arn_isSet = !json[QString("EncryptionKeyArn")].isNull() && m_encryption_key_arn_isValid;

    m_is_encrypted_isValid = ::OpenAPI::fromJsonValue(m_is_encrypted, json[QString("IsEncrypted")]);
    m_is_encrypted_isSet = !json[QString("IsEncrypted")].isNull() && m_is_encrypted_isValid;

    m_last_restore_time_isValid = ::OpenAPI::fromJsonValue(m_last_restore_time, json[QString("LastRestoreTime")]);
    m_last_restore_time_isSet = !json[QString("LastRestoreTime")].isNull() && m_last_restore_time_isValid;

    m_parent_recovery_point_arn_isValid = ::OpenAPI::fromJsonValue(m_parent_recovery_point_arn, json[QString("ParentRecoveryPointArn")]);
    m_parent_recovery_point_arn_isSet = !json[QString("ParentRecoveryPointArn")].isNull() && m_parent_recovery_point_arn_isValid;

    m_composite_member_identifier_isValid = ::OpenAPI::fromJsonValue(m_composite_member_identifier, json[QString("CompositeMemberIdentifier")]);
    m_composite_member_identifier_isSet = !json[QString("CompositeMemberIdentifier")].isNull() && m_composite_member_identifier_isValid;

    m_is_parent_isValid = ::OpenAPI::fromJsonValue(m_is_parent, json[QString("IsParent")]);
    m_is_parent_isSet = !json[QString("IsParent")].isNull() && m_is_parent_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("ResourceName")]);
    m_resource_name_isSet = !json[QString("ResourceName")].isNull() && m_resource_name_isValid;
}

QString OAIRecoveryPointByBackupVault::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecoveryPointByBackupVault::asJsonObject() const {
    QJsonObject obj;
    if (m_recovery_point_arn_isSet) {
        obj.insert(QString("RecoveryPointArn"), ::OpenAPI::toJsonValue(m_recovery_point_arn));
    }
    if (m_backup_vault_name_isSet) {
        obj.insert(QString("BackupVaultName"), ::OpenAPI::toJsonValue(m_backup_vault_name));
    }
    if (m_backup_vault_arn_isSet) {
        obj.insert(QString("BackupVaultArn"), ::OpenAPI::toJsonValue(m_backup_vault_arn));
    }
    if (m_source_backup_vault_arn_isSet) {
        obj.insert(QString("SourceBackupVaultArn"), ::OpenAPI::toJsonValue(m_source_backup_vault_arn));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("IamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_completion_date_isSet) {
        obj.insert(QString("CompletionDate"), ::OpenAPI::toJsonValue(m_completion_date));
    }
    if (m_backup_size_in_bytes_isSet) {
        obj.insert(QString("BackupSizeInBytes"), ::OpenAPI::toJsonValue(m_backup_size_in_bytes));
    }
    if (m_calculated_lifecycle.isSet()) {
        obj.insert(QString("CalculatedLifecycle"), ::OpenAPI::toJsonValue(m_calculated_lifecycle));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_encryption_key_arn_isSet) {
        obj.insert(QString("EncryptionKeyArn"), ::OpenAPI::toJsonValue(m_encryption_key_arn));
    }
    if (m_is_encrypted_isSet) {
        obj.insert(QString("IsEncrypted"), ::OpenAPI::toJsonValue(m_is_encrypted));
    }
    if (m_last_restore_time_isSet) {
        obj.insert(QString("LastRestoreTime"), ::OpenAPI::toJsonValue(m_last_restore_time));
    }
    if (m_parent_recovery_point_arn_isSet) {
        obj.insert(QString("ParentRecoveryPointArn"), ::OpenAPI::toJsonValue(m_parent_recovery_point_arn));
    }
    if (m_composite_member_identifier_isSet) {
        obj.insert(QString("CompositeMemberIdentifier"), ::OpenAPI::toJsonValue(m_composite_member_identifier));
    }
    if (m_is_parent_isSet) {
        obj.insert(QString("IsParent"), ::OpenAPI::toJsonValue(m_is_parent));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("ResourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

QString OAIRecoveryPointByBackupVault::getRecoveryPointArn() const {
    return m_recovery_point_arn;
}
void OAIRecoveryPointByBackupVault::setRecoveryPointArn(const QString &recovery_point_arn) {
    m_recovery_point_arn = recovery_point_arn;
    m_recovery_point_arn_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_recovery_point_arn_Set() const{
    return m_recovery_point_arn_isSet;
}

bool OAIRecoveryPointByBackupVault::is_recovery_point_arn_Valid() const{
    return m_recovery_point_arn_isValid;
}

QString OAIRecoveryPointByBackupVault::getBackupVaultName() const {
    return m_backup_vault_name;
}
void OAIRecoveryPointByBackupVault::setBackupVaultName(const QString &backup_vault_name) {
    m_backup_vault_name = backup_vault_name;
    m_backup_vault_name_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_backup_vault_name_Set() const{
    return m_backup_vault_name_isSet;
}

bool OAIRecoveryPointByBackupVault::is_backup_vault_name_Valid() const{
    return m_backup_vault_name_isValid;
}

QString OAIRecoveryPointByBackupVault::getBackupVaultArn() const {
    return m_backup_vault_arn;
}
void OAIRecoveryPointByBackupVault::setBackupVaultArn(const QString &backup_vault_arn) {
    m_backup_vault_arn = backup_vault_arn;
    m_backup_vault_arn_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_backup_vault_arn_Set() const{
    return m_backup_vault_arn_isSet;
}

bool OAIRecoveryPointByBackupVault::is_backup_vault_arn_Valid() const{
    return m_backup_vault_arn_isValid;
}

QString OAIRecoveryPointByBackupVault::getSourceBackupVaultArn() const {
    return m_source_backup_vault_arn;
}
void OAIRecoveryPointByBackupVault::setSourceBackupVaultArn(const QString &source_backup_vault_arn) {
    m_source_backup_vault_arn = source_backup_vault_arn;
    m_source_backup_vault_arn_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_source_backup_vault_arn_Set() const{
    return m_source_backup_vault_arn_isSet;
}

bool OAIRecoveryPointByBackupVault::is_source_backup_vault_arn_Valid() const{
    return m_source_backup_vault_arn_isValid;
}

QString OAIRecoveryPointByBackupVault::getResourceArn() const {
    return m_resource_arn;
}
void OAIRecoveryPointByBackupVault::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIRecoveryPointByBackupVault::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAIRecoveryPointByBackupVault::getResourceType() const {
    return m_resource_type;
}
void OAIRecoveryPointByBackupVault::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIRecoveryPointByBackupVault::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAIRecoveryPointByBackupVault_CreatedBy OAIRecoveryPointByBackupVault::getCreatedBy() const {
    return m_created_by;
}
void OAIRecoveryPointByBackupVault::setCreatedBy(const OAIRecoveryPointByBackupVault_CreatedBy &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIRecoveryPointByBackupVault::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIRecoveryPointByBackupVault::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAIRecoveryPointByBackupVault::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAIRecoveryPointByBackupVault::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

OAIRecoveryPointStatus OAIRecoveryPointByBackupVault::getStatus() const {
    return m_status;
}
void OAIRecoveryPointByBackupVault::setStatus(const OAIRecoveryPointStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRecoveryPointByBackupVault::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRecoveryPointByBackupVault::getStatusMessage() const {
    return m_status_message;
}
void OAIRecoveryPointByBackupVault::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIRecoveryPointByBackupVault::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QDateTime OAIRecoveryPointByBackupVault::getCreationDate() const {
    return m_creation_date;
}
void OAIRecoveryPointByBackupVault::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIRecoveryPointByBackupVault::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIRecoveryPointByBackupVault::getCompletionDate() const {
    return m_completion_date;
}
void OAIRecoveryPointByBackupVault::setCompletionDate(const QDateTime &completion_date) {
    m_completion_date = completion_date;
    m_completion_date_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_completion_date_Set() const{
    return m_completion_date_isSet;
}

bool OAIRecoveryPointByBackupVault::is_completion_date_Valid() const{
    return m_completion_date_isValid;
}

qint32 OAIRecoveryPointByBackupVault::getBackupSizeInBytes() const {
    return m_backup_size_in_bytes;
}
void OAIRecoveryPointByBackupVault::setBackupSizeInBytes(const qint32 &backup_size_in_bytes) {
    m_backup_size_in_bytes = backup_size_in_bytes;
    m_backup_size_in_bytes_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_backup_size_in_bytes_Set() const{
    return m_backup_size_in_bytes_isSet;
}

bool OAIRecoveryPointByBackupVault::is_backup_size_in_bytes_Valid() const{
    return m_backup_size_in_bytes_isValid;
}

OAIDescribeRecoveryPointOutput_CalculatedLifecycle OAIRecoveryPointByBackupVault::getCalculatedLifecycle() const {
    return m_calculated_lifecycle;
}
void OAIRecoveryPointByBackupVault::setCalculatedLifecycle(const OAIDescribeRecoveryPointOutput_CalculatedLifecycle &calculated_lifecycle) {
    m_calculated_lifecycle = calculated_lifecycle;
    m_calculated_lifecycle_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_calculated_lifecycle_Set() const{
    return m_calculated_lifecycle_isSet;
}

bool OAIRecoveryPointByBackupVault::is_calculated_lifecycle_Valid() const{
    return m_calculated_lifecycle_isValid;
}

OAIBackupRule_Lifecycle OAIRecoveryPointByBackupVault::getLifecycle() const {
    return m_lifecycle;
}
void OAIRecoveryPointByBackupVault::setLifecycle(const OAIBackupRule_Lifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIRecoveryPointByBackupVault::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

QString OAIRecoveryPointByBackupVault::getEncryptionKeyArn() const {
    return m_encryption_key_arn;
}
void OAIRecoveryPointByBackupVault::setEncryptionKeyArn(const QString &encryption_key_arn) {
    m_encryption_key_arn = encryption_key_arn;
    m_encryption_key_arn_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_encryption_key_arn_Set() const{
    return m_encryption_key_arn_isSet;
}

bool OAIRecoveryPointByBackupVault::is_encryption_key_arn_Valid() const{
    return m_encryption_key_arn_isValid;
}

bool OAIRecoveryPointByBackupVault::getIsEncrypted() const {
    return m_is_encrypted;
}
void OAIRecoveryPointByBackupVault::setIsEncrypted(const bool &is_encrypted) {
    m_is_encrypted = is_encrypted;
    m_is_encrypted_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_is_encrypted_Set() const{
    return m_is_encrypted_isSet;
}

bool OAIRecoveryPointByBackupVault::is_is_encrypted_Valid() const{
    return m_is_encrypted_isValid;
}

QDateTime OAIRecoveryPointByBackupVault::getLastRestoreTime() const {
    return m_last_restore_time;
}
void OAIRecoveryPointByBackupVault::setLastRestoreTime(const QDateTime &last_restore_time) {
    m_last_restore_time = last_restore_time;
    m_last_restore_time_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_last_restore_time_Set() const{
    return m_last_restore_time_isSet;
}

bool OAIRecoveryPointByBackupVault::is_last_restore_time_Valid() const{
    return m_last_restore_time_isValid;
}

QString OAIRecoveryPointByBackupVault::getParentRecoveryPointArn() const {
    return m_parent_recovery_point_arn;
}
void OAIRecoveryPointByBackupVault::setParentRecoveryPointArn(const QString &parent_recovery_point_arn) {
    m_parent_recovery_point_arn = parent_recovery_point_arn;
    m_parent_recovery_point_arn_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_parent_recovery_point_arn_Set() const{
    return m_parent_recovery_point_arn_isSet;
}

bool OAIRecoveryPointByBackupVault::is_parent_recovery_point_arn_Valid() const{
    return m_parent_recovery_point_arn_isValid;
}

QString OAIRecoveryPointByBackupVault::getCompositeMemberIdentifier() const {
    return m_composite_member_identifier;
}
void OAIRecoveryPointByBackupVault::setCompositeMemberIdentifier(const QString &composite_member_identifier) {
    m_composite_member_identifier = composite_member_identifier;
    m_composite_member_identifier_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_composite_member_identifier_Set() const{
    return m_composite_member_identifier_isSet;
}

bool OAIRecoveryPointByBackupVault::is_composite_member_identifier_Valid() const{
    return m_composite_member_identifier_isValid;
}

bool OAIRecoveryPointByBackupVault::getIsParent() const {
    return m_is_parent;
}
void OAIRecoveryPointByBackupVault::setIsParent(const bool &is_parent) {
    m_is_parent = is_parent;
    m_is_parent_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_is_parent_Set() const{
    return m_is_parent_isSet;
}

bool OAIRecoveryPointByBackupVault::is_is_parent_Valid() const{
    return m_is_parent_isValid;
}

QString OAIRecoveryPointByBackupVault::getResourceName() const {
    return m_resource_name;
}
void OAIRecoveryPointByBackupVault::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIRecoveryPointByBackupVault::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIRecoveryPointByBackupVault::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAIRecoveryPointByBackupVault::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recovery_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_vault_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_vault_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_backup_vault_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_restore_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_recovery_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_composite_member_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecoveryPointByBackupVault::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
