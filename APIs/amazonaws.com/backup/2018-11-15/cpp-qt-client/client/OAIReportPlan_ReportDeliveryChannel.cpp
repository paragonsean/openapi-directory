/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportPlan_ReportDeliveryChannel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportPlan_ReportDeliveryChannel::OAIReportPlan_ReportDeliveryChannel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportPlan_ReportDeliveryChannel::OAIReportPlan_ReportDeliveryChannel() {
    this->initializeModel();
}

OAIReportPlan_ReportDeliveryChannel::~OAIReportPlan_ReportDeliveryChannel() {}

void OAIReportPlan_ReportDeliveryChannel::initializeModel() {

    m_s3_bucket_name_isSet = false;
    m_s3_bucket_name_isValid = false;

    m_s3_key_prefix_isSet = false;
    m_s3_key_prefix_isValid = false;

    m_formats_isSet = false;
    m_formats_isValid = false;
}

void OAIReportPlan_ReportDeliveryChannel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportPlan_ReportDeliveryChannel::fromJsonObject(QJsonObject json) {

    m_s3_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_name, json[QString("S3BucketName")]);
    m_s3_bucket_name_isSet = !json[QString("S3BucketName")].isNull() && m_s3_bucket_name_isValid;

    m_s3_key_prefix_isValid = ::OpenAPI::fromJsonValue(m_s3_key_prefix, json[QString("S3KeyPrefix")]);
    m_s3_key_prefix_isSet = !json[QString("S3KeyPrefix")].isNull() && m_s3_key_prefix_isValid;

    m_formats_isValid = ::OpenAPI::fromJsonValue(m_formats, json[QString("Formats")]);
    m_formats_isSet = !json[QString("Formats")].isNull() && m_formats_isValid;
}

QString OAIReportPlan_ReportDeliveryChannel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportPlan_ReportDeliveryChannel::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_bucket_name_isSet) {
        obj.insert(QString("S3BucketName"), ::OpenAPI::toJsonValue(m_s3_bucket_name));
    }
    if (m_s3_key_prefix_isSet) {
        obj.insert(QString("S3KeyPrefix"), ::OpenAPI::toJsonValue(m_s3_key_prefix));
    }
    if (m_formats.isSet()) {
        obj.insert(QString("Formats"), ::OpenAPI::toJsonValue(m_formats));
    }
    return obj;
}

QString OAIReportPlan_ReportDeliveryChannel::getS3BucketName() const {
    return m_s3_bucket_name;
}
void OAIReportPlan_ReportDeliveryChannel::setS3BucketName(const QString &s3_bucket_name) {
    m_s3_bucket_name = s3_bucket_name;
    m_s3_bucket_name_isSet = true;
}

bool OAIReportPlan_ReportDeliveryChannel::is_s3_bucket_name_Set() const{
    return m_s3_bucket_name_isSet;
}

bool OAIReportPlan_ReportDeliveryChannel::is_s3_bucket_name_Valid() const{
    return m_s3_bucket_name_isValid;
}

QString OAIReportPlan_ReportDeliveryChannel::getS3KeyPrefix() const {
    return m_s3_key_prefix;
}
void OAIReportPlan_ReportDeliveryChannel::setS3KeyPrefix(const QString &s3_key_prefix) {
    m_s3_key_prefix = s3_key_prefix;
    m_s3_key_prefix_isSet = true;
}

bool OAIReportPlan_ReportDeliveryChannel::is_s3_key_prefix_Set() const{
    return m_s3_key_prefix_isSet;
}

bool OAIReportPlan_ReportDeliveryChannel::is_s3_key_prefix_Valid() const{
    return m_s3_key_prefix_isValid;
}

QList OAIReportPlan_ReportDeliveryChannel::getFormats() const {
    return m_formats;
}
void OAIReportPlan_ReportDeliveryChannel::setFormats(const QList &formats) {
    m_formats = formats;
    m_formats_isSet = true;
}

bool OAIReportPlan_ReportDeliveryChannel::is_formats_Set() const{
    return m_formats_isSet;
}

bool OAIReportPlan_ReportDeliveryChannel::is_formats_Valid() const{
    return m_formats_isValid;
}

bool OAIReportPlan_ReportDeliveryChannel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_key_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportPlan_ReportDeliveryChannel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_bucket_name_isValid && true;
}

} // namespace OpenAPI
