/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecoveryPointByBackupVault_CreatedBy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecoveryPointByBackupVault_CreatedBy::OAIRecoveryPointByBackupVault_CreatedBy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecoveryPointByBackupVault_CreatedBy::OAIRecoveryPointByBackupVault_CreatedBy() {
    this->initializeModel();
}

OAIRecoveryPointByBackupVault_CreatedBy::~OAIRecoveryPointByBackupVault_CreatedBy() {}

void OAIRecoveryPointByBackupVault_CreatedBy::initializeModel() {

    m_backup_plan_id_isSet = false;
    m_backup_plan_id_isValid = false;

    m_backup_plan_arn_isSet = false;
    m_backup_plan_arn_isValid = false;

    m_backup_plan_version_isSet = false;
    m_backup_plan_version_isValid = false;

    m_backup_rule_id_isSet = false;
    m_backup_rule_id_isValid = false;
}

void OAIRecoveryPointByBackupVault_CreatedBy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecoveryPointByBackupVault_CreatedBy::fromJsonObject(QJsonObject json) {

    m_backup_plan_id_isValid = ::OpenAPI::fromJsonValue(m_backup_plan_id, json[QString("BackupPlanId")]);
    m_backup_plan_id_isSet = !json[QString("BackupPlanId")].isNull() && m_backup_plan_id_isValid;

    m_backup_plan_arn_isValid = ::OpenAPI::fromJsonValue(m_backup_plan_arn, json[QString("BackupPlanArn")]);
    m_backup_plan_arn_isSet = !json[QString("BackupPlanArn")].isNull() && m_backup_plan_arn_isValid;

    m_backup_plan_version_isValid = ::OpenAPI::fromJsonValue(m_backup_plan_version, json[QString("BackupPlanVersion")]);
    m_backup_plan_version_isSet = !json[QString("BackupPlanVersion")].isNull() && m_backup_plan_version_isValid;

    m_backup_rule_id_isValid = ::OpenAPI::fromJsonValue(m_backup_rule_id, json[QString("BackupRuleId")]);
    m_backup_rule_id_isSet = !json[QString("BackupRuleId")].isNull() && m_backup_rule_id_isValid;
}

QString OAIRecoveryPointByBackupVault_CreatedBy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecoveryPointByBackupVault_CreatedBy::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_plan_id_isSet) {
        obj.insert(QString("BackupPlanId"), ::OpenAPI::toJsonValue(m_backup_plan_id));
    }
    if (m_backup_plan_arn_isSet) {
        obj.insert(QString("BackupPlanArn"), ::OpenAPI::toJsonValue(m_backup_plan_arn));
    }
    if (m_backup_plan_version_isSet) {
        obj.insert(QString("BackupPlanVersion"), ::OpenAPI::toJsonValue(m_backup_plan_version));
    }
    if (m_backup_rule_id_isSet) {
        obj.insert(QString("BackupRuleId"), ::OpenAPI::toJsonValue(m_backup_rule_id));
    }
    return obj;
}

QString OAIRecoveryPointByBackupVault_CreatedBy::getBackupPlanId() const {
    return m_backup_plan_id;
}
void OAIRecoveryPointByBackupVault_CreatedBy::setBackupPlanId(const QString &backup_plan_id) {
    m_backup_plan_id = backup_plan_id;
    m_backup_plan_id_isSet = true;
}

bool OAIRecoveryPointByBackupVault_CreatedBy::is_backup_plan_id_Set() const{
    return m_backup_plan_id_isSet;
}

bool OAIRecoveryPointByBackupVault_CreatedBy::is_backup_plan_id_Valid() const{
    return m_backup_plan_id_isValid;
}

QString OAIRecoveryPointByBackupVault_CreatedBy::getBackupPlanArn() const {
    return m_backup_plan_arn;
}
void OAIRecoveryPointByBackupVault_CreatedBy::setBackupPlanArn(const QString &backup_plan_arn) {
    m_backup_plan_arn = backup_plan_arn;
    m_backup_plan_arn_isSet = true;
}

bool OAIRecoveryPointByBackupVault_CreatedBy::is_backup_plan_arn_Set() const{
    return m_backup_plan_arn_isSet;
}

bool OAIRecoveryPointByBackupVault_CreatedBy::is_backup_plan_arn_Valid() const{
    return m_backup_plan_arn_isValid;
}

QString OAIRecoveryPointByBackupVault_CreatedBy::getBackupPlanVersion() const {
    return m_backup_plan_version;
}
void OAIRecoveryPointByBackupVault_CreatedBy::setBackupPlanVersion(const QString &backup_plan_version) {
    m_backup_plan_version = backup_plan_version;
    m_backup_plan_version_isSet = true;
}

bool OAIRecoveryPointByBackupVault_CreatedBy::is_backup_plan_version_Set() const{
    return m_backup_plan_version_isSet;
}

bool OAIRecoveryPointByBackupVault_CreatedBy::is_backup_plan_version_Valid() const{
    return m_backup_plan_version_isValid;
}

QString OAIRecoveryPointByBackupVault_CreatedBy::getBackupRuleId() const {
    return m_backup_rule_id;
}
void OAIRecoveryPointByBackupVault_CreatedBy::setBackupRuleId(const QString &backup_rule_id) {
    m_backup_rule_id = backup_rule_id;
    m_backup_rule_id_isSet = true;
}

bool OAIRecoveryPointByBackupVault_CreatedBy::is_backup_rule_id_Set() const{
    return m_backup_rule_id_isSet;
}

bool OAIRecoveryPointByBackupVault_CreatedBy::is_backup_rule_id_Valid() const{
    return m_backup_rule_id_isValid;
}

bool OAIRecoveryPointByBackupVault_CreatedBy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_plan_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_plan_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecoveryPointByBackupVault_CreatedBy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
