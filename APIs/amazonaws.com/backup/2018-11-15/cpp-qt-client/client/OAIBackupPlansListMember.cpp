/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupPlansListMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupPlansListMember::OAIBackupPlansListMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupPlansListMember::OAIBackupPlansListMember() {
    this->initializeModel();
}

OAIBackupPlansListMember::~OAIBackupPlansListMember() {}

void OAIBackupPlansListMember::initializeModel() {

    m_backup_plan_arn_isSet = false;
    m_backup_plan_arn_isValid = false;

    m_backup_plan_id_isSet = false;
    m_backup_plan_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_deletion_date_isSet = false;
    m_deletion_date_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;

    m_backup_plan_name_isSet = false;
    m_backup_plan_name_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;

    m_last_execution_date_isSet = false;
    m_last_execution_date_isValid = false;

    m_advanced_backup_settings_isSet = false;
    m_advanced_backup_settings_isValid = false;
}

void OAIBackupPlansListMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupPlansListMember::fromJsonObject(QJsonObject json) {

    m_backup_plan_arn_isValid = ::OpenAPI::fromJsonValue(m_backup_plan_arn, json[QString("BackupPlanArn")]);
    m_backup_plan_arn_isSet = !json[QString("BackupPlanArn")].isNull() && m_backup_plan_arn_isValid;

    m_backup_plan_id_isValid = ::OpenAPI::fromJsonValue(m_backup_plan_id, json[QString("BackupPlanId")]);
    m_backup_plan_id_isSet = !json[QString("BackupPlanId")].isNull() && m_backup_plan_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_deletion_date_isValid = ::OpenAPI::fromJsonValue(m_deletion_date, json[QString("DeletionDate")]);
    m_deletion_date_isSet = !json[QString("DeletionDate")].isNull() && m_deletion_date_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("VersionId")]);
    m_version_id_isSet = !json[QString("VersionId")].isNull() && m_version_id_isValid;

    m_backup_plan_name_isValid = ::OpenAPI::fromJsonValue(m_backup_plan_name, json[QString("BackupPlanName")]);
    m_backup_plan_name_isSet = !json[QString("BackupPlanName")].isNull() && m_backup_plan_name_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;

    m_last_execution_date_isValid = ::OpenAPI::fromJsonValue(m_last_execution_date, json[QString("LastExecutionDate")]);
    m_last_execution_date_isSet = !json[QString("LastExecutionDate")].isNull() && m_last_execution_date_isValid;

    m_advanced_backup_settings_isValid = ::OpenAPI::fromJsonValue(m_advanced_backup_settings, json[QString("AdvancedBackupSettings")]);
    m_advanced_backup_settings_isSet = !json[QString("AdvancedBackupSettings")].isNull() && m_advanced_backup_settings_isValid;
}

QString OAIBackupPlansListMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupPlansListMember::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_plan_arn_isSet) {
        obj.insert(QString("BackupPlanArn"), ::OpenAPI::toJsonValue(m_backup_plan_arn));
    }
    if (m_backup_plan_id_isSet) {
        obj.insert(QString("BackupPlanId"), ::OpenAPI::toJsonValue(m_backup_plan_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_deletion_date_isSet) {
        obj.insert(QString("DeletionDate"), ::OpenAPI::toJsonValue(m_deletion_date));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("VersionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    if (m_backup_plan_name_isSet) {
        obj.insert(QString("BackupPlanName"), ::OpenAPI::toJsonValue(m_backup_plan_name));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    if (m_last_execution_date_isSet) {
        obj.insert(QString("LastExecutionDate"), ::OpenAPI::toJsonValue(m_last_execution_date));
    }
    if (m_advanced_backup_settings.isSet()) {
        obj.insert(QString("AdvancedBackupSettings"), ::OpenAPI::toJsonValue(m_advanced_backup_settings));
    }
    return obj;
}

QString OAIBackupPlansListMember::getBackupPlanArn() const {
    return m_backup_plan_arn;
}
void OAIBackupPlansListMember::setBackupPlanArn(const QString &backup_plan_arn) {
    m_backup_plan_arn = backup_plan_arn;
    m_backup_plan_arn_isSet = true;
}

bool OAIBackupPlansListMember::is_backup_plan_arn_Set() const{
    return m_backup_plan_arn_isSet;
}

bool OAIBackupPlansListMember::is_backup_plan_arn_Valid() const{
    return m_backup_plan_arn_isValid;
}

QString OAIBackupPlansListMember::getBackupPlanId() const {
    return m_backup_plan_id;
}
void OAIBackupPlansListMember::setBackupPlanId(const QString &backup_plan_id) {
    m_backup_plan_id = backup_plan_id;
    m_backup_plan_id_isSet = true;
}

bool OAIBackupPlansListMember::is_backup_plan_id_Set() const{
    return m_backup_plan_id_isSet;
}

bool OAIBackupPlansListMember::is_backup_plan_id_Valid() const{
    return m_backup_plan_id_isValid;
}

QDateTime OAIBackupPlansListMember::getCreationDate() const {
    return m_creation_date;
}
void OAIBackupPlansListMember::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIBackupPlansListMember::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIBackupPlansListMember::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIBackupPlansListMember::getDeletionDate() const {
    return m_deletion_date;
}
void OAIBackupPlansListMember::setDeletionDate(const QDateTime &deletion_date) {
    m_deletion_date = deletion_date;
    m_deletion_date_isSet = true;
}

bool OAIBackupPlansListMember::is_deletion_date_Set() const{
    return m_deletion_date_isSet;
}

bool OAIBackupPlansListMember::is_deletion_date_Valid() const{
    return m_deletion_date_isValid;
}

QString OAIBackupPlansListMember::getVersionId() const {
    return m_version_id;
}
void OAIBackupPlansListMember::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIBackupPlansListMember::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIBackupPlansListMember::is_version_id_Valid() const{
    return m_version_id_isValid;
}

QString OAIBackupPlansListMember::getBackupPlanName() const {
    return m_backup_plan_name;
}
void OAIBackupPlansListMember::setBackupPlanName(const QString &backup_plan_name) {
    m_backup_plan_name = backup_plan_name;
    m_backup_plan_name_isSet = true;
}

bool OAIBackupPlansListMember::is_backup_plan_name_Set() const{
    return m_backup_plan_name_isSet;
}

bool OAIBackupPlansListMember::is_backup_plan_name_Valid() const{
    return m_backup_plan_name_isValid;
}

QString OAIBackupPlansListMember::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAIBackupPlansListMember::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAIBackupPlansListMember::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAIBackupPlansListMember::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

QDateTime OAIBackupPlansListMember::getLastExecutionDate() const {
    return m_last_execution_date;
}
void OAIBackupPlansListMember::setLastExecutionDate(const QDateTime &last_execution_date) {
    m_last_execution_date = last_execution_date;
    m_last_execution_date_isSet = true;
}

bool OAIBackupPlansListMember::is_last_execution_date_Set() const{
    return m_last_execution_date_isSet;
}

bool OAIBackupPlansListMember::is_last_execution_date_Valid() const{
    return m_last_execution_date_isValid;
}

QList OAIBackupPlansListMember::getAdvancedBackupSettings() const {
    return m_advanced_backup_settings;
}
void OAIBackupPlansListMember::setAdvancedBackupSettings(const QList &advanced_backup_settings) {
    m_advanced_backup_settings = advanced_backup_settings;
    m_advanced_backup_settings_isSet = true;
}

bool OAIBackupPlansListMember::is_advanced_backup_settings_Set() const{
    return m_advanced_backup_settings_isSet;
}

bool OAIBackupPlansListMember::is_advanced_backup_settings_Valid() const{
    return m_advanced_backup_settings_isValid;
}

bool OAIBackupPlansListMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_plan_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_plan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_execution_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_backup_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupPlansListMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
