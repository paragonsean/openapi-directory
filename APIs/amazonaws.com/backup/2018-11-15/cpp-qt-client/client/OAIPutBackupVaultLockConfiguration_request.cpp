/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutBackupVaultLockConfiguration_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutBackupVaultLockConfiguration_request::OAIPutBackupVaultLockConfiguration_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutBackupVaultLockConfiguration_request::OAIPutBackupVaultLockConfiguration_request() {
    this->initializeModel();
}

OAIPutBackupVaultLockConfiguration_request::~OAIPutBackupVaultLockConfiguration_request() {}

void OAIPutBackupVaultLockConfiguration_request::initializeModel() {

    m_min_retention_days_isSet = false;
    m_min_retention_days_isValid = false;

    m_max_retention_days_isSet = false;
    m_max_retention_days_isValid = false;

    m_changeable_for_days_isSet = false;
    m_changeable_for_days_isValid = false;
}

void OAIPutBackupVaultLockConfiguration_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutBackupVaultLockConfiguration_request::fromJsonObject(QJsonObject json) {

    m_min_retention_days_isValid = ::OpenAPI::fromJsonValue(m_min_retention_days, json[QString("MinRetentionDays")]);
    m_min_retention_days_isSet = !json[QString("MinRetentionDays")].isNull() && m_min_retention_days_isValid;

    m_max_retention_days_isValid = ::OpenAPI::fromJsonValue(m_max_retention_days, json[QString("MaxRetentionDays")]);
    m_max_retention_days_isSet = !json[QString("MaxRetentionDays")].isNull() && m_max_retention_days_isValid;

    m_changeable_for_days_isValid = ::OpenAPI::fromJsonValue(m_changeable_for_days, json[QString("ChangeableForDays")]);
    m_changeable_for_days_isSet = !json[QString("ChangeableForDays")].isNull() && m_changeable_for_days_isValid;
}

QString OAIPutBackupVaultLockConfiguration_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutBackupVaultLockConfiguration_request::asJsonObject() const {
    QJsonObject obj;
    if (m_min_retention_days_isSet) {
        obj.insert(QString("MinRetentionDays"), ::OpenAPI::toJsonValue(m_min_retention_days));
    }
    if (m_max_retention_days_isSet) {
        obj.insert(QString("MaxRetentionDays"), ::OpenAPI::toJsonValue(m_max_retention_days));
    }
    if (m_changeable_for_days_isSet) {
        obj.insert(QString("ChangeableForDays"), ::OpenAPI::toJsonValue(m_changeable_for_days));
    }
    return obj;
}

qint32 OAIPutBackupVaultLockConfiguration_request::getMinRetentionDays() const {
    return m_min_retention_days;
}
void OAIPutBackupVaultLockConfiguration_request::setMinRetentionDays(const qint32 &min_retention_days) {
    m_min_retention_days = min_retention_days;
    m_min_retention_days_isSet = true;
}

bool OAIPutBackupVaultLockConfiguration_request::is_min_retention_days_Set() const{
    return m_min_retention_days_isSet;
}

bool OAIPutBackupVaultLockConfiguration_request::is_min_retention_days_Valid() const{
    return m_min_retention_days_isValid;
}

qint32 OAIPutBackupVaultLockConfiguration_request::getMaxRetentionDays() const {
    return m_max_retention_days;
}
void OAIPutBackupVaultLockConfiguration_request::setMaxRetentionDays(const qint32 &max_retention_days) {
    m_max_retention_days = max_retention_days;
    m_max_retention_days_isSet = true;
}

bool OAIPutBackupVaultLockConfiguration_request::is_max_retention_days_Set() const{
    return m_max_retention_days_isSet;
}

bool OAIPutBackupVaultLockConfiguration_request::is_max_retention_days_Valid() const{
    return m_max_retention_days_isValid;
}

qint32 OAIPutBackupVaultLockConfiguration_request::getChangeableForDays() const {
    return m_changeable_for_days;
}
void OAIPutBackupVaultLockConfiguration_request::setChangeableForDays(const qint32 &changeable_for_days) {
    m_changeable_for_days = changeable_for_days;
    m_changeable_for_days_isSet = true;
}

bool OAIPutBackupVaultLockConfiguration_request::is_changeable_for_days_Set() const{
    return m_changeable_for_days_isSet;
}

bool OAIPutBackupVaultLockConfiguration_request::is_changeable_for_days_Valid() const{
    return m_changeable_for_days_isValid;
}

bool OAIPutBackupVaultLockConfiguration_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changeable_for_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutBackupVaultLockConfiguration_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
