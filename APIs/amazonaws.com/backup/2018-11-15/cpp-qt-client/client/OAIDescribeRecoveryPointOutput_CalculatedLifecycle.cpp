/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeRecoveryPointOutput_CalculatedLifecycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeRecoveryPointOutput_CalculatedLifecycle::OAIDescribeRecoveryPointOutput_CalculatedLifecycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeRecoveryPointOutput_CalculatedLifecycle::OAIDescribeRecoveryPointOutput_CalculatedLifecycle() {
    this->initializeModel();
}

OAIDescribeRecoveryPointOutput_CalculatedLifecycle::~OAIDescribeRecoveryPointOutput_CalculatedLifecycle() {}

void OAIDescribeRecoveryPointOutput_CalculatedLifecycle::initializeModel() {

    m_move_to_cold_storage_at_isSet = false;
    m_move_to_cold_storage_at_isValid = false;

    m_delete_at_isSet = false;
    m_delete_at_isValid = false;
}

void OAIDescribeRecoveryPointOutput_CalculatedLifecycle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeRecoveryPointOutput_CalculatedLifecycle::fromJsonObject(QJsonObject json) {

    m_move_to_cold_storage_at_isValid = ::OpenAPI::fromJsonValue(m_move_to_cold_storage_at, json[QString("MoveToColdStorageAt")]);
    m_move_to_cold_storage_at_isSet = !json[QString("MoveToColdStorageAt")].isNull() && m_move_to_cold_storage_at_isValid;

    m_delete_at_isValid = ::OpenAPI::fromJsonValue(m_delete_at, json[QString("DeleteAt")]);
    m_delete_at_isSet = !json[QString("DeleteAt")].isNull() && m_delete_at_isValid;
}

QString OAIDescribeRecoveryPointOutput_CalculatedLifecycle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeRecoveryPointOutput_CalculatedLifecycle::asJsonObject() const {
    QJsonObject obj;
    if (m_move_to_cold_storage_at_isSet) {
        obj.insert(QString("MoveToColdStorageAt"), ::OpenAPI::toJsonValue(m_move_to_cold_storage_at));
    }
    if (m_delete_at_isSet) {
        obj.insert(QString("DeleteAt"), ::OpenAPI::toJsonValue(m_delete_at));
    }
    return obj;
}

QDateTime OAIDescribeRecoveryPointOutput_CalculatedLifecycle::getMoveToColdStorageAt() const {
    return m_move_to_cold_storage_at;
}
void OAIDescribeRecoveryPointOutput_CalculatedLifecycle::setMoveToColdStorageAt(const QDateTime &move_to_cold_storage_at) {
    m_move_to_cold_storage_at = move_to_cold_storage_at;
    m_move_to_cold_storage_at_isSet = true;
}

bool OAIDescribeRecoveryPointOutput_CalculatedLifecycle::is_move_to_cold_storage_at_Set() const{
    return m_move_to_cold_storage_at_isSet;
}

bool OAIDescribeRecoveryPointOutput_CalculatedLifecycle::is_move_to_cold_storage_at_Valid() const{
    return m_move_to_cold_storage_at_isValid;
}

QDateTime OAIDescribeRecoveryPointOutput_CalculatedLifecycle::getDeleteAt() const {
    return m_delete_at;
}
void OAIDescribeRecoveryPointOutput_CalculatedLifecycle::setDeleteAt(const QDateTime &delete_at) {
    m_delete_at = delete_at;
    m_delete_at_isSet = true;
}

bool OAIDescribeRecoveryPointOutput_CalculatedLifecycle::is_delete_at_Set() const{
    return m_delete_at_isSet;
}

bool OAIDescribeRecoveryPointOutput_CalculatedLifecycle::is_delete_at_Valid() const{
    return m_delete_at_isValid;
}

bool OAIDescribeRecoveryPointOutput_CalculatedLifecycle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_move_to_cold_storage_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeRecoveryPointOutput_CalculatedLifecycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
