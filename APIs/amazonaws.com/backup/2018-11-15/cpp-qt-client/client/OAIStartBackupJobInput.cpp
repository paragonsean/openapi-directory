/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartBackupJobInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartBackupJobInput::OAIStartBackupJobInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartBackupJobInput::OAIStartBackupJobInput() {
    this->initializeModel();
}

OAIStartBackupJobInput::~OAIStartBackupJobInput() {}

void OAIStartBackupJobInput::initializeModel() {

    m_backup_vault_name_isSet = false;
    m_backup_vault_name_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;

    m_start_window_minutes_isSet = false;
    m_start_window_minutes_isValid = false;

    m_complete_window_minutes_isSet = false;
    m_complete_window_minutes_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_recovery_point_tags_isSet = false;
    m_recovery_point_tags_isValid = false;

    m_backup_options_isSet = false;
    m_backup_options_isValid = false;
}

void OAIStartBackupJobInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartBackupJobInput::fromJsonObject(QJsonObject json) {

    m_backup_vault_name_isValid = ::OpenAPI::fromJsonValue(m_backup_vault_name, json[QString("BackupVaultName")]);
    m_backup_vault_name_isSet = !json[QString("BackupVaultName")].isNull() && m_backup_vault_name_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("IamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("IamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;

    m_start_window_minutes_isValid = ::OpenAPI::fromJsonValue(m_start_window_minutes, json[QString("StartWindowMinutes")]);
    m_start_window_minutes_isSet = !json[QString("StartWindowMinutes")].isNull() && m_start_window_minutes_isValid;

    m_complete_window_minutes_isValid = ::OpenAPI::fromJsonValue(m_complete_window_minutes, json[QString("CompleteWindowMinutes")]);
    m_complete_window_minutes_isSet = !json[QString("CompleteWindowMinutes")].isNull() && m_complete_window_minutes_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;

    m_recovery_point_tags_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_tags, json[QString("RecoveryPointTags")]);
    m_recovery_point_tags_isSet = !json[QString("RecoveryPointTags")].isNull() && m_recovery_point_tags_isValid;

    m_backup_options_isValid = ::OpenAPI::fromJsonValue(m_backup_options, json[QString("BackupOptions")]);
    m_backup_options_isSet = !json[QString("BackupOptions")].isNull() && m_backup_options_isValid;
}

QString OAIStartBackupJobInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartBackupJobInput::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_vault_name_isSet) {
        obj.insert(QString("BackupVaultName"), ::OpenAPI::toJsonValue(m_backup_vault_name));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("IamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    if (m_start_window_minutes_isSet) {
        obj.insert(QString("StartWindowMinutes"), ::OpenAPI::toJsonValue(m_start_window_minutes));
    }
    if (m_complete_window_minutes_isSet) {
        obj.insert(QString("CompleteWindowMinutes"), ::OpenAPI::toJsonValue(m_complete_window_minutes));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_recovery_point_tags.isSet()) {
        obj.insert(QString("RecoveryPointTags"), ::OpenAPI::toJsonValue(m_recovery_point_tags));
    }
    if (m_backup_options.isSet()) {
        obj.insert(QString("BackupOptions"), ::OpenAPI::toJsonValue(m_backup_options));
    }
    return obj;
}

QString OAIStartBackupJobInput::getBackupVaultName() const {
    return m_backup_vault_name;
}
void OAIStartBackupJobInput::setBackupVaultName(const QString &backup_vault_name) {
    m_backup_vault_name = backup_vault_name;
    m_backup_vault_name_isSet = true;
}

bool OAIStartBackupJobInput::is_backup_vault_name_Set() const{
    return m_backup_vault_name_isSet;
}

bool OAIStartBackupJobInput::is_backup_vault_name_Valid() const{
    return m_backup_vault_name_isValid;
}

QString OAIStartBackupJobInput::getResourceArn() const {
    return m_resource_arn;
}
void OAIStartBackupJobInput::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIStartBackupJobInput::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIStartBackupJobInput::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAIStartBackupJobInput::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAIStartBackupJobInput::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAIStartBackupJobInput::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAIStartBackupJobInput::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

QString OAIStartBackupJobInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAIStartBackupJobInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAIStartBackupJobInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAIStartBackupJobInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

qint32 OAIStartBackupJobInput::getStartWindowMinutes() const {
    return m_start_window_minutes;
}
void OAIStartBackupJobInput::setStartWindowMinutes(const qint32 &start_window_minutes) {
    m_start_window_minutes = start_window_minutes;
    m_start_window_minutes_isSet = true;
}

bool OAIStartBackupJobInput::is_start_window_minutes_Set() const{
    return m_start_window_minutes_isSet;
}

bool OAIStartBackupJobInput::is_start_window_minutes_Valid() const{
    return m_start_window_minutes_isValid;
}

qint32 OAIStartBackupJobInput::getCompleteWindowMinutes() const {
    return m_complete_window_minutes;
}
void OAIStartBackupJobInput::setCompleteWindowMinutes(const qint32 &complete_window_minutes) {
    m_complete_window_minutes = complete_window_minutes;
    m_complete_window_minutes_isSet = true;
}

bool OAIStartBackupJobInput::is_complete_window_minutes_Set() const{
    return m_complete_window_minutes_isSet;
}

bool OAIStartBackupJobInput::is_complete_window_minutes_Valid() const{
    return m_complete_window_minutes_isValid;
}

OAIStartBackupJobInput_Lifecycle OAIStartBackupJobInput::getLifecycle() const {
    return m_lifecycle;
}
void OAIStartBackupJobInput::setLifecycle(const OAIStartBackupJobInput_Lifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIStartBackupJobInput::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIStartBackupJobInput::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

QMap OAIStartBackupJobInput::getRecoveryPointTags() const {
    return m_recovery_point_tags;
}
void OAIStartBackupJobInput::setRecoveryPointTags(const QMap &recovery_point_tags) {
    m_recovery_point_tags = recovery_point_tags;
    m_recovery_point_tags_isSet = true;
}

bool OAIStartBackupJobInput::is_recovery_point_tags_Set() const{
    return m_recovery_point_tags_isSet;
}

bool OAIStartBackupJobInput::is_recovery_point_tags_Valid() const{
    return m_recovery_point_tags_isValid;
}

QMap OAIStartBackupJobInput::getBackupOptions() const {
    return m_backup_options;
}
void OAIStartBackupJobInput::setBackupOptions(const QMap &backup_options) {
    m_backup_options = backup_options;
    m_backup_options_isSet = true;
}

bool OAIStartBackupJobInput::is_backup_options_Set() const{
    return m_backup_options_isSet;
}

bool OAIStartBackupJobInput::is_backup_options_Valid() const{
    return m_backup_options_isValid;
}

bool OAIStartBackupJobInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_vault_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_window_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_window_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartBackupJobInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backup_vault_name_isValid && m_resource_arn_isValid && m_iam_role_arn_isValid && true;
}

} // namespace OpenAPI
