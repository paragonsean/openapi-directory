/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListFrameworksOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListFrameworksOutput::OAIListFrameworksOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListFrameworksOutput::OAIListFrameworksOutput() {
    this->initializeModel();
}

OAIListFrameworksOutput::~OAIListFrameworksOutput() {}

void OAIListFrameworksOutput::initializeModel() {

    m_frameworks_isSet = false;
    m_frameworks_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListFrameworksOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListFrameworksOutput::fromJsonObject(QJsonObject json) {

    m_frameworks_isValid = ::OpenAPI::fromJsonValue(m_frameworks, json[QString("Frameworks")]);
    m_frameworks_isSet = !json[QString("Frameworks")].isNull() && m_frameworks_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListFrameworksOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListFrameworksOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_frameworks.isSet()) {
        obj.insert(QString("Frameworks"), ::OpenAPI::toJsonValue(m_frameworks));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListFrameworksOutput::getFrameworks() const {
    return m_frameworks;
}
void OAIListFrameworksOutput::setFrameworks(const QList &frameworks) {
    m_frameworks = frameworks;
    m_frameworks_isSet = true;
}

bool OAIListFrameworksOutput::is_frameworks_Set() const{
    return m_frameworks_isSet;
}

bool OAIListFrameworksOutput::is_frameworks_Valid() const{
    return m_frameworks_isValid;
}

QString OAIListFrameworksOutput::getNextToken() const {
    return m_next_token;
}
void OAIListFrameworksOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListFrameworksOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListFrameworksOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListFrameworksOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frameworks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListFrameworksOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
