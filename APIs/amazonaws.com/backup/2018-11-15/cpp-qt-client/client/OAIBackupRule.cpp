/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupRule::OAIBackupRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupRule::OAIBackupRule() {
    this->initializeModel();
}

OAIBackupRule::~OAIBackupRule() {}

void OAIBackupRule::initializeModel() {

    m_rule_name_isSet = false;
    m_rule_name_isValid = false;

    m_target_backup_vault_name_isSet = false;
    m_target_backup_vault_name_isValid = false;

    m_schedule_expression_isSet = false;
    m_schedule_expression_isValid = false;

    m_start_window_minutes_isSet = false;
    m_start_window_minutes_isValid = false;

    m_completion_window_minutes_isSet = false;
    m_completion_window_minutes_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_recovery_point_tags_isSet = false;
    m_recovery_point_tags_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_copy_actions_isSet = false;
    m_copy_actions_isValid = false;

    m_enable_continuous_backup_isSet = false;
    m_enable_continuous_backup_isValid = false;
}

void OAIBackupRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupRule::fromJsonObject(QJsonObject json) {

    m_rule_name_isValid = ::OpenAPI::fromJsonValue(m_rule_name, json[QString("RuleName")]);
    m_rule_name_isSet = !json[QString("RuleName")].isNull() && m_rule_name_isValid;

    m_target_backup_vault_name_isValid = ::OpenAPI::fromJsonValue(m_target_backup_vault_name, json[QString("TargetBackupVaultName")]);
    m_target_backup_vault_name_isSet = !json[QString("TargetBackupVaultName")].isNull() && m_target_backup_vault_name_isValid;

    m_schedule_expression_isValid = ::OpenAPI::fromJsonValue(m_schedule_expression, json[QString("ScheduleExpression")]);
    m_schedule_expression_isSet = !json[QString("ScheduleExpression")].isNull() && m_schedule_expression_isValid;

    m_start_window_minutes_isValid = ::OpenAPI::fromJsonValue(m_start_window_minutes, json[QString("StartWindowMinutes")]);
    m_start_window_minutes_isSet = !json[QString("StartWindowMinutes")].isNull() && m_start_window_minutes_isValid;

    m_completion_window_minutes_isValid = ::OpenAPI::fromJsonValue(m_completion_window_minutes, json[QString("CompletionWindowMinutes")]);
    m_completion_window_minutes_isSet = !json[QString("CompletionWindowMinutes")].isNull() && m_completion_window_minutes_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;

    m_recovery_point_tags_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_tags, json[QString("RecoveryPointTags")]);
    m_recovery_point_tags_isSet = !json[QString("RecoveryPointTags")].isNull() && m_recovery_point_tags_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("RuleId")]);
    m_rule_id_isSet = !json[QString("RuleId")].isNull() && m_rule_id_isValid;

    m_copy_actions_isValid = ::OpenAPI::fromJsonValue(m_copy_actions, json[QString("CopyActions")]);
    m_copy_actions_isSet = !json[QString("CopyActions")].isNull() && m_copy_actions_isValid;

    m_enable_continuous_backup_isValid = ::OpenAPI::fromJsonValue(m_enable_continuous_backup, json[QString("EnableContinuousBackup")]);
    m_enable_continuous_backup_isSet = !json[QString("EnableContinuousBackup")].isNull() && m_enable_continuous_backup_isValid;
}

QString OAIBackupRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupRule::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_name_isSet) {
        obj.insert(QString("RuleName"), ::OpenAPI::toJsonValue(m_rule_name));
    }
    if (m_target_backup_vault_name_isSet) {
        obj.insert(QString("TargetBackupVaultName"), ::OpenAPI::toJsonValue(m_target_backup_vault_name));
    }
    if (m_schedule_expression_isSet) {
        obj.insert(QString("ScheduleExpression"), ::OpenAPI::toJsonValue(m_schedule_expression));
    }
    if (m_start_window_minutes_isSet) {
        obj.insert(QString("StartWindowMinutes"), ::OpenAPI::toJsonValue(m_start_window_minutes));
    }
    if (m_completion_window_minutes_isSet) {
        obj.insert(QString("CompletionWindowMinutes"), ::OpenAPI::toJsonValue(m_completion_window_minutes));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_recovery_point_tags.isSet()) {
        obj.insert(QString("RecoveryPointTags"), ::OpenAPI::toJsonValue(m_recovery_point_tags));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("RuleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_copy_actions.isSet()) {
        obj.insert(QString("CopyActions"), ::OpenAPI::toJsonValue(m_copy_actions));
    }
    if (m_enable_continuous_backup_isSet) {
        obj.insert(QString("EnableContinuousBackup"), ::OpenAPI::toJsonValue(m_enable_continuous_backup));
    }
    return obj;
}

QString OAIBackupRule::getRuleName() const {
    return m_rule_name;
}
void OAIBackupRule::setRuleName(const QString &rule_name) {
    m_rule_name = rule_name;
    m_rule_name_isSet = true;
}

bool OAIBackupRule::is_rule_name_Set() const{
    return m_rule_name_isSet;
}

bool OAIBackupRule::is_rule_name_Valid() const{
    return m_rule_name_isValid;
}

QString OAIBackupRule::getTargetBackupVaultName() const {
    return m_target_backup_vault_name;
}
void OAIBackupRule::setTargetBackupVaultName(const QString &target_backup_vault_name) {
    m_target_backup_vault_name = target_backup_vault_name;
    m_target_backup_vault_name_isSet = true;
}

bool OAIBackupRule::is_target_backup_vault_name_Set() const{
    return m_target_backup_vault_name_isSet;
}

bool OAIBackupRule::is_target_backup_vault_name_Valid() const{
    return m_target_backup_vault_name_isValid;
}

QString OAIBackupRule::getScheduleExpression() const {
    return m_schedule_expression;
}
void OAIBackupRule::setScheduleExpression(const QString &schedule_expression) {
    m_schedule_expression = schedule_expression;
    m_schedule_expression_isSet = true;
}

bool OAIBackupRule::is_schedule_expression_Set() const{
    return m_schedule_expression_isSet;
}

bool OAIBackupRule::is_schedule_expression_Valid() const{
    return m_schedule_expression_isValid;
}

qint32 OAIBackupRule::getStartWindowMinutes() const {
    return m_start_window_minutes;
}
void OAIBackupRule::setStartWindowMinutes(const qint32 &start_window_minutes) {
    m_start_window_minutes = start_window_minutes;
    m_start_window_minutes_isSet = true;
}

bool OAIBackupRule::is_start_window_minutes_Set() const{
    return m_start_window_minutes_isSet;
}

bool OAIBackupRule::is_start_window_minutes_Valid() const{
    return m_start_window_minutes_isValid;
}

qint32 OAIBackupRule::getCompletionWindowMinutes() const {
    return m_completion_window_minutes;
}
void OAIBackupRule::setCompletionWindowMinutes(const qint32 &completion_window_minutes) {
    m_completion_window_minutes = completion_window_minutes;
    m_completion_window_minutes_isSet = true;
}

bool OAIBackupRule::is_completion_window_minutes_Set() const{
    return m_completion_window_minutes_isSet;
}

bool OAIBackupRule::is_completion_window_minutes_Valid() const{
    return m_completion_window_minutes_isValid;
}

OAIBackupRule_Lifecycle OAIBackupRule::getLifecycle() const {
    return m_lifecycle;
}
void OAIBackupRule::setLifecycle(const OAIBackupRule_Lifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIBackupRule::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIBackupRule::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

QMap OAIBackupRule::getRecoveryPointTags() const {
    return m_recovery_point_tags;
}
void OAIBackupRule::setRecoveryPointTags(const QMap &recovery_point_tags) {
    m_recovery_point_tags = recovery_point_tags;
    m_recovery_point_tags_isSet = true;
}

bool OAIBackupRule::is_recovery_point_tags_Set() const{
    return m_recovery_point_tags_isSet;
}

bool OAIBackupRule::is_recovery_point_tags_Valid() const{
    return m_recovery_point_tags_isValid;
}

QString OAIBackupRule::getRuleId() const {
    return m_rule_id;
}
void OAIBackupRule::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIBackupRule::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIBackupRule::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QList OAIBackupRule::getCopyActions() const {
    return m_copy_actions;
}
void OAIBackupRule::setCopyActions(const QList &copy_actions) {
    m_copy_actions = copy_actions;
    m_copy_actions_isSet = true;
}

bool OAIBackupRule::is_copy_actions_Set() const{
    return m_copy_actions_isSet;
}

bool OAIBackupRule::is_copy_actions_Valid() const{
    return m_copy_actions_isValid;
}

bool OAIBackupRule::getEnableContinuousBackup() const {
    return m_enable_continuous_backup;
}
void OAIBackupRule::setEnableContinuousBackup(const bool &enable_continuous_backup) {
    m_enable_continuous_backup = enable_continuous_backup;
    m_enable_continuous_backup_isSet = true;
}

bool OAIBackupRule::is_enable_continuous_backup_Set() const{
    return m_enable_continuous_backup_isSet;
}

bool OAIBackupRule::is_enable_continuous_backup_Valid() const{
    return m_enable_continuous_backup_isValid;
}

bool OAIBackupRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_backup_vault_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_window_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_window_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_continuous_backup_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_name_isValid && m_target_backup_vault_name_isValid && true;
}

} // namespace OpenAPI
