/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBackupSelectionOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBackupSelectionOutput::OAIGetBackupSelectionOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBackupSelectionOutput::OAIGetBackupSelectionOutput() {
    this->initializeModel();
}

OAIGetBackupSelectionOutput::~OAIGetBackupSelectionOutput() {}

void OAIGetBackupSelectionOutput::initializeModel() {

    m_backup_selection_isSet = false;
    m_backup_selection_isValid = false;

    m_selection_id_isSet = false;
    m_selection_id_isValid = false;

    m_backup_plan_id_isSet = false;
    m_backup_plan_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;
}

void OAIGetBackupSelectionOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBackupSelectionOutput::fromJsonObject(QJsonObject json) {

    m_backup_selection_isValid = ::OpenAPI::fromJsonValue(m_backup_selection, json[QString("BackupSelection")]);
    m_backup_selection_isSet = !json[QString("BackupSelection")].isNull() && m_backup_selection_isValid;

    m_selection_id_isValid = ::OpenAPI::fromJsonValue(m_selection_id, json[QString("SelectionId")]);
    m_selection_id_isSet = !json[QString("SelectionId")].isNull() && m_selection_id_isValid;

    m_backup_plan_id_isValid = ::OpenAPI::fromJsonValue(m_backup_plan_id, json[QString("BackupPlanId")]);
    m_backup_plan_id_isSet = !json[QString("BackupPlanId")].isNull() && m_backup_plan_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;
}

QString OAIGetBackupSelectionOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBackupSelectionOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_selection.isSet()) {
        obj.insert(QString("BackupSelection"), ::OpenAPI::toJsonValue(m_backup_selection));
    }
    if (m_selection_id_isSet) {
        obj.insert(QString("SelectionId"), ::OpenAPI::toJsonValue(m_selection_id));
    }
    if (m_backup_plan_id_isSet) {
        obj.insert(QString("BackupPlanId"), ::OpenAPI::toJsonValue(m_backup_plan_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    return obj;
}

OAIGetBackupSelectionOutput_BackupSelection OAIGetBackupSelectionOutput::getBackupSelection() const {
    return m_backup_selection;
}
void OAIGetBackupSelectionOutput::setBackupSelection(const OAIGetBackupSelectionOutput_BackupSelection &backup_selection) {
    m_backup_selection = backup_selection;
    m_backup_selection_isSet = true;
}

bool OAIGetBackupSelectionOutput::is_backup_selection_Set() const{
    return m_backup_selection_isSet;
}

bool OAIGetBackupSelectionOutput::is_backup_selection_Valid() const{
    return m_backup_selection_isValid;
}

QString OAIGetBackupSelectionOutput::getSelectionId() const {
    return m_selection_id;
}
void OAIGetBackupSelectionOutput::setSelectionId(const QString &selection_id) {
    m_selection_id = selection_id;
    m_selection_id_isSet = true;
}

bool OAIGetBackupSelectionOutput::is_selection_id_Set() const{
    return m_selection_id_isSet;
}

bool OAIGetBackupSelectionOutput::is_selection_id_Valid() const{
    return m_selection_id_isValid;
}

QString OAIGetBackupSelectionOutput::getBackupPlanId() const {
    return m_backup_plan_id;
}
void OAIGetBackupSelectionOutput::setBackupPlanId(const QString &backup_plan_id) {
    m_backup_plan_id = backup_plan_id;
    m_backup_plan_id_isSet = true;
}

bool OAIGetBackupSelectionOutput::is_backup_plan_id_Set() const{
    return m_backup_plan_id_isSet;
}

bool OAIGetBackupSelectionOutput::is_backup_plan_id_Valid() const{
    return m_backup_plan_id_isValid;
}

QDateTime OAIGetBackupSelectionOutput::getCreationDate() const {
    return m_creation_date;
}
void OAIGetBackupSelectionOutput::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIGetBackupSelectionOutput::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIGetBackupSelectionOutput::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIGetBackupSelectionOutput::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAIGetBackupSelectionOutput::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAIGetBackupSelectionOutput::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAIGetBackupSelectionOutput::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

bool OAIGetBackupSelectionOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBackupSelectionOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
