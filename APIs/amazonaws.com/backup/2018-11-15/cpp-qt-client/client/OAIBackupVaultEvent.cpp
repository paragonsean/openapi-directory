/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupVaultEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupVaultEvent::OAIBackupVaultEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupVaultEvent::OAIBackupVaultEvent() {
    this->initializeModel();
}

OAIBackupVaultEvent::~OAIBackupVaultEvent() {}

void OAIBackupVaultEvent::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBackupVaultEvent::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBackupVaultEvent::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BACKUP_JOB_STARTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::BACKUP_JOB_STARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKUP_JOB_COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::BACKUP_JOB_COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKUP_JOB_SUCCESSFUL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::BACKUP_JOB_SUCCESSFUL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKUP_JOB_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::BACKUP_JOB_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKUP_JOB_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::BACKUP_JOB_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESTORE_JOB_STARTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::RESTORE_JOB_STARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESTORE_JOB_COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::RESTORE_JOB_COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESTORE_JOB_SUCCESSFUL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::RESTORE_JOB_SUCCESSFUL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESTORE_JOB_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::RESTORE_JOB_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COPY_JOB_STARTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::COPY_JOB_STARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COPY_JOB_SUCCESSFUL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::COPY_JOB_SUCCESSFUL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COPY_JOB_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::COPY_JOB_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RECOVERY_POINT_MODIFIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::RECOVERY_POINT_MODIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKUP_PLAN_CREATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::BACKUP_PLAN_CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKUP_PLAN_MODIFIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::BACKUP_PLAN_MODIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3_BACKUP_OBJECT_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::S3_BACKUP_OBJECT_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3_RESTORE_OBJECT_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupVaultEvent::S3_RESTORE_OBJECT_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBackupVaultEvent::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBackupVaultEvent::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBackupVaultEvent::BACKUP_JOB_STARTED:
            val = "BACKUP_JOB_STARTED";
            break;
        case eOAIBackupVaultEvent::BACKUP_JOB_COMPLETED:
            val = "BACKUP_JOB_COMPLETED";
            break;
        case eOAIBackupVaultEvent::BACKUP_JOB_SUCCESSFUL:
            val = "BACKUP_JOB_SUCCESSFUL";
            break;
        case eOAIBackupVaultEvent::BACKUP_JOB_FAILED:
            val = "BACKUP_JOB_FAILED";
            break;
        case eOAIBackupVaultEvent::BACKUP_JOB_EXPIRED:
            val = "BACKUP_JOB_EXPIRED";
            break;
        case eOAIBackupVaultEvent::RESTORE_JOB_STARTED:
            val = "RESTORE_JOB_STARTED";
            break;
        case eOAIBackupVaultEvent::RESTORE_JOB_COMPLETED:
            val = "RESTORE_JOB_COMPLETED";
            break;
        case eOAIBackupVaultEvent::RESTORE_JOB_SUCCESSFUL:
            val = "RESTORE_JOB_SUCCESSFUL";
            break;
        case eOAIBackupVaultEvent::RESTORE_JOB_FAILED:
            val = "RESTORE_JOB_FAILED";
            break;
        case eOAIBackupVaultEvent::COPY_JOB_STARTED:
            val = "COPY_JOB_STARTED";
            break;
        case eOAIBackupVaultEvent::COPY_JOB_SUCCESSFUL:
            val = "COPY_JOB_SUCCESSFUL";
            break;
        case eOAIBackupVaultEvent::COPY_JOB_FAILED:
            val = "COPY_JOB_FAILED";
            break;
        case eOAIBackupVaultEvent::RECOVERY_POINT_MODIFIED:
            val = "RECOVERY_POINT_MODIFIED";
            break;
        case eOAIBackupVaultEvent::BACKUP_PLAN_CREATED:
            val = "BACKUP_PLAN_CREATED";
            break;
        case eOAIBackupVaultEvent::BACKUP_PLAN_MODIFIED:
            val = "BACKUP_PLAN_MODIFIED";
            break;
        case eOAIBackupVaultEvent::S3_BACKUP_OBJECT_FAILED:
            val = "S3_BACKUP_OBJECT_FAILED";
            break;
        case eOAIBackupVaultEvent::S3_RESTORE_OBJECT_FAILED:
            val = "S3_RESTORE_OBJECT_FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBackupVaultEvent::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBackupVaultEvent::eOAIBackupVaultEvent OAIBackupVaultEvent::getValue() const {
    return m_value;
}

void OAIBackupVaultEvent::setValue(const OAIBackupVaultEvent::eOAIBackupVaultEvent& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBackupVaultEvent::isSet() const {
    
    return m_value_isSet;
}

bool OAIBackupVaultEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
