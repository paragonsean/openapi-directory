/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartRestoreJobInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartRestoreJobInput::OAIStartRestoreJobInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartRestoreJobInput::OAIStartRestoreJobInput() {
    this->initializeModel();
}

OAIStartRestoreJobInput::~OAIStartRestoreJobInput() {}

void OAIStartRestoreJobInput::initializeModel() {

    m_recovery_point_arn_isSet = false;
    m_recovery_point_arn_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_copy_source_tags_to_restored_resource_isSet = false;
    m_copy_source_tags_to_restored_resource_isValid = false;
}

void OAIStartRestoreJobInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartRestoreJobInput::fromJsonObject(QJsonObject json) {

    m_recovery_point_arn_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_arn, json[QString("RecoveryPointArn")]);
    m_recovery_point_arn_isSet = !json[QString("RecoveryPointArn")].isNull() && m_recovery_point_arn_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("IamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("IamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_copy_source_tags_to_restored_resource_isValid = ::OpenAPI::fromJsonValue(m_copy_source_tags_to_restored_resource, json[QString("CopySourceTagsToRestoredResource")]);
    m_copy_source_tags_to_restored_resource_isSet = !json[QString("CopySourceTagsToRestoredResource")].isNull() && m_copy_source_tags_to_restored_resource_isValid;
}

QString OAIStartRestoreJobInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartRestoreJobInput::asJsonObject() const {
    QJsonObject obj;
    if (m_recovery_point_arn_isSet) {
        obj.insert(QString("RecoveryPointArn"), ::OpenAPI::toJsonValue(m_recovery_point_arn));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("IamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_copy_source_tags_to_restored_resource_isSet) {
        obj.insert(QString("CopySourceTagsToRestoredResource"), ::OpenAPI::toJsonValue(m_copy_source_tags_to_restored_resource));
    }
    return obj;
}

QString OAIStartRestoreJobInput::getRecoveryPointArn() const {
    return m_recovery_point_arn;
}
void OAIStartRestoreJobInput::setRecoveryPointArn(const QString &recovery_point_arn) {
    m_recovery_point_arn = recovery_point_arn;
    m_recovery_point_arn_isSet = true;
}

bool OAIStartRestoreJobInput::is_recovery_point_arn_Set() const{
    return m_recovery_point_arn_isSet;
}

bool OAIStartRestoreJobInput::is_recovery_point_arn_Valid() const{
    return m_recovery_point_arn_isValid;
}

QMap OAIStartRestoreJobInput::getMetadata() const {
    return m_metadata;
}
void OAIStartRestoreJobInput::setMetadata(const QMap &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIStartRestoreJobInput::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIStartRestoreJobInput::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIStartRestoreJobInput::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAIStartRestoreJobInput::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAIStartRestoreJobInput::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAIStartRestoreJobInput::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

QString OAIStartRestoreJobInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAIStartRestoreJobInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAIStartRestoreJobInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAIStartRestoreJobInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

QString OAIStartRestoreJobInput::getResourceType() const {
    return m_resource_type;
}
void OAIStartRestoreJobInput::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIStartRestoreJobInput::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIStartRestoreJobInput::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

bool OAIStartRestoreJobInput::getCopySourceTagsToRestoredResource() const {
    return m_copy_source_tags_to_restored_resource;
}
void OAIStartRestoreJobInput::setCopySourceTagsToRestoredResource(const bool &copy_source_tags_to_restored_resource) {
    m_copy_source_tags_to_restored_resource = copy_source_tags_to_restored_resource;
    m_copy_source_tags_to_restored_resource_isSet = true;
}

bool OAIStartRestoreJobInput::is_copy_source_tags_to_restored_resource_Set() const{
    return m_copy_source_tags_to_restored_resource_isSet;
}

bool OAIStartRestoreJobInput::is_copy_source_tags_to_restored_resource_Valid() const{
    return m_copy_source_tags_to_restored_resource_isValid;
}

bool OAIStartRestoreJobInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recovery_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_source_tags_to_restored_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartRestoreJobInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recovery_point_arn_isValid && m_metadata_isValid && true;
}

} // namespace OpenAPI
