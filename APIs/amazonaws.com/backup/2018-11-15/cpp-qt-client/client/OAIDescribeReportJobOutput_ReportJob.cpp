/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeReportJobOutput_ReportJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeReportJobOutput_ReportJob::OAIDescribeReportJobOutput_ReportJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeReportJobOutput_ReportJob::OAIDescribeReportJobOutput_ReportJob() {
    this->initializeModel();
}

OAIDescribeReportJobOutput_ReportJob::~OAIDescribeReportJobOutput_ReportJob() {}

void OAIDescribeReportJobOutput_ReportJob::initializeModel() {

    m_report_job_id_isSet = false;
    m_report_job_id_isValid = false;

    m_report_plan_arn_isSet = false;
    m_report_plan_arn_isValid = false;

    m_report_template_isSet = false;
    m_report_template_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_report_destination_isSet = false;
    m_report_destination_isValid = false;
}

void OAIDescribeReportJobOutput_ReportJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeReportJobOutput_ReportJob::fromJsonObject(QJsonObject json) {

    m_report_job_id_isValid = ::OpenAPI::fromJsonValue(m_report_job_id, json[QString("ReportJobId")]);
    m_report_job_id_isSet = !json[QString("ReportJobId")].isNull() && m_report_job_id_isValid;

    m_report_plan_arn_isValid = ::OpenAPI::fromJsonValue(m_report_plan_arn, json[QString("ReportPlanArn")]);
    m_report_plan_arn_isSet = !json[QString("ReportPlanArn")].isNull() && m_report_plan_arn_isValid;

    m_report_template_isValid = ::OpenAPI::fromJsonValue(m_report_template, json[QString("ReportTemplate")]);
    m_report_template_isSet = !json[QString("ReportTemplate")].isNull() && m_report_template_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("CompletionTime")]);
    m_completion_time_isSet = !json[QString("CompletionTime")].isNull() && m_completion_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_report_destination_isValid = ::OpenAPI::fromJsonValue(m_report_destination, json[QString("ReportDestination")]);
    m_report_destination_isSet = !json[QString("ReportDestination")].isNull() && m_report_destination_isValid;
}

QString OAIDescribeReportJobOutput_ReportJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeReportJobOutput_ReportJob::asJsonObject() const {
    QJsonObject obj;
    if (m_report_job_id_isSet) {
        obj.insert(QString("ReportJobId"), ::OpenAPI::toJsonValue(m_report_job_id));
    }
    if (m_report_plan_arn_isSet) {
        obj.insert(QString("ReportPlanArn"), ::OpenAPI::toJsonValue(m_report_plan_arn));
    }
    if (m_report_template_isSet) {
        obj.insert(QString("ReportTemplate"), ::OpenAPI::toJsonValue(m_report_template));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_completion_time_isSet) {
        obj.insert(QString("CompletionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_report_destination.isSet()) {
        obj.insert(QString("ReportDestination"), ::OpenAPI::toJsonValue(m_report_destination));
    }
    return obj;
}

QString OAIDescribeReportJobOutput_ReportJob::getReportJobId() const {
    return m_report_job_id;
}
void OAIDescribeReportJobOutput_ReportJob::setReportJobId(const QString &report_job_id) {
    m_report_job_id = report_job_id;
    m_report_job_id_isSet = true;
}

bool OAIDescribeReportJobOutput_ReportJob::is_report_job_id_Set() const{
    return m_report_job_id_isSet;
}

bool OAIDescribeReportJobOutput_ReportJob::is_report_job_id_Valid() const{
    return m_report_job_id_isValid;
}

QString OAIDescribeReportJobOutput_ReportJob::getReportPlanArn() const {
    return m_report_plan_arn;
}
void OAIDescribeReportJobOutput_ReportJob::setReportPlanArn(const QString &report_plan_arn) {
    m_report_plan_arn = report_plan_arn;
    m_report_plan_arn_isSet = true;
}

bool OAIDescribeReportJobOutput_ReportJob::is_report_plan_arn_Set() const{
    return m_report_plan_arn_isSet;
}

bool OAIDescribeReportJobOutput_ReportJob::is_report_plan_arn_Valid() const{
    return m_report_plan_arn_isValid;
}

QString OAIDescribeReportJobOutput_ReportJob::getReportTemplate() const {
    return m_report_template;
}
void OAIDescribeReportJobOutput_ReportJob::setReportTemplate(const QString &report_template) {
    m_report_template = report_template;
    m_report_template_isSet = true;
}

bool OAIDescribeReportJobOutput_ReportJob::is_report_template_Set() const{
    return m_report_template_isSet;
}

bool OAIDescribeReportJobOutput_ReportJob::is_report_template_Valid() const{
    return m_report_template_isValid;
}

QDateTime OAIDescribeReportJobOutput_ReportJob::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeReportJobOutput_ReportJob::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeReportJobOutput_ReportJob::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeReportJobOutput_ReportJob::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeReportJobOutput_ReportJob::getCompletionTime() const {
    return m_completion_time;
}
void OAIDescribeReportJobOutput_ReportJob::setCompletionTime(const QDateTime &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIDescribeReportJobOutput_ReportJob::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIDescribeReportJobOutput_ReportJob::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

QString OAIDescribeReportJobOutput_ReportJob::getStatus() const {
    return m_status;
}
void OAIDescribeReportJobOutput_ReportJob::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeReportJobOutput_ReportJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeReportJobOutput_ReportJob::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeReportJobOutput_ReportJob::getStatusMessage() const {
    return m_status_message;
}
void OAIDescribeReportJobOutput_ReportJob::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIDescribeReportJobOutput_ReportJob::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIDescribeReportJobOutput_ReportJob::is_status_message_Valid() const{
    return m_status_message_isValid;
}

OAIReportJob_ReportDestination OAIDescribeReportJobOutput_ReportJob::getReportDestination() const {
    return m_report_destination;
}
void OAIDescribeReportJobOutput_ReportJob::setReportDestination(const OAIReportJob_ReportDestination &report_destination) {
    m_report_destination = report_destination;
    m_report_destination_isSet = true;
}

bool OAIDescribeReportJobOutput_ReportJob::is_report_destination_Set() const{
    return m_report_destination_isSet;
}

bool OAIDescribeReportJobOutput_ReportJob::is_report_destination_Valid() const{
    return m_report_destination_isValid;
}

bool OAIDescribeReportJobOutput_ReportJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_plan_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeReportJobOutput_ReportJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
