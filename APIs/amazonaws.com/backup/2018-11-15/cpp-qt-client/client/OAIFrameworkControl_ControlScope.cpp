/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrameworkControl_ControlScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrameworkControl_ControlScope::OAIFrameworkControl_ControlScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrameworkControl_ControlScope::OAIFrameworkControl_ControlScope() {
    this->initializeModel();
}

OAIFrameworkControl_ControlScope::~OAIFrameworkControl_ControlScope() {}

void OAIFrameworkControl_ControlScope::initializeModel() {

    m_compliance_resource_ids_isSet = false;
    m_compliance_resource_ids_isValid = false;

    m_compliance_resource_types_isSet = false;
    m_compliance_resource_types_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIFrameworkControl_ControlScope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrameworkControl_ControlScope::fromJsonObject(QJsonObject json) {

    m_compliance_resource_ids_isValid = ::OpenAPI::fromJsonValue(m_compliance_resource_ids, json[QString("ComplianceResourceIds")]);
    m_compliance_resource_ids_isSet = !json[QString("ComplianceResourceIds")].isNull() && m_compliance_resource_ids_isValid;

    m_compliance_resource_types_isValid = ::OpenAPI::fromJsonValue(m_compliance_resource_types, json[QString("ComplianceResourceTypes")]);
    m_compliance_resource_types_isSet = !json[QString("ComplianceResourceTypes")].isNull() && m_compliance_resource_types_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIFrameworkControl_ControlScope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrameworkControl_ControlScope::asJsonObject() const {
    QJsonObject obj;
    if (m_compliance_resource_ids.isSet()) {
        obj.insert(QString("ComplianceResourceIds"), ::OpenAPI::toJsonValue(m_compliance_resource_ids));
    }
    if (m_compliance_resource_types.isSet()) {
        obj.insert(QString("ComplianceResourceTypes"), ::OpenAPI::toJsonValue(m_compliance_resource_types));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList OAIFrameworkControl_ControlScope::getComplianceResourceIds() const {
    return m_compliance_resource_ids;
}
void OAIFrameworkControl_ControlScope::setComplianceResourceIds(const QList &compliance_resource_ids) {
    m_compliance_resource_ids = compliance_resource_ids;
    m_compliance_resource_ids_isSet = true;
}

bool OAIFrameworkControl_ControlScope::is_compliance_resource_ids_Set() const{
    return m_compliance_resource_ids_isSet;
}

bool OAIFrameworkControl_ControlScope::is_compliance_resource_ids_Valid() const{
    return m_compliance_resource_ids_isValid;
}

QList OAIFrameworkControl_ControlScope::getComplianceResourceTypes() const {
    return m_compliance_resource_types;
}
void OAIFrameworkControl_ControlScope::setComplianceResourceTypes(const QList &compliance_resource_types) {
    m_compliance_resource_types = compliance_resource_types;
    m_compliance_resource_types_isSet = true;
}

bool OAIFrameworkControl_ControlScope::is_compliance_resource_types_Set() const{
    return m_compliance_resource_types_isSet;
}

bool OAIFrameworkControl_ControlScope::is_compliance_resource_types_Valid() const{
    return m_compliance_resource_types_isValid;
}

QMap OAIFrameworkControl_ControlScope::getTags() const {
    return m_tags;
}
void OAIFrameworkControl_ControlScope::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIFrameworkControl_ControlScope::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIFrameworkControl_ControlScope::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIFrameworkControl_ControlScope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compliance_resource_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_resource_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrameworkControl_ControlScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
