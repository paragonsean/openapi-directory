/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILifecycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILifecycle::OAILifecycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILifecycle::OAILifecycle() {
    this->initializeModel();
}

OAILifecycle::~OAILifecycle() {}

void OAILifecycle::initializeModel() {

    m_move_to_cold_storage_after_days_isSet = false;
    m_move_to_cold_storage_after_days_isValid = false;

    m_delete_after_days_isSet = false;
    m_delete_after_days_isValid = false;
}

void OAILifecycle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILifecycle::fromJsonObject(QJsonObject json) {

    m_move_to_cold_storage_after_days_isValid = ::OpenAPI::fromJsonValue(m_move_to_cold_storage_after_days, json[QString("MoveToColdStorageAfterDays")]);
    m_move_to_cold_storage_after_days_isSet = !json[QString("MoveToColdStorageAfterDays")].isNull() && m_move_to_cold_storage_after_days_isValid;

    m_delete_after_days_isValid = ::OpenAPI::fromJsonValue(m_delete_after_days, json[QString("DeleteAfterDays")]);
    m_delete_after_days_isSet = !json[QString("DeleteAfterDays")].isNull() && m_delete_after_days_isValid;
}

QString OAILifecycle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILifecycle::asJsonObject() const {
    QJsonObject obj;
    if (m_move_to_cold_storage_after_days_isSet) {
        obj.insert(QString("MoveToColdStorageAfterDays"), ::OpenAPI::toJsonValue(m_move_to_cold_storage_after_days));
    }
    if (m_delete_after_days_isSet) {
        obj.insert(QString("DeleteAfterDays"), ::OpenAPI::toJsonValue(m_delete_after_days));
    }
    return obj;
}

qint32 OAILifecycle::getMoveToColdStorageAfterDays() const {
    return m_move_to_cold_storage_after_days;
}
void OAILifecycle::setMoveToColdStorageAfterDays(const qint32 &move_to_cold_storage_after_days) {
    m_move_to_cold_storage_after_days = move_to_cold_storage_after_days;
    m_move_to_cold_storage_after_days_isSet = true;
}

bool OAILifecycle::is_move_to_cold_storage_after_days_Set() const{
    return m_move_to_cold_storage_after_days_isSet;
}

bool OAILifecycle::is_move_to_cold_storage_after_days_Valid() const{
    return m_move_to_cold_storage_after_days_isValid;
}

qint32 OAILifecycle::getDeleteAfterDays() const {
    return m_delete_after_days;
}
void OAILifecycle::setDeleteAfterDays(const qint32 &delete_after_days) {
    m_delete_after_days = delete_after_days;
    m_delete_after_days_isSet = true;
}

bool OAILifecycle::is_delete_after_days_Set() const{
    return m_delete_after_days_isSet;
}

bool OAILifecycle::is_delete_after_days_Valid() const{
    return m_delete_after_days_isValid;
}

bool OAILifecycle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_move_to_cold_storage_after_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_after_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILifecycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
