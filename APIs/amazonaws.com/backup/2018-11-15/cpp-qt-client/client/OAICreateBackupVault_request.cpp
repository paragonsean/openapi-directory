/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBackupVault_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBackupVault_request::OAICreateBackupVault_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBackupVault_request::OAICreateBackupVault_request() {
    this->initializeModel();
}

OAICreateBackupVault_request::~OAICreateBackupVault_request() {}

void OAICreateBackupVault_request::initializeModel() {

    m_backup_vault_tags_isSet = false;
    m_backup_vault_tags_isValid = false;

    m_encryption_key_arn_isSet = false;
    m_encryption_key_arn_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;
}

void OAICreateBackupVault_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBackupVault_request::fromJsonObject(QJsonObject json) {

    m_backup_vault_tags_isValid = ::OpenAPI::fromJsonValue(m_backup_vault_tags, json[QString("BackupVaultTags")]);
    m_backup_vault_tags_isSet = !json[QString("BackupVaultTags")].isNull() && m_backup_vault_tags_isValid;

    m_encryption_key_arn_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_arn, json[QString("EncryptionKeyArn")]);
    m_encryption_key_arn_isSet = !json[QString("EncryptionKeyArn")].isNull() && m_encryption_key_arn_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;
}

QString OAICreateBackupVault_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBackupVault_request::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_vault_tags.size() > 0) {
        obj.insert(QString("BackupVaultTags"), ::OpenAPI::toJsonValue(m_backup_vault_tags));
    }
    if (m_encryption_key_arn_isSet) {
        obj.insert(QString("EncryptionKeyArn"), ::OpenAPI::toJsonValue(m_encryption_key_arn));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    return obj;
}

QMap<QString, QString> OAICreateBackupVault_request::getBackupVaultTags() const {
    return m_backup_vault_tags;
}
void OAICreateBackupVault_request::setBackupVaultTags(const QMap<QString, QString> &backup_vault_tags) {
    m_backup_vault_tags = backup_vault_tags;
    m_backup_vault_tags_isSet = true;
}

bool OAICreateBackupVault_request::is_backup_vault_tags_Set() const{
    return m_backup_vault_tags_isSet;
}

bool OAICreateBackupVault_request::is_backup_vault_tags_Valid() const{
    return m_backup_vault_tags_isValid;
}

QString OAICreateBackupVault_request::getEncryptionKeyArn() const {
    return m_encryption_key_arn;
}
void OAICreateBackupVault_request::setEncryptionKeyArn(const QString &encryption_key_arn) {
    m_encryption_key_arn = encryption_key_arn;
    m_encryption_key_arn_isSet = true;
}

bool OAICreateBackupVault_request::is_encryption_key_arn_Set() const{
    return m_encryption_key_arn_isSet;
}

bool OAICreateBackupVault_request::is_encryption_key_arn_Valid() const{
    return m_encryption_key_arn_isValid;
}

QString OAICreateBackupVault_request::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAICreateBackupVault_request::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAICreateBackupVault_request::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAICreateBackupVault_request::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

bool OAICreateBackupVault_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_vault_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBackupVault_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
