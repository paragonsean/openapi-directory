/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICopyAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICopyAction::OAICopyAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICopyAction::OAICopyAction() {
    this->initializeModel();
}

OAICopyAction::~OAICopyAction() {}

void OAICopyAction::initializeModel() {

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_destination_backup_vault_arn_isSet = false;
    m_destination_backup_vault_arn_isValid = false;
}

void OAICopyAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICopyAction::fromJsonObject(QJsonObject json) {

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;

    m_destination_backup_vault_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_backup_vault_arn, json[QString("DestinationBackupVaultArn")]);
    m_destination_backup_vault_arn_isSet = !json[QString("DestinationBackupVaultArn")].isNull() && m_destination_backup_vault_arn_isValid;
}

QString OAICopyAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICopyAction::asJsonObject() const {
    QJsonObject obj;
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_destination_backup_vault_arn_isSet) {
        obj.insert(QString("DestinationBackupVaultArn"), ::OpenAPI::toJsonValue(m_destination_backup_vault_arn));
    }
    return obj;
}

OAILifecycle OAICopyAction::getLifecycle() const {
    return m_lifecycle;
}
void OAICopyAction::setLifecycle(const OAILifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAICopyAction::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAICopyAction::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

QString OAICopyAction::getDestinationBackupVaultArn() const {
    return m_destination_backup_vault_arn;
}
void OAICopyAction::setDestinationBackupVaultArn(const QString &destination_backup_vault_arn) {
    m_destination_backup_vault_arn = destination_backup_vault_arn;
    m_destination_backup_vault_arn_isSet = true;
}

bool OAICopyAction::is_destination_backup_vault_arn_Set() const{
    return m_destination_backup_vault_arn_isSet;
}

bool OAICopyAction::is_destination_backup_vault_arn_Valid() const{
    return m_destination_backup_vault_arn_isValid;
}

bool OAICopyAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_backup_vault_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICopyAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_backup_vault_arn_isValid && true;
}

} // namespace OpenAPI
