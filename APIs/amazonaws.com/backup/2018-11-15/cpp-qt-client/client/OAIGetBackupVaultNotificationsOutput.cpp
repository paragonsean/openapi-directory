/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBackupVaultNotificationsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBackupVaultNotificationsOutput::OAIGetBackupVaultNotificationsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBackupVaultNotificationsOutput::OAIGetBackupVaultNotificationsOutput() {
    this->initializeModel();
}

OAIGetBackupVaultNotificationsOutput::~OAIGetBackupVaultNotificationsOutput() {}

void OAIGetBackupVaultNotificationsOutput::initializeModel() {

    m_backup_vault_name_isSet = false;
    m_backup_vault_name_isValid = false;

    m_backup_vault_arn_isSet = false;
    m_backup_vault_arn_isValid = false;

    m_sns_topic_arn_isSet = false;
    m_sns_topic_arn_isValid = false;

    m_backup_vault_events_isSet = false;
    m_backup_vault_events_isValid = false;
}

void OAIGetBackupVaultNotificationsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBackupVaultNotificationsOutput::fromJsonObject(QJsonObject json) {

    m_backup_vault_name_isValid = ::OpenAPI::fromJsonValue(m_backup_vault_name, json[QString("BackupVaultName")]);
    m_backup_vault_name_isSet = !json[QString("BackupVaultName")].isNull() && m_backup_vault_name_isValid;

    m_backup_vault_arn_isValid = ::OpenAPI::fromJsonValue(m_backup_vault_arn, json[QString("BackupVaultArn")]);
    m_backup_vault_arn_isSet = !json[QString("BackupVaultArn")].isNull() && m_backup_vault_arn_isValid;

    m_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_arn, json[QString("SNSTopicArn")]);
    m_sns_topic_arn_isSet = !json[QString("SNSTopicArn")].isNull() && m_sns_topic_arn_isValid;

    m_backup_vault_events_isValid = ::OpenAPI::fromJsonValue(m_backup_vault_events, json[QString("BackupVaultEvents")]);
    m_backup_vault_events_isSet = !json[QString("BackupVaultEvents")].isNull() && m_backup_vault_events_isValid;
}

QString OAIGetBackupVaultNotificationsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBackupVaultNotificationsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_vault_name_isSet) {
        obj.insert(QString("BackupVaultName"), ::OpenAPI::toJsonValue(m_backup_vault_name));
    }
    if (m_backup_vault_arn_isSet) {
        obj.insert(QString("BackupVaultArn"), ::OpenAPI::toJsonValue(m_backup_vault_arn));
    }
    if (m_sns_topic_arn_isSet) {
        obj.insert(QString("SNSTopicArn"), ::OpenAPI::toJsonValue(m_sns_topic_arn));
    }
    if (m_backup_vault_events.isSet()) {
        obj.insert(QString("BackupVaultEvents"), ::OpenAPI::toJsonValue(m_backup_vault_events));
    }
    return obj;
}

QString OAIGetBackupVaultNotificationsOutput::getBackupVaultName() const {
    return m_backup_vault_name;
}
void OAIGetBackupVaultNotificationsOutput::setBackupVaultName(const QString &backup_vault_name) {
    m_backup_vault_name = backup_vault_name;
    m_backup_vault_name_isSet = true;
}

bool OAIGetBackupVaultNotificationsOutput::is_backup_vault_name_Set() const{
    return m_backup_vault_name_isSet;
}

bool OAIGetBackupVaultNotificationsOutput::is_backup_vault_name_Valid() const{
    return m_backup_vault_name_isValid;
}

QString OAIGetBackupVaultNotificationsOutput::getBackupVaultArn() const {
    return m_backup_vault_arn;
}
void OAIGetBackupVaultNotificationsOutput::setBackupVaultArn(const QString &backup_vault_arn) {
    m_backup_vault_arn = backup_vault_arn;
    m_backup_vault_arn_isSet = true;
}

bool OAIGetBackupVaultNotificationsOutput::is_backup_vault_arn_Set() const{
    return m_backup_vault_arn_isSet;
}

bool OAIGetBackupVaultNotificationsOutput::is_backup_vault_arn_Valid() const{
    return m_backup_vault_arn_isValid;
}

QString OAIGetBackupVaultNotificationsOutput::getSnsTopicArn() const {
    return m_sns_topic_arn;
}
void OAIGetBackupVaultNotificationsOutput::setSnsTopicArn(const QString &sns_topic_arn) {
    m_sns_topic_arn = sns_topic_arn;
    m_sns_topic_arn_isSet = true;
}

bool OAIGetBackupVaultNotificationsOutput::is_sns_topic_arn_Set() const{
    return m_sns_topic_arn_isSet;
}

bool OAIGetBackupVaultNotificationsOutput::is_sns_topic_arn_Valid() const{
    return m_sns_topic_arn_isValid;
}

QList OAIGetBackupVaultNotificationsOutput::getBackupVaultEvents() const {
    return m_backup_vault_events;
}
void OAIGetBackupVaultNotificationsOutput::setBackupVaultEvents(const QList &backup_vault_events) {
    m_backup_vault_events = backup_vault_events;
    m_backup_vault_events_isSet = true;
}

bool OAIGetBackupVaultNotificationsOutput::is_backup_vault_events_Set() const{
    return m_backup_vault_events_isSet;
}

bool OAIGetBackupVaultNotificationsOutput::is_backup_vault_events_Valid() const{
    return m_backup_vault_events_isValid;
}

bool OAIGetBackupVaultNotificationsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_vault_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_vault_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_vault_events.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBackupVaultNotificationsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
