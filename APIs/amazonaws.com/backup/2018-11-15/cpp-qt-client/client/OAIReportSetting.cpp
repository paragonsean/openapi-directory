/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportSetting::OAIReportSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportSetting::OAIReportSetting() {
    this->initializeModel();
}

OAIReportSetting::~OAIReportSetting() {}

void OAIReportSetting::initializeModel() {

    m_report_template_isSet = false;
    m_report_template_isValid = false;

    m_framework_arns_isSet = false;
    m_framework_arns_isValid = false;

    m_number_of_frameworks_isSet = false;
    m_number_of_frameworks_isValid = false;

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_organization_units_isSet = false;
    m_organization_units_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;
}

void OAIReportSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportSetting::fromJsonObject(QJsonObject json) {

    m_report_template_isValid = ::OpenAPI::fromJsonValue(m_report_template, json[QString("ReportTemplate")]);
    m_report_template_isSet = !json[QString("ReportTemplate")].isNull() && m_report_template_isValid;

    m_framework_arns_isValid = ::OpenAPI::fromJsonValue(m_framework_arns, json[QString("FrameworkArns")]);
    m_framework_arns_isSet = !json[QString("FrameworkArns")].isNull() && m_framework_arns_isValid;

    m_number_of_frameworks_isValid = ::OpenAPI::fromJsonValue(m_number_of_frameworks, json[QString("NumberOfFrameworks")]);
    m_number_of_frameworks_isSet = !json[QString("NumberOfFrameworks")].isNull() && m_number_of_frameworks_isValid;

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("Accounts")]);
    m_accounts_isSet = !json[QString("Accounts")].isNull() && m_accounts_isValid;

    m_organization_units_isValid = ::OpenAPI::fromJsonValue(m_organization_units, json[QString("OrganizationUnits")]);
    m_organization_units_isSet = !json[QString("OrganizationUnits")].isNull() && m_organization_units_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("Regions")]);
    m_regions_isSet = !json[QString("Regions")].isNull() && m_regions_isValid;
}

QString OAIReportSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_report_template_isSet) {
        obj.insert(QString("ReportTemplate"), ::OpenAPI::toJsonValue(m_report_template));
    }
    if (m_framework_arns.isSet()) {
        obj.insert(QString("FrameworkArns"), ::OpenAPI::toJsonValue(m_framework_arns));
    }
    if (m_number_of_frameworks_isSet) {
        obj.insert(QString("NumberOfFrameworks"), ::OpenAPI::toJsonValue(m_number_of_frameworks));
    }
    if (m_accounts.isSet()) {
        obj.insert(QString("Accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_organization_units.isSet()) {
        obj.insert(QString("OrganizationUnits"), ::OpenAPI::toJsonValue(m_organization_units));
    }
    if (m_regions.isSet()) {
        obj.insert(QString("Regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    return obj;
}

QString OAIReportSetting::getReportTemplate() const {
    return m_report_template;
}
void OAIReportSetting::setReportTemplate(const QString &report_template) {
    m_report_template = report_template;
    m_report_template_isSet = true;
}

bool OAIReportSetting::is_report_template_Set() const{
    return m_report_template_isSet;
}

bool OAIReportSetting::is_report_template_Valid() const{
    return m_report_template_isValid;
}

QList OAIReportSetting::getFrameworkArns() const {
    return m_framework_arns;
}
void OAIReportSetting::setFrameworkArns(const QList &framework_arns) {
    m_framework_arns = framework_arns;
    m_framework_arns_isSet = true;
}

bool OAIReportSetting::is_framework_arns_Set() const{
    return m_framework_arns_isSet;
}

bool OAIReportSetting::is_framework_arns_Valid() const{
    return m_framework_arns_isValid;
}

qint32 OAIReportSetting::getNumberOfFrameworks() const {
    return m_number_of_frameworks;
}
void OAIReportSetting::setNumberOfFrameworks(const qint32 &number_of_frameworks) {
    m_number_of_frameworks = number_of_frameworks;
    m_number_of_frameworks_isSet = true;
}

bool OAIReportSetting::is_number_of_frameworks_Set() const{
    return m_number_of_frameworks_isSet;
}

bool OAIReportSetting::is_number_of_frameworks_Valid() const{
    return m_number_of_frameworks_isValid;
}

QList OAIReportSetting::getAccounts() const {
    return m_accounts;
}
void OAIReportSetting::setAccounts(const QList &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIReportSetting::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIReportSetting::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QList OAIReportSetting::getOrganizationUnits() const {
    return m_organization_units;
}
void OAIReportSetting::setOrganizationUnits(const QList &organization_units) {
    m_organization_units = organization_units;
    m_organization_units_isSet = true;
}

bool OAIReportSetting::is_organization_units_Set() const{
    return m_organization_units_isSet;
}

bool OAIReportSetting::is_organization_units_Valid() const{
    return m_organization_units_isValid;
}

QList OAIReportSetting::getRegions() const {
    return m_regions;
}
void OAIReportSetting::setRegions(const QList &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIReportSetting::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIReportSetting::is_regions_Valid() const{
    return m_regions_isValid;
}

bool OAIReportSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_frameworks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_report_template_isValid && true;
}

} // namespace OpenAPI
