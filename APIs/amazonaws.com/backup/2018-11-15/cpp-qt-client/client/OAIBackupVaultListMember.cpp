/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupVaultListMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupVaultListMember::OAIBackupVaultListMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupVaultListMember::OAIBackupVaultListMember() {
    this->initializeModel();
}

OAIBackupVaultListMember::~OAIBackupVaultListMember() {}

void OAIBackupVaultListMember::initializeModel() {

    m_backup_vault_name_isSet = false;
    m_backup_vault_name_isValid = false;

    m_backup_vault_arn_isSet = false;
    m_backup_vault_arn_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_encryption_key_arn_isSet = false;
    m_encryption_key_arn_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;

    m_number_of_recovery_points_isSet = false;
    m_number_of_recovery_points_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_min_retention_days_isSet = false;
    m_min_retention_days_isValid = false;

    m_max_retention_days_isSet = false;
    m_max_retention_days_isValid = false;

    m_lock_date_isSet = false;
    m_lock_date_isValid = false;
}

void OAIBackupVaultListMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupVaultListMember::fromJsonObject(QJsonObject json) {

    m_backup_vault_name_isValid = ::OpenAPI::fromJsonValue(m_backup_vault_name, json[QString("BackupVaultName")]);
    m_backup_vault_name_isSet = !json[QString("BackupVaultName")].isNull() && m_backup_vault_name_isValid;

    m_backup_vault_arn_isValid = ::OpenAPI::fromJsonValue(m_backup_vault_arn, json[QString("BackupVaultArn")]);
    m_backup_vault_arn_isSet = !json[QString("BackupVaultArn")].isNull() && m_backup_vault_arn_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_encryption_key_arn_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_arn, json[QString("EncryptionKeyArn")]);
    m_encryption_key_arn_isSet = !json[QString("EncryptionKeyArn")].isNull() && m_encryption_key_arn_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;

    m_number_of_recovery_points_isValid = ::OpenAPI::fromJsonValue(m_number_of_recovery_points, json[QString("NumberOfRecoveryPoints")]);
    m_number_of_recovery_points_isSet = !json[QString("NumberOfRecoveryPoints")].isNull() && m_number_of_recovery_points_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("Locked")]);
    m_locked_isSet = !json[QString("Locked")].isNull() && m_locked_isValid;

    m_min_retention_days_isValid = ::OpenAPI::fromJsonValue(m_min_retention_days, json[QString("MinRetentionDays")]);
    m_min_retention_days_isSet = !json[QString("MinRetentionDays")].isNull() && m_min_retention_days_isValid;

    m_max_retention_days_isValid = ::OpenAPI::fromJsonValue(m_max_retention_days, json[QString("MaxRetentionDays")]);
    m_max_retention_days_isSet = !json[QString("MaxRetentionDays")].isNull() && m_max_retention_days_isValid;

    m_lock_date_isValid = ::OpenAPI::fromJsonValue(m_lock_date, json[QString("LockDate")]);
    m_lock_date_isSet = !json[QString("LockDate")].isNull() && m_lock_date_isValid;
}

QString OAIBackupVaultListMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupVaultListMember::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_vault_name_isSet) {
        obj.insert(QString("BackupVaultName"), ::OpenAPI::toJsonValue(m_backup_vault_name));
    }
    if (m_backup_vault_arn_isSet) {
        obj.insert(QString("BackupVaultArn"), ::OpenAPI::toJsonValue(m_backup_vault_arn));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_encryption_key_arn_isSet) {
        obj.insert(QString("EncryptionKeyArn"), ::OpenAPI::toJsonValue(m_encryption_key_arn));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    if (m_number_of_recovery_points_isSet) {
        obj.insert(QString("NumberOfRecoveryPoints"), ::OpenAPI::toJsonValue(m_number_of_recovery_points));
    }
    if (m_locked_isSet) {
        obj.insert(QString("Locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_min_retention_days_isSet) {
        obj.insert(QString("MinRetentionDays"), ::OpenAPI::toJsonValue(m_min_retention_days));
    }
    if (m_max_retention_days_isSet) {
        obj.insert(QString("MaxRetentionDays"), ::OpenAPI::toJsonValue(m_max_retention_days));
    }
    if (m_lock_date_isSet) {
        obj.insert(QString("LockDate"), ::OpenAPI::toJsonValue(m_lock_date));
    }
    return obj;
}

QString OAIBackupVaultListMember::getBackupVaultName() const {
    return m_backup_vault_name;
}
void OAIBackupVaultListMember::setBackupVaultName(const QString &backup_vault_name) {
    m_backup_vault_name = backup_vault_name;
    m_backup_vault_name_isSet = true;
}

bool OAIBackupVaultListMember::is_backup_vault_name_Set() const{
    return m_backup_vault_name_isSet;
}

bool OAIBackupVaultListMember::is_backup_vault_name_Valid() const{
    return m_backup_vault_name_isValid;
}

QString OAIBackupVaultListMember::getBackupVaultArn() const {
    return m_backup_vault_arn;
}
void OAIBackupVaultListMember::setBackupVaultArn(const QString &backup_vault_arn) {
    m_backup_vault_arn = backup_vault_arn;
    m_backup_vault_arn_isSet = true;
}

bool OAIBackupVaultListMember::is_backup_vault_arn_Set() const{
    return m_backup_vault_arn_isSet;
}

bool OAIBackupVaultListMember::is_backup_vault_arn_Valid() const{
    return m_backup_vault_arn_isValid;
}

QDateTime OAIBackupVaultListMember::getCreationDate() const {
    return m_creation_date;
}
void OAIBackupVaultListMember::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIBackupVaultListMember::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIBackupVaultListMember::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIBackupVaultListMember::getEncryptionKeyArn() const {
    return m_encryption_key_arn;
}
void OAIBackupVaultListMember::setEncryptionKeyArn(const QString &encryption_key_arn) {
    m_encryption_key_arn = encryption_key_arn;
    m_encryption_key_arn_isSet = true;
}

bool OAIBackupVaultListMember::is_encryption_key_arn_Set() const{
    return m_encryption_key_arn_isSet;
}

bool OAIBackupVaultListMember::is_encryption_key_arn_Valid() const{
    return m_encryption_key_arn_isValid;
}

QString OAIBackupVaultListMember::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAIBackupVaultListMember::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAIBackupVaultListMember::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAIBackupVaultListMember::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

qint32 OAIBackupVaultListMember::getNumberOfRecoveryPoints() const {
    return m_number_of_recovery_points;
}
void OAIBackupVaultListMember::setNumberOfRecoveryPoints(const qint32 &number_of_recovery_points) {
    m_number_of_recovery_points = number_of_recovery_points;
    m_number_of_recovery_points_isSet = true;
}

bool OAIBackupVaultListMember::is_number_of_recovery_points_Set() const{
    return m_number_of_recovery_points_isSet;
}

bool OAIBackupVaultListMember::is_number_of_recovery_points_Valid() const{
    return m_number_of_recovery_points_isValid;
}

bool OAIBackupVaultListMember::getLocked() const {
    return m_locked;
}
void OAIBackupVaultListMember::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIBackupVaultListMember::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIBackupVaultListMember::is_locked_Valid() const{
    return m_locked_isValid;
}

qint32 OAIBackupVaultListMember::getMinRetentionDays() const {
    return m_min_retention_days;
}
void OAIBackupVaultListMember::setMinRetentionDays(const qint32 &min_retention_days) {
    m_min_retention_days = min_retention_days;
    m_min_retention_days_isSet = true;
}

bool OAIBackupVaultListMember::is_min_retention_days_Set() const{
    return m_min_retention_days_isSet;
}

bool OAIBackupVaultListMember::is_min_retention_days_Valid() const{
    return m_min_retention_days_isValid;
}

qint32 OAIBackupVaultListMember::getMaxRetentionDays() const {
    return m_max_retention_days;
}
void OAIBackupVaultListMember::setMaxRetentionDays(const qint32 &max_retention_days) {
    m_max_retention_days = max_retention_days;
    m_max_retention_days_isSet = true;
}

bool OAIBackupVaultListMember::is_max_retention_days_Set() const{
    return m_max_retention_days_isSet;
}

bool OAIBackupVaultListMember::is_max_retention_days_Valid() const{
    return m_max_retention_days_isValid;
}

QDateTime OAIBackupVaultListMember::getLockDate() const {
    return m_lock_date;
}
void OAIBackupVaultListMember::setLockDate(const QDateTime &lock_date) {
    m_lock_date = lock_date;
    m_lock_date_isSet = true;
}

bool OAIBackupVaultListMember::is_lock_date_Set() const{
    return m_lock_date_isSet;
}

bool OAIBackupVaultListMember::is_lock_date_Valid() const{
    return m_lock_date_isValid;
}

bool OAIBackupVaultListMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_vault_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_vault_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_recovery_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupVaultListMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
