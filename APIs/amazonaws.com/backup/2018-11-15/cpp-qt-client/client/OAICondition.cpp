/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICondition::OAICondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICondition::OAICondition() {
    this->initializeModel();
}

OAICondition::~OAICondition() {}

void OAICondition::initializeModel() {

    m_condition_type_isSet = false;
    m_condition_type_isValid = false;

    m_condition_key_isSet = false;
    m_condition_key_isValid = false;

    m_condition_value_isSet = false;
    m_condition_value_isValid = false;
}

void OAICondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICondition::fromJsonObject(QJsonObject json) {

    m_condition_type_isValid = ::OpenAPI::fromJsonValue(m_condition_type, json[QString("ConditionType")]);
    m_condition_type_isSet = !json[QString("ConditionType")].isNull() && m_condition_type_isValid;

    m_condition_key_isValid = ::OpenAPI::fromJsonValue(m_condition_key, json[QString("ConditionKey")]);
    m_condition_key_isSet = !json[QString("ConditionKey")].isNull() && m_condition_key_isValid;

    m_condition_value_isValid = ::OpenAPI::fromJsonValue(m_condition_value, json[QString("ConditionValue")]);
    m_condition_value_isSet = !json[QString("ConditionValue")].isNull() && m_condition_value_isValid;
}

QString OAICondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICondition::asJsonObject() const {
    QJsonObject obj;
    if (m_condition_type.isSet()) {
        obj.insert(QString("ConditionType"), ::OpenAPI::toJsonValue(m_condition_type));
    }
    if (m_condition_key_isSet) {
        obj.insert(QString("ConditionKey"), ::OpenAPI::toJsonValue(m_condition_key));
    }
    if (m_condition_value_isSet) {
        obj.insert(QString("ConditionValue"), ::OpenAPI::toJsonValue(m_condition_value));
    }
    return obj;
}

OAIConditionType OAICondition::getConditionType() const {
    return m_condition_type;
}
void OAICondition::setConditionType(const OAIConditionType &condition_type) {
    m_condition_type = condition_type;
    m_condition_type_isSet = true;
}

bool OAICondition::is_condition_type_Set() const{
    return m_condition_type_isSet;
}

bool OAICondition::is_condition_type_Valid() const{
    return m_condition_type_isValid;
}

QString OAICondition::getConditionKey() const {
    return m_condition_key;
}
void OAICondition::setConditionKey(const QString &condition_key) {
    m_condition_key = condition_key;
    m_condition_key_isSet = true;
}

bool OAICondition::is_condition_key_Set() const{
    return m_condition_key_isSet;
}

bool OAICondition::is_condition_key_Valid() const{
    return m_condition_key_isValid;
}

QString OAICondition::getConditionValue() const {
    return m_condition_value;
}
void OAICondition::setConditionValue(const QString &condition_value) {
    m_condition_value = condition_value;
    m_condition_value_isSet = true;
}

bool OAICondition::is_condition_value_Set() const{
    return m_condition_value_isSet;
}

bool OAICondition::is_condition_value_Valid() const{
    return m_condition_value_isValid;
}

bool OAICondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_condition_type_isValid && m_condition_key_isValid && m_condition_value_isValid && true;
}

} // namespace OpenAPI
