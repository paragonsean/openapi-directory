/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSupportedResourceTypesOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSupportedResourceTypesOutput::OAIGetSupportedResourceTypesOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSupportedResourceTypesOutput::OAIGetSupportedResourceTypesOutput() {
    this->initializeModel();
}

OAIGetSupportedResourceTypesOutput::~OAIGetSupportedResourceTypesOutput() {}

void OAIGetSupportedResourceTypesOutput::initializeModel() {

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;
}

void OAIGetSupportedResourceTypesOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSupportedResourceTypesOutput::fromJsonObject(QJsonObject json) {

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("ResourceTypes")]);
    m_resource_types_isSet = !json[QString("ResourceTypes")].isNull() && m_resource_types_isValid;
}

QString OAIGetSupportedResourceTypesOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSupportedResourceTypesOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_types.isSet()) {
        obj.insert(QString("ResourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    return obj;
}

QList OAIGetSupportedResourceTypesOutput::getResourceTypes() const {
    return m_resource_types;
}
void OAIGetSupportedResourceTypesOutput::setResourceTypes(const QList &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAIGetSupportedResourceTypesOutput::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAIGetSupportedResourceTypesOutput::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

bool OAIGetSupportedResourceTypesOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSupportedResourceTypesOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
