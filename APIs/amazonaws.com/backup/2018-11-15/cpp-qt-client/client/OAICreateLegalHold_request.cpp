/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLegalHold_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLegalHold_request::OAICreateLegalHold_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLegalHold_request::OAICreateLegalHold_request() {
    this->initializeModel();
}

OAICreateLegalHold_request::~OAICreateLegalHold_request() {}

void OAICreateLegalHold_request::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;

    m_recovery_point_selection_isSet = false;
    m_recovery_point_selection_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateLegalHold_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLegalHold_request::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;

    m_recovery_point_selection_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_selection, json[QString("RecoveryPointSelection")]);
    m_recovery_point_selection_isSet = !json[QString("RecoveryPointSelection")].isNull() && m_recovery_point_selection_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateLegalHold_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLegalHold_request::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    if (m_recovery_point_selection.isSet()) {
        obj.insert(QString("RecoveryPointSelection"), ::OpenAPI::toJsonValue(m_recovery_point_selection));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateLegalHold_request::getTitle() const {
    return m_title;
}
void OAICreateLegalHold_request::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICreateLegalHold_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAICreateLegalHold_request::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICreateLegalHold_request::getDescription() const {
    return m_description;
}
void OAICreateLegalHold_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateLegalHold_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateLegalHold_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateLegalHold_request::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAICreateLegalHold_request::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAICreateLegalHold_request::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAICreateLegalHold_request::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

OAICreateLegalHold_request_RecoveryPointSelection OAICreateLegalHold_request::getRecoveryPointSelection() const {
    return m_recovery_point_selection;
}
void OAICreateLegalHold_request::setRecoveryPointSelection(const OAICreateLegalHold_request_RecoveryPointSelection &recovery_point_selection) {
    m_recovery_point_selection = recovery_point_selection;
    m_recovery_point_selection_isSet = true;
}

bool OAICreateLegalHold_request::is_recovery_point_selection_Set() const{
    return m_recovery_point_selection_isSet;
}

bool OAICreateLegalHold_request::is_recovery_point_selection_Valid() const{
    return m_recovery_point_selection_isValid;
}

QMap<QString, QString> OAICreateLegalHold_request::getTags() const {
    return m_tags;
}
void OAICreateLegalHold_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLegalHold_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLegalHold_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateLegalHold_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLegalHold_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_title_isValid && m_description_isValid && true;
}

} // namespace OpenAPI
