/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateReportPlanInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateReportPlanInput::OAIUpdateReportPlanInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateReportPlanInput::OAIUpdateReportPlanInput() {
    this->initializeModel();
}

OAIUpdateReportPlanInput::~OAIUpdateReportPlanInput() {}

void OAIUpdateReportPlanInput::initializeModel() {

    m_report_plan_description_isSet = false;
    m_report_plan_description_isValid = false;

    m_report_delivery_channel_isSet = false;
    m_report_delivery_channel_isValid = false;

    m_report_setting_isSet = false;
    m_report_setting_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAIUpdateReportPlanInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateReportPlanInput::fromJsonObject(QJsonObject json) {

    m_report_plan_description_isValid = ::OpenAPI::fromJsonValue(m_report_plan_description, json[QString("ReportPlanDescription")]);
    m_report_plan_description_isSet = !json[QString("ReportPlanDescription")].isNull() && m_report_plan_description_isValid;

    m_report_delivery_channel_isValid = ::OpenAPI::fromJsonValue(m_report_delivery_channel, json[QString("ReportDeliveryChannel")]);
    m_report_delivery_channel_isSet = !json[QString("ReportDeliveryChannel")].isNull() && m_report_delivery_channel_isValid;

    m_report_setting_isValid = ::OpenAPI::fromJsonValue(m_report_setting, json[QString("ReportSetting")]);
    m_report_setting_isSet = !json[QString("ReportSetting")].isNull() && m_report_setting_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAIUpdateReportPlanInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateReportPlanInput::asJsonObject() const {
    QJsonObject obj;
    if (m_report_plan_description_isSet) {
        obj.insert(QString("ReportPlanDescription"), ::OpenAPI::toJsonValue(m_report_plan_description));
    }
    if (m_report_delivery_channel.isSet()) {
        obj.insert(QString("ReportDeliveryChannel"), ::OpenAPI::toJsonValue(m_report_delivery_channel));
    }
    if (m_report_setting.isSet()) {
        obj.insert(QString("ReportSetting"), ::OpenAPI::toJsonValue(m_report_setting));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAIUpdateReportPlanInput::getReportPlanDescription() const {
    return m_report_plan_description;
}
void OAIUpdateReportPlanInput::setReportPlanDescription(const QString &report_plan_description) {
    m_report_plan_description = report_plan_description;
    m_report_plan_description_isSet = true;
}

bool OAIUpdateReportPlanInput::is_report_plan_description_Set() const{
    return m_report_plan_description_isSet;
}

bool OAIUpdateReportPlanInput::is_report_plan_description_Valid() const{
    return m_report_plan_description_isValid;
}

OAIUpdateReportPlanInput_ReportDeliveryChannel OAIUpdateReportPlanInput::getReportDeliveryChannel() const {
    return m_report_delivery_channel;
}
void OAIUpdateReportPlanInput::setReportDeliveryChannel(const OAIUpdateReportPlanInput_ReportDeliveryChannel &report_delivery_channel) {
    m_report_delivery_channel = report_delivery_channel;
    m_report_delivery_channel_isSet = true;
}

bool OAIUpdateReportPlanInput::is_report_delivery_channel_Set() const{
    return m_report_delivery_channel_isSet;
}

bool OAIUpdateReportPlanInput::is_report_delivery_channel_Valid() const{
    return m_report_delivery_channel_isValid;
}

OAICreateReportPlanInput_ReportSetting OAIUpdateReportPlanInput::getReportSetting() const {
    return m_report_setting;
}
void OAIUpdateReportPlanInput::setReportSetting(const OAICreateReportPlanInput_ReportSetting &report_setting) {
    m_report_setting = report_setting;
    m_report_setting_isSet = true;
}

bool OAIUpdateReportPlanInput::is_report_setting_Set() const{
    return m_report_setting_isSet;
}

bool OAIUpdateReportPlanInput::is_report_setting_Valid() const{
    return m_report_setting_isValid;
}

QString OAIUpdateReportPlanInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAIUpdateReportPlanInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAIUpdateReportPlanInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAIUpdateReportPlanInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAIUpdateReportPlanInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_plan_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_delivery_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateReportPlanInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
