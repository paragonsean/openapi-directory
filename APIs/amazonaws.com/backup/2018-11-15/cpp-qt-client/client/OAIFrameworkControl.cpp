/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrameworkControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrameworkControl::OAIFrameworkControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrameworkControl::OAIFrameworkControl() {
    this->initializeModel();
}

OAIFrameworkControl::~OAIFrameworkControl() {}

void OAIFrameworkControl::initializeModel() {

    m_control_name_isSet = false;
    m_control_name_isValid = false;

    m_control_input_parameters_isSet = false;
    m_control_input_parameters_isValid = false;

    m_control_scope_isSet = false;
    m_control_scope_isValid = false;
}

void OAIFrameworkControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrameworkControl::fromJsonObject(QJsonObject json) {

    m_control_name_isValid = ::OpenAPI::fromJsonValue(m_control_name, json[QString("ControlName")]);
    m_control_name_isSet = !json[QString("ControlName")].isNull() && m_control_name_isValid;

    m_control_input_parameters_isValid = ::OpenAPI::fromJsonValue(m_control_input_parameters, json[QString("ControlInputParameters")]);
    m_control_input_parameters_isSet = !json[QString("ControlInputParameters")].isNull() && m_control_input_parameters_isValid;

    m_control_scope_isValid = ::OpenAPI::fromJsonValue(m_control_scope, json[QString("ControlScope")]);
    m_control_scope_isSet = !json[QString("ControlScope")].isNull() && m_control_scope_isValid;
}

QString OAIFrameworkControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrameworkControl::asJsonObject() const {
    QJsonObject obj;
    if (m_control_name_isSet) {
        obj.insert(QString("ControlName"), ::OpenAPI::toJsonValue(m_control_name));
    }
    if (m_control_input_parameters.isSet()) {
        obj.insert(QString("ControlInputParameters"), ::OpenAPI::toJsonValue(m_control_input_parameters));
    }
    if (m_control_scope.isSet()) {
        obj.insert(QString("ControlScope"), ::OpenAPI::toJsonValue(m_control_scope));
    }
    return obj;
}

QString OAIFrameworkControl::getControlName() const {
    return m_control_name;
}
void OAIFrameworkControl::setControlName(const QString &control_name) {
    m_control_name = control_name;
    m_control_name_isSet = true;
}

bool OAIFrameworkControl::is_control_name_Set() const{
    return m_control_name_isSet;
}

bool OAIFrameworkControl::is_control_name_Valid() const{
    return m_control_name_isValid;
}

QList OAIFrameworkControl::getControlInputParameters() const {
    return m_control_input_parameters;
}
void OAIFrameworkControl::setControlInputParameters(const QList &control_input_parameters) {
    m_control_input_parameters = control_input_parameters;
    m_control_input_parameters_isSet = true;
}

bool OAIFrameworkControl::is_control_input_parameters_Set() const{
    return m_control_input_parameters_isSet;
}

bool OAIFrameworkControl::is_control_input_parameters_Valid() const{
    return m_control_input_parameters_isValid;
}

OAIFrameworkControl_ControlScope OAIFrameworkControl::getControlScope() const {
    return m_control_scope;
}
void OAIFrameworkControl::setControlScope(const OAIFrameworkControl_ControlScope &control_scope) {
    m_control_scope = control_scope;
    m_control_scope_isSet = true;
}

bool OAIFrameworkControl::is_control_scope_Set() const{
    return m_control_scope_isSet;
}

bool OAIFrameworkControl::is_control_scope_Valid() const{
    return m_control_scope_isValid;
}

bool OAIFrameworkControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_control_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_input_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrameworkControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_control_name_isValid && true;
}

} // namespace OpenAPI
