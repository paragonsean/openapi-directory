/**
 * AWS Backup
 * <fullname>Backup</fullname> <p>Backup is a unified backup service designed to protect Amazon Web Services services and their associated data. Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>
 *
 * The version of the OpenAPI document: 2018-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILegalHold.h
 *
 * A legal hold is an administrative tool that helps prevent backups from being deleted while under a hold. While the hold is in place, backups under a hold cannot be deleted and lifecycle policies that would alter the backup status (such as transition to cold storage) are delayed until the legal hold is removed. A backup can have more than one legal hold. Legal holds are applied to one or more backups (also known as recovery points). These backups can be filtered by resource types and by resource IDs.
 */

#ifndef OAILegalHold_H
#define OAILegalHold_H

#include <QJsonObject>

#include "OAILegalHoldStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILegalHold : public OAIObject {
public:
    OAILegalHold();
    OAILegalHold(QString json);
    ~OAILegalHold() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    OAILegalHoldStatus getStatus() const;
    void setStatus(const OAILegalHoldStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getLegalHoldId() const;
    void setLegalHoldId(const QString &legal_hold_id);
    bool is_legal_hold_id_Set() const;
    bool is_legal_hold_id_Valid() const;

    QString getLegalHoldArn() const;
    void setLegalHoldArn(const QString &legal_hold_arn);
    bool is_legal_hold_arn_Set() const;
    bool is_legal_hold_arn_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QDateTime getCancellationDate() const;
    void setCancellationDate(const QDateTime &cancellation_date);
    bool is_cancellation_date_Set() const;
    bool is_cancellation_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    OAILegalHoldStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_legal_hold_id;
    bool m_legal_hold_id_isSet;
    bool m_legal_hold_id_isValid;

    QString m_legal_hold_arn;
    bool m_legal_hold_arn_isSet;
    bool m_legal_hold_arn_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QDateTime m_cancellation_date;
    bool m_cancellation_date_isSet;
    bool m_cancellation_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILegalHold)

#endif // OAILegalHold_H
