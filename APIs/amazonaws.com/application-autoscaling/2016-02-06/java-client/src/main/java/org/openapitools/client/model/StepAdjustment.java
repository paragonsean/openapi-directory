/*
 * Application Auto Scaling
 * <p>With Application Auto Scaling, you can configure automatic scaling for the following resources:</p> <ul> <li> <p>Amazon AppStream 2.0 fleets</p> </li> <li> <p>Amazon Aurora Replicas</p> </li> <li> <p>Amazon Comprehend document classification and entity recognizer endpoints</p> </li> <li> <p>Amazon DynamoDB tables and global secondary indexes throughput capacity</p> </li> <li> <p>Amazon ECS services</p> </li> <li> <p>Amazon ElastiCache for Redis clusters (replication groups)</p> </li> <li> <p>Amazon EMR clusters</p> </li> <li> <p>Amazon Keyspaces (for Apache Cassandra) tables</p> </li> <li> <p>Lambda function provisioned concurrency</p> </li> <li> <p>Amazon Managed Streaming for Apache Kafka broker storage</p> </li> <li> <p>Amazon Neptune clusters</p> </li> <li> <p>Amazon SageMaker endpoint variants</p> </li> <li> <p>Amazon SageMaker Serverless endpoint provisioned concurrency</p> </li> <li> <p>Spot Fleets (Amazon EC2)</p> </li> <li> <p>Custom resources provided by your own applications or services</p> </li> </ul> <p>To learn more about Application Auto Scaling, see the <a href=\"https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html\">Application Auto Scaling User Guide</a>.</p> <p> <b>API Summary</b> </p> <p>The Application Auto Scaling service API includes three key sets of actions: </p> <ul> <li> <p>Register and manage scalable targets - Register Amazon Web Services or custom resources as scalable targets (a resource that Application Auto Scaling can scale), set minimum and maximum capacity limits, and retrieve information on existing scalable targets.</p> </li> <li> <p>Configure and manage automatic scaling - Define scaling policies to dynamically scale your resources in response to CloudWatch alarms, schedule one-time or recurring scaling actions, and retrieve your recent scaling activity history.</p> </li> <li> <p>Suspend and resume scaling - Temporarily suspend and later resume automatic scaling by calling the <a href=\"https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\">RegisterScalableTarget</a> API action for any Application Auto Scaling scalable target. You can suspend and resume (individually or in combination) scale-out activities that are triggered by a scaling policy, scale-in activities that are triggered by a scaling policy, and scheduled scaling.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-02-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Represents a step adjustment for a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/application/APIReference/API_StepScalingPolicyConfiguration.html\&quot;&gt;StepScalingPolicyConfiguration&lt;/a&gt;. Describes an adjustment based on the difference between the value of the aggregated CloudWatch metric and the breach threshold that you&#39;ve defined for the alarm. &lt;/p&gt; &lt;p&gt;For the following examples, suppose that you have an alarm with a breach threshold of 50:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To initiate the adjustment when the metric is greater than or equal to 50 and less than 60, specify a lower bound of &lt;code&gt;0&lt;/code&gt; and an upper bound of &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To initiate the adjustment when the metric is greater than 40 and less than or equal to 50, specify a lower bound of &lt;code&gt;-10&lt;/code&gt; and an upper bound of &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;There are a few rules for the step adjustments for your step policy:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The ranges of your step adjustments can&#39;t overlap or have a gap.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;At most one step adjustment can have a null lower bound. If one step adjustment has a negative lower bound, then there must be a step adjustment with a null lower bound.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;At most one step adjustment can have a null upper bound. If one step adjustment has a positive upper bound, then there must be a step adjustment with a null upper bound.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The upper and lower bound can&#39;t be null in the same step adjustment.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:07.248597-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StepAdjustment {
  public static final String SERIALIZED_NAME_METRIC_INTERVAL_LOWER_BOUND = "MetricIntervalLowerBound";
  @SerializedName(SERIALIZED_NAME_METRIC_INTERVAL_LOWER_BOUND)
  private Double metricIntervalLowerBound;

  public static final String SERIALIZED_NAME_METRIC_INTERVAL_UPPER_BOUND = "MetricIntervalUpperBound";
  @SerializedName(SERIALIZED_NAME_METRIC_INTERVAL_UPPER_BOUND)
  private Double metricIntervalUpperBound;

  public static final String SERIALIZED_NAME_SCALING_ADJUSTMENT = "ScalingAdjustment";
  @SerializedName(SERIALIZED_NAME_SCALING_ADJUSTMENT)
  private Integer scalingAdjustment;

  public StepAdjustment() {
  }

  public StepAdjustment metricIntervalLowerBound(Double metricIntervalLowerBound) {
    this.metricIntervalLowerBound = metricIntervalLowerBound;
    return this;
  }

  /**
   * Get metricIntervalLowerBound
   * @return metricIntervalLowerBound
   */
  @javax.annotation.Nullable
  public Double getMetricIntervalLowerBound() {
    return metricIntervalLowerBound;
  }

  public void setMetricIntervalLowerBound(Double metricIntervalLowerBound) {
    this.metricIntervalLowerBound = metricIntervalLowerBound;
  }


  public StepAdjustment metricIntervalUpperBound(Double metricIntervalUpperBound) {
    this.metricIntervalUpperBound = metricIntervalUpperBound;
    return this;
  }

  /**
   * Get metricIntervalUpperBound
   * @return metricIntervalUpperBound
   */
  @javax.annotation.Nullable
  public Double getMetricIntervalUpperBound() {
    return metricIntervalUpperBound;
  }

  public void setMetricIntervalUpperBound(Double metricIntervalUpperBound) {
    this.metricIntervalUpperBound = metricIntervalUpperBound;
  }


  public StepAdjustment scalingAdjustment(Integer scalingAdjustment) {
    this.scalingAdjustment = scalingAdjustment;
    return this;
  }

  /**
   * Get scalingAdjustment
   * @return scalingAdjustment
   */
  @javax.annotation.Nonnull
  public Integer getScalingAdjustment() {
    return scalingAdjustment;
  }

  public void setScalingAdjustment(Integer scalingAdjustment) {
    this.scalingAdjustment = scalingAdjustment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StepAdjustment stepAdjustment = (StepAdjustment) o;
    return Objects.equals(this.metricIntervalLowerBound, stepAdjustment.metricIntervalLowerBound) &&
        Objects.equals(this.metricIntervalUpperBound, stepAdjustment.metricIntervalUpperBound) &&
        Objects.equals(this.scalingAdjustment, stepAdjustment.scalingAdjustment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricIntervalLowerBound, metricIntervalUpperBound, scalingAdjustment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StepAdjustment {\n");
    sb.append("    metricIntervalLowerBound: ").append(toIndentedString(metricIntervalLowerBound)).append("\n");
    sb.append("    metricIntervalUpperBound: ").append(toIndentedString(metricIntervalUpperBound)).append("\n");
    sb.append("    scalingAdjustment: ").append(toIndentedString(scalingAdjustment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MetricIntervalLowerBound");
    openapiFields.add("MetricIntervalUpperBound");
    openapiFields.add("ScalingAdjustment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ScalingAdjustment");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StepAdjustment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StepAdjustment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StepAdjustment is not found in the empty JSON string", StepAdjustment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StepAdjustment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StepAdjustment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StepAdjustment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MetricIntervalLowerBound`
      if (jsonObj.get("MetricIntervalLowerBound") != null && !jsonObj.get("MetricIntervalLowerBound").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("MetricIntervalLowerBound"));
      }
      // validate the optional field `MetricIntervalUpperBound`
      if (jsonObj.get("MetricIntervalUpperBound") != null && !jsonObj.get("MetricIntervalUpperBound").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("MetricIntervalUpperBound"));
      }
      // validate the required field `ScalingAdjustment`
      Integer.validateJsonElement(jsonObj.get("ScalingAdjustment"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StepAdjustment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StepAdjustment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StepAdjustment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StepAdjustment.class));

       return (TypeAdapter<T>) new TypeAdapter<StepAdjustment>() {
           @Override
           public void write(JsonWriter out, StepAdjustment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StepAdjustment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StepAdjustment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StepAdjustment
   * @throws IOException if the JSON string is invalid with respect to StepAdjustment
   */
  public static StepAdjustment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StepAdjustment.class);
  }

  /**
   * Convert an instance of StepAdjustment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

