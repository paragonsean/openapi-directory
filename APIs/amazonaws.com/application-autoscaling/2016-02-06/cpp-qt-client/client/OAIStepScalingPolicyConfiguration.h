/**
 * Application Auto Scaling
 * <p>With Application Auto Scaling, you can configure automatic scaling for the following resources:</p> <ul> <li> <p>Amazon AppStream 2.0 fleets</p> </li> <li> <p>Amazon Aurora Replicas</p> </li> <li> <p>Amazon Comprehend document classification and entity recognizer endpoints</p> </li> <li> <p>Amazon DynamoDB tables and global secondary indexes throughput capacity</p> </li> <li> <p>Amazon ECS services</p> </li> <li> <p>Amazon ElastiCache for Redis clusters (replication groups)</p> </li> <li> <p>Amazon EMR clusters</p> </li> <li> <p>Amazon Keyspaces (for Apache Cassandra) tables</p> </li> <li> <p>Lambda function provisioned concurrency</p> </li> <li> <p>Amazon Managed Streaming for Apache Kafka broker storage</p> </li> <li> <p>Amazon Neptune clusters</p> </li> <li> <p>Amazon SageMaker endpoint variants</p> </li> <li> <p>Amazon SageMaker Serverless endpoint provisioned concurrency</p> </li> <li> <p>Spot Fleets (Amazon EC2)</p> </li> <li> <p>Custom resources provided by your own applications or services</p> </li> </ul> <p>To learn more about Application Auto Scaling, see the <a href=\"https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html\">Application Auto Scaling User Guide</a>.</p> <p> <b>API Summary</b> </p> <p>The Application Auto Scaling service API includes three key sets of actions: </p> <ul> <li> <p>Register and manage scalable targets - Register Amazon Web Services or custom resources as scalable targets (a resource that Application Auto Scaling can scale), set minimum and maximum capacity limits, and retrieve information on existing scalable targets.</p> </li> <li> <p>Configure and manage automatic scaling - Define scaling policies to dynamically scale your resources in response to CloudWatch alarms, schedule one-time or recurring scaling actions, and retrieve your recent scaling activity history.</p> </li> <li> <p>Suspend and resume scaling - Temporarily suspend and later resume automatic scaling by calling the <a href=\"https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\">RegisterScalableTarget</a> API action for any Application Auto Scaling scalable target. You can suspend and resume (individually or in combination) scale-out activities that are triggered by a scaling policy, scale-in activities that are triggered by a scaling policy, and scheduled scaling.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-02-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStepScalingPolicyConfiguration.h
 *
 * &lt;p&gt;Represents a step scaling policy configuration to use with Application Auto Scaling.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html\&quot;&gt;Step scaling policies&lt;/a&gt; in the &lt;i&gt;Application Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
 */

#ifndef OAIStepScalingPolicyConfiguration_H
#define OAIStepScalingPolicyConfiguration_H

#include <QJsonObject>

#include "OAIAdjustmentType.h"
#include "OAIMetricAggregationType.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStepScalingPolicyConfiguration : public OAIObject {
public:
    OAIStepScalingPolicyConfiguration();
    OAIStepScalingPolicyConfiguration(QString json);
    ~OAIStepScalingPolicyConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAdjustmentType getAdjustmentType() const;
    void setAdjustmentType(const OAIAdjustmentType &adjustment_type);
    bool is_adjustment_type_Set() const;
    bool is_adjustment_type_Valid() const;

    QList getStepAdjustments() const;
    void setStepAdjustments(const QList &step_adjustments);
    bool is_step_adjustments_Set() const;
    bool is_step_adjustments_Valid() const;

    qint32 getMinAdjustmentMagnitude() const;
    void setMinAdjustmentMagnitude(const qint32 &min_adjustment_magnitude);
    bool is_min_adjustment_magnitude_Set() const;
    bool is_min_adjustment_magnitude_Valid() const;

    qint32 getCooldown() const;
    void setCooldown(const qint32 &cooldown);
    bool is_cooldown_Set() const;
    bool is_cooldown_Valid() const;

    OAIMetricAggregationType getMetricAggregationType() const;
    void setMetricAggregationType(const OAIMetricAggregationType &metric_aggregation_type);
    bool is_metric_aggregation_type_Set() const;
    bool is_metric_aggregation_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAdjustmentType m_adjustment_type;
    bool m_adjustment_type_isSet;
    bool m_adjustment_type_isValid;

    QList m_step_adjustments;
    bool m_step_adjustments_isSet;
    bool m_step_adjustments_isValid;

    qint32 m_min_adjustment_magnitude;
    bool m_min_adjustment_magnitude_isSet;
    bool m_min_adjustment_magnitude_isValid;

    qint32 m_cooldown;
    bool m_cooldown_isSet;
    bool m_cooldown_isValid;

    OAIMetricAggregationType m_metric_aggregation_type;
    bool m_metric_aggregation_type_isSet;
    bool m_metric_aggregation_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStepScalingPolicyConfiguration)

#endif // OAIStepScalingPolicyConfiguration_H
