/**
 * Application Auto Scaling
 * <p>With Application Auto Scaling, you can configure automatic scaling for the following resources:</p> <ul> <li> <p>Amazon AppStream 2.0 fleets</p> </li> <li> <p>Amazon Aurora Replicas</p> </li> <li> <p>Amazon Comprehend document classification and entity recognizer endpoints</p> </li> <li> <p>Amazon DynamoDB tables and global secondary indexes throughput capacity</p> </li> <li> <p>Amazon ECS services</p> </li> <li> <p>Amazon ElastiCache for Redis clusters (replication groups)</p> </li> <li> <p>Amazon EMR clusters</p> </li> <li> <p>Amazon Keyspaces (for Apache Cassandra) tables</p> </li> <li> <p>Lambda function provisioned concurrency</p> </li> <li> <p>Amazon Managed Streaming for Apache Kafka broker storage</p> </li> <li> <p>Amazon Neptune clusters</p> </li> <li> <p>Amazon SageMaker endpoint variants</p> </li> <li> <p>Amazon SageMaker Serverless endpoint provisioned concurrency</p> </li> <li> <p>Spot Fleets (Amazon EC2)</p> </li> <li> <p>Custom resources provided by your own applications or services</p> </li> </ul> <p>To learn more about Application Auto Scaling, see the <a href=\"https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html\">Application Auto Scaling User Guide</a>.</p> <p> <b>API Summary</b> </p> <p>The Application Auto Scaling service API includes three key sets of actions: </p> <ul> <li> <p>Register and manage scalable targets - Register Amazon Web Services or custom resources as scalable targets (a resource that Application Auto Scaling can scale), set minimum and maximum capacity limits, and retrieve information on existing scalable targets.</p> </li> <li> <p>Configure and manage automatic scaling - Define scaling policies to dynamically scale your resources in response to CloudWatch alarms, schedule one-time or recurring scaling actions, and retrieve your recent scaling activity history.</p> </li> <li> <p>Suspend and resume scaling - Temporarily suspend and later resume automatic scaling by calling the <a href=\"https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\">RegisterScalableTarget</a> API action for any Application Auto Scaling scalable target. You can suspend and resume (individually or in combination) scale-out activities that are triggered by a scaling policy, scale-in activities that are triggered by a scaling policy, and scheduled scaling.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-02-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScalingPolicy.h
 *
 * &lt;p&gt;Represents a scaling policy to use with Application Auto Scaling.&lt;/p&gt; &lt;p&gt;For more information about configuring scaling policies for a specific service, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/application/userguide/integrated-services-list.html\&quot;&gt;Amazon Web Services services that you can use with Application Auto Scaling&lt;/a&gt; in the &lt;i&gt;Application Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
 */

#ifndef OAIScalingPolicy_H
#define OAIScalingPolicy_H

#include <QJsonObject>

#include "OAIPolicyType.h"
#include "OAIScalableDimension.h"
#include "OAIScalingPolicy_StepScalingPolicyConfiguration.h"
#include "OAIScalingPolicy_TargetTrackingScalingPolicyConfiguration.h"
#include "OAIServiceNamespace.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIScalingPolicy_StepScalingPolicyConfiguration;
class OAIScalingPolicy_TargetTrackingScalingPolicyConfiguration;

class OAIScalingPolicy : public OAIObject {
public:
    OAIScalingPolicy();
    OAIScalingPolicy(QString json);
    ~OAIScalingPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPolicyArn() const;
    void setPolicyArn(const QString &policy_arn);
    bool is_policy_arn_Set() const;
    bool is_policy_arn_Valid() const;

    QString getPolicyName() const;
    void setPolicyName(const QString &policy_name);
    bool is_policy_name_Set() const;
    bool is_policy_name_Valid() const;

    OAIServiceNamespace getServiceNamespace() const;
    void setServiceNamespace(const OAIServiceNamespace &service_namespace);
    bool is_service_namespace_Set() const;
    bool is_service_namespace_Valid() const;

    QString getResourceId() const;
    void setResourceId(const QString &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    OAIScalableDimension getScalableDimension() const;
    void setScalableDimension(const OAIScalableDimension &scalable_dimension);
    bool is_scalable_dimension_Set() const;
    bool is_scalable_dimension_Valid() const;

    OAIPolicyType getPolicyType() const;
    void setPolicyType(const OAIPolicyType &policy_type);
    bool is_policy_type_Set() const;
    bool is_policy_type_Valid() const;

    OAIScalingPolicy_StepScalingPolicyConfiguration getStepScalingPolicyConfiguration() const;
    void setStepScalingPolicyConfiguration(const OAIScalingPolicy_StepScalingPolicyConfiguration &step_scaling_policy_configuration);
    bool is_step_scaling_policy_configuration_Set() const;
    bool is_step_scaling_policy_configuration_Valid() const;

    OAIScalingPolicy_TargetTrackingScalingPolicyConfiguration getTargetTrackingScalingPolicyConfiguration() const;
    void setTargetTrackingScalingPolicyConfiguration(const OAIScalingPolicy_TargetTrackingScalingPolicyConfiguration &target_tracking_scaling_policy_configuration);
    bool is_target_tracking_scaling_policy_configuration_Set() const;
    bool is_target_tracking_scaling_policy_configuration_Valid() const;

    QList getAlarms() const;
    void setAlarms(const QList &alarms);
    bool is_alarms_Set() const;
    bool is_alarms_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_policy_arn;
    bool m_policy_arn_isSet;
    bool m_policy_arn_isValid;

    QString m_policy_name;
    bool m_policy_name_isSet;
    bool m_policy_name_isValid;

    OAIServiceNamespace m_service_namespace;
    bool m_service_namespace_isSet;
    bool m_service_namespace_isValid;

    QString m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    OAIScalableDimension m_scalable_dimension;
    bool m_scalable_dimension_isSet;
    bool m_scalable_dimension_isValid;

    OAIPolicyType m_policy_type;
    bool m_policy_type_isSet;
    bool m_policy_type_isValid;

    OAIScalingPolicy_StepScalingPolicyConfiguration m_step_scaling_policy_configuration;
    bool m_step_scaling_policy_configuration_isSet;
    bool m_step_scaling_policy_configuration_isValid;

    OAIScalingPolicy_TargetTrackingScalingPolicyConfiguration m_target_tracking_scaling_policy_configuration;
    bool m_target_tracking_scaling_policy_configuration_isSet;
    bool m_target_tracking_scaling_policy_configuration_isValid;

    QList m_alarms;
    bool m_alarms_isSet;
    bool m_alarms_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScalingPolicy)

#endif // OAIScalingPolicy_H
