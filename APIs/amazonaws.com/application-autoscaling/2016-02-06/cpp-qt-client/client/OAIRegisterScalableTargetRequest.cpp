/**
 * Application Auto Scaling
 * <p>With Application Auto Scaling, you can configure automatic scaling for the following resources:</p> <ul> <li> <p>Amazon AppStream 2.0 fleets</p> </li> <li> <p>Amazon Aurora Replicas</p> </li> <li> <p>Amazon Comprehend document classification and entity recognizer endpoints</p> </li> <li> <p>Amazon DynamoDB tables and global secondary indexes throughput capacity</p> </li> <li> <p>Amazon ECS services</p> </li> <li> <p>Amazon ElastiCache for Redis clusters (replication groups)</p> </li> <li> <p>Amazon EMR clusters</p> </li> <li> <p>Amazon Keyspaces (for Apache Cassandra) tables</p> </li> <li> <p>Lambda function provisioned concurrency</p> </li> <li> <p>Amazon Managed Streaming for Apache Kafka broker storage</p> </li> <li> <p>Amazon Neptune clusters</p> </li> <li> <p>Amazon SageMaker endpoint variants</p> </li> <li> <p>Amazon SageMaker Serverless endpoint provisioned concurrency</p> </li> <li> <p>Spot Fleets (Amazon EC2)</p> </li> <li> <p>Custom resources provided by your own applications or services</p> </li> </ul> <p>To learn more about Application Auto Scaling, see the <a href=\"https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html\">Application Auto Scaling User Guide</a>.</p> <p> <b>API Summary</b> </p> <p>The Application Auto Scaling service API includes three key sets of actions: </p> <ul> <li> <p>Register and manage scalable targets - Register Amazon Web Services or custom resources as scalable targets (a resource that Application Auto Scaling can scale), set minimum and maximum capacity limits, and retrieve information on existing scalable targets.</p> </li> <li> <p>Configure and manage automatic scaling - Define scaling policies to dynamically scale your resources in response to CloudWatch alarms, schedule one-time or recurring scaling actions, and retrieve your recent scaling activity history.</p> </li> <li> <p>Suspend and resume scaling - Temporarily suspend and later resume automatic scaling by calling the <a href=\"https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\">RegisterScalableTarget</a> API action for any Application Auto Scaling scalable target. You can suspend and resume (individually or in combination) scale-out activities that are triggered by a scaling policy, scale-in activities that are triggered by a scaling policy, and scheduled scaling.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-02-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterScalableTargetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterScalableTargetRequest::OAIRegisterScalableTargetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterScalableTargetRequest::OAIRegisterScalableTargetRequest() {
    this->initializeModel();
}

OAIRegisterScalableTargetRequest::~OAIRegisterScalableTargetRequest() {}

void OAIRegisterScalableTargetRequest::initializeModel() {

    m_service_namespace_isSet = false;
    m_service_namespace_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_scalable_dimension_isSet = false;
    m_scalable_dimension_isValid = false;

    m_min_capacity_isSet = false;
    m_min_capacity_isValid = false;

    m_max_capacity_isSet = false;
    m_max_capacity_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_suspended_state_isSet = false;
    m_suspended_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIRegisterScalableTargetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterScalableTargetRequest::fromJsonObject(QJsonObject json) {

    m_service_namespace_isValid = ::OpenAPI::fromJsonValue(m_service_namespace, json[QString("ServiceNamespace")]);
    m_service_namespace_isSet = !json[QString("ServiceNamespace")].isNull() && m_service_namespace_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_scalable_dimension_isValid = ::OpenAPI::fromJsonValue(m_scalable_dimension, json[QString("ScalableDimension")]);
    m_scalable_dimension_isSet = !json[QString("ScalableDimension")].isNull() && m_scalable_dimension_isValid;

    m_min_capacity_isValid = ::OpenAPI::fromJsonValue(m_min_capacity, json[QString("MinCapacity")]);
    m_min_capacity_isSet = !json[QString("MinCapacity")].isNull() && m_min_capacity_isValid;

    m_max_capacity_isValid = ::OpenAPI::fromJsonValue(m_max_capacity, json[QString("MaxCapacity")]);
    m_max_capacity_isSet = !json[QString("MaxCapacity")].isNull() && m_max_capacity_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_suspended_state_isValid = ::OpenAPI::fromJsonValue(m_suspended_state, json[QString("SuspendedState")]);
    m_suspended_state_isSet = !json[QString("SuspendedState")].isNull() && m_suspended_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIRegisterScalableTargetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterScalableTargetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_service_namespace.isSet()) {
        obj.insert(QString("ServiceNamespace"), ::OpenAPI::toJsonValue(m_service_namespace));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_scalable_dimension.isSet()) {
        obj.insert(QString("ScalableDimension"), ::OpenAPI::toJsonValue(m_scalable_dimension));
    }
    if (m_min_capacity_isSet) {
        obj.insert(QString("MinCapacity"), ::OpenAPI::toJsonValue(m_min_capacity));
    }
    if (m_max_capacity_isSet) {
        obj.insert(QString("MaxCapacity"), ::OpenAPI::toJsonValue(m_max_capacity));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_suspended_state.isSet()) {
        obj.insert(QString("SuspendedState"), ::OpenAPI::toJsonValue(m_suspended_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIServiceNamespace OAIRegisterScalableTargetRequest::getServiceNamespace() const {
    return m_service_namespace;
}
void OAIRegisterScalableTargetRequest::setServiceNamespace(const OAIServiceNamespace &service_namespace) {
    m_service_namespace = service_namespace;
    m_service_namespace_isSet = true;
}

bool OAIRegisterScalableTargetRequest::is_service_namespace_Set() const{
    return m_service_namespace_isSet;
}

bool OAIRegisterScalableTargetRequest::is_service_namespace_Valid() const{
    return m_service_namespace_isValid;
}

QString OAIRegisterScalableTargetRequest::getResourceId() const {
    return m_resource_id;
}
void OAIRegisterScalableTargetRequest::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIRegisterScalableTargetRequest::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIRegisterScalableTargetRequest::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAIScalableDimension OAIRegisterScalableTargetRequest::getScalableDimension() const {
    return m_scalable_dimension;
}
void OAIRegisterScalableTargetRequest::setScalableDimension(const OAIScalableDimension &scalable_dimension) {
    m_scalable_dimension = scalable_dimension;
    m_scalable_dimension_isSet = true;
}

bool OAIRegisterScalableTargetRequest::is_scalable_dimension_Set() const{
    return m_scalable_dimension_isSet;
}

bool OAIRegisterScalableTargetRequest::is_scalable_dimension_Valid() const{
    return m_scalable_dimension_isValid;
}

qint32 OAIRegisterScalableTargetRequest::getMinCapacity() const {
    return m_min_capacity;
}
void OAIRegisterScalableTargetRequest::setMinCapacity(const qint32 &min_capacity) {
    m_min_capacity = min_capacity;
    m_min_capacity_isSet = true;
}

bool OAIRegisterScalableTargetRequest::is_min_capacity_Set() const{
    return m_min_capacity_isSet;
}

bool OAIRegisterScalableTargetRequest::is_min_capacity_Valid() const{
    return m_min_capacity_isValid;
}

qint32 OAIRegisterScalableTargetRequest::getMaxCapacity() const {
    return m_max_capacity;
}
void OAIRegisterScalableTargetRequest::setMaxCapacity(const qint32 &max_capacity) {
    m_max_capacity = max_capacity;
    m_max_capacity_isSet = true;
}

bool OAIRegisterScalableTargetRequest::is_max_capacity_Set() const{
    return m_max_capacity_isSet;
}

bool OAIRegisterScalableTargetRequest::is_max_capacity_Valid() const{
    return m_max_capacity_isValid;
}

QString OAIRegisterScalableTargetRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIRegisterScalableTargetRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIRegisterScalableTargetRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIRegisterScalableTargetRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIRegisterScalableTargetRequest_SuspendedState OAIRegisterScalableTargetRequest::getSuspendedState() const {
    return m_suspended_state;
}
void OAIRegisterScalableTargetRequest::setSuspendedState(const OAIRegisterScalableTargetRequest_SuspendedState &suspended_state) {
    m_suspended_state = suspended_state;
    m_suspended_state_isSet = true;
}

bool OAIRegisterScalableTargetRequest::is_suspended_state_Set() const{
    return m_suspended_state_isSet;
}

bool OAIRegisterScalableTargetRequest::is_suspended_state_Valid() const{
    return m_suspended_state_isValid;
}

QMap OAIRegisterScalableTargetRequest::getTags() const {
    return m_tags;
}
void OAIRegisterScalableTargetRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRegisterScalableTargetRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRegisterScalableTargetRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIRegisterScalableTargetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scalable_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterScalableTargetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_namespace_isValid && m_resource_id_isValid && m_scalable_dimension_isValid && true;
}

} // namespace OpenAPI
