/**
 * Application Auto Scaling
 * <p>With Application Auto Scaling, you can configure automatic scaling for the following resources:</p> <ul> <li> <p>Amazon AppStream 2.0 fleets</p> </li> <li> <p>Amazon Aurora Replicas</p> </li> <li> <p>Amazon Comprehend document classification and entity recognizer endpoints</p> </li> <li> <p>Amazon DynamoDB tables and global secondary indexes throughput capacity</p> </li> <li> <p>Amazon ECS services</p> </li> <li> <p>Amazon ElastiCache for Redis clusters (replication groups)</p> </li> <li> <p>Amazon EMR clusters</p> </li> <li> <p>Amazon Keyspaces (for Apache Cassandra) tables</p> </li> <li> <p>Lambda function provisioned concurrency</p> </li> <li> <p>Amazon Managed Streaming for Apache Kafka broker storage</p> </li> <li> <p>Amazon Neptune clusters</p> </li> <li> <p>Amazon SageMaker endpoint variants</p> </li> <li> <p>Amazon SageMaker Serverless endpoint provisioned concurrency</p> </li> <li> <p>Spot Fleets (Amazon EC2)</p> </li> <li> <p>Custom resources provided by your own applications or services</p> </li> </ul> <p>To learn more about Application Auto Scaling, see the <a href=\"https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html\">Application Auto Scaling User Guide</a>.</p> <p> <b>API Summary</b> </p> <p>The Application Auto Scaling service API includes three key sets of actions: </p> <ul> <li> <p>Register and manage scalable targets - Register Amazon Web Services or custom resources as scalable targets (a resource that Application Auto Scaling can scale), set minimum and maximum capacity limits, and retrieve information on existing scalable targets.</p> </li> <li> <p>Configure and manage automatic scaling - Define scaling policies to dynamically scale your resources in response to CloudWatch alarms, schedule one-time or recurring scaling actions, and retrieve your recent scaling activity history.</p> </li> <li> <p>Suspend and resume scaling - Temporarily suspend and later resume automatic scaling by calling the <a href=\"https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\">RegisterScalableTarget</a> API action for any Application Auto Scaling scalable target. You can suspend and resume (individually or in combination) scale-out activities that are triggered by a scaling policy, scale-in activities that are triggered by a scaling policy, and scheduled scaling.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-02-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScalingActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScalingActivity::OAIScalingActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScalingActivity::OAIScalingActivity() {
    this->initializeModel();
}

OAIScalingActivity::~OAIScalingActivity() {}

void OAIScalingActivity::initializeModel() {

    m_activity_id_isSet = false;
    m_activity_id_isValid = false;

    m_service_namespace_isSet = false;
    m_service_namespace_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_scalable_dimension_isSet = false;
    m_scalable_dimension_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_not_scaled_reasons_isSet = false;
    m_not_scaled_reasons_isValid = false;
}

void OAIScalingActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScalingActivity::fromJsonObject(QJsonObject json) {

    m_activity_id_isValid = ::OpenAPI::fromJsonValue(m_activity_id, json[QString("ActivityId")]);
    m_activity_id_isSet = !json[QString("ActivityId")].isNull() && m_activity_id_isValid;

    m_service_namespace_isValid = ::OpenAPI::fromJsonValue(m_service_namespace, json[QString("ServiceNamespace")]);
    m_service_namespace_isSet = !json[QString("ServiceNamespace")].isNull() && m_service_namespace_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_scalable_dimension_isValid = ::OpenAPI::fromJsonValue(m_scalable_dimension, json[QString("ScalableDimension")]);
    m_scalable_dimension_isSet = !json[QString("ScalableDimension")].isNull() && m_scalable_dimension_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("Cause")]);
    m_cause_isSet = !json[QString("Cause")].isNull() && m_cause_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("StatusCode")]);
    m_status_code_isSet = !json[QString("StatusCode")].isNull() && m_status_code_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("Details")]);
    m_details_isSet = !json[QString("Details")].isNull() && m_details_isValid;

    m_not_scaled_reasons_isValid = ::OpenAPI::fromJsonValue(m_not_scaled_reasons, json[QString("NotScaledReasons")]);
    m_not_scaled_reasons_isSet = !json[QString("NotScaledReasons")].isNull() && m_not_scaled_reasons_isValid;
}

QString OAIScalingActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScalingActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_id_isSet) {
        obj.insert(QString("ActivityId"), ::OpenAPI::toJsonValue(m_activity_id));
    }
    if (m_service_namespace.isSet()) {
        obj.insert(QString("ServiceNamespace"), ::OpenAPI::toJsonValue(m_service_namespace));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_scalable_dimension.isSet()) {
        obj.insert(QString("ScalableDimension"), ::OpenAPI::toJsonValue(m_scalable_dimension));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_cause_isSet) {
        obj.insert(QString("Cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_status_code.isSet()) {
        obj.insert(QString("StatusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_details_isSet) {
        obj.insert(QString("Details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_not_scaled_reasons.isSet()) {
        obj.insert(QString("NotScaledReasons"), ::OpenAPI::toJsonValue(m_not_scaled_reasons));
    }
    return obj;
}

QString OAIScalingActivity::getActivityId() const {
    return m_activity_id;
}
void OAIScalingActivity::setActivityId(const QString &activity_id) {
    m_activity_id = activity_id;
    m_activity_id_isSet = true;
}

bool OAIScalingActivity::is_activity_id_Set() const{
    return m_activity_id_isSet;
}

bool OAIScalingActivity::is_activity_id_Valid() const{
    return m_activity_id_isValid;
}

OAIServiceNamespace OAIScalingActivity::getServiceNamespace() const {
    return m_service_namespace;
}
void OAIScalingActivity::setServiceNamespace(const OAIServiceNamespace &service_namespace) {
    m_service_namespace = service_namespace;
    m_service_namespace_isSet = true;
}

bool OAIScalingActivity::is_service_namespace_Set() const{
    return m_service_namespace_isSet;
}

bool OAIScalingActivity::is_service_namespace_Valid() const{
    return m_service_namespace_isValid;
}

QString OAIScalingActivity::getResourceId() const {
    return m_resource_id;
}
void OAIScalingActivity::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIScalingActivity::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIScalingActivity::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAIScalableDimension OAIScalingActivity::getScalableDimension() const {
    return m_scalable_dimension;
}
void OAIScalingActivity::setScalableDimension(const OAIScalableDimension &scalable_dimension) {
    m_scalable_dimension = scalable_dimension;
    m_scalable_dimension_isSet = true;
}

bool OAIScalingActivity::is_scalable_dimension_Set() const{
    return m_scalable_dimension_isSet;
}

bool OAIScalingActivity::is_scalable_dimension_Valid() const{
    return m_scalable_dimension_isValid;
}

QString OAIScalingActivity::getDescription() const {
    return m_description;
}
void OAIScalingActivity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIScalingActivity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIScalingActivity::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIScalingActivity::getCause() const {
    return m_cause;
}
void OAIScalingActivity::setCause(const QString &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAIScalingActivity::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIScalingActivity::is_cause_Valid() const{
    return m_cause_isValid;
}

QDateTime OAIScalingActivity::getStartTime() const {
    return m_start_time;
}
void OAIScalingActivity::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIScalingActivity::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIScalingActivity::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIScalingActivity::getEndTime() const {
    return m_end_time;
}
void OAIScalingActivity::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIScalingActivity::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIScalingActivity::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIScalingActivityStatusCode OAIScalingActivity::getStatusCode() const {
    return m_status_code;
}
void OAIScalingActivity::setStatusCode(const OAIScalingActivityStatusCode &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIScalingActivity::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIScalingActivity::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIScalingActivity::getStatusMessage() const {
    return m_status_message;
}
void OAIScalingActivity::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIScalingActivity::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIScalingActivity::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIScalingActivity::getDetails() const {
    return m_details;
}
void OAIScalingActivity::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIScalingActivity::is_details_Set() const{
    return m_details_isSet;
}

bool OAIScalingActivity::is_details_Valid() const{
    return m_details_isValid;
}

QList OAIScalingActivity::getNotScaledReasons() const {
    return m_not_scaled_reasons;
}
void OAIScalingActivity::setNotScaledReasons(const QList &not_scaled_reasons) {
    m_not_scaled_reasons = not_scaled_reasons;
    m_not_scaled_reasons_isSet = true;
}

bool OAIScalingActivity::is_not_scaled_reasons_Set() const{
    return m_not_scaled_reasons_isSet;
}

bool OAIScalingActivity::is_not_scaled_reasons_Valid() const{
    return m_not_scaled_reasons_isValid;
}

bool OAIScalingActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scalable_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_scaled_reasons.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScalingActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_id_isValid && m_service_namespace_isValid && m_resource_id_isValid && m_scalable_dimension_isValid && m_description_isValid && m_cause_isValid && m_start_time_isValid && m_status_code_isValid && true;
}

} // namespace OpenAPI
