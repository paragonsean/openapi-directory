/**
 * Application Auto Scaling
 * <p>With Application Auto Scaling, you can configure automatic scaling for the following resources:</p> <ul> <li> <p>Amazon AppStream 2.0 fleets</p> </li> <li> <p>Amazon Aurora Replicas</p> </li> <li> <p>Amazon Comprehend document classification and entity recognizer endpoints</p> </li> <li> <p>Amazon DynamoDB tables and global secondary indexes throughput capacity</p> </li> <li> <p>Amazon ECS services</p> </li> <li> <p>Amazon ElastiCache for Redis clusters (replication groups)</p> </li> <li> <p>Amazon EMR clusters</p> </li> <li> <p>Amazon Keyspaces (for Apache Cassandra) tables</p> </li> <li> <p>Lambda function provisioned concurrency</p> </li> <li> <p>Amazon Managed Streaming for Apache Kafka broker storage</p> </li> <li> <p>Amazon Neptune clusters</p> </li> <li> <p>Amazon SageMaker endpoint variants</p> </li> <li> <p>Amazon SageMaker Serverless endpoint provisioned concurrency</p> </li> <li> <p>Spot Fleets (Amazon EC2)</p> </li> <li> <p>Custom resources provided by your own applications or services</p> </li> </ul> <p>To learn more about Application Auto Scaling, see the <a href=\"https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html\">Application Auto Scaling User Guide</a>.</p> <p> <b>API Summary</b> </p> <p>The Application Auto Scaling service API includes three key sets of actions: </p> <ul> <li> <p>Register and manage scalable targets - Register Amazon Web Services or custom resources as scalable targets (a resource that Application Auto Scaling can scale), set minimum and maximum capacity limits, and retrieve information on existing scalable targets.</p> </li> <li> <p>Configure and manage automatic scaling - Define scaling policies to dynamically scale your resources in response to CloudWatch alarms, schedule one-time or recurring scaling actions, and retrieve your recent scaling activity history.</p> </li> <li> <p>Suspend and resume scaling - Temporarily suspend and later resume automatic scaling by calling the <a href=\"https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\">RegisterScalableTarget</a> API action for any Application Auto Scaling scalable target. You can suspend and resume (individually or in combination) scale-out activities that are triggered by a scaling policy, scale-in activities that are triggered by a scaling policy, and scheduled scaling.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-02-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStepScalingPolicyConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStepScalingPolicyConfiguration::OAIStepScalingPolicyConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStepScalingPolicyConfiguration::OAIStepScalingPolicyConfiguration() {
    this->initializeModel();
}

OAIStepScalingPolicyConfiguration::~OAIStepScalingPolicyConfiguration() {}

void OAIStepScalingPolicyConfiguration::initializeModel() {

    m_adjustment_type_isSet = false;
    m_adjustment_type_isValid = false;

    m_step_adjustments_isSet = false;
    m_step_adjustments_isValid = false;

    m_min_adjustment_magnitude_isSet = false;
    m_min_adjustment_magnitude_isValid = false;

    m_cooldown_isSet = false;
    m_cooldown_isValid = false;

    m_metric_aggregation_type_isSet = false;
    m_metric_aggregation_type_isValid = false;
}

void OAIStepScalingPolicyConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStepScalingPolicyConfiguration::fromJsonObject(QJsonObject json) {

    m_adjustment_type_isValid = ::OpenAPI::fromJsonValue(m_adjustment_type, json[QString("AdjustmentType")]);
    m_adjustment_type_isSet = !json[QString("AdjustmentType")].isNull() && m_adjustment_type_isValid;

    m_step_adjustments_isValid = ::OpenAPI::fromJsonValue(m_step_adjustments, json[QString("StepAdjustments")]);
    m_step_adjustments_isSet = !json[QString("StepAdjustments")].isNull() && m_step_adjustments_isValid;

    m_min_adjustment_magnitude_isValid = ::OpenAPI::fromJsonValue(m_min_adjustment_magnitude, json[QString("MinAdjustmentMagnitude")]);
    m_min_adjustment_magnitude_isSet = !json[QString("MinAdjustmentMagnitude")].isNull() && m_min_adjustment_magnitude_isValid;

    m_cooldown_isValid = ::OpenAPI::fromJsonValue(m_cooldown, json[QString("Cooldown")]);
    m_cooldown_isSet = !json[QString("Cooldown")].isNull() && m_cooldown_isValid;

    m_metric_aggregation_type_isValid = ::OpenAPI::fromJsonValue(m_metric_aggregation_type, json[QString("MetricAggregationType")]);
    m_metric_aggregation_type_isSet = !json[QString("MetricAggregationType")].isNull() && m_metric_aggregation_type_isValid;
}

QString OAIStepScalingPolicyConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStepScalingPolicyConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustment_type.isSet()) {
        obj.insert(QString("AdjustmentType"), ::OpenAPI::toJsonValue(m_adjustment_type));
    }
    if (m_step_adjustments.isSet()) {
        obj.insert(QString("StepAdjustments"), ::OpenAPI::toJsonValue(m_step_adjustments));
    }
    if (m_min_adjustment_magnitude_isSet) {
        obj.insert(QString("MinAdjustmentMagnitude"), ::OpenAPI::toJsonValue(m_min_adjustment_magnitude));
    }
    if (m_cooldown_isSet) {
        obj.insert(QString("Cooldown"), ::OpenAPI::toJsonValue(m_cooldown));
    }
    if (m_metric_aggregation_type.isSet()) {
        obj.insert(QString("MetricAggregationType"), ::OpenAPI::toJsonValue(m_metric_aggregation_type));
    }
    return obj;
}

OAIAdjustmentType OAIStepScalingPolicyConfiguration::getAdjustmentType() const {
    return m_adjustment_type;
}
void OAIStepScalingPolicyConfiguration::setAdjustmentType(const OAIAdjustmentType &adjustment_type) {
    m_adjustment_type = adjustment_type;
    m_adjustment_type_isSet = true;
}

bool OAIStepScalingPolicyConfiguration::is_adjustment_type_Set() const{
    return m_adjustment_type_isSet;
}

bool OAIStepScalingPolicyConfiguration::is_adjustment_type_Valid() const{
    return m_adjustment_type_isValid;
}

QList OAIStepScalingPolicyConfiguration::getStepAdjustments() const {
    return m_step_adjustments;
}
void OAIStepScalingPolicyConfiguration::setStepAdjustments(const QList &step_adjustments) {
    m_step_adjustments = step_adjustments;
    m_step_adjustments_isSet = true;
}

bool OAIStepScalingPolicyConfiguration::is_step_adjustments_Set() const{
    return m_step_adjustments_isSet;
}

bool OAIStepScalingPolicyConfiguration::is_step_adjustments_Valid() const{
    return m_step_adjustments_isValid;
}

qint32 OAIStepScalingPolicyConfiguration::getMinAdjustmentMagnitude() const {
    return m_min_adjustment_magnitude;
}
void OAIStepScalingPolicyConfiguration::setMinAdjustmentMagnitude(const qint32 &min_adjustment_magnitude) {
    m_min_adjustment_magnitude = min_adjustment_magnitude;
    m_min_adjustment_magnitude_isSet = true;
}

bool OAIStepScalingPolicyConfiguration::is_min_adjustment_magnitude_Set() const{
    return m_min_adjustment_magnitude_isSet;
}

bool OAIStepScalingPolicyConfiguration::is_min_adjustment_magnitude_Valid() const{
    return m_min_adjustment_magnitude_isValid;
}

qint32 OAIStepScalingPolicyConfiguration::getCooldown() const {
    return m_cooldown;
}
void OAIStepScalingPolicyConfiguration::setCooldown(const qint32 &cooldown) {
    m_cooldown = cooldown;
    m_cooldown_isSet = true;
}

bool OAIStepScalingPolicyConfiguration::is_cooldown_Set() const{
    return m_cooldown_isSet;
}

bool OAIStepScalingPolicyConfiguration::is_cooldown_Valid() const{
    return m_cooldown_isValid;
}

OAIMetricAggregationType OAIStepScalingPolicyConfiguration::getMetricAggregationType() const {
    return m_metric_aggregation_type;
}
void OAIStepScalingPolicyConfiguration::setMetricAggregationType(const OAIMetricAggregationType &metric_aggregation_type) {
    m_metric_aggregation_type = metric_aggregation_type;
    m_metric_aggregation_type_isSet = true;
}

bool OAIStepScalingPolicyConfiguration::is_metric_aggregation_type_Set() const{
    return m_metric_aggregation_type_isSet;
}

bool OAIStepScalingPolicyConfiguration::is_metric_aggregation_type_Valid() const{
    return m_metric_aggregation_type_isValid;
}

bool OAIStepScalingPolicyConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_adjustments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_adjustment_magnitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cooldown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_aggregation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStepScalingPolicyConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
