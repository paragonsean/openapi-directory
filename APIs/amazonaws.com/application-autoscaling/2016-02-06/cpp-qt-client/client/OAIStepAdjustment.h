/**
 * Application Auto Scaling
 * <p>With Application Auto Scaling, you can configure automatic scaling for the following resources:</p> <ul> <li> <p>Amazon AppStream 2.0 fleets</p> </li> <li> <p>Amazon Aurora Replicas</p> </li> <li> <p>Amazon Comprehend document classification and entity recognizer endpoints</p> </li> <li> <p>Amazon DynamoDB tables and global secondary indexes throughput capacity</p> </li> <li> <p>Amazon ECS services</p> </li> <li> <p>Amazon ElastiCache for Redis clusters (replication groups)</p> </li> <li> <p>Amazon EMR clusters</p> </li> <li> <p>Amazon Keyspaces (for Apache Cassandra) tables</p> </li> <li> <p>Lambda function provisioned concurrency</p> </li> <li> <p>Amazon Managed Streaming for Apache Kafka broker storage</p> </li> <li> <p>Amazon Neptune clusters</p> </li> <li> <p>Amazon SageMaker endpoint variants</p> </li> <li> <p>Amazon SageMaker Serverless endpoint provisioned concurrency</p> </li> <li> <p>Spot Fleets (Amazon EC2)</p> </li> <li> <p>Custom resources provided by your own applications or services</p> </li> </ul> <p>To learn more about Application Auto Scaling, see the <a href=\"https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html\">Application Auto Scaling User Guide</a>.</p> <p> <b>API Summary</b> </p> <p>The Application Auto Scaling service API includes three key sets of actions: </p> <ul> <li> <p>Register and manage scalable targets - Register Amazon Web Services or custom resources as scalable targets (a resource that Application Auto Scaling can scale), set minimum and maximum capacity limits, and retrieve information on existing scalable targets.</p> </li> <li> <p>Configure and manage automatic scaling - Define scaling policies to dynamically scale your resources in response to CloudWatch alarms, schedule one-time or recurring scaling actions, and retrieve your recent scaling activity history.</p> </li> <li> <p>Suspend and resume scaling - Temporarily suspend and later resume automatic scaling by calling the <a href=\"https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\">RegisterScalableTarget</a> API action for any Application Auto Scaling scalable target. You can suspend and resume (individually or in combination) scale-out activities that are triggered by a scaling policy, scale-in activities that are triggered by a scaling policy, and scheduled scaling.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-02-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStepAdjustment.h
 *
 * &lt;p&gt;Represents a step adjustment for a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/application/APIReference/API_StepScalingPolicyConfiguration.html\&quot;&gt;StepScalingPolicyConfiguration&lt;/a&gt;. Describes an adjustment based on the difference between the value of the aggregated CloudWatch metric and the breach threshold that you&#39;ve defined for the alarm. &lt;/p&gt; &lt;p&gt;For the following examples, suppose that you have an alarm with a breach threshold of 50:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To initiate the adjustment when the metric is greater than or equal to 50 and less than 60, specify a lower bound of &lt;code&gt;0&lt;/code&gt; and an upper bound of &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To initiate the adjustment when the metric is greater than 40 and less than or equal to 50, specify a lower bound of &lt;code&gt;-10&lt;/code&gt; and an upper bound of &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;There are a few rules for the step adjustments for your step policy:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The ranges of your step adjustments can&#39;t overlap or have a gap.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;At most one step adjustment can have a null lower bound. If one step adjustment has a negative lower bound, then there must be a step adjustment with a null lower bound.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;At most one step adjustment can have a null upper bound. If one step adjustment has a positive upper bound, then there must be a step adjustment with a null upper bound.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The upper and lower bound can&#39;t be null in the same step adjustment.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAIStepAdjustment_H
#define OAIStepAdjustment_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStepAdjustment : public OAIObject {
public:
    OAIStepAdjustment();
    OAIStepAdjustment(QString json);
    ~OAIStepAdjustment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getMetricIntervalLowerBound() const;
    void setMetricIntervalLowerBound(const double &metric_interval_lower_bound);
    bool is_metric_interval_lower_bound_Set() const;
    bool is_metric_interval_lower_bound_Valid() const;

    double getMetricIntervalUpperBound() const;
    void setMetricIntervalUpperBound(const double &metric_interval_upper_bound);
    bool is_metric_interval_upper_bound_Set() const;
    bool is_metric_interval_upper_bound_Valid() const;

    qint32 getScalingAdjustment() const;
    void setScalingAdjustment(const qint32 &scaling_adjustment);
    bool is_scaling_adjustment_Set() const;
    bool is_scaling_adjustment_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_metric_interval_lower_bound;
    bool m_metric_interval_lower_bound_isSet;
    bool m_metric_interval_lower_bound_isValid;

    double m_metric_interval_upper_bound;
    bool m_metric_interval_upper_bound_isSet;
    bool m_metric_interval_upper_bound_isValid;

    qint32 m_scaling_adjustment;
    bool m_scaling_adjustment_isSet;
    bool m_scaling_adjustment_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStepAdjustment)

#endif // OAIStepAdjustment_H
