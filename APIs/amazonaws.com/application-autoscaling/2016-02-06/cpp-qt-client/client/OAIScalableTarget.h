/**
 * Application Auto Scaling
 * <p>With Application Auto Scaling, you can configure automatic scaling for the following resources:</p> <ul> <li> <p>Amazon AppStream 2.0 fleets</p> </li> <li> <p>Amazon Aurora Replicas</p> </li> <li> <p>Amazon Comprehend document classification and entity recognizer endpoints</p> </li> <li> <p>Amazon DynamoDB tables and global secondary indexes throughput capacity</p> </li> <li> <p>Amazon ECS services</p> </li> <li> <p>Amazon ElastiCache for Redis clusters (replication groups)</p> </li> <li> <p>Amazon EMR clusters</p> </li> <li> <p>Amazon Keyspaces (for Apache Cassandra) tables</p> </li> <li> <p>Lambda function provisioned concurrency</p> </li> <li> <p>Amazon Managed Streaming for Apache Kafka broker storage</p> </li> <li> <p>Amazon Neptune clusters</p> </li> <li> <p>Amazon SageMaker endpoint variants</p> </li> <li> <p>Amazon SageMaker Serverless endpoint provisioned concurrency</p> </li> <li> <p>Spot Fleets (Amazon EC2)</p> </li> <li> <p>Custom resources provided by your own applications or services</p> </li> </ul> <p>To learn more about Application Auto Scaling, see the <a href=\"https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html\">Application Auto Scaling User Guide</a>.</p> <p> <b>API Summary</b> </p> <p>The Application Auto Scaling service API includes three key sets of actions: </p> <ul> <li> <p>Register and manage scalable targets - Register Amazon Web Services or custom resources as scalable targets (a resource that Application Auto Scaling can scale), set minimum and maximum capacity limits, and retrieve information on existing scalable targets.</p> </li> <li> <p>Configure and manage automatic scaling - Define scaling policies to dynamically scale your resources in response to CloudWatch alarms, schedule one-time or recurring scaling actions, and retrieve your recent scaling activity history.</p> </li> <li> <p>Suspend and resume scaling - Temporarily suspend and later resume automatic scaling by calling the <a href=\"https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\">RegisterScalableTarget</a> API action for any Application Auto Scaling scalable target. You can suspend and resume (individually or in combination) scale-out activities that are triggered by a scaling policy, scale-in activities that are triggered by a scaling policy, and scheduled scaling.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-02-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScalableTarget.h
 *
 * Represents a scalable target.
 */

#ifndef OAIScalableTarget_H
#define OAIScalableTarget_H

#include <QJsonObject>

#include "OAIScalableDimension.h"
#include "OAIScalableTarget_SuspendedState.h"
#include "OAIServiceNamespace.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIScalableTarget_SuspendedState;

class OAIScalableTarget : public OAIObject {
public:
    OAIScalableTarget();
    OAIScalableTarget(QString json);
    ~OAIScalableTarget() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIServiceNamespace getServiceNamespace() const;
    void setServiceNamespace(const OAIServiceNamespace &service_namespace);
    bool is_service_namespace_Set() const;
    bool is_service_namespace_Valid() const;

    QString getResourceId() const;
    void setResourceId(const QString &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    OAIScalableDimension getScalableDimension() const;
    void setScalableDimension(const OAIScalableDimension &scalable_dimension);
    bool is_scalable_dimension_Set() const;
    bool is_scalable_dimension_Valid() const;

    qint32 getMinCapacity() const;
    void setMinCapacity(const qint32 &min_capacity);
    bool is_min_capacity_Set() const;
    bool is_min_capacity_Valid() const;

    qint32 getMaxCapacity() const;
    void setMaxCapacity(const qint32 &max_capacity);
    bool is_max_capacity_Set() const;
    bool is_max_capacity_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    OAIScalableTarget_SuspendedState getSuspendedState() const;
    void setSuspendedState(const OAIScalableTarget_SuspendedState &suspended_state);
    bool is_suspended_state_Set() const;
    bool is_suspended_state_Valid() const;

    QString getScalableTargetArn() const;
    void setScalableTargetArn(const QString &scalable_target_arn);
    bool is_scalable_target_arn_Set() const;
    bool is_scalable_target_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIServiceNamespace m_service_namespace;
    bool m_service_namespace_isSet;
    bool m_service_namespace_isValid;

    QString m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    OAIScalableDimension m_scalable_dimension;
    bool m_scalable_dimension_isSet;
    bool m_scalable_dimension_isValid;

    qint32 m_min_capacity;
    bool m_min_capacity_isSet;
    bool m_min_capacity_isValid;

    qint32 m_max_capacity;
    bool m_max_capacity_isSet;
    bool m_max_capacity_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    OAIScalableTarget_SuspendedState m_suspended_state;
    bool m_suspended_state_isSet;
    bool m_suspended_state_isValid;

    QString m_scalable_target_arn;
    bool m_scalable_target_arn_isSet;
    bool m_scalable_target_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScalableTarget)

#endif // OAIScalableTarget_H
