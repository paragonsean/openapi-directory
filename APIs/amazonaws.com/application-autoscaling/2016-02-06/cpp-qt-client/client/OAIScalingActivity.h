/**
 * Application Auto Scaling
 * <p>With Application Auto Scaling, you can configure automatic scaling for the following resources:</p> <ul> <li> <p>Amazon AppStream 2.0 fleets</p> </li> <li> <p>Amazon Aurora Replicas</p> </li> <li> <p>Amazon Comprehend document classification and entity recognizer endpoints</p> </li> <li> <p>Amazon DynamoDB tables and global secondary indexes throughput capacity</p> </li> <li> <p>Amazon ECS services</p> </li> <li> <p>Amazon ElastiCache for Redis clusters (replication groups)</p> </li> <li> <p>Amazon EMR clusters</p> </li> <li> <p>Amazon Keyspaces (for Apache Cassandra) tables</p> </li> <li> <p>Lambda function provisioned concurrency</p> </li> <li> <p>Amazon Managed Streaming for Apache Kafka broker storage</p> </li> <li> <p>Amazon Neptune clusters</p> </li> <li> <p>Amazon SageMaker endpoint variants</p> </li> <li> <p>Amazon SageMaker Serverless endpoint provisioned concurrency</p> </li> <li> <p>Spot Fleets (Amazon EC2)</p> </li> <li> <p>Custom resources provided by your own applications or services</p> </li> </ul> <p>To learn more about Application Auto Scaling, see the <a href=\"https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html\">Application Auto Scaling User Guide</a>.</p> <p> <b>API Summary</b> </p> <p>The Application Auto Scaling service API includes three key sets of actions: </p> <ul> <li> <p>Register and manage scalable targets - Register Amazon Web Services or custom resources as scalable targets (a resource that Application Auto Scaling can scale), set minimum and maximum capacity limits, and retrieve information on existing scalable targets.</p> </li> <li> <p>Configure and manage automatic scaling - Define scaling policies to dynamically scale your resources in response to CloudWatch alarms, schedule one-time or recurring scaling actions, and retrieve your recent scaling activity history.</p> </li> <li> <p>Suspend and resume scaling - Temporarily suspend and later resume automatic scaling by calling the <a href=\"https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\">RegisterScalableTarget</a> API action for any Application Auto Scaling scalable target. You can suspend and resume (individually or in combination) scale-out activities that are triggered by a scaling policy, scale-in activities that are triggered by a scaling policy, and scheduled scaling.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-02-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScalingActivity.h
 *
 * Represents a scaling activity.
 */

#ifndef OAIScalingActivity_H
#define OAIScalingActivity_H

#include <QJsonObject>

#include "OAIScalableDimension.h"
#include "OAIScalingActivityStatusCode.h"
#include "OAIServiceNamespace.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIScalingActivity : public OAIObject {
public:
    OAIScalingActivity();
    OAIScalingActivity(QString json);
    ~OAIScalingActivity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActivityId() const;
    void setActivityId(const QString &activity_id);
    bool is_activity_id_Set() const;
    bool is_activity_id_Valid() const;

    OAIServiceNamespace getServiceNamespace() const;
    void setServiceNamespace(const OAIServiceNamespace &service_namespace);
    bool is_service_namespace_Set() const;
    bool is_service_namespace_Valid() const;

    QString getResourceId() const;
    void setResourceId(const QString &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    OAIScalableDimension getScalableDimension() const;
    void setScalableDimension(const OAIScalableDimension &scalable_dimension);
    bool is_scalable_dimension_Set() const;
    bool is_scalable_dimension_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getCause() const;
    void setCause(const QString &cause);
    bool is_cause_Set() const;
    bool is_cause_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    OAIScalingActivityStatusCode getStatusCode() const;
    void setStatusCode(const OAIScalingActivityStatusCode &status_code);
    bool is_status_code_Set() const;
    bool is_status_code_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    QString getDetails() const;
    void setDetails(const QString &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QList getNotScaledReasons() const;
    void setNotScaledReasons(const QList &not_scaled_reasons);
    bool is_not_scaled_reasons_Set() const;
    bool is_not_scaled_reasons_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_activity_id;
    bool m_activity_id_isSet;
    bool m_activity_id_isValid;

    OAIServiceNamespace m_service_namespace;
    bool m_service_namespace_isSet;
    bool m_service_namespace_isValid;

    QString m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    OAIScalableDimension m_scalable_dimension;
    bool m_scalable_dimension_isSet;
    bool m_scalable_dimension_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_cause;
    bool m_cause_isSet;
    bool m_cause_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    OAIScalingActivityStatusCode m_status_code;
    bool m_status_code_isSet;
    bool m_status_code_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    QString m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QList m_not_scaled_reasons;
    bool m_not_scaled_reasons_isSet;
    bool m_not_scaled_reasons_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScalingActivity)

#endif // OAIScalingActivity_H
