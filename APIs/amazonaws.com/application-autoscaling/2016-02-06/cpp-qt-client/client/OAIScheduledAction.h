/**
 * Application Auto Scaling
 * <p>With Application Auto Scaling, you can configure automatic scaling for the following resources:</p> <ul> <li> <p>Amazon AppStream 2.0 fleets</p> </li> <li> <p>Amazon Aurora Replicas</p> </li> <li> <p>Amazon Comprehend document classification and entity recognizer endpoints</p> </li> <li> <p>Amazon DynamoDB tables and global secondary indexes throughput capacity</p> </li> <li> <p>Amazon ECS services</p> </li> <li> <p>Amazon ElastiCache for Redis clusters (replication groups)</p> </li> <li> <p>Amazon EMR clusters</p> </li> <li> <p>Amazon Keyspaces (for Apache Cassandra) tables</p> </li> <li> <p>Lambda function provisioned concurrency</p> </li> <li> <p>Amazon Managed Streaming for Apache Kafka broker storage</p> </li> <li> <p>Amazon Neptune clusters</p> </li> <li> <p>Amazon SageMaker endpoint variants</p> </li> <li> <p>Amazon SageMaker Serverless endpoint provisioned concurrency</p> </li> <li> <p>Spot Fleets (Amazon EC2)</p> </li> <li> <p>Custom resources provided by your own applications or services</p> </li> </ul> <p>To learn more about Application Auto Scaling, see the <a href=\"https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html\">Application Auto Scaling User Guide</a>.</p> <p> <b>API Summary</b> </p> <p>The Application Auto Scaling service API includes three key sets of actions: </p> <ul> <li> <p>Register and manage scalable targets - Register Amazon Web Services or custom resources as scalable targets (a resource that Application Auto Scaling can scale), set minimum and maximum capacity limits, and retrieve information on existing scalable targets.</p> </li> <li> <p>Configure and manage automatic scaling - Define scaling policies to dynamically scale your resources in response to CloudWatch alarms, schedule one-time or recurring scaling actions, and retrieve your recent scaling activity history.</p> </li> <li> <p>Suspend and resume scaling - Temporarily suspend and later resume automatic scaling by calling the <a href=\"https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\">RegisterScalableTarget</a> API action for any Application Auto Scaling scalable target. You can suspend and resume (individually or in combination) scale-out activities that are triggered by a scaling policy, scale-in activities that are triggered by a scaling policy, and scheduled scaling.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-02-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScheduledAction.h
 *
 * Represents a scheduled action.
 */

#ifndef OAIScheduledAction_H
#define OAIScheduledAction_H

#include <QJsonObject>

#include "OAIPutScheduledActionRequest_ScalableTargetAction.h"
#include "OAIScalableDimension.h"
#include "OAIServiceNamespace.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPutScheduledActionRequest_ScalableTargetAction;

class OAIScheduledAction : public OAIObject {
public:
    OAIScheduledAction();
    OAIScheduledAction(QString json);
    ~OAIScheduledAction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getScheduledActionName() const;
    void setScheduledActionName(const QString &scheduled_action_name);
    bool is_scheduled_action_name_Set() const;
    bool is_scheduled_action_name_Valid() const;

    QString getScheduledActionArn() const;
    void setScheduledActionArn(const QString &scheduled_action_arn);
    bool is_scheduled_action_arn_Set() const;
    bool is_scheduled_action_arn_Valid() const;

    OAIServiceNamespace getServiceNamespace() const;
    void setServiceNamespace(const OAIServiceNamespace &service_namespace);
    bool is_service_namespace_Set() const;
    bool is_service_namespace_Valid() const;

    QString getSchedule() const;
    void setSchedule(const QString &schedule);
    bool is_schedule_Set() const;
    bool is_schedule_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    QString getResourceId() const;
    void setResourceId(const QString &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    OAIScalableDimension getScalableDimension() const;
    void setScalableDimension(const OAIScalableDimension &scalable_dimension);
    bool is_scalable_dimension_Set() const;
    bool is_scalable_dimension_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    OAIPutScheduledActionRequest_ScalableTargetAction getScalableTargetAction() const;
    void setScalableTargetAction(const OAIPutScheduledActionRequest_ScalableTargetAction &scalable_target_action);
    bool is_scalable_target_action_Set() const;
    bool is_scalable_target_action_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_scheduled_action_name;
    bool m_scheduled_action_name_isSet;
    bool m_scheduled_action_name_isValid;

    QString m_scheduled_action_arn;
    bool m_scheduled_action_arn_isSet;
    bool m_scheduled_action_arn_isValid;

    OAIServiceNamespace m_service_namespace;
    bool m_service_namespace_isSet;
    bool m_service_namespace_isValid;

    QString m_schedule;
    bool m_schedule_isSet;
    bool m_schedule_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    QString m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    OAIScalableDimension m_scalable_dimension;
    bool m_scalable_dimension_isSet;
    bool m_scalable_dimension_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    OAIPutScheduledActionRequest_ScalableTargetAction m_scalable_target_action;
    bool m_scalable_target_action_isSet;
    bool m_scalable_target_action_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScheduledAction)

#endif // OAIScheduledAction_H
