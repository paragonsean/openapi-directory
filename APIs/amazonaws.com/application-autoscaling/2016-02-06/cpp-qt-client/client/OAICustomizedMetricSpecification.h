/**
 * Application Auto Scaling
 * <p>With Application Auto Scaling, you can configure automatic scaling for the following resources:</p> <ul> <li> <p>Amazon AppStream 2.0 fleets</p> </li> <li> <p>Amazon Aurora Replicas</p> </li> <li> <p>Amazon Comprehend document classification and entity recognizer endpoints</p> </li> <li> <p>Amazon DynamoDB tables and global secondary indexes throughput capacity</p> </li> <li> <p>Amazon ECS services</p> </li> <li> <p>Amazon ElastiCache for Redis clusters (replication groups)</p> </li> <li> <p>Amazon EMR clusters</p> </li> <li> <p>Amazon Keyspaces (for Apache Cassandra) tables</p> </li> <li> <p>Lambda function provisioned concurrency</p> </li> <li> <p>Amazon Managed Streaming for Apache Kafka broker storage</p> </li> <li> <p>Amazon Neptune clusters</p> </li> <li> <p>Amazon SageMaker endpoint variants</p> </li> <li> <p>Amazon SageMaker Serverless endpoint provisioned concurrency</p> </li> <li> <p>Spot Fleets (Amazon EC2)</p> </li> <li> <p>Custom resources provided by your own applications or services</p> </li> </ul> <p>To learn more about Application Auto Scaling, see the <a href=\"https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html\">Application Auto Scaling User Guide</a>.</p> <p> <b>API Summary</b> </p> <p>The Application Auto Scaling service API includes three key sets of actions: </p> <ul> <li> <p>Register and manage scalable targets - Register Amazon Web Services or custom resources as scalable targets (a resource that Application Auto Scaling can scale), set minimum and maximum capacity limits, and retrieve information on existing scalable targets.</p> </li> <li> <p>Configure and manage automatic scaling - Define scaling policies to dynamically scale your resources in response to CloudWatch alarms, schedule one-time or recurring scaling actions, and retrieve your recent scaling activity history.</p> </li> <li> <p>Suspend and resume scaling - Temporarily suspend and later resume automatic scaling by calling the <a href=\"https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\">RegisterScalableTarget</a> API action for any Application Auto Scaling scalable target. You can suspend and resume (individually or in combination) scale-out activities that are triggered by a scaling policy, scale-in activities that are triggered by a scaling policy, and scheduled scaling.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-02-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICustomizedMetricSpecification.h
 *
 * &lt;p&gt;Represents a CloudWatch metric of your choosing for a target tracking scaling policy to use with Application Auto Scaling.&lt;/p&gt; &lt;p&gt;For information about the available metrics for a service, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html\&quot;&gt;Amazon Web Services services that publish CloudWatch metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To create your customized metric specification:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Add values for each required parameter from CloudWatch. You can use an existing metric, or a new metric that you create. To use your own metric, you must first publish the metric to CloudWatch. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html\&quot;&gt;Publish custom metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Choose a metric that changes proportionally with capacity. The value of the metric should increase or decrease in inverse proportion to the number of capacity units. That is, the value of the metric should decrease when capacity increases, and increase when capacity decreases. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about the CloudWatch terminology below, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html\&quot;&gt;Amazon CloudWatch concepts&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;. &lt;/p&gt;
 */

#ifndef OAICustomizedMetricSpecification_H
#define OAICustomizedMetricSpecification_H

#include <QJsonObject>

#include "OAIMetricStatistic.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICustomizedMetricSpecification : public OAIObject {
public:
    OAICustomizedMetricSpecification();
    OAICustomizedMetricSpecification(QString json);
    ~OAICustomizedMetricSpecification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMetricName() const;
    void setMetricName(const QString &metric_name);
    bool is_metric_name_Set() const;
    bool is_metric_name_Valid() const;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    QList getDimensions() const;
    void setDimensions(const QList &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    OAIMetricStatistic getStatistic() const;
    void setStatistic(const OAIMetricStatistic &statistic);
    bool is_statistic_Set() const;
    bool is_statistic_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    QList getMetrics() const;
    void setMetrics(const QList &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_metric_name;
    bool m_metric_name_isSet;
    bool m_metric_name_isValid;

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    QList m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    OAIMetricStatistic m_statistic;
    bool m_statistic_isSet;
    bool m_statistic_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    QList m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICustomizedMetricSpecification)

#endif // OAICustomizedMetricSpecification_H
