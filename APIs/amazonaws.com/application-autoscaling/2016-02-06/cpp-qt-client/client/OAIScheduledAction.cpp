/**
 * Application Auto Scaling
 * <p>With Application Auto Scaling, you can configure automatic scaling for the following resources:</p> <ul> <li> <p>Amazon AppStream 2.0 fleets</p> </li> <li> <p>Amazon Aurora Replicas</p> </li> <li> <p>Amazon Comprehend document classification and entity recognizer endpoints</p> </li> <li> <p>Amazon DynamoDB tables and global secondary indexes throughput capacity</p> </li> <li> <p>Amazon ECS services</p> </li> <li> <p>Amazon ElastiCache for Redis clusters (replication groups)</p> </li> <li> <p>Amazon EMR clusters</p> </li> <li> <p>Amazon Keyspaces (for Apache Cassandra) tables</p> </li> <li> <p>Lambda function provisioned concurrency</p> </li> <li> <p>Amazon Managed Streaming for Apache Kafka broker storage</p> </li> <li> <p>Amazon Neptune clusters</p> </li> <li> <p>Amazon SageMaker endpoint variants</p> </li> <li> <p>Amazon SageMaker Serverless endpoint provisioned concurrency</p> </li> <li> <p>Spot Fleets (Amazon EC2)</p> </li> <li> <p>Custom resources provided by your own applications or services</p> </li> </ul> <p>To learn more about Application Auto Scaling, see the <a href=\"https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html\">Application Auto Scaling User Guide</a>.</p> <p> <b>API Summary</b> </p> <p>The Application Auto Scaling service API includes three key sets of actions: </p> <ul> <li> <p>Register and manage scalable targets - Register Amazon Web Services or custom resources as scalable targets (a resource that Application Auto Scaling can scale), set minimum and maximum capacity limits, and retrieve information on existing scalable targets.</p> </li> <li> <p>Configure and manage automatic scaling - Define scaling policies to dynamically scale your resources in response to CloudWatch alarms, schedule one-time or recurring scaling actions, and retrieve your recent scaling activity history.</p> </li> <li> <p>Suspend and resume scaling - Temporarily suspend and later resume automatic scaling by calling the <a href=\"https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\">RegisterScalableTarget</a> API action for any Application Auto Scaling scalable target. You can suspend and resume (individually or in combination) scale-out activities that are triggered by a scaling policy, scale-in activities that are triggered by a scaling policy, and scheduled scaling.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-02-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledAction::OAIScheduledAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledAction::OAIScheduledAction() {
    this->initializeModel();
}

OAIScheduledAction::~OAIScheduledAction() {}

void OAIScheduledAction::initializeModel() {

    m_scheduled_action_name_isSet = false;
    m_scheduled_action_name_isValid = false;

    m_scheduled_action_arn_isSet = false;
    m_scheduled_action_arn_isValid = false;

    m_service_namespace_isSet = false;
    m_service_namespace_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_scalable_dimension_isSet = false;
    m_scalable_dimension_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_scalable_target_action_isSet = false;
    m_scalable_target_action_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;
}

void OAIScheduledAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledAction::fromJsonObject(QJsonObject json) {

    m_scheduled_action_name_isValid = ::OpenAPI::fromJsonValue(m_scheduled_action_name, json[QString("ScheduledActionName")]);
    m_scheduled_action_name_isSet = !json[QString("ScheduledActionName")].isNull() && m_scheduled_action_name_isValid;

    m_scheduled_action_arn_isValid = ::OpenAPI::fromJsonValue(m_scheduled_action_arn, json[QString("ScheduledActionARN")]);
    m_scheduled_action_arn_isSet = !json[QString("ScheduledActionARN")].isNull() && m_scheduled_action_arn_isValid;

    m_service_namespace_isValid = ::OpenAPI::fromJsonValue(m_service_namespace, json[QString("ServiceNamespace")]);
    m_service_namespace_isSet = !json[QString("ServiceNamespace")].isNull() && m_service_namespace_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("Timezone")]);
    m_timezone_isSet = !json[QString("Timezone")].isNull() && m_timezone_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_scalable_dimension_isValid = ::OpenAPI::fromJsonValue(m_scalable_dimension, json[QString("ScalableDimension")]);
    m_scalable_dimension_isSet = !json[QString("ScalableDimension")].isNull() && m_scalable_dimension_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_scalable_target_action_isValid = ::OpenAPI::fromJsonValue(m_scalable_target_action, json[QString("ScalableTargetAction")]);
    m_scalable_target_action_isSet = !json[QString("ScalableTargetAction")].isNull() && m_scalable_target_action_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;
}

QString OAIScheduledAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledAction::asJsonObject() const {
    QJsonObject obj;
    if (m_scheduled_action_name_isSet) {
        obj.insert(QString("ScheduledActionName"), ::OpenAPI::toJsonValue(m_scheduled_action_name));
    }
    if (m_scheduled_action_arn_isSet) {
        obj.insert(QString("ScheduledActionARN"), ::OpenAPI::toJsonValue(m_scheduled_action_arn));
    }
    if (m_service_namespace.isSet()) {
        obj.insert(QString("ServiceNamespace"), ::OpenAPI::toJsonValue(m_service_namespace));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("Timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_scalable_dimension.isSet()) {
        obj.insert(QString("ScalableDimension"), ::OpenAPI::toJsonValue(m_scalable_dimension));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_scalable_target_action.isSet()) {
        obj.insert(QString("ScalableTargetAction"), ::OpenAPI::toJsonValue(m_scalable_target_action));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    return obj;
}

QString OAIScheduledAction::getScheduledActionName() const {
    return m_scheduled_action_name;
}
void OAIScheduledAction::setScheduledActionName(const QString &scheduled_action_name) {
    m_scheduled_action_name = scheduled_action_name;
    m_scheduled_action_name_isSet = true;
}

bool OAIScheduledAction::is_scheduled_action_name_Set() const{
    return m_scheduled_action_name_isSet;
}

bool OAIScheduledAction::is_scheduled_action_name_Valid() const{
    return m_scheduled_action_name_isValid;
}

QString OAIScheduledAction::getScheduledActionArn() const {
    return m_scheduled_action_arn;
}
void OAIScheduledAction::setScheduledActionArn(const QString &scheduled_action_arn) {
    m_scheduled_action_arn = scheduled_action_arn;
    m_scheduled_action_arn_isSet = true;
}

bool OAIScheduledAction::is_scheduled_action_arn_Set() const{
    return m_scheduled_action_arn_isSet;
}

bool OAIScheduledAction::is_scheduled_action_arn_Valid() const{
    return m_scheduled_action_arn_isValid;
}

OAIServiceNamespace OAIScheduledAction::getServiceNamespace() const {
    return m_service_namespace;
}
void OAIScheduledAction::setServiceNamespace(const OAIServiceNamespace &service_namespace) {
    m_service_namespace = service_namespace;
    m_service_namespace_isSet = true;
}

bool OAIScheduledAction::is_service_namespace_Set() const{
    return m_service_namespace_isSet;
}

bool OAIScheduledAction::is_service_namespace_Valid() const{
    return m_service_namespace_isValid;
}

QString OAIScheduledAction::getSchedule() const {
    return m_schedule;
}
void OAIScheduledAction::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIScheduledAction::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIScheduledAction::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIScheduledAction::getTimezone() const {
    return m_timezone;
}
void OAIScheduledAction::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIScheduledAction::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIScheduledAction::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIScheduledAction::getResourceId() const {
    return m_resource_id;
}
void OAIScheduledAction::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIScheduledAction::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIScheduledAction::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAIScalableDimension OAIScheduledAction::getScalableDimension() const {
    return m_scalable_dimension;
}
void OAIScheduledAction::setScalableDimension(const OAIScalableDimension &scalable_dimension) {
    m_scalable_dimension = scalable_dimension;
    m_scalable_dimension_isSet = true;
}

bool OAIScheduledAction::is_scalable_dimension_Set() const{
    return m_scalable_dimension_isSet;
}

bool OAIScheduledAction::is_scalable_dimension_Valid() const{
    return m_scalable_dimension_isValid;
}

QDateTime OAIScheduledAction::getStartTime() const {
    return m_start_time;
}
void OAIScheduledAction::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIScheduledAction::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIScheduledAction::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIScheduledAction::getEndTime() const {
    return m_end_time;
}
void OAIScheduledAction::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIScheduledAction::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIScheduledAction::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIPutScheduledActionRequest_ScalableTargetAction OAIScheduledAction::getScalableTargetAction() const {
    return m_scalable_target_action;
}
void OAIScheduledAction::setScalableTargetAction(const OAIPutScheduledActionRequest_ScalableTargetAction &scalable_target_action) {
    m_scalable_target_action = scalable_target_action;
    m_scalable_target_action_isSet = true;
}

bool OAIScheduledAction::is_scalable_target_action_Set() const{
    return m_scalable_target_action_isSet;
}

bool OAIScheduledAction::is_scalable_target_action_Valid() const{
    return m_scalable_target_action_isValid;
}

QDateTime OAIScheduledAction::getCreationTime() const {
    return m_creation_time;
}
void OAIScheduledAction::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIScheduledAction::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIScheduledAction::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

bool OAIScheduledAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scheduled_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_action_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scalable_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scalable_target_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_scheduled_action_name_isValid && m_scheduled_action_arn_isValid && m_service_namespace_isValid && m_schedule_isValid && m_resource_id_isValid && m_creation_time_isValid && true;
}

} // namespace OpenAPI
