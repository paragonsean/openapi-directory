# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scalable_dimension import ScalableDimension
from openapi_server.models.service_namespace import ServiceNamespace
from openapi_server import util


class DeleteScalingPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_name: str=None, service_namespace: ServiceNamespace=None, resource_id: str=None, scalable_dimension: ScalableDimension=None):
        """DeleteScalingPolicyRequest - a model defined in OpenAPI

        :param policy_name: The policy_name of this DeleteScalingPolicyRequest.
        :param service_namespace: The service_namespace of this DeleteScalingPolicyRequest.
        :param resource_id: The resource_id of this DeleteScalingPolicyRequest.
        :param scalable_dimension: The scalable_dimension of this DeleteScalingPolicyRequest.
        """
        self.openapi_types = {
            'policy_name': str,
            'service_namespace': ServiceNamespace,
            'resource_id': str,
            'scalable_dimension': ScalableDimension
        }

        self.attribute_map = {
            'policy_name': 'PolicyName',
            'service_namespace': 'ServiceNamespace',
            'resource_id': 'ResourceId',
            'scalable_dimension': 'ScalableDimension'
        }

        self._policy_name = policy_name
        self._service_namespace = service_namespace
        self._resource_id = resource_id
        self._scalable_dimension = scalable_dimension

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteScalingPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteScalingPolicyRequest of this DeleteScalingPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_name(self):
        """Gets the policy_name of this DeleteScalingPolicyRequest.


        :return: The policy_name of this DeleteScalingPolicyRequest.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this DeleteScalingPolicyRequest.


        :param policy_name: The policy_name of this DeleteScalingPolicyRequest.
        :type policy_name: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")

        self._policy_name = policy_name

    @property
    def service_namespace(self):
        """Gets the service_namespace of this DeleteScalingPolicyRequest.


        :return: The service_namespace of this DeleteScalingPolicyRequest.
        :rtype: ServiceNamespace
        """
        return self._service_namespace

    @service_namespace.setter
    def service_namespace(self, service_namespace):
        """Sets the service_namespace of this DeleteScalingPolicyRequest.


        :param service_namespace: The service_namespace of this DeleteScalingPolicyRequest.
        :type service_namespace: ServiceNamespace
        """
        if service_namespace is None:
            raise ValueError("Invalid value for `service_namespace`, must not be `None`")

        self._service_namespace = service_namespace

    @property
    def resource_id(self):
        """Gets the resource_id of this DeleteScalingPolicyRequest.


        :return: The resource_id of this DeleteScalingPolicyRequest.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this DeleteScalingPolicyRequest.


        :param resource_id: The resource_id of this DeleteScalingPolicyRequest.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def scalable_dimension(self):
        """Gets the scalable_dimension of this DeleteScalingPolicyRequest.


        :return: The scalable_dimension of this DeleteScalingPolicyRequest.
        :rtype: ScalableDimension
        """
        return self._scalable_dimension

    @scalable_dimension.setter
    def scalable_dimension(self, scalable_dimension):
        """Sets the scalable_dimension of this DeleteScalingPolicyRequest.


        :param scalable_dimension: The scalable_dimension of this DeleteScalingPolicyRequest.
        :type scalable_dimension: ScalableDimension
        """
        if scalable_dimension is None:
            raise ValueError("Invalid value for `scalable_dimension`, must not be `None`")

        self._scalable_dimension = scalable_dimension
