# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotScaledReason(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, max_capacity: int=None, min_capacity: int=None, current_capacity: int=None):
        """NotScaledReason - a model defined in OpenAPI

        :param code: The code of this NotScaledReason.
        :param max_capacity: The max_capacity of this NotScaledReason.
        :param min_capacity: The min_capacity of this NotScaledReason.
        :param current_capacity: The current_capacity of this NotScaledReason.
        """
        self.openapi_types = {
            'code': str,
            'max_capacity': int,
            'min_capacity': int,
            'current_capacity': int
        }

        self.attribute_map = {
            'code': 'Code',
            'max_capacity': 'MaxCapacity',
            'min_capacity': 'MinCapacity',
            'current_capacity': 'CurrentCapacity'
        }

        self._code = code
        self._max_capacity = max_capacity
        self._min_capacity = min_capacity
        self._current_capacity = current_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotScaledReason':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotScaledReason of this NotScaledReason.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this NotScaledReason.


        :return: The code of this NotScaledReason.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this NotScaledReason.


        :param code: The code of this NotScaledReason.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def max_capacity(self):
        """Gets the max_capacity of this NotScaledReason.


        :return: The max_capacity of this NotScaledReason.
        :rtype: int
        """
        return self._max_capacity

    @max_capacity.setter
    def max_capacity(self, max_capacity):
        """Sets the max_capacity of this NotScaledReason.


        :param max_capacity: The max_capacity of this NotScaledReason.
        :type max_capacity: int
        """

        self._max_capacity = max_capacity

    @property
    def min_capacity(self):
        """Gets the min_capacity of this NotScaledReason.


        :return: The min_capacity of this NotScaledReason.
        :rtype: int
        """
        return self._min_capacity

    @min_capacity.setter
    def min_capacity(self, min_capacity):
        """Sets the min_capacity of this NotScaledReason.


        :param min_capacity: The min_capacity of this NotScaledReason.
        :type min_capacity: int
        """

        self._min_capacity = min_capacity

    @property
    def current_capacity(self):
        """Gets the current_capacity of this NotScaledReason.


        :return: The current_capacity of this NotScaledReason.
        :rtype: int
        """
        return self._current_capacity

    @current_capacity.setter
    def current_capacity(self, current_capacity):
        """Sets the current_capacity of this NotScaledReason.


        :param current_capacity: The current_capacity of this NotScaledReason.
        :type current_capacity: int
        """

        self._current_capacity = current_capacity
