# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScalableDimension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ECS_COLON_SERVICE_COLON_DESIRED_COUNT = 'ecs:service:DesiredCount'
    EC2_COLON_SPOT_MINUS_FLEET_MINUS_REQUEST_COLON_TARGET_CAPACITY = 'ec2:spot-fleet-request:TargetCapacity'
    ELASTICMAPREDUCE_COLON_INSTANCEGROUP_COLON_INSTANCE_COUNT = 'elasticmapreduce:instancegroup:InstanceCount'
    APPSTREAM_COLON_FLEET_COLON_DESIRED_CAPACITY = 'appstream:fleet:DesiredCapacity'
    DYNAMODB_COLON_TABLE_COLON_READ_CAPACITY_UNITS = 'dynamodb:table:ReadCapacityUnits'
    DYNAMODB_COLON_TABLE_COLON_WRITE_CAPACITY_UNITS = 'dynamodb:table:WriteCapacityUnits'
    DYNAMODB_COLON_INDEX_COLON_READ_CAPACITY_UNITS = 'dynamodb:index:ReadCapacityUnits'
    DYNAMODB_COLON_INDEX_COLON_WRITE_CAPACITY_UNITS = 'dynamodb:index:WriteCapacityUnits'
    RDS_COLON_CLUSTER_COLON_READ_REPLICA_COUNT = 'rds:cluster:ReadReplicaCount'
    SAGEMAKER_COLON_VARIANT_COLON_DESIRED_INSTANCE_COUNT = 'sagemaker:variant:DesiredInstanceCount'
    CUSTOM_MINUS_RESOURCE_COLON_RESOURCE_TYPE_COLON_PROPERTY = 'custom-resource:ResourceType:Property'
    COMPREHEND_COLON_DOCUMENT_MINUS_CLASSIFIER_MINUS_ENDPOINT_COLON_DESIRED_INFERENCE_UNITS = 'comprehend:document-classifier-endpoint:DesiredInferenceUnits'
    COMPREHEND_COLON_ENTITY_MINUS_RECOGNIZER_MINUS_ENDPOINT_COLON_DESIRED_INFERENCE_UNITS = 'comprehend:entity-recognizer-endpoint:DesiredInferenceUnits'
    LAMBDA_COLON_FUNCTION_COLON_PROVISIONED_CONCURRENCY = 'lambda:function:ProvisionedConcurrency'
    CASSANDRA_COLON_TABLE_COLON_READ_CAPACITY_UNITS = 'cassandra:table:ReadCapacityUnits'
    CASSANDRA_COLON_TABLE_COLON_WRITE_CAPACITY_UNITS = 'cassandra:table:WriteCapacityUnits'
    KAFKA_COLON_BROKER_MINUS_STORAGE_COLON_VOLUME_SIZE = 'kafka:broker-storage:VolumeSize'
    ELASTICACHE_COLON_REPLICATION_MINUS_GROUP_COLON_NODE_GROUPS = 'elasticache:replication-group:NodeGroups'
    ELASTICACHE_COLON_REPLICATION_MINUS_GROUP_COLON_REPLICAS = 'elasticache:replication-group:Replicas'
    NEPTUNE_COLON_CLUSTER_COLON_READ_REPLICA_COUNT = 'neptune:cluster:ReadReplicaCount'
    SAGEMAKER_COLON_VARIANT_COLON_DESIRED_PROVISIONED_CONCURRENCY = 'sagemaker:variant:DesiredProvisionedConcurrency'

    def __init__(self):
        """ScalableDimension - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScalableDimension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScalableDimension of this ScalableDimension.
        """
        return util.deserialize_model(dikt, cls)
