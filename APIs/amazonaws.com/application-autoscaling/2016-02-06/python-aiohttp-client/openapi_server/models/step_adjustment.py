# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StepAdjustment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_interval_lower_bound: float=None, metric_interval_upper_bound: float=None, scaling_adjustment: int=None):
        """StepAdjustment - a model defined in OpenAPI

        :param metric_interval_lower_bound: The metric_interval_lower_bound of this StepAdjustment.
        :param metric_interval_upper_bound: The metric_interval_upper_bound of this StepAdjustment.
        :param scaling_adjustment: The scaling_adjustment of this StepAdjustment.
        """
        self.openapi_types = {
            'metric_interval_lower_bound': float,
            'metric_interval_upper_bound': float,
            'scaling_adjustment': int
        }

        self.attribute_map = {
            'metric_interval_lower_bound': 'MetricIntervalLowerBound',
            'metric_interval_upper_bound': 'MetricIntervalUpperBound',
            'scaling_adjustment': 'ScalingAdjustment'
        }

        self._metric_interval_lower_bound = metric_interval_lower_bound
        self._metric_interval_upper_bound = metric_interval_upper_bound
        self._scaling_adjustment = scaling_adjustment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StepAdjustment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StepAdjustment of this StepAdjustment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_interval_lower_bound(self):
        """Gets the metric_interval_lower_bound of this StepAdjustment.


        :return: The metric_interval_lower_bound of this StepAdjustment.
        :rtype: float
        """
        return self._metric_interval_lower_bound

    @metric_interval_lower_bound.setter
    def metric_interval_lower_bound(self, metric_interval_lower_bound):
        """Sets the metric_interval_lower_bound of this StepAdjustment.


        :param metric_interval_lower_bound: The metric_interval_lower_bound of this StepAdjustment.
        :type metric_interval_lower_bound: float
        """

        self._metric_interval_lower_bound = metric_interval_lower_bound

    @property
    def metric_interval_upper_bound(self):
        """Gets the metric_interval_upper_bound of this StepAdjustment.


        :return: The metric_interval_upper_bound of this StepAdjustment.
        :rtype: float
        """
        return self._metric_interval_upper_bound

    @metric_interval_upper_bound.setter
    def metric_interval_upper_bound(self, metric_interval_upper_bound):
        """Sets the metric_interval_upper_bound of this StepAdjustment.


        :param metric_interval_upper_bound: The metric_interval_upper_bound of this StepAdjustment.
        :type metric_interval_upper_bound: float
        """

        self._metric_interval_upper_bound = metric_interval_upper_bound

    @property
    def scaling_adjustment(self):
        """Gets the scaling_adjustment of this StepAdjustment.


        :return: The scaling_adjustment of this StepAdjustment.
        :rtype: int
        """
        return self._scaling_adjustment

    @scaling_adjustment.setter
    def scaling_adjustment(self, scaling_adjustment):
        """Sets the scaling_adjustment of this StepAdjustment.


        :param scaling_adjustment: The scaling_adjustment of this StepAdjustment.
        :type scaling_adjustment: int
        """
        if scaling_adjustment is None:
            raise ValueError("Invalid value for `scaling_adjustment`, must not be `None`")

        self._scaling_adjustment = scaling_adjustment
