# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SuspendedState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dynamic_scaling_in_suspended: bool=None, dynamic_scaling_out_suspended: bool=None, scheduled_scaling_suspended: bool=None):
        """SuspendedState - a model defined in OpenAPI

        :param dynamic_scaling_in_suspended: The dynamic_scaling_in_suspended of this SuspendedState.
        :param dynamic_scaling_out_suspended: The dynamic_scaling_out_suspended of this SuspendedState.
        :param scheduled_scaling_suspended: The scheduled_scaling_suspended of this SuspendedState.
        """
        self.openapi_types = {
            'dynamic_scaling_in_suspended': bool,
            'dynamic_scaling_out_suspended': bool,
            'scheduled_scaling_suspended': bool
        }

        self.attribute_map = {
            'dynamic_scaling_in_suspended': 'DynamicScalingInSuspended',
            'dynamic_scaling_out_suspended': 'DynamicScalingOutSuspended',
            'scheduled_scaling_suspended': 'ScheduledScalingSuspended'
        }

        self._dynamic_scaling_in_suspended = dynamic_scaling_in_suspended
        self._dynamic_scaling_out_suspended = dynamic_scaling_out_suspended
        self._scheduled_scaling_suspended = scheduled_scaling_suspended

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuspendedState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuspendedState of this SuspendedState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dynamic_scaling_in_suspended(self):
        """Gets the dynamic_scaling_in_suspended of this SuspendedState.


        :return: The dynamic_scaling_in_suspended of this SuspendedState.
        :rtype: bool
        """
        return self._dynamic_scaling_in_suspended

    @dynamic_scaling_in_suspended.setter
    def dynamic_scaling_in_suspended(self, dynamic_scaling_in_suspended):
        """Sets the dynamic_scaling_in_suspended of this SuspendedState.


        :param dynamic_scaling_in_suspended: The dynamic_scaling_in_suspended of this SuspendedState.
        :type dynamic_scaling_in_suspended: bool
        """

        self._dynamic_scaling_in_suspended = dynamic_scaling_in_suspended

    @property
    def dynamic_scaling_out_suspended(self):
        """Gets the dynamic_scaling_out_suspended of this SuspendedState.


        :return: The dynamic_scaling_out_suspended of this SuspendedState.
        :rtype: bool
        """
        return self._dynamic_scaling_out_suspended

    @dynamic_scaling_out_suspended.setter
    def dynamic_scaling_out_suspended(self, dynamic_scaling_out_suspended):
        """Sets the dynamic_scaling_out_suspended of this SuspendedState.


        :param dynamic_scaling_out_suspended: The dynamic_scaling_out_suspended of this SuspendedState.
        :type dynamic_scaling_out_suspended: bool
        """

        self._dynamic_scaling_out_suspended = dynamic_scaling_out_suspended

    @property
    def scheduled_scaling_suspended(self):
        """Gets the scheduled_scaling_suspended of this SuspendedState.


        :return: The scheduled_scaling_suspended of this SuspendedState.
        :rtype: bool
        """
        return self._scheduled_scaling_suspended

    @scheduled_scaling_suspended.setter
    def scheduled_scaling_suspended(self, scheduled_scaling_suspended):
        """Sets the scheduled_scaling_suspended of this SuspendedState.


        :param scheduled_scaling_suspended: The scheduled_scaling_suspended of this SuspendedState.
        :type scheduled_scaling_suspended: bool
        """

        self._scheduled_scaling_suspended = scheduled_scaling_suspended
