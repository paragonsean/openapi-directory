# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scalable_dimension import ScalableDimension
from openapi_server.models.scalable_target_suspended_state import ScalableTargetSuspendedState
from openapi_server.models.service_namespace import ServiceNamespace
from openapi_server import util


class ScalableTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_namespace: ServiceNamespace=None, resource_id: str=None, scalable_dimension: ScalableDimension=None, min_capacity: int=None, max_capacity: int=None, role_arn: str=None, creation_time: datetime=None, suspended_state: ScalableTargetSuspendedState=None, scalable_target_arn: str=None):
        """ScalableTarget - a model defined in OpenAPI

        :param service_namespace: The service_namespace of this ScalableTarget.
        :param resource_id: The resource_id of this ScalableTarget.
        :param scalable_dimension: The scalable_dimension of this ScalableTarget.
        :param min_capacity: The min_capacity of this ScalableTarget.
        :param max_capacity: The max_capacity of this ScalableTarget.
        :param role_arn: The role_arn of this ScalableTarget.
        :param creation_time: The creation_time of this ScalableTarget.
        :param suspended_state: The suspended_state of this ScalableTarget.
        :param scalable_target_arn: The scalable_target_arn of this ScalableTarget.
        """
        self.openapi_types = {
            'service_namespace': ServiceNamespace,
            'resource_id': str,
            'scalable_dimension': ScalableDimension,
            'min_capacity': int,
            'max_capacity': int,
            'role_arn': str,
            'creation_time': datetime,
            'suspended_state': ScalableTargetSuspendedState,
            'scalable_target_arn': str
        }

        self.attribute_map = {
            'service_namespace': 'ServiceNamespace',
            'resource_id': 'ResourceId',
            'scalable_dimension': 'ScalableDimension',
            'min_capacity': 'MinCapacity',
            'max_capacity': 'MaxCapacity',
            'role_arn': 'RoleARN',
            'creation_time': 'CreationTime',
            'suspended_state': 'SuspendedState',
            'scalable_target_arn': 'ScalableTargetARN'
        }

        self._service_namespace = service_namespace
        self._resource_id = resource_id
        self._scalable_dimension = scalable_dimension
        self._min_capacity = min_capacity
        self._max_capacity = max_capacity
        self._role_arn = role_arn
        self._creation_time = creation_time
        self._suspended_state = suspended_state
        self._scalable_target_arn = scalable_target_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScalableTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScalableTarget of this ScalableTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_namespace(self):
        """Gets the service_namespace of this ScalableTarget.


        :return: The service_namespace of this ScalableTarget.
        :rtype: ServiceNamespace
        """
        return self._service_namespace

    @service_namespace.setter
    def service_namespace(self, service_namespace):
        """Sets the service_namespace of this ScalableTarget.


        :param service_namespace: The service_namespace of this ScalableTarget.
        :type service_namespace: ServiceNamespace
        """
        if service_namespace is None:
            raise ValueError("Invalid value for `service_namespace`, must not be `None`")

        self._service_namespace = service_namespace

    @property
    def resource_id(self):
        """Gets the resource_id of this ScalableTarget.


        :return: The resource_id of this ScalableTarget.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ScalableTarget.


        :param resource_id: The resource_id of this ScalableTarget.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def scalable_dimension(self):
        """Gets the scalable_dimension of this ScalableTarget.


        :return: The scalable_dimension of this ScalableTarget.
        :rtype: ScalableDimension
        """
        return self._scalable_dimension

    @scalable_dimension.setter
    def scalable_dimension(self, scalable_dimension):
        """Sets the scalable_dimension of this ScalableTarget.


        :param scalable_dimension: The scalable_dimension of this ScalableTarget.
        :type scalable_dimension: ScalableDimension
        """
        if scalable_dimension is None:
            raise ValueError("Invalid value for `scalable_dimension`, must not be `None`")

        self._scalable_dimension = scalable_dimension

    @property
    def min_capacity(self):
        """Gets the min_capacity of this ScalableTarget.


        :return: The min_capacity of this ScalableTarget.
        :rtype: int
        """
        return self._min_capacity

    @min_capacity.setter
    def min_capacity(self, min_capacity):
        """Sets the min_capacity of this ScalableTarget.


        :param min_capacity: The min_capacity of this ScalableTarget.
        :type min_capacity: int
        """
        if min_capacity is None:
            raise ValueError("Invalid value for `min_capacity`, must not be `None`")

        self._min_capacity = min_capacity

    @property
    def max_capacity(self):
        """Gets the max_capacity of this ScalableTarget.


        :return: The max_capacity of this ScalableTarget.
        :rtype: int
        """
        return self._max_capacity

    @max_capacity.setter
    def max_capacity(self, max_capacity):
        """Sets the max_capacity of this ScalableTarget.


        :param max_capacity: The max_capacity of this ScalableTarget.
        :type max_capacity: int
        """
        if max_capacity is None:
            raise ValueError("Invalid value for `max_capacity`, must not be `None`")

        self._max_capacity = max_capacity

    @property
    def role_arn(self):
        """Gets the role_arn of this ScalableTarget.


        :return: The role_arn of this ScalableTarget.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this ScalableTarget.


        :param role_arn: The role_arn of this ScalableTarget.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def creation_time(self):
        """Gets the creation_time of this ScalableTarget.


        :return: The creation_time of this ScalableTarget.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ScalableTarget.


        :param creation_time: The creation_time of this ScalableTarget.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def suspended_state(self):
        """Gets the suspended_state of this ScalableTarget.


        :return: The suspended_state of this ScalableTarget.
        :rtype: ScalableTargetSuspendedState
        """
        return self._suspended_state

    @suspended_state.setter
    def suspended_state(self, suspended_state):
        """Sets the suspended_state of this ScalableTarget.


        :param suspended_state: The suspended_state of this ScalableTarget.
        :type suspended_state: ScalableTargetSuspendedState
        """

        self._suspended_state = suspended_state

    @property
    def scalable_target_arn(self):
        """Gets the scalable_target_arn of this ScalableTarget.


        :return: The scalable_target_arn of this ScalableTarget.
        :rtype: str
        """
        return self._scalable_target_arn

    @scalable_target_arn.setter
    def scalable_target_arn(self, scalable_target_arn):
        """Sets the scalable_target_arn of this ScalableTarget.


        :param scalable_target_arn: The scalable_target_arn of this ScalableTarget.
        :type scalable_target_arn: str
        """

        self._scalable_target_arn = scalable_target_arn
