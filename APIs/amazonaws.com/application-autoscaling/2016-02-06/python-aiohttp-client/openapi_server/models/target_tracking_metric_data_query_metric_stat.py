# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target_tracking_metric_stat_metric import TargetTrackingMetricStatMetric
from openapi_server import util


class TargetTrackingMetricDataQueryMetricStat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric: TargetTrackingMetricStatMetric=None, stat: str=None, unit: str=None):
        """TargetTrackingMetricDataQueryMetricStat - a model defined in OpenAPI

        :param metric: The metric of this TargetTrackingMetricDataQueryMetricStat.
        :param stat: The stat of this TargetTrackingMetricDataQueryMetricStat.
        :param unit: The unit of this TargetTrackingMetricDataQueryMetricStat.
        """
        self.openapi_types = {
            'metric': TargetTrackingMetricStatMetric,
            'stat': str,
            'unit': str
        }

        self.attribute_map = {
            'metric': 'Metric',
            'stat': 'Stat',
            'unit': 'Unit'
        }

        self._metric = metric
        self._stat = stat
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetTrackingMetricDataQueryMetricStat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetTrackingMetricDataQuery_MetricStat of this TargetTrackingMetricDataQueryMetricStat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric(self):
        """Gets the metric of this TargetTrackingMetricDataQueryMetricStat.


        :return: The metric of this TargetTrackingMetricDataQueryMetricStat.
        :rtype: TargetTrackingMetricStatMetric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this TargetTrackingMetricDataQueryMetricStat.


        :param metric: The metric of this TargetTrackingMetricDataQueryMetricStat.
        :type metric: TargetTrackingMetricStatMetric
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")

        self._metric = metric

    @property
    def stat(self):
        """Gets the stat of this TargetTrackingMetricDataQueryMetricStat.


        :return: The stat of this TargetTrackingMetricDataQueryMetricStat.
        :rtype: str
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this TargetTrackingMetricDataQueryMetricStat.


        :param stat: The stat of this TargetTrackingMetricDataQueryMetricStat.
        :type stat: str
        """
        if stat is None:
            raise ValueError("Invalid value for `stat`, must not be `None`")

        self._stat = stat

    @property
    def unit(self):
        """Gets the unit of this TargetTrackingMetricDataQueryMetricStat.


        :return: The unit of this TargetTrackingMetricDataQueryMetricStat.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this TargetTrackingMetricDataQueryMetricStat.


        :param unit: The unit of this TargetTrackingMetricDataQueryMetricStat.
        :type unit: str
        """

        self._unit = unit
