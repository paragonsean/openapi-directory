# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_scheduled_action_request_scalable_target_action import PutScheduledActionRequestScalableTargetAction
from openapi_server.models.scalable_dimension import ScalableDimension
from openapi_server.models.service_namespace import ServiceNamespace
from openapi_server import util


class ScheduledAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scheduled_action_name: str=None, scheduled_action_arn: str=None, service_namespace: ServiceNamespace=None, schedule: str=None, timezone: str=None, resource_id: str=None, scalable_dimension: ScalableDimension=None, start_time: datetime=None, end_time: datetime=None, scalable_target_action: PutScheduledActionRequestScalableTargetAction=None, creation_time: datetime=None):
        """ScheduledAction - a model defined in OpenAPI

        :param scheduled_action_name: The scheduled_action_name of this ScheduledAction.
        :param scheduled_action_arn: The scheduled_action_arn of this ScheduledAction.
        :param service_namespace: The service_namespace of this ScheduledAction.
        :param schedule: The schedule of this ScheduledAction.
        :param timezone: The timezone of this ScheduledAction.
        :param resource_id: The resource_id of this ScheduledAction.
        :param scalable_dimension: The scalable_dimension of this ScheduledAction.
        :param start_time: The start_time of this ScheduledAction.
        :param end_time: The end_time of this ScheduledAction.
        :param scalable_target_action: The scalable_target_action of this ScheduledAction.
        :param creation_time: The creation_time of this ScheduledAction.
        """
        self.openapi_types = {
            'scheduled_action_name': str,
            'scheduled_action_arn': str,
            'service_namespace': ServiceNamespace,
            'schedule': str,
            'timezone': str,
            'resource_id': str,
            'scalable_dimension': ScalableDimension,
            'start_time': datetime,
            'end_time': datetime,
            'scalable_target_action': PutScheduledActionRequestScalableTargetAction,
            'creation_time': datetime
        }

        self.attribute_map = {
            'scheduled_action_name': 'ScheduledActionName',
            'scheduled_action_arn': 'ScheduledActionARN',
            'service_namespace': 'ServiceNamespace',
            'schedule': 'Schedule',
            'timezone': 'Timezone',
            'resource_id': 'ResourceId',
            'scalable_dimension': 'ScalableDimension',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'scalable_target_action': 'ScalableTargetAction',
            'creation_time': 'CreationTime'
        }

        self._scheduled_action_name = scheduled_action_name
        self._scheduled_action_arn = scheduled_action_arn
        self._service_namespace = service_namespace
        self._schedule = schedule
        self._timezone = timezone
        self._resource_id = resource_id
        self._scalable_dimension = scalable_dimension
        self._start_time = start_time
        self._end_time = end_time
        self._scalable_target_action = scalable_target_action
        self._creation_time = creation_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduledAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduledAction of this ScheduledAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scheduled_action_name(self):
        """Gets the scheduled_action_name of this ScheduledAction.


        :return: The scheduled_action_name of this ScheduledAction.
        :rtype: str
        """
        return self._scheduled_action_name

    @scheduled_action_name.setter
    def scheduled_action_name(self, scheduled_action_name):
        """Sets the scheduled_action_name of this ScheduledAction.


        :param scheduled_action_name: The scheduled_action_name of this ScheduledAction.
        :type scheduled_action_name: str
        """
        if scheduled_action_name is None:
            raise ValueError("Invalid value for `scheduled_action_name`, must not be `None`")

        self._scheduled_action_name = scheduled_action_name

    @property
    def scheduled_action_arn(self):
        """Gets the scheduled_action_arn of this ScheduledAction.


        :return: The scheduled_action_arn of this ScheduledAction.
        :rtype: str
        """
        return self._scheduled_action_arn

    @scheduled_action_arn.setter
    def scheduled_action_arn(self, scheduled_action_arn):
        """Sets the scheduled_action_arn of this ScheduledAction.


        :param scheduled_action_arn: The scheduled_action_arn of this ScheduledAction.
        :type scheduled_action_arn: str
        """
        if scheduled_action_arn is None:
            raise ValueError("Invalid value for `scheduled_action_arn`, must not be `None`")

        self._scheduled_action_arn = scheduled_action_arn

    @property
    def service_namespace(self):
        """Gets the service_namespace of this ScheduledAction.


        :return: The service_namespace of this ScheduledAction.
        :rtype: ServiceNamespace
        """
        return self._service_namespace

    @service_namespace.setter
    def service_namespace(self, service_namespace):
        """Sets the service_namespace of this ScheduledAction.


        :param service_namespace: The service_namespace of this ScheduledAction.
        :type service_namespace: ServiceNamespace
        """
        if service_namespace is None:
            raise ValueError("Invalid value for `service_namespace`, must not be `None`")

        self._service_namespace = service_namespace

    @property
    def schedule(self):
        """Gets the schedule of this ScheduledAction.


        :return: The schedule of this ScheduledAction.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ScheduledAction.


        :param schedule: The schedule of this ScheduledAction.
        :type schedule: str
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule

    @property
    def timezone(self):
        """Gets the timezone of this ScheduledAction.


        :return: The timezone of this ScheduledAction.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ScheduledAction.


        :param timezone: The timezone of this ScheduledAction.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def resource_id(self):
        """Gets the resource_id of this ScheduledAction.


        :return: The resource_id of this ScheduledAction.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ScheduledAction.


        :param resource_id: The resource_id of this ScheduledAction.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def scalable_dimension(self):
        """Gets the scalable_dimension of this ScheduledAction.


        :return: The scalable_dimension of this ScheduledAction.
        :rtype: ScalableDimension
        """
        return self._scalable_dimension

    @scalable_dimension.setter
    def scalable_dimension(self, scalable_dimension):
        """Sets the scalable_dimension of this ScheduledAction.


        :param scalable_dimension: The scalable_dimension of this ScheduledAction.
        :type scalable_dimension: ScalableDimension
        """

        self._scalable_dimension = scalable_dimension

    @property
    def start_time(self):
        """Gets the start_time of this ScheduledAction.


        :return: The start_time of this ScheduledAction.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ScheduledAction.


        :param start_time: The start_time of this ScheduledAction.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ScheduledAction.


        :return: The end_time of this ScheduledAction.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ScheduledAction.


        :param end_time: The end_time of this ScheduledAction.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def scalable_target_action(self):
        """Gets the scalable_target_action of this ScheduledAction.


        :return: The scalable_target_action of this ScheduledAction.
        :rtype: PutScheduledActionRequestScalableTargetAction
        """
        return self._scalable_target_action

    @scalable_target_action.setter
    def scalable_target_action(self, scalable_target_action):
        """Sets the scalable_target_action of this ScheduledAction.


        :param scalable_target_action: The scalable_target_action of this ScheduledAction.
        :type scalable_target_action: PutScheduledActionRequestScalableTargetAction
        """

        self._scalable_target_action = scalable_target_action

    @property
    def creation_time(self):
        """Gets the creation_time of this ScheduledAction.


        :return: The creation_time of this ScheduledAction.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ScheduledAction.


        :param creation_time: The creation_time of this ScheduledAction.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time
