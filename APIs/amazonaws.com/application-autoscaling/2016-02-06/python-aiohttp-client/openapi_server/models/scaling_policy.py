# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_type import PolicyType
from openapi_server.models.scalable_dimension import ScalableDimension
from openapi_server.models.scaling_policy_step_scaling_policy_configuration import ScalingPolicyStepScalingPolicyConfiguration
from openapi_server.models.scaling_policy_target_tracking_scaling_policy_configuration import ScalingPolicyTargetTrackingScalingPolicyConfiguration
from openapi_server.models.service_namespace import ServiceNamespace
from openapi_server import util


class ScalingPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_arn: str=None, policy_name: str=None, service_namespace: ServiceNamespace=None, resource_id: str=None, scalable_dimension: ScalableDimension=None, policy_type: PolicyType=None, step_scaling_policy_configuration: ScalingPolicyStepScalingPolicyConfiguration=None, target_tracking_scaling_policy_configuration: ScalingPolicyTargetTrackingScalingPolicyConfiguration=None, alarms: List=None, creation_time: datetime=None):
        """ScalingPolicy - a model defined in OpenAPI

        :param policy_arn: The policy_arn of this ScalingPolicy.
        :param policy_name: The policy_name of this ScalingPolicy.
        :param service_namespace: The service_namespace of this ScalingPolicy.
        :param resource_id: The resource_id of this ScalingPolicy.
        :param scalable_dimension: The scalable_dimension of this ScalingPolicy.
        :param policy_type: The policy_type of this ScalingPolicy.
        :param step_scaling_policy_configuration: The step_scaling_policy_configuration of this ScalingPolicy.
        :param target_tracking_scaling_policy_configuration: The target_tracking_scaling_policy_configuration of this ScalingPolicy.
        :param alarms: The alarms of this ScalingPolicy.
        :param creation_time: The creation_time of this ScalingPolicy.
        """
        self.openapi_types = {
            'policy_arn': str,
            'policy_name': str,
            'service_namespace': ServiceNamespace,
            'resource_id': str,
            'scalable_dimension': ScalableDimension,
            'policy_type': PolicyType,
            'step_scaling_policy_configuration': ScalingPolicyStepScalingPolicyConfiguration,
            'target_tracking_scaling_policy_configuration': ScalingPolicyTargetTrackingScalingPolicyConfiguration,
            'alarms': List,
            'creation_time': datetime
        }

        self.attribute_map = {
            'policy_arn': 'PolicyARN',
            'policy_name': 'PolicyName',
            'service_namespace': 'ServiceNamespace',
            'resource_id': 'ResourceId',
            'scalable_dimension': 'ScalableDimension',
            'policy_type': 'PolicyType',
            'step_scaling_policy_configuration': 'StepScalingPolicyConfiguration',
            'target_tracking_scaling_policy_configuration': 'TargetTrackingScalingPolicyConfiguration',
            'alarms': 'Alarms',
            'creation_time': 'CreationTime'
        }

        self._policy_arn = policy_arn
        self._policy_name = policy_name
        self._service_namespace = service_namespace
        self._resource_id = resource_id
        self._scalable_dimension = scalable_dimension
        self._policy_type = policy_type
        self._step_scaling_policy_configuration = step_scaling_policy_configuration
        self._target_tracking_scaling_policy_configuration = target_tracking_scaling_policy_configuration
        self._alarms = alarms
        self._creation_time = creation_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScalingPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScalingPolicy of this ScalingPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_arn(self):
        """Gets the policy_arn of this ScalingPolicy.


        :return: The policy_arn of this ScalingPolicy.
        :rtype: str
        """
        return self._policy_arn

    @policy_arn.setter
    def policy_arn(self, policy_arn):
        """Sets the policy_arn of this ScalingPolicy.


        :param policy_arn: The policy_arn of this ScalingPolicy.
        :type policy_arn: str
        """
        if policy_arn is None:
            raise ValueError("Invalid value for `policy_arn`, must not be `None`")

        self._policy_arn = policy_arn

    @property
    def policy_name(self):
        """Gets the policy_name of this ScalingPolicy.


        :return: The policy_name of this ScalingPolicy.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this ScalingPolicy.


        :param policy_name: The policy_name of this ScalingPolicy.
        :type policy_name: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")

        self._policy_name = policy_name

    @property
    def service_namespace(self):
        """Gets the service_namespace of this ScalingPolicy.


        :return: The service_namespace of this ScalingPolicy.
        :rtype: ServiceNamespace
        """
        return self._service_namespace

    @service_namespace.setter
    def service_namespace(self, service_namespace):
        """Sets the service_namespace of this ScalingPolicy.


        :param service_namespace: The service_namespace of this ScalingPolicy.
        :type service_namespace: ServiceNamespace
        """
        if service_namespace is None:
            raise ValueError("Invalid value for `service_namespace`, must not be `None`")

        self._service_namespace = service_namespace

    @property
    def resource_id(self):
        """Gets the resource_id of this ScalingPolicy.


        :return: The resource_id of this ScalingPolicy.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ScalingPolicy.


        :param resource_id: The resource_id of this ScalingPolicy.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def scalable_dimension(self):
        """Gets the scalable_dimension of this ScalingPolicy.


        :return: The scalable_dimension of this ScalingPolicy.
        :rtype: ScalableDimension
        """
        return self._scalable_dimension

    @scalable_dimension.setter
    def scalable_dimension(self, scalable_dimension):
        """Sets the scalable_dimension of this ScalingPolicy.


        :param scalable_dimension: The scalable_dimension of this ScalingPolicy.
        :type scalable_dimension: ScalableDimension
        """
        if scalable_dimension is None:
            raise ValueError("Invalid value for `scalable_dimension`, must not be `None`")

        self._scalable_dimension = scalable_dimension

    @property
    def policy_type(self):
        """Gets the policy_type of this ScalingPolicy.


        :return: The policy_type of this ScalingPolicy.
        :rtype: PolicyType
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this ScalingPolicy.


        :param policy_type: The policy_type of this ScalingPolicy.
        :type policy_type: PolicyType
        """
        if policy_type is None:
            raise ValueError("Invalid value for `policy_type`, must not be `None`")

        self._policy_type = policy_type

    @property
    def step_scaling_policy_configuration(self):
        """Gets the step_scaling_policy_configuration of this ScalingPolicy.


        :return: The step_scaling_policy_configuration of this ScalingPolicy.
        :rtype: ScalingPolicyStepScalingPolicyConfiguration
        """
        return self._step_scaling_policy_configuration

    @step_scaling_policy_configuration.setter
    def step_scaling_policy_configuration(self, step_scaling_policy_configuration):
        """Sets the step_scaling_policy_configuration of this ScalingPolicy.


        :param step_scaling_policy_configuration: The step_scaling_policy_configuration of this ScalingPolicy.
        :type step_scaling_policy_configuration: ScalingPolicyStepScalingPolicyConfiguration
        """

        self._step_scaling_policy_configuration = step_scaling_policy_configuration

    @property
    def target_tracking_scaling_policy_configuration(self):
        """Gets the target_tracking_scaling_policy_configuration of this ScalingPolicy.


        :return: The target_tracking_scaling_policy_configuration of this ScalingPolicy.
        :rtype: ScalingPolicyTargetTrackingScalingPolicyConfiguration
        """
        return self._target_tracking_scaling_policy_configuration

    @target_tracking_scaling_policy_configuration.setter
    def target_tracking_scaling_policy_configuration(self, target_tracking_scaling_policy_configuration):
        """Sets the target_tracking_scaling_policy_configuration of this ScalingPolicy.


        :param target_tracking_scaling_policy_configuration: The target_tracking_scaling_policy_configuration of this ScalingPolicy.
        :type target_tracking_scaling_policy_configuration: ScalingPolicyTargetTrackingScalingPolicyConfiguration
        """

        self._target_tracking_scaling_policy_configuration = target_tracking_scaling_policy_configuration

    @property
    def alarms(self):
        """Gets the alarms of this ScalingPolicy.


        :return: The alarms of this ScalingPolicy.
        :rtype: List
        """
        return self._alarms

    @alarms.setter
    def alarms(self, alarms):
        """Sets the alarms of this ScalingPolicy.


        :param alarms: The alarms of this ScalingPolicy.
        :type alarms: List
        """

        self._alarms = alarms

    @property
    def creation_time(self):
        """Gets the creation_time of this ScalingPolicy.


        :return: The creation_time of this ScalingPolicy.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ScalingPolicy.


        :param creation_time: The creation_time of this ScalingPolicy.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time
