# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scalable_dimension import ScalableDimension
from openapi_server.models.scaling_activity_status_code import ScalingActivityStatusCode
from openapi_server.models.service_namespace import ServiceNamespace
from openapi_server import util


class ScalingActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_id: str=None, service_namespace: ServiceNamespace=None, resource_id: str=None, scalable_dimension: ScalableDimension=None, description: str=None, cause: str=None, start_time: datetime=None, end_time: datetime=None, status_code: ScalingActivityStatusCode=None, status_message: str=None, details: str=None, not_scaled_reasons: List=None):
        """ScalingActivity - a model defined in OpenAPI

        :param activity_id: The activity_id of this ScalingActivity.
        :param service_namespace: The service_namespace of this ScalingActivity.
        :param resource_id: The resource_id of this ScalingActivity.
        :param scalable_dimension: The scalable_dimension of this ScalingActivity.
        :param description: The description of this ScalingActivity.
        :param cause: The cause of this ScalingActivity.
        :param start_time: The start_time of this ScalingActivity.
        :param end_time: The end_time of this ScalingActivity.
        :param status_code: The status_code of this ScalingActivity.
        :param status_message: The status_message of this ScalingActivity.
        :param details: The details of this ScalingActivity.
        :param not_scaled_reasons: The not_scaled_reasons of this ScalingActivity.
        """
        self.openapi_types = {
            'activity_id': str,
            'service_namespace': ServiceNamespace,
            'resource_id': str,
            'scalable_dimension': ScalableDimension,
            'description': str,
            'cause': str,
            'start_time': datetime,
            'end_time': datetime,
            'status_code': ScalingActivityStatusCode,
            'status_message': str,
            'details': str,
            'not_scaled_reasons': List
        }

        self.attribute_map = {
            'activity_id': 'ActivityId',
            'service_namespace': 'ServiceNamespace',
            'resource_id': 'ResourceId',
            'scalable_dimension': 'ScalableDimension',
            'description': 'Description',
            'cause': 'Cause',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'status_code': 'StatusCode',
            'status_message': 'StatusMessage',
            'details': 'Details',
            'not_scaled_reasons': 'NotScaledReasons'
        }

        self._activity_id = activity_id
        self._service_namespace = service_namespace
        self._resource_id = resource_id
        self._scalable_dimension = scalable_dimension
        self._description = description
        self._cause = cause
        self._start_time = start_time
        self._end_time = end_time
        self._status_code = status_code
        self._status_message = status_message
        self._details = details
        self._not_scaled_reasons = not_scaled_reasons

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScalingActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScalingActivity of this ScalingActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_id(self):
        """Gets the activity_id of this ScalingActivity.


        :return: The activity_id of this ScalingActivity.
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this ScalingActivity.


        :param activity_id: The activity_id of this ScalingActivity.
        :type activity_id: str
        """
        if activity_id is None:
            raise ValueError("Invalid value for `activity_id`, must not be `None`")

        self._activity_id = activity_id

    @property
    def service_namespace(self):
        """Gets the service_namespace of this ScalingActivity.


        :return: The service_namespace of this ScalingActivity.
        :rtype: ServiceNamespace
        """
        return self._service_namespace

    @service_namespace.setter
    def service_namespace(self, service_namespace):
        """Sets the service_namespace of this ScalingActivity.


        :param service_namespace: The service_namespace of this ScalingActivity.
        :type service_namespace: ServiceNamespace
        """
        if service_namespace is None:
            raise ValueError("Invalid value for `service_namespace`, must not be `None`")

        self._service_namespace = service_namespace

    @property
    def resource_id(self):
        """Gets the resource_id of this ScalingActivity.


        :return: The resource_id of this ScalingActivity.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ScalingActivity.


        :param resource_id: The resource_id of this ScalingActivity.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def scalable_dimension(self):
        """Gets the scalable_dimension of this ScalingActivity.


        :return: The scalable_dimension of this ScalingActivity.
        :rtype: ScalableDimension
        """
        return self._scalable_dimension

    @scalable_dimension.setter
    def scalable_dimension(self, scalable_dimension):
        """Sets the scalable_dimension of this ScalingActivity.


        :param scalable_dimension: The scalable_dimension of this ScalingActivity.
        :type scalable_dimension: ScalableDimension
        """
        if scalable_dimension is None:
            raise ValueError("Invalid value for `scalable_dimension`, must not be `None`")

        self._scalable_dimension = scalable_dimension

    @property
    def description(self):
        """Gets the description of this ScalingActivity.


        :return: The description of this ScalingActivity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScalingActivity.


        :param description: The description of this ScalingActivity.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def cause(self):
        """Gets the cause of this ScalingActivity.


        :return: The cause of this ScalingActivity.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this ScalingActivity.


        :param cause: The cause of this ScalingActivity.
        :type cause: str
        """
        if cause is None:
            raise ValueError("Invalid value for `cause`, must not be `None`")

        self._cause = cause

    @property
    def start_time(self):
        """Gets the start_time of this ScalingActivity.


        :return: The start_time of this ScalingActivity.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ScalingActivity.


        :param start_time: The start_time of this ScalingActivity.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ScalingActivity.


        :return: The end_time of this ScalingActivity.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ScalingActivity.


        :param end_time: The end_time of this ScalingActivity.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def status_code(self):
        """Gets the status_code of this ScalingActivity.


        :return: The status_code of this ScalingActivity.
        :rtype: ScalingActivityStatusCode
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this ScalingActivity.


        :param status_code: The status_code of this ScalingActivity.
        :type status_code: ScalingActivityStatusCode
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def status_message(self):
        """Gets the status_message of this ScalingActivity.


        :return: The status_message of this ScalingActivity.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ScalingActivity.


        :param status_message: The status_message of this ScalingActivity.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def details(self):
        """Gets the details of this ScalingActivity.


        :return: The details of this ScalingActivity.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ScalingActivity.


        :param details: The details of this ScalingActivity.
        :type details: str
        """

        self._details = details

    @property
    def not_scaled_reasons(self):
        """Gets the not_scaled_reasons of this ScalingActivity.


        :return: The not_scaled_reasons of this ScalingActivity.
        :rtype: List
        """
        return self._not_scaled_reasons

    @not_scaled_reasons.setter
    def not_scaled_reasons(self, not_scaled_reasons):
        """Sets the not_scaled_reasons of this ScalingActivity.


        :param not_scaled_reasons: The not_scaled_reasons of this ScalingActivity.
        :type not_scaled_reasons: List
        """

        self._not_scaled_reasons = not_scaled_reasons
