# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchDeleteWorldsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, worlds: List[str]=None):
        """BatchDeleteWorldsRequest - a model defined in OpenAPI

        :param worlds: The worlds of this BatchDeleteWorldsRequest.
        """
        self.openapi_types = {
            'worlds': List[str]
        }

        self.attribute_map = {
            'worlds': 'worlds'
        }

        self._worlds = worlds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchDeleteWorldsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchDeleteWorlds_request of this BatchDeleteWorldsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def worlds(self):
        """Gets the worlds of this BatchDeleteWorldsRequest.

        A list of Amazon Resource Names (arns) that correspond to worlds to delete.

        :return: The worlds of this BatchDeleteWorldsRequest.
        :rtype: List[str]
        """
        return self._worlds

    @worlds.setter
    def worlds(self, worlds):
        """Sets the worlds of this BatchDeleteWorldsRequest.

        A list of Amazon Resource Names (arns) that correspond to worlds to delete.

        :param worlds: The worlds of this BatchDeleteWorldsRequest.
        :type worlds: List[str]
        """
        if worlds is None:
            raise ValueError("Invalid value for `worlds`, must not be `None`")
        if worlds is not None and len(worlds) > 100:
            raise ValueError("Invalid value for `worlds`, number of items must be less than or equal to `100`")
        if worlds is not None and len(worlds) < 1:
            raise ValueError("Invalid value for `worlds`, number of items must be greater than or equal to `1`")

        self._worlds = worlds
