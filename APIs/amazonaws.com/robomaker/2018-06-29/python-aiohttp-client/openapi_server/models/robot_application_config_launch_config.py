# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.launch_config_port_forwarding_config import LaunchConfigPortForwardingConfig
from openapi_server import util


class RobotApplicationConfigLaunchConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, package_name: str=None, launch_file: str=None, environment_variables: Dict=None, port_forwarding_config: LaunchConfigPortForwardingConfig=None, stream_ui: bool=None, command: List=None):
        """RobotApplicationConfigLaunchConfig - a model defined in OpenAPI

        :param package_name: The package_name of this RobotApplicationConfigLaunchConfig.
        :param launch_file: The launch_file of this RobotApplicationConfigLaunchConfig.
        :param environment_variables: The environment_variables of this RobotApplicationConfigLaunchConfig.
        :param port_forwarding_config: The port_forwarding_config of this RobotApplicationConfigLaunchConfig.
        :param stream_ui: The stream_ui of this RobotApplicationConfigLaunchConfig.
        :param command: The command of this RobotApplicationConfigLaunchConfig.
        """
        self.openapi_types = {
            'package_name': str,
            'launch_file': str,
            'environment_variables': Dict,
            'port_forwarding_config': LaunchConfigPortForwardingConfig,
            'stream_ui': bool,
            'command': List
        }

        self.attribute_map = {
            'package_name': 'packageName',
            'launch_file': 'launchFile',
            'environment_variables': 'environmentVariables',
            'port_forwarding_config': 'portForwardingConfig',
            'stream_ui': 'streamUI',
            'command': 'command'
        }

        self._package_name = package_name
        self._launch_file = launch_file
        self._environment_variables = environment_variables
        self._port_forwarding_config = port_forwarding_config
        self._stream_ui = stream_ui
        self._command = command

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RobotApplicationConfigLaunchConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RobotApplicationConfig_launchConfig of this RobotApplicationConfigLaunchConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def package_name(self):
        """Gets the package_name of this RobotApplicationConfigLaunchConfig.


        :return: The package_name of this RobotApplicationConfigLaunchConfig.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this RobotApplicationConfigLaunchConfig.


        :param package_name: The package_name of this RobotApplicationConfigLaunchConfig.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def launch_file(self):
        """Gets the launch_file of this RobotApplicationConfigLaunchConfig.


        :return: The launch_file of this RobotApplicationConfigLaunchConfig.
        :rtype: str
        """
        return self._launch_file

    @launch_file.setter
    def launch_file(self, launch_file):
        """Sets the launch_file of this RobotApplicationConfigLaunchConfig.


        :param launch_file: The launch_file of this RobotApplicationConfigLaunchConfig.
        :type launch_file: str
        """

        self._launch_file = launch_file

    @property
    def environment_variables(self):
        """Gets the environment_variables of this RobotApplicationConfigLaunchConfig.


        :return: The environment_variables of this RobotApplicationConfigLaunchConfig.
        :rtype: Dict
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this RobotApplicationConfigLaunchConfig.


        :param environment_variables: The environment_variables of this RobotApplicationConfigLaunchConfig.
        :type environment_variables: Dict
        """

        self._environment_variables = environment_variables

    @property
    def port_forwarding_config(self):
        """Gets the port_forwarding_config of this RobotApplicationConfigLaunchConfig.


        :return: The port_forwarding_config of this RobotApplicationConfigLaunchConfig.
        :rtype: LaunchConfigPortForwardingConfig
        """
        return self._port_forwarding_config

    @port_forwarding_config.setter
    def port_forwarding_config(self, port_forwarding_config):
        """Sets the port_forwarding_config of this RobotApplicationConfigLaunchConfig.


        :param port_forwarding_config: The port_forwarding_config of this RobotApplicationConfigLaunchConfig.
        :type port_forwarding_config: LaunchConfigPortForwardingConfig
        """

        self._port_forwarding_config = port_forwarding_config

    @property
    def stream_ui(self):
        """Gets the stream_ui of this RobotApplicationConfigLaunchConfig.


        :return: The stream_ui of this RobotApplicationConfigLaunchConfig.
        :rtype: bool
        """
        return self._stream_ui

    @stream_ui.setter
    def stream_ui(self, stream_ui):
        """Sets the stream_ui of this RobotApplicationConfigLaunchConfig.


        :param stream_ui: The stream_ui of this RobotApplicationConfigLaunchConfig.
        :type stream_ui: bool
        """

        self._stream_ui = stream_ui

    @property
    def command(self):
        """Gets the command of this RobotApplicationConfigLaunchConfig.


        :return: The command of this RobotApplicationConfigLaunchConfig.
        :rtype: List
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this RobotApplicationConfigLaunchConfig.


        :param command: The command of this RobotApplicationConfigLaunchConfig.
        :type command: List
        """

        self._command = command
