# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_deployment_job_request_deployment_config import CreateDeploymentJobRequestDeploymentConfig
from openapi_server.models.deployment_application_config import DeploymentApplicationConfig
import re
from openapi_server import util


class CreateDeploymentJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_config: CreateDeploymentJobRequestDeploymentConfig=None, client_request_token: str=None, fleet: str=None, deployment_application_configs: List[DeploymentApplicationConfig]=None, tags: Dict[str, str]=None):
        """CreateDeploymentJobRequest - a model defined in OpenAPI

        :param deployment_config: The deployment_config of this CreateDeploymentJobRequest.
        :param client_request_token: The client_request_token of this CreateDeploymentJobRequest.
        :param fleet: The fleet of this CreateDeploymentJobRequest.
        :param deployment_application_configs: The deployment_application_configs of this CreateDeploymentJobRequest.
        :param tags: The tags of this CreateDeploymentJobRequest.
        """
        self.openapi_types = {
            'deployment_config': CreateDeploymentJobRequestDeploymentConfig,
            'client_request_token': str,
            'fleet': str,
            'deployment_application_configs': List[DeploymentApplicationConfig],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'deployment_config': 'deploymentConfig',
            'client_request_token': 'clientRequestToken',
            'fleet': 'fleet',
            'deployment_application_configs': 'deploymentApplicationConfigs',
            'tags': 'tags'
        }

        self._deployment_config = deployment_config
        self._client_request_token = client_request_token
        self._fleet = fleet
        self._deployment_application_configs = deployment_application_configs
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDeploymentJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDeploymentJob_request of this CreateDeploymentJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_config(self):
        """Gets the deployment_config of this CreateDeploymentJobRequest.


        :return: The deployment_config of this CreateDeploymentJobRequest.
        :rtype: CreateDeploymentJobRequestDeploymentConfig
        """
        return self._deployment_config

    @deployment_config.setter
    def deployment_config(self, deployment_config):
        """Sets the deployment_config of this CreateDeploymentJobRequest.


        :param deployment_config: The deployment_config of this CreateDeploymentJobRequest.
        :type deployment_config: CreateDeploymentJobRequestDeploymentConfig
        """

        self._deployment_config = deployment_config

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateDeploymentJobRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this CreateDeploymentJobRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateDeploymentJobRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this CreateDeploymentJobRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[a-zA-Z0-9_\-=]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[a-zA-Z0-9_\-=]*/`")

        self._client_request_token = client_request_token

    @property
    def fleet(self):
        """Gets the fleet of this CreateDeploymentJobRequest.

        The Amazon Resource Name (ARN) of the fleet to deploy.

        :return: The fleet of this CreateDeploymentJobRequest.
        :rtype: str
        """
        return self._fleet

    @fleet.setter
    def fleet(self, fleet):
        """Sets the fleet of this CreateDeploymentJobRequest.

        The Amazon Resource Name (ARN) of the fleet to deploy.

        :param fleet: The fleet of this CreateDeploymentJobRequest.
        :type fleet: str
        """
        if fleet is None:
            raise ValueError("Invalid value for `fleet`, must not be `None`")
        if fleet is not None and len(fleet) > 1224:
            raise ValueError("Invalid value for `fleet`, length must be less than or equal to `1224`")
        if fleet is not None and len(fleet) < 1:
            raise ValueError("Invalid value for `fleet`, length must be greater than or equal to `1`")
        if fleet is not None and not re.search(r'arn:.*', fleet):
            raise ValueError("Invalid value for `fleet`, must be a follow pattern or equal to `/arn:.*/`")

        self._fleet = fleet

    @property
    def deployment_application_configs(self):
        """Gets the deployment_application_configs of this CreateDeploymentJobRequest.

        The deployment application configuration.

        :return: The deployment_application_configs of this CreateDeploymentJobRequest.
        :rtype: List[DeploymentApplicationConfig]
        """
        return self._deployment_application_configs

    @deployment_application_configs.setter
    def deployment_application_configs(self, deployment_application_configs):
        """Sets the deployment_application_configs of this CreateDeploymentJobRequest.

        The deployment application configuration.

        :param deployment_application_configs: The deployment_application_configs of this CreateDeploymentJobRequest.
        :type deployment_application_configs: List[DeploymentApplicationConfig]
        """
        if deployment_application_configs is None:
            raise ValueError("Invalid value for `deployment_application_configs`, must not be `None`")
        if deployment_application_configs is not None and len(deployment_application_configs) > 1:
            raise ValueError("Invalid value for `deployment_application_configs`, number of items must be less than or equal to `1`")
        if deployment_application_configs is not None and len(deployment_application_configs) < 1:
            raise ValueError("Invalid value for `deployment_application_configs`, number of items must be greater than or equal to `1`")

        self._deployment_application_configs = deployment_application_configs

    @property
    def tags(self):
        """Gets the tags of this CreateDeploymentJobRequest.

        A map that contains tag keys and tag values that are attached to the deployment job.

        :return: The tags of this CreateDeploymentJobRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDeploymentJobRequest.

        A map that contains tag keys and tag values that are attached to the deployment job.

        :param tags: The tags of this CreateDeploymentJobRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
