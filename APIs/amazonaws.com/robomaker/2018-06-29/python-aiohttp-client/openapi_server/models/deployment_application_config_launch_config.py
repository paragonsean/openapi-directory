# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeploymentApplicationConfigLaunchConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, package_name: str=None, pre_launch_file: str=None, launch_file: str=None, post_launch_file: str=None, environment_variables: Dict=None):
        """DeploymentApplicationConfigLaunchConfig - a model defined in OpenAPI

        :param package_name: The package_name of this DeploymentApplicationConfigLaunchConfig.
        :param pre_launch_file: The pre_launch_file of this DeploymentApplicationConfigLaunchConfig.
        :param launch_file: The launch_file of this DeploymentApplicationConfigLaunchConfig.
        :param post_launch_file: The post_launch_file of this DeploymentApplicationConfigLaunchConfig.
        :param environment_variables: The environment_variables of this DeploymentApplicationConfigLaunchConfig.
        """
        self.openapi_types = {
            'package_name': str,
            'pre_launch_file': str,
            'launch_file': str,
            'post_launch_file': str,
            'environment_variables': Dict
        }

        self.attribute_map = {
            'package_name': 'packageName',
            'pre_launch_file': 'preLaunchFile',
            'launch_file': 'launchFile',
            'post_launch_file': 'postLaunchFile',
            'environment_variables': 'environmentVariables'
        }

        self._package_name = package_name
        self._pre_launch_file = pre_launch_file
        self._launch_file = launch_file
        self._post_launch_file = post_launch_file
        self._environment_variables = environment_variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentApplicationConfigLaunchConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentApplicationConfig_launchConfig of this DeploymentApplicationConfigLaunchConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def package_name(self):
        """Gets the package_name of this DeploymentApplicationConfigLaunchConfig.


        :return: The package_name of this DeploymentApplicationConfigLaunchConfig.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this DeploymentApplicationConfigLaunchConfig.


        :param package_name: The package_name of this DeploymentApplicationConfigLaunchConfig.
        :type package_name: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")

        self._package_name = package_name

    @property
    def pre_launch_file(self):
        """Gets the pre_launch_file of this DeploymentApplicationConfigLaunchConfig.


        :return: The pre_launch_file of this DeploymentApplicationConfigLaunchConfig.
        :rtype: str
        """
        return self._pre_launch_file

    @pre_launch_file.setter
    def pre_launch_file(self, pre_launch_file):
        """Sets the pre_launch_file of this DeploymentApplicationConfigLaunchConfig.


        :param pre_launch_file: The pre_launch_file of this DeploymentApplicationConfigLaunchConfig.
        :type pre_launch_file: str
        """

        self._pre_launch_file = pre_launch_file

    @property
    def launch_file(self):
        """Gets the launch_file of this DeploymentApplicationConfigLaunchConfig.


        :return: The launch_file of this DeploymentApplicationConfigLaunchConfig.
        :rtype: str
        """
        return self._launch_file

    @launch_file.setter
    def launch_file(self, launch_file):
        """Sets the launch_file of this DeploymentApplicationConfigLaunchConfig.


        :param launch_file: The launch_file of this DeploymentApplicationConfigLaunchConfig.
        :type launch_file: str
        """
        if launch_file is None:
            raise ValueError("Invalid value for `launch_file`, must not be `None`")

        self._launch_file = launch_file

    @property
    def post_launch_file(self):
        """Gets the post_launch_file of this DeploymentApplicationConfigLaunchConfig.


        :return: The post_launch_file of this DeploymentApplicationConfigLaunchConfig.
        :rtype: str
        """
        return self._post_launch_file

    @post_launch_file.setter
    def post_launch_file(self, post_launch_file):
        """Sets the post_launch_file of this DeploymentApplicationConfigLaunchConfig.


        :param post_launch_file: The post_launch_file of this DeploymentApplicationConfigLaunchConfig.
        :type post_launch_file: str
        """

        self._post_launch_file = post_launch_file

    @property
    def environment_variables(self):
        """Gets the environment_variables of this DeploymentApplicationConfigLaunchConfig.


        :return: The environment_variables of this DeploymentApplicationConfigLaunchConfig.
        :rtype: Dict
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this DeploymentApplicationConfigLaunchConfig.


        :param environment_variables: The environment_variables of this DeploymentApplicationConfigLaunchConfig.
        :type environment_variables: Dict
        """

        self._environment_variables = environment_variables
