# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DescribeSimulationJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job: str=None):
        """DescribeSimulationJobRequest - a model defined in OpenAPI

        :param job: The job of this DescribeSimulationJobRequest.
        """
        self.openapi_types = {
            'job': str
        }

        self.attribute_map = {
            'job': 'job'
        }

        self._job = job

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeSimulationJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeSimulationJob_request of this DescribeSimulationJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job(self):
        """Gets the job of this DescribeSimulationJobRequest.

        The Amazon Resource Name (ARN) of the simulation job to be described.

        :return: The job of this DescribeSimulationJobRequest.
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this DescribeSimulationJobRequest.

        The Amazon Resource Name (ARN) of the simulation job to be described.

        :param job: The job of this DescribeSimulationJobRequest.
        :type job: str
        """
        if job is None:
            raise ValueError("Invalid value for `job`, must not be `None`")
        if job is not None and len(job) > 1224:
            raise ValueError("Invalid value for `job`, length must be less than or equal to `1224`")
        if job is not None and len(job) < 1:
            raise ValueError("Invalid value for `job`, length must be greater than or equal to `1`")
        if job is not None and not re.search(r'arn:.*', job):
            raise ValueError("Invalid value for `job`, must be a follow pattern or equal to `/arn:.*/`")

        self._job = job
