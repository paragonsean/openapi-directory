# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_world_template_request_template_location import CreateWorldTemplateRequestTemplateLocation
import re
from openapi_server import util


class CreateWorldTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_request_token: str=None, name: str=None, template_body: str=None, template_location: CreateWorldTemplateRequestTemplateLocation=None, tags: Dict[str, str]=None):
        """CreateWorldTemplateRequest - a model defined in OpenAPI

        :param client_request_token: The client_request_token of this CreateWorldTemplateRequest.
        :param name: The name of this CreateWorldTemplateRequest.
        :param template_body: The template_body of this CreateWorldTemplateRequest.
        :param template_location: The template_location of this CreateWorldTemplateRequest.
        :param tags: The tags of this CreateWorldTemplateRequest.
        """
        self.openapi_types = {
            'client_request_token': str,
            'name': str,
            'template_body': str,
            'template_location': CreateWorldTemplateRequestTemplateLocation,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_request_token': 'clientRequestToken',
            'name': 'name',
            'template_body': 'templateBody',
            'template_location': 'templateLocation',
            'tags': 'tags'
        }

        self._client_request_token = client_request_token
        self._name = name
        self._template_body = template_body
        self._template_location = template_location
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorldTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWorldTemplate_request of this CreateWorldTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateWorldTemplateRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this CreateWorldTemplateRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateWorldTemplateRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this CreateWorldTemplateRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[a-zA-Z0-9_\-=]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[a-zA-Z0-9_\-=]*/`")

        self._client_request_token = client_request_token

    @property
    def name(self):
        """Gets the name of this CreateWorldTemplateRequest.

        The name of the world template.

        :return: The name of this CreateWorldTemplateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWorldTemplateRequest.

        The name of the world template.

        :param name: The name of this CreateWorldTemplateRequest.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'.*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/.*/`")

        self._name = name

    @property
    def template_body(self):
        """Gets the template_body of this CreateWorldTemplateRequest.

        The world template body.

        :return: The template_body of this CreateWorldTemplateRequest.
        :rtype: str
        """
        return self._template_body

    @template_body.setter
    def template_body(self, template_body):
        """Sets the template_body of this CreateWorldTemplateRequest.

        The world template body.

        :param template_body: The template_body of this CreateWorldTemplateRequest.
        :type template_body: str
        """
        if template_body is not None and len(template_body) > 262144:
            raise ValueError("Invalid value for `template_body`, length must be less than or equal to `262144`")
        if template_body is not None and len(template_body) < 1:
            raise ValueError("Invalid value for `template_body`, length must be greater than or equal to `1`")
        if template_body is not None and not re.search(r'[\S\s]+', template_body):
            raise ValueError("Invalid value for `template_body`, must be a follow pattern or equal to `/[\S\s]+/`")

        self._template_body = template_body

    @property
    def template_location(self):
        """Gets the template_location of this CreateWorldTemplateRequest.


        :return: The template_location of this CreateWorldTemplateRequest.
        :rtype: CreateWorldTemplateRequestTemplateLocation
        """
        return self._template_location

    @template_location.setter
    def template_location(self, template_location):
        """Sets the template_location of this CreateWorldTemplateRequest.


        :param template_location: The template_location of this CreateWorldTemplateRequest.
        :type template_location: CreateWorldTemplateRequestTemplateLocation
        """

        self._template_location = template_location

    @property
    def tags(self):
        """Gets the tags of this CreateWorldTemplateRequest.

        A map that contains tag keys and tag values that are attached to the world template.

        :return: The tags of this CreateWorldTemplateRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateWorldTemplateRequest.

        A map that contains tag keys and tag values that are attached to the world template.

        :param tags: The tags of this CreateWorldTemplateRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
