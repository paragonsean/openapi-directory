# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_simulation_job_request_output_location import CreateSimulationJobRequestOutputLocation
import re
from openapi_server import util


class CreateWorldExportJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_request_token: str=None, worlds: List[str]=None, output_location: CreateSimulationJobRequestOutputLocation=None, iam_role: str=None, tags: Dict[str, str]=None):
        """CreateWorldExportJobRequest - a model defined in OpenAPI

        :param client_request_token: The client_request_token of this CreateWorldExportJobRequest.
        :param worlds: The worlds of this CreateWorldExportJobRequest.
        :param output_location: The output_location of this CreateWorldExportJobRequest.
        :param iam_role: The iam_role of this CreateWorldExportJobRequest.
        :param tags: The tags of this CreateWorldExportJobRequest.
        """
        self.openapi_types = {
            'client_request_token': str,
            'worlds': List[str],
            'output_location': CreateSimulationJobRequestOutputLocation,
            'iam_role': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_request_token': 'clientRequestToken',
            'worlds': 'worlds',
            'output_location': 'outputLocation',
            'iam_role': 'iamRole',
            'tags': 'tags'
        }

        self._client_request_token = client_request_token
        self._worlds = worlds
        self._output_location = output_location
        self._iam_role = iam_role
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorldExportJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWorldExportJob_request of this CreateWorldExportJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateWorldExportJobRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this CreateWorldExportJobRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateWorldExportJobRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this CreateWorldExportJobRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[a-zA-Z0-9_\-=]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[a-zA-Z0-9_\-=]*/`")

        self._client_request_token = client_request_token

    @property
    def worlds(self):
        """Gets the worlds of this CreateWorldExportJobRequest.

        A list of Amazon Resource Names (arns) that correspond to worlds to export.

        :return: The worlds of this CreateWorldExportJobRequest.
        :rtype: List[str]
        """
        return self._worlds

    @worlds.setter
    def worlds(self, worlds):
        """Sets the worlds of this CreateWorldExportJobRequest.

        A list of Amazon Resource Names (arns) that correspond to worlds to export.

        :param worlds: The worlds of this CreateWorldExportJobRequest.
        :type worlds: List[str]
        """
        if worlds is None:
            raise ValueError("Invalid value for `worlds`, must not be `None`")
        if worlds is not None and len(worlds) > 100:
            raise ValueError("Invalid value for `worlds`, number of items must be less than or equal to `100`")
        if worlds is not None and len(worlds) < 1:
            raise ValueError("Invalid value for `worlds`, number of items must be greater than or equal to `1`")

        self._worlds = worlds

    @property
    def output_location(self):
        """Gets the output_location of this CreateWorldExportJobRequest.


        :return: The output_location of this CreateWorldExportJobRequest.
        :rtype: CreateSimulationJobRequestOutputLocation
        """
        return self._output_location

    @output_location.setter
    def output_location(self, output_location):
        """Sets the output_location of this CreateWorldExportJobRequest.


        :param output_location: The output_location of this CreateWorldExportJobRequest.
        :type output_location: CreateSimulationJobRequestOutputLocation
        """
        if output_location is None:
            raise ValueError("Invalid value for `output_location`, must not be `None`")

        self._output_location = output_location

    @property
    def iam_role(self):
        """Gets the iam_role of this CreateWorldExportJobRequest.

        The IAM role that the world export process uses to access the Amazon S3 bucket and put the export.

        :return: The iam_role of this CreateWorldExportJobRequest.
        :rtype: str
        """
        return self._iam_role

    @iam_role.setter
    def iam_role(self, iam_role):
        """Sets the iam_role of this CreateWorldExportJobRequest.

        The IAM role that the world export process uses to access the Amazon S3 bucket and put the export.

        :param iam_role: The iam_role of this CreateWorldExportJobRequest.
        :type iam_role: str
        """
        if iam_role is None:
            raise ValueError("Invalid value for `iam_role`, must not be `None`")
        if iam_role is not None and len(iam_role) > 255:
            raise ValueError("Invalid value for `iam_role`, length must be less than or equal to `255`")
        if iam_role is not None and len(iam_role) < 1:
            raise ValueError("Invalid value for `iam_role`, length must be greater than or equal to `1`")
        if iam_role is not None and not re.search(r'arn:aws:iam::\w+:role\/.*', iam_role):
            raise ValueError("Invalid value for `iam_role`, must be a follow pattern or equal to `/arn:aws:iam::\w+:role\/.*/`")

        self._iam_role = iam_role

    @property
    def tags(self):
        """Gets the tags of this CreateWorldExportJobRequest.

        A map that contains tag keys and tag values that are attached to the world export job.

        :return: The tags of this CreateWorldExportJobRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateWorldExportJobRequest.

        A map that contains tag keys and tag values that are attached to the world export job.

        :param tags: The tags of this CreateWorldExportJobRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
