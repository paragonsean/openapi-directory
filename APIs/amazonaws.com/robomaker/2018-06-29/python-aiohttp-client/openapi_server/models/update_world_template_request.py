# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_world_template_request_template_location import CreateWorldTemplateRequestTemplateLocation
import re
from openapi_server import util


class UpdateWorldTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, template: str=None, name: str=None, template_body: str=None, template_location: CreateWorldTemplateRequestTemplateLocation=None):
        """UpdateWorldTemplateRequest - a model defined in OpenAPI

        :param template: The template of this UpdateWorldTemplateRequest.
        :param name: The name of this UpdateWorldTemplateRequest.
        :param template_body: The template_body of this UpdateWorldTemplateRequest.
        :param template_location: The template_location of this UpdateWorldTemplateRequest.
        """
        self.openapi_types = {
            'template': str,
            'name': str,
            'template_body': str,
            'template_location': CreateWorldTemplateRequestTemplateLocation
        }

        self.attribute_map = {
            'template': 'template',
            'name': 'name',
            'template_body': 'templateBody',
            'template_location': 'templateLocation'
        }

        self._template = template
        self._name = name
        self._template_body = template_body
        self._template_location = template_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateWorldTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateWorldTemplate_request of this UpdateWorldTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def template(self):
        """Gets the template of this UpdateWorldTemplateRequest.

        The Amazon Resource Name (arn) of the world template to update.

        :return: The template of this UpdateWorldTemplateRequest.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this UpdateWorldTemplateRequest.

        The Amazon Resource Name (arn) of the world template to update.

        :param template: The template of this UpdateWorldTemplateRequest.
        :type template: str
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")
        if template is not None and len(template) > 1224:
            raise ValueError("Invalid value for `template`, length must be less than or equal to `1224`")
        if template is not None and len(template) < 1:
            raise ValueError("Invalid value for `template`, length must be greater than or equal to `1`")
        if template is not None and not re.search(r'arn:.*', template):
            raise ValueError("Invalid value for `template`, must be a follow pattern or equal to `/arn:.*/`")

        self._template = template

    @property
    def name(self):
        """Gets the name of this UpdateWorldTemplateRequest.

        The name of the template.

        :return: The name of this UpdateWorldTemplateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateWorldTemplateRequest.

        The name of the template.

        :param name: The name of this UpdateWorldTemplateRequest.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'.*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/.*/`")

        self._name = name

    @property
    def template_body(self):
        """Gets the template_body of this UpdateWorldTemplateRequest.

        The world template body.

        :return: The template_body of this UpdateWorldTemplateRequest.
        :rtype: str
        """
        return self._template_body

    @template_body.setter
    def template_body(self, template_body):
        """Sets the template_body of this UpdateWorldTemplateRequest.

        The world template body.

        :param template_body: The template_body of this UpdateWorldTemplateRequest.
        :type template_body: str
        """
        if template_body is not None and len(template_body) > 262144:
            raise ValueError("Invalid value for `template_body`, length must be less than or equal to `262144`")
        if template_body is not None and len(template_body) < 1:
            raise ValueError("Invalid value for `template_body`, length must be greater than or equal to `1`")
        if template_body is not None and not re.search(r'[\S\s]+', template_body):
            raise ValueError("Invalid value for `template_body`, must be a follow pattern or equal to `/[\S\s]+/`")

        self._template_body = template_body

    @property
    def template_location(self):
        """Gets the template_location of this UpdateWorldTemplateRequest.


        :return: The template_location of this UpdateWorldTemplateRequest.
        :rtype: CreateWorldTemplateRequestTemplateLocation
        """
        return self._template_location

    @template_location.setter
    def template_location(self, template_location):
        """Sets the template_location of this UpdateWorldTemplateRequest.


        :param template_location: The template_location of this UpdateWorldTemplateRequest.
        :type template_location: CreateWorldTemplateRequestTemplateLocation
        """

        self._template_location = template_location
