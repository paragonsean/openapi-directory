# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeleteRobotRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, robot: str=None):
        """DeleteRobotRequest - a model defined in OpenAPI

        :param robot: The robot of this DeleteRobotRequest.
        """
        self.openapi_types = {
            'robot': str
        }

        self.attribute_map = {
            'robot': 'robot'
        }

        self._robot = robot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteRobotRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteRobot_request of this DeleteRobotRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def robot(self):
        """Gets the robot of this DeleteRobotRequest.

        The Amazon Resource Name (ARN) of the robot.

        :return: The robot of this DeleteRobotRequest.
        :rtype: str
        """
        return self._robot

    @robot.setter
    def robot(self, robot):
        """Sets the robot of this DeleteRobotRequest.

        The Amazon Resource Name (ARN) of the robot.

        :param robot: The robot of this DeleteRobotRequest.
        :type robot: str
        """
        if robot is None:
            raise ValueError("Invalid value for `robot`, must not be `None`")
        if robot is not None and len(robot) > 1224:
            raise ValueError("Invalid value for `robot`, length must be less than or equal to `1224`")
        if robot is not None and len(robot) < 1:
            raise ValueError("Invalid value for `robot`, length must be greater than or equal to `1`")
        if robot is not None and not re.search(r'arn:.*', robot):
            raise ValueError("Invalid value for `robot`, must be a follow pattern or equal to `/arn:.*/`")

        self._robot = robot
