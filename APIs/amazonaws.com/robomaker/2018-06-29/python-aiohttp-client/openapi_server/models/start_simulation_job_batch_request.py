# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simulation_job_request import SimulationJobRequest
from openapi_server.models.start_simulation_job_batch_request_batch_policy import StartSimulationJobBatchRequestBatchPolicy
import re
from openapi_server import util


class StartSimulationJobBatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_request_token: str=None, batch_policy: StartSimulationJobBatchRequestBatchPolicy=None, create_simulation_job_requests: List[SimulationJobRequest]=None, tags: Dict[str, str]=None):
        """StartSimulationJobBatchRequest - a model defined in OpenAPI

        :param client_request_token: The client_request_token of this StartSimulationJobBatchRequest.
        :param batch_policy: The batch_policy of this StartSimulationJobBatchRequest.
        :param create_simulation_job_requests: The create_simulation_job_requests of this StartSimulationJobBatchRequest.
        :param tags: The tags of this StartSimulationJobBatchRequest.
        """
        self.openapi_types = {
            'client_request_token': str,
            'batch_policy': StartSimulationJobBatchRequestBatchPolicy,
            'create_simulation_job_requests': List[SimulationJobRequest],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_request_token': 'clientRequestToken',
            'batch_policy': 'batchPolicy',
            'create_simulation_job_requests': 'createSimulationJobRequests',
            'tags': 'tags'
        }

        self._client_request_token = client_request_token
        self._batch_policy = batch_policy
        self._create_simulation_job_requests = create_simulation_job_requests
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartSimulationJobBatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartSimulationJobBatch_request of this StartSimulationJobBatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_request_token(self):
        """Gets the client_request_token of this StartSimulationJobBatchRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this StartSimulationJobBatchRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this StartSimulationJobBatchRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this StartSimulationJobBatchRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[a-zA-Z0-9_\-=]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[a-zA-Z0-9_\-=]*/`")

        self._client_request_token = client_request_token

    @property
    def batch_policy(self):
        """Gets the batch_policy of this StartSimulationJobBatchRequest.


        :return: The batch_policy of this StartSimulationJobBatchRequest.
        :rtype: StartSimulationJobBatchRequestBatchPolicy
        """
        return self._batch_policy

    @batch_policy.setter
    def batch_policy(self, batch_policy):
        """Sets the batch_policy of this StartSimulationJobBatchRequest.


        :param batch_policy: The batch_policy of this StartSimulationJobBatchRequest.
        :type batch_policy: StartSimulationJobBatchRequestBatchPolicy
        """

        self._batch_policy = batch_policy

    @property
    def create_simulation_job_requests(self):
        """Gets the create_simulation_job_requests of this StartSimulationJobBatchRequest.

        A list of simulation job requests to create in the batch.

        :return: The create_simulation_job_requests of this StartSimulationJobBatchRequest.
        :rtype: List[SimulationJobRequest]
        """
        return self._create_simulation_job_requests

    @create_simulation_job_requests.setter
    def create_simulation_job_requests(self, create_simulation_job_requests):
        """Sets the create_simulation_job_requests of this StartSimulationJobBatchRequest.

        A list of simulation job requests to create in the batch.

        :param create_simulation_job_requests: The create_simulation_job_requests of this StartSimulationJobBatchRequest.
        :type create_simulation_job_requests: List[SimulationJobRequest]
        """
        if create_simulation_job_requests is None:
            raise ValueError("Invalid value for `create_simulation_job_requests`, must not be `None`")
        if create_simulation_job_requests is not None and len(create_simulation_job_requests) > 1000:
            raise ValueError("Invalid value for `create_simulation_job_requests`, number of items must be less than or equal to `1000`")
        if create_simulation_job_requests is not None and len(create_simulation_job_requests) < 1:
            raise ValueError("Invalid value for `create_simulation_job_requests`, number of items must be greater than or equal to `1`")

        self._create_simulation_job_requests = create_simulation_job_requests

    @property
    def tags(self):
        """Gets the tags of this StartSimulationJobBatchRequest.

        A map that contains tag keys and tag values that are attached to the deployment job batch.

        :return: The tags of this StartSimulationJobBatchRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartSimulationJobBatchRequest.

        A map that contains tag keys and tag values that are attached to the deployment job batch.

        :param tags: The tags of this StartSimulationJobBatchRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
