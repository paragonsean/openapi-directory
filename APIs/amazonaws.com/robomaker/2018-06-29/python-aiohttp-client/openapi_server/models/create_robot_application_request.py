# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_robot_application_request_environment import CreateRobotApplicationRequestEnvironment
from openapi_server.models.create_robot_application_request_robot_software_suite import CreateRobotApplicationRequestRobotSoftwareSuite
from openapi_server.models.source_config import SourceConfig
import re
from openapi_server import util


class CreateRobotApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, sources: List[SourceConfig]=None, robot_software_suite: CreateRobotApplicationRequestRobotSoftwareSuite=None, tags: Dict[str, str]=None, environment: CreateRobotApplicationRequestEnvironment=None):
        """CreateRobotApplicationRequest - a model defined in OpenAPI

        :param name: The name of this CreateRobotApplicationRequest.
        :param sources: The sources of this CreateRobotApplicationRequest.
        :param robot_software_suite: The robot_software_suite of this CreateRobotApplicationRequest.
        :param tags: The tags of this CreateRobotApplicationRequest.
        :param environment: The environment of this CreateRobotApplicationRequest.
        """
        self.openapi_types = {
            'name': str,
            'sources': List[SourceConfig],
            'robot_software_suite': CreateRobotApplicationRequestRobotSoftwareSuite,
            'tags': Dict[str, str],
            'environment': CreateRobotApplicationRequestEnvironment
        }

        self.attribute_map = {
            'name': 'name',
            'sources': 'sources',
            'robot_software_suite': 'robotSoftwareSuite',
            'tags': 'tags',
            'environment': 'environment'
        }

        self._name = name
        self._sources = sources
        self._robot_software_suite = robot_software_suite
        self._tags = tags
        self._environment = environment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRobotApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRobotApplication_request of this CreateRobotApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateRobotApplicationRequest.

        The name of the robot application.

        :return: The name of this CreateRobotApplicationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRobotApplicationRequest.

        The name of the robot application.

        :param name: The name of this CreateRobotApplicationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[a-zA-Z0-9_\-]*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z0-9_\-]*/`")

        self._name = name

    @property
    def sources(self):
        """Gets the sources of this CreateRobotApplicationRequest.

        The sources of the robot application.

        :return: The sources of this CreateRobotApplicationRequest.
        :rtype: List[SourceConfig]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this CreateRobotApplicationRequest.

        The sources of the robot application.

        :param sources: The sources of this CreateRobotApplicationRequest.
        :type sources: List[SourceConfig]
        """

        self._sources = sources

    @property
    def robot_software_suite(self):
        """Gets the robot_software_suite of this CreateRobotApplicationRequest.


        :return: The robot_software_suite of this CreateRobotApplicationRequest.
        :rtype: CreateRobotApplicationRequestRobotSoftwareSuite
        """
        return self._robot_software_suite

    @robot_software_suite.setter
    def robot_software_suite(self, robot_software_suite):
        """Sets the robot_software_suite of this CreateRobotApplicationRequest.


        :param robot_software_suite: The robot_software_suite of this CreateRobotApplicationRequest.
        :type robot_software_suite: CreateRobotApplicationRequestRobotSoftwareSuite
        """
        if robot_software_suite is None:
            raise ValueError("Invalid value for `robot_software_suite`, must not be `None`")

        self._robot_software_suite = robot_software_suite

    @property
    def tags(self):
        """Gets the tags of this CreateRobotApplicationRequest.

        A map that contains tag keys and tag values that are attached to the robot application.

        :return: The tags of this CreateRobotApplicationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRobotApplicationRequest.

        A map that contains tag keys and tag values that are attached to the robot application.

        :param tags: The tags of this CreateRobotApplicationRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def environment(self):
        """Gets the environment of this CreateRobotApplicationRequest.


        :return: The environment of this CreateRobotApplicationRequest.
        :rtype: CreateRobotApplicationRequestEnvironment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this CreateRobotApplicationRequest.


        :param environment: The environment of this CreateRobotApplicationRequest.
        :type environment: CreateRobotApplicationRequestEnvironment
        """

        self._environment = environment
