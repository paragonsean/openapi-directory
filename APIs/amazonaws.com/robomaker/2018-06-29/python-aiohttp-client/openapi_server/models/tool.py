# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exit_behavior import ExitBehavior
from openapi_server import util


class Tool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_ui: bool=None, name: str=None, command: str=None, stream_output_to_cloud_watch: bool=None, exit_behavior: ExitBehavior=None):
        """Tool - a model defined in OpenAPI

        :param stream_ui: The stream_ui of this Tool.
        :param name: The name of this Tool.
        :param command: The command of this Tool.
        :param stream_output_to_cloud_watch: The stream_output_to_cloud_watch of this Tool.
        :param exit_behavior: The exit_behavior of this Tool.
        """
        self.openapi_types = {
            'stream_ui': bool,
            'name': str,
            'command': str,
            'stream_output_to_cloud_watch': bool,
            'exit_behavior': ExitBehavior
        }

        self.attribute_map = {
            'stream_ui': 'streamUI',
            'name': 'name',
            'command': 'command',
            'stream_output_to_cloud_watch': 'streamOutputToCloudWatch',
            'exit_behavior': 'exitBehavior'
        }

        self._stream_ui = stream_ui
        self._name = name
        self._command = command
        self._stream_output_to_cloud_watch = stream_output_to_cloud_watch
        self._exit_behavior = exit_behavior

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tool of this Tool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_ui(self):
        """Gets the stream_ui of this Tool.


        :return: The stream_ui of this Tool.
        :rtype: bool
        """
        return self._stream_ui

    @stream_ui.setter
    def stream_ui(self, stream_ui):
        """Sets the stream_ui of this Tool.


        :param stream_ui: The stream_ui of this Tool.
        :type stream_ui: bool
        """

        self._stream_ui = stream_ui

    @property
    def name(self):
        """Gets the name of this Tool.


        :return: The name of this Tool.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tool.


        :param name: The name of this Tool.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def command(self):
        """Gets the command of this Tool.


        :return: The command of this Tool.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this Tool.


        :param command: The command of this Tool.
        :type command: str
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")

        self._command = command

    @property
    def stream_output_to_cloud_watch(self):
        """Gets the stream_output_to_cloud_watch of this Tool.


        :return: The stream_output_to_cloud_watch of this Tool.
        :rtype: bool
        """
        return self._stream_output_to_cloud_watch

    @stream_output_to_cloud_watch.setter
    def stream_output_to_cloud_watch(self, stream_output_to_cloud_watch):
        """Sets the stream_output_to_cloud_watch of this Tool.


        :param stream_output_to_cloud_watch: The stream_output_to_cloud_watch of this Tool.
        :type stream_output_to_cloud_watch: bool
        """

        self._stream_output_to_cloud_watch = stream_output_to_cloud_watch

    @property
    def exit_behavior(self):
        """Gets the exit_behavior of this Tool.


        :return: The exit_behavior of this Tool.
        :rtype: ExitBehavior
        """
        return self._exit_behavior

    @exit_behavior.setter
    def exit_behavior(self, exit_behavior):
        """Sets the exit_behavior of this Tool.


        :param exit_behavior: The exit_behavior of this Tool.
        :type exit_behavior: ExitBehavior
        """

        self._exit_behavior = exit_behavior
