# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter import Filter
import re
from openapi_server import util


class ListRobotApplicationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version_qualifier: str=None, next_token: str=None, max_results: int=None, filters: List[Filter]=None):
        """ListRobotApplicationsRequest - a model defined in OpenAPI

        :param version_qualifier: The version_qualifier of this ListRobotApplicationsRequest.
        :param next_token: The next_token of this ListRobotApplicationsRequest.
        :param max_results: The max_results of this ListRobotApplicationsRequest.
        :param filters: The filters of this ListRobotApplicationsRequest.
        """
        self.openapi_types = {
            'version_qualifier': str,
            'next_token': str,
            'max_results': int,
            'filters': List[Filter]
        }

        self.attribute_map = {
            'version_qualifier': 'versionQualifier',
            'next_token': 'nextToken',
            'max_results': 'maxResults',
            'filters': 'filters'
        }

        self._version_qualifier = version_qualifier
        self._next_token = next_token
        self._max_results = max_results
        self._filters = filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListRobotApplicationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListRobotApplications_request of this ListRobotApplicationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version_qualifier(self):
        """Gets the version_qualifier of this ListRobotApplicationsRequest.

        The version qualifier of the robot application.

        :return: The version_qualifier of this ListRobotApplicationsRequest.
        :rtype: str
        """
        return self._version_qualifier

    @version_qualifier.setter
    def version_qualifier(self, version_qualifier):
        """Sets the version_qualifier of this ListRobotApplicationsRequest.

        The version qualifier of the robot application.

        :param version_qualifier: The version_qualifier of this ListRobotApplicationsRequest.
        :type version_qualifier: str
        """
        if version_qualifier is not None and len(version_qualifier) > 255:
            raise ValueError("Invalid value for `version_qualifier`, length must be less than or equal to `255`")
        if version_qualifier is not None and len(version_qualifier) < 1:
            raise ValueError("Invalid value for `version_qualifier`, length must be greater than or equal to `1`")
        if version_qualifier is not None and not re.search(r'ALL', version_qualifier):
            raise ValueError("Invalid value for `version_qualifier`, must be a follow pattern or equal to `/ALL/`")

        self._version_qualifier = version_qualifier

    @property
    def next_token(self):
        """Gets the next_token of this ListRobotApplicationsRequest.

        If the previous paginated request did not return all of the remaining results, the response object's <code>nextToken</code> parameter value is set to a token. To retrieve the next set of results, call <code>ListRobotApplications</code> again and assign that token to the request object's <code>nextToken</code> parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

        :return: The next_token of this ListRobotApplicationsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListRobotApplicationsRequest.

        If the previous paginated request did not return all of the remaining results, the response object's <code>nextToken</code> parameter value is set to a token. To retrieve the next set of results, call <code>ListRobotApplications</code> again and assign that token to the request object's <code>nextToken</code> parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

        :param next_token: The next_token of this ListRobotApplicationsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2048:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2048`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")
        if next_token is not None and not re.search(r'[a-zA-Z0-9_.\-\/+=]*', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/[a-zA-Z0-9_.\-\/+=]*/`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListRobotApplicationsRequest.

        When this parameter is used, <code>ListRobotApplications</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListRobotApplications</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>ListRobotApplications</code> returns up to 100 results and a <code>nextToken</code> value if applicable. 

        :return: The max_results of this ListRobotApplicationsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListRobotApplicationsRequest.

        When this parameter is used, <code>ListRobotApplications</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListRobotApplications</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>ListRobotApplications</code> returns up to 100 results and a <code>nextToken</code> value if applicable. 

        :param max_results: The max_results of this ListRobotApplicationsRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def filters(self):
        """Gets the filters of this ListRobotApplicationsRequest.

        <p>Optional filters to limit results.</p> <p>The filter name <code>name</code> is supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters.</p>

        :return: The filters of this ListRobotApplicationsRequest.
        :rtype: List[Filter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListRobotApplicationsRequest.

        <p>Optional filters to limit results.</p> <p>The filter name <code>name</code> is supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters.</p>

        :param filters: The filters of this ListRobotApplicationsRequest.
        :type filters: List[Filter]
        """
        if filters is not None and len(filters) > 1:
            raise ValueError("Invalid value for `filters`, number of items must be less than or equal to `1`")
        if filters is not None and len(filters) < 1:
            raise ValueError("Invalid value for `filters`, number of items must be greater than or equal to `1`")

        self._filters = filters
