# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CancelSimulationJobBatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch: str=None):
        """CancelSimulationJobBatchRequest - a model defined in OpenAPI

        :param batch: The batch of this CancelSimulationJobBatchRequest.
        """
        self.openapi_types = {
            'batch': str
        }

        self.attribute_map = {
            'batch': 'batch'
        }

        self._batch = batch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancelSimulationJobBatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancelSimulationJobBatch_request of this CancelSimulationJobBatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch(self):
        """Gets the batch of this CancelSimulationJobBatchRequest.

        The id of the batch to cancel.

        :return: The batch of this CancelSimulationJobBatchRequest.
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this CancelSimulationJobBatchRequest.

        The id of the batch to cancel.

        :param batch: The batch of this CancelSimulationJobBatchRequest.
        :type batch: str
        """
        if batch is None:
            raise ValueError("Invalid value for `batch`, must not be `None`")
        if batch is not None and len(batch) > 1224:
            raise ValueError("Invalid value for `batch`, length must be less than or equal to `1224`")
        if batch is not None and len(batch) < 1:
            raise ValueError("Invalid value for `batch`, length must be greater than or equal to `1`")
        if batch is not None and not re.search(r'arn:.*', batch):
            raise ValueError("Invalid value for `batch`, must be a follow pattern or equal to `/arn:.*/`")

        self._batch = batch
