# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_world_generation_job_request_world_count import CreateWorldGenerationJobRequestWorldCount
import re
from openapi_server import util


class CreateWorldGenerationJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_request_token: str=None, template: str=None, world_count: CreateWorldGenerationJobRequestWorldCount=None, tags: Dict[str, str]=None, world_tags: Dict[str, str]=None):
        """CreateWorldGenerationJobRequest - a model defined in OpenAPI

        :param client_request_token: The client_request_token of this CreateWorldGenerationJobRequest.
        :param template: The template of this CreateWorldGenerationJobRequest.
        :param world_count: The world_count of this CreateWorldGenerationJobRequest.
        :param tags: The tags of this CreateWorldGenerationJobRequest.
        :param world_tags: The world_tags of this CreateWorldGenerationJobRequest.
        """
        self.openapi_types = {
            'client_request_token': str,
            'template': str,
            'world_count': CreateWorldGenerationJobRequestWorldCount,
            'tags': Dict[str, str],
            'world_tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_request_token': 'clientRequestToken',
            'template': 'template',
            'world_count': 'worldCount',
            'tags': 'tags',
            'world_tags': 'worldTags'
        }

        self._client_request_token = client_request_token
        self._template = template
        self._world_count = world_count
        self._tags = tags
        self._world_tags = world_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorldGenerationJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWorldGenerationJob_request of this CreateWorldGenerationJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateWorldGenerationJobRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this CreateWorldGenerationJobRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateWorldGenerationJobRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this CreateWorldGenerationJobRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[a-zA-Z0-9_\-=]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[a-zA-Z0-9_\-=]*/`")

        self._client_request_token = client_request_token

    @property
    def template(self):
        """Gets the template of this CreateWorldGenerationJobRequest.

        The Amazon Resource Name (arn) of the world template describing the worlds you want to create.

        :return: The template of this CreateWorldGenerationJobRequest.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this CreateWorldGenerationJobRequest.

        The Amazon Resource Name (arn) of the world template describing the worlds you want to create.

        :param template: The template of this CreateWorldGenerationJobRequest.
        :type template: str
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")
        if template is not None and len(template) > 1224:
            raise ValueError("Invalid value for `template`, length must be less than or equal to `1224`")
        if template is not None and len(template) < 1:
            raise ValueError("Invalid value for `template`, length must be greater than or equal to `1`")
        if template is not None and not re.search(r'arn:.*', template):
            raise ValueError("Invalid value for `template`, must be a follow pattern or equal to `/arn:.*/`")

        self._template = template

    @property
    def world_count(self):
        """Gets the world_count of this CreateWorldGenerationJobRequest.


        :return: The world_count of this CreateWorldGenerationJobRequest.
        :rtype: CreateWorldGenerationJobRequestWorldCount
        """
        return self._world_count

    @world_count.setter
    def world_count(self, world_count):
        """Sets the world_count of this CreateWorldGenerationJobRequest.


        :param world_count: The world_count of this CreateWorldGenerationJobRequest.
        :type world_count: CreateWorldGenerationJobRequestWorldCount
        """
        if world_count is None:
            raise ValueError("Invalid value for `world_count`, must not be `None`")

        self._world_count = world_count

    @property
    def tags(self):
        """Gets the tags of this CreateWorldGenerationJobRequest.

        A map that contains tag keys and tag values that are attached to the world generator job.

        :return: The tags of this CreateWorldGenerationJobRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateWorldGenerationJobRequest.

        A map that contains tag keys and tag values that are attached to the world generator job.

        :param tags: The tags of this CreateWorldGenerationJobRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def world_tags(self):
        """Gets the world_tags of this CreateWorldGenerationJobRequest.

        A map that contains tag keys and tag values that are attached to the generated worlds.

        :return: The world_tags of this CreateWorldGenerationJobRequest.
        :rtype: Dict[str, str]
        """
        return self._world_tags

    @world_tags.setter
    def world_tags(self, world_tags):
        """Sets the world_tags of this CreateWorldGenerationJobRequest.

        A map that contains tag keys and tag values that are attached to the generated worlds.

        :param world_tags: The world_tags of this CreateWorldGenerationJobRequest.
        :type world_tags: Dict[str, str]
        """
        if world_tags is not None and len(world_tags) > 50:
            raise ValueError("Invalid value for `world_tags`, number of items must be less than or equal to `50`")
        if world_tags is not None and len(world_tags) < 0:
            raise ValueError("Invalid value for `world_tags`, number of items must be greater than or equal to `0`")

        self._world_tags = world_tags
