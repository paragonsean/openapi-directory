# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateRobotRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, architecture: str=None, greengrass_group_id: str=None, tags: Dict[str, str]=None):
        """CreateRobotRequest - a model defined in OpenAPI

        :param name: The name of this CreateRobotRequest.
        :param architecture: The architecture of this CreateRobotRequest.
        :param greengrass_group_id: The greengrass_group_id of this CreateRobotRequest.
        :param tags: The tags of this CreateRobotRequest.
        """
        self.openapi_types = {
            'name': str,
            'architecture': str,
            'greengrass_group_id': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'name',
            'architecture': 'architecture',
            'greengrass_group_id': 'greengrassGroupId',
            'tags': 'tags'
        }

        self._name = name
        self._architecture = architecture
        self._greengrass_group_id = greengrass_group_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRobotRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRobot_request of this CreateRobotRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateRobotRequest.

        The name for the robot.

        :return: The name of this CreateRobotRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRobotRequest.

        The name for the robot.

        :param name: The name of this CreateRobotRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[a-zA-Z0-9_\-]*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z0-9_\-]*/`")

        self._name = name

    @property
    def architecture(self):
        """Gets the architecture of this CreateRobotRequest.

        The target architecture of the robot.

        :return: The architecture of this CreateRobotRequest.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this CreateRobotRequest.

        The target architecture of the robot.

        :param architecture: The architecture of this CreateRobotRequest.
        :type architecture: str
        """
        allowed_values = ["X86_64", "ARM64", "ARMHF"]  # noqa: E501
        if architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `architecture` ({0}), must be one of {1}"
                .format(architecture, allowed_values)
            )

        self._architecture = architecture

    @property
    def greengrass_group_id(self):
        """Gets the greengrass_group_id of this CreateRobotRequest.

        The Greengrass group id.

        :return: The greengrass_group_id of this CreateRobotRequest.
        :rtype: str
        """
        return self._greengrass_group_id

    @greengrass_group_id.setter
    def greengrass_group_id(self, greengrass_group_id):
        """Sets the greengrass_group_id of this CreateRobotRequest.

        The Greengrass group id.

        :param greengrass_group_id: The greengrass_group_id of this CreateRobotRequest.
        :type greengrass_group_id: str
        """
        if greengrass_group_id is None:
            raise ValueError("Invalid value for `greengrass_group_id`, must not be `None`")
        if greengrass_group_id is not None and len(greengrass_group_id) > 1224:
            raise ValueError("Invalid value for `greengrass_group_id`, length must be less than or equal to `1224`")
        if greengrass_group_id is not None and len(greengrass_group_id) < 1:
            raise ValueError("Invalid value for `greengrass_group_id`, length must be greater than or equal to `1`")
        if greengrass_group_id is not None and not re.search(r'.*', greengrass_group_id):
            raise ValueError("Invalid value for `greengrass_group_id`, must be a follow pattern or equal to `/.*/`")

        self._greengrass_group_id = greengrass_group_id

    @property
    def tags(self):
        """Gets the tags of this CreateRobotRequest.

        A map that contains tag keys and tag values that are attached to the robot.

        :return: The tags of this CreateRobotRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRobotRequest.

        A map that contains tag keys and tag values that are attached to the robot.

        :param tags: The tags of this CreateRobotRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
