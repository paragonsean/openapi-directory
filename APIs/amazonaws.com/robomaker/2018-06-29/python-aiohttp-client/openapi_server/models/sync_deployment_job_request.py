# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SyncDeploymentJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_request_token: str=None, fleet: str=None):
        """SyncDeploymentJobRequest - a model defined in OpenAPI

        :param client_request_token: The client_request_token of this SyncDeploymentJobRequest.
        :param fleet: The fleet of this SyncDeploymentJobRequest.
        """
        self.openapi_types = {
            'client_request_token': str,
            'fleet': str
        }

        self.attribute_map = {
            'client_request_token': 'clientRequestToken',
            'fleet': 'fleet'
        }

        self._client_request_token = client_request_token
        self._fleet = fleet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SyncDeploymentJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SyncDeploymentJob_request of this SyncDeploymentJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_request_token(self):
        """Gets the client_request_token of this SyncDeploymentJobRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this SyncDeploymentJobRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this SyncDeploymentJobRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this SyncDeploymentJobRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[a-zA-Z0-9_\-=]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[a-zA-Z0-9_\-=]*/`")

        self._client_request_token = client_request_token

    @property
    def fleet(self):
        """Gets the fleet of this SyncDeploymentJobRequest.

        The target fleet for the synchronization.

        :return: The fleet of this SyncDeploymentJobRequest.
        :rtype: str
        """
        return self._fleet

    @fleet.setter
    def fleet(self, fleet):
        """Sets the fleet of this SyncDeploymentJobRequest.

        The target fleet for the synchronization.

        :param fleet: The fleet of this SyncDeploymentJobRequest.
        :type fleet: str
        """
        if fleet is None:
            raise ValueError("Invalid value for `fleet`, must not be `None`")
        if fleet is not None and len(fleet) > 1224:
            raise ValueError("Invalid value for `fleet`, length must be less than or equal to `1224`")
        if fleet is not None and len(fleet) < 1:
            raise ValueError("Invalid value for `fleet`, length must be greater than or equal to `1`")
        if fleet is not None and not re.search(r'arn:.*', fleet):
            raise ValueError("Invalid value for `fleet`, must be a follow pattern or equal to `/arn:.*/`")

        self._fleet = fleet
