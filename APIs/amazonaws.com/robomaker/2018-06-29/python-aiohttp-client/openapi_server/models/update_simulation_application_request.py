# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_robot_application_request_environment import CreateRobotApplicationRequestEnvironment
from openapi_server.models.create_robot_application_request_robot_software_suite import CreateRobotApplicationRequestRobotSoftwareSuite
from openapi_server.models.create_simulation_application_request_rendering_engine import CreateSimulationApplicationRequestRenderingEngine
from openapi_server.models.create_simulation_application_request_simulation_software_suite import CreateSimulationApplicationRequestSimulationSoftwareSuite
from openapi_server.models.source_config import SourceConfig
import re
from openapi_server import util


class UpdateSimulationApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application: str=None, sources: List[SourceConfig]=None, simulation_software_suite: CreateSimulationApplicationRequestSimulationSoftwareSuite=None, robot_software_suite: CreateRobotApplicationRequestRobotSoftwareSuite=None, rendering_engine: CreateSimulationApplicationRequestRenderingEngine=None, current_revision_id: str=None, environment: CreateRobotApplicationRequestEnvironment=None):
        """UpdateSimulationApplicationRequest - a model defined in OpenAPI

        :param application: The application of this UpdateSimulationApplicationRequest.
        :param sources: The sources of this UpdateSimulationApplicationRequest.
        :param simulation_software_suite: The simulation_software_suite of this UpdateSimulationApplicationRequest.
        :param robot_software_suite: The robot_software_suite of this UpdateSimulationApplicationRequest.
        :param rendering_engine: The rendering_engine of this UpdateSimulationApplicationRequest.
        :param current_revision_id: The current_revision_id of this UpdateSimulationApplicationRequest.
        :param environment: The environment of this UpdateSimulationApplicationRequest.
        """
        self.openapi_types = {
            'application': str,
            'sources': List[SourceConfig],
            'simulation_software_suite': CreateSimulationApplicationRequestSimulationSoftwareSuite,
            'robot_software_suite': CreateRobotApplicationRequestRobotSoftwareSuite,
            'rendering_engine': CreateSimulationApplicationRequestRenderingEngine,
            'current_revision_id': str,
            'environment': CreateRobotApplicationRequestEnvironment
        }

        self.attribute_map = {
            'application': 'application',
            'sources': 'sources',
            'simulation_software_suite': 'simulationSoftwareSuite',
            'robot_software_suite': 'robotSoftwareSuite',
            'rendering_engine': 'renderingEngine',
            'current_revision_id': 'currentRevisionId',
            'environment': 'environment'
        }

        self._application = application
        self._sources = sources
        self._simulation_software_suite = simulation_software_suite
        self._robot_software_suite = robot_software_suite
        self._rendering_engine = rendering_engine
        self._current_revision_id = current_revision_id
        self._environment = environment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSimulationApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSimulationApplication_request of this UpdateSimulationApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self):
        """Gets the application of this UpdateSimulationApplicationRequest.

        The application information for the simulation application.

        :return: The application of this UpdateSimulationApplicationRequest.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this UpdateSimulationApplicationRequest.

        The application information for the simulation application.

        :param application: The application of this UpdateSimulationApplicationRequest.
        :type application: str
        """
        if application is None:
            raise ValueError("Invalid value for `application`, must not be `None`")
        if application is not None and len(application) > 1224:
            raise ValueError("Invalid value for `application`, length must be less than or equal to `1224`")
        if application is not None and len(application) < 1:
            raise ValueError("Invalid value for `application`, length must be greater than or equal to `1`")
        if application is not None and not re.search(r'arn:.*', application):
            raise ValueError("Invalid value for `application`, must be a follow pattern or equal to `/arn:.*/`")

        self._application = application

    @property
    def sources(self):
        """Gets the sources of this UpdateSimulationApplicationRequest.

        The sources of the simulation application.

        :return: The sources of this UpdateSimulationApplicationRequest.
        :rtype: List[SourceConfig]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this UpdateSimulationApplicationRequest.

        The sources of the simulation application.

        :param sources: The sources of this UpdateSimulationApplicationRequest.
        :type sources: List[SourceConfig]
        """

        self._sources = sources

    @property
    def simulation_software_suite(self):
        """Gets the simulation_software_suite of this UpdateSimulationApplicationRequest.


        :return: The simulation_software_suite of this UpdateSimulationApplicationRequest.
        :rtype: CreateSimulationApplicationRequestSimulationSoftwareSuite
        """
        return self._simulation_software_suite

    @simulation_software_suite.setter
    def simulation_software_suite(self, simulation_software_suite):
        """Sets the simulation_software_suite of this UpdateSimulationApplicationRequest.


        :param simulation_software_suite: The simulation_software_suite of this UpdateSimulationApplicationRequest.
        :type simulation_software_suite: CreateSimulationApplicationRequestSimulationSoftwareSuite
        """
        if simulation_software_suite is None:
            raise ValueError("Invalid value for `simulation_software_suite`, must not be `None`")

        self._simulation_software_suite = simulation_software_suite

    @property
    def robot_software_suite(self):
        """Gets the robot_software_suite of this UpdateSimulationApplicationRequest.


        :return: The robot_software_suite of this UpdateSimulationApplicationRequest.
        :rtype: CreateRobotApplicationRequestRobotSoftwareSuite
        """
        return self._robot_software_suite

    @robot_software_suite.setter
    def robot_software_suite(self, robot_software_suite):
        """Sets the robot_software_suite of this UpdateSimulationApplicationRequest.


        :param robot_software_suite: The robot_software_suite of this UpdateSimulationApplicationRequest.
        :type robot_software_suite: CreateRobotApplicationRequestRobotSoftwareSuite
        """
        if robot_software_suite is None:
            raise ValueError("Invalid value for `robot_software_suite`, must not be `None`")

        self._robot_software_suite = robot_software_suite

    @property
    def rendering_engine(self):
        """Gets the rendering_engine of this UpdateSimulationApplicationRequest.


        :return: The rendering_engine of this UpdateSimulationApplicationRequest.
        :rtype: CreateSimulationApplicationRequestRenderingEngine
        """
        return self._rendering_engine

    @rendering_engine.setter
    def rendering_engine(self, rendering_engine):
        """Sets the rendering_engine of this UpdateSimulationApplicationRequest.


        :param rendering_engine: The rendering_engine of this UpdateSimulationApplicationRequest.
        :type rendering_engine: CreateSimulationApplicationRequestRenderingEngine
        """

        self._rendering_engine = rendering_engine

    @property
    def current_revision_id(self):
        """Gets the current_revision_id of this UpdateSimulationApplicationRequest.

        The revision id for the robot application.

        :return: The current_revision_id of this UpdateSimulationApplicationRequest.
        :rtype: str
        """
        return self._current_revision_id

    @current_revision_id.setter
    def current_revision_id(self, current_revision_id):
        """Sets the current_revision_id of this UpdateSimulationApplicationRequest.

        The revision id for the robot application.

        :param current_revision_id: The current_revision_id of this UpdateSimulationApplicationRequest.
        :type current_revision_id: str
        """
        if current_revision_id is not None and len(current_revision_id) > 40:
            raise ValueError("Invalid value for `current_revision_id`, length must be less than or equal to `40`")
        if current_revision_id is not None and len(current_revision_id) < 1:
            raise ValueError("Invalid value for `current_revision_id`, length must be greater than or equal to `1`")
        if current_revision_id is not None and not re.search(r'[a-zA-Z0-9_.\-]*', current_revision_id):
            raise ValueError("Invalid value for `current_revision_id`, must be a follow pattern or equal to `/[a-zA-Z0-9_.\-]*/`")

        self._current_revision_id = current_revision_id

    @property
    def environment(self):
        """Gets the environment of this UpdateSimulationApplicationRequest.


        :return: The environment of this UpdateSimulationApplicationRequest.
        :rtype: CreateRobotApplicationRequestEnvironment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this UpdateSimulationApplicationRequest.


        :param environment: The environment of this UpdateSimulationApplicationRequest.
        :type environment: CreateRobotApplicationRequestEnvironment
        """

        self._environment = environment
