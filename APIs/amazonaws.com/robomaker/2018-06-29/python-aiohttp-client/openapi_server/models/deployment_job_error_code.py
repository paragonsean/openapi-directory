# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeploymentJobErrorCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    RESOURCENOTFOUND = 'ResourceNotFound'
    ENVIRONMENTSETUPERROR = 'EnvironmentSetupError'
    ETAGMISMATCH = 'EtagMismatch'
    FAILURETHRESHOLDBREACHED = 'FailureThresholdBreached'
    ROBOTDEPLOYMENTABORTED = 'RobotDeploymentAborted'
    ROBOTDEPLOYMENTNORESPONSE = 'RobotDeploymentNoResponse'
    ROBOTAGENTCONNECTIONTIMEOUT = 'RobotAgentConnectionTimeout'
    GREENGRASSDEPLOYMENTFAILED = 'GreengrassDeploymentFailed'
    INVALIDGREENGRASSGROUP = 'InvalidGreengrassGroup'
    MISSINGROBOTARCHITECTURE = 'MissingRobotArchitecture'
    MISSINGROBOTAPPLICATIONARCHITECTURE = 'MissingRobotApplicationArchitecture'
    MISSINGROBOTDEPLOYMENTRESOURCE = 'MissingRobotDeploymentResource'
    GREENGRASSGROUPVERSIONDOESNOTEXIST = 'GreengrassGroupVersionDoesNotExist'
    LAMBDADELETED = 'LambdaDeleted'
    EXTRACTINGBUNDLEFAILURE = 'ExtractingBundleFailure'
    PRELAUNCHFILEFAILURE = 'PreLaunchFileFailure'
    POSTLAUNCHFILEFAILURE = 'PostLaunchFileFailure'
    BADPERMISSIONERROR = 'BadPermissionError'
    DOWNLOADCONDITIONFAILED = 'DownloadConditionFailed'
    BADLAMBDAASSOCIATED = 'BadLambdaAssociated'
    INTERNALSERVERERROR = 'InternalServerError'
    ROBOTAPPLICATIONDOESNOTEXIST = 'RobotApplicationDoesNotExist'
    DEPLOYMENTFLEETDOESNOTEXIST = 'DeploymentFleetDoesNotExist'
    FLEETDEPLOYMENTTIMEOUT = 'FleetDeploymentTimeout'

    def __init__(self):
        """DeploymentJobErrorCode - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentJobErrorCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentJobErrorCode of this DeploymentJobErrorCode.
        """
        return util.deserialize_model(dikt, cls)
