# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeleteFleetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fleet: str=None):
        """DeleteFleetRequest - a model defined in OpenAPI

        :param fleet: The fleet of this DeleteFleetRequest.
        """
        self.openapi_types = {
            'fleet': str
        }

        self.attribute_map = {
            'fleet': 'fleet'
        }

        self._fleet = fleet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteFleetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteFleet_request of this DeleteFleetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fleet(self):
        """Gets the fleet of this DeleteFleetRequest.

        The Amazon Resource Name (ARN) of the fleet.

        :return: The fleet of this DeleteFleetRequest.
        :rtype: str
        """
        return self._fleet

    @fleet.setter
    def fleet(self, fleet):
        """Sets the fleet of this DeleteFleetRequest.

        The Amazon Resource Name (ARN) of the fleet.

        :param fleet: The fleet of this DeleteFleetRequest.
        :type fleet: str
        """
        if fleet is None:
            raise ValueError("Invalid value for `fleet`, must not be `None`")
        if fleet is not None and len(fleet) > 1224:
            raise ValueError("Invalid value for `fleet`, length must be less than or equal to `1224`")
        if fleet is not None and len(fleet) < 1:
            raise ValueError("Invalid value for `fleet`, length must be greater than or equal to `1`")
        if fleet is not None and not re.search(r'arn:.*', fleet):
            raise ValueError("Invalid value for `fleet`, must be a follow pattern or equal to `/arn:.*/`")

        self._fleet = fleet
