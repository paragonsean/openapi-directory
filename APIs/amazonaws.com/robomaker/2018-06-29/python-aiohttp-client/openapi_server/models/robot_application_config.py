# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.robot_application_config_launch_config import RobotApplicationConfigLaunchConfig
from openapi_server import util


class RobotApplicationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application: str=None, application_version: str=None, launch_config: RobotApplicationConfigLaunchConfig=None, upload_configurations: List=None, use_default_upload_configurations: bool=None, tools: List=None, use_default_tools: bool=None):
        """RobotApplicationConfig - a model defined in OpenAPI

        :param application: The application of this RobotApplicationConfig.
        :param application_version: The application_version of this RobotApplicationConfig.
        :param launch_config: The launch_config of this RobotApplicationConfig.
        :param upload_configurations: The upload_configurations of this RobotApplicationConfig.
        :param use_default_upload_configurations: The use_default_upload_configurations of this RobotApplicationConfig.
        :param tools: The tools of this RobotApplicationConfig.
        :param use_default_tools: The use_default_tools of this RobotApplicationConfig.
        """
        self.openapi_types = {
            'application': str,
            'application_version': str,
            'launch_config': RobotApplicationConfigLaunchConfig,
            'upload_configurations': List,
            'use_default_upload_configurations': bool,
            'tools': List,
            'use_default_tools': bool
        }

        self.attribute_map = {
            'application': 'application',
            'application_version': 'applicationVersion',
            'launch_config': 'launchConfig',
            'upload_configurations': 'uploadConfigurations',
            'use_default_upload_configurations': 'useDefaultUploadConfigurations',
            'tools': 'tools',
            'use_default_tools': 'useDefaultTools'
        }

        self._application = application
        self._application_version = application_version
        self._launch_config = launch_config
        self._upload_configurations = upload_configurations
        self._use_default_upload_configurations = use_default_upload_configurations
        self._tools = tools
        self._use_default_tools = use_default_tools

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RobotApplicationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RobotApplicationConfig of this RobotApplicationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self):
        """Gets the application of this RobotApplicationConfig.


        :return: The application of this RobotApplicationConfig.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this RobotApplicationConfig.


        :param application: The application of this RobotApplicationConfig.
        :type application: str
        """
        if application is None:
            raise ValueError("Invalid value for `application`, must not be `None`")

        self._application = application

    @property
    def application_version(self):
        """Gets the application_version of this RobotApplicationConfig.


        :return: The application_version of this RobotApplicationConfig.
        :rtype: str
        """
        return self._application_version

    @application_version.setter
    def application_version(self, application_version):
        """Sets the application_version of this RobotApplicationConfig.


        :param application_version: The application_version of this RobotApplicationConfig.
        :type application_version: str
        """

        self._application_version = application_version

    @property
    def launch_config(self):
        """Gets the launch_config of this RobotApplicationConfig.


        :return: The launch_config of this RobotApplicationConfig.
        :rtype: RobotApplicationConfigLaunchConfig
        """
        return self._launch_config

    @launch_config.setter
    def launch_config(self, launch_config):
        """Sets the launch_config of this RobotApplicationConfig.


        :param launch_config: The launch_config of this RobotApplicationConfig.
        :type launch_config: RobotApplicationConfigLaunchConfig
        """
        if launch_config is None:
            raise ValueError("Invalid value for `launch_config`, must not be `None`")

        self._launch_config = launch_config

    @property
    def upload_configurations(self):
        """Gets the upload_configurations of this RobotApplicationConfig.


        :return: The upload_configurations of this RobotApplicationConfig.
        :rtype: List
        """
        return self._upload_configurations

    @upload_configurations.setter
    def upload_configurations(self, upload_configurations):
        """Sets the upload_configurations of this RobotApplicationConfig.


        :param upload_configurations: The upload_configurations of this RobotApplicationConfig.
        :type upload_configurations: List
        """

        self._upload_configurations = upload_configurations

    @property
    def use_default_upload_configurations(self):
        """Gets the use_default_upload_configurations of this RobotApplicationConfig.


        :return: The use_default_upload_configurations of this RobotApplicationConfig.
        :rtype: bool
        """
        return self._use_default_upload_configurations

    @use_default_upload_configurations.setter
    def use_default_upload_configurations(self, use_default_upload_configurations):
        """Sets the use_default_upload_configurations of this RobotApplicationConfig.


        :param use_default_upload_configurations: The use_default_upload_configurations of this RobotApplicationConfig.
        :type use_default_upload_configurations: bool
        """

        self._use_default_upload_configurations = use_default_upload_configurations

    @property
    def tools(self):
        """Gets the tools of this RobotApplicationConfig.


        :return: The tools of this RobotApplicationConfig.
        :rtype: List
        """
        return self._tools

    @tools.setter
    def tools(self, tools):
        """Sets the tools of this RobotApplicationConfig.


        :param tools: The tools of this RobotApplicationConfig.
        :type tools: List
        """

        self._tools = tools

    @property
    def use_default_tools(self):
        """Gets the use_default_tools of this RobotApplicationConfig.


        :return: The use_default_tools of this RobotApplicationConfig.
        :rtype: bool
        """
        return self._use_default_tools

    @use_default_tools.setter
    def use_default_tools(self, use_default_tools):
        """Sets the use_default_tools of this RobotApplicationConfig.


        :param use_default_tools: The use_default_tools of this RobotApplicationConfig.
        :type use_default_tools: bool
        """

        self._use_default_tools = use_default_tools
