# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_source_type import DataSourceType
from openapi_server import util


class DataSourceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, s3_bucket: str=None, s3_keys: List=None, type: DataSourceType=None, destination: str=None):
        """DataSourceConfig - a model defined in OpenAPI

        :param name: The name of this DataSourceConfig.
        :param s3_bucket: The s3_bucket of this DataSourceConfig.
        :param s3_keys: The s3_keys of this DataSourceConfig.
        :param type: The type of this DataSourceConfig.
        :param destination: The destination of this DataSourceConfig.
        """
        self.openapi_types = {
            'name': str,
            's3_bucket': str,
            's3_keys': List,
            'type': DataSourceType,
            'destination': str
        }

        self.attribute_map = {
            'name': 'name',
            's3_bucket': 's3Bucket',
            's3_keys': 's3Keys',
            'type': 'type',
            'destination': 'destination'
        }

        self._name = name
        self._s3_bucket = s3_bucket
        self._s3_keys = s3_keys
        self._type = type
        self._destination = destination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSourceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSourceConfig of this DataSourceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DataSourceConfig.


        :return: The name of this DataSourceConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSourceConfig.


        :param name: The name of this DataSourceConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def s3_bucket(self):
        """Gets the s3_bucket of this DataSourceConfig.


        :return: The s3_bucket of this DataSourceConfig.
        :rtype: str
        """
        return self._s3_bucket

    @s3_bucket.setter
    def s3_bucket(self, s3_bucket):
        """Sets the s3_bucket of this DataSourceConfig.


        :param s3_bucket: The s3_bucket of this DataSourceConfig.
        :type s3_bucket: str
        """
        if s3_bucket is None:
            raise ValueError("Invalid value for `s3_bucket`, must not be `None`")

        self._s3_bucket = s3_bucket

    @property
    def s3_keys(self):
        """Gets the s3_keys of this DataSourceConfig.


        :return: The s3_keys of this DataSourceConfig.
        :rtype: List
        """
        return self._s3_keys

    @s3_keys.setter
    def s3_keys(self, s3_keys):
        """Sets the s3_keys of this DataSourceConfig.


        :param s3_keys: The s3_keys of this DataSourceConfig.
        :type s3_keys: List
        """
        if s3_keys is None:
            raise ValueError("Invalid value for `s3_keys`, must not be `None`")

        self._s3_keys = s3_keys

    @property
    def type(self):
        """Gets the type of this DataSourceConfig.


        :return: The type of this DataSourceConfig.
        :rtype: DataSourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataSourceConfig.


        :param type: The type of this DataSourceConfig.
        :type type: DataSourceType
        """

        self._type = type

    @property
    def destination(self):
        """Gets the destination of this DataSourceConfig.


        :return: The destination of this DataSourceConfig.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this DataSourceConfig.


        :param destination: The destination of this DataSourceConfig.
        :type destination: str
        """

        self._destination = destination
