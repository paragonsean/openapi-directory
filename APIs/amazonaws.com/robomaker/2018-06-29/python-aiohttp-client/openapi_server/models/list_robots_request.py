# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter import Filter
import re
from openapi_server import util


class ListRobotsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, max_results: int=None, filters: List[Filter]=None):
        """ListRobotsRequest - a model defined in OpenAPI

        :param next_token: The next_token of this ListRobotsRequest.
        :param max_results: The max_results of this ListRobotsRequest.
        :param filters: The filters of this ListRobotsRequest.
        """
        self.openapi_types = {
            'next_token': str,
            'max_results': int,
            'filters': List[Filter]
        }

        self.attribute_map = {
            'next_token': 'nextToken',
            'max_results': 'maxResults',
            'filters': 'filters'
        }

        self._next_token = next_token
        self._max_results = max_results
        self._filters = filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListRobotsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListRobots_request of this ListRobotsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListRobotsRequest.

        If the previous paginated request did not return all of the remaining results, the response object's <code>nextToken</code> parameter value is set to a token. To retrieve the next set of results, call <code>ListRobots</code> again and assign that token to the request object's <code>nextToken</code> parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

        :return: The next_token of this ListRobotsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListRobotsRequest.

        If the previous paginated request did not return all of the remaining results, the response object's <code>nextToken</code> parameter value is set to a token. To retrieve the next set of results, call <code>ListRobots</code> again and assign that token to the request object's <code>nextToken</code> parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

        :param next_token: The next_token of this ListRobotsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2048:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2048`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")
        if next_token is not None and not re.search(r'[a-zA-Z0-9_.\-\/+=]*', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/[a-zA-Z0-9_.\-\/+=]*/`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListRobotsRequest.

        When this parameter is used, <code>ListRobots</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListRobots</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 200. If this parameter is not used, then <code>ListRobots</code> returns up to 200 results and a <code>nextToken</code> value if applicable. 

        :return: The max_results of this ListRobotsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListRobotsRequest.

        When this parameter is used, <code>ListRobots</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListRobots</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 200. If this parameter is not used, then <code>ListRobots</code> returns up to 200 results and a <code>nextToken</code> value if applicable. 

        :param max_results: The max_results of this ListRobotsRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def filters(self):
        """Gets the filters of this ListRobotsRequest.

        <p>Optional filters to limit results.</p> <p>The filter names <code>status</code> and <code>fleetName</code> are supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters, but they must be for the same named item. For example, if you are looking for items with the status <code>Registered</code> or the status <code>Available</code>.</p>

        :return: The filters of this ListRobotsRequest.
        :rtype: List[Filter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListRobotsRequest.

        <p>Optional filters to limit results.</p> <p>The filter names <code>status</code> and <code>fleetName</code> are supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters, but they must be for the same named item. For example, if you are looking for items with the status <code>Registered</code> or the status <code>Available</code>.</p>

        :param filters: The filters of this ListRobotsRequest.
        :type filters: List[Filter]
        """
        if filters is not None and len(filters) > 1:
            raise ValueError("Invalid value for `filters`, number of items must be less than or equal to `1`")
        if filters is not None and len(filters) < 1:
            raise ValueError("Invalid value for `filters`, number of items must be greater than or equal to `1`")

        self._filters = filters
