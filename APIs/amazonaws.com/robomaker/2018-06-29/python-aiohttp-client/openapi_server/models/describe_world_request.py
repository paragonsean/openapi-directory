# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DescribeWorldRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, world: str=None):
        """DescribeWorldRequest - a model defined in OpenAPI

        :param world: The world of this DescribeWorldRequest.
        """
        self.openapi_types = {
            'world': str
        }

        self.attribute_map = {
            'world': 'world'
        }

        self._world = world

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeWorldRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeWorld_request of this DescribeWorldRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def world(self):
        """Gets the world of this DescribeWorldRequest.

        The Amazon Resource Name (arn) of the world you want to describe.

        :return: The world of this DescribeWorldRequest.
        :rtype: str
        """
        return self._world

    @world.setter
    def world(self, world):
        """Sets the world of this DescribeWorldRequest.

        The Amazon Resource Name (arn) of the world you want to describe.

        :param world: The world of this DescribeWorldRequest.
        :type world: str
        """
        if world is None:
            raise ValueError("Invalid value for `world`, must not be `None`")
        if world is not None and len(world) > 1224:
            raise ValueError("Invalid value for `world`, length must be less than or equal to `1224`")
        if world is not None and len(world) < 1:
            raise ValueError("Invalid value for `world`, length must be greater than or equal to `1`")
        if world is not None and not re.search(r'arn:.*', world):
            raise ValueError("Invalid value for `world`, must be a follow pattern or equal to `/arn:.*/`")

        self._world = world
