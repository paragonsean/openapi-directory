# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetWorldTemplateBodyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, template: str=None, generation_job: str=None):
        """GetWorldTemplateBodyRequest - a model defined in OpenAPI

        :param template: The template of this GetWorldTemplateBodyRequest.
        :param generation_job: The generation_job of this GetWorldTemplateBodyRequest.
        """
        self.openapi_types = {
            'template': str,
            'generation_job': str
        }

        self.attribute_map = {
            'template': 'template',
            'generation_job': 'generationJob'
        }

        self._template = template
        self._generation_job = generation_job

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetWorldTemplateBodyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetWorldTemplateBody_request of this GetWorldTemplateBodyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def template(self):
        """Gets the template of this GetWorldTemplateBodyRequest.

        The Amazon Resource Name (arn) of the world template.

        :return: The template of this GetWorldTemplateBodyRequest.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this GetWorldTemplateBodyRequest.

        The Amazon Resource Name (arn) of the world template.

        :param template: The template of this GetWorldTemplateBodyRequest.
        :type template: str
        """
        if template is not None and len(template) > 1224:
            raise ValueError("Invalid value for `template`, length must be less than or equal to `1224`")
        if template is not None and len(template) < 1:
            raise ValueError("Invalid value for `template`, length must be greater than or equal to `1`")
        if template is not None and not re.search(r'arn:.*', template):
            raise ValueError("Invalid value for `template`, must be a follow pattern or equal to `/arn:.*/`")

        self._template = template

    @property
    def generation_job(self):
        """Gets the generation_job of this GetWorldTemplateBodyRequest.

        The Amazon Resource Name (arn) of the world generator job.

        :return: The generation_job of this GetWorldTemplateBodyRequest.
        :rtype: str
        """
        return self._generation_job

    @generation_job.setter
    def generation_job(self, generation_job):
        """Sets the generation_job of this GetWorldTemplateBodyRequest.

        The Amazon Resource Name (arn) of the world generator job.

        :param generation_job: The generation_job of this GetWorldTemplateBodyRequest.
        :type generation_job: str
        """
        if generation_job is not None and len(generation_job) > 1224:
            raise ValueError("Invalid value for `generation_job`, length must be less than or equal to `1224`")
        if generation_job is not None and len(generation_job) < 1:
            raise ValueError("Invalid value for `generation_job`, length must be greater than or equal to `1`")
        if generation_job is not None and not re.search(r'arn:.*', generation_job):
            raise ValueError("Invalid value for `generation_job`, must be a follow pattern or equal to `/arn:.*/`")

        self._generation_job = generation_job
