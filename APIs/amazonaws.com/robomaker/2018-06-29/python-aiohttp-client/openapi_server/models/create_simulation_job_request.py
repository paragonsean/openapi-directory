# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_simulation_job_request_compute import CreateSimulationJobRequestCompute
from openapi_server.models.create_simulation_job_request_logging_config import CreateSimulationJobRequestLoggingConfig
from openapi_server.models.create_simulation_job_request_output_location import CreateSimulationJobRequestOutputLocation
from openapi_server.models.create_simulation_job_request_vpc_config import CreateSimulationJobRequestVpcConfig
from openapi_server.models.data_source_config import DataSourceConfig
from openapi_server.models.robot_application_config import RobotApplicationConfig
from openapi_server.models.simulation_application_config import SimulationApplicationConfig
import re
from openapi_server import util


class CreateSimulationJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_request_token: str=None, output_location: CreateSimulationJobRequestOutputLocation=None, logging_config: CreateSimulationJobRequestLoggingConfig=None, max_job_duration_in_seconds: int=None, iam_role: str=None, failure_behavior: str=None, robot_applications: List[RobotApplicationConfig]=None, simulation_applications: List[SimulationApplicationConfig]=None, data_sources: List[DataSourceConfig]=None, tags: Dict[str, str]=None, vpc_config: CreateSimulationJobRequestVpcConfig=None, compute: CreateSimulationJobRequestCompute=None):
        """CreateSimulationJobRequest - a model defined in OpenAPI

        :param client_request_token: The client_request_token of this CreateSimulationJobRequest.
        :param output_location: The output_location of this CreateSimulationJobRequest.
        :param logging_config: The logging_config of this CreateSimulationJobRequest.
        :param max_job_duration_in_seconds: The max_job_duration_in_seconds of this CreateSimulationJobRequest.
        :param iam_role: The iam_role of this CreateSimulationJobRequest.
        :param failure_behavior: The failure_behavior of this CreateSimulationJobRequest.
        :param robot_applications: The robot_applications of this CreateSimulationJobRequest.
        :param simulation_applications: The simulation_applications of this CreateSimulationJobRequest.
        :param data_sources: The data_sources of this CreateSimulationJobRequest.
        :param tags: The tags of this CreateSimulationJobRequest.
        :param vpc_config: The vpc_config of this CreateSimulationJobRequest.
        :param compute: The compute of this CreateSimulationJobRequest.
        """
        self.openapi_types = {
            'client_request_token': str,
            'output_location': CreateSimulationJobRequestOutputLocation,
            'logging_config': CreateSimulationJobRequestLoggingConfig,
            'max_job_duration_in_seconds': int,
            'iam_role': str,
            'failure_behavior': str,
            'robot_applications': List[RobotApplicationConfig],
            'simulation_applications': List[SimulationApplicationConfig],
            'data_sources': List[DataSourceConfig],
            'tags': Dict[str, str],
            'vpc_config': CreateSimulationJobRequestVpcConfig,
            'compute': CreateSimulationJobRequestCompute
        }

        self.attribute_map = {
            'client_request_token': 'clientRequestToken',
            'output_location': 'outputLocation',
            'logging_config': 'loggingConfig',
            'max_job_duration_in_seconds': 'maxJobDurationInSeconds',
            'iam_role': 'iamRole',
            'failure_behavior': 'failureBehavior',
            'robot_applications': 'robotApplications',
            'simulation_applications': 'simulationApplications',
            'data_sources': 'dataSources',
            'tags': 'tags',
            'vpc_config': 'vpcConfig',
            'compute': 'compute'
        }

        self._client_request_token = client_request_token
        self._output_location = output_location
        self._logging_config = logging_config
        self._max_job_duration_in_seconds = max_job_duration_in_seconds
        self._iam_role = iam_role
        self._failure_behavior = failure_behavior
        self._robot_applications = robot_applications
        self._simulation_applications = simulation_applications
        self._data_sources = data_sources
        self._tags = tags
        self._vpc_config = vpc_config
        self._compute = compute

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSimulationJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSimulationJob_request of this CreateSimulationJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateSimulationJobRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this CreateSimulationJobRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateSimulationJobRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this CreateSimulationJobRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[a-zA-Z0-9_\-=]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[a-zA-Z0-9_\-=]*/`")

        self._client_request_token = client_request_token

    @property
    def output_location(self):
        """Gets the output_location of this CreateSimulationJobRequest.


        :return: The output_location of this CreateSimulationJobRequest.
        :rtype: CreateSimulationJobRequestOutputLocation
        """
        return self._output_location

    @output_location.setter
    def output_location(self, output_location):
        """Sets the output_location of this CreateSimulationJobRequest.


        :param output_location: The output_location of this CreateSimulationJobRequest.
        :type output_location: CreateSimulationJobRequestOutputLocation
        """

        self._output_location = output_location

    @property
    def logging_config(self):
        """Gets the logging_config of this CreateSimulationJobRequest.


        :return: The logging_config of this CreateSimulationJobRequest.
        :rtype: CreateSimulationJobRequestLoggingConfig
        """
        return self._logging_config

    @logging_config.setter
    def logging_config(self, logging_config):
        """Sets the logging_config of this CreateSimulationJobRequest.


        :param logging_config: The logging_config of this CreateSimulationJobRequest.
        :type logging_config: CreateSimulationJobRequestLoggingConfig
        """

        self._logging_config = logging_config

    @property
    def max_job_duration_in_seconds(self):
        """Gets the max_job_duration_in_seconds of this CreateSimulationJobRequest.

        The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds. When <code>maxJobDurationInSeconds</code> is reached, the simulation job will status will transition to <code>Completed</code>.

        :return: The max_job_duration_in_seconds of this CreateSimulationJobRequest.
        :rtype: int
        """
        return self._max_job_duration_in_seconds

    @max_job_duration_in_seconds.setter
    def max_job_duration_in_seconds(self, max_job_duration_in_seconds):
        """Sets the max_job_duration_in_seconds of this CreateSimulationJobRequest.

        The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds. When <code>maxJobDurationInSeconds</code> is reached, the simulation job will status will transition to <code>Completed</code>.

        :param max_job_duration_in_seconds: The max_job_duration_in_seconds of this CreateSimulationJobRequest.
        :type max_job_duration_in_seconds: int
        """
        if max_job_duration_in_seconds is None:
            raise ValueError("Invalid value for `max_job_duration_in_seconds`, must not be `None`")

        self._max_job_duration_in_seconds = max_job_duration_in_seconds

    @property
    def iam_role(self):
        """Gets the iam_role of this CreateSimulationJobRequest.

        The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 

        :return: The iam_role of this CreateSimulationJobRequest.
        :rtype: str
        """
        return self._iam_role

    @iam_role.setter
    def iam_role(self, iam_role):
        """Sets the iam_role of this CreateSimulationJobRequest.

        The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 

        :param iam_role: The iam_role of this CreateSimulationJobRequest.
        :type iam_role: str
        """
        if iam_role is None:
            raise ValueError("Invalid value for `iam_role`, must not be `None`")
        if iam_role is not None and len(iam_role) > 255:
            raise ValueError("Invalid value for `iam_role`, length must be less than or equal to `255`")
        if iam_role is not None and len(iam_role) < 1:
            raise ValueError("Invalid value for `iam_role`, length must be greater than or equal to `1`")
        if iam_role is not None and not re.search(r'arn:aws:iam::\w+:role\/.*', iam_role):
            raise ValueError("Invalid value for `iam_role`, must be a follow pattern or equal to `/arn:aws:iam::\w+:role\/.*/`")

        self._iam_role = iam_role

    @property
    def failure_behavior(self):
        """Gets the failure_behavior of this CreateSimulationJobRequest.

        <p>The failure behavior the simulation job.</p> <dl> <dt>Continue</dt> <dd> <p>Leaves the instance running for its maximum timeout duration after a <code>4XX</code> error code.</p> </dd> <dt>Fail</dt> <dd> <p>Stop the simulation job and terminate the instance.</p> </dd> </dl>

        :return: The failure_behavior of this CreateSimulationJobRequest.
        :rtype: str
        """
        return self._failure_behavior

    @failure_behavior.setter
    def failure_behavior(self, failure_behavior):
        """Sets the failure_behavior of this CreateSimulationJobRequest.

        <p>The failure behavior the simulation job.</p> <dl> <dt>Continue</dt> <dd> <p>Leaves the instance running for its maximum timeout duration after a <code>4XX</code> error code.</p> </dd> <dt>Fail</dt> <dd> <p>Stop the simulation job and terminate the instance.</p> </dd> </dl>

        :param failure_behavior: The failure_behavior of this CreateSimulationJobRequest.
        :type failure_behavior: str
        """
        allowed_values = ["Fail", "Continue"]  # noqa: E501
        if failure_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_behavior` ({0}), must be one of {1}"
                .format(failure_behavior, allowed_values)
            )

        self._failure_behavior = failure_behavior

    @property
    def robot_applications(self):
        """Gets the robot_applications of this CreateSimulationJobRequest.

        The robot application to use in the simulation job.

        :return: The robot_applications of this CreateSimulationJobRequest.
        :rtype: List[RobotApplicationConfig]
        """
        return self._robot_applications

    @robot_applications.setter
    def robot_applications(self, robot_applications):
        """Sets the robot_applications of this CreateSimulationJobRequest.

        The robot application to use in the simulation job.

        :param robot_applications: The robot_applications of this CreateSimulationJobRequest.
        :type robot_applications: List[RobotApplicationConfig]
        """
        if robot_applications is not None and len(robot_applications) > 1:
            raise ValueError("Invalid value for `robot_applications`, number of items must be less than or equal to `1`")
        if robot_applications is not None and len(robot_applications) < 1:
            raise ValueError("Invalid value for `robot_applications`, number of items must be greater than or equal to `1`")

        self._robot_applications = robot_applications

    @property
    def simulation_applications(self):
        """Gets the simulation_applications of this CreateSimulationJobRequest.

        The simulation application to use in the simulation job.

        :return: The simulation_applications of this CreateSimulationJobRequest.
        :rtype: List[SimulationApplicationConfig]
        """
        return self._simulation_applications

    @simulation_applications.setter
    def simulation_applications(self, simulation_applications):
        """Sets the simulation_applications of this CreateSimulationJobRequest.

        The simulation application to use in the simulation job.

        :param simulation_applications: The simulation_applications of this CreateSimulationJobRequest.
        :type simulation_applications: List[SimulationApplicationConfig]
        """
        if simulation_applications is not None and len(simulation_applications) > 1:
            raise ValueError("Invalid value for `simulation_applications`, number of items must be less than or equal to `1`")
        if simulation_applications is not None and len(simulation_applications) < 1:
            raise ValueError("Invalid value for `simulation_applications`, number of items must be greater than or equal to `1`")

        self._simulation_applications = simulation_applications

    @property
    def data_sources(self):
        """Gets the data_sources of this CreateSimulationJobRequest.

        <p>Specify data sources to mount read-only files from S3 into your simulation. These files are available under <code>/opt/robomaker/datasources/data_source_name</code>. </p> <note> <p>There is a limit of 100 files and a combined size of 25GB for all <code>DataSourceConfig</code> objects. </p> </note>

        :return: The data_sources of this CreateSimulationJobRequest.
        :rtype: List[DataSourceConfig]
        """
        return self._data_sources

    @data_sources.setter
    def data_sources(self, data_sources):
        """Sets the data_sources of this CreateSimulationJobRequest.

        <p>Specify data sources to mount read-only files from S3 into your simulation. These files are available under <code>/opt/robomaker/datasources/data_source_name</code>. </p> <note> <p>There is a limit of 100 files and a combined size of 25GB for all <code>DataSourceConfig</code> objects. </p> </note>

        :param data_sources: The data_sources of this CreateSimulationJobRequest.
        :type data_sources: List[DataSourceConfig]
        """
        if data_sources is not None and len(data_sources) > 6:
            raise ValueError("Invalid value for `data_sources`, number of items must be less than or equal to `6`")
        if data_sources is not None and len(data_sources) < 1:
            raise ValueError("Invalid value for `data_sources`, number of items must be greater than or equal to `1`")

        self._data_sources = data_sources

    @property
    def tags(self):
        """Gets the tags of this CreateSimulationJobRequest.

        A map that contains tag keys and tag values that are attached to the simulation job.

        :return: The tags of this CreateSimulationJobRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSimulationJobRequest.

        A map that contains tag keys and tag values that are attached to the simulation job.

        :param tags: The tags of this CreateSimulationJobRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def vpc_config(self):
        """Gets the vpc_config of this CreateSimulationJobRequest.


        :return: The vpc_config of this CreateSimulationJobRequest.
        :rtype: CreateSimulationJobRequestVpcConfig
        """
        return self._vpc_config

    @vpc_config.setter
    def vpc_config(self, vpc_config):
        """Sets the vpc_config of this CreateSimulationJobRequest.


        :param vpc_config: The vpc_config of this CreateSimulationJobRequest.
        :type vpc_config: CreateSimulationJobRequestVpcConfig
        """

        self._vpc_config = vpc_config

    @property
    def compute(self):
        """Gets the compute of this CreateSimulationJobRequest.


        :return: The compute of this CreateSimulationJobRequest.
        :rtype: CreateSimulationJobRequestCompute
        """
        return self._compute

    @compute.setter
    def compute(self, compute):
        """Sets the compute of this CreateSimulationJobRequest.


        :param compute: The compute of this CreateSimulationJobRequest.
        :type compute: CreateSimulationJobRequestCompute
        """

        self._compute = compute
