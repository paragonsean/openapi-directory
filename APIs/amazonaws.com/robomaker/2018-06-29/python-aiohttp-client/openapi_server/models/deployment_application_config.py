# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_application_config_launch_config import DeploymentApplicationConfigLaunchConfig
from openapi_server import util


class DeploymentApplicationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application: str=None, application_version: str=None, launch_config: DeploymentApplicationConfigLaunchConfig=None):
        """DeploymentApplicationConfig - a model defined in OpenAPI

        :param application: The application of this DeploymentApplicationConfig.
        :param application_version: The application_version of this DeploymentApplicationConfig.
        :param launch_config: The launch_config of this DeploymentApplicationConfig.
        """
        self.openapi_types = {
            'application': str,
            'application_version': str,
            'launch_config': DeploymentApplicationConfigLaunchConfig
        }

        self.attribute_map = {
            'application': 'application',
            'application_version': 'applicationVersion',
            'launch_config': 'launchConfig'
        }

        self._application = application
        self._application_version = application_version
        self._launch_config = launch_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentApplicationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentApplicationConfig of this DeploymentApplicationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self):
        """Gets the application of this DeploymentApplicationConfig.


        :return: The application of this DeploymentApplicationConfig.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this DeploymentApplicationConfig.


        :param application: The application of this DeploymentApplicationConfig.
        :type application: str
        """
        if application is None:
            raise ValueError("Invalid value for `application`, must not be `None`")

        self._application = application

    @property
    def application_version(self):
        """Gets the application_version of this DeploymentApplicationConfig.


        :return: The application_version of this DeploymentApplicationConfig.
        :rtype: str
        """
        return self._application_version

    @application_version.setter
    def application_version(self, application_version):
        """Sets the application_version of this DeploymentApplicationConfig.


        :param application_version: The application_version of this DeploymentApplicationConfig.
        :type application_version: str
        """
        if application_version is None:
            raise ValueError("Invalid value for `application_version`, must not be `None`")

        self._application_version = application_version

    @property
    def launch_config(self):
        """Gets the launch_config of this DeploymentApplicationConfig.


        :return: The launch_config of this DeploymentApplicationConfig.
        :rtype: DeploymentApplicationConfigLaunchConfig
        """
        return self._launch_config

    @launch_config.setter
    def launch_config(self, launch_config):
        """Sets the launch_config of this DeploymentApplicationConfig.


        :param launch_config: The launch_config of this DeploymentApplicationConfig.
        :type launch_config: DeploymentApplicationConfigLaunchConfig
        """
        if launch_config is None:
            raise ValueError("Invalid value for `launch_config`, must not be `None`")

        self._launch_config = launch_config
