# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateSimulationApplicationVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application: str=None, current_revision_id: str=None, s3_etags: List[str]=None, image_digest: str=None):
        """CreateSimulationApplicationVersionRequest - a model defined in OpenAPI

        :param application: The application of this CreateSimulationApplicationVersionRequest.
        :param current_revision_id: The current_revision_id of this CreateSimulationApplicationVersionRequest.
        :param s3_etags: The s3_etags of this CreateSimulationApplicationVersionRequest.
        :param image_digest: The image_digest of this CreateSimulationApplicationVersionRequest.
        """
        self.openapi_types = {
            'application': str,
            'current_revision_id': str,
            's3_etags': List[str],
            'image_digest': str
        }

        self.attribute_map = {
            'application': 'application',
            'current_revision_id': 'currentRevisionId',
            's3_etags': 's3Etags',
            'image_digest': 'imageDigest'
        }

        self._application = application
        self._current_revision_id = current_revision_id
        self._s3_etags = s3_etags
        self._image_digest = image_digest

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSimulationApplicationVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSimulationApplicationVersion_request of this CreateSimulationApplicationVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self):
        """Gets the application of this CreateSimulationApplicationVersionRequest.

        The application information for the simulation application.

        :return: The application of this CreateSimulationApplicationVersionRequest.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this CreateSimulationApplicationVersionRequest.

        The application information for the simulation application.

        :param application: The application of this CreateSimulationApplicationVersionRequest.
        :type application: str
        """
        if application is None:
            raise ValueError("Invalid value for `application`, must not be `None`")
        if application is not None and len(application) > 1224:
            raise ValueError("Invalid value for `application`, length must be less than or equal to `1224`")
        if application is not None and len(application) < 1:
            raise ValueError("Invalid value for `application`, length must be greater than or equal to `1`")
        if application is not None and not re.search(r'arn:.*', application):
            raise ValueError("Invalid value for `application`, must be a follow pattern or equal to `/arn:.*/`")

        self._application = application

    @property
    def current_revision_id(self):
        """Gets the current_revision_id of this CreateSimulationApplicationVersionRequest.

        The current revision id for the simulation application. If you provide a value and it matches the latest revision ID, a new version will be created.

        :return: The current_revision_id of this CreateSimulationApplicationVersionRequest.
        :rtype: str
        """
        return self._current_revision_id

    @current_revision_id.setter
    def current_revision_id(self, current_revision_id):
        """Sets the current_revision_id of this CreateSimulationApplicationVersionRequest.

        The current revision id for the simulation application. If you provide a value and it matches the latest revision ID, a new version will be created.

        :param current_revision_id: The current_revision_id of this CreateSimulationApplicationVersionRequest.
        :type current_revision_id: str
        """
        if current_revision_id is not None and len(current_revision_id) > 40:
            raise ValueError("Invalid value for `current_revision_id`, length must be less than or equal to `40`")
        if current_revision_id is not None and len(current_revision_id) < 1:
            raise ValueError("Invalid value for `current_revision_id`, length must be greater than or equal to `1`")
        if current_revision_id is not None and not re.search(r'[a-zA-Z0-9_.\-]*', current_revision_id):
            raise ValueError("Invalid value for `current_revision_id`, must be a follow pattern or equal to `/[a-zA-Z0-9_.\-]*/`")

        self._current_revision_id = current_revision_id

    @property
    def s3_etags(self):
        """Gets the s3_etags of this CreateSimulationApplicationVersionRequest.

        The Amazon S3 eTag identifier for the zip file bundle that you use to create the simulation application.

        :return: The s3_etags of this CreateSimulationApplicationVersionRequest.
        :rtype: List[str]
        """
        return self._s3_etags

    @s3_etags.setter
    def s3_etags(self, s3_etags):
        """Sets the s3_etags of this CreateSimulationApplicationVersionRequest.

        The Amazon S3 eTag identifier for the zip file bundle that you use to create the simulation application.

        :param s3_etags: The s3_etags of this CreateSimulationApplicationVersionRequest.
        :type s3_etags: List[str]
        """

        self._s3_etags = s3_etags

    @property
    def image_digest(self):
        """Gets the image_digest of this CreateSimulationApplicationVersionRequest.

        The SHA256 digest used to identify the Docker image URI used to created the simulation application.

        :return: The image_digest of this CreateSimulationApplicationVersionRequest.
        :rtype: str
        """
        return self._image_digest

    @image_digest.setter
    def image_digest(self, image_digest):
        """Sets the image_digest of this CreateSimulationApplicationVersionRequest.

        The SHA256 digest used to identify the Docker image URI used to created the simulation application.

        :param image_digest: The image_digest of this CreateSimulationApplicationVersionRequest.
        :type image_digest: str
        """
        if image_digest is not None and len(image_digest) > 72:
            raise ValueError("Invalid value for `image_digest`, length must be less than or equal to `72`")
        if image_digest is not None and len(image_digest) < 0:
            raise ValueError("Invalid value for `image_digest`, length must be greater than or equal to `0`")
        if image_digest is not None and not re.search(r'[Ss][Hh][Aa]256:[0-9a-fA-F]{64}', image_digest):
            raise ValueError("Invalid value for `image_digest`, must be a follow pattern or equal to `/[Ss][Hh][Aa]256:[0-9a-fA-F]{64}/`")

        self._image_digest = image_digest
