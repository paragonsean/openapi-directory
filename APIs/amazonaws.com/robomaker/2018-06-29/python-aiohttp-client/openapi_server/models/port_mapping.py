# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_port: int=None, application_port: int=None, enable_on_public_ip: bool=None):
        """PortMapping - a model defined in OpenAPI

        :param job_port: The job_port of this PortMapping.
        :param application_port: The application_port of this PortMapping.
        :param enable_on_public_ip: The enable_on_public_ip of this PortMapping.
        """
        self.openapi_types = {
            'job_port': int,
            'application_port': int,
            'enable_on_public_ip': bool
        }

        self.attribute_map = {
            'job_port': 'jobPort',
            'application_port': 'applicationPort',
            'enable_on_public_ip': 'enableOnPublicIp'
        }

        self._job_port = job_port
        self._application_port = application_port
        self._enable_on_public_ip = enable_on_public_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PortMapping of this PortMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_port(self):
        """Gets the job_port of this PortMapping.


        :return: The job_port of this PortMapping.
        :rtype: int
        """
        return self._job_port

    @job_port.setter
    def job_port(self, job_port):
        """Sets the job_port of this PortMapping.


        :param job_port: The job_port of this PortMapping.
        :type job_port: int
        """
        if job_port is None:
            raise ValueError("Invalid value for `job_port`, must not be `None`")

        self._job_port = job_port

    @property
    def application_port(self):
        """Gets the application_port of this PortMapping.


        :return: The application_port of this PortMapping.
        :rtype: int
        """
        return self._application_port

    @application_port.setter
    def application_port(self, application_port):
        """Sets the application_port of this PortMapping.


        :param application_port: The application_port of this PortMapping.
        :type application_port: int
        """
        if application_port is None:
            raise ValueError("Invalid value for `application_port`, must not be `None`")

        self._application_port = application_port

    @property
    def enable_on_public_ip(self):
        """Gets the enable_on_public_ip of this PortMapping.


        :return: The enable_on_public_ip of this PortMapping.
        :rtype: bool
        """
        return self._enable_on_public_ip

    @enable_on_public_ip.setter
    def enable_on_public_ip(self, enable_on_public_ip):
        """Sets the enable_on_public_ip of this PortMapping.


        :param enable_on_public_ip: The enable_on_public_ip of this PortMapping.
        :type enable_on_public_ip: bool
        """

        self._enable_on_public_ip = enable_on_public_ip
