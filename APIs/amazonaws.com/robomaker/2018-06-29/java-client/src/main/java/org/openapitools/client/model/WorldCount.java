/*
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The number of worlds that will be created. You can configure the number of unique floorplans and the number of unique interiors for each floor plan. For example, if you want 1 world with 20 unique interiors, you set &lt;code&gt;floorplanCount &#x3D; 1&lt;/code&gt; and &lt;code&gt;interiorCountPerFloorplan &#x3D; 20&lt;/code&gt;. This will result in 20 worlds (&lt;code&gt;floorplanCount&lt;/code&gt; * &lt;code&gt;interiorCountPerFloorplan)&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;If you set &lt;code&gt;floorplanCount &#x3D; 4&lt;/code&gt; and &lt;code&gt;interiorCountPerFloorplan &#x3D; 5&lt;/code&gt;, there will be 20 worlds with 5 unique floor plans. &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:34.495509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorldCount {
  public static final String SERIALIZED_NAME_FLOORPLAN_COUNT = "floorplanCount";
  @SerializedName(SERIALIZED_NAME_FLOORPLAN_COUNT)
  private Integer floorplanCount;

  public static final String SERIALIZED_NAME_INTERIOR_COUNT_PER_FLOORPLAN = "interiorCountPerFloorplan";
  @SerializedName(SERIALIZED_NAME_INTERIOR_COUNT_PER_FLOORPLAN)
  private Integer interiorCountPerFloorplan;

  public WorldCount() {
  }

  public WorldCount floorplanCount(Integer floorplanCount) {
    this.floorplanCount = floorplanCount;
    return this;
  }

  /**
   * Get floorplanCount
   * @return floorplanCount
   */
  @javax.annotation.Nullable
  public Integer getFloorplanCount() {
    return floorplanCount;
  }

  public void setFloorplanCount(Integer floorplanCount) {
    this.floorplanCount = floorplanCount;
  }


  public WorldCount interiorCountPerFloorplan(Integer interiorCountPerFloorplan) {
    this.interiorCountPerFloorplan = interiorCountPerFloorplan;
    return this;
  }

  /**
   * Get interiorCountPerFloorplan
   * @return interiorCountPerFloorplan
   */
  @javax.annotation.Nullable
  public Integer getInteriorCountPerFloorplan() {
    return interiorCountPerFloorplan;
  }

  public void setInteriorCountPerFloorplan(Integer interiorCountPerFloorplan) {
    this.interiorCountPerFloorplan = interiorCountPerFloorplan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorldCount worldCount = (WorldCount) o;
    return Objects.equals(this.floorplanCount, worldCount.floorplanCount) &&
        Objects.equals(this.interiorCountPerFloorplan, worldCount.interiorCountPerFloorplan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(floorplanCount, interiorCountPerFloorplan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorldCount {\n");
    sb.append("    floorplanCount: ").append(toIndentedString(floorplanCount)).append("\n");
    sb.append("    interiorCountPerFloorplan: ").append(toIndentedString(interiorCountPerFloorplan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("floorplanCount");
    openapiFields.add("interiorCountPerFloorplan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorldCount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorldCount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorldCount is not found in the empty JSON string", WorldCount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorldCount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorldCount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `floorplanCount`
      if (jsonObj.get("floorplanCount") != null && !jsonObj.get("floorplanCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("floorplanCount"));
      }
      // validate the optional field `interiorCountPerFloorplan`
      if (jsonObj.get("interiorCountPerFloorplan") != null && !jsonObj.get("interiorCountPerFloorplan").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("interiorCountPerFloorplan"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorldCount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorldCount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorldCount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorldCount.class));

       return (TypeAdapter<T>) new TypeAdapter<WorldCount>() {
           @Override
           public void write(JsonWriter out, WorldCount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorldCount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorldCount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorldCount
   * @throws IOException if the JSON string is invalid with respect to WorldCount
   */
  public static WorldCount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorldCount.class);
  }

  /**
   * Convert an instance of WorldCount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

