/*
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:34.495509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VPCConfig {
  public static final String SERIALIZED_NAME_SUBNETS = "subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  private List subnets;

  public static final String SERIALIZED_NAME_SECURITY_GROUPS = "securityGroups";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
  private List securityGroups;

  public static final String SERIALIZED_NAME_ASSIGN_PUBLIC_IP = "assignPublicIp";
  @SerializedName(SERIALIZED_NAME_ASSIGN_PUBLIC_IP)
  private Boolean assignPublicIp;

  public VPCConfig() {
  }

  public VPCConfig subnets(List subnets) {
    this.subnets = subnets;
    return this;
  }

  /**
   * Get subnets
   * @return subnets
   */
  @javax.annotation.Nonnull
  public List getSubnets() {
    return subnets;
  }

  public void setSubnets(List subnets) {
    this.subnets = subnets;
  }


  public VPCConfig securityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
    return this;
  }

  /**
   * Get securityGroups
   * @return securityGroups
   */
  @javax.annotation.Nullable
  public List getSecurityGroups() {
    return securityGroups;
  }

  public void setSecurityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
  }


  public VPCConfig assignPublicIp(Boolean assignPublicIp) {
    this.assignPublicIp = assignPublicIp;
    return this;
  }

  /**
   * Get assignPublicIp
   * @return assignPublicIp
   */
  @javax.annotation.Nullable
  public Boolean getAssignPublicIp() {
    return assignPublicIp;
  }

  public void setAssignPublicIp(Boolean assignPublicIp) {
    this.assignPublicIp = assignPublicIp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VPCConfig vpCConfig = (VPCConfig) o;
    return Objects.equals(this.subnets, vpCConfig.subnets) &&
        Objects.equals(this.securityGroups, vpCConfig.securityGroups) &&
        Objects.equals(this.assignPublicIp, vpCConfig.assignPublicIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subnets, securityGroups, assignPublicIp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VPCConfig {\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
    sb.append("    assignPublicIp: ").append(toIndentedString(assignPublicIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subnets");
    openapiFields.add("securityGroups");
    openapiFields.add("assignPublicIp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("subnets");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VPCConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VPCConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VPCConfig is not found in the empty JSON string", VPCConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VPCConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VPCConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VPCConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `subnets`
      List.validateJsonElement(jsonObj.get("subnets"));
      // validate the optional field `securityGroups`
      if (jsonObj.get("securityGroups") != null && !jsonObj.get("securityGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("securityGroups"));
      }
      // validate the optional field `assignPublicIp`
      if (jsonObj.get("assignPublicIp") != null && !jsonObj.get("assignPublicIp").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("assignPublicIp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VPCConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VPCConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VPCConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VPCConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<VPCConfig>() {
           @Override
           public void write(JsonWriter out, VPCConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VPCConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VPCConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VPCConfig
   * @throws IOException if the JSON string is invalid with respect to VPCConfig
   */
  public static VPCConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VPCConfig.class);
  }

  /**
   * Convert an instance of VPCConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

