/*
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateWorldGenerationJobRequestWorldCount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateWorldGenerationJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:34.495509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateWorldGenerationJobRequest {
  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private String template;

  public static final String SERIALIZED_NAME_WORLD_COUNT = "worldCount";
  @SerializedName(SERIALIZED_NAME_WORLD_COUNT)
  private CreateWorldGenerationJobRequestWorldCount worldCount;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_WORLD_TAGS = "worldTags";
  @SerializedName(SERIALIZED_NAME_WORLD_TAGS)
  private Map<String, String> worldTags = new HashMap<>();

  public CreateWorldGenerationJobRequest() {
  }

  public CreateWorldGenerationJobRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateWorldGenerationJobRequest template(String template) {
    this.template = template;
    return this;
  }

  /**
   * The Amazon Resource Name (arn) of the world template describing the worlds you want to create.
   * @return template
   */
  @javax.annotation.Nonnull
  public String getTemplate() {
    return template;
  }

  public void setTemplate(String template) {
    this.template = template;
  }


  public CreateWorldGenerationJobRequest worldCount(CreateWorldGenerationJobRequestWorldCount worldCount) {
    this.worldCount = worldCount;
    return this;
  }

  /**
   * Get worldCount
   * @return worldCount
   */
  @javax.annotation.Nonnull
  public CreateWorldGenerationJobRequestWorldCount getWorldCount() {
    return worldCount;
  }

  public void setWorldCount(CreateWorldGenerationJobRequestWorldCount worldCount) {
    this.worldCount = worldCount;
  }


  public CreateWorldGenerationJobRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateWorldGenerationJobRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A map that contains tag keys and tag values that are attached to the world generator job.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateWorldGenerationJobRequest worldTags(Map<String, String> worldTags) {
    this.worldTags = worldTags;
    return this;
  }

  public CreateWorldGenerationJobRequest putWorldTagsItem(String key, String worldTagsItem) {
    if (this.worldTags == null) {
      this.worldTags = new HashMap<>();
    }
    this.worldTags.put(key, worldTagsItem);
    return this;
  }

  /**
   * A map that contains tag keys and tag values that are attached to the generated worlds.
   * @return worldTags
   */
  @javax.annotation.Nullable
  public Map<String, String> getWorldTags() {
    return worldTags;
  }

  public void setWorldTags(Map<String, String> worldTags) {
    this.worldTags = worldTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateWorldGenerationJobRequest createWorldGenerationJobRequest = (CreateWorldGenerationJobRequest) o;
    return Objects.equals(this.clientRequestToken, createWorldGenerationJobRequest.clientRequestToken) &&
        Objects.equals(this.template, createWorldGenerationJobRequest.template) &&
        Objects.equals(this.worldCount, createWorldGenerationJobRequest.worldCount) &&
        Objects.equals(this.tags, createWorldGenerationJobRequest.tags) &&
        Objects.equals(this.worldTags, createWorldGenerationJobRequest.worldTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientRequestToken, template, worldCount, tags, worldTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateWorldGenerationJobRequest {\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    worldCount: ").append(toIndentedString(worldCount)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    worldTags: ").append(toIndentedString(worldTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientRequestToken");
    openapiFields.add("template");
    openapiFields.add("worldCount");
    openapiFields.add("tags");
    openapiFields.add("worldTags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("template");
    openapiRequiredFields.add("worldCount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateWorldGenerationJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateWorldGenerationJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateWorldGenerationJobRequest is not found in the empty JSON string", CreateWorldGenerationJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateWorldGenerationJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateWorldGenerationJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateWorldGenerationJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientRequestToken") != null && !jsonObj.get("clientRequestToken").isJsonNull()) && !jsonObj.get("clientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientRequestToken").toString()));
      }
      if (!jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
      // validate the required field `worldCount`
      CreateWorldGenerationJobRequestWorldCount.validateJsonElement(jsonObj.get("worldCount"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateWorldGenerationJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateWorldGenerationJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateWorldGenerationJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateWorldGenerationJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateWorldGenerationJobRequest>() {
           @Override
           public void write(JsonWriter out, CreateWorldGenerationJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateWorldGenerationJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateWorldGenerationJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateWorldGenerationJobRequest
   * @throws IOException if the JSON string is invalid with respect to CreateWorldGenerationJobRequest
   */
  public static CreateWorldGenerationJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateWorldGenerationJobRequest.class);
  }

  /**
   * Convert an instance of CreateWorldGenerationJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

