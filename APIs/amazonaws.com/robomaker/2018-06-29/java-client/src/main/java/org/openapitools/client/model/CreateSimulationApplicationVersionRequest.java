/*
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSimulationApplicationVersionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:34.495509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSimulationApplicationVersionRequest {
  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  private String application;

  public static final String SERIALIZED_NAME_CURRENT_REVISION_ID = "currentRevisionId";
  @SerializedName(SERIALIZED_NAME_CURRENT_REVISION_ID)
  private String currentRevisionId;

  public static final String SERIALIZED_NAME_S3_ETAGS = "s3Etags";
  @SerializedName(SERIALIZED_NAME_S3_ETAGS)
  private List<String> s3Etags = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_DIGEST = "imageDigest";
  @SerializedName(SERIALIZED_NAME_IMAGE_DIGEST)
  private String imageDigest;

  public CreateSimulationApplicationVersionRequest() {
  }

  public CreateSimulationApplicationVersionRequest application(String application) {
    this.application = application;
    return this;
  }

  /**
   * The application information for the simulation application.
   * @return application
   */
  @javax.annotation.Nonnull
  public String getApplication() {
    return application;
  }

  public void setApplication(String application) {
    this.application = application;
  }


  public CreateSimulationApplicationVersionRequest currentRevisionId(String currentRevisionId) {
    this.currentRevisionId = currentRevisionId;
    return this;
  }

  /**
   * The current revision id for the simulation application. If you provide a value and it matches the latest revision ID, a new version will be created.
   * @return currentRevisionId
   */
  @javax.annotation.Nullable
  public String getCurrentRevisionId() {
    return currentRevisionId;
  }

  public void setCurrentRevisionId(String currentRevisionId) {
    this.currentRevisionId = currentRevisionId;
  }


  public CreateSimulationApplicationVersionRequest s3Etags(List<String> s3Etags) {
    this.s3Etags = s3Etags;
    return this;
  }

  public CreateSimulationApplicationVersionRequest addS3EtagsItem(String s3EtagsItem) {
    if (this.s3Etags == null) {
      this.s3Etags = new ArrayList<>();
    }
    this.s3Etags.add(s3EtagsItem);
    return this;
  }

  /**
   * The Amazon S3 eTag identifier for the zip file bundle that you use to create the simulation application.
   * @return s3Etags
   */
  @javax.annotation.Nullable
  public List<String> getS3Etags() {
    return s3Etags;
  }

  public void setS3Etags(List<String> s3Etags) {
    this.s3Etags = s3Etags;
  }


  public CreateSimulationApplicationVersionRequest imageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * The SHA256 digest used to identify the Docker image URI used to created the simulation application.
   * @return imageDigest
   */
  @javax.annotation.Nullable
  public String getImageDigest() {
    return imageDigest;
  }

  public void setImageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSimulationApplicationVersionRequest createSimulationApplicationVersionRequest = (CreateSimulationApplicationVersionRequest) o;
    return Objects.equals(this.application, createSimulationApplicationVersionRequest.application) &&
        Objects.equals(this.currentRevisionId, createSimulationApplicationVersionRequest.currentRevisionId) &&
        Objects.equals(this.s3Etags, createSimulationApplicationVersionRequest.s3Etags) &&
        Objects.equals(this.imageDigest, createSimulationApplicationVersionRequest.imageDigest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(application, currentRevisionId, s3Etags, imageDigest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSimulationApplicationVersionRequest {\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    currentRevisionId: ").append(toIndentedString(currentRevisionId)).append("\n");
    sb.append("    s3Etags: ").append(toIndentedString(s3Etags)).append("\n");
    sb.append("    imageDigest: ").append(toIndentedString(imageDigest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("application");
    openapiFields.add("currentRevisionId");
    openapiFields.add("s3Etags");
    openapiFields.add("imageDigest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("application");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSimulationApplicationVersionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSimulationApplicationVersionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSimulationApplicationVersionRequest is not found in the empty JSON string", CreateSimulationApplicationVersionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSimulationApplicationVersionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSimulationApplicationVersionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSimulationApplicationVersionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("application").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application").toString()));
      }
      if ((jsonObj.get("currentRevisionId") != null && !jsonObj.get("currentRevisionId").isJsonNull()) && !jsonObj.get("currentRevisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentRevisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentRevisionId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("s3Etags") != null && !jsonObj.get("s3Etags").isJsonNull() && !jsonObj.get("s3Etags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3Etags` to be an array in the JSON string but got `%s`", jsonObj.get("s3Etags").toString()));
      }
      if ((jsonObj.get("imageDigest") != null && !jsonObj.get("imageDigest").isJsonNull()) && !jsonObj.get("imageDigest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageDigest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageDigest").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSimulationApplicationVersionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSimulationApplicationVersionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSimulationApplicationVersionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSimulationApplicationVersionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSimulationApplicationVersionRequest>() {
           @Override
           public void write(JsonWriter out, CreateSimulationApplicationVersionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSimulationApplicationVersionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSimulationApplicationVersionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSimulationApplicationVersionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSimulationApplicationVersionRequest
   */
  public static CreateSimulationApplicationVersionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSimulationApplicationVersionRequest.class);
  }

  /**
   * Convert an instance of CreateSimulationApplicationVersionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

