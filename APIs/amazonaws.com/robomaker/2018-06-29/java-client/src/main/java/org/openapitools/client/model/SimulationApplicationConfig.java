/*
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SimulationApplicationConfigLaunchConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a simulation application configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:34.495509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SimulationApplicationConfig {
  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  private String application;

  public static final String SERIALIZED_NAME_APPLICATION_VERSION = "applicationVersion";
  @SerializedName(SERIALIZED_NAME_APPLICATION_VERSION)
  private String applicationVersion;

  public static final String SERIALIZED_NAME_LAUNCH_CONFIG = "launchConfig";
  @SerializedName(SERIALIZED_NAME_LAUNCH_CONFIG)
  private SimulationApplicationConfigLaunchConfig launchConfig;

  public static final String SERIALIZED_NAME_UPLOAD_CONFIGURATIONS = "uploadConfigurations";
  @SerializedName(SERIALIZED_NAME_UPLOAD_CONFIGURATIONS)
  private List uploadConfigurations;

  public static final String SERIALIZED_NAME_WORLD_CONFIGS = "worldConfigs";
  @SerializedName(SERIALIZED_NAME_WORLD_CONFIGS)
  private List worldConfigs;

  public static final String SERIALIZED_NAME_USE_DEFAULT_UPLOAD_CONFIGURATIONS = "useDefaultUploadConfigurations";
  @SerializedName(SERIALIZED_NAME_USE_DEFAULT_UPLOAD_CONFIGURATIONS)
  private Boolean useDefaultUploadConfigurations;

  public static final String SERIALIZED_NAME_TOOLS = "tools";
  @SerializedName(SERIALIZED_NAME_TOOLS)
  private List tools;

  public static final String SERIALIZED_NAME_USE_DEFAULT_TOOLS = "useDefaultTools";
  @SerializedName(SERIALIZED_NAME_USE_DEFAULT_TOOLS)
  private Boolean useDefaultTools;

  public SimulationApplicationConfig() {
  }

  public SimulationApplicationConfig application(String application) {
    this.application = application;
    return this;
  }

  /**
   * Get application
   * @return application
   */
  @javax.annotation.Nonnull
  public String getApplication() {
    return application;
  }

  public void setApplication(String application) {
    this.application = application;
  }


  public SimulationApplicationConfig applicationVersion(String applicationVersion) {
    this.applicationVersion = applicationVersion;
    return this;
  }

  /**
   * Get applicationVersion
   * @return applicationVersion
   */
  @javax.annotation.Nullable
  public String getApplicationVersion() {
    return applicationVersion;
  }

  public void setApplicationVersion(String applicationVersion) {
    this.applicationVersion = applicationVersion;
  }


  public SimulationApplicationConfig launchConfig(SimulationApplicationConfigLaunchConfig launchConfig) {
    this.launchConfig = launchConfig;
    return this;
  }

  /**
   * Get launchConfig
   * @return launchConfig
   */
  @javax.annotation.Nonnull
  public SimulationApplicationConfigLaunchConfig getLaunchConfig() {
    return launchConfig;
  }

  public void setLaunchConfig(SimulationApplicationConfigLaunchConfig launchConfig) {
    this.launchConfig = launchConfig;
  }


  public SimulationApplicationConfig uploadConfigurations(List uploadConfigurations) {
    this.uploadConfigurations = uploadConfigurations;
    return this;
  }

  /**
   * Get uploadConfigurations
   * @return uploadConfigurations
   */
  @javax.annotation.Nullable
  public List getUploadConfigurations() {
    return uploadConfigurations;
  }

  public void setUploadConfigurations(List uploadConfigurations) {
    this.uploadConfigurations = uploadConfigurations;
  }


  public SimulationApplicationConfig worldConfigs(List worldConfigs) {
    this.worldConfigs = worldConfigs;
    return this;
  }

  /**
   * Get worldConfigs
   * @return worldConfigs
   */
  @javax.annotation.Nullable
  public List getWorldConfigs() {
    return worldConfigs;
  }

  public void setWorldConfigs(List worldConfigs) {
    this.worldConfigs = worldConfigs;
  }


  public SimulationApplicationConfig useDefaultUploadConfigurations(Boolean useDefaultUploadConfigurations) {
    this.useDefaultUploadConfigurations = useDefaultUploadConfigurations;
    return this;
  }

  /**
   * Get useDefaultUploadConfigurations
   * @return useDefaultUploadConfigurations
   */
  @javax.annotation.Nullable
  public Boolean getUseDefaultUploadConfigurations() {
    return useDefaultUploadConfigurations;
  }

  public void setUseDefaultUploadConfigurations(Boolean useDefaultUploadConfigurations) {
    this.useDefaultUploadConfigurations = useDefaultUploadConfigurations;
  }


  public SimulationApplicationConfig tools(List tools) {
    this.tools = tools;
    return this;
  }

  /**
   * Get tools
   * @return tools
   */
  @javax.annotation.Nullable
  public List getTools() {
    return tools;
  }

  public void setTools(List tools) {
    this.tools = tools;
  }


  public SimulationApplicationConfig useDefaultTools(Boolean useDefaultTools) {
    this.useDefaultTools = useDefaultTools;
    return this;
  }

  /**
   * Get useDefaultTools
   * @return useDefaultTools
   */
  @javax.annotation.Nullable
  public Boolean getUseDefaultTools() {
    return useDefaultTools;
  }

  public void setUseDefaultTools(Boolean useDefaultTools) {
    this.useDefaultTools = useDefaultTools;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimulationApplicationConfig simulationApplicationConfig = (SimulationApplicationConfig) o;
    return Objects.equals(this.application, simulationApplicationConfig.application) &&
        Objects.equals(this.applicationVersion, simulationApplicationConfig.applicationVersion) &&
        Objects.equals(this.launchConfig, simulationApplicationConfig.launchConfig) &&
        Objects.equals(this.uploadConfigurations, simulationApplicationConfig.uploadConfigurations) &&
        Objects.equals(this.worldConfigs, simulationApplicationConfig.worldConfigs) &&
        Objects.equals(this.useDefaultUploadConfigurations, simulationApplicationConfig.useDefaultUploadConfigurations) &&
        Objects.equals(this.tools, simulationApplicationConfig.tools) &&
        Objects.equals(this.useDefaultTools, simulationApplicationConfig.useDefaultTools);
  }

  @Override
  public int hashCode() {
    return Objects.hash(application, applicationVersion, launchConfig, uploadConfigurations, worldConfigs, useDefaultUploadConfigurations, tools, useDefaultTools);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimulationApplicationConfig {\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    applicationVersion: ").append(toIndentedString(applicationVersion)).append("\n");
    sb.append("    launchConfig: ").append(toIndentedString(launchConfig)).append("\n");
    sb.append("    uploadConfigurations: ").append(toIndentedString(uploadConfigurations)).append("\n");
    sb.append("    worldConfigs: ").append(toIndentedString(worldConfigs)).append("\n");
    sb.append("    useDefaultUploadConfigurations: ").append(toIndentedString(useDefaultUploadConfigurations)).append("\n");
    sb.append("    tools: ").append(toIndentedString(tools)).append("\n");
    sb.append("    useDefaultTools: ").append(toIndentedString(useDefaultTools)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("application");
    openapiFields.add("applicationVersion");
    openapiFields.add("launchConfig");
    openapiFields.add("uploadConfigurations");
    openapiFields.add("worldConfigs");
    openapiFields.add("useDefaultUploadConfigurations");
    openapiFields.add("tools");
    openapiFields.add("useDefaultTools");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("application");
    openapiRequiredFields.add("launchConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimulationApplicationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimulationApplicationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimulationApplicationConfig is not found in the empty JSON string", SimulationApplicationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimulationApplicationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimulationApplicationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimulationApplicationConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `application`
      String.validateJsonElement(jsonObj.get("application"));
      // validate the optional field `applicationVersion`
      if (jsonObj.get("applicationVersion") != null && !jsonObj.get("applicationVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("applicationVersion"));
      }
      // validate the required field `launchConfig`
      SimulationApplicationConfigLaunchConfig.validateJsonElement(jsonObj.get("launchConfig"));
      // validate the optional field `uploadConfigurations`
      if (jsonObj.get("uploadConfigurations") != null && !jsonObj.get("uploadConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("uploadConfigurations"));
      }
      // validate the optional field `worldConfigs`
      if (jsonObj.get("worldConfigs") != null && !jsonObj.get("worldConfigs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("worldConfigs"));
      }
      // validate the optional field `useDefaultUploadConfigurations`
      if (jsonObj.get("useDefaultUploadConfigurations") != null && !jsonObj.get("useDefaultUploadConfigurations").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("useDefaultUploadConfigurations"));
      }
      // validate the optional field `tools`
      if (jsonObj.get("tools") != null && !jsonObj.get("tools").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tools"));
      }
      // validate the optional field `useDefaultTools`
      if (jsonObj.get("useDefaultTools") != null && !jsonObj.get("useDefaultTools").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("useDefaultTools"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimulationApplicationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimulationApplicationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimulationApplicationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimulationApplicationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SimulationApplicationConfig>() {
           @Override
           public void write(JsonWriter out, SimulationApplicationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimulationApplicationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimulationApplicationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimulationApplicationConfig
   * @throws IOException if the JSON string is invalid with respect to SimulationApplicationConfig
   */
  public static SimulationApplicationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimulationApplicationConfig.class);
  }

  /**
   * Convert an instance of SimulationApplicationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

