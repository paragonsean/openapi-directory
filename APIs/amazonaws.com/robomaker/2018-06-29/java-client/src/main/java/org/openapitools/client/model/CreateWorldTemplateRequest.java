/*
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateWorldTemplateRequestTemplateLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateWorldTemplateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:34.495509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateWorldTemplateRequest {
  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEMPLATE_BODY = "templateBody";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_BODY)
  private String templateBody;

  public static final String SERIALIZED_NAME_TEMPLATE_LOCATION = "templateLocation";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_LOCATION)
  private CreateWorldTemplateRequestTemplateLocation templateLocation;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateWorldTemplateRequest() {
  }

  public CreateWorldTemplateRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateWorldTemplateRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the world template.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateWorldTemplateRequest templateBody(String templateBody) {
    this.templateBody = templateBody;
    return this;
  }

  /**
   * The world template body.
   * @return templateBody
   */
  @javax.annotation.Nullable
  public String getTemplateBody() {
    return templateBody;
  }

  public void setTemplateBody(String templateBody) {
    this.templateBody = templateBody;
  }


  public CreateWorldTemplateRequest templateLocation(CreateWorldTemplateRequestTemplateLocation templateLocation) {
    this.templateLocation = templateLocation;
    return this;
  }

  /**
   * Get templateLocation
   * @return templateLocation
   */
  @javax.annotation.Nullable
  public CreateWorldTemplateRequestTemplateLocation getTemplateLocation() {
    return templateLocation;
  }

  public void setTemplateLocation(CreateWorldTemplateRequestTemplateLocation templateLocation) {
    this.templateLocation = templateLocation;
  }


  public CreateWorldTemplateRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateWorldTemplateRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A map that contains tag keys and tag values that are attached to the world template.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateWorldTemplateRequest createWorldTemplateRequest = (CreateWorldTemplateRequest) o;
    return Objects.equals(this.clientRequestToken, createWorldTemplateRequest.clientRequestToken) &&
        Objects.equals(this.name, createWorldTemplateRequest.name) &&
        Objects.equals(this.templateBody, createWorldTemplateRequest.templateBody) &&
        Objects.equals(this.templateLocation, createWorldTemplateRequest.templateLocation) &&
        Objects.equals(this.tags, createWorldTemplateRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientRequestToken, name, templateBody, templateLocation, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateWorldTemplateRequest {\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    templateBody: ").append(toIndentedString(templateBody)).append("\n");
    sb.append("    templateLocation: ").append(toIndentedString(templateLocation)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientRequestToken");
    openapiFields.add("name");
    openapiFields.add("templateBody");
    openapiFields.add("templateLocation");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateWorldTemplateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateWorldTemplateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateWorldTemplateRequest is not found in the empty JSON string", CreateWorldTemplateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateWorldTemplateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateWorldTemplateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientRequestToken") != null && !jsonObj.get("clientRequestToken").isJsonNull()) && !jsonObj.get("clientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientRequestToken").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("templateBody") != null && !jsonObj.get("templateBody").isJsonNull()) && !jsonObj.get("templateBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateBody").toString()));
      }
      // validate the optional field `templateLocation`
      if (jsonObj.get("templateLocation") != null && !jsonObj.get("templateLocation").isJsonNull()) {
        CreateWorldTemplateRequestTemplateLocation.validateJsonElement(jsonObj.get("templateLocation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateWorldTemplateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateWorldTemplateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateWorldTemplateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateWorldTemplateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateWorldTemplateRequest>() {
           @Override
           public void write(JsonWriter out, CreateWorldTemplateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateWorldTemplateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateWorldTemplateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateWorldTemplateRequest
   * @throws IOException if the JSON string is invalid with respect to CreateWorldTemplateRequest
   */
  public static CreateWorldTemplateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateWorldTemplateRequest.class);
  }

  /**
   * Convert an instance of CreateWorldTemplateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

