/*
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DescribeSimulationJobBatchResponseBatchPolicy;
import org.openapitools.client.model.SimulationJobBatchErrorCode;
import org.openapitools.client.model.SimulationJobBatchStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartSimulationJobBatchResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:34.495509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartSimulationJobBatchResponse {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SimulationJobBatchStatus status;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_BATCH_POLICY = "batchPolicy";
  @SerializedName(SERIALIZED_NAME_BATCH_POLICY)
  private DescribeSimulationJobBatchResponseBatchPolicy batchPolicy;

  public static final String SERIALIZED_NAME_FAILURE_CODE = "failureCode";
  @SerializedName(SERIALIZED_NAME_FAILURE_CODE)
  private SimulationJobBatchErrorCode failureCode;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_FAILED_REQUESTS = "failedRequests";
  @SerializedName(SERIALIZED_NAME_FAILED_REQUESTS)
  private List failedRequests;

  public static final String SERIALIZED_NAME_PENDING_REQUESTS = "pendingRequests";
  @SerializedName(SERIALIZED_NAME_PENDING_REQUESTS)
  private List pendingRequests;

  public static final String SERIALIZED_NAME_CREATED_REQUESTS = "createdRequests";
  @SerializedName(SERIALIZED_NAME_CREATED_REQUESTS)
  private List createdRequests;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public StartSimulationJobBatchResponse() {
  }

  public StartSimulationJobBatchResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public StartSimulationJobBatchResponse status(SimulationJobBatchStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SimulationJobBatchStatus getStatus() {
    return status;
  }

  public void setStatus(SimulationJobBatchStatus status) {
    this.status = status;
  }


  public StartSimulationJobBatchResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public StartSimulationJobBatchResponse clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Get clientRequestToken
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public StartSimulationJobBatchResponse batchPolicy(DescribeSimulationJobBatchResponseBatchPolicy batchPolicy) {
    this.batchPolicy = batchPolicy;
    return this;
  }

  /**
   * Get batchPolicy
   * @return batchPolicy
   */
  @javax.annotation.Nullable
  public DescribeSimulationJobBatchResponseBatchPolicy getBatchPolicy() {
    return batchPolicy;
  }

  public void setBatchPolicy(DescribeSimulationJobBatchResponseBatchPolicy batchPolicy) {
    this.batchPolicy = batchPolicy;
  }


  public StartSimulationJobBatchResponse failureCode(SimulationJobBatchErrorCode failureCode) {
    this.failureCode = failureCode;
    return this;
  }

  /**
   * Get failureCode
   * @return failureCode
   */
  @javax.annotation.Nullable
  public SimulationJobBatchErrorCode getFailureCode() {
    return failureCode;
  }

  public void setFailureCode(SimulationJobBatchErrorCode failureCode) {
    this.failureCode = failureCode;
  }


  public StartSimulationJobBatchResponse failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public StartSimulationJobBatchResponse failedRequests(List failedRequests) {
    this.failedRequests = failedRequests;
    return this;
  }

  /**
   * Get failedRequests
   * @return failedRequests
   */
  @javax.annotation.Nullable
  public List getFailedRequests() {
    return failedRequests;
  }

  public void setFailedRequests(List failedRequests) {
    this.failedRequests = failedRequests;
  }


  public StartSimulationJobBatchResponse pendingRequests(List pendingRequests) {
    this.pendingRequests = pendingRequests;
    return this;
  }

  /**
   * Get pendingRequests
   * @return pendingRequests
   */
  @javax.annotation.Nullable
  public List getPendingRequests() {
    return pendingRequests;
  }

  public void setPendingRequests(List pendingRequests) {
    this.pendingRequests = pendingRequests;
  }


  public StartSimulationJobBatchResponse createdRequests(List createdRequests) {
    this.createdRequests = createdRequests;
    return this;
  }

  /**
   * Get createdRequests
   * @return createdRequests
   */
  @javax.annotation.Nullable
  public List getCreatedRequests() {
    return createdRequests;
  }

  public void setCreatedRequests(List createdRequests) {
    this.createdRequests = createdRequests;
  }


  public StartSimulationJobBatchResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartSimulationJobBatchResponse startSimulationJobBatchResponse = (StartSimulationJobBatchResponse) o;
    return Objects.equals(this.arn, startSimulationJobBatchResponse.arn) &&
        Objects.equals(this.status, startSimulationJobBatchResponse.status) &&
        Objects.equals(this.createdAt, startSimulationJobBatchResponse.createdAt) &&
        Objects.equals(this.clientRequestToken, startSimulationJobBatchResponse.clientRequestToken) &&
        Objects.equals(this.batchPolicy, startSimulationJobBatchResponse.batchPolicy) &&
        Objects.equals(this.failureCode, startSimulationJobBatchResponse.failureCode) &&
        Objects.equals(this.failureReason, startSimulationJobBatchResponse.failureReason) &&
        Objects.equals(this.failedRequests, startSimulationJobBatchResponse.failedRequests) &&
        Objects.equals(this.pendingRequests, startSimulationJobBatchResponse.pendingRequests) &&
        Objects.equals(this.createdRequests, startSimulationJobBatchResponse.createdRequests) &&
        Objects.equals(this.tags, startSimulationJobBatchResponse.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, status, createdAt, clientRequestToken, batchPolicy, failureCode, failureReason, failedRequests, pendingRequests, createdRequests, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartSimulationJobBatchResponse {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    batchPolicy: ").append(toIndentedString(batchPolicy)).append("\n");
    sb.append("    failureCode: ").append(toIndentedString(failureCode)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    failedRequests: ").append(toIndentedString(failedRequests)).append("\n");
    sb.append("    pendingRequests: ").append(toIndentedString(pendingRequests)).append("\n");
    sb.append("    createdRequests: ").append(toIndentedString(createdRequests)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("status");
    openapiFields.add("createdAt");
    openapiFields.add("clientRequestToken");
    openapiFields.add("batchPolicy");
    openapiFields.add("failureCode");
    openapiFields.add("failureReason");
    openapiFields.add("failedRequests");
    openapiFields.add("pendingRequests");
    openapiFields.add("createdRequests");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartSimulationJobBatchResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartSimulationJobBatchResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartSimulationJobBatchResponse is not found in the empty JSON string", StartSimulationJobBatchResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartSimulationJobBatchResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartSimulationJobBatchResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        SimulationJobBatchStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `clientRequestToken`
      if (jsonObj.get("clientRequestToken") != null && !jsonObj.get("clientRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("clientRequestToken"));
      }
      // validate the optional field `batchPolicy`
      if (jsonObj.get("batchPolicy") != null && !jsonObj.get("batchPolicy").isJsonNull()) {
        DescribeSimulationJobBatchResponseBatchPolicy.validateJsonElement(jsonObj.get("batchPolicy"));
      }
      // validate the optional field `failureCode`
      if (jsonObj.get("failureCode") != null && !jsonObj.get("failureCode").isJsonNull()) {
        SimulationJobBatchErrorCode.validateJsonElement(jsonObj.get("failureCode"));
      }
      // validate the optional field `failureReason`
      if (jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("failureReason"));
      }
      // validate the optional field `failedRequests`
      if (jsonObj.get("failedRequests") != null && !jsonObj.get("failedRequests").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("failedRequests"));
      }
      // validate the optional field `pendingRequests`
      if (jsonObj.get("pendingRequests") != null && !jsonObj.get("pendingRequests").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("pendingRequests"));
      }
      // validate the optional field `createdRequests`
      if (jsonObj.get("createdRequests") != null && !jsonObj.get("createdRequests").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("createdRequests"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartSimulationJobBatchResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartSimulationJobBatchResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartSimulationJobBatchResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartSimulationJobBatchResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<StartSimulationJobBatchResponse>() {
           @Override
           public void write(JsonWriter out, StartSimulationJobBatchResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartSimulationJobBatchResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartSimulationJobBatchResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartSimulationJobBatchResponse
   * @throws IOException if the JSON string is invalid with respect to StartSimulationJobBatchResponse
   */
  public static StartSimulationJobBatchResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartSimulationJobBatchResponse.class);
  }

  /**
   * Convert an instance of StartSimulationJobBatchResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

