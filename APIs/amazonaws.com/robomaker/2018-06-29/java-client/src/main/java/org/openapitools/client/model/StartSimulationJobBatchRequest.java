/*
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.SimulationJobRequest;
import org.openapitools.client.model.StartSimulationJobBatchRequestBatchPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartSimulationJobBatchRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:34.495509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartSimulationJobBatchRequest {
  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_BATCH_POLICY = "batchPolicy";
  @SerializedName(SERIALIZED_NAME_BATCH_POLICY)
  private StartSimulationJobBatchRequestBatchPolicy batchPolicy;

  public static final String SERIALIZED_NAME_CREATE_SIMULATION_JOB_REQUESTS = "createSimulationJobRequests";
  @SerializedName(SERIALIZED_NAME_CREATE_SIMULATION_JOB_REQUESTS)
  private List<SimulationJobRequest> createSimulationJobRequests = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public StartSimulationJobBatchRequest() {
  }

  public StartSimulationJobBatchRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public StartSimulationJobBatchRequest batchPolicy(StartSimulationJobBatchRequestBatchPolicy batchPolicy) {
    this.batchPolicy = batchPolicy;
    return this;
  }

  /**
   * Get batchPolicy
   * @return batchPolicy
   */
  @javax.annotation.Nullable
  public StartSimulationJobBatchRequestBatchPolicy getBatchPolicy() {
    return batchPolicy;
  }

  public void setBatchPolicy(StartSimulationJobBatchRequestBatchPolicy batchPolicy) {
    this.batchPolicy = batchPolicy;
  }


  public StartSimulationJobBatchRequest createSimulationJobRequests(List<SimulationJobRequest> createSimulationJobRequests) {
    this.createSimulationJobRequests = createSimulationJobRequests;
    return this;
  }

  public StartSimulationJobBatchRequest addCreateSimulationJobRequestsItem(SimulationJobRequest createSimulationJobRequestsItem) {
    if (this.createSimulationJobRequests == null) {
      this.createSimulationJobRequests = new ArrayList<>();
    }
    this.createSimulationJobRequests.add(createSimulationJobRequestsItem);
    return this;
  }

  /**
   * A list of simulation job requests to create in the batch.
   * @return createSimulationJobRequests
   */
  @javax.annotation.Nonnull
  public List<SimulationJobRequest> getCreateSimulationJobRequests() {
    return createSimulationJobRequests;
  }

  public void setCreateSimulationJobRequests(List<SimulationJobRequest> createSimulationJobRequests) {
    this.createSimulationJobRequests = createSimulationJobRequests;
  }


  public StartSimulationJobBatchRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public StartSimulationJobBatchRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A map that contains tag keys and tag values that are attached to the deployment job batch.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartSimulationJobBatchRequest startSimulationJobBatchRequest = (StartSimulationJobBatchRequest) o;
    return Objects.equals(this.clientRequestToken, startSimulationJobBatchRequest.clientRequestToken) &&
        Objects.equals(this.batchPolicy, startSimulationJobBatchRequest.batchPolicy) &&
        Objects.equals(this.createSimulationJobRequests, startSimulationJobBatchRequest.createSimulationJobRequests) &&
        Objects.equals(this.tags, startSimulationJobBatchRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientRequestToken, batchPolicy, createSimulationJobRequests, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartSimulationJobBatchRequest {\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    batchPolicy: ").append(toIndentedString(batchPolicy)).append("\n");
    sb.append("    createSimulationJobRequests: ").append(toIndentedString(createSimulationJobRequests)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientRequestToken");
    openapiFields.add("batchPolicy");
    openapiFields.add("createSimulationJobRequests");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createSimulationJobRequests");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartSimulationJobBatchRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartSimulationJobBatchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartSimulationJobBatchRequest is not found in the empty JSON string", StartSimulationJobBatchRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartSimulationJobBatchRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartSimulationJobBatchRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartSimulationJobBatchRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientRequestToken") != null && !jsonObj.get("clientRequestToken").isJsonNull()) && !jsonObj.get("clientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientRequestToken").toString()));
      }
      // validate the optional field `batchPolicy`
      if (jsonObj.get("batchPolicy") != null && !jsonObj.get("batchPolicy").isJsonNull()) {
        StartSimulationJobBatchRequestBatchPolicy.validateJsonElement(jsonObj.get("batchPolicy"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("createSimulationJobRequests").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `createSimulationJobRequests` to be an array in the JSON string but got `%s`", jsonObj.get("createSimulationJobRequests").toString()));
      }

      JsonArray jsonArraycreateSimulationJobRequests = jsonObj.getAsJsonArray("createSimulationJobRequests");
      // validate the required field `createSimulationJobRequests` (array)
      for (int i = 0; i < jsonArraycreateSimulationJobRequests.size(); i++) {
        SimulationJobRequest.validateJsonElement(jsonArraycreateSimulationJobRequests.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartSimulationJobBatchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartSimulationJobBatchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartSimulationJobBatchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartSimulationJobBatchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartSimulationJobBatchRequest>() {
           @Override
           public void write(JsonWriter out, StartSimulationJobBatchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartSimulationJobBatchRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartSimulationJobBatchRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartSimulationJobBatchRequest
   * @throws IOException if the JSON string is invalid with respect to StartSimulationJobBatchRequest
   */
  public static StartSimulationJobBatchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartSimulationJobBatchRequest.class);
  }

  /**
   * Convert an instance of StartSimulationJobBatchRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

