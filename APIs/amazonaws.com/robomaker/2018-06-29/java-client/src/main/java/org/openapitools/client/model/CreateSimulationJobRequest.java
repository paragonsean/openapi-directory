/*
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateSimulationJobRequestCompute;
import org.openapitools.client.model.CreateSimulationJobRequestLoggingConfig;
import org.openapitools.client.model.CreateSimulationJobRequestOutputLocation;
import org.openapitools.client.model.CreateSimulationJobRequestVpcConfig;
import org.openapitools.client.model.DataSourceConfig;
import org.openapitools.client.model.RobotApplicationConfig;
import org.openapitools.client.model.SimulationApplicationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSimulationJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:34.495509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSimulationJobRequest {
  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_OUTPUT_LOCATION = "outputLocation";
  @SerializedName(SERIALIZED_NAME_OUTPUT_LOCATION)
  private CreateSimulationJobRequestOutputLocation outputLocation;

  public static final String SERIALIZED_NAME_LOGGING_CONFIG = "loggingConfig";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIG)
  private CreateSimulationJobRequestLoggingConfig loggingConfig;

  public static final String SERIALIZED_NAME_MAX_JOB_DURATION_IN_SECONDS = "maxJobDurationInSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_JOB_DURATION_IN_SECONDS)
  private Integer maxJobDurationInSeconds;

  public static final String SERIALIZED_NAME_IAM_ROLE = "iamRole";
  @SerializedName(SERIALIZED_NAME_IAM_ROLE)
  private String iamRole;

  /**
   * &lt;p&gt;The failure behavior the simulation job.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;Continue&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Leaves the instance running for its maximum timeout duration after a &lt;code&gt;4XX&lt;/code&gt; error code.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Fail&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Stop the simulation job and terminate the instance.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
   */
  @JsonAdapter(FailureBehaviorEnum.Adapter.class)
  public enum FailureBehaviorEnum {
    FAIL("Fail"),
    
    CONTINUE("Continue");

    private String value;

    FailureBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FailureBehaviorEnum fromValue(String value) {
      for (FailureBehaviorEnum b : FailureBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FailureBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailureBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailureBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FailureBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FailureBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAILURE_BEHAVIOR = "failureBehavior";
  @SerializedName(SERIALIZED_NAME_FAILURE_BEHAVIOR)
  private FailureBehaviorEnum failureBehavior;

  public static final String SERIALIZED_NAME_ROBOT_APPLICATIONS = "robotApplications";
  @SerializedName(SERIALIZED_NAME_ROBOT_APPLICATIONS)
  private List<RobotApplicationConfig> robotApplications = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIMULATION_APPLICATIONS = "simulationApplications";
  @SerializedName(SERIALIZED_NAME_SIMULATION_APPLICATIONS)
  private List<SimulationApplicationConfig> simulationApplications = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_SOURCES = "dataSources";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCES)
  private List<DataSourceConfig> dataSources = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_VPC_CONFIG = "vpcConfig";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIG)
  private CreateSimulationJobRequestVpcConfig vpcConfig;

  public static final String SERIALIZED_NAME_COMPUTE = "compute";
  @SerializedName(SERIALIZED_NAME_COMPUTE)
  private CreateSimulationJobRequestCompute compute;

  public CreateSimulationJobRequest() {
  }

  public CreateSimulationJobRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateSimulationJobRequest outputLocation(CreateSimulationJobRequestOutputLocation outputLocation) {
    this.outputLocation = outputLocation;
    return this;
  }

  /**
   * Get outputLocation
   * @return outputLocation
   */
  @javax.annotation.Nullable
  public CreateSimulationJobRequestOutputLocation getOutputLocation() {
    return outputLocation;
  }

  public void setOutputLocation(CreateSimulationJobRequestOutputLocation outputLocation) {
    this.outputLocation = outputLocation;
  }


  public CreateSimulationJobRequest loggingConfig(CreateSimulationJobRequestLoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
    return this;
  }

  /**
   * Get loggingConfig
   * @return loggingConfig
   */
  @javax.annotation.Nullable
  public CreateSimulationJobRequestLoggingConfig getLoggingConfig() {
    return loggingConfig;
  }

  public void setLoggingConfig(CreateSimulationJobRequestLoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
  }


  public CreateSimulationJobRequest maxJobDurationInSeconds(Integer maxJobDurationInSeconds) {
    this.maxJobDurationInSeconds = maxJobDurationInSeconds;
    return this;
  }

  /**
   * The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds. When &lt;code&gt;maxJobDurationInSeconds&lt;/code&gt; is reached, the simulation job will status will transition to &lt;code&gt;Completed&lt;/code&gt;.
   * @return maxJobDurationInSeconds
   */
  @javax.annotation.Nonnull
  public Integer getMaxJobDurationInSeconds() {
    return maxJobDurationInSeconds;
  }

  public void setMaxJobDurationInSeconds(Integer maxJobDurationInSeconds) {
    this.maxJobDurationInSeconds = maxJobDurationInSeconds;
  }


  public CreateSimulationJobRequest iamRole(String iamRole) {
    this.iamRole = iamRole;
    return this;
  }

  /**
   * The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 
   * @return iamRole
   */
  @javax.annotation.Nonnull
  public String getIamRole() {
    return iamRole;
  }

  public void setIamRole(String iamRole) {
    this.iamRole = iamRole;
  }


  public CreateSimulationJobRequest failureBehavior(FailureBehaviorEnum failureBehavior) {
    this.failureBehavior = failureBehavior;
    return this;
  }

  /**
   * &lt;p&gt;The failure behavior the simulation job.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;Continue&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Leaves the instance running for its maximum timeout duration after a &lt;code&gt;4XX&lt;/code&gt; error code.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Fail&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Stop the simulation job and terminate the instance.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
   * @return failureBehavior
   */
  @javax.annotation.Nullable
  public FailureBehaviorEnum getFailureBehavior() {
    return failureBehavior;
  }

  public void setFailureBehavior(FailureBehaviorEnum failureBehavior) {
    this.failureBehavior = failureBehavior;
  }


  public CreateSimulationJobRequest robotApplications(List<RobotApplicationConfig> robotApplications) {
    this.robotApplications = robotApplications;
    return this;
  }

  public CreateSimulationJobRequest addRobotApplicationsItem(RobotApplicationConfig robotApplicationsItem) {
    if (this.robotApplications == null) {
      this.robotApplications = new ArrayList<>();
    }
    this.robotApplications.add(robotApplicationsItem);
    return this;
  }

  /**
   * The robot application to use in the simulation job.
   * @return robotApplications
   */
  @javax.annotation.Nullable
  public List<RobotApplicationConfig> getRobotApplications() {
    return robotApplications;
  }

  public void setRobotApplications(List<RobotApplicationConfig> robotApplications) {
    this.robotApplications = robotApplications;
  }


  public CreateSimulationJobRequest simulationApplications(List<SimulationApplicationConfig> simulationApplications) {
    this.simulationApplications = simulationApplications;
    return this;
  }

  public CreateSimulationJobRequest addSimulationApplicationsItem(SimulationApplicationConfig simulationApplicationsItem) {
    if (this.simulationApplications == null) {
      this.simulationApplications = new ArrayList<>();
    }
    this.simulationApplications.add(simulationApplicationsItem);
    return this;
  }

  /**
   * The simulation application to use in the simulation job.
   * @return simulationApplications
   */
  @javax.annotation.Nullable
  public List<SimulationApplicationConfig> getSimulationApplications() {
    return simulationApplications;
  }

  public void setSimulationApplications(List<SimulationApplicationConfig> simulationApplications) {
    this.simulationApplications = simulationApplications;
  }


  public CreateSimulationJobRequest dataSources(List<DataSourceConfig> dataSources) {
    this.dataSources = dataSources;
    return this;
  }

  public CreateSimulationJobRequest addDataSourcesItem(DataSourceConfig dataSourcesItem) {
    if (this.dataSources == null) {
      this.dataSources = new ArrayList<>();
    }
    this.dataSources.add(dataSourcesItem);
    return this;
  }

  /**
   * &lt;p&gt;Specify data sources to mount read-only files from S3 into your simulation. These files are available under &lt;code&gt;/opt/robomaker/datasources/data_source_name&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;There is a limit of 100 files and a combined size of 25GB for all &lt;code&gt;DataSourceConfig&lt;/code&gt; objects. &lt;/p&gt; &lt;/note&gt;
   * @return dataSources
   */
  @javax.annotation.Nullable
  public List<DataSourceConfig> getDataSources() {
    return dataSources;
  }

  public void setDataSources(List<DataSourceConfig> dataSources) {
    this.dataSources = dataSources;
  }


  public CreateSimulationJobRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateSimulationJobRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A map that contains tag keys and tag values that are attached to the simulation job.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateSimulationJobRequest vpcConfig(CreateSimulationJobRequestVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
    return this;
  }

  /**
   * Get vpcConfig
   * @return vpcConfig
   */
  @javax.annotation.Nullable
  public CreateSimulationJobRequestVpcConfig getVpcConfig() {
    return vpcConfig;
  }

  public void setVpcConfig(CreateSimulationJobRequestVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
  }


  public CreateSimulationJobRequest compute(CreateSimulationJobRequestCompute compute) {
    this.compute = compute;
    return this;
  }

  /**
   * Get compute
   * @return compute
   */
  @javax.annotation.Nullable
  public CreateSimulationJobRequestCompute getCompute() {
    return compute;
  }

  public void setCompute(CreateSimulationJobRequestCompute compute) {
    this.compute = compute;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSimulationJobRequest createSimulationJobRequest = (CreateSimulationJobRequest) o;
    return Objects.equals(this.clientRequestToken, createSimulationJobRequest.clientRequestToken) &&
        Objects.equals(this.outputLocation, createSimulationJobRequest.outputLocation) &&
        Objects.equals(this.loggingConfig, createSimulationJobRequest.loggingConfig) &&
        Objects.equals(this.maxJobDurationInSeconds, createSimulationJobRequest.maxJobDurationInSeconds) &&
        Objects.equals(this.iamRole, createSimulationJobRequest.iamRole) &&
        Objects.equals(this.failureBehavior, createSimulationJobRequest.failureBehavior) &&
        Objects.equals(this.robotApplications, createSimulationJobRequest.robotApplications) &&
        Objects.equals(this.simulationApplications, createSimulationJobRequest.simulationApplications) &&
        Objects.equals(this.dataSources, createSimulationJobRequest.dataSources) &&
        Objects.equals(this.tags, createSimulationJobRequest.tags) &&
        Objects.equals(this.vpcConfig, createSimulationJobRequest.vpcConfig) &&
        Objects.equals(this.compute, createSimulationJobRequest.compute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientRequestToken, outputLocation, loggingConfig, maxJobDurationInSeconds, iamRole, failureBehavior, robotApplications, simulationApplications, dataSources, tags, vpcConfig, compute);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSimulationJobRequest {\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    outputLocation: ").append(toIndentedString(outputLocation)).append("\n");
    sb.append("    loggingConfig: ").append(toIndentedString(loggingConfig)).append("\n");
    sb.append("    maxJobDurationInSeconds: ").append(toIndentedString(maxJobDurationInSeconds)).append("\n");
    sb.append("    iamRole: ").append(toIndentedString(iamRole)).append("\n");
    sb.append("    failureBehavior: ").append(toIndentedString(failureBehavior)).append("\n");
    sb.append("    robotApplications: ").append(toIndentedString(robotApplications)).append("\n");
    sb.append("    simulationApplications: ").append(toIndentedString(simulationApplications)).append("\n");
    sb.append("    dataSources: ").append(toIndentedString(dataSources)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    vpcConfig: ").append(toIndentedString(vpcConfig)).append("\n");
    sb.append("    compute: ").append(toIndentedString(compute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientRequestToken");
    openapiFields.add("outputLocation");
    openapiFields.add("loggingConfig");
    openapiFields.add("maxJobDurationInSeconds");
    openapiFields.add("iamRole");
    openapiFields.add("failureBehavior");
    openapiFields.add("robotApplications");
    openapiFields.add("simulationApplications");
    openapiFields.add("dataSources");
    openapiFields.add("tags");
    openapiFields.add("vpcConfig");
    openapiFields.add("compute");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("maxJobDurationInSeconds");
    openapiRequiredFields.add("iamRole");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSimulationJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSimulationJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSimulationJobRequest is not found in the empty JSON string", CreateSimulationJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSimulationJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSimulationJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSimulationJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientRequestToken") != null && !jsonObj.get("clientRequestToken").isJsonNull()) && !jsonObj.get("clientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientRequestToken").toString()));
      }
      // validate the optional field `outputLocation`
      if (jsonObj.get("outputLocation") != null && !jsonObj.get("outputLocation").isJsonNull()) {
        CreateSimulationJobRequestOutputLocation.validateJsonElement(jsonObj.get("outputLocation"));
      }
      // validate the optional field `loggingConfig`
      if (jsonObj.get("loggingConfig") != null && !jsonObj.get("loggingConfig").isJsonNull()) {
        CreateSimulationJobRequestLoggingConfig.validateJsonElement(jsonObj.get("loggingConfig"));
      }
      if (!jsonObj.get("iamRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iamRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iamRole").toString()));
      }
      if ((jsonObj.get("failureBehavior") != null && !jsonObj.get("failureBehavior").isJsonNull()) && !jsonObj.get("failureBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureBehavior").toString()));
      }
      // validate the optional field `failureBehavior`
      if (jsonObj.get("failureBehavior") != null && !jsonObj.get("failureBehavior").isJsonNull()) {
        FailureBehaviorEnum.validateJsonElement(jsonObj.get("failureBehavior"));
      }
      if (jsonObj.get("robotApplications") != null && !jsonObj.get("robotApplications").isJsonNull()) {
        JsonArray jsonArrayrobotApplications = jsonObj.getAsJsonArray("robotApplications");
        if (jsonArrayrobotApplications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("robotApplications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `robotApplications` to be an array in the JSON string but got `%s`", jsonObj.get("robotApplications").toString()));
          }

          // validate the optional field `robotApplications` (array)
          for (int i = 0; i < jsonArrayrobotApplications.size(); i++) {
            RobotApplicationConfig.validateJsonElement(jsonArrayrobotApplications.get(i));
          };
        }
      }
      if (jsonObj.get("simulationApplications") != null && !jsonObj.get("simulationApplications").isJsonNull()) {
        JsonArray jsonArraysimulationApplications = jsonObj.getAsJsonArray("simulationApplications");
        if (jsonArraysimulationApplications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("simulationApplications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `simulationApplications` to be an array in the JSON string but got `%s`", jsonObj.get("simulationApplications").toString()));
          }

          // validate the optional field `simulationApplications` (array)
          for (int i = 0; i < jsonArraysimulationApplications.size(); i++) {
            SimulationApplicationConfig.validateJsonElement(jsonArraysimulationApplications.get(i));
          };
        }
      }
      if (jsonObj.get("dataSources") != null && !jsonObj.get("dataSources").isJsonNull()) {
        JsonArray jsonArraydataSources = jsonObj.getAsJsonArray("dataSources");
        if (jsonArraydataSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataSources` to be an array in the JSON string but got `%s`", jsonObj.get("dataSources").toString()));
          }

          // validate the optional field `dataSources` (array)
          for (int i = 0; i < jsonArraydataSources.size(); i++) {
            DataSourceConfig.validateJsonElement(jsonArraydataSources.get(i));
          };
        }
      }
      // validate the optional field `vpcConfig`
      if (jsonObj.get("vpcConfig") != null && !jsonObj.get("vpcConfig").isJsonNull()) {
        CreateSimulationJobRequestVpcConfig.validateJsonElement(jsonObj.get("vpcConfig"));
      }
      // validate the optional field `compute`
      if (jsonObj.get("compute") != null && !jsonObj.get("compute").isJsonNull()) {
        CreateSimulationJobRequestCompute.validateJsonElement(jsonObj.get("compute"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSimulationJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSimulationJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSimulationJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSimulationJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSimulationJobRequest>() {
           @Override
           public void write(JsonWriter out, CreateSimulationJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSimulationJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSimulationJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSimulationJobRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSimulationJobRequest
   */
  public static CreateSimulationJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSimulationJobRequest.class);
  }

  /**
   * Convert an instance of CreateSimulationJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

