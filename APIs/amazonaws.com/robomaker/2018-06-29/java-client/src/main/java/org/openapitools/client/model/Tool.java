/*
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExitBehavior;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a tool. Tools are used in a simulation job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:34.495509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Tool {
  public static final String SERIALIZED_NAME_STREAM_U_I = "streamUI";
  @SerializedName(SERIALIZED_NAME_STREAM_U_I)
  private Boolean streamUI;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private String command;

  public static final String SERIALIZED_NAME_STREAM_OUTPUT_TO_CLOUD_WATCH = "streamOutputToCloudWatch";
  @SerializedName(SERIALIZED_NAME_STREAM_OUTPUT_TO_CLOUD_WATCH)
  private Boolean streamOutputToCloudWatch;

  public static final String SERIALIZED_NAME_EXIT_BEHAVIOR = "exitBehavior";
  @SerializedName(SERIALIZED_NAME_EXIT_BEHAVIOR)
  private ExitBehavior exitBehavior;

  public Tool() {
  }

  public Tool streamUI(Boolean streamUI) {
    this.streamUI = streamUI;
    return this;
  }

  /**
   * Get streamUI
   * @return streamUI
   */
  @javax.annotation.Nullable
  public Boolean getStreamUI() {
    return streamUI;
  }

  public void setStreamUI(Boolean streamUI) {
    this.streamUI = streamUI;
  }


  public Tool name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Tool command(String command) {
    this.command = command;
    return this;
  }

  /**
   * Get command
   * @return command
   */
  @javax.annotation.Nonnull
  public String getCommand() {
    return command;
  }

  public void setCommand(String command) {
    this.command = command;
  }


  public Tool streamOutputToCloudWatch(Boolean streamOutputToCloudWatch) {
    this.streamOutputToCloudWatch = streamOutputToCloudWatch;
    return this;
  }

  /**
   * Get streamOutputToCloudWatch
   * @return streamOutputToCloudWatch
   */
  @javax.annotation.Nullable
  public Boolean getStreamOutputToCloudWatch() {
    return streamOutputToCloudWatch;
  }

  public void setStreamOutputToCloudWatch(Boolean streamOutputToCloudWatch) {
    this.streamOutputToCloudWatch = streamOutputToCloudWatch;
  }


  public Tool exitBehavior(ExitBehavior exitBehavior) {
    this.exitBehavior = exitBehavior;
    return this;
  }

  /**
   * Get exitBehavior
   * @return exitBehavior
   */
  @javax.annotation.Nullable
  public ExitBehavior getExitBehavior() {
    return exitBehavior;
  }

  public void setExitBehavior(ExitBehavior exitBehavior) {
    this.exitBehavior = exitBehavior;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tool tool = (Tool) o;
    return Objects.equals(this.streamUI, tool.streamUI) &&
        Objects.equals(this.name, tool.name) &&
        Objects.equals(this.command, tool.command) &&
        Objects.equals(this.streamOutputToCloudWatch, tool.streamOutputToCloudWatch) &&
        Objects.equals(this.exitBehavior, tool.exitBehavior);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamUI, name, command, streamOutputToCloudWatch, exitBehavior);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tool {\n");
    sb.append("    streamUI: ").append(toIndentedString(streamUI)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    streamOutputToCloudWatch: ").append(toIndentedString(streamOutputToCloudWatch)).append("\n");
    sb.append("    exitBehavior: ").append(toIndentedString(exitBehavior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("streamUI");
    openapiFields.add("name");
    openapiFields.add("command");
    openapiFields.add("streamOutputToCloudWatch");
    openapiFields.add("exitBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("command");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Tool
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Tool.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Tool is not found in the empty JSON string", Tool.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Tool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Tool` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Tool.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `streamUI`
      if (jsonObj.get("streamUI") != null && !jsonObj.get("streamUI").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("streamUI"));
      }
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `command`
      String.validateJsonElement(jsonObj.get("command"));
      // validate the optional field `streamOutputToCloudWatch`
      if (jsonObj.get("streamOutputToCloudWatch") != null && !jsonObj.get("streamOutputToCloudWatch").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("streamOutputToCloudWatch"));
      }
      // validate the optional field `exitBehavior`
      if (jsonObj.get("exitBehavior") != null && !jsonObj.get("exitBehavior").isJsonNull()) {
        ExitBehavior.validateJsonElement(jsonObj.get("exitBehavior"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Tool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Tool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Tool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Tool.class));

       return (TypeAdapter<T>) new TypeAdapter<Tool>() {
           @Override
           public void write(JsonWriter out, Tool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Tool read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Tool given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Tool
   * @throws IOException if the JSON string is invalid with respect to Tool
   */
  public static Tool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Tool.class);
  }

  /**
   * Convert an instance of Tool to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

