/*
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeploymentApplicationConfigLaunchConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:34.495509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeploymentApplicationConfigLaunchConfig {
  public static final String SERIALIZED_NAME_PACKAGE_NAME = "packageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_PRE_LAUNCH_FILE = "preLaunchFile";
  @SerializedName(SERIALIZED_NAME_PRE_LAUNCH_FILE)
  private String preLaunchFile;

  public static final String SERIALIZED_NAME_LAUNCH_FILE = "launchFile";
  @SerializedName(SERIALIZED_NAME_LAUNCH_FILE)
  private String launchFile;

  public static final String SERIALIZED_NAME_POST_LAUNCH_FILE = "postLaunchFile";
  @SerializedName(SERIALIZED_NAME_POST_LAUNCH_FILE)
  private String postLaunchFile;

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES = "environmentVariables";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES)
  private Map environmentVariables;

  public DeploymentApplicationConfigLaunchConfig() {
  }

  public DeploymentApplicationConfigLaunchConfig packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Get packageName
   * @return packageName
   */
  @javax.annotation.Nonnull
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public DeploymentApplicationConfigLaunchConfig preLaunchFile(String preLaunchFile) {
    this.preLaunchFile = preLaunchFile;
    return this;
  }

  /**
   * Get preLaunchFile
   * @return preLaunchFile
   */
  @javax.annotation.Nullable
  public String getPreLaunchFile() {
    return preLaunchFile;
  }

  public void setPreLaunchFile(String preLaunchFile) {
    this.preLaunchFile = preLaunchFile;
  }


  public DeploymentApplicationConfigLaunchConfig launchFile(String launchFile) {
    this.launchFile = launchFile;
    return this;
  }

  /**
   * Get launchFile
   * @return launchFile
   */
  @javax.annotation.Nonnull
  public String getLaunchFile() {
    return launchFile;
  }

  public void setLaunchFile(String launchFile) {
    this.launchFile = launchFile;
  }


  public DeploymentApplicationConfigLaunchConfig postLaunchFile(String postLaunchFile) {
    this.postLaunchFile = postLaunchFile;
    return this;
  }

  /**
   * Get postLaunchFile
   * @return postLaunchFile
   */
  @javax.annotation.Nullable
  public String getPostLaunchFile() {
    return postLaunchFile;
  }

  public void setPostLaunchFile(String postLaunchFile) {
    this.postLaunchFile = postLaunchFile;
  }


  public DeploymentApplicationConfigLaunchConfig environmentVariables(Map environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  /**
   * Get environmentVariables
   * @return environmentVariables
   */
  @javax.annotation.Nullable
  public Map getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(Map environmentVariables) {
    this.environmentVariables = environmentVariables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentApplicationConfigLaunchConfig deploymentApplicationConfigLaunchConfig = (DeploymentApplicationConfigLaunchConfig) o;
    return Objects.equals(this.packageName, deploymentApplicationConfigLaunchConfig.packageName) &&
        Objects.equals(this.preLaunchFile, deploymentApplicationConfigLaunchConfig.preLaunchFile) &&
        Objects.equals(this.launchFile, deploymentApplicationConfigLaunchConfig.launchFile) &&
        Objects.equals(this.postLaunchFile, deploymentApplicationConfigLaunchConfig.postLaunchFile) &&
        Objects.equals(this.environmentVariables, deploymentApplicationConfigLaunchConfig.environmentVariables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(packageName, preLaunchFile, launchFile, postLaunchFile, environmentVariables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentApplicationConfigLaunchConfig {\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    preLaunchFile: ").append(toIndentedString(preLaunchFile)).append("\n");
    sb.append("    launchFile: ").append(toIndentedString(launchFile)).append("\n");
    sb.append("    postLaunchFile: ").append(toIndentedString(postLaunchFile)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("packageName");
    openapiFields.add("preLaunchFile");
    openapiFields.add("launchFile");
    openapiFields.add("postLaunchFile");
    openapiFields.add("environmentVariables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("packageName");
    openapiRequiredFields.add("launchFile");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeploymentApplicationConfigLaunchConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeploymentApplicationConfigLaunchConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeploymentApplicationConfigLaunchConfig is not found in the empty JSON string", DeploymentApplicationConfigLaunchConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeploymentApplicationConfigLaunchConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeploymentApplicationConfigLaunchConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeploymentApplicationConfigLaunchConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `packageName`
      String.validateJsonElement(jsonObj.get("packageName"));
      // validate the optional field `preLaunchFile`
      if (jsonObj.get("preLaunchFile") != null && !jsonObj.get("preLaunchFile").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("preLaunchFile"));
      }
      // validate the required field `launchFile`
      String.validateJsonElement(jsonObj.get("launchFile"));
      // validate the optional field `postLaunchFile`
      if (jsonObj.get("postLaunchFile") != null && !jsonObj.get("postLaunchFile").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("postLaunchFile"));
      }
      // validate the optional field `environmentVariables`
      if (jsonObj.get("environmentVariables") != null && !jsonObj.get("environmentVariables").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("environmentVariables"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeploymentApplicationConfigLaunchConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeploymentApplicationConfigLaunchConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeploymentApplicationConfigLaunchConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeploymentApplicationConfigLaunchConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DeploymentApplicationConfigLaunchConfig>() {
           @Override
           public void write(JsonWriter out, DeploymentApplicationConfigLaunchConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeploymentApplicationConfigLaunchConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeploymentApplicationConfigLaunchConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeploymentApplicationConfigLaunchConfig
   * @throws IOException if the JSON string is invalid with respect to DeploymentApplicationConfigLaunchConfig
   */
  public static DeploymentApplicationConfigLaunchConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeploymentApplicationConfigLaunchConfig.class);
  }

  /**
   * Convert an instance of DeploymentApplicationConfigLaunchConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

