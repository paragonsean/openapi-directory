/*
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeWorldResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:34.495509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeWorldResponse {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_GENERATION_JOB = "generationJob";
  @SerializedName(SERIALIZED_NAME_GENERATION_JOB)
  private String generationJob;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private String template;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_WORLD_DESCRIPTION_BODY = "worldDescriptionBody";
  @SerializedName(SERIALIZED_NAME_WORLD_DESCRIPTION_BODY)
  private String worldDescriptionBody;

  public DescribeWorldResponse() {
  }

  public DescribeWorldResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DescribeWorldResponse generationJob(String generationJob) {
    this.generationJob = generationJob;
    return this;
  }

  /**
   * Get generationJob
   * @return generationJob
   */
  @javax.annotation.Nullable
  public String getGenerationJob() {
    return generationJob;
  }

  public void setGenerationJob(String generationJob) {
    this.generationJob = generationJob;
  }


  public DescribeWorldResponse template(String template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public String getTemplate() {
    return template;
  }

  public void setTemplate(String template) {
    this.template = template;
  }


  public DescribeWorldResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DescribeWorldResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public DescribeWorldResponse worldDescriptionBody(String worldDescriptionBody) {
    this.worldDescriptionBody = worldDescriptionBody;
    return this;
  }

  /**
   * Get worldDescriptionBody
   * @return worldDescriptionBody
   */
  @javax.annotation.Nullable
  public String getWorldDescriptionBody() {
    return worldDescriptionBody;
  }

  public void setWorldDescriptionBody(String worldDescriptionBody) {
    this.worldDescriptionBody = worldDescriptionBody;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeWorldResponse describeWorldResponse = (DescribeWorldResponse) o;
    return Objects.equals(this.arn, describeWorldResponse.arn) &&
        Objects.equals(this.generationJob, describeWorldResponse.generationJob) &&
        Objects.equals(this.template, describeWorldResponse.template) &&
        Objects.equals(this.createdAt, describeWorldResponse.createdAt) &&
        Objects.equals(this.tags, describeWorldResponse.tags) &&
        Objects.equals(this.worldDescriptionBody, describeWorldResponse.worldDescriptionBody);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, generationJob, template, createdAt, tags, worldDescriptionBody);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeWorldResponse {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    generationJob: ").append(toIndentedString(generationJob)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    worldDescriptionBody: ").append(toIndentedString(worldDescriptionBody)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("generationJob");
    openapiFields.add("template");
    openapiFields.add("createdAt");
    openapiFields.add("tags");
    openapiFields.add("worldDescriptionBody");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeWorldResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeWorldResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeWorldResponse is not found in the empty JSON string", DescribeWorldResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeWorldResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeWorldResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `generationJob`
      if (jsonObj.get("generationJob") != null && !jsonObj.get("generationJob").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("generationJob"));
      }
      // validate the optional field `template`
      if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("template"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `worldDescriptionBody`
      if (jsonObj.get("worldDescriptionBody") != null && !jsonObj.get("worldDescriptionBody").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("worldDescriptionBody"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeWorldResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeWorldResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeWorldResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeWorldResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeWorldResponse>() {
           @Override
           public void write(JsonWriter out, DescribeWorldResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeWorldResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeWorldResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeWorldResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeWorldResponse
   */
  public static DescribeWorldResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeWorldResponse.class);
  }

  /**
   * Convert an instance of DescribeWorldResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

