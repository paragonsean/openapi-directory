/*
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateSimulationApplicationResponseRenderingEngine;
import org.openapitools.client.model.CreateSimulationApplicationResponseRobotSoftwareSuite;
import org.openapitools.client.model.CreateSimulationApplicationResponseSimulationSoftwareSuite;
import org.openapitools.client.model.UpdateSimulationApplicationResponseEnvironment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSimulationApplicationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:34.495509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSimulationApplicationResponse {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List sources;

  public static final String SERIALIZED_NAME_SIMULATION_SOFTWARE_SUITE = "simulationSoftwareSuite";
  @SerializedName(SERIALIZED_NAME_SIMULATION_SOFTWARE_SUITE)
  private CreateSimulationApplicationResponseSimulationSoftwareSuite simulationSoftwareSuite;

  public static final String SERIALIZED_NAME_ROBOT_SOFTWARE_SUITE = "robotSoftwareSuite";
  @SerializedName(SERIALIZED_NAME_ROBOT_SOFTWARE_SUITE)
  private CreateSimulationApplicationResponseRobotSoftwareSuite robotSoftwareSuite;

  public static final String SERIALIZED_NAME_RENDERING_ENGINE = "renderingEngine";
  @SerializedName(SERIALIZED_NAME_RENDERING_ENGINE)
  private CreateSimulationApplicationResponseRenderingEngine renderingEngine;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "lastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_REVISION_ID = "revisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  private String revisionId;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private UpdateSimulationApplicationResponseEnvironment environment;

  public UpdateSimulationApplicationResponse() {
  }

  public UpdateSimulationApplicationResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public UpdateSimulationApplicationResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateSimulationApplicationResponse version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public UpdateSimulationApplicationResponse sources(List sources) {
    this.sources = sources;
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List getSources() {
    return sources;
  }

  public void setSources(List sources) {
    this.sources = sources;
  }


  public UpdateSimulationApplicationResponse simulationSoftwareSuite(CreateSimulationApplicationResponseSimulationSoftwareSuite simulationSoftwareSuite) {
    this.simulationSoftwareSuite = simulationSoftwareSuite;
    return this;
  }

  /**
   * Get simulationSoftwareSuite
   * @return simulationSoftwareSuite
   */
  @javax.annotation.Nullable
  public CreateSimulationApplicationResponseSimulationSoftwareSuite getSimulationSoftwareSuite() {
    return simulationSoftwareSuite;
  }

  public void setSimulationSoftwareSuite(CreateSimulationApplicationResponseSimulationSoftwareSuite simulationSoftwareSuite) {
    this.simulationSoftwareSuite = simulationSoftwareSuite;
  }


  public UpdateSimulationApplicationResponse robotSoftwareSuite(CreateSimulationApplicationResponseRobotSoftwareSuite robotSoftwareSuite) {
    this.robotSoftwareSuite = robotSoftwareSuite;
    return this;
  }

  /**
   * Get robotSoftwareSuite
   * @return robotSoftwareSuite
   */
  @javax.annotation.Nullable
  public CreateSimulationApplicationResponseRobotSoftwareSuite getRobotSoftwareSuite() {
    return robotSoftwareSuite;
  }

  public void setRobotSoftwareSuite(CreateSimulationApplicationResponseRobotSoftwareSuite robotSoftwareSuite) {
    this.robotSoftwareSuite = robotSoftwareSuite;
  }


  public UpdateSimulationApplicationResponse renderingEngine(CreateSimulationApplicationResponseRenderingEngine renderingEngine) {
    this.renderingEngine = renderingEngine;
    return this;
  }

  /**
   * Get renderingEngine
   * @return renderingEngine
   */
  @javax.annotation.Nullable
  public CreateSimulationApplicationResponseRenderingEngine getRenderingEngine() {
    return renderingEngine;
  }

  public void setRenderingEngine(CreateSimulationApplicationResponseRenderingEngine renderingEngine) {
    this.renderingEngine = renderingEngine;
  }


  public UpdateSimulationApplicationResponse lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public UpdateSimulationApplicationResponse revisionId(String revisionId) {
    this.revisionId = revisionId;
    return this;
  }

  /**
   * Get revisionId
   * @return revisionId
   */
  @javax.annotation.Nullable
  public String getRevisionId() {
    return revisionId;
  }

  public void setRevisionId(String revisionId) {
    this.revisionId = revisionId;
  }


  public UpdateSimulationApplicationResponse environment(UpdateSimulationApplicationResponseEnvironment environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public UpdateSimulationApplicationResponseEnvironment getEnvironment() {
    return environment;
  }

  public void setEnvironment(UpdateSimulationApplicationResponseEnvironment environment) {
    this.environment = environment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSimulationApplicationResponse updateSimulationApplicationResponse = (UpdateSimulationApplicationResponse) o;
    return Objects.equals(this.arn, updateSimulationApplicationResponse.arn) &&
        Objects.equals(this.name, updateSimulationApplicationResponse.name) &&
        Objects.equals(this.version, updateSimulationApplicationResponse.version) &&
        Objects.equals(this.sources, updateSimulationApplicationResponse.sources) &&
        Objects.equals(this.simulationSoftwareSuite, updateSimulationApplicationResponse.simulationSoftwareSuite) &&
        Objects.equals(this.robotSoftwareSuite, updateSimulationApplicationResponse.robotSoftwareSuite) &&
        Objects.equals(this.renderingEngine, updateSimulationApplicationResponse.renderingEngine) &&
        Objects.equals(this.lastUpdatedAt, updateSimulationApplicationResponse.lastUpdatedAt) &&
        Objects.equals(this.revisionId, updateSimulationApplicationResponse.revisionId) &&
        Objects.equals(this.environment, updateSimulationApplicationResponse.environment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, name, version, sources, simulationSoftwareSuite, robotSoftwareSuite, renderingEngine, lastUpdatedAt, revisionId, environment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSimulationApplicationResponse {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    simulationSoftwareSuite: ").append(toIndentedString(simulationSoftwareSuite)).append("\n");
    sb.append("    robotSoftwareSuite: ").append(toIndentedString(robotSoftwareSuite)).append("\n");
    sb.append("    renderingEngine: ").append(toIndentedString(renderingEngine)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("name");
    openapiFields.add("version");
    openapiFields.add("sources");
    openapiFields.add("simulationSoftwareSuite");
    openapiFields.add("robotSoftwareSuite");
    openapiFields.add("renderingEngine");
    openapiFields.add("lastUpdatedAt");
    openapiFields.add("revisionId");
    openapiFields.add("environment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSimulationApplicationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSimulationApplicationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSimulationApplicationResponse is not found in the empty JSON string", UpdateSimulationApplicationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSimulationApplicationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSimulationApplicationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("version"));
      }
      // validate the optional field `sources`
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("sources"));
      }
      // validate the optional field `simulationSoftwareSuite`
      if (jsonObj.get("simulationSoftwareSuite") != null && !jsonObj.get("simulationSoftwareSuite").isJsonNull()) {
        CreateSimulationApplicationResponseSimulationSoftwareSuite.validateJsonElement(jsonObj.get("simulationSoftwareSuite"));
      }
      // validate the optional field `robotSoftwareSuite`
      if (jsonObj.get("robotSoftwareSuite") != null && !jsonObj.get("robotSoftwareSuite").isJsonNull()) {
        CreateSimulationApplicationResponseRobotSoftwareSuite.validateJsonElement(jsonObj.get("robotSoftwareSuite"));
      }
      // validate the optional field `renderingEngine`
      if (jsonObj.get("renderingEngine") != null && !jsonObj.get("renderingEngine").isJsonNull()) {
        CreateSimulationApplicationResponseRenderingEngine.validateJsonElement(jsonObj.get("renderingEngine"));
      }
      // validate the optional field `lastUpdatedAt`
      if (jsonObj.get("lastUpdatedAt") != null && !jsonObj.get("lastUpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedAt"));
      }
      // validate the optional field `revisionId`
      if (jsonObj.get("revisionId") != null && !jsonObj.get("revisionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("revisionId"));
      }
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        UpdateSimulationApplicationResponseEnvironment.validateJsonElement(jsonObj.get("environment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSimulationApplicationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSimulationApplicationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSimulationApplicationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSimulationApplicationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSimulationApplicationResponse>() {
           @Override
           public void write(JsonWriter out, UpdateSimulationApplicationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSimulationApplicationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSimulationApplicationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSimulationApplicationResponse
   * @throws IOException if the JSON string is invalid with respect to UpdateSimulationApplicationResponse
   */
  public static UpdateSimulationApplicationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSimulationApplicationResponse.class);
  }

  /**
   * Convert an instance of UpdateSimulationApplicationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

