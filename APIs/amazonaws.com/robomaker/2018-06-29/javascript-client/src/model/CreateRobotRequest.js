/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateRobotRequest model module.
 * @module model/CreateRobotRequest
 * @version 2018-06-29
 */
class CreateRobotRequest {
    /**
     * Constructs a new <code>CreateRobotRequest</code>.
     * @alias module:model/CreateRobotRequest
     * @param name {String} The name for the robot.
     * @param architecture {module:model/CreateRobotRequest.ArchitectureEnum} The target architecture of the robot.
     * @param greengrassGroupId {String} The Greengrass group id.
     */
    constructor(name, architecture, greengrassGroupId) { 
        
        CreateRobotRequest.initialize(this, name, architecture, greengrassGroupId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, architecture, greengrassGroupId) { 
        obj['name'] = name;
        obj['architecture'] = architecture;
        obj['greengrassGroupId'] = greengrassGroupId;
    }

    /**
     * Constructs a <code>CreateRobotRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateRobotRequest} obj Optional instance to populate.
     * @return {module:model/CreateRobotRequest} The populated <code>CreateRobotRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateRobotRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('architecture')) {
                obj['architecture'] = ApiClient.convertToType(data['architecture'], 'String');
            }
            if (data.hasOwnProperty('greengrassGroupId')) {
                obj['greengrassGroupId'] = ApiClient.convertToType(data['greengrassGroupId'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateRobotRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateRobotRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateRobotRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['architecture'] && !(typeof data['architecture'] === 'string' || data['architecture'] instanceof String)) {
            throw new Error("Expected the field `architecture` to be a primitive type in the JSON string but got " + data['architecture']);
        }
        // ensure the json data is a string
        if (data['greengrassGroupId'] && !(typeof data['greengrassGroupId'] === 'string' || data['greengrassGroupId'] instanceof String)) {
            throw new Error("Expected the field `greengrassGroupId` to be a primitive type in the JSON string but got " + data['greengrassGroupId']);
        }

        return true;
    }


}

CreateRobotRequest.RequiredProperties = ["name", "architecture", "greengrassGroupId"];

/**
 * The name for the robot.
 * @member {String} name
 */
CreateRobotRequest.prototype['name'] = undefined;

/**
 * The target architecture of the robot.
 * @member {module:model/CreateRobotRequest.ArchitectureEnum} architecture
 */
CreateRobotRequest.prototype['architecture'] = undefined;

/**
 * The Greengrass group id.
 * @member {String} greengrassGroupId
 */
CreateRobotRequest.prototype['greengrassGroupId'] = undefined;

/**
 * A map that contains tag keys and tag values that are attached to the robot.
 * @member {Object.<String, String>} tags
 */
CreateRobotRequest.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>architecture</code> property.
 * @enum {String}
 * @readonly
 */
CreateRobotRequest['ArchitectureEnum'] = {

    /**
     * value: "X86_64"
     * @const
     */
    "X86_64": "X86_64",

    /**
     * value: "ARM64"
     * @const
     */
    "ARM64": "ARM64",

    /**
     * value: "ARMHF"
     * @const
     */
    "ARMHF": "ARMHF"
};



export default CreateRobotRequest;

