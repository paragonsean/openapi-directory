/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PortMapping model module.
 * @module model/PortMapping
 * @version 2018-06-29
 */
class PortMapping {
    /**
     * Constructs a new <code>PortMapping</code>.
     * An object representing a port mapping.
     * @alias module:model/PortMapping
     * @param jobPort {Number} 
     * @param applicationPort {Number} 
     */
    constructor(jobPort, applicationPort) { 
        
        PortMapping.initialize(this, jobPort, applicationPort);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, jobPort, applicationPort) { 
        obj['jobPort'] = jobPort;
        obj['applicationPort'] = applicationPort;
    }

    /**
     * Constructs a <code>PortMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PortMapping} obj Optional instance to populate.
     * @return {module:model/PortMapping} The populated <code>PortMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PortMapping();

            if (data.hasOwnProperty('jobPort')) {
                obj['jobPort'] = ApiClient.convertToType(data['jobPort'], 'Number');
            }
            if (data.hasOwnProperty('applicationPort')) {
                obj['applicationPort'] = ApiClient.convertToType(data['applicationPort'], 'Number');
            }
            if (data.hasOwnProperty('enableOnPublicIp')) {
                obj['enableOnPublicIp'] = ApiClient.convertToType(data['enableOnPublicIp'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PortMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PortMapping</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PortMapping.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `jobPort`
        if (data['jobPort']) { // data not null
          Number.validateJSON(data['jobPort']);
        }
        // validate the optional field `applicationPort`
        if (data['applicationPort']) { // data not null
          Number.validateJSON(data['applicationPort']);
        }
        // validate the optional field `enableOnPublicIp`
        if (data['enableOnPublicIp']) { // data not null
          Boolean.validateJSON(data['enableOnPublicIp']);
        }

        return true;
    }


}

PortMapping.RequiredProperties = ["jobPort", "applicationPort"];

/**
 * @member {Number} jobPort
 */
PortMapping.prototype['jobPort'] = undefined;

/**
 * @member {Number} applicationPort
 */
PortMapping.prototype['applicationPort'] = undefined;

/**
 * @member {Boolean} enableOnPublicIp
 */
PortMapping.prototype['enableOnPublicIp'] = undefined;






export default PortMapping;

