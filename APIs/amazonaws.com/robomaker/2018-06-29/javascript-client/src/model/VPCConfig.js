/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VPCConfig model module.
 * @module model/VPCConfig
 * @version 2018-06-29
 */
class VPCConfig {
    /**
     * Constructs a new <code>VPCConfig</code>.
     * If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs.
     * @alias module:model/VPCConfig
     * @param subnets {Array} 
     */
    constructor(subnets) { 
        
        VPCConfig.initialize(this, subnets);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, subnets) { 
        obj['subnets'] = subnets;
    }

    /**
     * Constructs a <code>VPCConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VPCConfig} obj Optional instance to populate.
     * @return {module:model/VPCConfig} The populated <code>VPCConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VPCConfig();

            if (data.hasOwnProperty('subnets')) {
                obj['subnets'] = ApiClient.convertToType(data['subnets'], Array);
            }
            if (data.hasOwnProperty('securityGroups')) {
                obj['securityGroups'] = ApiClient.convertToType(data['securityGroups'], Array);
            }
            if (data.hasOwnProperty('assignPublicIp')) {
                obj['assignPublicIp'] = ApiClient.convertToType(data['assignPublicIp'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VPCConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VPCConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VPCConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `subnets`
        if (data['subnets']) { // data not null
          Array.validateJSON(data['subnets']);
        }
        // validate the optional field `securityGroups`
        if (data['securityGroups']) { // data not null
          Array.validateJSON(data['securityGroups']);
        }
        // validate the optional field `assignPublicIp`
        if (data['assignPublicIp']) { // data not null
          Boolean.validateJSON(data['assignPublicIp']);
        }

        return true;
    }


}

VPCConfig.RequiredProperties = ["subnets"];

/**
 * @member {Array} subnets
 */
VPCConfig.prototype['subnets'] = undefined;

/**
 * @member {Array} securityGroups
 */
VPCConfig.prototype['securityGroups'] = undefined;

/**
 * @member {Boolean} assignPublicIp
 */
VPCConfig.prototype['assignPublicIp'] = undefined;






export default VPCConfig;

