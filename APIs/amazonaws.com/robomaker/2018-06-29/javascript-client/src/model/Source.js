/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Architecture from './Architecture';

/**
 * The Source model module.
 * @module model/Source
 * @version 2018-06-29
 */
class Source {
    /**
     * Constructs a new <code>Source</code>.
     * Information about a source.
     * @alias module:model/Source
     */
    constructor() { 
        
        Source.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Source</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Source} obj Optional instance to populate.
     * @return {module:model/Source} The populated <code>Source</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Source();

            if (data.hasOwnProperty('s3Bucket')) {
                obj['s3Bucket'] = ApiClient.convertToType(data['s3Bucket'], 'String');
            }
            if (data.hasOwnProperty('s3Key')) {
                obj['s3Key'] = ApiClient.convertToType(data['s3Key'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('architecture')) {
                obj['architecture'] = ApiClient.convertToType(data['architecture'], Architecture);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Source</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Source</code>.
     */
    static validateJSON(data) {
        // validate the optional field `s3Bucket`
        if (data['s3Bucket']) { // data not null
          String.validateJSON(data['s3Bucket']);
        }
        // validate the optional field `s3Key`
        if (data['s3Key']) { // data not null
          String.validateJSON(data['s3Key']);
        }
        // validate the optional field `etag`
        if (data['etag']) { // data not null
          String.validateJSON(data['etag']);
        }
        // validate the optional field `architecture`
        if (data['architecture']) { // data not null
          Architecture.validateJSON(data['architecture']);
        }

        return true;
    }


}



/**
 * @member {String} s3Bucket
 */
Source.prototype['s3Bucket'] = undefined;

/**
 * @member {String} s3Key
 */
Source.prototype['s3Key'] = undefined;

/**
 * @member {String} etag
 */
Source.prototype['etag'] = undefined;

/**
 * @member {module:model/Architecture} architecture
 */
Source.prototype['architecture'] = undefined;






export default Source;

