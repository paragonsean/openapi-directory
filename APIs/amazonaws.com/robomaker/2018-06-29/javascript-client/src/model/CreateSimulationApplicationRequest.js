/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateRobotApplicationRequestEnvironment from './CreateRobotApplicationRequestEnvironment';
import CreateRobotApplicationRequestRobotSoftwareSuite from './CreateRobotApplicationRequestRobotSoftwareSuite';
import CreateSimulationApplicationRequestRenderingEngine from './CreateSimulationApplicationRequestRenderingEngine';
import CreateSimulationApplicationRequestSimulationSoftwareSuite from './CreateSimulationApplicationRequestSimulationSoftwareSuite';
import SourceConfig from './SourceConfig';

/**
 * The CreateSimulationApplicationRequest model module.
 * @module model/CreateSimulationApplicationRequest
 * @version 2018-06-29
 */
class CreateSimulationApplicationRequest {
    /**
     * Constructs a new <code>CreateSimulationApplicationRequest</code>.
     * @alias module:model/CreateSimulationApplicationRequest
     * @param name {String} The name of the simulation application.
     * @param simulationSoftwareSuite {module:model/CreateSimulationApplicationRequestSimulationSoftwareSuite} 
     * @param robotSoftwareSuite {module:model/CreateRobotApplicationRequestRobotSoftwareSuite} 
     */
    constructor(name, simulationSoftwareSuite, robotSoftwareSuite) { 
        
        CreateSimulationApplicationRequest.initialize(this, name, simulationSoftwareSuite, robotSoftwareSuite);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, simulationSoftwareSuite, robotSoftwareSuite) { 
        obj['name'] = name;
        obj['simulationSoftwareSuite'] = simulationSoftwareSuite;
        obj['robotSoftwareSuite'] = robotSoftwareSuite;
    }

    /**
     * Constructs a <code>CreateSimulationApplicationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSimulationApplicationRequest} obj Optional instance to populate.
     * @return {module:model/CreateSimulationApplicationRequest} The populated <code>CreateSimulationApplicationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateSimulationApplicationRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [SourceConfig]);
            }
            if (data.hasOwnProperty('simulationSoftwareSuite')) {
                obj['simulationSoftwareSuite'] = CreateSimulationApplicationRequestSimulationSoftwareSuite.constructFromObject(data['simulationSoftwareSuite']);
            }
            if (data.hasOwnProperty('robotSoftwareSuite')) {
                obj['robotSoftwareSuite'] = CreateRobotApplicationRequestRobotSoftwareSuite.constructFromObject(data['robotSoftwareSuite']);
            }
            if (data.hasOwnProperty('renderingEngine')) {
                obj['renderingEngine'] = CreateSimulationApplicationRequestRenderingEngine.constructFromObject(data['renderingEngine']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = CreateRobotApplicationRequestEnvironment.constructFromObject(data['environment']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateSimulationApplicationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateSimulationApplicationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateSimulationApplicationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                SourceConfig.validateJSON(item);
            };
        }
        // validate the optional field `simulationSoftwareSuite`
        if (data['simulationSoftwareSuite']) { // data not null
          CreateSimulationApplicationRequestSimulationSoftwareSuite.validateJSON(data['simulationSoftwareSuite']);
        }
        // validate the optional field `robotSoftwareSuite`
        if (data['robotSoftwareSuite']) { // data not null
          CreateRobotApplicationRequestRobotSoftwareSuite.validateJSON(data['robotSoftwareSuite']);
        }
        // validate the optional field `renderingEngine`
        if (data['renderingEngine']) { // data not null
          CreateSimulationApplicationRequestRenderingEngine.validateJSON(data['renderingEngine']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          CreateRobotApplicationRequestEnvironment.validateJSON(data['environment']);
        }

        return true;
    }


}

CreateSimulationApplicationRequest.RequiredProperties = ["name", "simulationSoftwareSuite", "robotSoftwareSuite"];

/**
 * The name of the simulation application.
 * @member {String} name
 */
CreateSimulationApplicationRequest.prototype['name'] = undefined;

/**
 * The sources of the simulation application.
 * @member {Array.<module:model/SourceConfig>} sources
 */
CreateSimulationApplicationRequest.prototype['sources'] = undefined;

/**
 * @member {module:model/CreateSimulationApplicationRequestSimulationSoftwareSuite} simulationSoftwareSuite
 */
CreateSimulationApplicationRequest.prototype['simulationSoftwareSuite'] = undefined;

/**
 * @member {module:model/CreateRobotApplicationRequestRobotSoftwareSuite} robotSoftwareSuite
 */
CreateSimulationApplicationRequest.prototype['robotSoftwareSuite'] = undefined;

/**
 * @member {module:model/CreateSimulationApplicationRequestRenderingEngine} renderingEngine
 */
CreateSimulationApplicationRequest.prototype['renderingEngine'] = undefined;

/**
 * A map that contains tag keys and tag values that are attached to the simulation application.
 * @member {Object.<String, String>} tags
 */
CreateSimulationApplicationRequest.prototype['tags'] = undefined;

/**
 * @member {module:model/CreateRobotApplicationRequestEnvironment} environment
 */
CreateSimulationApplicationRequest.prototype['environment'] = undefined;






export default CreateSimulationApplicationRequest;

