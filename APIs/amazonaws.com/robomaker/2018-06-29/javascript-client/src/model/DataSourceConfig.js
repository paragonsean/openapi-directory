/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSourceType from './DataSourceType';

/**
 * The DataSourceConfig model module.
 * @module model/DataSourceConfig
 * @version 2018-06-29
 */
class DataSourceConfig {
    /**
     * Constructs a new <code>DataSourceConfig</code>.
     * Information about a data source.
     * @alias module:model/DataSourceConfig
     * @param name {String} 
     * @param s3Bucket {String} 
     * @param s3Keys {Array} 
     */
    constructor(name, s3Bucket, s3Keys) { 
        
        DataSourceConfig.initialize(this, name, s3Bucket, s3Keys);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, s3Bucket, s3Keys) { 
        obj['name'] = name;
        obj['s3Bucket'] = s3Bucket;
        obj['s3Keys'] = s3Keys;
    }

    /**
     * Constructs a <code>DataSourceConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSourceConfig} obj Optional instance to populate.
     * @return {module:model/DataSourceConfig} The populated <code>DataSourceConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSourceConfig();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('s3Bucket')) {
                obj['s3Bucket'] = ApiClient.convertToType(data['s3Bucket'], 'String');
            }
            if (data.hasOwnProperty('s3Keys')) {
                obj['s3Keys'] = ApiClient.convertToType(data['s3Keys'], Array);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], DataSourceType);
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSourceConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSourceConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataSourceConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `s3Bucket`
        if (data['s3Bucket']) { // data not null
          String.validateJSON(data['s3Bucket']);
        }
        // validate the optional field `s3Keys`
        if (data['s3Keys']) { // data not null
          Array.validateJSON(data['s3Keys']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          DataSourceType.validateJSON(data['type']);
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          String.validateJSON(data['destination']);
        }

        return true;
    }


}

DataSourceConfig.RequiredProperties = ["name", "s3Bucket", "s3Keys"];

/**
 * @member {String} name
 */
DataSourceConfig.prototype['name'] = undefined;

/**
 * @member {String} s3Bucket
 */
DataSourceConfig.prototype['s3Bucket'] = undefined;

/**
 * @member {Array} s3Keys
 */
DataSourceConfig.prototype['s3Keys'] = undefined;

/**
 * @member {module:model/DataSourceType} type
 */
DataSourceConfig.prototype['type'] = undefined;

/**
 * @member {String} destination
 */
DataSourceConfig.prototype['destination'] = undefined;






export default DataSourceConfig;

