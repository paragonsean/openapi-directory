/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateSimulationJobRequestCompute from './CreateSimulationJobRequestCompute';
import CreateSimulationJobRequestLoggingConfig from './CreateSimulationJobRequestLoggingConfig';
import CreateSimulationJobRequestOutputLocation from './CreateSimulationJobRequestOutputLocation';
import CreateSimulationJobRequestVpcConfig from './CreateSimulationJobRequestVpcConfig';
import DataSourceConfig from './DataSourceConfig';
import RobotApplicationConfig from './RobotApplicationConfig';
import SimulationApplicationConfig from './SimulationApplicationConfig';

/**
 * The CreateSimulationJobRequest model module.
 * @module model/CreateSimulationJobRequest
 * @version 2018-06-29
 */
class CreateSimulationJobRequest {
    /**
     * Constructs a new <code>CreateSimulationJobRequest</code>.
     * @alias module:model/CreateSimulationJobRequest
     * @param maxJobDurationInSeconds {Number} The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds. When <code>maxJobDurationInSeconds</code> is reached, the simulation job will status will transition to <code>Completed</code>.
     * @param iamRole {String} The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 
     */
    constructor(maxJobDurationInSeconds, iamRole) { 
        
        CreateSimulationJobRequest.initialize(this, maxJobDurationInSeconds, iamRole);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, maxJobDurationInSeconds, iamRole) { 
        obj['maxJobDurationInSeconds'] = maxJobDurationInSeconds;
        obj['iamRole'] = iamRole;
    }

    /**
     * Constructs a <code>CreateSimulationJobRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSimulationJobRequest} obj Optional instance to populate.
     * @return {module:model/CreateSimulationJobRequest} The populated <code>CreateSimulationJobRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateSimulationJobRequest();

            if (data.hasOwnProperty('clientRequestToken')) {
                obj['clientRequestToken'] = ApiClient.convertToType(data['clientRequestToken'], 'String');
            }
            if (data.hasOwnProperty('outputLocation')) {
                obj['outputLocation'] = CreateSimulationJobRequestOutputLocation.constructFromObject(data['outputLocation']);
            }
            if (data.hasOwnProperty('loggingConfig')) {
                obj['loggingConfig'] = CreateSimulationJobRequestLoggingConfig.constructFromObject(data['loggingConfig']);
            }
            if (data.hasOwnProperty('maxJobDurationInSeconds')) {
                obj['maxJobDurationInSeconds'] = ApiClient.convertToType(data['maxJobDurationInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('iamRole')) {
                obj['iamRole'] = ApiClient.convertToType(data['iamRole'], 'String');
            }
            if (data.hasOwnProperty('failureBehavior')) {
                obj['failureBehavior'] = ApiClient.convertToType(data['failureBehavior'], 'String');
            }
            if (data.hasOwnProperty('robotApplications')) {
                obj['robotApplications'] = ApiClient.convertToType(data['robotApplications'], [RobotApplicationConfig]);
            }
            if (data.hasOwnProperty('simulationApplications')) {
                obj['simulationApplications'] = ApiClient.convertToType(data['simulationApplications'], [SimulationApplicationConfig]);
            }
            if (data.hasOwnProperty('dataSources')) {
                obj['dataSources'] = ApiClient.convertToType(data['dataSources'], [DataSourceConfig]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('vpcConfig')) {
                obj['vpcConfig'] = CreateSimulationJobRequestVpcConfig.constructFromObject(data['vpcConfig']);
            }
            if (data.hasOwnProperty('compute')) {
                obj['compute'] = CreateSimulationJobRequestCompute.constructFromObject(data['compute']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateSimulationJobRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateSimulationJobRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateSimulationJobRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientRequestToken'] && !(typeof data['clientRequestToken'] === 'string' || data['clientRequestToken'] instanceof String)) {
            throw new Error("Expected the field `clientRequestToken` to be a primitive type in the JSON string but got " + data['clientRequestToken']);
        }
        // validate the optional field `outputLocation`
        if (data['outputLocation']) { // data not null
          CreateSimulationJobRequestOutputLocation.validateJSON(data['outputLocation']);
        }
        // validate the optional field `loggingConfig`
        if (data['loggingConfig']) { // data not null
          CreateSimulationJobRequestLoggingConfig.validateJSON(data['loggingConfig']);
        }
        // ensure the json data is a string
        if (data['iamRole'] && !(typeof data['iamRole'] === 'string' || data['iamRole'] instanceof String)) {
            throw new Error("Expected the field `iamRole` to be a primitive type in the JSON string but got " + data['iamRole']);
        }
        // ensure the json data is a string
        if (data['failureBehavior'] && !(typeof data['failureBehavior'] === 'string' || data['failureBehavior'] instanceof String)) {
            throw new Error("Expected the field `failureBehavior` to be a primitive type in the JSON string but got " + data['failureBehavior']);
        }
        if (data['robotApplications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['robotApplications'])) {
                throw new Error("Expected the field `robotApplications` to be an array in the JSON data but got " + data['robotApplications']);
            }
            // validate the optional field `robotApplications` (array)
            for (const item of data['robotApplications']) {
                RobotApplicationConfig.validateJSON(item);
            };
        }
        if (data['simulationApplications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['simulationApplications'])) {
                throw new Error("Expected the field `simulationApplications` to be an array in the JSON data but got " + data['simulationApplications']);
            }
            // validate the optional field `simulationApplications` (array)
            for (const item of data['simulationApplications']) {
                SimulationApplicationConfig.validateJSON(item);
            };
        }
        if (data['dataSources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataSources'])) {
                throw new Error("Expected the field `dataSources` to be an array in the JSON data but got " + data['dataSources']);
            }
            // validate the optional field `dataSources` (array)
            for (const item of data['dataSources']) {
                DataSourceConfig.validateJSON(item);
            };
        }
        // validate the optional field `vpcConfig`
        if (data['vpcConfig']) { // data not null
          CreateSimulationJobRequestVpcConfig.validateJSON(data['vpcConfig']);
        }
        // validate the optional field `compute`
        if (data['compute']) { // data not null
          CreateSimulationJobRequestCompute.validateJSON(data['compute']);
        }

        return true;
    }


}

CreateSimulationJobRequest.RequiredProperties = ["maxJobDurationInSeconds", "iamRole"];

/**
 * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
 * @member {String} clientRequestToken
 */
CreateSimulationJobRequest.prototype['clientRequestToken'] = undefined;

/**
 * @member {module:model/CreateSimulationJobRequestOutputLocation} outputLocation
 */
CreateSimulationJobRequest.prototype['outputLocation'] = undefined;

/**
 * @member {module:model/CreateSimulationJobRequestLoggingConfig} loggingConfig
 */
CreateSimulationJobRequest.prototype['loggingConfig'] = undefined;

/**
 * The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds. When <code>maxJobDurationInSeconds</code> is reached, the simulation job will status will transition to <code>Completed</code>.
 * @member {Number} maxJobDurationInSeconds
 */
CreateSimulationJobRequest.prototype['maxJobDurationInSeconds'] = undefined;

/**
 * The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 
 * @member {String} iamRole
 */
CreateSimulationJobRequest.prototype['iamRole'] = undefined;

/**
 * <p>The failure behavior the simulation job.</p> <dl> <dt>Continue</dt> <dd> <p>Leaves the instance running for its maximum timeout duration after a <code>4XX</code> error code.</p> </dd> <dt>Fail</dt> <dd> <p>Stop the simulation job and terminate the instance.</p> </dd> </dl>
 * @member {module:model/CreateSimulationJobRequest.FailureBehaviorEnum} failureBehavior
 */
CreateSimulationJobRequest.prototype['failureBehavior'] = undefined;

/**
 * The robot application to use in the simulation job.
 * @member {Array.<module:model/RobotApplicationConfig>} robotApplications
 */
CreateSimulationJobRequest.prototype['robotApplications'] = undefined;

/**
 * The simulation application to use in the simulation job.
 * @member {Array.<module:model/SimulationApplicationConfig>} simulationApplications
 */
CreateSimulationJobRequest.prototype['simulationApplications'] = undefined;

/**
 * <p>Specify data sources to mount read-only files from S3 into your simulation. These files are available under <code>/opt/robomaker/datasources/data_source_name</code>. </p> <note> <p>There is a limit of 100 files and a combined size of 25GB for all <code>DataSourceConfig</code> objects. </p> </note>
 * @member {Array.<module:model/DataSourceConfig>} dataSources
 */
CreateSimulationJobRequest.prototype['dataSources'] = undefined;

/**
 * A map that contains tag keys and tag values that are attached to the simulation job.
 * @member {Object.<String, String>} tags
 */
CreateSimulationJobRequest.prototype['tags'] = undefined;

/**
 * @member {module:model/CreateSimulationJobRequestVpcConfig} vpcConfig
 */
CreateSimulationJobRequest.prototype['vpcConfig'] = undefined;

/**
 * @member {module:model/CreateSimulationJobRequestCompute} compute
 */
CreateSimulationJobRequest.prototype['compute'] = undefined;





/**
 * Allowed values for the <code>failureBehavior</code> property.
 * @enum {String}
 * @readonly
 */
CreateSimulationJobRequest['FailureBehaviorEnum'] = {

    /**
     * value: "Fail"
     * @const
     */
    "Fail": "Fail",

    /**
     * value: "Continue"
     * @const
     */
    "Continue": "Continue"
};



export default CreateSimulationJobRequest;

