/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UploadBehavior from './UploadBehavior';

/**
 * The UploadConfiguration model module.
 * @module model/UploadConfiguration
 * @version 2018-06-29
 */
class UploadConfiguration {
    /**
     * Constructs a new <code>UploadConfiguration</code>.
     * Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 
     * @alias module:model/UploadConfiguration
     * @param name {String} 
     * @param path {String} 
     * @param uploadBehavior {module:model/UploadBehavior} 
     */
    constructor(name, path, uploadBehavior) { 
        
        UploadConfiguration.initialize(this, name, path, uploadBehavior);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, path, uploadBehavior) { 
        obj['name'] = name;
        obj['path'] = path;
        obj['uploadBehavior'] = uploadBehavior;
    }

    /**
     * Constructs a <code>UploadConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadConfiguration} obj Optional instance to populate.
     * @return {module:model/UploadConfiguration} The populated <code>UploadConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadConfiguration();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('uploadBehavior')) {
                obj['uploadBehavior'] = ApiClient.convertToType(data['uploadBehavior'], UploadBehavior);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UploadConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `path`
        if (data['path']) { // data not null
          String.validateJSON(data['path']);
        }
        // validate the optional field `uploadBehavior`
        if (data['uploadBehavior']) { // data not null
          UploadBehavior.validateJSON(data['uploadBehavior']);
        }

        return true;
    }


}

UploadConfiguration.RequiredProperties = ["name", "path", "uploadBehavior"];

/**
 * @member {String} name
 */
UploadConfiguration.prototype['name'] = undefined;

/**
 * @member {String} path
 */
UploadConfiguration.prototype['path'] = undefined;

/**
 * @member {module:model/UploadBehavior} uploadBehavior
 */
UploadConfiguration.prototype['uploadBehavior'] = undefined;






export default UploadConfiguration;

