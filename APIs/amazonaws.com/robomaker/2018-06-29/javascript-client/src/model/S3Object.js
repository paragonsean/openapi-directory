/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The S3Object model module.
 * @module model/S3Object
 * @version 2018-06-29
 */
class S3Object {
    /**
     * Constructs a new <code>S3Object</code>.
     * Information about an S3 object.
     * @alias module:model/S3Object
     * @param bucket {String} 
     * @param key {String} 
     */
    constructor(bucket, key) { 
        
        S3Object.initialize(this, bucket, key);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bucket, key) { 
        obj['bucket'] = bucket;
        obj['key'] = key;
    }

    /**
     * Constructs a <code>S3Object</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/S3Object} obj Optional instance to populate.
     * @return {module:model/S3Object} The populated <code>S3Object</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new S3Object();

            if (data.hasOwnProperty('bucket')) {
                obj['bucket'] = ApiClient.convertToType(data['bucket'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>S3Object</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>S3Object</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of S3Object.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `bucket`
        if (data['bucket']) { // data not null
          String.validateJSON(data['bucket']);
        }
        // validate the optional field `key`
        if (data['key']) { // data not null
          String.validateJSON(data['key']);
        }
        // validate the optional field `etag`
        if (data['etag']) { // data not null
          String.validateJSON(data['etag']);
        }

        return true;
    }


}

S3Object.RequiredProperties = ["bucket", "key"];

/**
 * @member {String} bucket
 */
S3Object.prototype['bucket'] = undefined;

/**
 * @member {String} key
 */
S3Object.prototype['key'] = undefined;

/**
 * @member {String} etag
 */
S3Object.prototype['etag'] = undefined;






export default S3Object;

