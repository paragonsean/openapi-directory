/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchDeleteWorldsRequest from '../model/BatchDeleteWorldsRequest';
import BatchDeleteWorldsResponse from '../model/BatchDeleteWorldsResponse';
import BatchDescribeSimulationJobRequest from '../model/BatchDescribeSimulationJobRequest';
import BatchDescribeSimulationJobResponse from '../model/BatchDescribeSimulationJobResponse';
import CancelDeploymentJobRequest from '../model/CancelDeploymentJobRequest';
import CancelSimulationJobBatchRequest from '../model/CancelSimulationJobBatchRequest';
import CancelSimulationJobRequest from '../model/CancelSimulationJobRequest';
import CancelWorldExportJobRequest from '../model/CancelWorldExportJobRequest';
import CancelWorldGenerationJobRequest from '../model/CancelWorldGenerationJobRequest';
import CreateDeploymentJobRequest from '../model/CreateDeploymentJobRequest';
import CreateDeploymentJobResponse from '../model/CreateDeploymentJobResponse';
import CreateFleetRequest from '../model/CreateFleetRequest';
import CreateFleetResponse from '../model/CreateFleetResponse';
import CreateRobotApplicationRequest from '../model/CreateRobotApplicationRequest';
import CreateRobotApplicationResponse from '../model/CreateRobotApplicationResponse';
import CreateRobotApplicationVersionRequest from '../model/CreateRobotApplicationVersionRequest';
import CreateRobotApplicationVersionResponse from '../model/CreateRobotApplicationVersionResponse';
import CreateRobotRequest from '../model/CreateRobotRequest';
import CreateRobotResponse from '../model/CreateRobotResponse';
import CreateSimulationApplicationRequest from '../model/CreateSimulationApplicationRequest';
import CreateSimulationApplicationResponse from '../model/CreateSimulationApplicationResponse';
import CreateSimulationApplicationVersionRequest from '../model/CreateSimulationApplicationVersionRequest';
import CreateSimulationApplicationVersionResponse from '../model/CreateSimulationApplicationVersionResponse';
import CreateSimulationJobRequest from '../model/CreateSimulationJobRequest';
import CreateSimulationJobResponse from '../model/CreateSimulationJobResponse';
import CreateWorldExportJobRequest from '../model/CreateWorldExportJobRequest';
import CreateWorldExportJobResponse from '../model/CreateWorldExportJobResponse';
import CreateWorldGenerationJobRequest from '../model/CreateWorldGenerationJobRequest';
import CreateWorldGenerationJobResponse from '../model/CreateWorldGenerationJobResponse';
import CreateWorldTemplateRequest from '../model/CreateWorldTemplateRequest';
import CreateWorldTemplateResponse from '../model/CreateWorldTemplateResponse';
import DeleteFleetRequest from '../model/DeleteFleetRequest';
import DeleteRobotApplicationRequest from '../model/DeleteRobotApplicationRequest';
import DeleteRobotRequest from '../model/DeleteRobotRequest';
import DeleteSimulationApplicationRequest from '../model/DeleteSimulationApplicationRequest';
import DeleteWorldTemplateRequest from '../model/DeleteWorldTemplateRequest';
import DeregisterRobotRequest from '../model/DeregisterRobotRequest';
import DeregisterRobotResponse from '../model/DeregisterRobotResponse';
import DescribeDeploymentJobRequest from '../model/DescribeDeploymentJobRequest';
import DescribeDeploymentJobResponse from '../model/DescribeDeploymentJobResponse';
import DescribeFleetResponse from '../model/DescribeFleetResponse';
import DescribeRobotApplicationRequest from '../model/DescribeRobotApplicationRequest';
import DescribeRobotApplicationResponse from '../model/DescribeRobotApplicationResponse';
import DescribeRobotRequest from '../model/DescribeRobotRequest';
import DescribeRobotResponse from '../model/DescribeRobotResponse';
import DescribeSimulationApplicationRequest from '../model/DescribeSimulationApplicationRequest';
import DescribeSimulationApplicationResponse from '../model/DescribeSimulationApplicationResponse';
import DescribeSimulationJobBatchRequest from '../model/DescribeSimulationJobBatchRequest';
import DescribeSimulationJobBatchResponse from '../model/DescribeSimulationJobBatchResponse';
import DescribeSimulationJobRequest from '../model/DescribeSimulationJobRequest';
import DescribeSimulationJobResponse from '../model/DescribeSimulationJobResponse';
import DescribeWorldExportJobRequest from '../model/DescribeWorldExportJobRequest';
import DescribeWorldExportJobResponse from '../model/DescribeWorldExportJobResponse';
import DescribeWorldGenerationJobRequest from '../model/DescribeWorldGenerationJobRequest';
import DescribeWorldGenerationJobResponse from '../model/DescribeWorldGenerationJobResponse';
import DescribeWorldRequest from '../model/DescribeWorldRequest';
import DescribeWorldResponse from '../model/DescribeWorldResponse';
import DescribeWorldTemplateRequest from '../model/DescribeWorldTemplateRequest';
import DescribeWorldTemplateResponse from '../model/DescribeWorldTemplateResponse';
import GetWorldTemplateBodyRequest from '../model/GetWorldTemplateBodyRequest';
import GetWorldTemplateBodyResponse from '../model/GetWorldTemplateBodyResponse';
import ListDeploymentJobsRequest from '../model/ListDeploymentJobsRequest';
import ListDeploymentJobsResponse from '../model/ListDeploymentJobsResponse';
import ListFleetsRequest from '../model/ListFleetsRequest';
import ListFleetsResponse from '../model/ListFleetsResponse';
import ListRobotApplicationsRequest from '../model/ListRobotApplicationsRequest';
import ListRobotApplicationsResponse from '../model/ListRobotApplicationsResponse';
import ListRobotsRequest from '../model/ListRobotsRequest';
import ListRobotsResponse from '../model/ListRobotsResponse';
import ListSimulationApplicationsRequest from '../model/ListSimulationApplicationsRequest';
import ListSimulationApplicationsResponse from '../model/ListSimulationApplicationsResponse';
import ListSimulationJobBatchesRequest from '../model/ListSimulationJobBatchesRequest';
import ListSimulationJobBatchesResponse from '../model/ListSimulationJobBatchesResponse';
import ListSimulationJobsRequest from '../model/ListSimulationJobsRequest';
import ListSimulationJobsResponse from '../model/ListSimulationJobsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListWorldExportJobsRequest from '../model/ListWorldExportJobsRequest';
import ListWorldExportJobsResponse from '../model/ListWorldExportJobsResponse';
import ListWorldGenerationJobsRequest from '../model/ListWorldGenerationJobsRequest';
import ListWorldGenerationJobsResponse from '../model/ListWorldGenerationJobsResponse';
import ListWorldTemplatesRequest from '../model/ListWorldTemplatesRequest';
import ListWorldTemplatesResponse from '../model/ListWorldTemplatesResponse';
import ListWorldsRequest from '../model/ListWorldsRequest';
import ListWorldsResponse from '../model/ListWorldsResponse';
import RegisterRobotResponse from '../model/RegisterRobotResponse';
import RestartSimulationJobRequest from '../model/RestartSimulationJobRequest';
import StartSimulationJobBatchRequest from '../model/StartSimulationJobBatchRequest';
import StartSimulationJobBatchResponse from '../model/StartSimulationJobBatchResponse';
import SyncDeploymentJobRequest from '../model/SyncDeploymentJobRequest';
import SyncDeploymentJobResponse from '../model/SyncDeploymentJobResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateRobotApplicationRequest from '../model/UpdateRobotApplicationRequest';
import UpdateRobotApplicationResponse from '../model/UpdateRobotApplicationResponse';
import UpdateSimulationApplicationRequest from '../model/UpdateSimulationApplicationRequest';
import UpdateSimulationApplicationResponse from '../model/UpdateSimulationApplicationResponse';
import UpdateWorldTemplateRequest from '../model/UpdateWorldTemplateRequest';
import UpdateWorldTemplateResponse from '../model/UpdateWorldTemplateResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-06-29
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchDeleteWorlds operation.
     * @callback module:api/DefaultApi~batchDeleteWorldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteWorldsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes one or more worlds in a batch operation.
     * @param {module:model/BatchDeleteWorldsRequest} batchDeleteWorldsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDeleteWorldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteWorldsResponse}
     */
    batchDeleteWorlds(batchDeleteWorldsRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDeleteWorldsRequest;
      // verify the required parameter 'batchDeleteWorldsRequest' is set
      if (batchDeleteWorldsRequest === undefined || batchDeleteWorldsRequest === null) {
        throw new Error("Missing the required parameter 'batchDeleteWorldsRequest' when calling batchDeleteWorlds");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDeleteWorldsResponse;
      return this.apiClient.callApi(
        '/batchDeleteWorlds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDescribeSimulationJob operation.
     * @callback module:api/DefaultApi~batchDescribeSimulationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDescribeSimulationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes one or more simulation jobs.
     * @param {module:model/BatchDescribeSimulationJobRequest} batchDescribeSimulationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDescribeSimulationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDescribeSimulationJobResponse}
     */
    batchDescribeSimulationJob(batchDescribeSimulationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDescribeSimulationJobRequest;
      // verify the required parameter 'batchDescribeSimulationJobRequest' is set
      if (batchDescribeSimulationJobRequest === undefined || batchDescribeSimulationJobRequest === null) {
        throw new Error("Missing the required parameter 'batchDescribeSimulationJobRequest' when calling batchDescribeSimulationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDescribeSimulationJobResponse;
      return this.apiClient.callApi(
        '/batchDescribeSimulationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelDeploymentJob operation.
     * @callback module:api/DefaultApi~cancelDeploymentJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Cancels the specified deployment job.</p> <important> <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p> </important>
     * @param {module:model/CancelDeploymentJobRequest} cancelDeploymentJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelDeploymentJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelDeploymentJob(cancelDeploymentJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelDeploymentJobRequest;
      // verify the required parameter 'cancelDeploymentJobRequest' is set
      if (cancelDeploymentJobRequest === undefined || cancelDeploymentJobRequest === null) {
        throw new Error("Missing the required parameter 'cancelDeploymentJobRequest' when calling cancelDeploymentJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cancelDeploymentJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelSimulationJob operation.
     * @callback module:api/DefaultApi~cancelSimulationJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels the specified simulation job.
     * @param {module:model/CancelSimulationJobRequest} cancelSimulationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelSimulationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelSimulationJob(cancelSimulationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelSimulationJobRequest;
      // verify the required parameter 'cancelSimulationJobRequest' is set
      if (cancelSimulationJobRequest === undefined || cancelSimulationJobRequest === null) {
        throw new Error("Missing the required parameter 'cancelSimulationJobRequest' when calling cancelSimulationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cancelSimulationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelSimulationJobBatch operation.
     * @callback module:api/DefaultApi~cancelSimulationJobBatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a simulation job batch. When you cancel a simulation job batch, you are also cancelling all of the active simulation jobs created as part of the batch. 
     * @param {module:model/CancelSimulationJobBatchRequest} cancelSimulationJobBatchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelSimulationJobBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelSimulationJobBatch(cancelSimulationJobBatchRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelSimulationJobBatchRequest;
      // verify the required parameter 'cancelSimulationJobBatchRequest' is set
      if (cancelSimulationJobBatchRequest === undefined || cancelSimulationJobBatchRequest === null) {
        throw new Error("Missing the required parameter 'cancelSimulationJobBatchRequest' when calling cancelSimulationJobBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cancelSimulationJobBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelWorldExportJob operation.
     * @callback module:api/DefaultApi~cancelWorldExportJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels the specified export job.
     * @param {module:model/CancelWorldExportJobRequest} cancelWorldExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelWorldExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelWorldExportJob(cancelWorldExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelWorldExportJobRequest;
      // verify the required parameter 'cancelWorldExportJobRequest' is set
      if (cancelWorldExportJobRequest === undefined || cancelWorldExportJobRequest === null) {
        throw new Error("Missing the required parameter 'cancelWorldExportJobRequest' when calling cancelWorldExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cancelWorldExportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelWorldGenerationJob operation.
     * @callback module:api/DefaultApi~cancelWorldGenerationJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels the specified world generator job.
     * @param {module:model/CancelWorldGenerationJobRequest} cancelWorldGenerationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelWorldGenerationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelWorldGenerationJob(cancelWorldGenerationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelWorldGenerationJobRequest;
      // verify the required parameter 'cancelWorldGenerationJobRequest' is set
      if (cancelWorldGenerationJobRequest === undefined || cancelWorldGenerationJobRequest === null) {
        throw new Error("Missing the required parameter 'cancelWorldGenerationJobRequest' when calling cancelWorldGenerationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cancelWorldGenerationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeploymentJob operation.
     * @callback module:api/DefaultApi~createDeploymentJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDeploymentJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deploys a specific version of a robot application to robots in a fleet.</p> <important> <p>This API is no longer supported and will throw an error if used.</p> </important> <p>The robot application must have a numbered <code>applicationVersion</code> for consistency reasons. To create a new version, use <code>CreateRobotApplicationVersion</code> or see <a href=\"https://docs.aws.amazon.com/robomaker/latest/dg/create-robot-application-version.html\">Creating a Robot Application Version</a>. </p> <note> <p>After 90 days, deployment jobs expire and will be deleted. They will no longer be accessible. </p> </note>
     * @param {module:model/CreateDeploymentJobRequest} createDeploymentJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDeploymentJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDeploymentJobResponse}
     */
    createDeploymentJob(createDeploymentJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDeploymentJobRequest;
      // verify the required parameter 'createDeploymentJobRequest' is set
      if (createDeploymentJobRequest === undefined || createDeploymentJobRequest === null) {
        throw new Error("Missing the required parameter 'createDeploymentJobRequest' when calling createDeploymentJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDeploymentJobResponse;
      return this.apiClient.callApi(
        '/createDeploymentJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFleet operation.
     * @callback module:api/DefaultApi~createFleetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFleetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a fleet, a logical group of robots running the same robot application.</p> <important> <p>This API is no longer supported and will throw an error if used.</p> </important>
     * @param {module:model/CreateFleetRequest} createFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFleetResponse}
     */
    createFleet(createFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFleetRequest;
      // verify the required parameter 'createFleetRequest' is set
      if (createFleetRequest === undefined || createFleetRequest === null) {
        throw new Error("Missing the required parameter 'createFleetRequest' when calling createFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFleetResponse;
      return this.apiClient.callApi(
        '/createFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRobot operation.
     * @callback module:api/DefaultApi~createRobotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRobotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a robot.</p> <important> <p>This API is no longer supported and will throw an error if used.</p> </important>
     * @param {module:model/CreateRobotRequest} createRobotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRobotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRobotResponse}
     */
    createRobot(createRobotRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRobotRequest;
      // verify the required parameter 'createRobotRequest' is set
      if (createRobotRequest === undefined || createRobotRequest === null) {
        throw new Error("Missing the required parameter 'createRobotRequest' when calling createRobot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRobotResponse;
      return this.apiClient.callApi(
        '/createRobot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRobotApplication operation.
     * @callback module:api/DefaultApi~createRobotApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRobotApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a robot application. 
     * @param {module:model/CreateRobotApplicationRequest} createRobotApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRobotApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRobotApplicationResponse}
     */
    createRobotApplication(createRobotApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRobotApplicationRequest;
      // verify the required parameter 'createRobotApplicationRequest' is set
      if (createRobotApplicationRequest === undefined || createRobotApplicationRequest === null) {
        throw new Error("Missing the required parameter 'createRobotApplicationRequest' when calling createRobotApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRobotApplicationResponse;
      return this.apiClient.callApi(
        '/createRobotApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRobotApplicationVersion operation.
     * @callback module:api/DefaultApi~createRobotApplicationVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRobotApplicationVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a version of a robot application.
     * @param {module:model/CreateRobotApplicationVersionRequest} createRobotApplicationVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRobotApplicationVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRobotApplicationVersionResponse}
     */
    createRobotApplicationVersion(createRobotApplicationVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRobotApplicationVersionRequest;
      // verify the required parameter 'createRobotApplicationVersionRequest' is set
      if (createRobotApplicationVersionRequest === undefined || createRobotApplicationVersionRequest === null) {
        throw new Error("Missing the required parameter 'createRobotApplicationVersionRequest' when calling createRobotApplicationVersion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRobotApplicationVersionResponse;
      return this.apiClient.callApi(
        '/createRobotApplicationVersion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSimulationApplication operation.
     * @callback module:api/DefaultApi~createSimulationApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSimulationApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a simulation application.
     * @param {module:model/CreateSimulationApplicationRequest} createSimulationApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSimulationApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSimulationApplicationResponse}
     */
    createSimulationApplication(createSimulationApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSimulationApplicationRequest;
      // verify the required parameter 'createSimulationApplicationRequest' is set
      if (createSimulationApplicationRequest === undefined || createSimulationApplicationRequest === null) {
        throw new Error("Missing the required parameter 'createSimulationApplicationRequest' when calling createSimulationApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSimulationApplicationResponse;
      return this.apiClient.callApi(
        '/createSimulationApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSimulationApplicationVersion operation.
     * @callback module:api/DefaultApi~createSimulationApplicationVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSimulationApplicationVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a simulation application with a specific revision id.
     * @param {module:model/CreateSimulationApplicationVersionRequest} createSimulationApplicationVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSimulationApplicationVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSimulationApplicationVersionResponse}
     */
    createSimulationApplicationVersion(createSimulationApplicationVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSimulationApplicationVersionRequest;
      // verify the required parameter 'createSimulationApplicationVersionRequest' is set
      if (createSimulationApplicationVersionRequest === undefined || createSimulationApplicationVersionRequest === null) {
        throw new Error("Missing the required parameter 'createSimulationApplicationVersionRequest' when calling createSimulationApplicationVersion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSimulationApplicationVersionResponse;
      return this.apiClient.callApi(
        '/createSimulationApplicationVersion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSimulationJob operation.
     * @callback module:api/DefaultApi~createSimulationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSimulationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a simulation job.</p> <note> <p>After 90 days, simulation jobs expire and will be deleted. They will no longer be accessible. </p> </note>
     * @param {module:model/CreateSimulationJobRequest} createSimulationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSimulationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSimulationJobResponse}
     */
    createSimulationJob(createSimulationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSimulationJobRequest;
      // verify the required parameter 'createSimulationJobRequest' is set
      if (createSimulationJobRequest === undefined || createSimulationJobRequest === null) {
        throw new Error("Missing the required parameter 'createSimulationJobRequest' when calling createSimulationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSimulationJobResponse;
      return this.apiClient.callApi(
        '/createSimulationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorldExportJob operation.
     * @callback module:api/DefaultApi~createWorldExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorldExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a world export job.
     * @param {module:model/CreateWorldExportJobRequest} createWorldExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWorldExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorldExportJobResponse}
     */
    createWorldExportJob(createWorldExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWorldExportJobRequest;
      // verify the required parameter 'createWorldExportJobRequest' is set
      if (createWorldExportJobRequest === undefined || createWorldExportJobRequest === null) {
        throw new Error("Missing the required parameter 'createWorldExportJobRequest' when calling createWorldExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorldExportJobResponse;
      return this.apiClient.callApi(
        '/createWorldExportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorldGenerationJob operation.
     * @callback module:api/DefaultApi~createWorldGenerationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorldGenerationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates worlds using the specified template.
     * @param {module:model/CreateWorldGenerationJobRequest} createWorldGenerationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWorldGenerationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorldGenerationJobResponse}
     */
    createWorldGenerationJob(createWorldGenerationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWorldGenerationJobRequest;
      // verify the required parameter 'createWorldGenerationJobRequest' is set
      if (createWorldGenerationJobRequest === undefined || createWorldGenerationJobRequest === null) {
        throw new Error("Missing the required parameter 'createWorldGenerationJobRequest' when calling createWorldGenerationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorldGenerationJobResponse;
      return this.apiClient.callApi(
        '/createWorldGenerationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorldTemplate operation.
     * @callback module:api/DefaultApi~createWorldTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorldTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a world template.
     * @param {module:model/CreateWorldTemplateRequest} createWorldTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWorldTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorldTemplateResponse}
     */
    createWorldTemplate(createWorldTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWorldTemplateRequest;
      // verify the required parameter 'createWorldTemplateRequest' is set
      if (createWorldTemplateRequest === undefined || createWorldTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createWorldTemplateRequest' when calling createWorldTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorldTemplateResponse;
      return this.apiClient.callApi(
        '/createWorldTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFleet operation.
     * @callback module:api/DefaultApi~deleteFleetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a fleet.</p> <important> <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p> </important>
     * @param {module:model/DeleteFleetRequest} deleteFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteFleet(deleteFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFleetRequest;
      // verify the required parameter 'deleteFleetRequest' is set
      if (deleteFleetRequest === undefined || deleteFleetRequest === null) {
        throw new Error("Missing the required parameter 'deleteFleetRequest' when calling deleteFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/deleteFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRobot operation.
     * @callback module:api/DefaultApi~deleteRobotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a robot.</p> <important> <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p> </important>
     * @param {module:model/DeleteRobotRequest} deleteRobotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRobotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRobot(deleteRobotRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteRobotRequest;
      // verify the required parameter 'deleteRobotRequest' is set
      if (deleteRobotRequest === undefined || deleteRobotRequest === null) {
        throw new Error("Missing the required parameter 'deleteRobotRequest' when calling deleteRobot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/deleteRobot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRobotApplication operation.
     * @callback module:api/DefaultApi~deleteRobotApplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a robot application.
     * @param {module:model/DeleteRobotApplicationRequest} deleteRobotApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRobotApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRobotApplication(deleteRobotApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteRobotApplicationRequest;
      // verify the required parameter 'deleteRobotApplicationRequest' is set
      if (deleteRobotApplicationRequest === undefined || deleteRobotApplicationRequest === null) {
        throw new Error("Missing the required parameter 'deleteRobotApplicationRequest' when calling deleteRobotApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/deleteRobotApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSimulationApplication operation.
     * @callback module:api/DefaultApi~deleteSimulationApplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a simulation application.
     * @param {module:model/DeleteSimulationApplicationRequest} deleteSimulationApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSimulationApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSimulationApplication(deleteSimulationApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteSimulationApplicationRequest;
      // verify the required parameter 'deleteSimulationApplicationRequest' is set
      if (deleteSimulationApplicationRequest === undefined || deleteSimulationApplicationRequest === null) {
        throw new Error("Missing the required parameter 'deleteSimulationApplicationRequest' when calling deleteSimulationApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/deleteSimulationApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorldTemplate operation.
     * @callback module:api/DefaultApi~deleteWorldTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a world template.
     * @param {module:model/DeleteWorldTemplateRequest} deleteWorldTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWorldTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWorldTemplate(deleteWorldTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteWorldTemplateRequest;
      // verify the required parameter 'deleteWorldTemplateRequest' is set
      if (deleteWorldTemplateRequest === undefined || deleteWorldTemplateRequest === null) {
        throw new Error("Missing the required parameter 'deleteWorldTemplateRequest' when calling deleteWorldTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/deleteWorldTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterRobot operation.
     * @callback module:api/DefaultApi~deregisterRobotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeregisterRobotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deregisters a robot.</p> <important> <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p> </important>
     * @param {module:model/DeregisterRobotRequest} deregisterRobotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deregisterRobotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeregisterRobotResponse}
     */
    deregisterRobot(deregisterRobotRequest, opts, callback) {
      opts = opts || {};
      let postBody = deregisterRobotRequest;
      // verify the required parameter 'deregisterRobotRequest' is set
      if (deregisterRobotRequest === undefined || deregisterRobotRequest === null) {
        throw new Error("Missing the required parameter 'deregisterRobotRequest' when calling deregisterRobot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeregisterRobotResponse;
      return this.apiClient.callApi(
        '/deregisterRobot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDeploymentJob operation.
     * @callback module:api/DefaultApi~describeDeploymentJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDeploymentJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes a deployment job.</p> <important> <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p> </important>
     * @param {module:model/DescribeDeploymentJobRequest} describeDeploymentJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDeploymentJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDeploymentJobResponse}
     */
    describeDeploymentJob(describeDeploymentJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDeploymentJobRequest;
      // verify the required parameter 'describeDeploymentJobRequest' is set
      if (describeDeploymentJobRequest === undefined || describeDeploymentJobRequest === null) {
        throw new Error("Missing the required parameter 'describeDeploymentJobRequest' when calling describeDeploymentJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDeploymentJobResponse;
      return this.apiClient.callApi(
        '/describeDeploymentJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFleet operation.
     * @callback module:api/DefaultApi~describeFleetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFleetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes a fleet.</p> <important> <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p> </important>
     * @param {module:model/DeleteFleetRequest} deleteFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFleetResponse}
     */
    describeFleet(deleteFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFleetRequest;
      // verify the required parameter 'deleteFleetRequest' is set
      if (deleteFleetRequest === undefined || deleteFleetRequest === null) {
        throw new Error("Missing the required parameter 'deleteFleetRequest' when calling describeFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFleetResponse;
      return this.apiClient.callApi(
        '/describeFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRobot operation.
     * @callback module:api/DefaultApi~describeRobotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRobotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes a robot.</p> <important> <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p> </important>
     * @param {module:model/DescribeRobotRequest} describeRobotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRobotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRobotResponse}
     */
    describeRobot(describeRobotRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeRobotRequest;
      // verify the required parameter 'describeRobotRequest' is set
      if (describeRobotRequest === undefined || describeRobotRequest === null) {
        throw new Error("Missing the required parameter 'describeRobotRequest' when calling describeRobot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeRobotResponse;
      return this.apiClient.callApi(
        '/describeRobot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRobotApplication operation.
     * @callback module:api/DefaultApi~describeRobotApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRobotApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a robot application.
     * @param {module:model/DescribeRobotApplicationRequest} describeRobotApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRobotApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRobotApplicationResponse}
     */
    describeRobotApplication(describeRobotApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeRobotApplicationRequest;
      // verify the required parameter 'describeRobotApplicationRequest' is set
      if (describeRobotApplicationRequest === undefined || describeRobotApplicationRequest === null) {
        throw new Error("Missing the required parameter 'describeRobotApplicationRequest' when calling describeRobotApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeRobotApplicationResponse;
      return this.apiClient.callApi(
        '/describeRobotApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSimulationApplication operation.
     * @callback module:api/DefaultApi~describeSimulationApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSimulationApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a simulation application.
     * @param {module:model/DescribeSimulationApplicationRequest} describeSimulationApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSimulationApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSimulationApplicationResponse}
     */
    describeSimulationApplication(describeSimulationApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeSimulationApplicationRequest;
      // verify the required parameter 'describeSimulationApplicationRequest' is set
      if (describeSimulationApplicationRequest === undefined || describeSimulationApplicationRequest === null) {
        throw new Error("Missing the required parameter 'describeSimulationApplicationRequest' when calling describeSimulationApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSimulationApplicationResponse;
      return this.apiClient.callApi(
        '/describeSimulationApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSimulationJob operation.
     * @callback module:api/DefaultApi~describeSimulationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSimulationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a simulation job.
     * @param {module:model/DescribeSimulationJobRequest} describeSimulationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSimulationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSimulationJobResponse}
     */
    describeSimulationJob(describeSimulationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeSimulationJobRequest;
      // verify the required parameter 'describeSimulationJobRequest' is set
      if (describeSimulationJobRequest === undefined || describeSimulationJobRequest === null) {
        throw new Error("Missing the required parameter 'describeSimulationJobRequest' when calling describeSimulationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSimulationJobResponse;
      return this.apiClient.callApi(
        '/describeSimulationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSimulationJobBatch operation.
     * @callback module:api/DefaultApi~describeSimulationJobBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSimulationJobBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a simulation job batch.
     * @param {module:model/DescribeSimulationJobBatchRequest} describeSimulationJobBatchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSimulationJobBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSimulationJobBatchResponse}
     */
    describeSimulationJobBatch(describeSimulationJobBatchRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeSimulationJobBatchRequest;
      // verify the required parameter 'describeSimulationJobBatchRequest' is set
      if (describeSimulationJobBatchRequest === undefined || describeSimulationJobBatchRequest === null) {
        throw new Error("Missing the required parameter 'describeSimulationJobBatchRequest' when calling describeSimulationJobBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSimulationJobBatchResponse;
      return this.apiClient.callApi(
        '/describeSimulationJobBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorld operation.
     * @callback module:api/DefaultApi~describeWorldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a world.
     * @param {module:model/DescribeWorldRequest} describeWorldRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWorldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorldResponse}
     */
    describeWorld(describeWorldRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorldRequest;
      // verify the required parameter 'describeWorldRequest' is set
      if (describeWorldRequest === undefined || describeWorldRequest === null) {
        throw new Error("Missing the required parameter 'describeWorldRequest' when calling describeWorld");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorldResponse;
      return this.apiClient.callApi(
        '/describeWorld', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorldExportJob operation.
     * @callback module:api/DefaultApi~describeWorldExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorldExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a world export job.
     * @param {module:model/DescribeWorldExportJobRequest} describeWorldExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWorldExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorldExportJobResponse}
     */
    describeWorldExportJob(describeWorldExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorldExportJobRequest;
      // verify the required parameter 'describeWorldExportJobRequest' is set
      if (describeWorldExportJobRequest === undefined || describeWorldExportJobRequest === null) {
        throw new Error("Missing the required parameter 'describeWorldExportJobRequest' when calling describeWorldExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorldExportJobResponse;
      return this.apiClient.callApi(
        '/describeWorldExportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorldGenerationJob operation.
     * @callback module:api/DefaultApi~describeWorldGenerationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorldGenerationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a world generation job.
     * @param {module:model/DescribeWorldGenerationJobRequest} describeWorldGenerationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWorldGenerationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorldGenerationJobResponse}
     */
    describeWorldGenerationJob(describeWorldGenerationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorldGenerationJobRequest;
      // verify the required parameter 'describeWorldGenerationJobRequest' is set
      if (describeWorldGenerationJobRequest === undefined || describeWorldGenerationJobRequest === null) {
        throw new Error("Missing the required parameter 'describeWorldGenerationJobRequest' when calling describeWorldGenerationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorldGenerationJobResponse;
      return this.apiClient.callApi(
        '/describeWorldGenerationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorldTemplate operation.
     * @callback module:api/DefaultApi~describeWorldTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorldTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a world template.
     * @param {module:model/DescribeWorldTemplateRequest} describeWorldTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWorldTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorldTemplateResponse}
     */
    describeWorldTemplate(describeWorldTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorldTemplateRequest;
      // verify the required parameter 'describeWorldTemplateRequest' is set
      if (describeWorldTemplateRequest === undefined || describeWorldTemplateRequest === null) {
        throw new Error("Missing the required parameter 'describeWorldTemplateRequest' when calling describeWorldTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorldTemplateResponse;
      return this.apiClient.callApi(
        '/describeWorldTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorldTemplateBody operation.
     * @callback module:api/DefaultApi~getWorldTemplateBodyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWorldTemplateBodyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the world template body.
     * @param {module:model/GetWorldTemplateBodyRequest} getWorldTemplateBodyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWorldTemplateBodyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWorldTemplateBodyResponse}
     */
    getWorldTemplateBody(getWorldTemplateBodyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getWorldTemplateBodyRequest;
      // verify the required parameter 'getWorldTemplateBodyRequest' is set
      if (getWorldTemplateBodyRequest === undefined || getWorldTemplateBodyRequest === null) {
        throw new Error("Missing the required parameter 'getWorldTemplateBodyRequest' when calling getWorldTemplateBody");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetWorldTemplateBodyResponse;
      return this.apiClient.callApi(
        '/getWorldTemplateBody', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeploymentJobs operation.
     * @callback module:api/DefaultApi~listDeploymentJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDeploymentJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of deployment jobs for a fleet. You can optionally provide filters to retrieve specific deployment jobs.</p> <important> <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p> </important>
     * @param {module:model/ListDeploymentJobsRequest} listDeploymentJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDeploymentJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDeploymentJobsResponse}
     */
    listDeploymentJobs(listDeploymentJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDeploymentJobsRequest;
      // verify the required parameter 'listDeploymentJobsRequest' is set
      if (listDeploymentJobsRequest === undefined || listDeploymentJobsRequest === null) {
        throw new Error("Missing the required parameter 'listDeploymentJobsRequest' when calling listDeploymentJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDeploymentJobsResponse;
      return this.apiClient.callApi(
        '/listDeploymentJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFleets operation.
     * @callback module:api/DefaultApi~listFleetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFleetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of fleets. You can optionally provide filters to retrieve specific fleets.</p> <important> <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p> </important>
     * @param {module:model/ListFleetsRequest} listFleetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFleetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFleetsResponse}
     */
    listFleets(listFleetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFleetsRequest;
      // verify the required parameter 'listFleetsRequest' is set
      if (listFleetsRequest === undefined || listFleetsRequest === null) {
        throw new Error("Missing the required parameter 'listFleetsRequest' when calling listFleets");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFleetsResponse;
      return this.apiClient.callApi(
        '/listFleets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRobotApplications operation.
     * @callback module:api/DefaultApi~listRobotApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRobotApplicationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of robot application. You can optionally provide filters to retrieve specific robot applications.
     * @param {module:model/ListRobotApplicationsRequest} listRobotApplicationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listRobotApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRobotApplicationsResponse}
     */
    listRobotApplications(listRobotApplicationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRobotApplicationsRequest;
      // verify the required parameter 'listRobotApplicationsRequest' is set
      if (listRobotApplicationsRequest === undefined || listRobotApplicationsRequest === null) {
        throw new Error("Missing the required parameter 'listRobotApplicationsRequest' when calling listRobotApplications");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRobotApplicationsResponse;
      return this.apiClient.callApi(
        '/listRobotApplications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRobots operation.
     * @callback module:api/DefaultApi~listRobotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRobotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of robots. You can optionally provide filters to retrieve specific robots.</p> <important> <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p> </important>
     * @param {module:model/ListRobotsRequest} listRobotsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listRobotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRobotsResponse}
     */
    listRobots(listRobotsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRobotsRequest;
      // verify the required parameter 'listRobotsRequest' is set
      if (listRobotsRequest === undefined || listRobotsRequest === null) {
        throw new Error("Missing the required parameter 'listRobotsRequest' when calling listRobots");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRobotsResponse;
      return this.apiClient.callApi(
        '/listRobots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSimulationApplications operation.
     * @callback module:api/DefaultApi~listSimulationApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSimulationApplicationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of simulation applications. You can optionally provide filters to retrieve specific simulation applications. 
     * @param {module:model/ListSimulationApplicationsRequest} listSimulationApplicationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSimulationApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSimulationApplicationsResponse}
     */
    listSimulationApplications(listSimulationApplicationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSimulationApplicationsRequest;
      // verify the required parameter 'listSimulationApplicationsRequest' is set
      if (listSimulationApplicationsRequest === undefined || listSimulationApplicationsRequest === null) {
        throw new Error("Missing the required parameter 'listSimulationApplicationsRequest' when calling listSimulationApplications");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSimulationApplicationsResponse;
      return this.apiClient.callApi(
        '/listSimulationApplications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSimulationJobBatches operation.
     * @callback module:api/DefaultApi~listSimulationJobBatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSimulationJobBatchesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list simulation job batches. You can optionally provide filters to retrieve specific simulation batch jobs. 
     * @param {module:model/ListSimulationJobBatchesRequest} listSimulationJobBatchesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSimulationJobBatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSimulationJobBatchesResponse}
     */
    listSimulationJobBatches(listSimulationJobBatchesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSimulationJobBatchesRequest;
      // verify the required parameter 'listSimulationJobBatchesRequest' is set
      if (listSimulationJobBatchesRequest === undefined || listSimulationJobBatchesRequest === null) {
        throw new Error("Missing the required parameter 'listSimulationJobBatchesRequest' when calling listSimulationJobBatches");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSimulationJobBatchesResponse;
      return this.apiClient.callApi(
        '/listSimulationJobBatches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSimulationJobs operation.
     * @callback module:api/DefaultApi~listSimulationJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSimulationJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of simulation jobs. You can optionally provide filters to retrieve specific simulation jobs. 
     * @param {module:model/ListSimulationJobsRequest} listSimulationJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSimulationJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSimulationJobsResponse}
     */
    listSimulationJobs(listSimulationJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSimulationJobsRequest;
      // verify the required parameter 'listSimulationJobsRequest' is set
      if (listSimulationJobsRequest === undefined || listSimulationJobsRequest === null) {
        throw new Error("Missing the required parameter 'listSimulationJobsRequest' when calling listSimulationJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSimulationJobsResponse;
      return this.apiClient.callApi(
        '/listSimulationJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all tags on a AWS RoboMaker resource.
     * @param {String} resourceArn The AWS RoboMaker Amazon Resource Name (ARN) with tags to be listed.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorldExportJobs operation.
     * @callback module:api/DefaultApi~listWorldExportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorldExportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists world export jobs.
     * @param {module:model/ListWorldExportJobsRequest} listWorldExportJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listWorldExportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorldExportJobsResponse}
     */
    listWorldExportJobs(listWorldExportJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWorldExportJobsRequest;
      // verify the required parameter 'listWorldExportJobsRequest' is set
      if (listWorldExportJobsRequest === undefined || listWorldExportJobsRequest === null) {
        throw new Error("Missing the required parameter 'listWorldExportJobsRequest' when calling listWorldExportJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWorldExportJobsResponse;
      return this.apiClient.callApi(
        '/listWorldExportJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorldGenerationJobs operation.
     * @callback module:api/DefaultApi~listWorldGenerationJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorldGenerationJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists world generator jobs.
     * @param {module:model/ListWorldGenerationJobsRequest} listWorldGenerationJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listWorldGenerationJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorldGenerationJobsResponse}
     */
    listWorldGenerationJobs(listWorldGenerationJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWorldGenerationJobsRequest;
      // verify the required parameter 'listWorldGenerationJobsRequest' is set
      if (listWorldGenerationJobsRequest === undefined || listWorldGenerationJobsRequest === null) {
        throw new Error("Missing the required parameter 'listWorldGenerationJobsRequest' when calling listWorldGenerationJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWorldGenerationJobsResponse;
      return this.apiClient.callApi(
        '/listWorldGenerationJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorldTemplates operation.
     * @callback module:api/DefaultApi~listWorldTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorldTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists world templates.
     * @param {module:model/ListWorldTemplatesRequest} listWorldTemplatesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listWorldTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorldTemplatesResponse}
     */
    listWorldTemplates(listWorldTemplatesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWorldTemplatesRequest;
      // verify the required parameter 'listWorldTemplatesRequest' is set
      if (listWorldTemplatesRequest === undefined || listWorldTemplatesRequest === null) {
        throw new Error("Missing the required parameter 'listWorldTemplatesRequest' when calling listWorldTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWorldTemplatesResponse;
      return this.apiClient.callApi(
        '/listWorldTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorlds operation.
     * @callback module:api/DefaultApi~listWorldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorldsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists worlds.
     * @param {module:model/ListWorldsRequest} listWorldsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listWorldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorldsResponse}
     */
    listWorlds(listWorldsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWorldsRequest;
      // verify the required parameter 'listWorldsRequest' is set
      if (listWorldsRequest === undefined || listWorldsRequest === null) {
        throw new Error("Missing the required parameter 'listWorldsRequest' when calling listWorlds");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWorldsResponse;
      return this.apiClient.callApi(
        '/listWorlds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerRobot operation.
     * @callback module:api/DefaultApi~registerRobotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterRobotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Registers a robot with a fleet.</p> <important> <p>This API is no longer supported and will throw an error if used.</p> </important>
     * @param {module:model/DeregisterRobotRequest} deregisterRobotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerRobotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterRobotResponse}
     */
    registerRobot(deregisterRobotRequest, opts, callback) {
      opts = opts || {};
      let postBody = deregisterRobotRequest;
      // verify the required parameter 'deregisterRobotRequest' is set
      if (deregisterRobotRequest === undefined || deregisterRobotRequest === null) {
        throw new Error("Missing the required parameter 'deregisterRobotRequest' when calling registerRobot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterRobotResponse;
      return this.apiClient.callApi(
        '/registerRobot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restartSimulationJob operation.
     * @callback module:api/DefaultApi~restartSimulationJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restarts a running simulation job.
     * @param {module:model/RestartSimulationJobRequest} restartSimulationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~restartSimulationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    restartSimulationJob(restartSimulationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = restartSimulationJobRequest;
      // verify the required parameter 'restartSimulationJobRequest' is set
      if (restartSimulationJobRequest === undefined || restartSimulationJobRequest === null) {
        throw new Error("Missing the required parameter 'restartSimulationJobRequest' when calling restartSimulationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/restartSimulationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSimulationJobBatch operation.
     * @callback module:api/DefaultApi~startSimulationJobBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartSimulationJobBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a new simulation job batch. The batch is defined using one or more <code>SimulationJobRequest</code> objects. 
     * @param {module:model/StartSimulationJobBatchRequest} startSimulationJobBatchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startSimulationJobBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartSimulationJobBatchResponse}
     */
    startSimulationJobBatch(startSimulationJobBatchRequest, opts, callback) {
      opts = opts || {};
      let postBody = startSimulationJobBatchRequest;
      // verify the required parameter 'startSimulationJobBatchRequest' is set
      if (startSimulationJobBatchRequest === undefined || startSimulationJobBatchRequest === null) {
        throw new Error("Missing the required parameter 'startSimulationJobBatchRequest' when calling startSimulationJobBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartSimulationJobBatchResponse;
      return this.apiClient.callApi(
        '/startSimulationJobBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncDeploymentJob operation.
     * @callback module:api/DefaultApi~syncDeploymentJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncDeploymentJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Syncrhonizes robots in a fleet to the latest deployment. This is helpful if robots were added after a deployment.</p> <important> <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p> </important>
     * @param {module:model/SyncDeploymentJobRequest} syncDeploymentJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~syncDeploymentJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncDeploymentJobResponse}
     */
    syncDeploymentJob(syncDeploymentJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = syncDeploymentJobRequest;
      // verify the required parameter 'syncDeploymentJobRequest' is set
      if (syncDeploymentJobRequest === undefined || syncDeploymentJobRequest === null) {
        throw new Error("Missing the required parameter 'syncDeploymentJobRequest' when calling syncDeploymentJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SyncDeploymentJobResponse;
      return this.apiClient.callApi(
        '/syncDeploymentJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds or edits tags for a AWS RoboMaker resource.</p> <p>Each tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty strings. </p> <p>For information about the rules that apply to tag keys and tag values, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html\">User-Defined Tag Restrictions</a> in the <i>AWS Billing and Cost Management User Guide</i>. </p>
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the AWS RoboMaker resource you are tagging.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the specified tags from the specified AWS RoboMaker resource.</p> <p>To remove a tag, specify the tag key. To change the tag value of an existing tag key, use <a href=\"https://docs.aws.amazon.com/robomaker/latest/dg/API_TagResource.html\"> <code>TagResource</code> </a>. </p>
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the AWS RoboMaker resource you are removing tags.
     * @param {Array.<String>} tagKeys A map that contains tag keys and tag values that will be unattached from the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRobotApplication operation.
     * @callback module:api/DefaultApi~updateRobotApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRobotApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a robot application.
     * @param {module:model/UpdateRobotApplicationRequest} updateRobotApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRobotApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRobotApplicationResponse}
     */
    updateRobotApplication(updateRobotApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRobotApplicationRequest;
      // verify the required parameter 'updateRobotApplicationRequest' is set
      if (updateRobotApplicationRequest === undefined || updateRobotApplicationRequest === null) {
        throw new Error("Missing the required parameter 'updateRobotApplicationRequest' when calling updateRobotApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRobotApplicationResponse;
      return this.apiClient.callApi(
        '/updateRobotApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSimulationApplication operation.
     * @callback module:api/DefaultApi~updateSimulationApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSimulationApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a simulation application.
     * @param {module:model/UpdateSimulationApplicationRequest} updateSimulationApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSimulationApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSimulationApplicationResponse}
     */
    updateSimulationApplication(updateSimulationApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSimulationApplicationRequest;
      // verify the required parameter 'updateSimulationApplicationRequest' is set
      if (updateSimulationApplicationRequest === undefined || updateSimulationApplicationRequest === null) {
        throw new Error("Missing the required parameter 'updateSimulationApplicationRequest' when calling updateSimulationApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSimulationApplicationResponse;
      return this.apiClient.callApi(
        '/updateSimulationApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorldTemplate operation.
     * @callback module:api/DefaultApi~updateWorldTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateWorldTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a world template.
     * @param {module:model/UpdateWorldTemplateRequest} updateWorldTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWorldTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateWorldTemplateResponse}
     */
    updateWorldTemplate(updateWorldTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWorldTemplateRequest;
      // verify the required parameter 'updateWorldTemplateRequest' is set
      if (updateWorldTemplateRequest === undefined || updateWorldTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateWorldTemplateRequest' when calling updateWorldTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateWorldTemplateResponse;
      return this.apiClient.callApi(
        '/updateWorldTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
