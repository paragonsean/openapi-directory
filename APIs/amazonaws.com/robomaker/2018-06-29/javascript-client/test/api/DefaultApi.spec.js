/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsRoboMaker);
  }
}(this, function(expect, AwsRoboMaker) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsRoboMaker.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('batchDeleteWorlds', function() {
      it('should call batchDeleteWorlds successfully', function(done) {
        //uncomment below and update the code to test batchDeleteWorlds
        //instance.batchDeleteWorlds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchDescribeSimulationJob', function() {
      it('should call batchDescribeSimulationJob successfully', function(done) {
        //uncomment below and update the code to test batchDescribeSimulationJob
        //instance.batchDescribeSimulationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelDeploymentJob', function() {
      it('should call cancelDeploymentJob successfully', function(done) {
        //uncomment below and update the code to test cancelDeploymentJob
        //instance.cancelDeploymentJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelSimulationJob', function() {
      it('should call cancelSimulationJob successfully', function(done) {
        //uncomment below and update the code to test cancelSimulationJob
        //instance.cancelSimulationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelSimulationJobBatch', function() {
      it('should call cancelSimulationJobBatch successfully', function(done) {
        //uncomment below and update the code to test cancelSimulationJobBatch
        //instance.cancelSimulationJobBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelWorldExportJob', function() {
      it('should call cancelWorldExportJob successfully', function(done) {
        //uncomment below and update the code to test cancelWorldExportJob
        //instance.cancelWorldExportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelWorldGenerationJob', function() {
      it('should call cancelWorldGenerationJob successfully', function(done) {
        //uncomment below and update the code to test cancelWorldGenerationJob
        //instance.cancelWorldGenerationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDeploymentJob', function() {
      it('should call createDeploymentJob successfully', function(done) {
        //uncomment below and update the code to test createDeploymentJob
        //instance.createDeploymentJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFleet', function() {
      it('should call createFleet successfully', function(done) {
        //uncomment below and update the code to test createFleet
        //instance.createFleet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRobot', function() {
      it('should call createRobot successfully', function(done) {
        //uncomment below and update the code to test createRobot
        //instance.createRobot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRobotApplication', function() {
      it('should call createRobotApplication successfully', function(done) {
        //uncomment below and update the code to test createRobotApplication
        //instance.createRobotApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRobotApplicationVersion', function() {
      it('should call createRobotApplicationVersion successfully', function(done) {
        //uncomment below and update the code to test createRobotApplicationVersion
        //instance.createRobotApplicationVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSimulationApplication', function() {
      it('should call createSimulationApplication successfully', function(done) {
        //uncomment below and update the code to test createSimulationApplication
        //instance.createSimulationApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSimulationApplicationVersion', function() {
      it('should call createSimulationApplicationVersion successfully', function(done) {
        //uncomment below and update the code to test createSimulationApplicationVersion
        //instance.createSimulationApplicationVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSimulationJob', function() {
      it('should call createSimulationJob successfully', function(done) {
        //uncomment below and update the code to test createSimulationJob
        //instance.createSimulationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWorldExportJob', function() {
      it('should call createWorldExportJob successfully', function(done) {
        //uncomment below and update the code to test createWorldExportJob
        //instance.createWorldExportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWorldGenerationJob', function() {
      it('should call createWorldGenerationJob successfully', function(done) {
        //uncomment below and update the code to test createWorldGenerationJob
        //instance.createWorldGenerationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWorldTemplate', function() {
      it('should call createWorldTemplate successfully', function(done) {
        //uncomment below and update the code to test createWorldTemplate
        //instance.createWorldTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFleet', function() {
      it('should call deleteFleet successfully', function(done) {
        //uncomment below and update the code to test deleteFleet
        //instance.deleteFleet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRobot', function() {
      it('should call deleteRobot successfully', function(done) {
        //uncomment below and update the code to test deleteRobot
        //instance.deleteRobot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRobotApplication', function() {
      it('should call deleteRobotApplication successfully', function(done) {
        //uncomment below and update the code to test deleteRobotApplication
        //instance.deleteRobotApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSimulationApplication', function() {
      it('should call deleteSimulationApplication successfully', function(done) {
        //uncomment below and update the code to test deleteSimulationApplication
        //instance.deleteSimulationApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorldTemplate', function() {
      it('should call deleteWorldTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteWorldTemplate
        //instance.deleteWorldTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterRobot', function() {
      it('should call deregisterRobot successfully', function(done) {
        //uncomment below and update the code to test deregisterRobot
        //instance.deregisterRobot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDeploymentJob', function() {
      it('should call describeDeploymentJob successfully', function(done) {
        //uncomment below and update the code to test describeDeploymentJob
        //instance.describeDeploymentJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFleet', function() {
      it('should call describeFleet successfully', function(done) {
        //uncomment below and update the code to test describeFleet
        //instance.describeFleet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRobot', function() {
      it('should call describeRobot successfully', function(done) {
        //uncomment below and update the code to test describeRobot
        //instance.describeRobot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRobotApplication', function() {
      it('should call describeRobotApplication successfully', function(done) {
        //uncomment below and update the code to test describeRobotApplication
        //instance.describeRobotApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSimulationApplication', function() {
      it('should call describeSimulationApplication successfully', function(done) {
        //uncomment below and update the code to test describeSimulationApplication
        //instance.describeSimulationApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSimulationJob', function() {
      it('should call describeSimulationJob successfully', function(done) {
        //uncomment below and update the code to test describeSimulationJob
        //instance.describeSimulationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSimulationJobBatch', function() {
      it('should call describeSimulationJobBatch successfully', function(done) {
        //uncomment below and update the code to test describeSimulationJobBatch
        //instance.describeSimulationJobBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorld', function() {
      it('should call describeWorld successfully', function(done) {
        //uncomment below and update the code to test describeWorld
        //instance.describeWorld(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorldExportJob', function() {
      it('should call describeWorldExportJob successfully', function(done) {
        //uncomment below and update the code to test describeWorldExportJob
        //instance.describeWorldExportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorldGenerationJob', function() {
      it('should call describeWorldGenerationJob successfully', function(done) {
        //uncomment below and update the code to test describeWorldGenerationJob
        //instance.describeWorldGenerationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorldTemplate', function() {
      it('should call describeWorldTemplate successfully', function(done) {
        //uncomment below and update the code to test describeWorldTemplate
        //instance.describeWorldTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorldTemplateBody', function() {
      it('should call getWorldTemplateBody successfully', function(done) {
        //uncomment below and update the code to test getWorldTemplateBody
        //instance.getWorldTemplateBody(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDeploymentJobs', function() {
      it('should call listDeploymentJobs successfully', function(done) {
        //uncomment below and update the code to test listDeploymentJobs
        //instance.listDeploymentJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFleets', function() {
      it('should call listFleets successfully', function(done) {
        //uncomment below and update the code to test listFleets
        //instance.listFleets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRobotApplications', function() {
      it('should call listRobotApplications successfully', function(done) {
        //uncomment below and update the code to test listRobotApplications
        //instance.listRobotApplications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRobots', function() {
      it('should call listRobots successfully', function(done) {
        //uncomment below and update the code to test listRobots
        //instance.listRobots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSimulationApplications', function() {
      it('should call listSimulationApplications successfully', function(done) {
        //uncomment below and update the code to test listSimulationApplications
        //instance.listSimulationApplications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSimulationJobBatches', function() {
      it('should call listSimulationJobBatches successfully', function(done) {
        //uncomment below and update the code to test listSimulationJobBatches
        //instance.listSimulationJobBatches(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSimulationJobs', function() {
      it('should call listSimulationJobs successfully', function(done) {
        //uncomment below and update the code to test listSimulationJobs
        //instance.listSimulationJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWorldExportJobs', function() {
      it('should call listWorldExportJobs successfully', function(done) {
        //uncomment below and update the code to test listWorldExportJobs
        //instance.listWorldExportJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWorldGenerationJobs', function() {
      it('should call listWorldGenerationJobs successfully', function(done) {
        //uncomment below and update the code to test listWorldGenerationJobs
        //instance.listWorldGenerationJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWorldTemplates', function() {
      it('should call listWorldTemplates successfully', function(done) {
        //uncomment below and update the code to test listWorldTemplates
        //instance.listWorldTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWorlds', function() {
      it('should call listWorlds successfully', function(done) {
        //uncomment below and update the code to test listWorlds
        //instance.listWorlds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerRobot', function() {
      it('should call registerRobot successfully', function(done) {
        //uncomment below and update the code to test registerRobot
        //instance.registerRobot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restartSimulationJob', function() {
      it('should call restartSimulationJob successfully', function(done) {
        //uncomment below and update the code to test restartSimulationJob
        //instance.restartSimulationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startSimulationJobBatch', function() {
      it('should call startSimulationJobBatch successfully', function(done) {
        //uncomment below and update the code to test startSimulationJobBatch
        //instance.startSimulationJobBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncDeploymentJob', function() {
      it('should call syncDeploymentJob successfully', function(done) {
        //uncomment below and update the code to test syncDeploymentJob
        //instance.syncDeploymentJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRobotApplication', function() {
      it('should call updateRobotApplication successfully', function(done) {
        //uncomment below and update the code to test updateRobotApplication
        //instance.updateRobotApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSimulationApplication', function() {
      it('should call updateSimulationApplication successfully', function(done) {
        //uncomment below and update the code to test updateSimulationApplication
        //instance.updateSimulationApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorldTemplate', function() {
      it('should call updateWorldTemplate successfully', function(done) {
        //uncomment below and update the code to test updateWorldTemplate
        //instance.updateWorldTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
