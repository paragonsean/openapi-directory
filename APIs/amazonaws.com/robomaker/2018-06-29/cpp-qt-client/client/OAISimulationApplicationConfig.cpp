/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimulationApplicationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimulationApplicationConfig::OAISimulationApplicationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimulationApplicationConfig::OAISimulationApplicationConfig() {
    this->initializeModel();
}

OAISimulationApplicationConfig::~OAISimulationApplicationConfig() {}

void OAISimulationApplicationConfig::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_application_version_isSet = false;
    m_application_version_isValid = false;

    m_launch_config_isSet = false;
    m_launch_config_isValid = false;

    m_upload_configurations_isSet = false;
    m_upload_configurations_isValid = false;

    m_world_configs_isSet = false;
    m_world_configs_isValid = false;

    m_use_default_upload_configurations_isSet = false;
    m_use_default_upload_configurations_isValid = false;

    m_tools_isSet = false;
    m_tools_isValid = false;

    m_use_default_tools_isSet = false;
    m_use_default_tools_isValid = false;
}

void OAISimulationApplicationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimulationApplicationConfig::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_application_version_isValid = ::OpenAPI::fromJsonValue(m_application_version, json[QString("applicationVersion")]);
    m_application_version_isSet = !json[QString("applicationVersion")].isNull() && m_application_version_isValid;

    m_launch_config_isValid = ::OpenAPI::fromJsonValue(m_launch_config, json[QString("launchConfig")]);
    m_launch_config_isSet = !json[QString("launchConfig")].isNull() && m_launch_config_isValid;

    m_upload_configurations_isValid = ::OpenAPI::fromJsonValue(m_upload_configurations, json[QString("uploadConfigurations")]);
    m_upload_configurations_isSet = !json[QString("uploadConfigurations")].isNull() && m_upload_configurations_isValid;

    m_world_configs_isValid = ::OpenAPI::fromJsonValue(m_world_configs, json[QString("worldConfigs")]);
    m_world_configs_isSet = !json[QString("worldConfigs")].isNull() && m_world_configs_isValid;

    m_use_default_upload_configurations_isValid = ::OpenAPI::fromJsonValue(m_use_default_upload_configurations, json[QString("useDefaultUploadConfigurations")]);
    m_use_default_upload_configurations_isSet = !json[QString("useDefaultUploadConfigurations")].isNull() && m_use_default_upload_configurations_isValid;

    m_tools_isValid = ::OpenAPI::fromJsonValue(m_tools, json[QString("tools")]);
    m_tools_isSet = !json[QString("tools")].isNull() && m_tools_isValid;

    m_use_default_tools_isValid = ::OpenAPI::fromJsonValue(m_use_default_tools, json[QString("useDefaultTools")]);
    m_use_default_tools_isSet = !json[QString("useDefaultTools")].isNull() && m_use_default_tools_isValid;
}

QString OAISimulationApplicationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimulationApplicationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_application_isSet) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_application_version_isSet) {
        obj.insert(QString("applicationVersion"), ::OpenAPI::toJsonValue(m_application_version));
    }
    if (m_launch_config.isSet()) {
        obj.insert(QString("launchConfig"), ::OpenAPI::toJsonValue(m_launch_config));
    }
    if (m_upload_configurations.isSet()) {
        obj.insert(QString("uploadConfigurations"), ::OpenAPI::toJsonValue(m_upload_configurations));
    }
    if (m_world_configs.isSet()) {
        obj.insert(QString("worldConfigs"), ::OpenAPI::toJsonValue(m_world_configs));
    }
    if (m_use_default_upload_configurations_isSet) {
        obj.insert(QString("useDefaultUploadConfigurations"), ::OpenAPI::toJsonValue(m_use_default_upload_configurations));
    }
    if (m_tools.isSet()) {
        obj.insert(QString("tools"), ::OpenAPI::toJsonValue(m_tools));
    }
    if (m_use_default_tools_isSet) {
        obj.insert(QString("useDefaultTools"), ::OpenAPI::toJsonValue(m_use_default_tools));
    }
    return obj;
}

QString OAISimulationApplicationConfig::getApplication() const {
    return m_application;
}
void OAISimulationApplicationConfig::setApplication(const QString &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAISimulationApplicationConfig::is_application_Set() const{
    return m_application_isSet;
}

bool OAISimulationApplicationConfig::is_application_Valid() const{
    return m_application_isValid;
}

QString OAISimulationApplicationConfig::getApplicationVersion() const {
    return m_application_version;
}
void OAISimulationApplicationConfig::setApplicationVersion(const QString &application_version) {
    m_application_version = application_version;
    m_application_version_isSet = true;
}

bool OAISimulationApplicationConfig::is_application_version_Set() const{
    return m_application_version_isSet;
}

bool OAISimulationApplicationConfig::is_application_version_Valid() const{
    return m_application_version_isValid;
}

OAISimulationApplicationConfig_launchConfig OAISimulationApplicationConfig::getLaunchConfig() const {
    return m_launch_config;
}
void OAISimulationApplicationConfig::setLaunchConfig(const OAISimulationApplicationConfig_launchConfig &launch_config) {
    m_launch_config = launch_config;
    m_launch_config_isSet = true;
}

bool OAISimulationApplicationConfig::is_launch_config_Set() const{
    return m_launch_config_isSet;
}

bool OAISimulationApplicationConfig::is_launch_config_Valid() const{
    return m_launch_config_isValid;
}

QList OAISimulationApplicationConfig::getUploadConfigurations() const {
    return m_upload_configurations;
}
void OAISimulationApplicationConfig::setUploadConfigurations(const QList &upload_configurations) {
    m_upload_configurations = upload_configurations;
    m_upload_configurations_isSet = true;
}

bool OAISimulationApplicationConfig::is_upload_configurations_Set() const{
    return m_upload_configurations_isSet;
}

bool OAISimulationApplicationConfig::is_upload_configurations_Valid() const{
    return m_upload_configurations_isValid;
}

QList OAISimulationApplicationConfig::getWorldConfigs() const {
    return m_world_configs;
}
void OAISimulationApplicationConfig::setWorldConfigs(const QList &world_configs) {
    m_world_configs = world_configs;
    m_world_configs_isSet = true;
}

bool OAISimulationApplicationConfig::is_world_configs_Set() const{
    return m_world_configs_isSet;
}

bool OAISimulationApplicationConfig::is_world_configs_Valid() const{
    return m_world_configs_isValid;
}

bool OAISimulationApplicationConfig::getUseDefaultUploadConfigurations() const {
    return m_use_default_upload_configurations;
}
void OAISimulationApplicationConfig::setUseDefaultUploadConfigurations(const bool &use_default_upload_configurations) {
    m_use_default_upload_configurations = use_default_upload_configurations;
    m_use_default_upload_configurations_isSet = true;
}

bool OAISimulationApplicationConfig::is_use_default_upload_configurations_Set() const{
    return m_use_default_upload_configurations_isSet;
}

bool OAISimulationApplicationConfig::is_use_default_upload_configurations_Valid() const{
    return m_use_default_upload_configurations_isValid;
}

QList OAISimulationApplicationConfig::getTools() const {
    return m_tools;
}
void OAISimulationApplicationConfig::setTools(const QList &tools) {
    m_tools = tools;
    m_tools_isSet = true;
}

bool OAISimulationApplicationConfig::is_tools_Set() const{
    return m_tools_isSet;
}

bool OAISimulationApplicationConfig::is_tools_Valid() const{
    return m_tools_isValid;
}

bool OAISimulationApplicationConfig::getUseDefaultTools() const {
    return m_use_default_tools;
}
void OAISimulationApplicationConfig::setUseDefaultTools(const bool &use_default_tools) {
    m_use_default_tools = use_default_tools;
    m_use_default_tools_isSet = true;
}

bool OAISimulationApplicationConfig::is_use_default_tools_Set() const{
    return m_use_default_tools_isSet;
}

bool OAISimulationApplicationConfig::is_use_default_tools_Valid() const{
    return m_use_default_tools_isValid;
}

bool OAISimulationApplicationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_world_configs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_default_upload_configurations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tools.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_default_tools_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimulationApplicationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_isValid && m_launch_config_isValid && true;
}

} // namespace OpenAPI
