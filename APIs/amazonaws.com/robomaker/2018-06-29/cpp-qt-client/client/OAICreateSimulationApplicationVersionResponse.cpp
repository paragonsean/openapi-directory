/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSimulationApplicationVersionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSimulationApplicationVersionResponse::OAICreateSimulationApplicationVersionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSimulationApplicationVersionResponse::OAICreateSimulationApplicationVersionResponse() {
    this->initializeModel();
}

OAICreateSimulationApplicationVersionResponse::~OAICreateSimulationApplicationVersionResponse() {}

void OAICreateSimulationApplicationVersionResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_simulation_software_suite_isSet = false;
    m_simulation_software_suite_isValid = false;

    m_robot_software_suite_isSet = false;
    m_robot_software_suite_isValid = false;

    m_rendering_engine_isSet = false;
    m_rendering_engine_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;
}

void OAICreateSimulationApplicationVersionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSimulationApplicationVersionResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_simulation_software_suite_isValid = ::OpenAPI::fromJsonValue(m_simulation_software_suite, json[QString("simulationSoftwareSuite")]);
    m_simulation_software_suite_isSet = !json[QString("simulationSoftwareSuite")].isNull() && m_simulation_software_suite_isValid;

    m_robot_software_suite_isValid = ::OpenAPI::fromJsonValue(m_robot_software_suite, json[QString("robotSoftwareSuite")]);
    m_robot_software_suite_isSet = !json[QString("robotSoftwareSuite")].isNull() && m_robot_software_suite_isValid;

    m_rendering_engine_isValid = ::OpenAPI::fromJsonValue(m_rendering_engine, json[QString("renderingEngine")]);
    m_rendering_engine_isSet = !json[QString("renderingEngine")].isNull() && m_rendering_engine_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;
}

QString OAICreateSimulationApplicationVersionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSimulationApplicationVersionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_sources.isSet()) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_simulation_software_suite.isSet()) {
        obj.insert(QString("simulationSoftwareSuite"), ::OpenAPI::toJsonValue(m_simulation_software_suite));
    }
    if (m_robot_software_suite.isSet()) {
        obj.insert(QString("robotSoftwareSuite"), ::OpenAPI::toJsonValue(m_robot_software_suite));
    }
    if (m_rendering_engine.isSet()) {
        obj.insert(QString("renderingEngine"), ::OpenAPI::toJsonValue(m_rendering_engine));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    return obj;
}

QString OAICreateSimulationApplicationVersionResponse::getArn() const {
    return m_arn;
}
void OAICreateSimulationApplicationVersionResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateSimulationApplicationVersionResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateSimulationApplicationVersionResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateSimulationApplicationVersionResponse::getName() const {
    return m_name;
}
void OAICreateSimulationApplicationVersionResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateSimulationApplicationVersionResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateSimulationApplicationVersionResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateSimulationApplicationVersionResponse::getVersion() const {
    return m_version;
}
void OAICreateSimulationApplicationVersionResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreateSimulationApplicationVersionResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreateSimulationApplicationVersionResponse::is_version_Valid() const{
    return m_version_isValid;
}

QList OAICreateSimulationApplicationVersionResponse::getSources() const {
    return m_sources;
}
void OAICreateSimulationApplicationVersionResponse::setSources(const QList &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAICreateSimulationApplicationVersionResponse::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAICreateSimulationApplicationVersionResponse::is_sources_Valid() const{
    return m_sources_isValid;
}

OAICreateSimulationApplicationResponse_simulationSoftwareSuite OAICreateSimulationApplicationVersionResponse::getSimulationSoftwareSuite() const {
    return m_simulation_software_suite;
}
void OAICreateSimulationApplicationVersionResponse::setSimulationSoftwareSuite(const OAICreateSimulationApplicationResponse_simulationSoftwareSuite &simulation_software_suite) {
    m_simulation_software_suite = simulation_software_suite;
    m_simulation_software_suite_isSet = true;
}

bool OAICreateSimulationApplicationVersionResponse::is_simulation_software_suite_Set() const{
    return m_simulation_software_suite_isSet;
}

bool OAICreateSimulationApplicationVersionResponse::is_simulation_software_suite_Valid() const{
    return m_simulation_software_suite_isValid;
}

OAICreateSimulationApplicationResponse_robotSoftwareSuite OAICreateSimulationApplicationVersionResponse::getRobotSoftwareSuite() const {
    return m_robot_software_suite;
}
void OAICreateSimulationApplicationVersionResponse::setRobotSoftwareSuite(const OAICreateSimulationApplicationResponse_robotSoftwareSuite &robot_software_suite) {
    m_robot_software_suite = robot_software_suite;
    m_robot_software_suite_isSet = true;
}

bool OAICreateSimulationApplicationVersionResponse::is_robot_software_suite_Set() const{
    return m_robot_software_suite_isSet;
}

bool OAICreateSimulationApplicationVersionResponse::is_robot_software_suite_Valid() const{
    return m_robot_software_suite_isValid;
}

OAICreateSimulationApplicationResponse_renderingEngine OAICreateSimulationApplicationVersionResponse::getRenderingEngine() const {
    return m_rendering_engine;
}
void OAICreateSimulationApplicationVersionResponse::setRenderingEngine(const OAICreateSimulationApplicationResponse_renderingEngine &rendering_engine) {
    m_rendering_engine = rendering_engine;
    m_rendering_engine_isSet = true;
}

bool OAICreateSimulationApplicationVersionResponse::is_rendering_engine_Set() const{
    return m_rendering_engine_isSet;
}

bool OAICreateSimulationApplicationVersionResponse::is_rendering_engine_Valid() const{
    return m_rendering_engine_isValid;
}

QDateTime OAICreateSimulationApplicationVersionResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAICreateSimulationApplicationVersionResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAICreateSimulationApplicationVersionResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAICreateSimulationApplicationVersionResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAICreateSimulationApplicationVersionResponse::getRevisionId() const {
    return m_revision_id;
}
void OAICreateSimulationApplicationVersionResponse::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAICreateSimulationApplicationVersionResponse::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAICreateSimulationApplicationVersionResponse::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

OAICreateSimulationApplicationVersionResponse_environment OAICreateSimulationApplicationVersionResponse::getEnvironment() const {
    return m_environment;
}
void OAICreateSimulationApplicationVersionResponse::setEnvironment(const OAICreateSimulationApplicationVersionResponse_environment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAICreateSimulationApplicationVersionResponse::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAICreateSimulationApplicationVersionResponse::is_environment_Valid() const{
    return m_environment_isValid;
}

bool OAICreateSimulationApplicationVersionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulation_software_suite.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot_software_suite.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendering_engine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSimulationApplicationVersionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
