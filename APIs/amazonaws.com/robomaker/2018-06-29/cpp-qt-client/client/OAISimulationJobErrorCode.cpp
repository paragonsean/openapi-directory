/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimulationJobErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimulationJobErrorCode::OAISimulationJobErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimulationJobErrorCode::OAISimulationJobErrorCode() {
    this->initializeModel();
}

OAISimulationJobErrorCode::~OAISimulationJobErrorCode() {}

void OAISimulationJobErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISimulationJobErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISimulationJobErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("InternalServiceError", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::INTERNALSERVICEERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RobotApplicationCrash", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::ROBOTAPPLICATIONCRASH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SimulationApplicationCrash", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::SIMULATIONAPPLICATIONCRASH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RobotApplicationHealthCheckFailure", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::ROBOTAPPLICATIONHEALTHCHECKFAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SimulationApplicationHealthCheckFailure", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::SIMULATIONAPPLICATIONHEALTHCHECKFAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BadPermissionsRobotApplication", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::BADPERMISSIONSROBOTAPPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BadPermissionsSimulationApplication", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::BADPERMISSIONSSIMULATIONAPPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BadPermissionsS3Object", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::BADPERMISSIONSS3OBJECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BadPermissionsS3Output", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::BADPERMISSIONSS3OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BadPermissionsCloudwatchLogs", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::BADPERMISSIONSCLOUDWATCHLOGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SubnetIpLimitExceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::SUBNETIPLIMITEXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENILimitExceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::ENILIMITEXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BadPermissionsUserCredentials", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::BADPERMISSIONSUSERCREDENTIALS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidBundleRobotApplication", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::INVALIDBUNDLEROBOTAPPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidBundleSimulationApplication", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::INVALIDBUNDLESIMULATIONAPPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidS3Resource", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::INVALIDS3RESOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ThrottlingError", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::THROTTLINGERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LimitExceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::LIMITEXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MismatchedEtag", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::MISMATCHEDETAG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RobotApplicationVersionMismatchedEtag", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::ROBOTAPPLICATIONVERSIONMISMATCHEDETAG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SimulationApplicationVersionMismatchedEtag", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::SIMULATIONAPPLICATIONVERSIONMISMATCHEDETAG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ResourceNotFound", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::RESOURCENOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RequestThrottled", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::REQUESTTHROTTLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BatchTimedOut", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::BATCHTIMEDOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BatchCanceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::BATCHCANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidInput", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::INVALIDINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WrongRegionS3Bucket", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::WRONGREGIONS3BUCKET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WrongRegionS3Output", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::WRONGREGIONS3OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WrongRegionRobotApplication", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::WRONGREGIONROBOTAPPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WrongRegionSimulationApplication", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::WRONGREGIONSIMULATIONAPPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UploadContentMismatchError", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobErrorCode::UPLOADCONTENTMISMATCHERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISimulationJobErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISimulationJobErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISimulationJobErrorCode::INTERNALSERVICEERROR:
            val = "InternalServiceError";
            break;
        case eOAISimulationJobErrorCode::ROBOTAPPLICATIONCRASH:
            val = "RobotApplicationCrash";
            break;
        case eOAISimulationJobErrorCode::SIMULATIONAPPLICATIONCRASH:
            val = "SimulationApplicationCrash";
            break;
        case eOAISimulationJobErrorCode::ROBOTAPPLICATIONHEALTHCHECKFAILURE:
            val = "RobotApplicationHealthCheckFailure";
            break;
        case eOAISimulationJobErrorCode::SIMULATIONAPPLICATIONHEALTHCHECKFAILURE:
            val = "SimulationApplicationHealthCheckFailure";
            break;
        case eOAISimulationJobErrorCode::BADPERMISSIONSROBOTAPPLICATION:
            val = "BadPermissionsRobotApplication";
            break;
        case eOAISimulationJobErrorCode::BADPERMISSIONSSIMULATIONAPPLICATION:
            val = "BadPermissionsSimulationApplication";
            break;
        case eOAISimulationJobErrorCode::BADPERMISSIONSS3OBJECT:
            val = "BadPermissionsS3Object";
            break;
        case eOAISimulationJobErrorCode::BADPERMISSIONSS3OUTPUT:
            val = "BadPermissionsS3Output";
            break;
        case eOAISimulationJobErrorCode::BADPERMISSIONSCLOUDWATCHLOGS:
            val = "BadPermissionsCloudwatchLogs";
            break;
        case eOAISimulationJobErrorCode::SUBNETIPLIMITEXCEEDED:
            val = "SubnetIpLimitExceeded";
            break;
        case eOAISimulationJobErrorCode::ENILIMITEXCEEDED:
            val = "ENILimitExceeded";
            break;
        case eOAISimulationJobErrorCode::BADPERMISSIONSUSERCREDENTIALS:
            val = "BadPermissionsUserCredentials";
            break;
        case eOAISimulationJobErrorCode::INVALIDBUNDLEROBOTAPPLICATION:
            val = "InvalidBundleRobotApplication";
            break;
        case eOAISimulationJobErrorCode::INVALIDBUNDLESIMULATIONAPPLICATION:
            val = "InvalidBundleSimulationApplication";
            break;
        case eOAISimulationJobErrorCode::INVALIDS3RESOURCE:
            val = "InvalidS3Resource";
            break;
        case eOAISimulationJobErrorCode::THROTTLINGERROR:
            val = "ThrottlingError";
            break;
        case eOAISimulationJobErrorCode::LIMITEXCEEDED:
            val = "LimitExceeded";
            break;
        case eOAISimulationJobErrorCode::MISMATCHEDETAG:
            val = "MismatchedEtag";
            break;
        case eOAISimulationJobErrorCode::ROBOTAPPLICATIONVERSIONMISMATCHEDETAG:
            val = "RobotApplicationVersionMismatchedEtag";
            break;
        case eOAISimulationJobErrorCode::SIMULATIONAPPLICATIONVERSIONMISMATCHEDETAG:
            val = "SimulationApplicationVersionMismatchedEtag";
            break;
        case eOAISimulationJobErrorCode::RESOURCENOTFOUND:
            val = "ResourceNotFound";
            break;
        case eOAISimulationJobErrorCode::REQUESTTHROTTLED:
            val = "RequestThrottled";
            break;
        case eOAISimulationJobErrorCode::BATCHTIMEDOUT:
            val = "BatchTimedOut";
            break;
        case eOAISimulationJobErrorCode::BATCHCANCELED:
            val = "BatchCanceled";
            break;
        case eOAISimulationJobErrorCode::INVALIDINPUT:
            val = "InvalidInput";
            break;
        case eOAISimulationJobErrorCode::WRONGREGIONS3BUCKET:
            val = "WrongRegionS3Bucket";
            break;
        case eOAISimulationJobErrorCode::WRONGREGIONS3OUTPUT:
            val = "WrongRegionS3Output";
            break;
        case eOAISimulationJobErrorCode::WRONGREGIONROBOTAPPLICATION:
            val = "WrongRegionRobotApplication";
            break;
        case eOAISimulationJobErrorCode::WRONGREGIONSIMULATIONAPPLICATION:
            val = "WrongRegionSimulationApplication";
            break;
        case eOAISimulationJobErrorCode::UPLOADCONTENTMISMATCHERROR:
            val = "UploadContentMismatchError";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISimulationJobErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISimulationJobErrorCode::eOAISimulationJobErrorCode OAISimulationJobErrorCode::getValue() const {
    return m_value;
}

void OAISimulationJobErrorCode::setValue(const OAISimulationJobErrorCode::eOAISimulationJobErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISimulationJobErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAISimulationJobErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
