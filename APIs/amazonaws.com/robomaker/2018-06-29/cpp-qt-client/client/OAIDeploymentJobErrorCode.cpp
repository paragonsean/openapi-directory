/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentJobErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentJobErrorCode::OAIDeploymentJobErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentJobErrorCode::OAIDeploymentJobErrorCode() {
    this->initializeModel();
}

OAIDeploymentJobErrorCode::~OAIDeploymentJobErrorCode() {}

void OAIDeploymentJobErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDeploymentJobErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDeploymentJobErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ResourceNotFound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::RESOURCENOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EnvironmentSetupError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::ENVIRONMENTSETUPERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EtagMismatch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::ETAGMISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FailureThresholdBreached", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::FAILURETHRESHOLDBREACHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RobotDeploymentAborted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::ROBOTDEPLOYMENTABORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RobotDeploymentNoResponse", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::ROBOTDEPLOYMENTNORESPONSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RobotAgentConnectionTimeout", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::ROBOTAGENTCONNECTIONTIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GreengrassDeploymentFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::GREENGRASSDEPLOYMENTFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidGreengrassGroup", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::INVALIDGREENGRASSGROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MissingRobotArchitecture", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::MISSINGROBOTARCHITECTURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MissingRobotApplicationArchitecture", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::MISSINGROBOTAPPLICATIONARCHITECTURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MissingRobotDeploymentResource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::MISSINGROBOTDEPLOYMENTRESOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GreengrassGroupVersionDoesNotExist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::GREENGRASSGROUPVERSIONDOESNOTEXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LambdaDeleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::LAMBDADELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExtractingBundleFailure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::EXTRACTINGBUNDLEFAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PreLaunchFileFailure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::PRELAUNCHFILEFAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PostLaunchFileFailure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::POSTLAUNCHFILEFAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BadPermissionError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::BADPERMISSIONERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DownloadConditionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::DOWNLOADCONDITIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BadLambdaAssociated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::BADLAMBDAASSOCIATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InternalServerError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::INTERNALSERVERERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RobotApplicationDoesNotExist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::ROBOTAPPLICATIONDOESNOTEXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeploymentFleetDoesNotExist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::DEPLOYMENTFLEETDOESNOTEXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FleetDeploymentTimeout", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentJobErrorCode::FLEETDEPLOYMENTTIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDeploymentJobErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDeploymentJobErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDeploymentJobErrorCode::RESOURCENOTFOUND:
            val = "ResourceNotFound";
            break;
        case eOAIDeploymentJobErrorCode::ENVIRONMENTSETUPERROR:
            val = "EnvironmentSetupError";
            break;
        case eOAIDeploymentJobErrorCode::ETAGMISMATCH:
            val = "EtagMismatch";
            break;
        case eOAIDeploymentJobErrorCode::FAILURETHRESHOLDBREACHED:
            val = "FailureThresholdBreached";
            break;
        case eOAIDeploymentJobErrorCode::ROBOTDEPLOYMENTABORTED:
            val = "RobotDeploymentAborted";
            break;
        case eOAIDeploymentJobErrorCode::ROBOTDEPLOYMENTNORESPONSE:
            val = "RobotDeploymentNoResponse";
            break;
        case eOAIDeploymentJobErrorCode::ROBOTAGENTCONNECTIONTIMEOUT:
            val = "RobotAgentConnectionTimeout";
            break;
        case eOAIDeploymentJobErrorCode::GREENGRASSDEPLOYMENTFAILED:
            val = "GreengrassDeploymentFailed";
            break;
        case eOAIDeploymentJobErrorCode::INVALIDGREENGRASSGROUP:
            val = "InvalidGreengrassGroup";
            break;
        case eOAIDeploymentJobErrorCode::MISSINGROBOTARCHITECTURE:
            val = "MissingRobotArchitecture";
            break;
        case eOAIDeploymentJobErrorCode::MISSINGROBOTAPPLICATIONARCHITECTURE:
            val = "MissingRobotApplicationArchitecture";
            break;
        case eOAIDeploymentJobErrorCode::MISSINGROBOTDEPLOYMENTRESOURCE:
            val = "MissingRobotDeploymentResource";
            break;
        case eOAIDeploymentJobErrorCode::GREENGRASSGROUPVERSIONDOESNOTEXIST:
            val = "GreengrassGroupVersionDoesNotExist";
            break;
        case eOAIDeploymentJobErrorCode::LAMBDADELETED:
            val = "LambdaDeleted";
            break;
        case eOAIDeploymentJobErrorCode::EXTRACTINGBUNDLEFAILURE:
            val = "ExtractingBundleFailure";
            break;
        case eOAIDeploymentJobErrorCode::PRELAUNCHFILEFAILURE:
            val = "PreLaunchFileFailure";
            break;
        case eOAIDeploymentJobErrorCode::POSTLAUNCHFILEFAILURE:
            val = "PostLaunchFileFailure";
            break;
        case eOAIDeploymentJobErrorCode::BADPERMISSIONERROR:
            val = "BadPermissionError";
            break;
        case eOAIDeploymentJobErrorCode::DOWNLOADCONDITIONFAILED:
            val = "DownloadConditionFailed";
            break;
        case eOAIDeploymentJobErrorCode::BADLAMBDAASSOCIATED:
            val = "BadLambdaAssociated";
            break;
        case eOAIDeploymentJobErrorCode::INTERNALSERVERERROR:
            val = "InternalServerError";
            break;
        case eOAIDeploymentJobErrorCode::ROBOTAPPLICATIONDOESNOTEXIST:
            val = "RobotApplicationDoesNotExist";
            break;
        case eOAIDeploymentJobErrorCode::DEPLOYMENTFLEETDOESNOTEXIST:
            val = "DeploymentFleetDoesNotExist";
            break;
        case eOAIDeploymentJobErrorCode::FLEETDEPLOYMENTTIMEOUT:
            val = "FleetDeploymentTimeout";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDeploymentJobErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDeploymentJobErrorCode::eOAIDeploymentJobErrorCode OAIDeploymentJobErrorCode::getValue() const {
    return m_value;
}

void OAIDeploymentJobErrorCode::setValue(const OAIDeploymentJobErrorCode::eOAIDeploymentJobErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDeploymentJobErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIDeploymentJobErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
