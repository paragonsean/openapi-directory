/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWorldGenerationJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWorldGenerationJob_request::OAICreateWorldGenerationJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWorldGenerationJob_request::OAICreateWorldGenerationJob_request() {
    this->initializeModel();
}

OAICreateWorldGenerationJob_request::~OAICreateWorldGenerationJob_request() {}

void OAICreateWorldGenerationJob_request::initializeModel() {

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_world_count_isSet = false;
    m_world_count_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_world_tags_isSet = false;
    m_world_tags_isValid = false;
}

void OAICreateWorldGenerationJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWorldGenerationJob_request::fromJsonObject(QJsonObject json) {

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_world_count_isValid = ::OpenAPI::fromJsonValue(m_world_count, json[QString("worldCount")]);
    m_world_count_isSet = !json[QString("worldCount")].isNull() && m_world_count_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_world_tags_isValid = ::OpenAPI::fromJsonValue(m_world_tags, json[QString("worldTags")]);
    m_world_tags_isSet = !json[QString("worldTags")].isNull() && m_world_tags_isValid;
}

QString OAICreateWorldGenerationJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWorldGenerationJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_world_count.isSet()) {
        obj.insert(QString("worldCount"), ::OpenAPI::toJsonValue(m_world_count));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_world_tags.size() > 0) {
        obj.insert(QString("worldTags"), ::OpenAPI::toJsonValue(m_world_tags));
    }
    return obj;
}

QString OAICreateWorldGenerationJob_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateWorldGenerationJob_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateWorldGenerationJob_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateWorldGenerationJob_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAICreateWorldGenerationJob_request::getRTemplate() const {
    return m_r_template;
}
void OAICreateWorldGenerationJob_request::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAICreateWorldGenerationJob_request::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAICreateWorldGenerationJob_request::is_r_template_Valid() const{
    return m_r_template_isValid;
}

OAICreateWorldGenerationJob_request_worldCount OAICreateWorldGenerationJob_request::getWorldCount() const {
    return m_world_count;
}
void OAICreateWorldGenerationJob_request::setWorldCount(const OAICreateWorldGenerationJob_request_worldCount &world_count) {
    m_world_count = world_count;
    m_world_count_isSet = true;
}

bool OAICreateWorldGenerationJob_request::is_world_count_Set() const{
    return m_world_count_isSet;
}

bool OAICreateWorldGenerationJob_request::is_world_count_Valid() const{
    return m_world_count_isValid;
}

QMap<QString, QString> OAICreateWorldGenerationJob_request::getTags() const {
    return m_tags;
}
void OAICreateWorldGenerationJob_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateWorldGenerationJob_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateWorldGenerationJob_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QMap<QString, QString> OAICreateWorldGenerationJob_request::getWorldTags() const {
    return m_world_tags;
}
void OAICreateWorldGenerationJob_request::setWorldTags(const QMap<QString, QString> &world_tags) {
    m_world_tags = world_tags;
    m_world_tags_isSet = true;
}

bool OAICreateWorldGenerationJob_request::is_world_tags_Set() const{
    return m_world_tags_isSet;
}

bool OAICreateWorldGenerationJob_request::is_world_tags_Valid() const{
    return m_world_tags_isValid;
}

bool OAICreateWorldGenerationJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_world_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_world_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWorldGenerationJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_template_isValid && m_world_count_isValid && true;
}

} // namespace OpenAPI
