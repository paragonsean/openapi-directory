/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWorldExportJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWorldExportJobRequest::OAICreateWorldExportJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWorldExportJobRequest::OAICreateWorldExportJobRequest() {
    this->initializeModel();
}

OAICreateWorldExportJobRequest::~OAICreateWorldExportJobRequest() {}

void OAICreateWorldExportJobRequest::initializeModel() {

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_worlds_isSet = false;
    m_worlds_isValid = false;

    m_output_location_isSet = false;
    m_output_location_isValid = false;

    m_iam_role_isSet = false;
    m_iam_role_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateWorldExportJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWorldExportJobRequest::fromJsonObject(QJsonObject json) {

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_worlds_isValid = ::OpenAPI::fromJsonValue(m_worlds, json[QString("worlds")]);
    m_worlds_isSet = !json[QString("worlds")].isNull() && m_worlds_isValid;

    m_output_location_isValid = ::OpenAPI::fromJsonValue(m_output_location, json[QString("outputLocation")]);
    m_output_location_isSet = !json[QString("outputLocation")].isNull() && m_output_location_isValid;

    m_iam_role_isValid = ::OpenAPI::fromJsonValue(m_iam_role, json[QString("iamRole")]);
    m_iam_role_isSet = !json[QString("iamRole")].isNull() && m_iam_role_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateWorldExportJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWorldExportJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_worlds.isSet()) {
        obj.insert(QString("worlds"), ::OpenAPI::toJsonValue(m_worlds));
    }
    if (m_output_location.isSet()) {
        obj.insert(QString("outputLocation"), ::OpenAPI::toJsonValue(m_output_location));
    }
    if (m_iam_role_isSet) {
        obj.insert(QString("iamRole"), ::OpenAPI::toJsonValue(m_iam_role));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateWorldExportJobRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateWorldExportJobRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateWorldExportJobRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateWorldExportJobRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList OAICreateWorldExportJobRequest::getWorlds() const {
    return m_worlds;
}
void OAICreateWorldExportJobRequest::setWorlds(const QList &worlds) {
    m_worlds = worlds;
    m_worlds_isSet = true;
}

bool OAICreateWorldExportJobRequest::is_worlds_Set() const{
    return m_worlds_isSet;
}

bool OAICreateWorldExportJobRequest::is_worlds_Valid() const{
    return m_worlds_isValid;
}

OAIOutputLocation OAICreateWorldExportJobRequest::getOutputLocation() const {
    return m_output_location;
}
void OAICreateWorldExportJobRequest::setOutputLocation(const OAIOutputLocation &output_location) {
    m_output_location = output_location;
    m_output_location_isSet = true;
}

bool OAICreateWorldExportJobRequest::is_output_location_Set() const{
    return m_output_location_isSet;
}

bool OAICreateWorldExportJobRequest::is_output_location_Valid() const{
    return m_output_location_isValid;
}

QString OAICreateWorldExportJobRequest::getIamRole() const {
    return m_iam_role;
}
void OAICreateWorldExportJobRequest::setIamRole(const QString &iam_role) {
    m_iam_role = iam_role;
    m_iam_role_isSet = true;
}

bool OAICreateWorldExportJobRequest::is_iam_role_Set() const{
    return m_iam_role_isSet;
}

bool OAICreateWorldExportJobRequest::is_iam_role_Valid() const{
    return m_iam_role_isValid;
}

QMap OAICreateWorldExportJobRequest::getTags() const {
    return m_tags;
}
void OAICreateWorldExportJobRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateWorldExportJobRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateWorldExportJobRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateWorldExportJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worlds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWorldExportJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_worlds_isValid && m_output_location_isValid && m_iam_role_isValid && true;
}

} // namespace OpenAPI
