/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSimulationJobBatchResponse_batchPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSimulationJobBatchResponse_batchPolicy::OAIDescribeSimulationJobBatchResponse_batchPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSimulationJobBatchResponse_batchPolicy::OAIDescribeSimulationJobBatchResponse_batchPolicy() {
    this->initializeModel();
}

OAIDescribeSimulationJobBatchResponse_batchPolicy::~OAIDescribeSimulationJobBatchResponse_batchPolicy() {}

void OAIDescribeSimulationJobBatchResponse_batchPolicy::initializeModel() {

    m_timeout_in_seconds_isSet = false;
    m_timeout_in_seconds_isValid = false;

    m_max_concurrency_isSet = false;
    m_max_concurrency_isValid = false;
}

void OAIDescribeSimulationJobBatchResponse_batchPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSimulationJobBatchResponse_batchPolicy::fromJsonObject(QJsonObject json) {

    m_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_seconds, json[QString("timeoutInSeconds")]);
    m_timeout_in_seconds_isSet = !json[QString("timeoutInSeconds")].isNull() && m_timeout_in_seconds_isValid;

    m_max_concurrency_isValid = ::OpenAPI::fromJsonValue(m_max_concurrency, json[QString("maxConcurrency")]);
    m_max_concurrency_isSet = !json[QString("maxConcurrency")].isNull() && m_max_concurrency_isValid;
}

QString OAIDescribeSimulationJobBatchResponse_batchPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSimulationJobBatchResponse_batchPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_timeout_in_seconds_isSet) {
        obj.insert(QString("timeoutInSeconds"), ::OpenAPI::toJsonValue(m_timeout_in_seconds));
    }
    if (m_max_concurrency_isSet) {
        obj.insert(QString("maxConcurrency"), ::OpenAPI::toJsonValue(m_max_concurrency));
    }
    return obj;
}

qint32 OAIDescribeSimulationJobBatchResponse_batchPolicy::getTimeoutInSeconds() const {
    return m_timeout_in_seconds;
}
void OAIDescribeSimulationJobBatchResponse_batchPolicy::setTimeoutInSeconds(const qint32 &timeout_in_seconds) {
    m_timeout_in_seconds = timeout_in_seconds;
    m_timeout_in_seconds_isSet = true;
}

bool OAIDescribeSimulationJobBatchResponse_batchPolicy::is_timeout_in_seconds_Set() const{
    return m_timeout_in_seconds_isSet;
}

bool OAIDescribeSimulationJobBatchResponse_batchPolicy::is_timeout_in_seconds_Valid() const{
    return m_timeout_in_seconds_isValid;
}

qint32 OAIDescribeSimulationJobBatchResponse_batchPolicy::getMaxConcurrency() const {
    return m_max_concurrency;
}
void OAIDescribeSimulationJobBatchResponse_batchPolicy::setMaxConcurrency(const qint32 &max_concurrency) {
    m_max_concurrency = max_concurrency;
    m_max_concurrency_isSet = true;
}

bool OAIDescribeSimulationJobBatchResponse_batchPolicy::is_max_concurrency_Set() const{
    return m_max_concurrency_isSet;
}

bool OAIDescribeSimulationJobBatchResponse_batchPolicy::is_max_concurrency_Valid() const{
    return m_max_concurrency_isValid;
}

bool OAIDescribeSimulationJobBatchResponse_batchPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSimulationJobBatchResponse_batchPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
