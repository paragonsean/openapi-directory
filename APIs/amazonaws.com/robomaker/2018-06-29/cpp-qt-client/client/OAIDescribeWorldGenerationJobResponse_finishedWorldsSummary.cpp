/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary() {
    this->initializeModel();
}

OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::~OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary() {}

void OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::initializeModel() {

    m_finished_count_isSet = false;
    m_finished_count_isValid = false;

    m_succeeded_worlds_isSet = false;
    m_succeeded_worlds_isValid = false;

    m_failure_summary_isSet = false;
    m_failure_summary_isValid = false;
}

void OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::fromJsonObject(QJsonObject json) {

    m_finished_count_isValid = ::OpenAPI::fromJsonValue(m_finished_count, json[QString("finishedCount")]);
    m_finished_count_isSet = !json[QString("finishedCount")].isNull() && m_finished_count_isValid;

    m_succeeded_worlds_isValid = ::OpenAPI::fromJsonValue(m_succeeded_worlds, json[QString("succeededWorlds")]);
    m_succeeded_worlds_isSet = !json[QString("succeededWorlds")].isNull() && m_succeeded_worlds_isValid;

    m_failure_summary_isValid = ::OpenAPI::fromJsonValue(m_failure_summary, json[QString("failureSummary")]);
    m_failure_summary_isSet = !json[QString("failureSummary")].isNull() && m_failure_summary_isValid;
}

QString OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_finished_count_isSet) {
        obj.insert(QString("finishedCount"), ::OpenAPI::toJsonValue(m_finished_count));
    }
    if (m_succeeded_worlds.isSet()) {
        obj.insert(QString("succeededWorlds"), ::OpenAPI::toJsonValue(m_succeeded_worlds));
    }
    if (m_failure_summary.isSet()) {
        obj.insert(QString("failureSummary"), ::OpenAPI::toJsonValue(m_failure_summary));
    }
    return obj;
}

qint32 OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::getFinishedCount() const {
    return m_finished_count;
}
void OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::setFinishedCount(const qint32 &finished_count) {
    m_finished_count = finished_count;
    m_finished_count_isSet = true;
}

bool OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::is_finished_count_Set() const{
    return m_finished_count_isSet;
}

bool OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::is_finished_count_Valid() const{
    return m_finished_count_isValid;
}

QList OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::getSucceededWorlds() const {
    return m_succeeded_worlds;
}
void OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::setSucceededWorlds(const QList &succeeded_worlds) {
    m_succeeded_worlds = succeeded_worlds;
    m_succeeded_worlds_isSet = true;
}

bool OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::is_succeeded_worlds_Set() const{
    return m_succeeded_worlds_isSet;
}

bool OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::is_succeeded_worlds_Valid() const{
    return m_succeeded_worlds_isValid;
}

OAIFinishedWorldsSummary_failureSummary OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::getFailureSummary() const {
    return m_failure_summary;
}
void OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::setFailureSummary(const OAIFinishedWorldsSummary_failureSummary &failure_summary) {
    m_failure_summary = failure_summary;
    m_failure_summary_isSet = true;
}

bool OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::is_failure_summary_Set() const{
    return m_failure_summary_isSet;
}

bool OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::is_failure_summary_Valid() const{
    return m_failure_summary_isValid;
}

bool OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_finished_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_worlds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeWorldGenerationJobResponse_finishedWorldsSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
