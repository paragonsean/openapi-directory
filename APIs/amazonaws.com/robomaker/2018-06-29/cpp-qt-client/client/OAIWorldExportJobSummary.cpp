/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorldExportJobSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorldExportJobSummary::OAIWorldExportJobSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorldExportJobSummary::OAIWorldExportJobSummary() {
    this->initializeModel();
}

OAIWorldExportJobSummary::~OAIWorldExportJobSummary() {}

void OAIWorldExportJobSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_worlds_isSet = false;
    m_worlds_isValid = false;

    m_output_location_isSet = false;
    m_output_location_isValid = false;
}

void OAIWorldExportJobSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorldExportJobSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_worlds_isValid = ::OpenAPI::fromJsonValue(m_worlds, json[QString("worlds")]);
    m_worlds_isSet = !json[QString("worlds")].isNull() && m_worlds_isValid;

    m_output_location_isValid = ::OpenAPI::fromJsonValue(m_output_location, json[QString("outputLocation")]);
    m_output_location_isSet = !json[QString("outputLocation")].isNull() && m_output_location_isValid;
}

QString OAIWorldExportJobSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorldExportJobSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_worlds.isSet()) {
        obj.insert(QString("worlds"), ::OpenAPI::toJsonValue(m_worlds));
    }
    if (m_output_location.isSet()) {
        obj.insert(QString("outputLocation"), ::OpenAPI::toJsonValue(m_output_location));
    }
    return obj;
}

QString OAIWorldExportJobSummary::getArn() const {
    return m_arn;
}
void OAIWorldExportJobSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIWorldExportJobSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIWorldExportJobSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIWorldExportJobStatus OAIWorldExportJobSummary::getStatus() const {
    return m_status;
}
void OAIWorldExportJobSummary::setStatus(const OAIWorldExportJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWorldExportJobSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWorldExportJobSummary::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIWorldExportJobSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIWorldExportJobSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWorldExportJobSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWorldExportJobSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList OAIWorldExportJobSummary::getWorlds() const {
    return m_worlds;
}
void OAIWorldExportJobSummary::setWorlds(const QList &worlds) {
    m_worlds = worlds;
    m_worlds_isSet = true;
}

bool OAIWorldExportJobSummary::is_worlds_Set() const{
    return m_worlds_isSet;
}

bool OAIWorldExportJobSummary::is_worlds_Valid() const{
    return m_worlds_isValid;
}

OAIOutputLocation OAIWorldExportJobSummary::getOutputLocation() const {
    return m_output_location;
}
void OAIWorldExportJobSummary::setOutputLocation(const OAIOutputLocation &output_location) {
    m_output_location = output_location;
    m_output_location_isSet = true;
}

bool OAIWorldExportJobSummary::is_output_location_Set() const{
    return m_output_location_isSet;
}

bool OAIWorldExportJobSummary::is_output_location_Valid() const{
    return m_output_location_isValid;
}

bool OAIWorldExportJobSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worlds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorldExportJobSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
