/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRobotApplicationConfig_launchConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRobotApplicationConfig_launchConfig::OAIRobotApplicationConfig_launchConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRobotApplicationConfig_launchConfig::OAIRobotApplicationConfig_launchConfig() {
    this->initializeModel();
}

OAIRobotApplicationConfig_launchConfig::~OAIRobotApplicationConfig_launchConfig() {}

void OAIRobotApplicationConfig_launchConfig::initializeModel() {

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_launch_file_isSet = false;
    m_launch_file_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_port_forwarding_config_isSet = false;
    m_port_forwarding_config_isValid = false;

    m_stream_ui_isSet = false;
    m_stream_ui_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;
}

void OAIRobotApplicationConfig_launchConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRobotApplicationConfig_launchConfig::fromJsonObject(QJsonObject json) {

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_launch_file_isValid = ::OpenAPI::fromJsonValue(m_launch_file, json[QString("launchFile")]);
    m_launch_file_isSet = !json[QString("launchFile")].isNull() && m_launch_file_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_port_forwarding_config_isValid = ::OpenAPI::fromJsonValue(m_port_forwarding_config, json[QString("portForwardingConfig")]);
    m_port_forwarding_config_isSet = !json[QString("portForwardingConfig")].isNull() && m_port_forwarding_config_isValid;

    m_stream_ui_isValid = ::OpenAPI::fromJsonValue(m_stream_ui, json[QString("streamUI")]);
    m_stream_ui_isSet = !json[QString("streamUI")].isNull() && m_stream_ui_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;
}

QString OAIRobotApplicationConfig_launchConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRobotApplicationConfig_launchConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_launch_file_isSet) {
        obj.insert(QString("launchFile"), ::OpenAPI::toJsonValue(m_launch_file));
    }
    if (m_environment_variables.isSet()) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_port_forwarding_config.isSet()) {
        obj.insert(QString("portForwardingConfig"), ::OpenAPI::toJsonValue(m_port_forwarding_config));
    }
    if (m_stream_ui_isSet) {
        obj.insert(QString("streamUI"), ::OpenAPI::toJsonValue(m_stream_ui));
    }
    if (m_command.isSet()) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    return obj;
}

QString OAIRobotApplicationConfig_launchConfig::getPackageName() const {
    return m_package_name;
}
void OAIRobotApplicationConfig_launchConfig::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIRobotApplicationConfig_launchConfig::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIRobotApplicationConfig_launchConfig::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAIRobotApplicationConfig_launchConfig::getLaunchFile() const {
    return m_launch_file;
}
void OAIRobotApplicationConfig_launchConfig::setLaunchFile(const QString &launch_file) {
    m_launch_file = launch_file;
    m_launch_file_isSet = true;
}

bool OAIRobotApplicationConfig_launchConfig::is_launch_file_Set() const{
    return m_launch_file_isSet;
}

bool OAIRobotApplicationConfig_launchConfig::is_launch_file_Valid() const{
    return m_launch_file_isValid;
}

QMap OAIRobotApplicationConfig_launchConfig::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIRobotApplicationConfig_launchConfig::setEnvironmentVariables(const QMap &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIRobotApplicationConfig_launchConfig::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIRobotApplicationConfig_launchConfig::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

OAILaunchConfig_portForwardingConfig OAIRobotApplicationConfig_launchConfig::getPortForwardingConfig() const {
    return m_port_forwarding_config;
}
void OAIRobotApplicationConfig_launchConfig::setPortForwardingConfig(const OAILaunchConfig_portForwardingConfig &port_forwarding_config) {
    m_port_forwarding_config = port_forwarding_config;
    m_port_forwarding_config_isSet = true;
}

bool OAIRobotApplicationConfig_launchConfig::is_port_forwarding_config_Set() const{
    return m_port_forwarding_config_isSet;
}

bool OAIRobotApplicationConfig_launchConfig::is_port_forwarding_config_Valid() const{
    return m_port_forwarding_config_isValid;
}

bool OAIRobotApplicationConfig_launchConfig::getStreamUi() const {
    return m_stream_ui;
}
void OAIRobotApplicationConfig_launchConfig::setStreamUi(const bool &stream_ui) {
    m_stream_ui = stream_ui;
    m_stream_ui_isSet = true;
}

bool OAIRobotApplicationConfig_launchConfig::is_stream_ui_Set() const{
    return m_stream_ui_isSet;
}

bool OAIRobotApplicationConfig_launchConfig::is_stream_ui_Valid() const{
    return m_stream_ui_isValid;
}

QList OAIRobotApplicationConfig_launchConfig::getCommand() const {
    return m_command;
}
void OAIRobotApplicationConfig_launchConfig::setCommand(const QList &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIRobotApplicationConfig_launchConfig::is_command_Set() const{
    return m_command_isSet;
}

bool OAIRobotApplicationConfig_launchConfig::is_command_Valid() const{
    return m_command_isValid;
}

bool OAIRobotApplicationConfig_launchConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_forwarding_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_ui_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_command.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRobotApplicationConfig_launchConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
