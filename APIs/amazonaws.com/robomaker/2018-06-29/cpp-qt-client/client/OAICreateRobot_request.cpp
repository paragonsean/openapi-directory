/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRobot_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRobot_request::OAICreateRobot_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRobot_request::OAICreateRobot_request() {
    this->initializeModel();
}

OAICreateRobot_request::~OAICreateRobot_request() {}

void OAICreateRobot_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_greengrass_group_id_isSet = false;
    m_greengrass_group_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateRobot_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRobot_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_greengrass_group_id_isValid = ::OpenAPI::fromJsonValue(m_greengrass_group_id, json[QString("greengrassGroupId")]);
    m_greengrass_group_id_isSet = !json[QString("greengrassGroupId")].isNull() && m_greengrass_group_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateRobot_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRobot_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_greengrass_group_id_isSet) {
        obj.insert(QString("greengrassGroupId"), ::OpenAPI::toJsonValue(m_greengrass_group_id));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateRobot_request::getName() const {
    return m_name;
}
void OAICreateRobot_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRobot_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRobot_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateRobot_request::getArchitecture() const {
    return m_architecture;
}
void OAICreateRobot_request::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAICreateRobot_request::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAICreateRobot_request::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QString OAICreateRobot_request::getGreengrassGroupId() const {
    return m_greengrass_group_id;
}
void OAICreateRobot_request::setGreengrassGroupId(const QString &greengrass_group_id) {
    m_greengrass_group_id = greengrass_group_id;
    m_greengrass_group_id_isSet = true;
}

bool OAICreateRobot_request::is_greengrass_group_id_Set() const{
    return m_greengrass_group_id_isSet;
}

bool OAICreateRobot_request::is_greengrass_group_id_Valid() const{
    return m_greengrass_group_id_isValid;
}

QMap<QString, QString> OAICreateRobot_request::getTags() const {
    return m_tags;
}
void OAICreateRobot_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRobot_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRobot_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateRobot_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_greengrass_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRobot_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_architecture_isValid && m_greengrass_group_id_isValid && true;
}

} // namespace OpenAPI
