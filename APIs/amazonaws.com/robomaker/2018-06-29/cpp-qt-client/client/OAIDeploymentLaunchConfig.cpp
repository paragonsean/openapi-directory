/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentLaunchConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentLaunchConfig::OAIDeploymentLaunchConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentLaunchConfig::OAIDeploymentLaunchConfig() {
    this->initializeModel();
}

OAIDeploymentLaunchConfig::~OAIDeploymentLaunchConfig() {}

void OAIDeploymentLaunchConfig::initializeModel() {

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_pre_launch_file_isSet = false;
    m_pre_launch_file_isValid = false;

    m_launch_file_isSet = false;
    m_launch_file_isValid = false;

    m_post_launch_file_isSet = false;
    m_post_launch_file_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;
}

void OAIDeploymentLaunchConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentLaunchConfig::fromJsonObject(QJsonObject json) {

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_pre_launch_file_isValid = ::OpenAPI::fromJsonValue(m_pre_launch_file, json[QString("preLaunchFile")]);
    m_pre_launch_file_isSet = !json[QString("preLaunchFile")].isNull() && m_pre_launch_file_isValid;

    m_launch_file_isValid = ::OpenAPI::fromJsonValue(m_launch_file, json[QString("launchFile")]);
    m_launch_file_isSet = !json[QString("launchFile")].isNull() && m_launch_file_isValid;

    m_post_launch_file_isValid = ::OpenAPI::fromJsonValue(m_post_launch_file, json[QString("postLaunchFile")]);
    m_post_launch_file_isSet = !json[QString("postLaunchFile")].isNull() && m_post_launch_file_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;
}

QString OAIDeploymentLaunchConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentLaunchConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_pre_launch_file_isSet) {
        obj.insert(QString("preLaunchFile"), ::OpenAPI::toJsonValue(m_pre_launch_file));
    }
    if (m_launch_file_isSet) {
        obj.insert(QString("launchFile"), ::OpenAPI::toJsonValue(m_launch_file));
    }
    if (m_post_launch_file_isSet) {
        obj.insert(QString("postLaunchFile"), ::OpenAPI::toJsonValue(m_post_launch_file));
    }
    if (m_environment_variables.isSet()) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    return obj;
}

QString OAIDeploymentLaunchConfig::getPackageName() const {
    return m_package_name;
}
void OAIDeploymentLaunchConfig::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIDeploymentLaunchConfig::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIDeploymentLaunchConfig::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAIDeploymentLaunchConfig::getPreLaunchFile() const {
    return m_pre_launch_file;
}
void OAIDeploymentLaunchConfig::setPreLaunchFile(const QString &pre_launch_file) {
    m_pre_launch_file = pre_launch_file;
    m_pre_launch_file_isSet = true;
}

bool OAIDeploymentLaunchConfig::is_pre_launch_file_Set() const{
    return m_pre_launch_file_isSet;
}

bool OAIDeploymentLaunchConfig::is_pre_launch_file_Valid() const{
    return m_pre_launch_file_isValid;
}

QString OAIDeploymentLaunchConfig::getLaunchFile() const {
    return m_launch_file;
}
void OAIDeploymentLaunchConfig::setLaunchFile(const QString &launch_file) {
    m_launch_file = launch_file;
    m_launch_file_isSet = true;
}

bool OAIDeploymentLaunchConfig::is_launch_file_Set() const{
    return m_launch_file_isSet;
}

bool OAIDeploymentLaunchConfig::is_launch_file_Valid() const{
    return m_launch_file_isValid;
}

QString OAIDeploymentLaunchConfig::getPostLaunchFile() const {
    return m_post_launch_file;
}
void OAIDeploymentLaunchConfig::setPostLaunchFile(const QString &post_launch_file) {
    m_post_launch_file = post_launch_file;
    m_post_launch_file_isSet = true;
}

bool OAIDeploymentLaunchConfig::is_post_launch_file_Set() const{
    return m_post_launch_file_isSet;
}

bool OAIDeploymentLaunchConfig::is_post_launch_file_Valid() const{
    return m_post_launch_file_isValid;
}

QMap OAIDeploymentLaunchConfig::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIDeploymentLaunchConfig::setEnvironmentVariables(const QMap &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIDeploymentLaunchConfig::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIDeploymentLaunchConfig::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

bool OAIDeploymentLaunchConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_launch_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_launch_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentLaunchConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_package_name_isValid && m_launch_file_isValid && true;
}

} // namespace OpenAPI
