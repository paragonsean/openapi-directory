/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRobotDeploymentStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRobotDeploymentStep::OAIRobotDeploymentStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRobotDeploymentStep::OAIRobotDeploymentStep() {
    this->initializeModel();
}

OAIRobotDeploymentStep::~OAIRobotDeploymentStep() {}

void OAIRobotDeploymentStep::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRobotDeploymentStep::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRobotDeploymentStep::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Validating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRobotDeploymentStep::VALIDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DownloadingExtracting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRobotDeploymentStep::DOWNLOADINGEXTRACTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExecutingDownloadCondition", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRobotDeploymentStep::EXECUTINGDOWNLOADCONDITION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExecutingPreLaunch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRobotDeploymentStep::EXECUTINGPRELAUNCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Launching", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRobotDeploymentStep::LAUNCHING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExecutingPostLaunch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRobotDeploymentStep::EXECUTINGPOSTLAUNCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Finished", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRobotDeploymentStep::FINISHED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRobotDeploymentStep::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRobotDeploymentStep::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRobotDeploymentStep::VALIDATING:
            val = "Validating";
            break;
        case eOAIRobotDeploymentStep::DOWNLOADINGEXTRACTING:
            val = "DownloadingExtracting";
            break;
        case eOAIRobotDeploymentStep::EXECUTINGDOWNLOADCONDITION:
            val = "ExecutingDownloadCondition";
            break;
        case eOAIRobotDeploymentStep::EXECUTINGPRELAUNCH:
            val = "ExecutingPreLaunch";
            break;
        case eOAIRobotDeploymentStep::LAUNCHING:
            val = "Launching";
            break;
        case eOAIRobotDeploymentStep::EXECUTINGPOSTLAUNCH:
            val = "ExecutingPostLaunch";
            break;
        case eOAIRobotDeploymentStep::FINISHED:
            val = "Finished";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRobotDeploymentStep::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRobotDeploymentStep::eOAIRobotDeploymentStep OAIRobotDeploymentStep::getValue() const {
    return m_value;
}

void OAIRobotDeploymentStep::setValue(const OAIRobotDeploymentStep::eOAIRobotDeploymentStep& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRobotDeploymentStep::isSet() const {
    
    return m_value_isSet;
}

bool OAIRobotDeploymentStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
