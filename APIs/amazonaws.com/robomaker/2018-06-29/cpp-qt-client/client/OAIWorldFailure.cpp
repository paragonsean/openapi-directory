/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorldFailure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorldFailure::OAIWorldFailure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorldFailure::OAIWorldFailure() {
    this->initializeModel();
}

OAIWorldFailure::~OAIWorldFailure() {}

void OAIWorldFailure::initializeModel() {

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_sample_failure_reason_isSet = false;
    m_sample_failure_reason_isValid = false;

    m_failure_count_isSet = false;
    m_failure_count_isValid = false;
}

void OAIWorldFailure::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorldFailure::fromJsonObject(QJsonObject json) {

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("failureCode")]);
    m_failure_code_isSet = !json[QString("failureCode")].isNull() && m_failure_code_isValid;

    m_sample_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_sample_failure_reason, json[QString("sampleFailureReason")]);
    m_sample_failure_reason_isSet = !json[QString("sampleFailureReason")].isNull() && m_sample_failure_reason_isValid;

    m_failure_count_isValid = ::OpenAPI::fromJsonValue(m_failure_count, json[QString("failureCount")]);
    m_failure_count_isSet = !json[QString("failureCount")].isNull() && m_failure_count_isValid;
}

QString OAIWorldFailure::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorldFailure::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_code.isSet()) {
        obj.insert(QString("failureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_sample_failure_reason_isSet) {
        obj.insert(QString("sampleFailureReason"), ::OpenAPI::toJsonValue(m_sample_failure_reason));
    }
    if (m_failure_count_isSet) {
        obj.insert(QString("failureCount"), ::OpenAPI::toJsonValue(m_failure_count));
    }
    return obj;
}

OAIWorldGenerationJobErrorCode OAIWorldFailure::getFailureCode() const {
    return m_failure_code;
}
void OAIWorldFailure::setFailureCode(const OAIWorldGenerationJobErrorCode &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAIWorldFailure::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAIWorldFailure::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QString OAIWorldFailure::getSampleFailureReason() const {
    return m_sample_failure_reason;
}
void OAIWorldFailure::setSampleFailureReason(const QString &sample_failure_reason) {
    m_sample_failure_reason = sample_failure_reason;
    m_sample_failure_reason_isSet = true;
}

bool OAIWorldFailure::is_sample_failure_reason_Set() const{
    return m_sample_failure_reason_isSet;
}

bool OAIWorldFailure::is_sample_failure_reason_Valid() const{
    return m_sample_failure_reason_isValid;
}

qint32 OAIWorldFailure::getFailureCount() const {
    return m_failure_count;
}
void OAIWorldFailure::setFailureCount(const qint32 &failure_count) {
    m_failure_count = failure_count;
    m_failure_count_isSet = true;
}

bool OAIWorldFailure::is_failure_count_Set() const{
    return m_failure_count_isSet;
}

bool OAIWorldFailure::is_failure_count_Valid() const{
    return m_failure_count_isValid;
}

bool OAIWorldFailure::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorldFailure::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
