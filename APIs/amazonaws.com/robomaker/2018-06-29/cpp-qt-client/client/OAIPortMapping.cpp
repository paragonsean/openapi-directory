/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPortMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPortMapping::OAIPortMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPortMapping::OAIPortMapping() {
    this->initializeModel();
}

OAIPortMapping::~OAIPortMapping() {}

void OAIPortMapping::initializeModel() {

    m_job_port_isSet = false;
    m_job_port_isValid = false;

    m_application_port_isSet = false;
    m_application_port_isValid = false;

    m_enable_on_public_ip_isSet = false;
    m_enable_on_public_ip_isValid = false;
}

void OAIPortMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPortMapping::fromJsonObject(QJsonObject json) {

    m_job_port_isValid = ::OpenAPI::fromJsonValue(m_job_port, json[QString("jobPort")]);
    m_job_port_isSet = !json[QString("jobPort")].isNull() && m_job_port_isValid;

    m_application_port_isValid = ::OpenAPI::fromJsonValue(m_application_port, json[QString("applicationPort")]);
    m_application_port_isSet = !json[QString("applicationPort")].isNull() && m_application_port_isValid;

    m_enable_on_public_ip_isValid = ::OpenAPI::fromJsonValue(m_enable_on_public_ip, json[QString("enableOnPublicIp")]);
    m_enable_on_public_ip_isSet = !json[QString("enableOnPublicIp")].isNull() && m_enable_on_public_ip_isValid;
}

QString OAIPortMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPortMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_job_port_isSet) {
        obj.insert(QString("jobPort"), ::OpenAPI::toJsonValue(m_job_port));
    }
    if (m_application_port_isSet) {
        obj.insert(QString("applicationPort"), ::OpenAPI::toJsonValue(m_application_port));
    }
    if (m_enable_on_public_ip_isSet) {
        obj.insert(QString("enableOnPublicIp"), ::OpenAPI::toJsonValue(m_enable_on_public_ip));
    }
    return obj;
}

qint32 OAIPortMapping::getJobPort() const {
    return m_job_port;
}
void OAIPortMapping::setJobPort(const qint32 &job_port) {
    m_job_port = job_port;
    m_job_port_isSet = true;
}

bool OAIPortMapping::is_job_port_Set() const{
    return m_job_port_isSet;
}

bool OAIPortMapping::is_job_port_Valid() const{
    return m_job_port_isValid;
}

qint32 OAIPortMapping::getApplicationPort() const {
    return m_application_port;
}
void OAIPortMapping::setApplicationPort(const qint32 &application_port) {
    m_application_port = application_port;
    m_application_port_isSet = true;
}

bool OAIPortMapping::is_application_port_Set() const{
    return m_application_port_isSet;
}

bool OAIPortMapping::is_application_port_Valid() const{
    return m_application_port_isValid;
}

bool OAIPortMapping::getEnableOnPublicIp() const {
    return m_enable_on_public_ip;
}
void OAIPortMapping::setEnableOnPublicIp(const bool &enable_on_public_ip) {
    m_enable_on_public_ip = enable_on_public_ip;
    m_enable_on_public_ip_isSet = true;
}

bool OAIPortMapping::is_enable_on_public_ip_Set() const{
    return m_enable_on_public_ip_isSet;
}

bool OAIPortMapping::is_enable_on_public_ip_Valid() const{
    return m_enable_on_public_ip_isValid;
}

bool OAIPortMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_on_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPortMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_port_isValid && m_application_port_isValid && true;
}

} // namespace OpenAPI
