/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSimulationJob_request_outputLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSimulationJob_request_outputLocation::OAICreateSimulationJob_request_outputLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSimulationJob_request_outputLocation::OAICreateSimulationJob_request_outputLocation() {
    this->initializeModel();
}

OAICreateSimulationJob_request_outputLocation::~OAICreateSimulationJob_request_outputLocation() {}

void OAICreateSimulationJob_request_outputLocation::initializeModel() {

    m_s3_bucket_isSet = false;
    m_s3_bucket_isValid = false;

    m_s3_prefix_isSet = false;
    m_s3_prefix_isValid = false;
}

void OAICreateSimulationJob_request_outputLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSimulationJob_request_outputLocation::fromJsonObject(QJsonObject json) {

    m_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket, json[QString("s3Bucket")]);
    m_s3_bucket_isSet = !json[QString("s3Bucket")].isNull() && m_s3_bucket_isValid;

    m_s3_prefix_isValid = ::OpenAPI::fromJsonValue(m_s3_prefix, json[QString("s3Prefix")]);
    m_s3_prefix_isSet = !json[QString("s3Prefix")].isNull() && m_s3_prefix_isValid;
}

QString OAICreateSimulationJob_request_outputLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSimulationJob_request_outputLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_bucket_isSet) {
        obj.insert(QString("s3Bucket"), ::OpenAPI::toJsonValue(m_s3_bucket));
    }
    if (m_s3_prefix_isSet) {
        obj.insert(QString("s3Prefix"), ::OpenAPI::toJsonValue(m_s3_prefix));
    }
    return obj;
}

QString OAICreateSimulationJob_request_outputLocation::getS3Bucket() const {
    return m_s3_bucket;
}
void OAICreateSimulationJob_request_outputLocation::setS3Bucket(const QString &s3_bucket) {
    m_s3_bucket = s3_bucket;
    m_s3_bucket_isSet = true;
}

bool OAICreateSimulationJob_request_outputLocation::is_s3_bucket_Set() const{
    return m_s3_bucket_isSet;
}

bool OAICreateSimulationJob_request_outputLocation::is_s3_bucket_Valid() const{
    return m_s3_bucket_isValid;
}

QString OAICreateSimulationJob_request_outputLocation::getS3Prefix() const {
    return m_s3_prefix;
}
void OAICreateSimulationJob_request_outputLocation::setS3Prefix(const QString &s3_prefix) {
    m_s3_prefix = s3_prefix;
    m_s3_prefix_isSet = true;
}

bool OAICreateSimulationJob_request_outputLocation::is_s3_prefix_Set() const{
    return m_s3_prefix_isSet;
}

bool OAICreateSimulationJob_request_outputLocation::is_s3_prefix_Valid() const{
    return m_s3_prefix_isValid;
}

bool OAICreateSimulationJob_request_outputLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSimulationJob_request_outputLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
