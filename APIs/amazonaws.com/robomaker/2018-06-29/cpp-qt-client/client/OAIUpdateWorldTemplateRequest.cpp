/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateWorldTemplateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateWorldTemplateRequest::OAIUpdateWorldTemplateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateWorldTemplateRequest::OAIUpdateWorldTemplateRequest() {
    this->initializeModel();
}

OAIUpdateWorldTemplateRequest::~OAIUpdateWorldTemplateRequest() {}

void OAIUpdateWorldTemplateRequest::initializeModel() {

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_template_body_isSet = false;
    m_template_body_isValid = false;

    m_template_location_isSet = false;
    m_template_location_isValid = false;
}

void OAIUpdateWorldTemplateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateWorldTemplateRequest::fromJsonObject(QJsonObject json) {

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_template_body_isValid = ::OpenAPI::fromJsonValue(m_template_body, json[QString("templateBody")]);
    m_template_body_isSet = !json[QString("templateBody")].isNull() && m_template_body_isValid;

    m_template_location_isValid = ::OpenAPI::fromJsonValue(m_template_location, json[QString("templateLocation")]);
    m_template_location_isSet = !json[QString("templateLocation")].isNull() && m_template_location_isValid;
}

QString OAIUpdateWorldTemplateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateWorldTemplateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_template_body_isSet) {
        obj.insert(QString("templateBody"), ::OpenAPI::toJsonValue(m_template_body));
    }
    if (m_template_location.isSet()) {
        obj.insert(QString("templateLocation"), ::OpenAPI::toJsonValue(m_template_location));
    }
    return obj;
}

QString OAIUpdateWorldTemplateRequest::getRTemplate() const {
    return m_r_template;
}
void OAIUpdateWorldTemplateRequest::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIUpdateWorldTemplateRequest::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIUpdateWorldTemplateRequest::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAIUpdateWorldTemplateRequest::getName() const {
    return m_name;
}
void OAIUpdateWorldTemplateRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateWorldTemplateRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateWorldTemplateRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateWorldTemplateRequest::getTemplateBody() const {
    return m_template_body;
}
void OAIUpdateWorldTemplateRequest::setTemplateBody(const QString &template_body) {
    m_template_body = template_body;
    m_template_body_isSet = true;
}

bool OAIUpdateWorldTemplateRequest::is_template_body_Set() const{
    return m_template_body_isSet;
}

bool OAIUpdateWorldTemplateRequest::is_template_body_Valid() const{
    return m_template_body_isValid;
}

OAICreateWorldTemplateRequest_templateLocation OAIUpdateWorldTemplateRequest::getTemplateLocation() const {
    return m_template_location;
}
void OAIUpdateWorldTemplateRequest::setTemplateLocation(const OAICreateWorldTemplateRequest_templateLocation &template_location) {
    m_template_location = template_location;
    m_template_location_isSet = true;
}

bool OAIUpdateWorldTemplateRequest::is_template_location_Set() const{
    return m_template_location_isSet;
}

bool OAIUpdateWorldTemplateRequest::is_template_location_Valid() const{
    return m_template_location_isValid;
}

bool OAIUpdateWorldTemplateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateWorldTemplateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_template_isValid && true;
}

} // namespace OpenAPI
