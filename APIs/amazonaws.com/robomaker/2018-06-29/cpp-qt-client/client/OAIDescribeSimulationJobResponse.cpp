/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSimulationJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSimulationJobResponse::OAIDescribeSimulationJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSimulationJobResponse::OAIDescribeSimulationJobResponse() {
    this->initializeModel();
}

OAIDescribeSimulationJobResponse::~OAIDescribeSimulationJobResponse() {}

void OAIDescribeSimulationJobResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_last_started_at_isSet = false;
    m_last_started_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_failure_behavior_isSet = false;
    m_failure_behavior_isValid = false;

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_output_location_isSet = false;
    m_output_location_isValid = false;

    m_logging_config_isSet = false;
    m_logging_config_isValid = false;

    m_max_job_duration_in_seconds_isSet = false;
    m_max_job_duration_in_seconds_isValid = false;

    m_simulation_time_millis_isSet = false;
    m_simulation_time_millis_isValid = false;

    m_iam_role_isSet = false;
    m_iam_role_isValid = false;

    m_robot_applications_isSet = false;
    m_robot_applications_isValid = false;

    m_simulation_applications_isSet = false;
    m_simulation_applications_isValid = false;

    m_data_sources_isSet = false;
    m_data_sources_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_network_interface_isSet = false;
    m_network_interface_isValid = false;

    m_compute_isSet = false;
    m_compute_isValid = false;
}

void OAIDescribeSimulationJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSimulationJobResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_last_started_at_isValid = ::OpenAPI::fromJsonValue(m_last_started_at, json[QString("lastStartedAt")]);
    m_last_started_at_isSet = !json[QString("lastStartedAt")].isNull() && m_last_started_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_failure_behavior_isValid = ::OpenAPI::fromJsonValue(m_failure_behavior, json[QString("failureBehavior")]);
    m_failure_behavior_isSet = !json[QString("failureBehavior")].isNull() && m_failure_behavior_isValid;

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("failureCode")]);
    m_failure_code_isSet = !json[QString("failureCode")].isNull() && m_failure_code_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_output_location_isValid = ::OpenAPI::fromJsonValue(m_output_location, json[QString("outputLocation")]);
    m_output_location_isSet = !json[QString("outputLocation")].isNull() && m_output_location_isValid;

    m_logging_config_isValid = ::OpenAPI::fromJsonValue(m_logging_config, json[QString("loggingConfig")]);
    m_logging_config_isSet = !json[QString("loggingConfig")].isNull() && m_logging_config_isValid;

    m_max_job_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_max_job_duration_in_seconds, json[QString("maxJobDurationInSeconds")]);
    m_max_job_duration_in_seconds_isSet = !json[QString("maxJobDurationInSeconds")].isNull() && m_max_job_duration_in_seconds_isValid;

    m_simulation_time_millis_isValid = ::OpenAPI::fromJsonValue(m_simulation_time_millis, json[QString("simulationTimeMillis")]);
    m_simulation_time_millis_isSet = !json[QString("simulationTimeMillis")].isNull() && m_simulation_time_millis_isValid;

    m_iam_role_isValid = ::OpenAPI::fromJsonValue(m_iam_role, json[QString("iamRole")]);
    m_iam_role_isSet = !json[QString("iamRole")].isNull() && m_iam_role_isValid;

    m_robot_applications_isValid = ::OpenAPI::fromJsonValue(m_robot_applications, json[QString("robotApplications")]);
    m_robot_applications_isSet = !json[QString("robotApplications")].isNull() && m_robot_applications_isValid;

    m_simulation_applications_isValid = ::OpenAPI::fromJsonValue(m_simulation_applications, json[QString("simulationApplications")]);
    m_simulation_applications_isSet = !json[QString("simulationApplications")].isNull() && m_simulation_applications_isValid;

    m_data_sources_isValid = ::OpenAPI::fromJsonValue(m_data_sources, json[QString("dataSources")]);
    m_data_sources_isSet = !json[QString("dataSources")].isNull() && m_data_sources_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("vpcConfig")]);
    m_vpc_config_isSet = !json[QString("vpcConfig")].isNull() && m_vpc_config_isValid;

    m_network_interface_isValid = ::OpenAPI::fromJsonValue(m_network_interface, json[QString("networkInterface")]);
    m_network_interface_isSet = !json[QString("networkInterface")].isNull() && m_network_interface_isValid;

    m_compute_isValid = ::OpenAPI::fromJsonValue(m_compute, json[QString("compute")]);
    m_compute_isSet = !json[QString("compute")].isNull() && m_compute_isValid;
}

QString OAIDescribeSimulationJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSimulationJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_last_started_at_isSet) {
        obj.insert(QString("lastStartedAt"), ::OpenAPI::toJsonValue(m_last_started_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_failure_behavior.isSet()) {
        obj.insert(QString("failureBehavior"), ::OpenAPI::toJsonValue(m_failure_behavior));
    }
    if (m_failure_code.isSet()) {
        obj.insert(QString("failureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_output_location.isSet()) {
        obj.insert(QString("outputLocation"), ::OpenAPI::toJsonValue(m_output_location));
    }
    if (m_logging_config.isSet()) {
        obj.insert(QString("loggingConfig"), ::OpenAPI::toJsonValue(m_logging_config));
    }
    if (m_max_job_duration_in_seconds_isSet) {
        obj.insert(QString("maxJobDurationInSeconds"), ::OpenAPI::toJsonValue(m_max_job_duration_in_seconds));
    }
    if (m_simulation_time_millis_isSet) {
        obj.insert(QString("simulationTimeMillis"), ::OpenAPI::toJsonValue(m_simulation_time_millis));
    }
    if (m_iam_role_isSet) {
        obj.insert(QString("iamRole"), ::OpenAPI::toJsonValue(m_iam_role));
    }
    if (m_robot_applications.isSet()) {
        obj.insert(QString("robotApplications"), ::OpenAPI::toJsonValue(m_robot_applications));
    }
    if (m_simulation_applications.isSet()) {
        obj.insert(QString("simulationApplications"), ::OpenAPI::toJsonValue(m_simulation_applications));
    }
    if (m_data_sources.isSet()) {
        obj.insert(QString("dataSources"), ::OpenAPI::toJsonValue(m_data_sources));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("vpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_network_interface.isSet()) {
        obj.insert(QString("networkInterface"), ::OpenAPI::toJsonValue(m_network_interface));
    }
    if (m_compute.isSet()) {
        obj.insert(QString("compute"), ::OpenAPI::toJsonValue(m_compute));
    }
    return obj;
}

QString OAIDescribeSimulationJobResponse::getArn() const {
    return m_arn;
}
void OAIDescribeSimulationJobResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeSimulationJobResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeSimulationJobResponse::getName() const {
    return m_name;
}
void OAIDescribeSimulationJobResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeSimulationJobResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAISimulationJobStatus OAIDescribeSimulationJobResponse::getStatus() const {
    return m_status;
}
void OAIDescribeSimulationJobResponse::setStatus(const OAISimulationJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeSimulationJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeSimulationJobResponse::getLastStartedAt() const {
    return m_last_started_at;
}
void OAIDescribeSimulationJobResponse::setLastStartedAt(const QDateTime &last_started_at) {
    m_last_started_at = last_started_at;
    m_last_started_at_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_last_started_at_Set() const{
    return m_last_started_at_isSet;
}

bool OAIDescribeSimulationJobResponse::is_last_started_at_Valid() const{
    return m_last_started_at_isValid;
}

QDateTime OAIDescribeSimulationJobResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIDescribeSimulationJobResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIDescribeSimulationJobResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

OAIFailureBehavior OAIDescribeSimulationJobResponse::getFailureBehavior() const {
    return m_failure_behavior;
}
void OAIDescribeSimulationJobResponse::setFailureBehavior(const OAIFailureBehavior &failure_behavior) {
    m_failure_behavior = failure_behavior;
    m_failure_behavior_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_failure_behavior_Set() const{
    return m_failure_behavior_isSet;
}

bool OAIDescribeSimulationJobResponse::is_failure_behavior_Valid() const{
    return m_failure_behavior_isValid;
}

OAISimulationJobErrorCode OAIDescribeSimulationJobResponse::getFailureCode() const {
    return m_failure_code;
}
void OAIDescribeSimulationJobResponse::setFailureCode(const OAISimulationJobErrorCode &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAIDescribeSimulationJobResponse::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QString OAIDescribeSimulationJobResponse::getFailureReason() const {
    return m_failure_reason;
}
void OAIDescribeSimulationJobResponse::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIDescribeSimulationJobResponse::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIDescribeSimulationJobResponse::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIDescribeSimulationJobResponse::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIDescribeSimulationJobResponse::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

OAIDescribeSimulationJobResponse_outputLocation OAIDescribeSimulationJobResponse::getOutputLocation() const {
    return m_output_location;
}
void OAIDescribeSimulationJobResponse::setOutputLocation(const OAIDescribeSimulationJobResponse_outputLocation &output_location) {
    m_output_location = output_location;
    m_output_location_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_output_location_Set() const{
    return m_output_location_isSet;
}

bool OAIDescribeSimulationJobResponse::is_output_location_Valid() const{
    return m_output_location_isValid;
}

OAICreateSimulationJobResponse_loggingConfig OAIDescribeSimulationJobResponse::getLoggingConfig() const {
    return m_logging_config;
}
void OAIDescribeSimulationJobResponse::setLoggingConfig(const OAICreateSimulationJobResponse_loggingConfig &logging_config) {
    m_logging_config = logging_config;
    m_logging_config_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_logging_config_Set() const{
    return m_logging_config_isSet;
}

bool OAIDescribeSimulationJobResponse::is_logging_config_Valid() const{
    return m_logging_config_isValid;
}

qint32 OAIDescribeSimulationJobResponse::getMaxJobDurationInSeconds() const {
    return m_max_job_duration_in_seconds;
}
void OAIDescribeSimulationJobResponse::setMaxJobDurationInSeconds(const qint32 &max_job_duration_in_seconds) {
    m_max_job_duration_in_seconds = max_job_duration_in_seconds;
    m_max_job_duration_in_seconds_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_max_job_duration_in_seconds_Set() const{
    return m_max_job_duration_in_seconds_isSet;
}

bool OAIDescribeSimulationJobResponse::is_max_job_duration_in_seconds_Valid() const{
    return m_max_job_duration_in_seconds_isValid;
}

qint32 OAIDescribeSimulationJobResponse::getSimulationTimeMillis() const {
    return m_simulation_time_millis;
}
void OAIDescribeSimulationJobResponse::setSimulationTimeMillis(const qint32 &simulation_time_millis) {
    m_simulation_time_millis = simulation_time_millis;
    m_simulation_time_millis_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_simulation_time_millis_Set() const{
    return m_simulation_time_millis_isSet;
}

bool OAIDescribeSimulationJobResponse::is_simulation_time_millis_Valid() const{
    return m_simulation_time_millis_isValid;
}

QString OAIDescribeSimulationJobResponse::getIamRole() const {
    return m_iam_role;
}
void OAIDescribeSimulationJobResponse::setIamRole(const QString &iam_role) {
    m_iam_role = iam_role;
    m_iam_role_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_iam_role_Set() const{
    return m_iam_role_isSet;
}

bool OAIDescribeSimulationJobResponse::is_iam_role_Valid() const{
    return m_iam_role_isValid;
}

QList OAIDescribeSimulationJobResponse::getRobotApplications() const {
    return m_robot_applications;
}
void OAIDescribeSimulationJobResponse::setRobotApplications(const QList &robot_applications) {
    m_robot_applications = robot_applications;
    m_robot_applications_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_robot_applications_Set() const{
    return m_robot_applications_isSet;
}

bool OAIDescribeSimulationJobResponse::is_robot_applications_Valid() const{
    return m_robot_applications_isValid;
}

QList OAIDescribeSimulationJobResponse::getSimulationApplications() const {
    return m_simulation_applications;
}
void OAIDescribeSimulationJobResponse::setSimulationApplications(const QList &simulation_applications) {
    m_simulation_applications = simulation_applications;
    m_simulation_applications_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_simulation_applications_Set() const{
    return m_simulation_applications_isSet;
}

bool OAIDescribeSimulationJobResponse::is_simulation_applications_Valid() const{
    return m_simulation_applications_isValid;
}

QList OAIDescribeSimulationJobResponse::getDataSources() const {
    return m_data_sources;
}
void OAIDescribeSimulationJobResponse::setDataSources(const QList &data_sources) {
    m_data_sources = data_sources;
    m_data_sources_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_data_sources_Set() const{
    return m_data_sources_isSet;
}

bool OAIDescribeSimulationJobResponse::is_data_sources_Valid() const{
    return m_data_sources_isValid;
}

QMap OAIDescribeSimulationJobResponse::getTags() const {
    return m_tags;
}
void OAIDescribeSimulationJobResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeSimulationJobResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIDescribeSimulationJobResponse_vpcConfig OAIDescribeSimulationJobResponse::getVpcConfig() const {
    return m_vpc_config;
}
void OAIDescribeSimulationJobResponse::setVpcConfig(const OAIDescribeSimulationJobResponse_vpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAIDescribeSimulationJobResponse::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

OAIDescribeSimulationJobResponse_networkInterface OAIDescribeSimulationJobResponse::getNetworkInterface() const {
    return m_network_interface;
}
void OAIDescribeSimulationJobResponse::setNetworkInterface(const OAIDescribeSimulationJobResponse_networkInterface &network_interface) {
    m_network_interface = network_interface;
    m_network_interface_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_network_interface_Set() const{
    return m_network_interface_isSet;
}

bool OAIDescribeSimulationJobResponse::is_network_interface_Valid() const{
    return m_network_interface_isValid;
}

OAICreateSimulationJobResponse_compute OAIDescribeSimulationJobResponse::getCompute() const {
    return m_compute;
}
void OAIDescribeSimulationJobResponse::setCompute(const OAICreateSimulationJobResponse_compute &compute) {
    m_compute = compute;
    m_compute_isSet = true;
}

bool OAIDescribeSimulationJobResponse::is_compute_Set() const{
    return m_compute_isSet;
}

bool OAIDescribeSimulationJobResponse::is_compute_Valid() const{
    return m_compute_isValid;
}

bool OAIDescribeSimulationJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_job_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulation_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot_applications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulation_applications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSimulationJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
