/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeregisterRobotRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeregisterRobotRequest::OAIDeregisterRobotRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeregisterRobotRequest::OAIDeregisterRobotRequest() {
    this->initializeModel();
}

OAIDeregisterRobotRequest::~OAIDeregisterRobotRequest() {}

void OAIDeregisterRobotRequest::initializeModel() {

    m_fleet_isSet = false;
    m_fleet_isValid = false;

    m_robot_isSet = false;
    m_robot_isValid = false;
}

void OAIDeregisterRobotRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeregisterRobotRequest::fromJsonObject(QJsonObject json) {

    m_fleet_isValid = ::OpenAPI::fromJsonValue(m_fleet, json[QString("fleet")]);
    m_fleet_isSet = !json[QString("fleet")].isNull() && m_fleet_isValid;

    m_robot_isValid = ::OpenAPI::fromJsonValue(m_robot, json[QString("robot")]);
    m_robot_isSet = !json[QString("robot")].isNull() && m_robot_isValid;
}

QString OAIDeregisterRobotRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeregisterRobotRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_fleet_isSet) {
        obj.insert(QString("fleet"), ::OpenAPI::toJsonValue(m_fleet));
    }
    if (m_robot_isSet) {
        obj.insert(QString("robot"), ::OpenAPI::toJsonValue(m_robot));
    }
    return obj;
}

QString OAIDeregisterRobotRequest::getFleet() const {
    return m_fleet;
}
void OAIDeregisterRobotRequest::setFleet(const QString &fleet) {
    m_fleet = fleet;
    m_fleet_isSet = true;
}

bool OAIDeregisterRobotRequest::is_fleet_Set() const{
    return m_fleet_isSet;
}

bool OAIDeregisterRobotRequest::is_fleet_Valid() const{
    return m_fleet_isValid;
}

QString OAIDeregisterRobotRequest::getRobot() const {
    return m_robot;
}
void OAIDeregisterRobotRequest::setRobot(const QString &robot) {
    m_robot = robot;
    m_robot_isSet = true;
}

bool OAIDeregisterRobotRequest::is_robot_Set() const{
    return m_robot_isSet;
}

bool OAIDeregisterRobotRequest::is_robot_Valid() const{
    return m_robot_isValid;
}

bool OAIDeregisterRobotRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fleet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeregisterRobotRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fleet_isValid && m_robot_isValid && true;
}

} // namespace OpenAPI
