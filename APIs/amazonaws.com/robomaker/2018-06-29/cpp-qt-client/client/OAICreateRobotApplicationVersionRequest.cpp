/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRobotApplicationVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRobotApplicationVersionRequest::OAICreateRobotApplicationVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRobotApplicationVersionRequest::OAICreateRobotApplicationVersionRequest() {
    this->initializeModel();
}

OAICreateRobotApplicationVersionRequest::~OAICreateRobotApplicationVersionRequest() {}

void OAICreateRobotApplicationVersionRequest::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_current_revision_id_isSet = false;
    m_current_revision_id_isValid = false;

    m_s3_etags_isSet = false;
    m_s3_etags_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;
}

void OAICreateRobotApplicationVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRobotApplicationVersionRequest::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_current_revision_id_isValid = ::OpenAPI::fromJsonValue(m_current_revision_id, json[QString("currentRevisionId")]);
    m_current_revision_id_isSet = !json[QString("currentRevisionId")].isNull() && m_current_revision_id_isValid;

    m_s3_etags_isValid = ::OpenAPI::fromJsonValue(m_s3_etags, json[QString("s3Etags")]);
    m_s3_etags_isSet = !json[QString("s3Etags")].isNull() && m_s3_etags_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;
}

QString OAICreateRobotApplicationVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRobotApplicationVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_isSet) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_current_revision_id_isSet) {
        obj.insert(QString("currentRevisionId"), ::OpenAPI::toJsonValue(m_current_revision_id));
    }
    if (m_s3_etags.isSet()) {
        obj.insert(QString("s3Etags"), ::OpenAPI::toJsonValue(m_s3_etags));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    return obj;
}

QString OAICreateRobotApplicationVersionRequest::getApplication() const {
    return m_application;
}
void OAICreateRobotApplicationVersionRequest::setApplication(const QString &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAICreateRobotApplicationVersionRequest::is_application_Set() const{
    return m_application_isSet;
}

bool OAICreateRobotApplicationVersionRequest::is_application_Valid() const{
    return m_application_isValid;
}

QString OAICreateRobotApplicationVersionRequest::getCurrentRevisionId() const {
    return m_current_revision_id;
}
void OAICreateRobotApplicationVersionRequest::setCurrentRevisionId(const QString &current_revision_id) {
    m_current_revision_id = current_revision_id;
    m_current_revision_id_isSet = true;
}

bool OAICreateRobotApplicationVersionRequest::is_current_revision_id_Set() const{
    return m_current_revision_id_isSet;
}

bool OAICreateRobotApplicationVersionRequest::is_current_revision_id_Valid() const{
    return m_current_revision_id_isValid;
}

QList OAICreateRobotApplicationVersionRequest::getS3Etags() const {
    return m_s3_etags;
}
void OAICreateRobotApplicationVersionRequest::setS3Etags(const QList &s3_etags) {
    m_s3_etags = s3_etags;
    m_s3_etags_isSet = true;
}

bool OAICreateRobotApplicationVersionRequest::is_s3_etags_Set() const{
    return m_s3_etags_isSet;
}

bool OAICreateRobotApplicationVersionRequest::is_s3_etags_Valid() const{
    return m_s3_etags_isValid;
}

QString OAICreateRobotApplicationVersionRequest::getImageDigest() const {
    return m_image_digest;
}
void OAICreateRobotApplicationVersionRequest::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAICreateRobotApplicationVersionRequest::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAICreateRobotApplicationVersionRequest::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

bool OAICreateRobotApplicationVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_etags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRobotApplicationVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_isValid && true;
}

} // namespace OpenAPI
