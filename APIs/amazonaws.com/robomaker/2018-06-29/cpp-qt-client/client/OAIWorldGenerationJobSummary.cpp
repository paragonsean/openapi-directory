/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorldGenerationJobSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorldGenerationJobSummary::OAIWorldGenerationJobSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorldGenerationJobSummary::OAIWorldGenerationJobSummary() {
    this->initializeModel();
}

OAIWorldGenerationJobSummary::~OAIWorldGenerationJobSummary() {}

void OAIWorldGenerationJobSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_world_count_isSet = false;
    m_world_count_isValid = false;

    m_succeeded_world_count_isSet = false;
    m_succeeded_world_count_isValid = false;

    m_failed_world_count_isSet = false;
    m_failed_world_count_isValid = false;
}

void OAIWorldGenerationJobSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorldGenerationJobSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_world_count_isValid = ::OpenAPI::fromJsonValue(m_world_count, json[QString("worldCount")]);
    m_world_count_isSet = !json[QString("worldCount")].isNull() && m_world_count_isValid;

    m_succeeded_world_count_isValid = ::OpenAPI::fromJsonValue(m_succeeded_world_count, json[QString("succeededWorldCount")]);
    m_succeeded_world_count_isSet = !json[QString("succeededWorldCount")].isNull() && m_succeeded_world_count_isValid;

    m_failed_world_count_isValid = ::OpenAPI::fromJsonValue(m_failed_world_count, json[QString("failedWorldCount")]);
    m_failed_world_count_isSet = !json[QString("failedWorldCount")].isNull() && m_failed_world_count_isValid;
}

QString OAIWorldGenerationJobSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorldGenerationJobSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_world_count.isSet()) {
        obj.insert(QString("worldCount"), ::OpenAPI::toJsonValue(m_world_count));
    }
    if (m_succeeded_world_count_isSet) {
        obj.insert(QString("succeededWorldCount"), ::OpenAPI::toJsonValue(m_succeeded_world_count));
    }
    if (m_failed_world_count_isSet) {
        obj.insert(QString("failedWorldCount"), ::OpenAPI::toJsonValue(m_failed_world_count));
    }
    return obj;
}

QString OAIWorldGenerationJobSummary::getArn() const {
    return m_arn;
}
void OAIWorldGenerationJobSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIWorldGenerationJobSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIWorldGenerationJobSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIWorldGenerationJobSummary::getRTemplate() const {
    return m_r_template;
}
void OAIWorldGenerationJobSummary::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIWorldGenerationJobSummary::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIWorldGenerationJobSummary::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QDateTime OAIWorldGenerationJobSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIWorldGenerationJobSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWorldGenerationJobSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWorldGenerationJobSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIWorldGenerationJobStatus OAIWorldGenerationJobSummary::getStatus() const {
    return m_status;
}
void OAIWorldGenerationJobSummary::setStatus(const OAIWorldGenerationJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWorldGenerationJobSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWorldGenerationJobSummary::is_status_Valid() const{
    return m_status_isValid;
}

OAIDescribeWorldGenerationJobResponse_worldCount OAIWorldGenerationJobSummary::getWorldCount() const {
    return m_world_count;
}
void OAIWorldGenerationJobSummary::setWorldCount(const OAIDescribeWorldGenerationJobResponse_worldCount &world_count) {
    m_world_count = world_count;
    m_world_count_isSet = true;
}

bool OAIWorldGenerationJobSummary::is_world_count_Set() const{
    return m_world_count_isSet;
}

bool OAIWorldGenerationJobSummary::is_world_count_Valid() const{
    return m_world_count_isValid;
}

qint32 OAIWorldGenerationJobSummary::getSucceededWorldCount() const {
    return m_succeeded_world_count;
}
void OAIWorldGenerationJobSummary::setSucceededWorldCount(const qint32 &succeeded_world_count) {
    m_succeeded_world_count = succeeded_world_count;
    m_succeeded_world_count_isSet = true;
}

bool OAIWorldGenerationJobSummary::is_succeeded_world_count_Set() const{
    return m_succeeded_world_count_isSet;
}

bool OAIWorldGenerationJobSummary::is_succeeded_world_count_Valid() const{
    return m_succeeded_world_count_isValid;
}

qint32 OAIWorldGenerationJobSummary::getFailedWorldCount() const {
    return m_failed_world_count;
}
void OAIWorldGenerationJobSummary::setFailedWorldCount(const qint32 &failed_world_count) {
    m_failed_world_count = failed_world_count;
    m_failed_world_count_isSet = true;
}

bool OAIWorldGenerationJobSummary::is_failed_world_count_Set() const{
    return m_failed_world_count_isSet;
}

bool OAIWorldGenerationJobSummary::is_failed_world_count_Valid() const{
    return m_failed_world_count_isValid;
}

bool OAIWorldGenerationJobSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_world_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_world_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_world_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorldGenerationJobSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
