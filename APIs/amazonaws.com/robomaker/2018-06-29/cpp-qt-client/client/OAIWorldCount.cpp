/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorldCount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorldCount::OAIWorldCount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorldCount::OAIWorldCount() {
    this->initializeModel();
}

OAIWorldCount::~OAIWorldCount() {}

void OAIWorldCount::initializeModel() {

    m_floorplan_count_isSet = false;
    m_floorplan_count_isValid = false;

    m_interior_count_per_floorplan_isSet = false;
    m_interior_count_per_floorplan_isValid = false;
}

void OAIWorldCount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorldCount::fromJsonObject(QJsonObject json) {

    m_floorplan_count_isValid = ::OpenAPI::fromJsonValue(m_floorplan_count, json[QString("floorplanCount")]);
    m_floorplan_count_isSet = !json[QString("floorplanCount")].isNull() && m_floorplan_count_isValid;

    m_interior_count_per_floorplan_isValid = ::OpenAPI::fromJsonValue(m_interior_count_per_floorplan, json[QString("interiorCountPerFloorplan")]);
    m_interior_count_per_floorplan_isSet = !json[QString("interiorCountPerFloorplan")].isNull() && m_interior_count_per_floorplan_isValid;
}

QString OAIWorldCount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorldCount::asJsonObject() const {
    QJsonObject obj;
    if (m_floorplan_count_isSet) {
        obj.insert(QString("floorplanCount"), ::OpenAPI::toJsonValue(m_floorplan_count));
    }
    if (m_interior_count_per_floorplan_isSet) {
        obj.insert(QString("interiorCountPerFloorplan"), ::OpenAPI::toJsonValue(m_interior_count_per_floorplan));
    }
    return obj;
}

qint32 OAIWorldCount::getFloorplanCount() const {
    return m_floorplan_count;
}
void OAIWorldCount::setFloorplanCount(const qint32 &floorplan_count) {
    m_floorplan_count = floorplan_count;
    m_floorplan_count_isSet = true;
}

bool OAIWorldCount::is_floorplan_count_Set() const{
    return m_floorplan_count_isSet;
}

bool OAIWorldCount::is_floorplan_count_Valid() const{
    return m_floorplan_count_isValid;
}

qint32 OAIWorldCount::getInteriorCountPerFloorplan() const {
    return m_interior_count_per_floorplan;
}
void OAIWorldCount::setInteriorCountPerFloorplan(const qint32 &interior_count_per_floorplan) {
    m_interior_count_per_floorplan = interior_count_per_floorplan;
    m_interior_count_per_floorplan_isSet = true;
}

bool OAIWorldCount::is_interior_count_per_floorplan_Set() const{
    return m_interior_count_per_floorplan_isSet;
}

bool OAIWorldCount::is_interior_count_per_floorplan_Valid() const{
    return m_interior_count_per_floorplan_isValid;
}

bool OAIWorldCount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_floorplan_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interior_count_per_floorplan_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorldCount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
