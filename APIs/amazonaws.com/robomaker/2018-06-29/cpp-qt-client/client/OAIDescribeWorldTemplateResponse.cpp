/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeWorldTemplateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeWorldTemplateResponse::OAIDescribeWorldTemplateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeWorldTemplateResponse::OAIDescribeWorldTemplateResponse() {
    this->initializeModel();
}

OAIDescribeWorldTemplateResponse::~OAIDescribeWorldTemplateResponse() {}

void OAIDescribeWorldTemplateResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDescribeWorldTemplateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeWorldTemplateResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIDescribeWorldTemplateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeWorldTemplateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIDescribeWorldTemplateResponse::getArn() const {
    return m_arn;
}
void OAIDescribeWorldTemplateResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeWorldTemplateResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeWorldTemplateResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeWorldTemplateResponse::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIDescribeWorldTemplateResponse::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIDescribeWorldTemplateResponse::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIDescribeWorldTemplateResponse::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAIDescribeWorldTemplateResponse::getName() const {
    return m_name;
}
void OAIDescribeWorldTemplateResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeWorldTemplateResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeWorldTemplateResponse::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIDescribeWorldTemplateResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeWorldTemplateResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeWorldTemplateResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeWorldTemplateResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIDescribeWorldTemplateResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIDescribeWorldTemplateResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIDescribeWorldTemplateResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIDescribeWorldTemplateResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QMap OAIDescribeWorldTemplateResponse::getTags() const {
    return m_tags;
}
void OAIDescribeWorldTemplateResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeWorldTemplateResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeWorldTemplateResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIDescribeWorldTemplateResponse::getVersion() const {
    return m_version;
}
void OAIDescribeWorldTemplateResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDescribeWorldTemplateResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDescribeWorldTemplateResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDescribeWorldTemplateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeWorldTemplateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
