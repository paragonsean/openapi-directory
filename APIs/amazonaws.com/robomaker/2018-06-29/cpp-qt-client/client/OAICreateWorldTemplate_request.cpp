/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWorldTemplate_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWorldTemplate_request::OAICreateWorldTemplate_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWorldTemplate_request::OAICreateWorldTemplate_request() {
    this->initializeModel();
}

OAICreateWorldTemplate_request::~OAICreateWorldTemplate_request() {}

void OAICreateWorldTemplate_request::initializeModel() {

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_template_body_isSet = false;
    m_template_body_isValid = false;

    m_template_location_isSet = false;
    m_template_location_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateWorldTemplate_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWorldTemplate_request::fromJsonObject(QJsonObject json) {

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_template_body_isValid = ::OpenAPI::fromJsonValue(m_template_body, json[QString("templateBody")]);
    m_template_body_isSet = !json[QString("templateBody")].isNull() && m_template_body_isValid;

    m_template_location_isValid = ::OpenAPI::fromJsonValue(m_template_location, json[QString("templateLocation")]);
    m_template_location_isSet = !json[QString("templateLocation")].isNull() && m_template_location_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateWorldTemplate_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWorldTemplate_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_template_body_isSet) {
        obj.insert(QString("templateBody"), ::OpenAPI::toJsonValue(m_template_body));
    }
    if (m_template_location.isSet()) {
        obj.insert(QString("templateLocation"), ::OpenAPI::toJsonValue(m_template_location));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateWorldTemplate_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateWorldTemplate_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateWorldTemplate_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateWorldTemplate_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAICreateWorldTemplate_request::getName() const {
    return m_name;
}
void OAICreateWorldTemplate_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateWorldTemplate_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateWorldTemplate_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateWorldTemplate_request::getTemplateBody() const {
    return m_template_body;
}
void OAICreateWorldTemplate_request::setTemplateBody(const QString &template_body) {
    m_template_body = template_body;
    m_template_body_isSet = true;
}

bool OAICreateWorldTemplate_request::is_template_body_Set() const{
    return m_template_body_isSet;
}

bool OAICreateWorldTemplate_request::is_template_body_Valid() const{
    return m_template_body_isValid;
}

OAICreateWorldTemplate_request_templateLocation OAICreateWorldTemplate_request::getTemplateLocation() const {
    return m_template_location;
}
void OAICreateWorldTemplate_request::setTemplateLocation(const OAICreateWorldTemplate_request_templateLocation &template_location) {
    m_template_location = template_location;
    m_template_location_isSet = true;
}

bool OAICreateWorldTemplate_request::is_template_location_Set() const{
    return m_template_location_isSet;
}

bool OAICreateWorldTemplate_request::is_template_location_Valid() const{
    return m_template_location_isValid;
}

QMap<QString, QString> OAICreateWorldTemplate_request::getTags() const {
    return m_tags;
}
void OAICreateWorldTemplate_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateWorldTemplate_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateWorldTemplate_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateWorldTemplate_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWorldTemplate_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
