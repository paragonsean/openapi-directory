/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimulationJobSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimulationJobSummary::OAISimulationJobSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimulationJobSummary::OAISimulationJobSummary() {
    this->initializeModel();
}

OAISimulationJobSummary::~OAISimulationJobSummary() {}

void OAISimulationJobSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_simulation_application_names_isSet = false;
    m_simulation_application_names_isValid = false;

    m_robot_application_names_isSet = false;
    m_robot_application_names_isValid = false;

    m_data_source_names_isSet = false;
    m_data_source_names_isValid = false;

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;
}

void OAISimulationJobSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimulationJobSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_simulation_application_names_isValid = ::OpenAPI::fromJsonValue(m_simulation_application_names, json[QString("simulationApplicationNames")]);
    m_simulation_application_names_isSet = !json[QString("simulationApplicationNames")].isNull() && m_simulation_application_names_isValid;

    m_robot_application_names_isValid = ::OpenAPI::fromJsonValue(m_robot_application_names, json[QString("robotApplicationNames")]);
    m_robot_application_names_isSet = !json[QString("robotApplicationNames")].isNull() && m_robot_application_names_isValid;

    m_data_source_names_isValid = ::OpenAPI::fromJsonValue(m_data_source_names, json[QString("dataSourceNames")]);
    m_data_source_names_isSet = !json[QString("dataSourceNames")].isNull() && m_data_source_names_isValid;

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("computeType")]);
    m_compute_type_isSet = !json[QString("computeType")].isNull() && m_compute_type_isValid;
}

QString OAISimulationJobSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimulationJobSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_simulation_application_names.isSet()) {
        obj.insert(QString("simulationApplicationNames"), ::OpenAPI::toJsonValue(m_simulation_application_names));
    }
    if (m_robot_application_names.isSet()) {
        obj.insert(QString("robotApplicationNames"), ::OpenAPI::toJsonValue(m_robot_application_names));
    }
    if (m_data_source_names.isSet()) {
        obj.insert(QString("dataSourceNames"), ::OpenAPI::toJsonValue(m_data_source_names));
    }
    if (m_compute_type.isSet()) {
        obj.insert(QString("computeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    return obj;
}

QString OAISimulationJobSummary::getArn() const {
    return m_arn;
}
void OAISimulationJobSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAISimulationJobSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAISimulationJobSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAISimulationJobSummary::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAISimulationJobSummary::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAISimulationJobSummary::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAISimulationJobSummary::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAISimulationJobSummary::getName() const {
    return m_name;
}
void OAISimulationJobSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISimulationJobSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAISimulationJobSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAISimulationJobStatus OAISimulationJobSummary::getStatus() const {
    return m_status;
}
void OAISimulationJobSummary::setStatus(const OAISimulationJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISimulationJobSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAISimulationJobSummary::is_status_Valid() const{
    return m_status_isValid;
}

QList OAISimulationJobSummary::getSimulationApplicationNames() const {
    return m_simulation_application_names;
}
void OAISimulationJobSummary::setSimulationApplicationNames(const QList &simulation_application_names) {
    m_simulation_application_names = simulation_application_names;
    m_simulation_application_names_isSet = true;
}

bool OAISimulationJobSummary::is_simulation_application_names_Set() const{
    return m_simulation_application_names_isSet;
}

bool OAISimulationJobSummary::is_simulation_application_names_Valid() const{
    return m_simulation_application_names_isValid;
}

QList OAISimulationJobSummary::getRobotApplicationNames() const {
    return m_robot_application_names;
}
void OAISimulationJobSummary::setRobotApplicationNames(const QList &robot_application_names) {
    m_robot_application_names = robot_application_names;
    m_robot_application_names_isSet = true;
}

bool OAISimulationJobSummary::is_robot_application_names_Set() const{
    return m_robot_application_names_isSet;
}

bool OAISimulationJobSummary::is_robot_application_names_Valid() const{
    return m_robot_application_names_isValid;
}

QList OAISimulationJobSummary::getDataSourceNames() const {
    return m_data_source_names;
}
void OAISimulationJobSummary::setDataSourceNames(const QList &data_source_names) {
    m_data_source_names = data_source_names;
    m_data_source_names_isSet = true;
}

bool OAISimulationJobSummary::is_data_source_names_Set() const{
    return m_data_source_names_isSet;
}

bool OAISimulationJobSummary::is_data_source_names_Valid() const{
    return m_data_source_names_isValid;
}

OAIComputeType OAISimulationJobSummary::getComputeType() const {
    return m_compute_type;
}
void OAISimulationJobSummary::setComputeType(const OAIComputeType &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAISimulationJobSummary::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAISimulationJobSummary::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

bool OAISimulationJobSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulation_application_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot_application_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimulationJobSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
