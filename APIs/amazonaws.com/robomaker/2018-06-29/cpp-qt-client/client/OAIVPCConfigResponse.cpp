/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVPCConfigResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVPCConfigResponse::OAIVPCConfigResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVPCConfigResponse::OAIVPCConfigResponse() {
    this->initializeModel();
}

OAIVPCConfigResponse::~OAIVPCConfigResponse() {}

void OAIVPCConfigResponse::initializeModel() {

    m_subnets_isSet = false;
    m_subnets_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_assign_public_ip_isSet = false;
    m_assign_public_ip_isValid = false;
}

void OAIVPCConfigResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVPCConfigResponse::fromJsonObject(QJsonObject json) {

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("subnets")]);
    m_subnets_isSet = !json[QString("subnets")].isNull() && m_subnets_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("securityGroups")]);
    m_security_groups_isSet = !json[QString("securityGroups")].isNull() && m_security_groups_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("vpcId")]);
    m_vpc_id_isSet = !json[QString("vpcId")].isNull() && m_vpc_id_isValid;

    m_assign_public_ip_isValid = ::OpenAPI::fromJsonValue(m_assign_public_ip, json[QString("assignPublicIp")]);
    m_assign_public_ip_isSet = !json[QString("assignPublicIp")].isNull() && m_assign_public_ip_isValid;
}

QString OAIVPCConfigResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVPCConfigResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_subnets.isSet()) {
        obj.insert(QString("subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("securityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("vpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_assign_public_ip_isSet) {
        obj.insert(QString("assignPublicIp"), ::OpenAPI::toJsonValue(m_assign_public_ip));
    }
    return obj;
}

QList OAIVPCConfigResponse::getSubnets() const {
    return m_subnets;
}
void OAIVPCConfigResponse::setSubnets(const QList &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAIVPCConfigResponse::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAIVPCConfigResponse::is_subnets_Valid() const{
    return m_subnets_isValid;
}

QList OAIVPCConfigResponse::getSecurityGroups() const {
    return m_security_groups;
}
void OAIVPCConfigResponse::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAIVPCConfigResponse::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAIVPCConfigResponse::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

QString OAIVPCConfigResponse::getVpcId() const {
    return m_vpc_id;
}
void OAIVPCConfigResponse::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIVPCConfigResponse::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIVPCConfigResponse::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAIVPCConfigResponse::getAssignPublicIp() const {
    return m_assign_public_ip;
}
void OAIVPCConfigResponse::setAssignPublicIp(const bool &assign_public_ip) {
    m_assign_public_ip = assign_public_ip;
    m_assign_public_ip_isSet = true;
}

bool OAIVPCConfigResponse::is_assign_public_ip_Set() const{
    return m_assign_public_ip_isSet;
}

bool OAIVPCConfigResponse::is_assign_public_ip_Valid() const{
    return m_assign_public_ip_isValid;
}

bool OAIVPCConfigResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subnets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assign_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVPCConfigResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
