/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeWorldResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeWorldResponse::OAIDescribeWorldResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeWorldResponse::OAIDescribeWorldResponse() {
    this->initializeModel();
}

OAIDescribeWorldResponse::~OAIDescribeWorldResponse() {}

void OAIDescribeWorldResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_generation_job_isSet = false;
    m_generation_job_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_world_description_body_isSet = false;
    m_world_description_body_isValid = false;
}

void OAIDescribeWorldResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeWorldResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_generation_job_isValid = ::OpenAPI::fromJsonValue(m_generation_job, json[QString("generationJob")]);
    m_generation_job_isSet = !json[QString("generationJob")].isNull() && m_generation_job_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_world_description_body_isValid = ::OpenAPI::fromJsonValue(m_world_description_body, json[QString("worldDescriptionBody")]);
    m_world_description_body_isSet = !json[QString("worldDescriptionBody")].isNull() && m_world_description_body_isValid;
}

QString OAIDescribeWorldResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeWorldResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_generation_job_isSet) {
        obj.insert(QString("generationJob"), ::OpenAPI::toJsonValue(m_generation_job));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_world_description_body_isSet) {
        obj.insert(QString("worldDescriptionBody"), ::OpenAPI::toJsonValue(m_world_description_body));
    }
    return obj;
}

QString OAIDescribeWorldResponse::getArn() const {
    return m_arn;
}
void OAIDescribeWorldResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeWorldResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeWorldResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeWorldResponse::getGenerationJob() const {
    return m_generation_job;
}
void OAIDescribeWorldResponse::setGenerationJob(const QString &generation_job) {
    m_generation_job = generation_job;
    m_generation_job_isSet = true;
}

bool OAIDescribeWorldResponse::is_generation_job_Set() const{
    return m_generation_job_isSet;
}

bool OAIDescribeWorldResponse::is_generation_job_Valid() const{
    return m_generation_job_isValid;
}

QString OAIDescribeWorldResponse::getRTemplate() const {
    return m_r_template;
}
void OAIDescribeWorldResponse::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIDescribeWorldResponse::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIDescribeWorldResponse::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QDateTime OAIDescribeWorldResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeWorldResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeWorldResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeWorldResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QMap OAIDescribeWorldResponse::getTags() const {
    return m_tags;
}
void OAIDescribeWorldResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeWorldResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeWorldResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIDescribeWorldResponse::getWorldDescriptionBody() const {
    return m_world_description_body;
}
void OAIDescribeWorldResponse::setWorldDescriptionBody(const QString &world_description_body) {
    m_world_description_body = world_description_body;
    m_world_description_body_isSet = true;
}

bool OAIDescribeWorldResponse::is_world_description_body_Set() const{
    return m_world_description_body_isSet;
}

bool OAIDescribeWorldResponse::is_world_description_body_Valid() const{
    return m_world_description_body_isValid;
}

bool OAIDescribeWorldResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_world_description_body_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeWorldResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
