/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartSimulationJobBatchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartSimulationJobBatchResponse::OAIStartSimulationJobBatchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartSimulationJobBatchResponse::OAIStartSimulationJobBatchResponse() {
    this->initializeModel();
}

OAIStartSimulationJobBatchResponse::~OAIStartSimulationJobBatchResponse() {}

void OAIStartSimulationJobBatchResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_batch_policy_isSet = false;
    m_batch_policy_isValid = false;

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_failed_requests_isSet = false;
    m_failed_requests_isValid = false;

    m_pending_requests_isSet = false;
    m_pending_requests_isValid = false;

    m_created_requests_isSet = false;
    m_created_requests_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIStartSimulationJobBatchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartSimulationJobBatchResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_batch_policy_isValid = ::OpenAPI::fromJsonValue(m_batch_policy, json[QString("batchPolicy")]);
    m_batch_policy_isSet = !json[QString("batchPolicy")].isNull() && m_batch_policy_isValid;

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("failureCode")]);
    m_failure_code_isSet = !json[QString("failureCode")].isNull() && m_failure_code_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_failed_requests_isValid = ::OpenAPI::fromJsonValue(m_failed_requests, json[QString("failedRequests")]);
    m_failed_requests_isSet = !json[QString("failedRequests")].isNull() && m_failed_requests_isValid;

    m_pending_requests_isValid = ::OpenAPI::fromJsonValue(m_pending_requests, json[QString("pendingRequests")]);
    m_pending_requests_isSet = !json[QString("pendingRequests")].isNull() && m_pending_requests_isValid;

    m_created_requests_isValid = ::OpenAPI::fromJsonValue(m_created_requests, json[QString("createdRequests")]);
    m_created_requests_isSet = !json[QString("createdRequests")].isNull() && m_created_requests_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIStartSimulationJobBatchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartSimulationJobBatchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_batch_policy.isSet()) {
        obj.insert(QString("batchPolicy"), ::OpenAPI::toJsonValue(m_batch_policy));
    }
    if (m_failure_code.isSet()) {
        obj.insert(QString("failureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_failed_requests.isSet()) {
        obj.insert(QString("failedRequests"), ::OpenAPI::toJsonValue(m_failed_requests));
    }
    if (m_pending_requests.isSet()) {
        obj.insert(QString("pendingRequests"), ::OpenAPI::toJsonValue(m_pending_requests));
    }
    if (m_created_requests.isSet()) {
        obj.insert(QString("createdRequests"), ::OpenAPI::toJsonValue(m_created_requests));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIStartSimulationJobBatchResponse::getArn() const {
    return m_arn;
}
void OAIStartSimulationJobBatchResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIStartSimulationJobBatchResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIStartSimulationJobBatchResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

OAISimulationJobBatchStatus OAIStartSimulationJobBatchResponse::getStatus() const {
    return m_status;
}
void OAIStartSimulationJobBatchResponse::setStatus(const OAISimulationJobBatchStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStartSimulationJobBatchResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStartSimulationJobBatchResponse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIStartSimulationJobBatchResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIStartSimulationJobBatchResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStartSimulationJobBatchResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStartSimulationJobBatchResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIStartSimulationJobBatchResponse::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIStartSimulationJobBatchResponse::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIStartSimulationJobBatchResponse::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIStartSimulationJobBatchResponse::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

OAIDescribeSimulationJobBatchResponse_batchPolicy OAIStartSimulationJobBatchResponse::getBatchPolicy() const {
    return m_batch_policy;
}
void OAIStartSimulationJobBatchResponse::setBatchPolicy(const OAIDescribeSimulationJobBatchResponse_batchPolicy &batch_policy) {
    m_batch_policy = batch_policy;
    m_batch_policy_isSet = true;
}

bool OAIStartSimulationJobBatchResponse::is_batch_policy_Set() const{
    return m_batch_policy_isSet;
}

bool OAIStartSimulationJobBatchResponse::is_batch_policy_Valid() const{
    return m_batch_policy_isValid;
}

OAISimulationJobBatchErrorCode OAIStartSimulationJobBatchResponse::getFailureCode() const {
    return m_failure_code;
}
void OAIStartSimulationJobBatchResponse::setFailureCode(const OAISimulationJobBatchErrorCode &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAIStartSimulationJobBatchResponse::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAIStartSimulationJobBatchResponse::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QString OAIStartSimulationJobBatchResponse::getFailureReason() const {
    return m_failure_reason;
}
void OAIStartSimulationJobBatchResponse::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIStartSimulationJobBatchResponse::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIStartSimulationJobBatchResponse::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QList OAIStartSimulationJobBatchResponse::getFailedRequests() const {
    return m_failed_requests;
}
void OAIStartSimulationJobBatchResponse::setFailedRequests(const QList &failed_requests) {
    m_failed_requests = failed_requests;
    m_failed_requests_isSet = true;
}

bool OAIStartSimulationJobBatchResponse::is_failed_requests_Set() const{
    return m_failed_requests_isSet;
}

bool OAIStartSimulationJobBatchResponse::is_failed_requests_Valid() const{
    return m_failed_requests_isValid;
}

QList OAIStartSimulationJobBatchResponse::getPendingRequests() const {
    return m_pending_requests;
}
void OAIStartSimulationJobBatchResponse::setPendingRequests(const QList &pending_requests) {
    m_pending_requests = pending_requests;
    m_pending_requests_isSet = true;
}

bool OAIStartSimulationJobBatchResponse::is_pending_requests_Set() const{
    return m_pending_requests_isSet;
}

bool OAIStartSimulationJobBatchResponse::is_pending_requests_Valid() const{
    return m_pending_requests_isValid;
}

QList OAIStartSimulationJobBatchResponse::getCreatedRequests() const {
    return m_created_requests;
}
void OAIStartSimulationJobBatchResponse::setCreatedRequests(const QList &created_requests) {
    m_created_requests = created_requests;
    m_created_requests_isSet = true;
}

bool OAIStartSimulationJobBatchResponse::is_created_requests_Set() const{
    return m_created_requests_isSet;
}

bool OAIStartSimulationJobBatchResponse::is_created_requests_Valid() const{
    return m_created_requests_isValid;
}

QMap OAIStartSimulationJobBatchResponse::getTags() const {
    return m_tags;
}
void OAIStartSimulationJobBatchResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartSimulationJobBatchResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartSimulationJobBatchResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIStartSimulationJobBatchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartSimulationJobBatchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
