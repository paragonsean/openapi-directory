/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimulationJob_compute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimulationJob_compute::OAISimulationJob_compute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimulationJob_compute::OAISimulationJob_compute() {
    this->initializeModel();
}

OAISimulationJob_compute::~OAISimulationJob_compute() {}

void OAISimulationJob_compute::initializeModel() {

    m_simulation_unit_limit_isSet = false;
    m_simulation_unit_limit_isValid = false;

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_gpu_unit_limit_isSet = false;
    m_gpu_unit_limit_isValid = false;
}

void OAISimulationJob_compute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimulationJob_compute::fromJsonObject(QJsonObject json) {

    m_simulation_unit_limit_isValid = ::OpenAPI::fromJsonValue(m_simulation_unit_limit, json[QString("simulationUnitLimit")]);
    m_simulation_unit_limit_isSet = !json[QString("simulationUnitLimit")].isNull() && m_simulation_unit_limit_isValid;

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("computeType")]);
    m_compute_type_isSet = !json[QString("computeType")].isNull() && m_compute_type_isValid;

    m_gpu_unit_limit_isValid = ::OpenAPI::fromJsonValue(m_gpu_unit_limit, json[QString("gpuUnitLimit")]);
    m_gpu_unit_limit_isSet = !json[QString("gpuUnitLimit")].isNull() && m_gpu_unit_limit_isValid;
}

QString OAISimulationJob_compute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimulationJob_compute::asJsonObject() const {
    QJsonObject obj;
    if (m_simulation_unit_limit_isSet) {
        obj.insert(QString("simulationUnitLimit"), ::OpenAPI::toJsonValue(m_simulation_unit_limit));
    }
    if (m_compute_type.isSet()) {
        obj.insert(QString("computeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_gpu_unit_limit_isSet) {
        obj.insert(QString("gpuUnitLimit"), ::OpenAPI::toJsonValue(m_gpu_unit_limit));
    }
    return obj;
}

qint32 OAISimulationJob_compute::getSimulationUnitLimit() const {
    return m_simulation_unit_limit;
}
void OAISimulationJob_compute::setSimulationUnitLimit(const qint32 &simulation_unit_limit) {
    m_simulation_unit_limit = simulation_unit_limit;
    m_simulation_unit_limit_isSet = true;
}

bool OAISimulationJob_compute::is_simulation_unit_limit_Set() const{
    return m_simulation_unit_limit_isSet;
}

bool OAISimulationJob_compute::is_simulation_unit_limit_Valid() const{
    return m_simulation_unit_limit_isValid;
}

OAIComputeType OAISimulationJob_compute::getComputeType() const {
    return m_compute_type;
}
void OAISimulationJob_compute::setComputeType(const OAIComputeType &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAISimulationJob_compute::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAISimulationJob_compute::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

qint32 OAISimulationJob_compute::getGpuUnitLimit() const {
    return m_gpu_unit_limit;
}
void OAISimulationJob_compute::setGpuUnitLimit(const qint32 &gpu_unit_limit) {
    m_gpu_unit_limit = gpu_unit_limit;
    m_gpu_unit_limit_isSet = true;
}

bool OAISimulationJob_compute::is_gpu_unit_limit_Set() const{
    return m_gpu_unit_limit_isSet;
}

bool OAISimulationJob_compute::is_gpu_unit_limit_Valid() const{
    return m_gpu_unit_limit_isValid;
}

bool OAISimulationJob_compute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_simulation_unit_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpu_unit_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimulationJob_compute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
