/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRobotDeployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRobotDeployment::OAIRobotDeployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRobotDeployment::OAIRobotDeployment() {
    this->initializeModel();
}

OAIRobotDeployment::~OAIRobotDeployment() {}

void OAIRobotDeployment::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_deployment_start_time_isSet = false;
    m_deployment_start_time_isValid = false;

    m_deployment_finish_time_isSet = false;
    m_deployment_finish_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_progress_detail_isSet = false;
    m_progress_detail_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;
}

void OAIRobotDeployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRobotDeployment::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_deployment_start_time_isValid = ::OpenAPI::fromJsonValue(m_deployment_start_time, json[QString("deploymentStartTime")]);
    m_deployment_start_time_isSet = !json[QString("deploymentStartTime")].isNull() && m_deployment_start_time_isValid;

    m_deployment_finish_time_isValid = ::OpenAPI::fromJsonValue(m_deployment_finish_time, json[QString("deploymentFinishTime")]);
    m_deployment_finish_time_isSet = !json[QString("deploymentFinishTime")].isNull() && m_deployment_finish_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_progress_detail_isValid = ::OpenAPI::fromJsonValue(m_progress_detail, json[QString("progressDetail")]);
    m_progress_detail_isSet = !json[QString("progressDetail")].isNull() && m_progress_detail_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("failureCode")]);
    m_failure_code_isSet = !json[QString("failureCode")].isNull() && m_failure_code_isValid;
}

QString OAIRobotDeployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRobotDeployment::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_deployment_start_time_isSet) {
        obj.insert(QString("deploymentStartTime"), ::OpenAPI::toJsonValue(m_deployment_start_time));
    }
    if (m_deployment_finish_time_isSet) {
        obj.insert(QString("deploymentFinishTime"), ::OpenAPI::toJsonValue(m_deployment_finish_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_progress_detail.isSet()) {
        obj.insert(QString("progressDetail"), ::OpenAPI::toJsonValue(m_progress_detail));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_failure_code.isSet()) {
        obj.insert(QString("failureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    return obj;
}

QString OAIRobotDeployment::getArn() const {
    return m_arn;
}
void OAIRobotDeployment::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIRobotDeployment::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIRobotDeployment::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIRobotDeployment::getDeploymentStartTime() const {
    return m_deployment_start_time;
}
void OAIRobotDeployment::setDeploymentStartTime(const QDateTime &deployment_start_time) {
    m_deployment_start_time = deployment_start_time;
    m_deployment_start_time_isSet = true;
}

bool OAIRobotDeployment::is_deployment_start_time_Set() const{
    return m_deployment_start_time_isSet;
}

bool OAIRobotDeployment::is_deployment_start_time_Valid() const{
    return m_deployment_start_time_isValid;
}

QDateTime OAIRobotDeployment::getDeploymentFinishTime() const {
    return m_deployment_finish_time;
}
void OAIRobotDeployment::setDeploymentFinishTime(const QDateTime &deployment_finish_time) {
    m_deployment_finish_time = deployment_finish_time;
    m_deployment_finish_time_isSet = true;
}

bool OAIRobotDeployment::is_deployment_finish_time_Set() const{
    return m_deployment_finish_time_isSet;
}

bool OAIRobotDeployment::is_deployment_finish_time_Valid() const{
    return m_deployment_finish_time_isValid;
}

OAIRobotStatus OAIRobotDeployment::getStatus() const {
    return m_status;
}
void OAIRobotDeployment::setStatus(const OAIRobotStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRobotDeployment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRobotDeployment::is_status_Valid() const{
    return m_status_isValid;
}

OAIRobotDeployment_progressDetail OAIRobotDeployment::getProgressDetail() const {
    return m_progress_detail;
}
void OAIRobotDeployment::setProgressDetail(const OAIRobotDeployment_progressDetail &progress_detail) {
    m_progress_detail = progress_detail;
    m_progress_detail_isSet = true;
}

bool OAIRobotDeployment::is_progress_detail_Set() const{
    return m_progress_detail_isSet;
}

bool OAIRobotDeployment::is_progress_detail_Valid() const{
    return m_progress_detail_isValid;
}

QString OAIRobotDeployment::getFailureReason() const {
    return m_failure_reason;
}
void OAIRobotDeployment::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIRobotDeployment::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIRobotDeployment::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

OAIDeploymentJobErrorCode OAIRobotDeployment::getFailureCode() const {
    return m_failure_code;
}
void OAIRobotDeployment::setFailureCode(const OAIDeploymentJobErrorCode &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAIRobotDeployment::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAIRobotDeployment::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

bool OAIRobotDeployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_finish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRobotDeployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
