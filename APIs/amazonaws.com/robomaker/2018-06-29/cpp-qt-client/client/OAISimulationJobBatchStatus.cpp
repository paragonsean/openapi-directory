/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimulationJobBatchStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimulationJobBatchStatus::OAISimulationJobBatchStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimulationJobBatchStatus::OAISimulationJobBatchStatus() {
    this->initializeModel();
}

OAISimulationJobBatchStatus::~OAISimulationJobBatchStatus() {}

void OAISimulationJobBatchStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISimulationJobBatchStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISimulationJobBatchStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobBatchStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobBatchStatus::INPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobBatchStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Completed", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobBatchStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Canceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobBatchStatus::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Canceling", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobBatchStatus::CANCELING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Completing", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobBatchStatus::COMPLETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TimingOut", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobBatchStatus::TIMINGOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TimedOut", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobBatchStatus::TIMEDOUT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISimulationJobBatchStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISimulationJobBatchStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISimulationJobBatchStatus::PENDING:
            val = "Pending";
            break;
        case eOAISimulationJobBatchStatus::INPROGRESS:
            val = "InProgress";
            break;
        case eOAISimulationJobBatchStatus::FAILED:
            val = "Failed";
            break;
        case eOAISimulationJobBatchStatus::COMPLETED:
            val = "Completed";
            break;
        case eOAISimulationJobBatchStatus::CANCELED:
            val = "Canceled";
            break;
        case eOAISimulationJobBatchStatus::CANCELING:
            val = "Canceling";
            break;
        case eOAISimulationJobBatchStatus::COMPLETING:
            val = "Completing";
            break;
        case eOAISimulationJobBatchStatus::TIMINGOUT:
            val = "TimingOut";
            break;
        case eOAISimulationJobBatchStatus::TIMEDOUT:
            val = "TimedOut";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISimulationJobBatchStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISimulationJobBatchStatus::eOAISimulationJobBatchStatus OAISimulationJobBatchStatus::getValue() const {
    return m_value;
}

void OAISimulationJobBatchStatus::setValue(const OAISimulationJobBatchStatus::eOAISimulationJobBatchStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISimulationJobBatchStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAISimulationJobBatchStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
