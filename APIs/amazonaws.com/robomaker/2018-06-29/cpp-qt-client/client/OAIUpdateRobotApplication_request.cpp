/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRobotApplication_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRobotApplication_request::OAIUpdateRobotApplication_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRobotApplication_request::OAIUpdateRobotApplication_request() {
    this->initializeModel();
}

OAIUpdateRobotApplication_request::~OAIUpdateRobotApplication_request() {}

void OAIUpdateRobotApplication_request::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_robot_software_suite_isSet = false;
    m_robot_software_suite_isValid = false;

    m_current_revision_id_isSet = false;
    m_current_revision_id_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;
}

void OAIUpdateRobotApplication_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRobotApplication_request::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_robot_software_suite_isValid = ::OpenAPI::fromJsonValue(m_robot_software_suite, json[QString("robotSoftwareSuite")]);
    m_robot_software_suite_isSet = !json[QString("robotSoftwareSuite")].isNull() && m_robot_software_suite_isValid;

    m_current_revision_id_isValid = ::OpenAPI::fromJsonValue(m_current_revision_id, json[QString("currentRevisionId")]);
    m_current_revision_id_isSet = !json[QString("currentRevisionId")].isNull() && m_current_revision_id_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;
}

QString OAIUpdateRobotApplication_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRobotApplication_request::asJsonObject() const {
    QJsonObject obj;
    if (m_application_isSet) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_robot_software_suite.isSet()) {
        obj.insert(QString("robotSoftwareSuite"), ::OpenAPI::toJsonValue(m_robot_software_suite));
    }
    if (m_current_revision_id_isSet) {
        obj.insert(QString("currentRevisionId"), ::OpenAPI::toJsonValue(m_current_revision_id));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    return obj;
}

QString OAIUpdateRobotApplication_request::getApplication() const {
    return m_application;
}
void OAIUpdateRobotApplication_request::setApplication(const QString &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAIUpdateRobotApplication_request::is_application_Set() const{
    return m_application_isSet;
}

bool OAIUpdateRobotApplication_request::is_application_Valid() const{
    return m_application_isValid;
}

QList<OAISourceConfig> OAIUpdateRobotApplication_request::getSources() const {
    return m_sources;
}
void OAIUpdateRobotApplication_request::setSources(const QList<OAISourceConfig> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIUpdateRobotApplication_request::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIUpdateRobotApplication_request::is_sources_Valid() const{
    return m_sources_isValid;
}

OAICreateRobotApplication_request_robotSoftwareSuite OAIUpdateRobotApplication_request::getRobotSoftwareSuite() const {
    return m_robot_software_suite;
}
void OAIUpdateRobotApplication_request::setRobotSoftwareSuite(const OAICreateRobotApplication_request_robotSoftwareSuite &robot_software_suite) {
    m_robot_software_suite = robot_software_suite;
    m_robot_software_suite_isSet = true;
}

bool OAIUpdateRobotApplication_request::is_robot_software_suite_Set() const{
    return m_robot_software_suite_isSet;
}

bool OAIUpdateRobotApplication_request::is_robot_software_suite_Valid() const{
    return m_robot_software_suite_isValid;
}

QString OAIUpdateRobotApplication_request::getCurrentRevisionId() const {
    return m_current_revision_id;
}
void OAIUpdateRobotApplication_request::setCurrentRevisionId(const QString &current_revision_id) {
    m_current_revision_id = current_revision_id;
    m_current_revision_id_isSet = true;
}

bool OAIUpdateRobotApplication_request::is_current_revision_id_Set() const{
    return m_current_revision_id_isSet;
}

bool OAIUpdateRobotApplication_request::is_current_revision_id_Valid() const{
    return m_current_revision_id_isValid;
}

OAICreateRobotApplication_request_environment OAIUpdateRobotApplication_request::getEnvironment() const {
    return m_environment;
}
void OAIUpdateRobotApplication_request::setEnvironment(const OAICreateRobotApplication_request_environment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIUpdateRobotApplication_request::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIUpdateRobotApplication_request::is_environment_Valid() const{
    return m_environment_isValid;
}

bool OAIUpdateRobotApplication_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot_software_suite.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRobotApplication_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_isValid && m_robot_software_suite_isValid && true;
}

} // namespace OpenAPI
