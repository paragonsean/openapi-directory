/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimulationJobStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimulationJobStatus::OAISimulationJobStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimulationJobStatus::OAISimulationJobStatus() {
    this->initializeModel();
}

OAISimulationJobStatus::~OAISimulationJobStatus() {}

void OAISimulationJobStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISimulationJobStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISimulationJobStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Preparing", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobStatus::PREPARING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Running", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobStatus::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Restarting", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobStatus::RESTARTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Completed", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RunningFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobStatus::RUNNINGFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terminating", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobStatus::TERMINATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terminated", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobStatus::TERMINATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Canceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAISimulationJobStatus::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISimulationJobStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISimulationJobStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISimulationJobStatus::PENDING:
            val = "Pending";
            break;
        case eOAISimulationJobStatus::PREPARING:
            val = "Preparing";
            break;
        case eOAISimulationJobStatus::RUNNING:
            val = "Running";
            break;
        case eOAISimulationJobStatus::RESTARTING:
            val = "Restarting";
            break;
        case eOAISimulationJobStatus::COMPLETED:
            val = "Completed";
            break;
        case eOAISimulationJobStatus::FAILED:
            val = "Failed";
            break;
        case eOAISimulationJobStatus::RUNNINGFAILED:
            val = "RunningFailed";
            break;
        case eOAISimulationJobStatus::TERMINATING:
            val = "Terminating";
            break;
        case eOAISimulationJobStatus::TERMINATED:
            val = "Terminated";
            break;
        case eOAISimulationJobStatus::CANCELED:
            val = "Canceled";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISimulationJobStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISimulationJobStatus::eOAISimulationJobStatus OAISimulationJobStatus::getValue() const {
    return m_value;
}

void OAISimulationJobStatus::setValue(const OAISimulationJobStatus::eOAISimulationJobStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISimulationJobStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAISimulationJobStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
