/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDeploymentJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDeploymentJobResponse::OAICreateDeploymentJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDeploymentJobResponse::OAICreateDeploymentJobResponse() {
    this->initializeModel();
}

OAICreateDeploymentJobResponse::~OAICreateDeploymentJobResponse() {}

void OAICreateDeploymentJobResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_fleet_isSet = false;
    m_fleet_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_deployment_application_configs_isSet = false;
    m_deployment_application_configs_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deployment_config_isSet = false;
    m_deployment_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateDeploymentJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDeploymentJobResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_fleet_isValid = ::OpenAPI::fromJsonValue(m_fleet, json[QString("fleet")]);
    m_fleet_isSet = !json[QString("fleet")].isNull() && m_fleet_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_deployment_application_configs_isValid = ::OpenAPI::fromJsonValue(m_deployment_application_configs, json[QString("deploymentApplicationConfigs")]);
    m_deployment_application_configs_isSet = !json[QString("deploymentApplicationConfigs")].isNull() && m_deployment_application_configs_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("failureCode")]);
    m_failure_code_isSet = !json[QString("failureCode")].isNull() && m_failure_code_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_deployment_config_isValid = ::OpenAPI::fromJsonValue(m_deployment_config, json[QString("deploymentConfig")]);
    m_deployment_config_isSet = !json[QString("deploymentConfig")].isNull() && m_deployment_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateDeploymentJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDeploymentJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_fleet_isSet) {
        obj.insert(QString("fleet"), ::OpenAPI::toJsonValue(m_fleet));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_deployment_application_configs.isSet()) {
        obj.insert(QString("deploymentApplicationConfigs"), ::OpenAPI::toJsonValue(m_deployment_application_configs));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_failure_code.isSet()) {
        obj.insert(QString("failureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deployment_config.isSet()) {
        obj.insert(QString("deploymentConfig"), ::OpenAPI::toJsonValue(m_deployment_config));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateDeploymentJobResponse::getArn() const {
    return m_arn;
}
void OAICreateDeploymentJobResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateDeploymentJobResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateDeploymentJobResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateDeploymentJobResponse::getFleet() const {
    return m_fleet;
}
void OAICreateDeploymentJobResponse::setFleet(const QString &fleet) {
    m_fleet = fleet;
    m_fleet_isSet = true;
}

bool OAICreateDeploymentJobResponse::is_fleet_Set() const{
    return m_fleet_isSet;
}

bool OAICreateDeploymentJobResponse::is_fleet_Valid() const{
    return m_fleet_isValid;
}

OAIDeploymentStatus OAICreateDeploymentJobResponse::getStatus() const {
    return m_status;
}
void OAICreateDeploymentJobResponse::setStatus(const OAIDeploymentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateDeploymentJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateDeploymentJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

QList OAICreateDeploymentJobResponse::getDeploymentApplicationConfigs() const {
    return m_deployment_application_configs;
}
void OAICreateDeploymentJobResponse::setDeploymentApplicationConfigs(const QList &deployment_application_configs) {
    m_deployment_application_configs = deployment_application_configs;
    m_deployment_application_configs_isSet = true;
}

bool OAICreateDeploymentJobResponse::is_deployment_application_configs_Set() const{
    return m_deployment_application_configs_isSet;
}

bool OAICreateDeploymentJobResponse::is_deployment_application_configs_Valid() const{
    return m_deployment_application_configs_isValid;
}

QString OAICreateDeploymentJobResponse::getFailureReason() const {
    return m_failure_reason;
}
void OAICreateDeploymentJobResponse::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAICreateDeploymentJobResponse::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAICreateDeploymentJobResponse::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

OAIDeploymentJobErrorCode OAICreateDeploymentJobResponse::getFailureCode() const {
    return m_failure_code;
}
void OAICreateDeploymentJobResponse::setFailureCode(const OAIDeploymentJobErrorCode &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAICreateDeploymentJobResponse::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAICreateDeploymentJobResponse::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QDateTime OAICreateDeploymentJobResponse::getCreatedAt() const {
    return m_created_at;
}
void OAICreateDeploymentJobResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICreateDeploymentJobResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICreateDeploymentJobResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAICreateDeploymentJobResponse_deploymentConfig OAICreateDeploymentJobResponse::getDeploymentConfig() const {
    return m_deployment_config;
}
void OAICreateDeploymentJobResponse::setDeploymentConfig(const OAICreateDeploymentJobResponse_deploymentConfig &deployment_config) {
    m_deployment_config = deployment_config;
    m_deployment_config_isSet = true;
}

bool OAICreateDeploymentJobResponse::is_deployment_config_Set() const{
    return m_deployment_config_isSet;
}

bool OAICreateDeploymentJobResponse::is_deployment_config_Valid() const{
    return m_deployment_config_isValid;
}

QMap OAICreateDeploymentJobResponse::getTags() const {
    return m_tags;
}
void OAICreateDeploymentJobResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDeploymentJobResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDeploymentJobResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateDeploymentJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_application_configs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDeploymentJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
