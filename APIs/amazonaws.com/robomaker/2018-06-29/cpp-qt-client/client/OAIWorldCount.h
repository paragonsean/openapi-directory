/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorldCount.h
 *
 * &lt;p&gt;The number of worlds that will be created. You can configure the number of unique floorplans and the number of unique interiors for each floor plan. For example, if you want 1 world with 20 unique interiors, you set &lt;code&gt;floorplanCount &#x3D; 1&lt;/code&gt; and &lt;code&gt;interiorCountPerFloorplan &#x3D; 20&lt;/code&gt;. This will result in 20 worlds (&lt;code&gt;floorplanCount&lt;/code&gt; * &lt;code&gt;interiorCountPerFloorplan)&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;If you set &lt;code&gt;floorplanCount &#x3D; 4&lt;/code&gt; and &lt;code&gt;interiorCountPerFloorplan &#x3D; 5&lt;/code&gt;, there will be 20 worlds with 5 unique floor plans. &lt;/p&gt;
 */

#ifndef OAIWorldCount_H
#define OAIWorldCount_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWorldCount : public OAIObject {
public:
    OAIWorldCount();
    OAIWorldCount(QString json);
    ~OAIWorldCount() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getFloorplanCount() const;
    void setFloorplanCount(const qint32 &floorplan_count);
    bool is_floorplan_count_Set() const;
    bool is_floorplan_count_Valid() const;

    qint32 getInteriorCountPerFloorplan() const;
    void setInteriorCountPerFloorplan(const qint32 &interior_count_per_floorplan);
    bool is_interior_count_per_floorplan_Set() const;
    bool is_interior_count_per_floorplan_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_floorplan_count;
    bool m_floorplan_count_isSet;
    bool m_floorplan_count_isValid;

    qint32 m_interior_count_per_floorplan;
    bool m_interior_count_per_floorplan_isSet;
    bool m_interior_count_per_floorplan_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorldCount)

#endif // OAIWorldCount_H
