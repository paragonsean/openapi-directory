/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceConfig::OAIDataSourceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceConfig::OAIDataSourceConfig() {
    this->initializeModel();
}

OAIDataSourceConfig::~OAIDataSourceConfig() {}

void OAIDataSourceConfig::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_s3_bucket_isSet = false;
    m_s3_bucket_isValid = false;

    m_s3_keys_isSet = false;
    m_s3_keys_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;
}

void OAIDataSourceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceConfig::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket, json[QString("s3Bucket")]);
    m_s3_bucket_isSet = !json[QString("s3Bucket")].isNull() && m_s3_bucket_isValid;

    m_s3_keys_isValid = ::OpenAPI::fromJsonValue(m_s3_keys, json[QString("s3Keys")]);
    m_s3_keys_isSet = !json[QString("s3Keys")].isNull() && m_s3_keys_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;
}

QString OAIDataSourceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_s3_bucket_isSet) {
        obj.insert(QString("s3Bucket"), ::OpenAPI::toJsonValue(m_s3_bucket));
    }
    if (m_s3_keys.isSet()) {
        obj.insert(QString("s3Keys"), ::OpenAPI::toJsonValue(m_s3_keys));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    return obj;
}

QString OAIDataSourceConfig::getName() const {
    return m_name;
}
void OAIDataSourceConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataSourceConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataSourceConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDataSourceConfig::getS3Bucket() const {
    return m_s3_bucket;
}
void OAIDataSourceConfig::setS3Bucket(const QString &s3_bucket) {
    m_s3_bucket = s3_bucket;
    m_s3_bucket_isSet = true;
}

bool OAIDataSourceConfig::is_s3_bucket_Set() const{
    return m_s3_bucket_isSet;
}

bool OAIDataSourceConfig::is_s3_bucket_Valid() const{
    return m_s3_bucket_isValid;
}

QList OAIDataSourceConfig::getS3Keys() const {
    return m_s3_keys;
}
void OAIDataSourceConfig::setS3Keys(const QList &s3_keys) {
    m_s3_keys = s3_keys;
    m_s3_keys_isSet = true;
}

bool OAIDataSourceConfig::is_s3_keys_Set() const{
    return m_s3_keys_isSet;
}

bool OAIDataSourceConfig::is_s3_keys_Valid() const{
    return m_s3_keys_isValid;
}

OAIDataSourceType OAIDataSourceConfig::getType() const {
    return m_type;
}
void OAIDataSourceConfig::setType(const OAIDataSourceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDataSourceConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDataSourceConfig::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDataSourceConfig::getDestination() const {
    return m_destination;
}
void OAIDataSourceConfig::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIDataSourceConfig::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIDataSourceConfig::is_destination_Valid() const{
    return m_destination_isValid;
}

bool OAIDataSourceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_s3_bucket_isValid && m_s3_keys_isValid && true;
}

} // namespace OpenAPI
