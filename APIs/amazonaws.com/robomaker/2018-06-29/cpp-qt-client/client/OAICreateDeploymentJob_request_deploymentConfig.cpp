/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDeploymentJob_request_deploymentConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDeploymentJob_request_deploymentConfig::OAICreateDeploymentJob_request_deploymentConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDeploymentJob_request_deploymentConfig::OAICreateDeploymentJob_request_deploymentConfig() {
    this->initializeModel();
}

OAICreateDeploymentJob_request_deploymentConfig::~OAICreateDeploymentJob_request_deploymentConfig() {}

void OAICreateDeploymentJob_request_deploymentConfig::initializeModel() {

    m_concurrent_deployment_percentage_isSet = false;
    m_concurrent_deployment_percentage_isValid = false;

    m_failure_threshold_percentage_isSet = false;
    m_failure_threshold_percentage_isValid = false;

    m_robot_deployment_timeout_in_seconds_isSet = false;
    m_robot_deployment_timeout_in_seconds_isValid = false;

    m_download_condition_file_isSet = false;
    m_download_condition_file_isValid = false;
}

void OAICreateDeploymentJob_request_deploymentConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDeploymentJob_request_deploymentConfig::fromJsonObject(QJsonObject json) {

    m_concurrent_deployment_percentage_isValid = ::OpenAPI::fromJsonValue(m_concurrent_deployment_percentage, json[QString("concurrentDeploymentPercentage")]);
    m_concurrent_deployment_percentage_isSet = !json[QString("concurrentDeploymentPercentage")].isNull() && m_concurrent_deployment_percentage_isValid;

    m_failure_threshold_percentage_isValid = ::OpenAPI::fromJsonValue(m_failure_threshold_percentage, json[QString("failureThresholdPercentage")]);
    m_failure_threshold_percentage_isSet = !json[QString("failureThresholdPercentage")].isNull() && m_failure_threshold_percentage_isValid;

    m_robot_deployment_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_robot_deployment_timeout_in_seconds, json[QString("robotDeploymentTimeoutInSeconds")]);
    m_robot_deployment_timeout_in_seconds_isSet = !json[QString("robotDeploymentTimeoutInSeconds")].isNull() && m_robot_deployment_timeout_in_seconds_isValid;

    m_download_condition_file_isValid = ::OpenAPI::fromJsonValue(m_download_condition_file, json[QString("downloadConditionFile")]);
    m_download_condition_file_isSet = !json[QString("downloadConditionFile")].isNull() && m_download_condition_file_isValid;
}

QString OAICreateDeploymentJob_request_deploymentConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDeploymentJob_request_deploymentConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrent_deployment_percentage_isSet) {
        obj.insert(QString("concurrentDeploymentPercentage"), ::OpenAPI::toJsonValue(m_concurrent_deployment_percentage));
    }
    if (m_failure_threshold_percentage_isSet) {
        obj.insert(QString("failureThresholdPercentage"), ::OpenAPI::toJsonValue(m_failure_threshold_percentage));
    }
    if (m_robot_deployment_timeout_in_seconds_isSet) {
        obj.insert(QString("robotDeploymentTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_robot_deployment_timeout_in_seconds));
    }
    if (m_download_condition_file.isSet()) {
        obj.insert(QString("downloadConditionFile"), ::OpenAPI::toJsonValue(m_download_condition_file));
    }
    return obj;
}

qint32 OAICreateDeploymentJob_request_deploymentConfig::getConcurrentDeploymentPercentage() const {
    return m_concurrent_deployment_percentage;
}
void OAICreateDeploymentJob_request_deploymentConfig::setConcurrentDeploymentPercentage(const qint32 &concurrent_deployment_percentage) {
    m_concurrent_deployment_percentage = concurrent_deployment_percentage;
    m_concurrent_deployment_percentage_isSet = true;
}

bool OAICreateDeploymentJob_request_deploymentConfig::is_concurrent_deployment_percentage_Set() const{
    return m_concurrent_deployment_percentage_isSet;
}

bool OAICreateDeploymentJob_request_deploymentConfig::is_concurrent_deployment_percentage_Valid() const{
    return m_concurrent_deployment_percentage_isValid;
}

qint32 OAICreateDeploymentJob_request_deploymentConfig::getFailureThresholdPercentage() const {
    return m_failure_threshold_percentage;
}
void OAICreateDeploymentJob_request_deploymentConfig::setFailureThresholdPercentage(const qint32 &failure_threshold_percentage) {
    m_failure_threshold_percentage = failure_threshold_percentage;
    m_failure_threshold_percentage_isSet = true;
}

bool OAICreateDeploymentJob_request_deploymentConfig::is_failure_threshold_percentage_Set() const{
    return m_failure_threshold_percentage_isSet;
}

bool OAICreateDeploymentJob_request_deploymentConfig::is_failure_threshold_percentage_Valid() const{
    return m_failure_threshold_percentage_isValid;
}

qint32 OAICreateDeploymentJob_request_deploymentConfig::getRobotDeploymentTimeoutInSeconds() const {
    return m_robot_deployment_timeout_in_seconds;
}
void OAICreateDeploymentJob_request_deploymentConfig::setRobotDeploymentTimeoutInSeconds(const qint32 &robot_deployment_timeout_in_seconds) {
    m_robot_deployment_timeout_in_seconds = robot_deployment_timeout_in_seconds;
    m_robot_deployment_timeout_in_seconds_isSet = true;
}

bool OAICreateDeploymentJob_request_deploymentConfig::is_robot_deployment_timeout_in_seconds_Set() const{
    return m_robot_deployment_timeout_in_seconds_isSet;
}

bool OAICreateDeploymentJob_request_deploymentConfig::is_robot_deployment_timeout_in_seconds_Valid() const{
    return m_robot_deployment_timeout_in_seconds_isValid;
}

OAICreateDeploymentJob_request_deploymentConfig_downloadConditionFile OAICreateDeploymentJob_request_deploymentConfig::getDownloadConditionFile() const {
    return m_download_condition_file;
}
void OAICreateDeploymentJob_request_deploymentConfig::setDownloadConditionFile(const OAICreateDeploymentJob_request_deploymentConfig_downloadConditionFile &download_condition_file) {
    m_download_condition_file = download_condition_file;
    m_download_condition_file_isSet = true;
}

bool OAICreateDeploymentJob_request_deploymentConfig::is_download_condition_file_Set() const{
    return m_download_condition_file_isSet;
}

bool OAICreateDeploymentJob_request_deploymentConfig::is_download_condition_file_Valid() const{
    return m_download_condition_file_isValid;
}

bool OAICreateDeploymentJob_request_deploymentConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrent_deployment_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_threshold_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robot_deployment_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_condition_file.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDeploymentJob_request_deploymentConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
