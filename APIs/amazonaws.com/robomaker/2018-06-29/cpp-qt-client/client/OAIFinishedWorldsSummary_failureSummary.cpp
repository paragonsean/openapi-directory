/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinishedWorldsSummary_failureSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinishedWorldsSummary_failureSummary::OAIFinishedWorldsSummary_failureSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinishedWorldsSummary_failureSummary::OAIFinishedWorldsSummary_failureSummary() {
    this->initializeModel();
}

OAIFinishedWorldsSummary_failureSummary::~OAIFinishedWorldsSummary_failureSummary() {}

void OAIFinishedWorldsSummary_failureSummary::initializeModel() {

    m_total_failure_count_isSet = false;
    m_total_failure_count_isValid = false;

    m_failures_isSet = false;
    m_failures_isValid = false;
}

void OAIFinishedWorldsSummary_failureSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinishedWorldsSummary_failureSummary::fromJsonObject(QJsonObject json) {

    m_total_failure_count_isValid = ::OpenAPI::fromJsonValue(m_total_failure_count, json[QString("totalFailureCount")]);
    m_total_failure_count_isSet = !json[QString("totalFailureCount")].isNull() && m_total_failure_count_isValid;

    m_failures_isValid = ::OpenAPI::fromJsonValue(m_failures, json[QString("failures")]);
    m_failures_isSet = !json[QString("failures")].isNull() && m_failures_isValid;
}

QString OAIFinishedWorldsSummary_failureSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinishedWorldsSummary_failureSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_total_failure_count_isSet) {
        obj.insert(QString("totalFailureCount"), ::OpenAPI::toJsonValue(m_total_failure_count));
    }
    if (m_failures.isSet()) {
        obj.insert(QString("failures"), ::OpenAPI::toJsonValue(m_failures));
    }
    return obj;
}

qint32 OAIFinishedWorldsSummary_failureSummary::getTotalFailureCount() const {
    return m_total_failure_count;
}
void OAIFinishedWorldsSummary_failureSummary::setTotalFailureCount(const qint32 &total_failure_count) {
    m_total_failure_count = total_failure_count;
    m_total_failure_count_isSet = true;
}

bool OAIFinishedWorldsSummary_failureSummary::is_total_failure_count_Set() const{
    return m_total_failure_count_isSet;
}

bool OAIFinishedWorldsSummary_failureSummary::is_total_failure_count_Valid() const{
    return m_total_failure_count_isValid;
}

QList OAIFinishedWorldsSummary_failureSummary::getFailures() const {
    return m_failures;
}
void OAIFinishedWorldsSummary_failureSummary::setFailures(const QList &failures) {
    m_failures = failures;
    m_failures_isSet = true;
}

bool OAIFinishedWorldsSummary_failureSummary::is_failures_Set() const{
    return m_failures_isSet;
}

bool OAIFinishedWorldsSummary_failureSummary::is_failures_Valid() const{
    return m_failures_isValid;
}

bool OAIFinishedWorldsSummary_failureSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_failure_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failures.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinishedWorldsSummary_failureSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
