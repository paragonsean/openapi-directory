/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDeploymentJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDeploymentJob_request::OAICreateDeploymentJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDeploymentJob_request::OAICreateDeploymentJob_request() {
    this->initializeModel();
}

OAICreateDeploymentJob_request::~OAICreateDeploymentJob_request() {}

void OAICreateDeploymentJob_request::initializeModel() {

    m_deployment_config_isSet = false;
    m_deployment_config_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_fleet_isSet = false;
    m_fleet_isValid = false;

    m_deployment_application_configs_isSet = false;
    m_deployment_application_configs_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateDeploymentJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDeploymentJob_request::fromJsonObject(QJsonObject json) {

    m_deployment_config_isValid = ::OpenAPI::fromJsonValue(m_deployment_config, json[QString("deploymentConfig")]);
    m_deployment_config_isSet = !json[QString("deploymentConfig")].isNull() && m_deployment_config_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_fleet_isValid = ::OpenAPI::fromJsonValue(m_fleet, json[QString("fleet")]);
    m_fleet_isSet = !json[QString("fleet")].isNull() && m_fleet_isValid;

    m_deployment_application_configs_isValid = ::OpenAPI::fromJsonValue(m_deployment_application_configs, json[QString("deploymentApplicationConfigs")]);
    m_deployment_application_configs_isSet = !json[QString("deploymentApplicationConfigs")].isNull() && m_deployment_application_configs_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateDeploymentJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDeploymentJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_config.isSet()) {
        obj.insert(QString("deploymentConfig"), ::OpenAPI::toJsonValue(m_deployment_config));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_fleet_isSet) {
        obj.insert(QString("fleet"), ::OpenAPI::toJsonValue(m_fleet));
    }
    if (m_deployment_application_configs.size() > 0) {
        obj.insert(QString("deploymentApplicationConfigs"), ::OpenAPI::toJsonValue(m_deployment_application_configs));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICreateDeploymentJob_request_deploymentConfig OAICreateDeploymentJob_request::getDeploymentConfig() const {
    return m_deployment_config;
}
void OAICreateDeploymentJob_request::setDeploymentConfig(const OAICreateDeploymentJob_request_deploymentConfig &deployment_config) {
    m_deployment_config = deployment_config;
    m_deployment_config_isSet = true;
}

bool OAICreateDeploymentJob_request::is_deployment_config_Set() const{
    return m_deployment_config_isSet;
}

bool OAICreateDeploymentJob_request::is_deployment_config_Valid() const{
    return m_deployment_config_isValid;
}

QString OAICreateDeploymentJob_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateDeploymentJob_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateDeploymentJob_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateDeploymentJob_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAICreateDeploymentJob_request::getFleet() const {
    return m_fleet;
}
void OAICreateDeploymentJob_request::setFleet(const QString &fleet) {
    m_fleet = fleet;
    m_fleet_isSet = true;
}

bool OAICreateDeploymentJob_request::is_fleet_Set() const{
    return m_fleet_isSet;
}

bool OAICreateDeploymentJob_request::is_fleet_Valid() const{
    return m_fleet_isValid;
}

QList<OAIDeploymentApplicationConfig> OAICreateDeploymentJob_request::getDeploymentApplicationConfigs() const {
    return m_deployment_application_configs;
}
void OAICreateDeploymentJob_request::setDeploymentApplicationConfigs(const QList<OAIDeploymentApplicationConfig> &deployment_application_configs) {
    m_deployment_application_configs = deployment_application_configs;
    m_deployment_application_configs_isSet = true;
}

bool OAICreateDeploymentJob_request::is_deployment_application_configs_Set() const{
    return m_deployment_application_configs_isSet;
}

bool OAICreateDeploymentJob_request::is_deployment_application_configs_Valid() const{
    return m_deployment_application_configs_isValid;
}

QMap<QString, QString> OAICreateDeploymentJob_request::getTags() const {
    return m_tags;
}
void OAICreateDeploymentJob_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDeploymentJob_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDeploymentJob_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateDeploymentJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_application_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDeploymentJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_request_token_isValid && m_fleet_isValid && m_deployment_application_configs_isValid && true;
}

} // namespace OpenAPI
