/**
 * AWS RoboMaker
 * This section provides documentation for the AWS RoboMaker API operations.
 *
 * The version of the OpenAPI document: 2018-06-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRobotDeployment_progressDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRobotDeployment_progressDetail::OAIRobotDeployment_progressDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRobotDeployment_progressDetail::OAIRobotDeployment_progressDetail() {
    this->initializeModel();
}

OAIRobotDeployment_progressDetail::~OAIRobotDeployment_progressDetail() {}

void OAIRobotDeployment_progressDetail::initializeModel() {

    m_current_progress_isSet = false;
    m_current_progress_isValid = false;

    m_percent_done_isSet = false;
    m_percent_done_isValid = false;

    m_estimated_time_remaining_seconds_isSet = false;
    m_estimated_time_remaining_seconds_isValid = false;

    m_target_resource_isSet = false;
    m_target_resource_isValid = false;
}

void OAIRobotDeployment_progressDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRobotDeployment_progressDetail::fromJsonObject(QJsonObject json) {

    m_current_progress_isValid = ::OpenAPI::fromJsonValue(m_current_progress, json[QString("currentProgress")]);
    m_current_progress_isSet = !json[QString("currentProgress")].isNull() && m_current_progress_isValid;

    m_percent_done_isValid = ::OpenAPI::fromJsonValue(m_percent_done, json[QString("percentDone")]);
    m_percent_done_isSet = !json[QString("percentDone")].isNull() && m_percent_done_isValid;

    m_estimated_time_remaining_seconds_isValid = ::OpenAPI::fromJsonValue(m_estimated_time_remaining_seconds, json[QString("estimatedTimeRemainingSeconds")]);
    m_estimated_time_remaining_seconds_isSet = !json[QString("estimatedTimeRemainingSeconds")].isNull() && m_estimated_time_remaining_seconds_isValid;

    m_target_resource_isValid = ::OpenAPI::fromJsonValue(m_target_resource, json[QString("targetResource")]);
    m_target_resource_isSet = !json[QString("targetResource")].isNull() && m_target_resource_isValid;
}

QString OAIRobotDeployment_progressDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRobotDeployment_progressDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_current_progress.isSet()) {
        obj.insert(QString("currentProgress"), ::OpenAPI::toJsonValue(m_current_progress));
    }
    if (m_percent_done_isSet) {
        obj.insert(QString("percentDone"), ::OpenAPI::toJsonValue(m_percent_done));
    }
    if (m_estimated_time_remaining_seconds_isSet) {
        obj.insert(QString("estimatedTimeRemainingSeconds"), ::OpenAPI::toJsonValue(m_estimated_time_remaining_seconds));
    }
    if (m_target_resource_isSet) {
        obj.insert(QString("targetResource"), ::OpenAPI::toJsonValue(m_target_resource));
    }
    return obj;
}

OAIRobotDeploymentStep OAIRobotDeployment_progressDetail::getCurrentProgress() const {
    return m_current_progress;
}
void OAIRobotDeployment_progressDetail::setCurrentProgress(const OAIRobotDeploymentStep &current_progress) {
    m_current_progress = current_progress;
    m_current_progress_isSet = true;
}

bool OAIRobotDeployment_progressDetail::is_current_progress_Set() const{
    return m_current_progress_isSet;
}

bool OAIRobotDeployment_progressDetail::is_current_progress_Valid() const{
    return m_current_progress_isValid;
}

float OAIRobotDeployment_progressDetail::getPercentDone() const {
    return m_percent_done;
}
void OAIRobotDeployment_progressDetail::setPercentDone(const float &percent_done) {
    m_percent_done = percent_done;
    m_percent_done_isSet = true;
}

bool OAIRobotDeployment_progressDetail::is_percent_done_Set() const{
    return m_percent_done_isSet;
}

bool OAIRobotDeployment_progressDetail::is_percent_done_Valid() const{
    return m_percent_done_isValid;
}

qint32 OAIRobotDeployment_progressDetail::getEstimatedTimeRemainingSeconds() const {
    return m_estimated_time_remaining_seconds;
}
void OAIRobotDeployment_progressDetail::setEstimatedTimeRemainingSeconds(const qint32 &estimated_time_remaining_seconds) {
    m_estimated_time_remaining_seconds = estimated_time_remaining_seconds;
    m_estimated_time_remaining_seconds_isSet = true;
}

bool OAIRobotDeployment_progressDetail::is_estimated_time_remaining_seconds_Set() const{
    return m_estimated_time_remaining_seconds_isSet;
}

bool OAIRobotDeployment_progressDetail::is_estimated_time_remaining_seconds_Valid() const{
    return m_estimated_time_remaining_seconds_isValid;
}

QString OAIRobotDeployment_progressDetail::getTargetResource() const {
    return m_target_resource;
}
void OAIRobotDeployment_progressDetail::setTargetResource(const QString &target_resource) {
    m_target_resource = target_resource;
    m_target_resource_isSet = true;
}

bool OAIRobotDeployment_progressDetail::is_target_resource_Set() const{
    return m_target_resource_isSet;
}

bool OAIRobotDeployment_progressDetail::is_target_resource_Valid() const{
    return m_target_resource_isValid;
}

bool OAIRobotDeployment_progressDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_done_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_time_remaining_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRobotDeployment_progressDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
