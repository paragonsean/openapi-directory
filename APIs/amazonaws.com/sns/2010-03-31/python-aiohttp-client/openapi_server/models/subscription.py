# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription_arn: str=None, owner: str=None, protocol: str=None, endpoint: str=None, topic_arn: str=None):
        """Subscription - a model defined in OpenAPI

        :param subscription_arn: The subscription_arn of this Subscription.
        :param owner: The owner of this Subscription.
        :param protocol: The protocol of this Subscription.
        :param endpoint: The endpoint of this Subscription.
        :param topic_arn: The topic_arn of this Subscription.
        """
        self.openapi_types = {
            'subscription_arn': str,
            'owner': str,
            'protocol': str,
            'endpoint': str,
            'topic_arn': str
        }

        self.attribute_map = {
            'subscription_arn': 'SubscriptionArn',
            'owner': 'Owner',
            'protocol': 'Protocol',
            'endpoint': 'Endpoint',
            'topic_arn': 'TopicArn'
        }

        self._subscription_arn = subscription_arn
        self._owner = owner
        self._protocol = protocol
        self._endpoint = endpoint
        self._topic_arn = topic_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription_arn(self):
        """Gets the subscription_arn of this Subscription.


        :return: The subscription_arn of this Subscription.
        :rtype: str
        """
        return self._subscription_arn

    @subscription_arn.setter
    def subscription_arn(self, subscription_arn):
        """Sets the subscription_arn of this Subscription.


        :param subscription_arn: The subscription_arn of this Subscription.
        :type subscription_arn: str
        """

        self._subscription_arn = subscription_arn

    @property
    def owner(self):
        """Gets the owner of this Subscription.


        :return: The owner of this Subscription.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Subscription.


        :param owner: The owner of this Subscription.
        :type owner: str
        """

        self._owner = owner

    @property
    def protocol(self):
        """Gets the protocol of this Subscription.


        :return: The protocol of this Subscription.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Subscription.


        :param protocol: The protocol of this Subscription.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def endpoint(self):
        """Gets the endpoint of this Subscription.


        :return: The endpoint of this Subscription.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Subscription.


        :param endpoint: The endpoint of this Subscription.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def topic_arn(self):
        """Gets the topic_arn of this Subscription.


        :return: The topic_arn of this Subscription.
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this Subscription.


        :param topic_arn: The topic_arn of this Subscription.
        :type topic_arn: str
        """

        self._topic_arn = topic_arn
