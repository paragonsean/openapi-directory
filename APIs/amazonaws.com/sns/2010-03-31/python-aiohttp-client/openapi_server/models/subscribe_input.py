# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscribeInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic_arn: str=None, protocol: str=None, endpoint: str=None, attributes: Dict=None, return_subscription_arn: bool=None):
        """SubscribeInput - a model defined in OpenAPI

        :param topic_arn: The topic_arn of this SubscribeInput.
        :param protocol: The protocol of this SubscribeInput.
        :param endpoint: The endpoint of this SubscribeInput.
        :param attributes: The attributes of this SubscribeInput.
        :param return_subscription_arn: The return_subscription_arn of this SubscribeInput.
        """
        self.openapi_types = {
            'topic_arn': str,
            'protocol': str,
            'endpoint': str,
            'attributes': Dict,
            'return_subscription_arn': bool
        }

        self.attribute_map = {
            'topic_arn': 'TopicArn',
            'protocol': 'Protocol',
            'endpoint': 'Endpoint',
            'attributes': 'Attributes',
            'return_subscription_arn': 'ReturnSubscriptionArn'
        }

        self._topic_arn = topic_arn
        self._protocol = protocol
        self._endpoint = endpoint
        self._attributes = attributes
        self._return_subscription_arn = return_subscription_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscribeInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscribeInput of this SubscribeInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic_arn(self):
        """Gets the topic_arn of this SubscribeInput.


        :return: The topic_arn of this SubscribeInput.
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this SubscribeInput.


        :param topic_arn: The topic_arn of this SubscribeInput.
        :type topic_arn: str
        """
        if topic_arn is None:
            raise ValueError("Invalid value for `topic_arn`, must not be `None`")

        self._topic_arn = topic_arn

    @property
    def protocol(self):
        """Gets the protocol of this SubscribeInput.


        :return: The protocol of this SubscribeInput.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this SubscribeInput.


        :param protocol: The protocol of this SubscribeInput.
        :type protocol: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol

    @property
    def endpoint(self):
        """Gets the endpoint of this SubscribeInput.


        :return: The endpoint of this SubscribeInput.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this SubscribeInput.


        :param endpoint: The endpoint of this SubscribeInput.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def attributes(self):
        """Gets the attributes of this SubscribeInput.


        :return: The attributes of this SubscribeInput.
        :rtype: Dict
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SubscribeInput.


        :param attributes: The attributes of this SubscribeInput.
        :type attributes: Dict
        """

        self._attributes = attributes

    @property
    def return_subscription_arn(self):
        """Gets the return_subscription_arn of this SubscribeInput.


        :return: The return_subscription_arn of this SubscribeInput.
        :rtype: bool
        """
        return self._return_subscription_arn

    @return_subscription_arn.setter
    def return_subscription_arn(self, return_subscription_arn):
        """Sets the return_subscription_arn of this SubscribeInput.


        :param return_subscription_arn: The return_subscription_arn of this SubscribeInput.
        :type return_subscription_arn: bool
        """

        self._return_subscription_arn = return_subscription_arn
