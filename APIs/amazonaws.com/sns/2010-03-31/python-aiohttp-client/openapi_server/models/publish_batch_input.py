# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublishBatchInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic_arn: str=None, publish_batch_request_entries: List=None):
        """PublishBatchInput - a model defined in OpenAPI

        :param topic_arn: The topic_arn of this PublishBatchInput.
        :param publish_batch_request_entries: The publish_batch_request_entries of this PublishBatchInput.
        """
        self.openapi_types = {
            'topic_arn': str,
            'publish_batch_request_entries': List
        }

        self.attribute_map = {
            'topic_arn': 'TopicArn',
            'publish_batch_request_entries': 'PublishBatchRequestEntries'
        }

        self._topic_arn = topic_arn
        self._publish_batch_request_entries = publish_batch_request_entries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublishBatchInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublishBatchInput of this PublishBatchInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic_arn(self):
        """Gets the topic_arn of this PublishBatchInput.


        :return: The topic_arn of this PublishBatchInput.
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this PublishBatchInput.


        :param topic_arn: The topic_arn of this PublishBatchInput.
        :type topic_arn: str
        """
        if topic_arn is None:
            raise ValueError("Invalid value for `topic_arn`, must not be `None`")

        self._topic_arn = topic_arn

    @property
    def publish_batch_request_entries(self):
        """Gets the publish_batch_request_entries of this PublishBatchInput.


        :return: The publish_batch_request_entries of this PublishBatchInput.
        :rtype: List
        """
        return self._publish_batch_request_entries

    @publish_batch_request_entries.setter
    def publish_batch_request_entries(self, publish_batch_request_entries):
        """Sets the publish_batch_request_entries of this PublishBatchInput.


        :param publish_batch_request_entries: The publish_batch_request_entries of this PublishBatchInput.
        :type publish_batch_request_entries: List
        """
        if publish_batch_request_entries is None:
            raise ValueError("Invalid value for `publish_batch_request_entries`, must not be `None`")

        self._publish_batch_request_entries = publish_batch_request_entries
