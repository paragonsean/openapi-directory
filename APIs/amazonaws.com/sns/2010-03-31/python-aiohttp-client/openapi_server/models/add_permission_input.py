# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddPermissionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic_arn: str=None, label: str=None, aws_account_id: List=None, action_name: List=None):
        """AddPermissionInput - a model defined in OpenAPI

        :param topic_arn: The topic_arn of this AddPermissionInput.
        :param label: The label of this AddPermissionInput.
        :param aws_account_id: The aws_account_id of this AddPermissionInput.
        :param action_name: The action_name of this AddPermissionInput.
        """
        self.openapi_types = {
            'topic_arn': str,
            'label': str,
            'aws_account_id': List,
            'action_name': List
        }

        self.attribute_map = {
            'topic_arn': 'TopicArn',
            'label': 'Label',
            'aws_account_id': 'AWSAccountId',
            'action_name': 'ActionName'
        }

        self._topic_arn = topic_arn
        self._label = label
        self._aws_account_id = aws_account_id
        self._action_name = action_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddPermissionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddPermissionInput of this AddPermissionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic_arn(self):
        """Gets the topic_arn of this AddPermissionInput.


        :return: The topic_arn of this AddPermissionInput.
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this AddPermissionInput.


        :param topic_arn: The topic_arn of this AddPermissionInput.
        :type topic_arn: str
        """
        if topic_arn is None:
            raise ValueError("Invalid value for `topic_arn`, must not be `None`")

        self._topic_arn = topic_arn

    @property
    def label(self):
        """Gets the label of this AddPermissionInput.


        :return: The label of this AddPermissionInput.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AddPermissionInput.


        :param label: The label of this AddPermissionInput.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def aws_account_id(self):
        """Gets the aws_account_id of this AddPermissionInput.


        :return: The aws_account_id of this AddPermissionInput.
        :rtype: List
        """
        return self._aws_account_id

    @aws_account_id.setter
    def aws_account_id(self, aws_account_id):
        """Sets the aws_account_id of this AddPermissionInput.


        :param aws_account_id: The aws_account_id of this AddPermissionInput.
        :type aws_account_id: List
        """
        if aws_account_id is None:
            raise ValueError("Invalid value for `aws_account_id`, must not be `None`")

        self._aws_account_id = aws_account_id

    @property
    def action_name(self):
        """Gets the action_name of this AddPermissionInput.


        :return: The action_name of this AddPermissionInput.
        :rtype: List
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this AddPermissionInput.


        :param action_name: The action_name of this AddPermissionInput.
        :type action_name: List
        """
        if action_name is None:
            raise ValueError("Invalid value for `action_name`, must not be `None`")

        self._action_name = action_name
