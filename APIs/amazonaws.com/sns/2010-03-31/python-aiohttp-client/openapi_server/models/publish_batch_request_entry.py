# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublishBatchRequestEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, message: str=None, subject: str=None, message_structure: str=None, message_attributes: Dict=None, message_deduplication_id: str=None, message_group_id: str=None):
        """PublishBatchRequestEntry - a model defined in OpenAPI

        :param id: The id of this PublishBatchRequestEntry.
        :param message: The message of this PublishBatchRequestEntry.
        :param subject: The subject of this PublishBatchRequestEntry.
        :param message_structure: The message_structure of this PublishBatchRequestEntry.
        :param message_attributes: The message_attributes of this PublishBatchRequestEntry.
        :param message_deduplication_id: The message_deduplication_id of this PublishBatchRequestEntry.
        :param message_group_id: The message_group_id of this PublishBatchRequestEntry.
        """
        self.openapi_types = {
            'id': str,
            'message': str,
            'subject': str,
            'message_structure': str,
            'message_attributes': Dict,
            'message_deduplication_id': str,
            'message_group_id': str
        }

        self.attribute_map = {
            'id': 'Id',
            'message': 'Message',
            'subject': 'Subject',
            'message_structure': 'MessageStructure',
            'message_attributes': 'MessageAttributes',
            'message_deduplication_id': 'MessageDeduplicationId',
            'message_group_id': 'MessageGroupId'
        }

        self._id = id
        self._message = message
        self._subject = subject
        self._message_structure = message_structure
        self._message_attributes = message_attributes
        self._message_deduplication_id = message_deduplication_id
        self._message_group_id = message_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublishBatchRequestEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublishBatchRequestEntry of this PublishBatchRequestEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PublishBatchRequestEntry.


        :return: The id of this PublishBatchRequestEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublishBatchRequestEntry.


        :param id: The id of this PublishBatchRequestEntry.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def message(self):
        """Gets the message of this PublishBatchRequestEntry.


        :return: The message of this PublishBatchRequestEntry.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PublishBatchRequestEntry.


        :param message: The message of this PublishBatchRequestEntry.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def subject(self):
        """Gets the subject of this PublishBatchRequestEntry.


        :return: The subject of this PublishBatchRequestEntry.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this PublishBatchRequestEntry.


        :param subject: The subject of this PublishBatchRequestEntry.
        :type subject: str
        """

        self._subject = subject

    @property
    def message_structure(self):
        """Gets the message_structure of this PublishBatchRequestEntry.


        :return: The message_structure of this PublishBatchRequestEntry.
        :rtype: str
        """
        return self._message_structure

    @message_structure.setter
    def message_structure(self, message_structure):
        """Sets the message_structure of this PublishBatchRequestEntry.


        :param message_structure: The message_structure of this PublishBatchRequestEntry.
        :type message_structure: str
        """

        self._message_structure = message_structure

    @property
    def message_attributes(self):
        """Gets the message_attributes of this PublishBatchRequestEntry.


        :return: The message_attributes of this PublishBatchRequestEntry.
        :rtype: Dict
        """
        return self._message_attributes

    @message_attributes.setter
    def message_attributes(self, message_attributes):
        """Sets the message_attributes of this PublishBatchRequestEntry.


        :param message_attributes: The message_attributes of this PublishBatchRequestEntry.
        :type message_attributes: Dict
        """

        self._message_attributes = message_attributes

    @property
    def message_deduplication_id(self):
        """Gets the message_deduplication_id of this PublishBatchRequestEntry.


        :return: The message_deduplication_id of this PublishBatchRequestEntry.
        :rtype: str
        """
        return self._message_deduplication_id

    @message_deduplication_id.setter
    def message_deduplication_id(self, message_deduplication_id):
        """Sets the message_deduplication_id of this PublishBatchRequestEntry.


        :param message_deduplication_id: The message_deduplication_id of this PublishBatchRequestEntry.
        :type message_deduplication_id: str
        """

        self._message_deduplication_id = message_deduplication_id

    @property
    def message_group_id(self):
        """Gets the message_group_id of this PublishBatchRequestEntry.


        :return: The message_group_id of this PublishBatchRequestEntry.
        :rtype: str
        """
        return self._message_group_id

    @message_group_id.setter
    def message_group_id(self, message_group_id):
        """Sets the message_group_id of this PublishBatchRequestEntry.


        :param message_group_id: The message_group_id of this PublishBatchRequestEntry.
        :type message_group_id: str
        """

        self._message_group_id = message_group_id
