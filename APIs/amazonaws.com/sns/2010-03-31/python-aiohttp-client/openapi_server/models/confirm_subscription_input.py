# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfirmSubscriptionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic_arn: str=None, token: str=None, authenticate_on_unsubscribe: str=None):
        """ConfirmSubscriptionInput - a model defined in OpenAPI

        :param topic_arn: The topic_arn of this ConfirmSubscriptionInput.
        :param token: The token of this ConfirmSubscriptionInput.
        :param authenticate_on_unsubscribe: The authenticate_on_unsubscribe of this ConfirmSubscriptionInput.
        """
        self.openapi_types = {
            'topic_arn': str,
            'token': str,
            'authenticate_on_unsubscribe': str
        }

        self.attribute_map = {
            'topic_arn': 'TopicArn',
            'token': 'Token',
            'authenticate_on_unsubscribe': 'AuthenticateOnUnsubscribe'
        }

        self._topic_arn = topic_arn
        self._token = token
        self._authenticate_on_unsubscribe = authenticate_on_unsubscribe

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfirmSubscriptionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfirmSubscriptionInput of this ConfirmSubscriptionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic_arn(self):
        """Gets the topic_arn of this ConfirmSubscriptionInput.


        :return: The topic_arn of this ConfirmSubscriptionInput.
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this ConfirmSubscriptionInput.


        :param topic_arn: The topic_arn of this ConfirmSubscriptionInput.
        :type topic_arn: str
        """
        if topic_arn is None:
            raise ValueError("Invalid value for `topic_arn`, must not be `None`")

        self._topic_arn = topic_arn

    @property
    def token(self):
        """Gets the token of this ConfirmSubscriptionInput.


        :return: The token of this ConfirmSubscriptionInput.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ConfirmSubscriptionInput.


        :param token: The token of this ConfirmSubscriptionInput.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def authenticate_on_unsubscribe(self):
        """Gets the authenticate_on_unsubscribe of this ConfirmSubscriptionInput.


        :return: The authenticate_on_unsubscribe of this ConfirmSubscriptionInput.
        :rtype: str
        """
        return self._authenticate_on_unsubscribe

    @authenticate_on_unsubscribe.setter
    def authenticate_on_unsubscribe(self, authenticate_on_unsubscribe):
        """Sets the authenticate_on_unsubscribe of this ConfirmSubscriptionInput.


        :param authenticate_on_unsubscribe: The authenticate_on_unsubscribe of this ConfirmSubscriptionInput.
        :type authenticate_on_unsubscribe: str
        """

        self._authenticate_on_unsubscribe = authenticate_on_unsubscribe
