/**
 * Amazon Simple Notification Service
 * <fullname>Amazon Simple Notification Service</fullname> <p>Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build distributed web-enabled applications. Applications can use Amazon SNS to easily push real-time notification messages to interested subscribers over multiple delivery protocols. For more information about this product see the <a href=\"http://aws.amazon.com/sns/\">Amazon SNS product page</a>. For detailed information about Amazon SNS features and their associated API calls, see the <a href=\"https://docs.aws.amazon.com/sns/latest/dg/\">Amazon SNS Developer Guide</a>. </p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/sns/latest/dg/sns-authentication-and-access-control.html\">Identity and access management in Amazon SNS</a> in the <i>Amazon SNS Developer Guide.</i> </p> <p>We also provide SDKs that enable you to access Amazon SNS from your preferred programming language. The SDKs contain functionality that automatically takes care of tasks such as: cryptographically signing your service requests, retrying requests, and handling error responses. For a list of available SDKs, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>. </p>
 *
 * The version of the OpenAPI document: 2010-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguageCodeString.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguageCodeString::OAILanguageCodeString(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguageCodeString::OAILanguageCodeString() {
    this->initializeModel();
}

OAILanguageCodeString::~OAILanguageCodeString() {}

void OAILanguageCodeString::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILanguageCodeString::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILanguageCodeString::fromJson(QString jsonString) {
    
    if ( jsonString.compare("en-US", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCodeString::EN_US;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-GB", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCodeString::EN_GB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es-419", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCodeString::ES_419;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es-ES", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCodeString::ES_ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("de-DE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCodeString::DE_DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr-CA", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCodeString::FR_CA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr-FR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCodeString::FR_FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("it-IT", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCodeString::IT_IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ja-JP", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCodeString::JA_JP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pt-BR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCodeString::PT_BR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("kr-KR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCodeString::KR_KR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("zh-CN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCodeString::ZH_CN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("zh-TW", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCodeString::ZH_TW;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILanguageCodeString::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILanguageCodeString::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILanguageCodeString::EN_US:
            val = "en-US";
            break;
        case eOAILanguageCodeString::EN_GB:
            val = "en-GB";
            break;
        case eOAILanguageCodeString::ES_419:
            val = "es-419";
            break;
        case eOAILanguageCodeString::ES_ES:
            val = "es-ES";
            break;
        case eOAILanguageCodeString::DE_DE:
            val = "de-DE";
            break;
        case eOAILanguageCodeString::FR_CA:
            val = "fr-CA";
            break;
        case eOAILanguageCodeString::FR_FR:
            val = "fr-FR";
            break;
        case eOAILanguageCodeString::IT_IT:
            val = "it-IT";
            break;
        case eOAILanguageCodeString::JA_JP:
            val = "ja-JP";
            break;
        case eOAILanguageCodeString::PT_BR:
            val = "pt-BR";
            break;
        case eOAILanguageCodeString::KR_KR:
            val = "kr-KR";
            break;
        case eOAILanguageCodeString::ZH_CN:
            val = "zh-CN";
            break;
        case eOAILanguageCodeString::ZH_TW:
            val = "zh-TW";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILanguageCodeString::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILanguageCodeString::eOAILanguageCodeString OAILanguageCodeString::getValue() const {
    return m_value;
}

void OAILanguageCodeString::setValue(const OAILanguageCodeString::eOAILanguageCodeString& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILanguageCodeString::isSet() const {
    
    return m_value_isSet;
}

bool OAILanguageCodeString::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
