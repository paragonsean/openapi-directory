/**
 * Amazon Simple Notification Service
 * <fullname>Amazon Simple Notification Service</fullname> <p>Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build distributed web-enabled applications. Applications can use Amazon SNS to easily push real-time notification messages to interested subscribers over multiple delivery protocols. For more information about this product see the <a href=\"http://aws.amazon.com/sns/\">Amazon SNS product page</a>. For detailed information about Amazon SNS features and their associated API calls, see the <a href=\"https://docs.aws.amazon.com/sns/latest/dg/\">Amazon SNS Developer Guide</a>. </p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/sns/latest/dg/sns-authentication-and-access-control.html\">Identity and access management in Amazon SNS</a> in the <i>Amazon SNS Developer Guide.</i> </p> <p>We also provide SDKs that enable you to access Amazon SNS from your preferred programming language. The SDKs contain functionality that automatically takes care of tasks such as: cryptographically signing your service requests, retrying requests, and handling error responses. For a list of available SDKs, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>. </p>
 *
 * The version of the OpenAPI document: 2010-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnsubscribeInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnsubscribeInput::OAIUnsubscribeInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnsubscribeInput::OAIUnsubscribeInput() {
    this->initializeModel();
}

OAIUnsubscribeInput::~OAIUnsubscribeInput() {}

void OAIUnsubscribeInput::initializeModel() {

    m_subscription_arn_isSet = false;
    m_subscription_arn_isValid = false;
}

void OAIUnsubscribeInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnsubscribeInput::fromJsonObject(QJsonObject json) {

    m_subscription_arn_isValid = ::OpenAPI::fromJsonValue(m_subscription_arn, json[QString("SubscriptionArn")]);
    m_subscription_arn_isSet = !json[QString("SubscriptionArn")].isNull() && m_subscription_arn_isValid;
}

QString OAIUnsubscribeInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnsubscribeInput::asJsonObject() const {
    QJsonObject obj;
    if (m_subscription_arn_isSet) {
        obj.insert(QString("SubscriptionArn"), ::OpenAPI::toJsonValue(m_subscription_arn));
    }
    return obj;
}

QString OAIUnsubscribeInput::getSubscriptionArn() const {
    return m_subscription_arn;
}
void OAIUnsubscribeInput::setSubscriptionArn(const QString &subscription_arn) {
    m_subscription_arn = subscription_arn;
    m_subscription_arn_isSet = true;
}

bool OAIUnsubscribeInput::is_subscription_arn_Set() const{
    return m_subscription_arn_isSet;
}

bool OAIUnsubscribeInput::is_subscription_arn_Valid() const{
    return m_subscription_arn_isValid;
}

bool OAIUnsubscribeInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subscription_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnsubscribeInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subscription_arn_isValid && true;
}

} // namespace OpenAPI
