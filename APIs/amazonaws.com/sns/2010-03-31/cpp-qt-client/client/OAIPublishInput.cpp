/**
 * Amazon Simple Notification Service
 * <fullname>Amazon Simple Notification Service</fullname> <p>Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build distributed web-enabled applications. Applications can use Amazon SNS to easily push real-time notification messages to interested subscribers over multiple delivery protocols. For more information about this product see the <a href=\"http://aws.amazon.com/sns/\">Amazon SNS product page</a>. For detailed information about Amazon SNS features and their associated API calls, see the <a href=\"https://docs.aws.amazon.com/sns/latest/dg/\">Amazon SNS Developer Guide</a>. </p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/sns/latest/dg/sns-authentication-and-access-control.html\">Identity and access management in Amazon SNS</a> in the <i>Amazon SNS Developer Guide.</i> </p> <p>We also provide SDKs that enable you to access Amazon SNS from your preferred programming language. The SDKs contain functionality that automatically takes care of tasks such as: cryptographically signing your service requests, retrying requests, and handling error responses. For a list of available SDKs, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>. </p>
 *
 * The version of the OpenAPI document: 2010-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishInput::OAIPublishInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishInput::OAIPublishInput() {
    this->initializeModel();
}

OAIPublishInput::~OAIPublishInput() {}

void OAIPublishInput::initializeModel() {

    m_topic_arn_isSet = false;
    m_topic_arn_isValid = false;

    m_target_arn_isSet = false;
    m_target_arn_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_message_structure_isSet = false;
    m_message_structure_isValid = false;

    m_message_attributes_isSet = false;
    m_message_attributes_isValid = false;

    m_message_deduplication_id_isSet = false;
    m_message_deduplication_id_isValid = false;

    m_message_group_id_isSet = false;
    m_message_group_id_isValid = false;
}

void OAIPublishInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishInput::fromJsonObject(QJsonObject json) {

    m_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_topic_arn, json[QString("TopicArn")]);
    m_topic_arn_isSet = !json[QString("TopicArn")].isNull() && m_topic_arn_isValid;

    m_target_arn_isValid = ::OpenAPI::fromJsonValue(m_target_arn, json[QString("TargetArn")]);
    m_target_arn_isSet = !json[QString("TargetArn")].isNull() && m_target_arn_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("PhoneNumber")]);
    m_phone_number_isSet = !json[QString("PhoneNumber")].isNull() && m_phone_number_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_message_structure_isValid = ::OpenAPI::fromJsonValue(m_message_structure, json[QString("MessageStructure")]);
    m_message_structure_isSet = !json[QString("MessageStructure")].isNull() && m_message_structure_isValid;

    m_message_attributes_isValid = ::OpenAPI::fromJsonValue(m_message_attributes, json[QString("MessageAttributes")]);
    m_message_attributes_isSet = !json[QString("MessageAttributes")].isNull() && m_message_attributes_isValid;

    m_message_deduplication_id_isValid = ::OpenAPI::fromJsonValue(m_message_deduplication_id, json[QString("MessageDeduplicationId")]);
    m_message_deduplication_id_isSet = !json[QString("MessageDeduplicationId")].isNull() && m_message_deduplication_id_isValid;

    m_message_group_id_isValid = ::OpenAPI::fromJsonValue(m_message_group_id, json[QString("MessageGroupId")]);
    m_message_group_id_isSet = !json[QString("MessageGroupId")].isNull() && m_message_group_id_isValid;
}

QString OAIPublishInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishInput::asJsonObject() const {
    QJsonObject obj;
    if (m_topic_arn_isSet) {
        obj.insert(QString("TopicArn"), ::OpenAPI::toJsonValue(m_topic_arn));
    }
    if (m_target_arn_isSet) {
        obj.insert(QString("TargetArn"), ::OpenAPI::toJsonValue(m_target_arn));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("PhoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_message_structure_isSet) {
        obj.insert(QString("MessageStructure"), ::OpenAPI::toJsonValue(m_message_structure));
    }
    if (m_message_attributes.isSet()) {
        obj.insert(QString("MessageAttributes"), ::OpenAPI::toJsonValue(m_message_attributes));
    }
    if (m_message_deduplication_id_isSet) {
        obj.insert(QString("MessageDeduplicationId"), ::OpenAPI::toJsonValue(m_message_deduplication_id));
    }
    if (m_message_group_id_isSet) {
        obj.insert(QString("MessageGroupId"), ::OpenAPI::toJsonValue(m_message_group_id));
    }
    return obj;
}

QString OAIPublishInput::getTopicArn() const {
    return m_topic_arn;
}
void OAIPublishInput::setTopicArn(const QString &topic_arn) {
    m_topic_arn = topic_arn;
    m_topic_arn_isSet = true;
}

bool OAIPublishInput::is_topic_arn_Set() const{
    return m_topic_arn_isSet;
}

bool OAIPublishInput::is_topic_arn_Valid() const{
    return m_topic_arn_isValid;
}

QString OAIPublishInput::getTargetArn() const {
    return m_target_arn;
}
void OAIPublishInput::setTargetArn(const QString &target_arn) {
    m_target_arn = target_arn;
    m_target_arn_isSet = true;
}

bool OAIPublishInput::is_target_arn_Set() const{
    return m_target_arn_isSet;
}

bool OAIPublishInput::is_target_arn_Valid() const{
    return m_target_arn_isValid;
}

QString OAIPublishInput::getPhoneNumber() const {
    return m_phone_number;
}
void OAIPublishInput::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIPublishInput::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIPublishInput::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIPublishInput::getMessage() const {
    return m_message;
}
void OAIPublishInput::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPublishInput::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPublishInput::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIPublishInput::getSubject() const {
    return m_subject;
}
void OAIPublishInput::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIPublishInput::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIPublishInput::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIPublishInput::getMessageStructure() const {
    return m_message_structure;
}
void OAIPublishInput::setMessageStructure(const QString &message_structure) {
    m_message_structure = message_structure;
    m_message_structure_isSet = true;
}

bool OAIPublishInput::is_message_structure_Set() const{
    return m_message_structure_isSet;
}

bool OAIPublishInput::is_message_structure_Valid() const{
    return m_message_structure_isValid;
}

QMap OAIPublishInput::getMessageAttributes() const {
    return m_message_attributes;
}
void OAIPublishInput::setMessageAttributes(const QMap &message_attributes) {
    m_message_attributes = message_attributes;
    m_message_attributes_isSet = true;
}

bool OAIPublishInput::is_message_attributes_Set() const{
    return m_message_attributes_isSet;
}

bool OAIPublishInput::is_message_attributes_Valid() const{
    return m_message_attributes_isValid;
}

QString OAIPublishInput::getMessageDeduplicationId() const {
    return m_message_deduplication_id;
}
void OAIPublishInput::setMessageDeduplicationId(const QString &message_deduplication_id) {
    m_message_deduplication_id = message_deduplication_id;
    m_message_deduplication_id_isSet = true;
}

bool OAIPublishInput::is_message_deduplication_id_Set() const{
    return m_message_deduplication_id_isSet;
}

bool OAIPublishInput::is_message_deduplication_id_Valid() const{
    return m_message_deduplication_id_isValid;
}

QString OAIPublishInput::getMessageGroupId() const {
    return m_message_group_id;
}
void OAIPublishInput::setMessageGroupId(const QString &message_group_id) {
    m_message_group_id = message_group_id;
    m_message_group_id_isSet = true;
}

bool OAIPublishInput::is_message_group_id_Set() const{
    return m_message_group_id_isSet;
}

bool OAIPublishInput::is_message_group_id_Valid() const{
    return m_message_group_id_isValid;
}

bool OAIPublishInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_structure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_deduplication_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && true;
}

} // namespace OpenAPI
