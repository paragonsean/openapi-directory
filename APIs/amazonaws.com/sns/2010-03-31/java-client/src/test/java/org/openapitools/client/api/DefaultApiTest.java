/*
 * Amazon Simple Notification Service
 * <fullname>Amazon Simple Notification Service</fullname> <p>Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build distributed web-enabled applications. Applications can use Amazon SNS to easily push real-time notification messages to interested subscribers over multiple delivery protocols. For more information about this product see the <a href=\"http://aws.amazon.com/sns/\">Amazon SNS product page</a>. For detailed information about Amazon SNS features and their associated API calls, see the <a href=\"https://docs.aws.amazon.com/sns/latest/dg/\">Amazon SNS Developer Guide</a>. </p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/sns/latest/dg/sns-authentication-and-access-control.html\">Identity and access management in Amazon SNS</a> in the <i>Amazon SNS Developer Guide.</i> </p> <p>We also provide SDKs that enable you to access Amazon SNS from your preferred programming language. The SDKs contain functionality that automatically takes care of tasks such as: cryptographically signing your service requests, retrying requests, and handling error responses. For a list of available SDKs, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>. </p>
 *
 * The version of the OpenAPI document: 2010-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddPermissionInput;
import org.openapitools.client.model.CheckIfPhoneNumberIsOptedOutInput;
import org.openapitools.client.model.CheckIfPhoneNumberIsOptedOutResponse;
import org.openapitools.client.model.ConfirmSubscriptionInput;
import org.openapitools.client.model.ConfirmSubscriptionResponse;
import org.openapitools.client.model.CreateEndpointResponse;
import org.openapitools.client.model.CreatePlatformApplicationInput;
import org.openapitools.client.model.CreatePlatformApplicationResponse;
import org.openapitools.client.model.CreatePlatformEndpointInput;
import org.openapitools.client.model.CreateSMSSandboxPhoneNumberInput;
import org.openapitools.client.model.CreateTopicInput;
import org.openapitools.client.model.CreateTopicResponse;
import org.openapitools.client.model.DeleteEndpointInput;
import org.openapitools.client.model.DeletePlatformApplicationInput;
import org.openapitools.client.model.DeleteSMSSandboxPhoneNumberInput;
import org.openapitools.client.model.DeleteTopicInput;
import org.openapitools.client.model.GetDataProtectionPolicyInput;
import org.openapitools.client.model.GetDataProtectionPolicyResponse;
import org.openapitools.client.model.GetEndpointAttributesInput;
import org.openapitools.client.model.GetEndpointAttributesResponse;
import org.openapitools.client.model.GetPlatformApplicationAttributesInput;
import org.openapitools.client.model.GetPlatformApplicationAttributesResponse;
import org.openapitools.client.model.GetSMSAttributesInput;
import org.openapitools.client.model.GetSMSAttributesResponse;
import org.openapitools.client.model.GetSMSSandboxAccountStatusResult;
import org.openapitools.client.model.GetSubscriptionAttributesInput;
import org.openapitools.client.model.GetSubscriptionAttributesResponse;
import org.openapitools.client.model.GetTopicAttributesInput;
import org.openapitools.client.model.GetTopicAttributesResponse;
import org.openapitools.client.model.ListEndpointsByPlatformApplicationInput;
import org.openapitools.client.model.ListEndpointsByPlatformApplicationResponse;
import org.openapitools.client.model.ListOriginationNumbersRequest;
import org.openapitools.client.model.ListOriginationNumbersResult;
import org.openapitools.client.model.ListPhoneNumbersOptedOutInput;
import org.openapitools.client.model.ListPhoneNumbersOptedOutResponse;
import org.openapitools.client.model.ListPlatformApplicationsInput;
import org.openapitools.client.model.ListPlatformApplicationsResponse;
import org.openapitools.client.model.ListSMSSandboxPhoneNumbersInput;
import org.openapitools.client.model.ListSMSSandboxPhoneNumbersResult;
import org.openapitools.client.model.ListSubscriptionsByTopicInput;
import org.openapitools.client.model.ListSubscriptionsByTopicResponse;
import org.openapitools.client.model.ListSubscriptionsInput;
import org.openapitools.client.model.ListSubscriptionsResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTopicsInput;
import org.openapitools.client.model.ListTopicsResponse;
import org.openapitools.client.model.MessageAttributeValue;
import org.openapitools.client.model.OptInPhoneNumberInput;
import org.openapitools.client.model.PublishBatchInput;
import org.openapitools.client.model.PublishBatchRequestEntry;
import org.openapitools.client.model.PublishBatchResponse;
import org.openapitools.client.model.PublishInput;
import org.openapitools.client.model.PublishResponse;
import org.openapitools.client.model.PutDataProtectionPolicyInput;
import org.openapitools.client.model.RemovePermissionInput;
import org.openapitools.client.model.SetEndpointAttributesInput;
import org.openapitools.client.model.SetPlatformApplicationAttributesInput;
import org.openapitools.client.model.SetSMSAttributesInput;
import org.openapitools.client.model.SetSubscriptionAttributesInput;
import org.openapitools.client.model.SetTopicAttributesInput;
import org.openapitools.client.model.SubscribeInput;
import org.openapitools.client.model.SubscribeResponse;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UnsubscribeInput;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.VerifySMSSandboxPhoneNumberInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Adds a statement to a topic&#39;s access control policy, granting access for the specified Amazon Web Services accounts to the specified actions.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAddPermissionTest() throws ApiException {
        String topicArn = null;
        String label = null;
        List<String> awSAccountId = null;
        List<String> actionName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETAddPermission(topicArn, label, awSAccountId, actionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that is opted out.&lt;/p&gt; &lt;p&gt;To resume sending messages, you can opt in the number by using the &lt;code&gt;OptInPhoneNumber&lt;/code&gt; action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCheckIfPhoneNumberIsOptedOutTest() throws ApiException {
        String phoneNumber = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CheckIfPhoneNumberIsOptedOutResponse response = api.gETCheckIfPhoneNumberIsOptedOut(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Verifies an endpoint owner&#39;s intent to receive messages by validating the token sent to the endpoint by an earlier &lt;code&gt;Subscribe&lt;/code&gt; action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the &lt;code&gt;AuthenticateOnUnsubscribe&lt;/code&gt; flag is set to \&quot;true\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETConfirmSubscriptionTest() throws ApiException {
        String topicArn = null;
        String token = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String authenticateOnUnsubscribe = null;
        ConfirmSubscriptionResponse response = api.gETConfirmSubscription(topicArn, token, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authenticateOnUnsubscribe);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile apps may register. You must specify &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; attributes when using the &lt;code&gt;CreatePlatformApplication&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; are received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;ADM&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;client id&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;client secret&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;Baidu&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using certificate credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;SSL certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using token credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;signing key ID&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;signing key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;GCM&lt;/code&gt; (Firebase Cloud Messaging), there is no &lt;code&gt;PlatformPrincipal&lt;/code&gt; and the &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;MPNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;TLS certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;WNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;Package Security Identifier&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can use the returned &lt;code&gt;PlatformApplicationArn&lt;/code&gt; as an attribute for the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreatePlatformApplicationTest() throws ApiException {
        String name = null;
        String platform = null;
        Map<String, String> attributes = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePlatformApplicationResponse response = api.gETCreatePlatformApplication(name, platform, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; requires the &lt;code&gt;PlatformApplicationArn&lt;/code&gt; that is returned from &lt;code&gt;CreatePlatformApplication&lt;/code&gt;. You can use the returned &lt;code&gt;EndpointArn&lt;/code&gt; to send a message to a mobile app or by the &lt;code&gt;Subscribe&lt;/code&gt; action for subscription to a topic. The &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint&#39;s ARN is returned without creating a new endpoint. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When using &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html\&quot;&gt;Creating an Amazon SNS Endpoint for Baidu&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreatePlatformEndpointTest() throws ApiException {
        String platformApplicationArn = null;
        String token = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String customUserData = null;
        Map<String, String> attributes = null;
        CreateEndpointResponse response = api.gETCreatePlatformEndpoint(platformApplicationArn, token, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, customUserData, attributes);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a one-time password (OTP) to that phone number.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateSMSSandboxPhoneNumberTest() throws ApiException {
        String phoneNumber = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String languageCode = null;
        Object response = api.gETCreateSMSSandboxPhoneNumber(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, languageCode);
        // TODO: test validations
    }

    /**
     * Creates a topic to which notifications can be published. Users can create at most 100,000 standard topics (at most 1,000 FIFO topics). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html\&quot;&gt;Creating an Amazon SNS topic&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;. This action is idempotent, so if the requester already owns a topic with the specified name, that topic&#39;s ARN is returned without creating a new topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateTopicTest() throws ApiException {
        String name = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Map<String, String> attributes = null;
        List<Tag> tags = null;
        String dataProtectionPolicy = null;
        CreateTopicResponse response = api.gETCreateTopic(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributes, tags, dataProtectionPolicy);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteEndpointTest() throws ApiException {
        String endpointArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteEndpoint(endpointArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeletePlatformApplicationTest() throws ApiException {
        String platformApplicationArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeletePlatformApplication(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an Amazon Web Services account&#39;s verified or pending phone number from the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteSMSSandboxPhoneNumberTest() throws ApiException {
        String phoneNumber = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETDeleteSMSSandboxPhoneNumber(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteTopicTest() throws ApiException {
        String topicArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteTopic(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the specified inline &lt;code&gt;DataProtectionPolicy&lt;/code&gt; document that is stored in the specified Amazon SNS topic. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetDataProtectionPolicyTest() throws ApiException {
        String resourceArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataProtectionPolicyResponse response = api.gETGetDataProtectionPolicy(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetEndpointAttributesTest() throws ApiException {
        String endpointArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEndpointAttributesResponse response = api.gETGetEndpointAttributes(endpointArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetPlatformApplicationAttributesTest() throws ApiException {
        String platformApplicationArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPlatformApplicationAttributesResponse response = api.gETGetPlatformApplicationAttributes(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the settings for sending SMS messages from your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;These settings are set with the &lt;code&gt;SetSMSAttributes&lt;/code&gt; action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetSMSAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> attributes = null;
        GetSMSAttributesResponse response = api.gETGetSMSAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributes);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetSMSSandboxAccountStatusTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSMSSandboxAccountStatusResult response = api.gETGetSMSSandboxAccountStatus(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns all of the properties of a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetSubscriptionAttributesTest() throws ApiException {
        String subscriptionArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSubscriptionAttributesResponse response = api.gETGetSubscriptionAttributes(subscriptionArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetTopicAttributesTest() throws ApiException {
        String topicArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTopicAttributesResponse response = api.gETGetTopicAttributes(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListEndpointsByPlatformApplicationTest() throws ApiException {
        String platformApplicationArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListEndpointsByPlatformApplicationResponse response = api.gETListEndpointsByPlatformApplication(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the calling Amazon Web Services account&#39;s dedicated origination numbers and their metadata. For more information about origination numbers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/channels-sms-originating-identities-origination-numbers.html\&quot;&gt;Origination numbers&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListOriginationNumbersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListOriginationNumbersResult response = api.gETListOriginationNumbers(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them.&lt;/p&gt; &lt;p&gt;The results for &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a &lt;code&gt;NextToken&lt;/code&gt; string will be returned. To receive the next page, you call &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; again using the &lt;code&gt;NextToken&lt;/code&gt; string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListPhoneNumbersOptedOutTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListPhoneNumbersOptedOutResponse response = api.gETListPhoneNumbersOptedOut(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the platform application objects for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). The results for &lt;code&gt;ListPlatformApplications&lt;/code&gt; are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListPlatformApplications&lt;/code&gt; using the NextToken string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 15 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListPlatformApplicationsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListPlatformApplicationsResponse response = api.gETListPlatformApplications(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the calling Amazon Web Services account&#39;s current verified and pending destination phone numbers in the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListSMSSandboxPhoneNumbersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListSMSSandboxPhoneNumbersResult response = api.gETListSMSSandboxPhoneNumbers(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of the requester&#39;s subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptions&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListSubscriptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListSubscriptionsResponse response = api.gETListSubscriptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptionsByTopic&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListSubscriptionsByTopicTest() throws ApiException {
        String topicArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListSubscriptionsByTopicResponse response = api.gETListSubscriptionsByTopic(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * List all tags added to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon Simple Notification Service Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.gETListTagsForResource(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of the requester&#39;s topics. Each call returns a limited list of topics, up to 100. If there are more topics, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListTopics&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListTopicsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListTopicsResponse response = api.gETListTopics(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number.&lt;/p&gt; &lt;p&gt;You can opt in a phone number only once every 30 days.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETOptInPhoneNumberTest() throws ApiException {
        String phoneNumber = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETOptInPhoneNumber(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone number, or a message to a mobile platform endpoint (when you specify the &lt;code&gt;TargetArn&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is subscribed to the topic. The format of the message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the message is saved and Amazon SNS immediately delivers it to subscribers.&lt;/p&gt; &lt;p&gt;To use the &lt;code&gt;Publish&lt;/code&gt; action for publishing a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action. &lt;/p&gt; &lt;p&gt;For more information about formatting messages, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html\&quot;&gt;Send Custom Platform-Specific Payloads in Messages to Mobile Devices&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can publish messages only to topics and endpoints in the same Amazon Web Services Region.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETPublishTest() throws ApiException {
        String message = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String topicArn = null;
        String targetArn = null;
        String phoneNumber = null;
        String subject = null;
        String messageStructure = null;
        Map<String, MessageAttributeValue> messageAttributes = null;
        String messageDeduplicationId = null;
        String messageGroupId = null;
        PublishResponse response = api.gETPublish(message, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, topicArn, targetArn, phoneNumber, subject, messageStructure, messageAttributes, messageDeduplicationId, messageGroupId);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Publishes up to ten messages to the specified topic. This is a batch version of &lt;code&gt;Publish&lt;/code&gt;. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes.&lt;/p&gt; &lt;p&gt;The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes). &lt;/p&gt; &lt;p&gt;Some actions take lists of parameters. These lists are specified using the &lt;code&gt;param.n&lt;/code&gt; notation. Values of &lt;code&gt;n&lt;/code&gt; are integers starting from 1. For example, a parameter list with two elements looks like this: &lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.1&#x3D;first&lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.2&#x3D;second&lt;/p&gt; &lt;p&gt;If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is subscribed to the topic. The format of the batch message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETPublishBatchTest() throws ApiException {
        String topicArn = null;
        List<PublishBatchRequestEntry> publishBatchRequestEntries = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PublishBatchResponse response = api.gETPublishBatch(topicArn, publishBatchRequestEntries, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds or updates an inline policy document that is stored in the specified Amazon SNS topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETPutDataProtectionPolicyTest() throws ApiException {
        String resourceArn = null;
        String dataProtectionPolicy = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETPutDataProtectionPolicy(resourceArn, dataProtectionPolicy, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes a statement from a topic&#39;s access control policy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRemovePermissionTest() throws ApiException {
        String topicArn = null;
        String label = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETRemovePermission(topicArn, label, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSetEndpointAttributesTest() throws ApiException {
        String endpointArn = null;
        Map<String, String> attributes = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETSetEndpointAttributes(endpointArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. For information on configuring attributes for message delivery status, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html\&quot;&gt;Using Amazon SNS Application Attributes for Message Delivery Status&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSetPlatformApplicationAttributesTest() throws ApiException {
        String platformApplicationArn = null;
        Map<String, String> attributes = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETSetPlatformApplicationAttributes(platformApplicationArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports.&lt;/p&gt; &lt;p&gt;You can override some of these settings for a single message when you use the &lt;code&gt;Publish&lt;/code&gt; action with the &lt;code&gt;MessageAttributes.entry.N&lt;/code&gt; parameter. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html\&quot;&gt;Publishing to a mobile phone&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To use this operation, you must grant the Amazon SNS service principal (&lt;code&gt;sns.amazonaws.com&lt;/code&gt;) permission to perform the &lt;code&gt;s3:ListBucket&lt;/code&gt; action. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSetSMSAttributesTest() throws ApiException {
        Map<String, String> attributes = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETSetSMSAttributes(attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows a subscription owner to set an attribute of the subscription to a new value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSetSubscriptionAttributesTest() throws ApiException {
        String subscriptionArn = null;
        String attributeName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String attributeValue = null;
        api.gETSetSubscriptionAttributes(subscriptionArn, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeValue);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Allows a topic owner to set an attribute of the topic to a new value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSetTopicAttributesTest() throws ApiException {
        String topicArn = null;
        String attributeName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String attributeValue = null;
        api.gETSetTopicAttributes(topicArn, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeValue);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must run the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action to confirm the subscription.&lt;/p&gt; &lt;p&gt;You call the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with the token from the subscription response. Confirmation tokens are valid for three days.&lt;/p&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSubscribeTest() throws ApiException {
        String topicArn = null;
        String protocol = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String endpoint = null;
        Map<String, String> attributes = null;
        Boolean returnSubscriptionArn = null;
        SubscribeResponse response = api.gETSubscribe(topicArn, protocol, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endpoint, attributes, returnSubscriptionArn);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Add tags to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use topic tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a topic isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SNS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your application requires a higher throughput, file a &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;technical\&quot;&gt;technical support request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETTagResourceTest() throws ApiException {
        String resourceArn = null;
        List<Tag> tags = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETTagResource(resourceArn, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic&#39;s owner can unsubscribe, and an Amazon Web Services signature is required. If the &lt;code&gt;Unsubscribe&lt;/code&gt; call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the &lt;code&gt;Unsubscribe&lt;/code&gt; request was unintended.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon SQS queue subscriptions require authentication for deletion. Only the owner of the subscription, or the owner of the topic can unsubscribe using the required Amazon Web Services signature.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETUnsubscribeTest() throws ApiException {
        String subscriptionArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETUnsubscribe(subscriptionArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Remove tags from the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETUntagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETUntagResource(resourceArn, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETVerifySMSSandboxPhoneNumberTest() throws ApiException {
        String phoneNumber = null;
        String oneTimePassword = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETVerifySMSSandboxPhoneNumber(phoneNumber, oneTimePassword, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds a statement to a topic&#39;s access control policy, granting access for the specified Amazon Web Services accounts to the specified actions.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAddPermissionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddPermissionInput addPermissionInput = null;
        api.pOSTAddPermission(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addPermissionInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that is opted out.&lt;/p&gt; &lt;p&gt;To resume sending messages, you can opt in the number by using the &lt;code&gt;OptInPhoneNumber&lt;/code&gt; action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCheckIfPhoneNumberIsOptedOutTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CheckIfPhoneNumberIsOptedOutInput checkIfPhoneNumberIsOptedOutInput = null;
        CheckIfPhoneNumberIsOptedOutResponse response = api.pOSTCheckIfPhoneNumberIsOptedOut(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, checkIfPhoneNumberIsOptedOutInput);
        // TODO: test validations
    }

    /**
     * Verifies an endpoint owner&#39;s intent to receive messages by validating the token sent to the endpoint by an earlier &lt;code&gt;Subscribe&lt;/code&gt; action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the &lt;code&gt;AuthenticateOnUnsubscribe&lt;/code&gt; flag is set to \&quot;true\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTConfirmSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ConfirmSubscriptionInput confirmSubscriptionInput = null;
        ConfirmSubscriptionResponse response = api.pOSTConfirmSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, confirmSubscriptionInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile apps may register. You must specify &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; attributes when using the &lt;code&gt;CreatePlatformApplication&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; are received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;ADM&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;client id&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;client secret&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;Baidu&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using certificate credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;SSL certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using token credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;signing key ID&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;signing key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;GCM&lt;/code&gt; (Firebase Cloud Messaging), there is no &lt;code&gt;PlatformPrincipal&lt;/code&gt; and the &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;MPNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;TLS certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;WNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;Package Security Identifier&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can use the returned &lt;code&gt;PlatformApplicationArn&lt;/code&gt; as an attribute for the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreatePlatformApplicationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePlatformApplicationInput createPlatformApplicationInput = null;
        CreatePlatformApplicationResponse response = api.pOSTCreatePlatformApplication(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformApplicationInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; requires the &lt;code&gt;PlatformApplicationArn&lt;/code&gt; that is returned from &lt;code&gt;CreatePlatformApplication&lt;/code&gt;. You can use the returned &lt;code&gt;EndpointArn&lt;/code&gt; to send a message to a mobile app or by the &lt;code&gt;Subscribe&lt;/code&gt; action for subscription to a topic. The &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint&#39;s ARN is returned without creating a new endpoint. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When using &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html\&quot;&gt;Creating an Amazon SNS Endpoint for Baidu&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreatePlatformEndpointTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePlatformEndpointInput createPlatformEndpointInput = null;
        CreateEndpointResponse response = api.pOSTCreatePlatformEndpoint(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformEndpointInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a one-time password (OTP) to that phone number.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateSMSSandboxPhoneNumberTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSMSSandboxPhoneNumberInput createSMSSandboxPhoneNumberInput = null;
        Object response = api.pOSTCreateSMSSandboxPhoneNumber(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createSMSSandboxPhoneNumberInput);
        // TODO: test validations
    }

    /**
     * Creates a topic to which notifications can be published. Users can create at most 100,000 standard topics (at most 1,000 FIFO topics). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html\&quot;&gt;Creating an Amazon SNS topic&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;. This action is idempotent, so if the requester already owns a topic with the specified name, that topic&#39;s ARN is returned without creating a new topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateTopicTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTopicInput createTopicInput = null;
        CreateTopicResponse response = api.pOSTCreateTopic(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createTopicInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteEndpointTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEndpointInput deleteEndpointInput = null;
        api.pOSTDeleteEndpoint(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEndpointInput);
        // TODO: test validations
    }

    /**
     * Deletes a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeletePlatformApplicationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeletePlatformApplicationInput deletePlatformApplicationInput = null;
        api.pOSTDeletePlatformApplication(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePlatformApplicationInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an Amazon Web Services account&#39;s verified or pending phone number from the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteSMSSandboxPhoneNumberTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSMSSandboxPhoneNumberInput deleteSMSSandboxPhoneNumberInput = null;
        Object response = api.pOSTDeleteSMSSandboxPhoneNumber(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSMSSandboxPhoneNumberInput);
        // TODO: test validations
    }

    /**
     * Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteTopicTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteTopicInput deleteTopicInput = null;
        api.pOSTDeleteTopic(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTopicInput);
        // TODO: test validations
    }

    /**
     * Retrieves the specified inline &lt;code&gt;DataProtectionPolicy&lt;/code&gt; document that is stored in the specified Amazon SNS topic. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetDataProtectionPolicyTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataProtectionPolicyInput getDataProtectionPolicyInput = null;
        GetDataProtectionPolicyResponse response = api.pOSTGetDataProtectionPolicy(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getDataProtectionPolicyInput);
        // TODO: test validations
    }

    /**
     * Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetEndpointAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEndpointAttributesInput getEndpointAttributesInput = null;
        GetEndpointAttributesResponse response = api.pOSTGetEndpointAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getEndpointAttributesInput);
        // TODO: test validations
    }

    /**
     * Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetPlatformApplicationAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPlatformApplicationAttributesInput getPlatformApplicationAttributesInput = null;
        GetPlatformApplicationAttributesResponse response = api.pOSTGetPlatformApplicationAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getPlatformApplicationAttributesInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the settings for sending SMS messages from your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;These settings are set with the &lt;code&gt;SetSMSAttributes&lt;/code&gt; action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetSMSAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSMSAttributesInput getSMSAttributesInput = null;
        GetSMSAttributesResponse response = api.pOSTGetSMSAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getSMSAttributesInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetSMSSandboxAccountStatusTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object body = null;
        GetSMSSandboxAccountStatusResult response = api.pOSTGetSMSSandboxAccountStatus(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, body);
        // TODO: test validations
    }

    /**
     * Returns all of the properties of a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetSubscriptionAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSubscriptionAttributesInput getSubscriptionAttributesInput = null;
        GetSubscriptionAttributesResponse response = api.pOSTGetSubscriptionAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getSubscriptionAttributesInput);
        // TODO: test validations
    }

    /**
     * Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetTopicAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTopicAttributesInput getTopicAttributesInput = null;
        GetTopicAttributesResponse response = api.pOSTGetTopicAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getTopicAttributesInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListEndpointsByPlatformApplicationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListEndpointsByPlatformApplicationInput listEndpointsByPlatformApplicationInput = null;
        ListEndpointsByPlatformApplicationResponse response = api.pOSTListEndpointsByPlatformApplication(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listEndpointsByPlatformApplicationInput);
        // TODO: test validations
    }

    /**
     * Lists the calling Amazon Web Services account&#39;s dedicated origination numbers and their metadata. For more information about origination numbers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/channels-sms-originating-identities-origination-numbers.html\&quot;&gt;Origination numbers&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListOriginationNumbersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListOriginationNumbersRequest listOriginationNumbersRequest = null;
        ListOriginationNumbersResult response = api.pOSTListOriginationNumbers(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listOriginationNumbersRequest);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them.&lt;/p&gt; &lt;p&gt;The results for &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a &lt;code&gt;NextToken&lt;/code&gt; string will be returned. To receive the next page, you call &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; again using the &lt;code&gt;NextToken&lt;/code&gt; string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListPhoneNumbersOptedOutTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListPhoneNumbersOptedOutInput listPhoneNumbersOptedOutInput = null;
        ListPhoneNumbersOptedOutResponse response = api.pOSTListPhoneNumbersOptedOut(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listPhoneNumbersOptedOutInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the platform application objects for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). The results for &lt;code&gt;ListPlatformApplications&lt;/code&gt; are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListPlatformApplications&lt;/code&gt; using the NextToken string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 15 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListPlatformApplicationsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListPlatformApplicationsInput listPlatformApplicationsInput = null;
        ListPlatformApplicationsResponse response = api.pOSTListPlatformApplications(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listPlatformApplicationsInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the calling Amazon Web Services account&#39;s current verified and pending destination phone numbers in the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListSMSSandboxPhoneNumbersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSMSSandboxPhoneNumbersInput listSMSSandboxPhoneNumbersInput = null;
        ListSMSSandboxPhoneNumbersResult response = api.pOSTListSMSSandboxPhoneNumbers(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listSMSSandboxPhoneNumbersInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of the requester&#39;s subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptions&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListSubscriptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListSubscriptionsInput listSubscriptionsInput = null;
        ListSubscriptionsResponse response = api.pOSTListSubscriptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listSubscriptionsInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptionsByTopic&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListSubscriptionsByTopicTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListSubscriptionsByTopicInput listSubscriptionsByTopicInput = null;
        ListSubscriptionsByTopicResponse response = api.pOSTListSubscriptionsByTopic(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listSubscriptionsByTopicInput);
        // TODO: test validations
    }

    /**
     * List all tags added to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon Simple Notification Service Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListTagsForResourceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        ListTagsForResourceResponse response = api.pOSTListTagsForResource(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceRequest);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of the requester&#39;s topics. Each call returns a limited list of topics, up to 100. If there are more topics, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListTopics&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListTopicsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListTopicsInput listTopicsInput = null;
        ListTopicsResponse response = api.pOSTListTopics(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listTopicsInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number.&lt;/p&gt; &lt;p&gt;You can opt in a phone number only once every 30 days.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTOptInPhoneNumberTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        OptInPhoneNumberInput optInPhoneNumberInput = null;
        Object response = api.pOSTOptInPhoneNumber(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, optInPhoneNumberInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone number, or a message to a mobile platform endpoint (when you specify the &lt;code&gt;TargetArn&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is subscribed to the topic. The format of the message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the message is saved and Amazon SNS immediately delivers it to subscribers.&lt;/p&gt; &lt;p&gt;To use the &lt;code&gt;Publish&lt;/code&gt; action for publishing a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action. &lt;/p&gt; &lt;p&gt;For more information about formatting messages, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html\&quot;&gt;Send Custom Platform-Specific Payloads in Messages to Mobile Devices&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can publish messages only to topics and endpoints in the same Amazon Web Services Region.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTPublishTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PublishInput publishInput = null;
        PublishResponse response = api.pOSTPublish(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Publishes up to ten messages to the specified topic. This is a batch version of &lt;code&gt;Publish&lt;/code&gt;. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes.&lt;/p&gt; &lt;p&gt;The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes). &lt;/p&gt; &lt;p&gt;Some actions take lists of parameters. These lists are specified using the &lt;code&gt;param.n&lt;/code&gt; notation. Values of &lt;code&gt;n&lt;/code&gt; are integers starting from 1. For example, a parameter list with two elements looks like this: &lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.1&#x3D;first&lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.2&#x3D;second&lt;/p&gt; &lt;p&gt;If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is subscribed to the topic. The format of the batch message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTPublishBatchTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PublishBatchInput publishBatchInput = null;
        PublishBatchResponse response = api.pOSTPublishBatch(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishBatchInput);
        // TODO: test validations
    }

    /**
     * Adds or updates an inline policy document that is stored in the specified Amazon SNS topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTPutDataProtectionPolicyTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutDataProtectionPolicyInput putDataProtectionPolicyInput = null;
        api.pOSTPutDataProtectionPolicy(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putDataProtectionPolicyInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes a statement from a topic&#39;s access control policy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRemovePermissionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemovePermissionInput removePermissionInput = null;
        api.pOSTRemovePermission(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removePermissionInput);
        // TODO: test validations
    }

    /**
     * Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSetEndpointAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetEndpointAttributesInput setEndpointAttributesInput = null;
        api.pOSTSetEndpointAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setEndpointAttributesInput);
        // TODO: test validations
    }

    /**
     * Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. For information on configuring attributes for message delivery status, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html\&quot;&gt;Using Amazon SNS Application Attributes for Message Delivery Status&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSetPlatformApplicationAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetPlatformApplicationAttributesInput setPlatformApplicationAttributesInput = null;
        api.pOSTSetPlatformApplicationAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setPlatformApplicationAttributesInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports.&lt;/p&gt; &lt;p&gt;You can override some of these settings for a single message when you use the &lt;code&gt;Publish&lt;/code&gt; action with the &lt;code&gt;MessageAttributes.entry.N&lt;/code&gt; parameter. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html\&quot;&gt;Publishing to a mobile phone&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To use this operation, you must grant the Amazon SNS service principal (&lt;code&gt;sns.amazonaws.com&lt;/code&gt;) permission to perform the &lt;code&gt;s3:ListBucket&lt;/code&gt; action. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSetSMSAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetSMSAttributesInput setSMSAttributesInput = null;
        Object response = api.pOSTSetSMSAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSMSAttributesInput);
        // TODO: test validations
    }

    /**
     * Allows a subscription owner to set an attribute of the subscription to a new value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSetSubscriptionAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetSubscriptionAttributesInput setSubscriptionAttributesInput = null;
        api.pOSTSetSubscriptionAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSubscriptionAttributesInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Allows a topic owner to set an attribute of the topic to a new value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSetTopicAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetTopicAttributesInput setTopicAttributesInput = null;
        api.pOSTSetTopicAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setTopicAttributesInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must run the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action to confirm the subscription.&lt;/p&gt; &lt;p&gt;You call the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with the token from the subscription response. Confirmation tokens are valid for three days.&lt;/p&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSubscribeTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SubscribeInput subscribeInput = null;
        SubscribeResponse response = api.pOSTSubscribe(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscribeInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Add tags to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use topic tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a topic isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SNS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your application requires a higher throughput, file a &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;technical\&quot;&gt;technical support request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTTagResourceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TagResourceRequest tagResourceRequest = null;
        Object response = api.pOSTTagResource(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagResourceRequest);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic&#39;s owner can unsubscribe, and an Amazon Web Services signature is required. If the &lt;code&gt;Unsubscribe&lt;/code&gt; call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the &lt;code&gt;Unsubscribe&lt;/code&gt; request was unintended.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon SQS queue subscriptions require authentication for deletion. Only the owner of the subscription, or the owner of the topic can unsubscribe using the required Amazon Web Services signature.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTUnsubscribeTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UnsubscribeInput unsubscribeInput = null;
        api.pOSTUnsubscribe(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, unsubscribeInput);
        // TODO: test validations
    }

    /**
     * Remove tags from the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTUntagResourceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UntagResourceRequest untagResourceRequest = null;
        Object response = api.pOSTUntagResource(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, untagResourceRequest);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTVerifySMSSandboxPhoneNumberTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        VerifySMSSandboxPhoneNumberInput verifySMSSandboxPhoneNumberInput = null;
        Object response = api.pOSTVerifySMSSandboxPhoneNumber(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, verifySMSSandboxPhoneNumberInput);
        // TODO: test validations
    }

}
