/*
 * Amazon Simple Notification Service
 * <fullname>Amazon Simple Notification Service</fullname> <p>Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build distributed web-enabled applications. Applications can use Amazon SNS to easily push real-time notification messages to interested subscribers over multiple delivery protocols. For more information about this product see the <a href=\"http://aws.amazon.com/sns/\">Amazon SNS product page</a>. For detailed information about Amazon SNS features and their associated API calls, see the <a href=\"https://docs.aws.amazon.com/sns/latest/dg/\">Amazon SNS Developer Guide</a>. </p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/sns/latest/dg/sns-authentication-and-access-control.html\">Identity and access management in Amazon SNS</a> in the <i>Amazon SNS Developer Guide.</i> </p> <p>We also provide SDKs that enable you to access Amazon SNS from your preferred programming language. The SDKs contain functionality that automatically takes care of tasks such as: cryptographically signing your service requests, retrying requests, and handling error responses. For a list of available SDKs, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>. </p>
 *
 * The version of the OpenAPI document: 2010-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The user-specified message attribute value. For string data types, the value attribute has the same restrictions on the content as the message body. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_Publish.html\&quot;&gt;Publish&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Name, type, and value must not be empty or null. In addition, the message body should not be empty or null. All parts of the message attribute, including name, type, and value, are included in the message size restriction, which is currently 256 KB (262,144 bytes). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMessageAttributes.html\&quot;&gt;Amazon SNS message attributes&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html\&quot;&gt;Publishing to a mobile phone&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide.&lt;/i&gt; &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:42.907458-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessageAttributeValue {
  public static final String SERIALIZED_NAME_DATA_TYPE = "DataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private String dataType;

  public static final String SERIALIZED_NAME_STRING_VALUE = "StringValue";
  @SerializedName(SERIALIZED_NAME_STRING_VALUE)
  private String stringValue;

  public static final String SERIALIZED_NAME_BINARY_VALUE = "BinaryValue";
  @SerializedName(SERIALIZED_NAME_BINARY_VALUE)
  private String binaryValue;

  public MessageAttributeValue() {
  }

  public MessageAttributeValue dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Get dataType
   * @return dataType
   */
  @javax.annotation.Nonnull
  public String getDataType() {
    return dataType;
  }

  public void setDataType(String dataType) {
    this.dataType = dataType;
  }


  public MessageAttributeValue stringValue(String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  /**
   * Get stringValue
   * @return stringValue
   */
  @javax.annotation.Nullable
  public String getStringValue() {
    return stringValue;
  }

  public void setStringValue(String stringValue) {
    this.stringValue = stringValue;
  }


  public MessageAttributeValue binaryValue(String binaryValue) {
    this.binaryValue = binaryValue;
    return this;
  }

  /**
   * Get binaryValue
   * @return binaryValue
   */
  @javax.annotation.Nullable
  public String getBinaryValue() {
    return binaryValue;
  }

  public void setBinaryValue(String binaryValue) {
    this.binaryValue = binaryValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageAttributeValue messageAttributeValue = (MessageAttributeValue) o;
    return Objects.equals(this.dataType, messageAttributeValue.dataType) &&
        Objects.equals(this.stringValue, messageAttributeValue.stringValue) &&
        Objects.equals(this.binaryValue, messageAttributeValue.binaryValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataType, stringValue, binaryValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageAttributeValue {\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    stringValue: ").append(toIndentedString(stringValue)).append("\n");
    sb.append("    binaryValue: ").append(toIndentedString(binaryValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DataType");
    openapiFields.add("StringValue");
    openapiFields.add("BinaryValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DataType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessageAttributeValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessageAttributeValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageAttributeValue is not found in the empty JSON string", MessageAttributeValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessageAttributeValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessageAttributeValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MessageAttributeValue.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DataType`
      String.validateJsonElement(jsonObj.get("DataType"));
      // validate the optional field `StringValue`
      if (jsonObj.get("StringValue") != null && !jsonObj.get("StringValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StringValue"));
      }
      // validate the optional field `BinaryValue`
      if (jsonObj.get("BinaryValue") != null && !jsonObj.get("BinaryValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BinaryValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageAttributeValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageAttributeValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageAttributeValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageAttributeValue.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageAttributeValue>() {
           @Override
           public void write(JsonWriter out, MessageAttributeValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageAttributeValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessageAttributeValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessageAttributeValue
   * @throws IOException if the JSON string is invalid with respect to MessageAttributeValue
   */
  public static MessageAttributeValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageAttributeValue.class);
  }

  /**
   * Convert an instance of MessageAttributeValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

