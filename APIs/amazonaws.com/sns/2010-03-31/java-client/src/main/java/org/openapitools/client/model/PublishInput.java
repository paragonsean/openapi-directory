/*
 * Amazon Simple Notification Service
 * <fullname>Amazon Simple Notification Service</fullname> <p>Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build distributed web-enabled applications. Applications can use Amazon SNS to easily push real-time notification messages to interested subscribers over multiple delivery protocols. For more information about this product see the <a href=\"http://aws.amazon.com/sns/\">Amazon SNS product page</a>. For detailed information about Amazon SNS features and their associated API calls, see the <a href=\"https://docs.aws.amazon.com/sns/latest/dg/\">Amazon SNS Developer Guide</a>. </p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/sns/latest/dg/sns-authentication-and-access-control.html\">Identity and access management in Amazon SNS</a> in the <i>Amazon SNS Developer Guide.</i> </p> <p>We also provide SDKs that enable you to access Amazon SNS from your preferred programming language. The SDKs contain functionality that automatically takes care of tasks such as: cryptographically signing your service requests, retrying requests, and handling error responses. For a list of available SDKs, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>. </p>
 *
 * The version of the OpenAPI document: 2010-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Input for Publish action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:42.907458-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublishInput {
  public static final String SERIALIZED_NAME_TOPIC_ARN = "TopicArn";
  @SerializedName(SERIALIZED_NAME_TOPIC_ARN)
  private String topicArn;

  public static final String SERIALIZED_NAME_TARGET_ARN = "TargetArn";
  @SerializedName(SERIALIZED_NAME_TARGET_ARN)
  private String targetArn;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_MESSAGE_STRUCTURE = "MessageStructure";
  @SerializedName(SERIALIZED_NAME_MESSAGE_STRUCTURE)
  private String messageStructure;

  public static final String SERIALIZED_NAME_MESSAGE_ATTRIBUTES = "MessageAttributes";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ATTRIBUTES)
  private Map messageAttributes;

  public static final String SERIALIZED_NAME_MESSAGE_DEDUPLICATION_ID = "MessageDeduplicationId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_DEDUPLICATION_ID)
  private String messageDeduplicationId;

  public static final String SERIALIZED_NAME_MESSAGE_GROUP_ID = "MessageGroupId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_GROUP_ID)
  private String messageGroupId;

  public PublishInput() {
  }

  public PublishInput topicArn(String topicArn) {
    this.topicArn = topicArn;
    return this;
  }

  /**
   * Get topicArn
   * @return topicArn
   */
  @javax.annotation.Nullable
  public String getTopicArn() {
    return topicArn;
  }

  public void setTopicArn(String topicArn) {
    this.topicArn = topicArn;
  }


  public PublishInput targetArn(String targetArn) {
    this.targetArn = targetArn;
    return this;
  }

  /**
   * Get targetArn
   * @return targetArn
   */
  @javax.annotation.Nullable
  public String getTargetArn() {
    return targetArn;
  }

  public void setTargetArn(String targetArn) {
    this.targetArn = targetArn;
  }


  public PublishInput phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public PublishInput message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public PublishInput subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public PublishInput messageStructure(String messageStructure) {
    this.messageStructure = messageStructure;
    return this;
  }

  /**
   * Get messageStructure
   * @return messageStructure
   */
  @javax.annotation.Nullable
  public String getMessageStructure() {
    return messageStructure;
  }

  public void setMessageStructure(String messageStructure) {
    this.messageStructure = messageStructure;
  }


  public PublishInput messageAttributes(Map messageAttributes) {
    this.messageAttributes = messageAttributes;
    return this;
  }

  /**
   * Get messageAttributes
   * @return messageAttributes
   */
  @javax.annotation.Nullable
  public Map getMessageAttributes() {
    return messageAttributes;
  }

  public void setMessageAttributes(Map messageAttributes) {
    this.messageAttributes = messageAttributes;
  }


  public PublishInput messageDeduplicationId(String messageDeduplicationId) {
    this.messageDeduplicationId = messageDeduplicationId;
    return this;
  }

  /**
   * Get messageDeduplicationId
   * @return messageDeduplicationId
   */
  @javax.annotation.Nullable
  public String getMessageDeduplicationId() {
    return messageDeduplicationId;
  }

  public void setMessageDeduplicationId(String messageDeduplicationId) {
    this.messageDeduplicationId = messageDeduplicationId;
  }


  public PublishInput messageGroupId(String messageGroupId) {
    this.messageGroupId = messageGroupId;
    return this;
  }

  /**
   * Get messageGroupId
   * @return messageGroupId
   */
  @javax.annotation.Nullable
  public String getMessageGroupId() {
    return messageGroupId;
  }

  public void setMessageGroupId(String messageGroupId) {
    this.messageGroupId = messageGroupId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublishInput publishInput = (PublishInput) o;
    return Objects.equals(this.topicArn, publishInput.topicArn) &&
        Objects.equals(this.targetArn, publishInput.targetArn) &&
        Objects.equals(this.phoneNumber, publishInput.phoneNumber) &&
        Objects.equals(this.message, publishInput.message) &&
        Objects.equals(this.subject, publishInput.subject) &&
        Objects.equals(this.messageStructure, publishInput.messageStructure) &&
        Objects.equals(this.messageAttributes, publishInput.messageAttributes) &&
        Objects.equals(this.messageDeduplicationId, publishInput.messageDeduplicationId) &&
        Objects.equals(this.messageGroupId, publishInput.messageGroupId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(topicArn, targetArn, phoneNumber, message, subject, messageStructure, messageAttributes, messageDeduplicationId, messageGroupId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublishInput {\n");
    sb.append("    topicArn: ").append(toIndentedString(topicArn)).append("\n");
    sb.append("    targetArn: ").append(toIndentedString(targetArn)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    messageStructure: ").append(toIndentedString(messageStructure)).append("\n");
    sb.append("    messageAttributes: ").append(toIndentedString(messageAttributes)).append("\n");
    sb.append("    messageDeduplicationId: ").append(toIndentedString(messageDeduplicationId)).append("\n");
    sb.append("    messageGroupId: ").append(toIndentedString(messageGroupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TopicArn");
    openapiFields.add("TargetArn");
    openapiFields.add("PhoneNumber");
    openapiFields.add("Message");
    openapiFields.add("Subject");
    openapiFields.add("MessageStructure");
    openapiFields.add("MessageAttributes");
    openapiFields.add("MessageDeduplicationId");
    openapiFields.add("MessageGroupId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Message");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublishInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublishInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublishInput is not found in the empty JSON string", PublishInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublishInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublishInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PublishInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TopicArn`
      if (jsonObj.get("TopicArn") != null && !jsonObj.get("TopicArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TopicArn"));
      }
      // validate the optional field `TargetArn`
      if (jsonObj.get("TargetArn") != null && !jsonObj.get("TargetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetArn"));
      }
      // validate the optional field `PhoneNumber`
      if (jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhoneNumber"));
      }
      // validate the required field `Message`
      String.validateJsonElement(jsonObj.get("Message"));
      // validate the optional field `Subject`
      if (jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Subject"));
      }
      // validate the optional field `MessageStructure`
      if (jsonObj.get("MessageStructure") != null && !jsonObj.get("MessageStructure").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MessageStructure"));
      }
      // validate the optional field `MessageAttributes`
      if (jsonObj.get("MessageAttributes") != null && !jsonObj.get("MessageAttributes").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("MessageAttributes"));
      }
      // validate the optional field `MessageDeduplicationId`
      if (jsonObj.get("MessageDeduplicationId") != null && !jsonObj.get("MessageDeduplicationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MessageDeduplicationId"));
      }
      // validate the optional field `MessageGroupId`
      if (jsonObj.get("MessageGroupId") != null && !jsonObj.get("MessageGroupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MessageGroupId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublishInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublishInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublishInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublishInput.class));

       return (TypeAdapter<T>) new TypeAdapter<PublishInput>() {
           @Override
           public void write(JsonWriter out, PublishInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublishInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublishInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublishInput
   * @throws IOException if the JSON string is invalid with respect to PublishInput
   */
  public static PublishInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublishInput.class);
  }

  /**
   * Convert an instance of PublishInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

